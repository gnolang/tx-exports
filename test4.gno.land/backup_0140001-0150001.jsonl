{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g15dmqzavrxyheqchkdf7ywj3z5pcff397lyfafw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"IMs6ReAwdCfmn0q/hYQhOUPtLW4zZWXeSJ65Z7cbV8YvCYuTLASp50dCR3c2IUSg4YYAks5uY3cgWmwTLeYgeQ=="}],"memo":""},"blockNum":"140001"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g12fz7fd6lw8yk972lnc4nhay8shaq866a5hjjwn","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"aJ4N2Al1li16gmPOERMZX1LHAKTEcC4FF4aVpAyruSQX1p68S3Qp4pStsIcmN2fU2am71xadbQ5+phc1FG3xrA=="}],"memo":""},"blockNum":"140003"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g19z45ljvlknenwmvdh6c9g723hrhy3qgcllzcmg","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"3trTrocYAM41vNhoGA+vZgGWIWtZaqp5cd7oDxjpukI9uLJxlDQ3miJcJdKgIYIdjy1oPmqf7aFofBMI6ljvBA=="}],"memo":""},"blockNum":"140007"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1pdqg7hyvyt8xv9ff03w8fy6ghczpjcwd0m9hvx","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"GRkTqGeSCXKzBFUwon3Bu0UKaUSODg+4iaVEYdGShX4NV2jOB0Zzm/aZz+/pfLb2baRR9nhzBSKip1qVCeFxTQ=="}],"memo":""},"blockNum":"140008"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g15g54062zx94erwpw7947zkkwvewnm5ed4pl4wv","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"gTFU0QJBCUTIYu7bLrrfMc1WZb2edKYz0jv2/YDUiRtkiZBtu/mT3zAygYfA7XtO1hDbXviX+rwVXmmItb0qwQ=="}],"memo":""},"blockNum":"140009"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1gf6j9nh5eeugsr44chqrhkm3vh8v5g3cddmj2w","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"N2+CgY4M1TMQ8hmTttcYPR/ps90mMAU2tVrOFxYuS648MRsa0zWTYX9BwnheYahsI/+TrDWaLfpGB6zLLRNx6w=="}],"memo":""},"blockNum":"140014"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g17vl4r5nmag550l5gcvntqzfgk32r62z80rquxj","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"JKka7yaM2HmKuR2PjI5DI6UbDYIEaWycTNaCCWOa+QNOhu0j9f/eae2NTCFDGxqKXJJ872ZNWgbB4Y+Twtt9JA=="}],"memo":""},"blockNum":"140016"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g14pjgcj9nthh56nc6muner2pzuaeyzzztjnf294","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"rZi5anmIuAz1KeHI/U3aotPwhS7cL8Tg660Fm1TP73A8X3K9jpppY6p+GrNIAMIkTDFt7NDOYwnhhU7Pq6hGfg=="}],"memo":""},"blockNum":"140020"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18a6h2494zdhkspw3ex755xy73mc5kwslq28856","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"RwL+Ot7oQKERVn4YQ4BDYg6YL9N8Qu+81P0f/YvHogUzDbQYUd0XaAbR9b4Nb7RhX/WulGhROcR8mECVCdhv7g=="}],"memo":""},"blockNum":"140022"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1lvh5xz2wl95rxxfqcjjejhcd56x8636r7yedht","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"+nct+YrcQrtjWAI3IEGEcMtNPfOeF9VW+nrHWgaUqCMvAIR44RsaazQQ8a9zEOln91sKHbDCfFfPAy0o5K79og=="}],"memo":""},"blockNum":"140026"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1uw6gvdekgjqqt6y7qavd3l0hedtw98gnfp4q6q","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"xHyk5zMzs6ISbKi0YStMgdJmR2F+pSmQnkMesSFKXhUeNdQEc89PJogW3g9jnFKJX8w2+PlWKKag+QiMQycPYg=="}],"memo":""},"blockNum":"140027"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g17kqlcj96r9chnehs6gs4vr7newcws2uvdkwzl3","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"2AtoWe9Wg7sQ1Vaztv/DevSV99x1e5y9mBsRjL77sgRhGxyGq1degBVhYJ3DBrNBVxWcYivpfK94hRJsF/xGBQ=="}],"memo":""},"blockNum":"140028"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1xysuraz5kzp00j63y705ps4vny9jk54jsv2rjh","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"5mOvCvqwJuV+bOIP2TrUfUZO/6c3afeL3FEZ+7XzxPsQA/+n5JngtQeNsJpq2x1WnabsdqqulEqhly0ce5c71g=="}],"memo":""},"blockNum":"140032"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1g5285cl3d9vrjan7stfe03fs05a3ecuc44xdqs","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"29t4uMpLXYc+nxh0FPB9ATp79HdUlyVIYGw2/wmlW4lEoccCFXwUaIeqeWZO2SGGys0ZD8rn31HQYtp9WGOmmA=="}],"memo":""},"blockNum":"140033"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1l8fvegm747pvgclgn0grsdewsd9rwqzt3nvm9k","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"BT+OsjG4b9xKA87s2ytRQsphbBes89K+VJRi5L5CRf40MSGi2PLQFJ+ggaHkAXFNrOMc2WgBaHd6SZsJneD49Q=="}],"memo":""},"blockNum":"140037"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1qs0fa59q6yq4twx80tgfz6f2qgleq0u7helhjj","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"JHS820yBytJDTRvP7uFfOxQkSNuFyCAQa78b0Yb1EYcKm96Ym0O2Pi1CdXO/ZYV0/cItn5p7scbxqyKxAJyiQQ=="}],"memo":""},"blockNum":"140038"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1hl8nvr0wyr2mrxkrctxps9zudcy9pg9gv20ucc","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"/cfZ50J2laRmBUIkBZOCQyxEZ15Htb8SldMMKMwZ49o79BpVstaqyvXi4IiZNNYKXnHordbDqv0s/yuuTovTgQ=="}],"memo":""},"blockNum":"140042"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g127v67xsp5pggf82mc795q5zfggj3844e7whccf","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"cyGzjHtl2o3zKZyhh/AKbb26amv41boB5yC997h5/XliH/27TpB2hSa35JFm/3Unz6tgg9YxImEtwy12SKPI5g=="}],"memo":""},"blockNum":"140043"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1a4v25fdlz5vu9dxmpzdxxd2ywld38vdqyjr7aj","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"LY6wPeI620Awj/WiPe1PEXgwJRpqgGmocAY1AjWWMdgPB9SajbxnLf549tcH0Su9VWRN25U1SJB78fTUJHSZEw=="}],"memo":""},"blockNum":"140047"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10m578nvr7my8zrjxm6xy8g5vzvyyd4yfxy2zrm","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"GDF7dqApgvvVEn57oOF+V6/N+2UlNJnKwaA+Xs7YndI4GHWo20eE1jv4xyR9OAc1oP4ud54cKD/jcZWtpDk63w=="}],"memo":""},"blockNum":"140051"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1kjs7lkry8kxn54v2ne3gp8a88ruh2xa54q5kq3","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"tY7GwtRV3+9bnO2sXfAcd6V4O+zHyOCrRQcjHMXqsOdqjqGiTfc5tGWqelcnGhhmT73nBRTcgoy4uGYWFBFipg=="}],"memo":""},"blockNum":"140055"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g15ayfd2cr4c4xn30v4tmyuqfvt4pnsq2afzsh4y","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"5tsNg6uCcc2TEPI06HL3at+xk08540jkAmagjMiX2wcqSXQExRbowLJwmL+y/1oJTvDbzkz13dppveMIOeX4xw=="}],"memo":""},"blockNum":"140056"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1hd8kf67z62csqct88xqvjq7tqp555j97twmg7z","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"eaa1spvsQ2jcAajFPC+tAOMOenpdXg+tFv/Y8IxtY2dNJ790igZeaVfcb8Oaqf9H9eCOs4ytECjvsGvN+QKlIQ=="}],"memo":""},"blockNum":"140058"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1lcma4agr2cmxvu646g9z7rtdvsxuypw5lt7p57","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"fFJK7H+AKfZuSu7Gi86Y9WTb5paAfG8lMm38JBqhlNcm1teTJfZEQMRiVSWjB701vwWJndb9k9ictpGqIKkCOQ=="}],"memo":""},"blockNum":"140062"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g16s572q63u7s3cm3ee3l2nv0zv79kl7uuhmuqwj","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"NZTaXtld+aSyHLHJgBzNpChkesG4bfhfYNgiBNhcPEYIfbI7Z4p+PpK3XlDiYo4i2sWdlSdVnv1qWjer7ByASQ=="}],"memo":""},"blockNum":"140063"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1vf99xaq2rxn0wp5a6c22vxzwesx6akern34xe9","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"FHI4DV3i38aiphV4V0FvaFFxdgoVQpWLuz76I8xG5YZH0SgUg+yPSU6Y3PYhuEQJf2HHhN4FfJS380aOtan21g=="}],"memo":""},"blockNum":"140067"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1e3wndpf55739t0s40p7mjf9k43l7zf48g89cs5","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"6f4ctVHGf+zFigUAS8gmmUs+23z4mwV9lUspOgVpRfpoJ8i/8vm/wCagsYuV4Hgx93PeQ/YyG5l4qyoO9jINDw=="}],"memo":""},"blockNum":"140068"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1j8p0xnpu05mkqlwc7lmxnuken4de3eph82s9n4","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Ze7em/2QXrI6F8Z5Jy19NilQzOd59EEO2lb1cUNGw79ARX0Xr0EgDADUkpWJVOSjk7ols8CcJpm+axEnqQDy+g=="}],"memo":""},"blockNum":"140069"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1wxkylele2jmls2elwkx84ewy6ldxucjnap9055","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"a0HEA+OA5PNtTzpYohfglpbBRodNvmnqVZ9Ogrn0Cfhz9CprqVBp01VG9TG7S9TLxmWeG1fhsgPAn5rTilv5ZQ=="}],"memo":""},"blockNum":"140073"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1l72mucwwchxc78mxcatrxqx4auukmp4quz7wsf","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Cy9r5VThXqT1HYPdsuFBTKVanlpsHUXppnueYgXq++4pLMiULI4M3V3txvE/gAyF8zsVOniZ17pLAztdHM8bIQ=="}],"memo":""},"blockNum":"140074"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18w04pu9zlvga735tc8yrc0c0qunvtp62nkaw4v","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"RRZ9WKQLjW740pVrzNWf6pcbBMXpyaZmtavVKmHKMAAgf/EJwIK5vuSWpoldKCCQm5pG/zNLhg5F9Bp5Bmnbjw=="}],"memo":""},"blockNum":"140104"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1f4g2et0dml5uhestl86uthjurhjrpt8uw83y07","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"vpHr13Qh6ZZpN0cjVYlOC1yOIalHiImc+7C8gkxhVflOk45SZGLQBw/1cdMlfcn7BokFBNDeXcVSER20gmw0sg=="}],"memo":""},"blockNum":"140106"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1n3tpfksjzd8las0w4rc050dchv47kdnpqv259a","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"+EINLFygG7VItP7exltgBk8ag1bKE1kP9RUMAvOUSrQsBzkay4Efgjcgtw6FyAOQE6limZKV18um3DjMfdbpAA=="}],"memo":""},"blockNum":"140110"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18vex60rrdkycz74dzxyhgsefv0u4nxfq09guqd","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"svkLjyNp5SOlMKmDTpy9y/4Cvx6S5jl1qmQPY0TKRqA0E2x205C/budUVcobfuFpS91nAZEBfHnX6Rqe/v3d9g=="}],"memo":""},"blockNum":"140111"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1x74ttgf9ylasv7cfuhy8mcxgscg4lc79khfsmu","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Bqq+ibeQqs+m8b3dJWUZxIxnF5o10+gZCd3nOh8toixPv0oXQZ6lQ+ZF3YDxJaSsAGQ/o6KsM3hIwMGm1eqXQQ=="}],"memo":""},"blockNum":"140112"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1p3q8sq9jjaht2ed835rnl2lp3axmysp5lqmxxf","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"jzauUFaCEtvhCGUvGtdKAHJJODnaMjZlQ/CkFnbg1uo3dPDwGkEmoL5rf4us4xALMPSfRVqIoCQnH//5qb5Q8A=="}],"memo":""},"blockNum":"140116"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1zxhrp33k3kc77gxltaj24fwfhmgm59098h38yr","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"KVTuTGcXro0st8V9BMYvZEbuhnQBoww25HIyn2ffQqkY1vFsUTilZOpUDLTI1hsImaJ/bfwmIygK4YU+2Zn3RA=="}],"memo":""},"blockNum":"140117"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1u6rrfsffcfzffuxxk646hlpaqyxv8vcfwxln2s","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"P+cgd3BuXwj7Ix5v9GHkIhcXF/AicDPntHnGcqBDW65sI9eUU217AkTXNYpIxB2q4GJAXh5O50f8r4TnDxlL4w=="}],"memo":""},"blockNum":"140122"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g15vvsjev2efuljctkr6m4rnx7lhe4qmxkmlxa0c","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"hIhXsAA54euZAxyBP0y0c6cDwNPayeZItONzvqLpwTc8O1WJTepfir/JL0YPI1k0SVrS7OYig9/iX3Ts2huHhw=="}],"memo":""},"blockNum":"140124"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1fe6sh2vg0gvwdtvrgrczadhfdc80cmut5wmm00","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"uTJzPJG5xRvyuTmf+3paxAN0PHjXo5xC697kuytw9FVfCw7ga09K7ZMI3AndSznjujnL0pz+4KuTKXVHCgakHw=="}],"memo":""},"blockNum":"140129"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1k2nt67nsramr43y88yq66zj5uew80aakz4c45e","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"gYk6ii6DyzsGy3iNJmVQ9JScEx9yH7Fxa8Tieah9mUwamSn6YX5aGAamMU/W9gUR3AfdY6jR30AI8E2bPGtrvw=="}],"memo":""},"blockNum":"140131"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10mvxlesu3k59vgvfjtj854alenxtmuphu29mw2","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"J3xS7oHnzepNgYQKB0hnsP/DHeIP6Q45dR1sXIfiKElQyR1Glt9XQYtRzcvKubnw/kqa0xmz4/dU+OV9WgZBGw=="}],"memo":""},"blockNum":"140135"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1rrsgf2g0lh0hrukmyftv05lhkfyru3sf308xla","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"76cnfJzIFYX/C/GnPt14RszbnJZs106OxQOOuvinWOlP2uqZsCfAyORjZGIlU38l3o051/jzibyuZT/SAZByYA=="}],"memo":""},"blockNum":"140139"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g19tccxxmq9u60pcupegdhhmzuncsj8efyzyltzk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"DVq3OX5UqD36ExejeYa2aOf70Ge8b21IVpcUZLKQQdxSot1+zAwQqwAkk1x3e5QZ4t+7y9BPjRI9bucmwTFKsw=="}],"memo":""},"blockNum":"140140"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1p620jum2af3p4mwz52wdl7k0t5nr6yf7f5rxf0","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"uUVRslBPyf1/2HcP9wEqpG/Te1m2Ht1NSMC8pckp6/R5wIYO6Wg+KAxwu8pEc7HHW/Um5sWU5gaXG1jtuFLicg=="}],"memo":""},"blockNum":"140141"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10ff3k6dc8qqcv8ja46zjcmcjl7zfkphprrjmaw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"uDpabOXmCkOvgFb4NRpvoyRrrGC5WavNVO/eQ9/jm+ZTZ1X+at1W3hMPfEqqelbgo+4M+q0/NHcJRgo2qU74NA=="}],"memo":""},"blockNum":"140145"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1520znuh66tm7zv62ydwakj6sznyst20f9p9ypf","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"5/QuTjMARyMfbTCT2gqHxZ3Sqh6OFqu+d5K0OwYqG71Ee4BWEnhISDUfAqMqodqa1Hy9faG61Ehcy0MVTBReNg=="}],"memo":""},"blockNum":"140149"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g13s4nlefgnxuwnl063gtmlhgfy8mxn5cz25wq48","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"siznTkugIH16p1xJfC/TuaGjBEmEkpY3jqiWhqreuZYD6lON8q9NonDMTx6Qam1ZsxG9zP270zc5bffpX/2PyQ=="}],"memo":""},"blockNum":"140153"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1wjxh7qw3tnztd9ezyhquehq62ap3x6elgurr90","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"TgeWn3XA2217qRYPXzEcqPQnbZN2XgQY+LfP/eeZpl8J9MET4nMW+l0bf+NtixdkSK93YrMMPtcp8GxT5fhb/g=="}],"memo":""},"blockNum":"140157"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1gt06ywqdhqmr5w3pf67ctgc3ahalgy9zxprm6a","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"9BDf9sjRIO42yCkYoDmV8QEbc75fgVU8gMnFqCow5rM7AerJfUYywMLj+UU1A0w1qffnaneRqJkyZeX9SyqY7A=="}],"memo":""},"blockNum":"140158"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1yezszkmvyg07t49jqxgrlv3k8utjn6z3yymzzx","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"FY0uUJHLtOMfh+jXnAfCYV35pWgYaDmEsJPASigWZS8nFajPY1mDBtBMqDs5qpqDTywfCBm9stSjhZh0HmtJKQ=="}],"memo":""},"blockNum":"140166"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1t5d7h3grhp02huje05qc8j4yktjcqudvx9cunt","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"KYfCEXrQ6E2VtNIxzme4KpJkjWwiqzPE27C9ngm8K5Fk/RHejnbnikcBF4X4XcP9vugY17EcZDD7lJnQ9S02eA=="}],"memo":""},"blockNum":"140169"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g14qlpznup72pgrhzh5xdzlm3r8nnrf4vd0u0csa","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"A/7rEVYIkQ95u4HF1wKLV16rWFKPXlXHlC1/dJO7AfEuTbhcB3S1HhkxkHH16JiBTeWXkTp9IStU8jy5OtrK8w=="}],"memo":""},"blockNum":"140177"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1rkq60xj9ja8syz6trg75qckn7s7xucfva4kllv","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"UFGSjLFeA+447tgkXKJpAG//lVSD3+J/wkWiqNCzNeci8njcr4DKuai67ykIMt5yz/Ugghw1pOYXqxGcadNfXg=="}],"memo":""},"blockNum":"140181"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1vsd4py3qaf5evcs9kee2hz6unhzyhfecjpa37u","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"SCxnACJ9PPT2qXhV/XoYRcSPOgCVpwnKi9z+8jx6s44rYwH5mAfPfmHYwWwuEzRTItbuwwYmZVipb9VA6lX8Ug=="}],"memo":""},"blockNum":"140182"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1g2e9pwk44ev9uav4uvynyaxde5c87vcfux433e","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"EpTz+GhqpfRyL8mKJdooVfHPanj1zXV0sqAyPD04ZXAWBBkapa9kvAx062HJ6JoXX3PXDBMekPQvfukzCSa2Vw=="}],"memo":""},"blockNum":"140186"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1vwv5qgsewcransclnc4rjpelpghczw474r43pw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"LM98bN1m+VQQckdMSV4CUhlIG8CZ4hmqKyITfAosEhN02TUW1WWm+ZkhJvOB3wS9YxpmXreCmN3m7J5qjFITCg=="}],"memo":""},"blockNum":"140187"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g159zx3rk40a4efu0wurka6w2fshsc3s55zun8wq","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"34OHMW84OWKTGvBLLOWQ3wBNmYC1+pkCs3V9GwsJQfUOmBVwEYwVIeFMk6IaJTwHuvtiO/0gjyVEmiwNbw4CJA=="}],"memo":""},"blockNum":"140188"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ylvvajfat7medasfnjzpwethwvsrq44648c76d","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Kdwvn8jqQCjV5w1Jw3a0bPHmrazh2WtBxS0X0M+OgCx0j8bIbBlVSf7Xxx0d6tow5Hnth6HmGnHhmPNz6y4PYw=="}],"memo":""},"blockNum":"140192"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1zd4kezk9h0rtyfrgnvdm6jwgd05n79n30ymf4p","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"DL1isj8lvp7mTzbBZE0RhmtFdbDGb6j+1J7rVHcLBVM5h283Z7Q/gcQZDZ9epS6FIepCLTs/Nxrf2OP9+lSi8Q=="}],"memo":""},"blockNum":"140195"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1kfdfky7eqzv06v6hs6duktwhw6mr36xml2cgva","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"wK7P7jP0s6Naq6UgbRbGfTaP3SV/CAsqubtS3yX94v5iDanRKX+u3K86jql9SgrzajD+RZBvmo82T6DZaUXNmQ=="}],"memo":""},"blockNum":"140200"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1jr9hw8lwf4zc7afrynuzevzyydz9rurp3sq5m2","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"s7pTc+mseMhIeHCEIwu8NxRLPbcpgMh4ZNgQdfUxU3wdhXGQSf1JKpzTmJGaB1NPCU5GWfe6M8AC66fOrZeU1g=="}],"memo":""},"blockNum":"140204"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g13mlghvw87feewuyu96pnexg8xhjcpqt6th6794","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"CGW1wPCFYMj6M56YCutvAvvCHnG+yCe7NcyArO0xRIUqPbEPEdjFG7p8ZddOP6HccZNkWdla1LlxEJvJQkPhWQ=="}],"memo":""},"blockNum":"140205"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1z9pnvn764m0h6g0xuglkdzddc362lvrsg56ryy","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"b3x6de2D1NC82TC3cY4Y8EeDRrdTyhJGhD9oYyPX8CoDR4MskVT/jrWmKc8U5WtlYG8fdsHdOEhKqoBfAPUaZg=="}],"memo":""},"blockNum":"140209"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1jc4ux5ewd5wzu228ggt48mjk902pfdkjat7tkk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"X+dU7jnH2pQdI/65eW7jM0ri+YuPdxn3VLLLA/t3TuFJbS/BRyhtN7VHyFyHgmezeFriEDUIojyEWcu13Sn+nw=="}],"memo":""},"blockNum":"140210"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1m7l9f07pnvftc0y053ylyhxzr3tzqe36ukh5jm","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"AX2tU4GND4cm5DBIybWVsGHBUrPubszdzOllOnK0BTAagtEDVeLLtevZsdZmfsPcyyp5hLggFbll+n+w5bQ+Mw=="}],"memo":""},"blockNum":"140234"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1p77djsh56mjamvfuq9e22uw7vpctdg047r440v","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"U1/30yjRKQakGt+wfa8NU3FJ5W4CP/cj0YdZNKPhiawk1lfJiHllxq781jtpCk8OpE9Cf2H7fW3nSrkdvV+L3A=="}],"memo":""},"blockNum":"140238"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1de0k8ast9lyxvcve8ahpdx2vy6sjs4amhk0r5p","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"0zKw9P+rZ1mLAmqkQ92z2Tgm+zdqNm8dzJ3mIP6Mbm8pBqZ6/CgU9LEQJQvK76aSX1WK6kIHQt+CJoivCmu55g=="}],"memo":""},"blockNum":"140240"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1aj5g8tl9vnaft8st9m2t5lgkf8czd9w72vfasp","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"qayKn86WFMpm2FFs/CczVQkY7DiK46euVzZrs7yL8YpGbO7cW9JYSNyaVVDWOuda5JQgB67JzrmrFqFRW/+p2Q=="}],"memo":""},"blockNum":"140244"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1chtlnvqzrz7l6kv4qtdk42dfmj9dg5l54jcu4e","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"U4EhvR1HLWxe3hRskowlYj7ZG7Dkk4IRdp5bVq81UBp8YH+onqchgdE8dgo0Idjg0VwDCLUvECvN9soB0ZWnRA=="}],"memo":""},"blockNum":"140245"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1r2s3h5gs492vwlz0aldetq8r5jyz7p6lkrmmv4","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"vs9DOu7v9oRu4VXRwiGgrZyfHNJjEuySsSUavN77DxE5LkyHPuh5pSmMOFzAb8VSFCJ6Gqk4XYigk+z2Oih0sQ=="}],"memo":""},"blockNum":"140269"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g13rhtqnlmvvw4elgkpqgus00hx78trdz25z9akd","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"1/BIWcKaXpBrzO5mjZiVP7VT55THqnFG69Whqzw+FEEwG+pOiO9nJ+ibJnMtgaRdFoIeyhXpKYAvkpOGnagfiA=="}],"memo":""},"blockNum":"140275"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1zpw3lw5a6ds0jczu08m3uu0vhnyuyxpm6uhkv3","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"1Dz5oGdu2Cq+6srg+xvwFLN867Srq/0A3pbBqMgxxjg5opdthrdHBOjPabdX6p/UClwfUs9pJPxs7ndpd6F2oA=="}],"memo":""},"blockNum":"140278"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1jdqpyjsducu6zc7q8v3avshtxg7z0xdpkyw0jc","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"3ALyrJRs/VRtYL7qn6nuzfVn0KcAWySCK+e2rsu3P+Aq+3pUJ05QRH+LZ0LyFaDLRQwzkZbE+jz7rcsAvAqd6g=="}],"memo":""},"blockNum":"140285"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1a0pj07k5hddjtr6fpgvfjh8mrp664jnf5n03pd","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"9S3Px7SO9IPKQDAqXIzh1qt4BPy2PAkgbQNK6a5emgkoWHjB/R2SwdKY+mhMwZ6iCJX1kYnuuR+3sqlqh50Jiw=="}],"memo":""},"blockNum":"140286"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ln3t48uuyc7n8cw95t7nxffhjzx3k07xce434y","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"HzYRaRBXZs3y2PmITCf+1m8ytYQhfHc73Etrg/a7IKlBiOF6EfcwtAVTjM9KQvhMOGTQA/0BJqj5vcf+SRWIaA=="}],"memo":""},"blockNum":"140290"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g13hunc3h6d5ggsjre6cwl9tyk4fkf5p0l5k682g","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"c8CA+V4N3qfaaFDfdQYArGVwvfm5y9O4F3OscrFqDfJmM1VDtJxoSK/uDfw9RWLM9/dGrw8W1glRNY5qrwtwmA=="}],"memo":""},"blockNum":"140291"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1jcqfvs2ux2gmgec34kpw256tlkywa89sehxhnh","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"fJCsBi8juUOBMAeVIHPPLMu+ZMQZsSt/ASMUp6SGI8YJT08hAfS6RNRs5ctpz6wxu1Oj99j9N4waybbfod8IJw=="}],"memo":""},"blockNum":"140296"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ukx4qm0ytndpph94dl86t9y5vuvztrjhmcmg6p","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"DCqEuWhnaoszkIwKTa2xn5emcPnuFOozNcKXVP6d1o8UbHw1+vm9lccMJGw1lG+mm3+AM5kLh/hF/U5p+Rod4Q=="}],"memo":""},"blockNum":"140304"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1d32wmk06fe4thnggwc048zp2hjqkjvdfdw9tuv","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"S1ys9DM5/AOBLFvI4xtv7uVaDZXL+7GKJTcK+sfa9fNSLP721w6m9lCeY4TvxiVrEwqO6scdKvePPtBe0z9shA=="}],"memo":""},"blockNum":"140310"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g19zxuep0elua99cdz3umpe9h0tnkuhsawvc40xw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"xxmwtfVOJ0/2kWmaDqAHImeM9iMdXjh6jCJTyXwm6RB+eOYmwOKtwRTwV4FUo7wkqKh4zUavLw68/G3PWlI+BA=="}],"memo":""},"blockNum":"140312"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1mg69gsadpu76v0p3ku273472kw3k533tcrgepw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"S/NIBuje5j9+kOWfO7iE3K/822Aug4qRcwwuz5eIYC5vRZkqJC292/MbOdSj7uIUlMfZPXel1dCTcxwwb/mgJQ=="}],"memo":""},"blockNum":"140317"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1se62kudkf82uujvpua5z5ee5h0cmxk20tmvvan","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"St/vXZSvSZ8MZvckv1JkoKv0SoFOGg5DacolGlYXd+99t/XHXM5W8wp4QAGOevvgg7dGhm3b7JtvjL6YU/3poQ=="}],"memo":""},"blockNum":"140322"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g130l689736lcsg4p3mucd6hw7exyq8cdfl83t7q","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"HXkfc5yxRWRnUMxjD6uboGmZutlVeo3IsNRl4/AbR0s2SBm3jRvd4SHT07rxQDtcAo5RP9S1wMa4JLzzdFrf2w=="}],"memo":""},"blockNum":"140331"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g13sfd0xfusmelm3tp236u62g0nj03vtpd0let5j","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"+VjHxwvEvpvr5bgjjuw+YQlE48YwXFs3uOtLfDSJlcVo7Ar96PvmRorSiz3NojUZGHZA4TahYEyfvvrGa7srnw=="}],"memo":""},"blockNum":"140335"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10dajurxt22s45yx3r7d3qh059me7cddanhd2m6","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"QcYIO0q27Ti6a61bVPwUXjkDkQXha8UuPJaALCv6EJkcHh5mf/IY5PHpeQIufibYG91haVH9S8zX7GB9+9Mz7g=="}],"memo":""},"blockNum":"140337"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1utj8shgkngdlspjafv45h5um67mx2p8hw697wr","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"jKG6JTGX0IfCQy3kJhUi70qbjZEP0Mx8lW0A00e41WUEVFcBFrbJPs99r3UG6oeawd8/5rGX6u5ufysDf+t6Iw=="}],"memo":""},"blockNum":"140345"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1c48qurhrv3t77shhx8h7ew3nlj4uzv4d02gz52","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"jcUjqJCO3+76ZopMppl1nyWpVXqCwl8TQjuLpSa/GuxsCVdJC5feW19pBbTur/u/c5FLfSqCUltyH6iG09ak2g=="}],"memo":""},"blockNum":"140352"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1w58r3kc0aetwsrdd9dtlt3lk3thpdazvnlz8wy","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"upIwp8wdKhigg9C/ySMtJxmWphDxdxl4bRAEgtcRl/Ern45b2UIy7j1cuHG1VNwDkAVICDBCc/y0990Rg5rP8Q=="}],"memo":""},"blockNum":"140353"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g19nhugw40k4y8cazyaefvm4xct6nf6v37ldx0xy","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"NBmGnJk9AOS+tZZ1Pm0dHRROuCgH2GLvjYx1Jsq8dpI6d6dsFSJtW9pBv9z5lWMoZrX6CqojASoeWGinkwbTlQ=="}],"memo":""},"blockNum":"140354"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g186gc7244kjv97xs4spurmjvqmpsussecuyulgc","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"/v9Y0xHYy0XhCFgWgzG+xMTaPXZjdOnIh2NHwWYHlkkk9L78MWVyGCJ8pRn9BkB/lbevtBBsSJ++RkCRTz8Ykg=="}],"memo":""},"blockNum":"140359"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1qmnz0sr8njt80t052ygvs8dtgznq0s707q5ydd","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"DE51cARNHaUmgxFvVNUWP9HCSZd6jRsnIu0gAsGhD8R7AjMWs1Hy15tJmlpe7BOXX4kp+Ka+T0cTypYnNnNKUQ=="}],"memo":""},"blockNum":"140365"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1qpwdvd4t9xyd6qhdl4q62mmw9lnt9uq4jaetgz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"GrM70P9qXXzmAjiyF/NVVQqrTzFBJXqYI+9e8VnT6xUJmiPz0Pde5gRf5hofTI1RqpdUDBn6PaDQaWsxZ7NZwg=="}],"memo":""},"blockNum":"140368"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1akdx5gdk6u4tuntkvqweejcjtvuw0hf84mcdz8","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"uPl7nm2EH3QbGJS1WJrBFWcqkaErF5mRZPBgkq9ERgZnisPeJEtrHA8tgpP+wQLBG5JKoKeaIKNOAo/Bz+imHQ=="}],"memo":""},"blockNum":"140381"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1vu66cgv9rgpxhgwr5mkeg4a86fsk6h47795tmc","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"wKBk2WnLuFbRVTBkfItonUJ1jZULAQm25D2Q/T8YuKYTskGe9RGacp2THEAIixv06HcBx7vLTFeOgUx1CgozNg=="}],"memo":""},"blockNum":"140386"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1f52lgl9g5l3e05zk9cj08d0uy873qkl8js40em","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"qZ78RRNZSt7znxaKQRsuqFR7ajMKACP/v+1VN7kDw6oIV3FgUovTrv8mjXiqIKMajb+BbttORBwf44mKzi5d7A=="}],"memo":""},"blockNum":"140387"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10h3sskchadgskkuwh3jk3e6srpe055ezdhwm8j","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"vKLSnLMmpDCwXVo7l3D6JGf7nNidywFqog/Z4SYLMRpgXfM5kl9pVtNo7Ckz2XcYKiee4RFIShgjL3Aq6EiH7Q=="}],"memo":""},"blockNum":"140388"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g12vqrxn4pqk0wgzk9rn882egx4ucthx9vjzr473","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"H1O5oCuLdtWcWWuSpKdJAwxzRu4vyiUkYb7I6i1DKjJRZxpV77P8LXEKQzUBaGJd9PqYLDLD8k3fQ+ZyU9uIOA=="}],"memo":""},"blockNum":"140390"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g139d9v46r2hccle4jvqfl29yw7npywv86puw050","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Y0gWDtlhptoBWFXbKcafSVM8BNbRmtrWsz/Z1OT8WMYm1ZqvLmbijcGC3xE7iCmziqQO1LjHv+0JiQnvu0IgQw=="}],"memo":""},"blockNum":"140394"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g16ymjjkj0es2afuth3z30a726the6e5gusvnpyf","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"pfYwafdop6xQUy/4FCcJnxdcH8Fb9zRsiB45bV508ec3GvkNdkDEB9eVpGPaDhT6IHNYeDpHzfzv02THPA74AQ=="}],"memo":""},"blockNum":"140395"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1874zscvlpqd6qnhx6plgl7em2kue5gzdag7uzk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"5oXN6zcxflobeA/vI+PZ0Rb2GzHcLZkQc4EHLMkfO8o/HP8Ydk8cTHS0W/zAYpNYa1iLs7oO/Ajhjg4Z4qdqhA=="}],"memo":""},"blockNum":"140396"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1yxljuhzvfe6p7l08jazg9f85frsdcy5rtx25zz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"HU9O6lcHJfbNlVHkR0LuayxmTQBSYR0OUrrYz/S3DQVPlJJJ5il6v1/BEnfyMH37yNpYYYOiWNcOY2WxijNl6Q=="}],"memo":""},"blockNum":"140398"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10chv88kv59rl6f5smflmrv6h2dess8euat53ek","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"q0mY9/QkaNMKyaESJ/hVLCfM7aUnVvMIaqcViWQpBwE4tcpdOe9dJD0ohEAE77Bu3sEOKyOS+N/tp+bUq5uxvg=="}],"memo":""},"blockNum":"140403"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g14cuvcu4x2dhf80f2gk3cseumes394w7wjcnq4w","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"tzUiSewIS1opZOWHVIJ/zCbunEstmlKlhI+NtD6J9AZtYHHfPFmWJa+q7wzmUYeSQJHmC5Atn95ECdaV7okhaw=="}],"memo":""},"blockNum":"140417"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1wj0qf76cmgmarg83yame8yu0gf65n2y3e2jj54","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"I1izswwHEW7kAolgN7c70j9wAw9MARn5LgOpI1FoQZFdW4Zrf4XtLfkDuTfQGfQQSmzXk3XHXX0RwL/4Bo6sXw=="}],"memo":""},"blockNum":"140423"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1829e67vzkajv6gpd09d2ql9lmdwkv7mkuqssc9","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Skoh6pAn1kavad+JlTAcZ0w14braX/W1uBzXykDviXUsWYdPZm2XiX2CbNbW1x1bxFznzPPtUh2zmcPKU018Jw=="}],"memo":""},"blockNum":"140442"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1flp08gj3stmj5zl3uytd676vn5fp7xjxufxwpk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"C1ktDho8HBIuLbPorULrsH8ZAM+GQSqHqP8vE38xHJwZZ9AthxhJRw6trE2TWT55Q8w3yVYYDISAMj05Q8SGbA=="}],"memo":""},"blockNum":"140443"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1zresn0asjewnmjx596v4yks88h8a6dkt953qcg","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"eCaf4PpvtnZLIoOCO9zyQOVPglhEr5agacVu8yNfGHpgmxqMmQC/IR94zoeeSBPjH6tl1UvuwaaieVwwbvnL0g=="}],"memo":""},"blockNum":"140444"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1h6tfjdf2dkg0d5zzzue5qz3mm2m99fnjf8zy3s","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"BDltkhiWRrDggFiqHEZUqbd2m4vAPFU3ndx7rr3saFIUFqmj4z2teoMrHaybBUn93zWDahbY4PRXaONsps2RKA=="}],"memo":""},"blockNum":"140472"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1mrsy4zzw9d4fac205kmfrf58rvys3jcrut54g5","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"gYCO8UoObEFTdBFJozI3YCYE5beT/ALwrCZdGX2o2KBcA7ZDsdyPRJebtQcQ+6Cd1DL86SiqKPD8l0HqwiZYrg=="}],"memo":""},"blockNum":"140474"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1qeemt2n53lr9vucnhk2kez37tu044awfp5lds7","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"z5KtI+yT0U6S6vfLEEOhyMLdmvl+QpzJPIG84QvxacMHszNNjua3x7K/Z14pivqdsJ/mTOn/Bm+WuoOVo92p8A=="}],"memo":""},"blockNum":"140478"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g19w3pfztky2fa4007lje8knvkqvdv68f85a2s2q","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"R71w/u683cU288xU2f5H5UhBDQ/OmAFbFstIUc21jZFZ+nhby8Q03BTw4r5aMlhsZF/ZxMcuAKsaG6xv7d6zVg=="}],"memo":""},"blockNum":"140479"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g19v204utnadftgz8psm5nd8lkasmc07ukj4uctw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"sAq6xqLrpCXE9el0QCjaQEXzB5tiZPpBdKfMMXsunDwJYDvGlG8/rnhVkBtBfN+u046OYO2WroAfP6j9IYD63w=="}],"memo":""},"blockNum":"140480"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1rdwzvgqp49hmrfuqtf3y8w3waekpf229l9v40z","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"xGi19oXR0uYnLVY94iH/ocEDoz55ZDOAiDngeUf8dmQ0IoCwVzhUV4/kCzCnHLmURroCy/F4XYFlAwKei1b3Fw=="}],"memo":""},"blockNum":"140484"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1mddwfxgplsuy0nglegepfg7yn4rx7rpz75rsfp","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"2BqRsn33ZPQUGg8D0fiwxgMoULUSa4+aUNgp0lfappMOqKLXy1bxiDhu3tGN2cyh011jPY5aW/mZK+jgDInXrw=="}],"memo":""},"blockNum":"140485"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1llkt9r0zm9y0nqyr33m3r034ar6n8kp9ad02u3","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"VmK69qiBrFKmtGmuM5J4RAD8/JDIQTlCyAlCgpHGEps9FbOKTNCAfI1v7qmeaT+vFgGtKU6rjyMNjyIoGBbPOQ=="}],"memo":""},"blockNum":"140509"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1wkwgvs795x8f4gtxr23ck5fz87z32e4rc70e84","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"4bl4QSspIPMwiPoFTxfqAmACe2tlpGbOdy9Ce+of7WJo7k6N04yKUnh2YX8I3FstO4IgWLS9YvVVJLkEwP9AgQ=="}],"memo":""},"blockNum":"140513"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1l3alggxjfejggw2hsp5g5tgpz3qa9e57xf4863","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"3eyxAwbhxtm69HIIwKWu/gA5tzzc2dESvNNC1UiSBiwdTk7nd91XyB8M4eOOMw4eoOEdzyDhsroLnb0saUs6CQ=="}],"memo":""},"blockNum":"140515"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1p8vkzt884sxlzwlwxlqe5kcwtjfljt04pprjdk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"jAgCZXsIh1it+4pSlCrPwYfmg228m4kkhIKWKU2Vw69ZPnMJkF5H0+F/4TxUE+27CTVzKWZpXEPnLCFJNzHNtg=="}],"memo":""},"blockNum":"140519"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1a342dm3j49k3exdr235s47hxdwvual7tmpeaxw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"wDpvCJJiQMTQNJT4g70g8vEk4qjPJsVyKzJ7AkrdrMJXPbhbVTRN6Q+O2GLqmMQffqHXs8/yZ/9N6p0ntwC3pA=="}],"memo":""},"blockNum":"140520"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1328ajzttpkadpwxfxndam9vkp9epv0l6uj7ffg","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"GQokBcE6zglLKskwxU6K/pQd34jVqEalTxJD50d92EIEEU0j3HpKp08bVQc5Qtv2/XLQyhNI7ydhxQ7uLBAfxw=="}],"memo":""},"blockNum":"140524"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1anh00rgg3g3ug7ct2y6pu7ldyhv9xhs4ex8alk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"yx+UU/TUKhA6oiJhi5gNUzdnXt2I2jwH1pEeIY06mGFnbkQECT9HnMZaVqDAxRP3AJVd2w4MrTrf23AkjSbf4A=="}],"memo":""},"blockNum":"140525"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g19mw4h5yuy8al7ye46p4zfyxdldyr42n8cakycz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"06iEiUFf5P0rryQMwfrylKDxNcra/wTfrDs1Ux3KJkpGZF64UW94DHvyO4nC9s3HJSkX0xp11yBeUIw+/gxubA=="}],"memo":""},"blockNum":"140527"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g16dkku3p6smcvcx92vasefjaq4h623cgfjr02xt","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Kw3KoLLMOr1f4XoWnccdTy1a0fAaQyDXVZiDBJPzYS1C0LVLI2yfnWusiboaWGHynEgDQflZaL6W4HUK6aVzKQ=="}],"memo":""},"blockNum":"140531"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1qg6g7tlk3lm9k80jzja7w3pn2vjfndema8wm5x","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"1FyaSWRW0uFsMLsTS2wEQ7pVE/c/Ulc60dtbfnSMctUxnBW2/pks9lmntQBOR+vmZ55BKUhV3yLAMmT0DR9qCA=="}],"memo":""},"blockNum":"140532"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18lj3692qv28y9juvzqvck6vsv7uz6w8sd7dwc9","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"plQ6GR3GjI4eY2tld5mEQeik2ggjy2pg82V9CDTsqUFuoXFGe0aYLjNIAPdcULprMUrdyPuDbAkgehvJvr2FZw=="}],"memo":""},"blockNum":"140533"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1accrcuhaaprq3rxrk9w3xr2k2yrwhgdutc5kv7","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"G2Lt5A8hJm7D/TkfcOXmOjKw2ifSP6fmwIflSwcEEXoBwkqj1HiIaPMJ6RpcWSgf/UMT3/Z33yYuS5kW0UlLKw=="}],"memo":""},"blockNum":"140537"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1tqzaw8wnn85auznyljl5l2m6waycc69qf929jc","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"nE8/F/kxi7zkwpNZk6bViVvS4sVQpLVD+7IEN7eTKpsM1fqWXte7PF8n1db5xDJgJqgB9D7jcHJvncqy3zKbow=="}],"memo":""},"blockNum":"140547"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1fgym26g50ktvg2c2cf8quecnj5p0mfq0sfs5av","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"3v86pCZeDjeCU9zA7PotPYbzYT+5KHvE5xXJBfhqoCcI1ruZm1LpmpZdPzAN0yYCa3tvfSv3jeuGvDiPIGHnLA=="}],"memo":""},"blockNum":"140559"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1msfxyy2yrmg54r9wh6jhx6ed5phd0p2fxu7cvf","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"mZJ6c+RVKQWtr+Urdf+B59rZ9P/t5Q9bQgaPrpGP8GRloKSUvRV7bjSyyal+BoyMi7S9xiI0+oz6rjQWJYgiJQ=="}],"memo":""},"blockNum":"140571"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1zjslnva0kp08s5f90nas86ttjz377w5zyaxspp","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"6oapFM8J7waYqgn6mKQkfnrO+q9ipcSgtt5x6VBRv9A/AXLU807FwD+ptscMd0eorFy6gvAHyCO36RUmDY8dbw=="}],"memo":""},"blockNum":"140572"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ssuze3eupcvdn9whkyjaxd0x70qzrk9n5vxtvv","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"4XENryb16gD7ZHH1J1FHcc7KzdKl5YKWKI0eCygGuRV9pqYpgsxP9jXFmu9D8KATGSLZceANuGoNcPaht3b/PA=="}],"memo":""},"blockNum":"140574"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1z6z6jrcwxs8lv20kay025kdv36tpg23j7lhceh","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"sSfzmzl7NNf8ingtbFaE4nyjTehPHPF4uTJ4L6K8y/cWD9lzRQZ7/T6e9tabeCuUmtXB6bSXarY1k+dEhV929Q=="}],"memo":""},"blockNum":"140580"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g12u0894mlzxu6fqcf0al4tr9nly3pzzqdua9mss","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Wb1isR5CuO0EZpdgfYvzSbI1wNnIYC+hTbGBdCs8iVdJMxvXB428/mF7tEPThQZxbBAmhmHvP3Zdk3vi7hxYCQ=="}],"memo":""},"blockNum":"140585"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1p2n8wsmspxjweana5skphn2j9p2tw6gn9hfc4n","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"u0apRRMkOaLF8P579ijafCpb5zifp1d3gvkzJjkn9GtniroGVpTtD76tKbs+YvEq6xhlIjUSduIdNpU13Cg6zw=="}],"memo":""},"blockNum":"140587"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1lf8y90ek4ewjvmtu6hgjjpqt22nsk4dru49he2","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"aJI2drlK4lB8PEC59GwzKZ7icZNKCtijCsVaV0nH2Egr/wLHi70121kJVWZQz7xGz9sjSZIexwnGmuDgFBJTHw=="}],"memo":""},"blockNum":"140594"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1tsmhq5ef789cyeh2slcuh59wrz6hsqeu8fh5yn","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"mp3PT9tXkpT4ZqL7ddfxpR+Db5quOI6Bw+n8WVXU4kEM/eymhmtNLKDYKUiQvIJGC5XFYhQMigmrTbeDI158zw=="}],"memo":""},"blockNum":"140599"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1t9u2dc3865drzykkfpus6hefcf4nj545np9g5h","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"PFgOUpqRtllo+HB0P09ZCMHovP0aNw/8Ip5qTzMTtUhEhiit4+334yw1x3wmBoQsii3Y08srYP3AOnUcESC2wQ=="}],"memo":""},"blockNum":"140600"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1zfpu38ttur5pdsevqlsqphz87q35n2a0k8fzuy","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"VgByTWNN6MoNsoyAIl4Ue9/QWq+mw5dQw/OxLAu6KPQxDHLPbchNi1QfMQzfOHQes02vJAt8kTxQSMLw93LQRw=="}],"memo":""},"blockNum":"140604"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1zpsx7f9x8ac5cgtevrnlhvveyxx9aaldwlnd7k","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"WJL2S/5LNnDBroFNI031+kdm9Td2TM3P87J+4ExiUdNp9OAmKu51OtsY3WKmMKqi4K3pTkg70sMy8gIzgS3rcA=="}],"memo":""},"blockNum":"140605"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g19efxzk6uzp6yn7lre9j4fzznw0fqaw8hl5anye","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"CJds6e2D7ShYM4Khi+kNfnKQFmB+8yPBSuCg7AXJVMg0guTHM+H/fKiR1rSV5nHE2SClsGoa1KZFBw0HJimFbQ=="}],"memo":""},"blockNum":"140614"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g12nwr2h2eqf93k8m98n2u3ad6cshhfa2379yhdx","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Pao630LwdSTPf7zOjxJPAvSv3LNjBnxwHG0QpTgDOD9kA5Ced2s+1oOPj3X96b6IpAEwCs+K3NylGwkmgDICvg=="}],"memo":""},"blockNum":"140618"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1s3gfmppeqdleejkjy5zranm9k7t57v889qe29l","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"mIRhSh0+Y953GveHpWgNCoOUB6/GedfhomEJHL+oib9qh4r+tRaQ+lX8fiQe3wdbz2gySfJuK57qn/aOJW3PUw=="}],"memo":""},"blockNum":"140620"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1r3cekhfyhtynx6keg9ks3zw8eqt59yjr0aeuzy","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"QBDwZ4ZSV7DB2A4smvTAMwXvQdk5Yebje/tDQgBGgt4mPQg0ORYtlVKfKMB4i9Dc3R0JaIwyT+xVrDJGAnrd9w=="}],"memo":""},"blockNum":"140622"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g16e223mw4mrys3ral3gznftqdv894gq80tfftzl","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"VTchtGlCDFKLBCST7jH/ExxWm+pCFQu/9kv5oSmC16JvvSFPsYue5k1sgT58E0+HttqhFG/HGMbm1hM9+8FWNg=="}],"memo":""},"blockNum":"140623"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1y473jpdpw2sx6rtn3uanll9reyvzhfk2s3pqme","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"tKzRdrj8zNJCMY5hJ4TZVoMiYI439iyPFEXZOL4BbiksRHPzlwclnW9CqRbOqfuz0A27inZSK7cbUV8ZX3SKlg=="}],"memo":""},"blockNum":"140627"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1gs4nldm6chk4qjz5ul2dz5fpzml8v2r9ctsk97","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"RhQKQQ1YdM1UGjzEirMjsNjZaEr7Nd2B6w4PAomewdBDmPvbB+agj48IXxPUkjlBKjWGLiLGWQbxliuC0Lyy8A=="}],"memo":""},"blockNum":"140628"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1da8d8uq84krynpvllhuup9fuurxuxw8gf90ws8","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"DDPxlG6CpeJFEBzirDzo7UZxbcIAkMM3pvplgR3Ir1U3GIrGNxay9JMK5Lh2+eiMJXiBVQI3F1uCG1X5QxMuHg=="}],"memo":""},"blockNum":"140630"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g12kxdcyalyyvm958fjguffsqegcsqpvpl57xc0c","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"8H7gBhfI8v+bizYzyrmLUzDjOjHc57Z6/I0o1jeqTLwRj4I6tkWhZ9bJ/IASjDQoaElHUUSHi5Pyo/G6MLgWDQ=="}],"memo":""},"blockNum":"140635"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g16qgywu8uged507kk5xkwzscfmw8j2xzqnu6jhg","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"QjYoS4T/dZ3qy0HHX3l2BARc8YsMfeKUAXDT0iC5sOZpsKZT6WRelkNl2JdigBzSb4rSxCHQg0bvRU8/JMO2zA=="}],"memo":""},"blockNum":"140637"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1l5vymgny4q2zqu56y63wwh4xl5hvwzz6prefdh","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"IeKRM9w3OhmDhLnXY4ku5qQVf8UmCMbnbicjweuhwGlup77eWyet5LcaXiuzRTx2LUr2OSjzuyO+i9/B+Z/E5A=="}],"memo":""},"blockNum":"140639"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1usqynyw8n6vy2am2qtxrqprmvxhccnzge0fnh2","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"MuS/5YrPZO8MhrO5uTBOvC5EtJkMQLtWYxYqpGyeS1JGDSjUC2dSfCTAqEqdI6GR0PPjHsbyqqLT/NPIkOGW5g=="}],"memo":""},"blockNum":"140645"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1qj59cxu9gqkq88jldyhv9zmaj034532wykk8av","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"6ksHq70JXO86cd/8pinBV+jEkLOyNEhPxt44S0yOgORlsZyTYNp5yJS3S9xe9Q13BpIv3jSxiggP44tBpGNmHQ=="}],"memo":""},"blockNum":"140651"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10r9sv6d8kxa8nd9l5pxv0qgfgv36sprx3dnvzt","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"v4fikqoOuFP2VSrnHn7/gDpCqVirdqAC3UL1kx1BCtQN071hgk6ii7TiaKpmBXY3K8mRKAck8fDa5jh45FjaEg=="}],"memo":""},"blockNum":"140652"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18a986wnf6uz7czdvft7ukt99he799makqu622d","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"V3UkLRY7Uf7sjtyLFSawNTAwmUO83Z9e83WOsjGwVIQbt2ceqIiC0cdvCXizi6W8pOX/Ehb/gyl0OJ9Bn2iCkA=="}],"memo":""},"blockNum":"140653"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1maqnyptl4kylnxn7xfl6d84ad3rs4xaup2y66u","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"z0slcncPlt8RoFTPx7Aq/W9mhlTeFvC7yr5lmImiUfhCT1MLvuDsGenoqD/U42CFFTLyMgSdCZ3iSRm7pFGuIQ=="}],"memo":""},"blockNum":"140661"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1h70447gsh5kuvv5zugwegrghxr7ucnnxgevzzu","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"fecDKCTMJj+HdTOu7JTp1KiPLRP9jsxSC3vE8JTX5E9T3BtP+MhlqdQhArVjWSuD2J/LCOdp7ogkO+6BVcK3BA=="}],"memo":""},"blockNum":"140665"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1mzavt9gs7twuepdr5vepuqr7d9c8vecjggvj7t","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"TSceYSJMRDJPy835ejfRQ2J9apyNCy1ofqxf7A0oQb03gClmtmCB6Szpp1vauW5dEUGEMtQXUA1p7H/zaq7DLw=="}],"memo":""},"blockNum":"140667"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g16yjr7q8t6vf5q847yp9vf3lnxyqa3hymjzugy3","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"I6ZSkaZ3vRTIWvh4VvjBdME/NgdylugP7I1BED6d8rMZIZ0M/2rNLlP8dgRct3pkhl5U7mqEsQ63spSot6izEg=="}],"memo":""},"blockNum":"140668"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1e2r8xwmkqysylv5v4mfcmprmvkvyaxvgqexzhp","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"xRg/M5NMpvkOrcwixHNROf3vmzlC+zuweXba7fEwdZAt04O0NroLehGh0zQfWyLRDic7nJl9pFM0wD0A8AzCGQ=="}],"memo":""},"blockNum":"140673"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18k097xxh5wjyuaqujm9v6qpp3y8d0yr3va6twz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"/9ghr8Ue4J7qDc8abgZI8TTInvxK49rhcmRDq3czXAZgwJ5aJj9LKwqeeLkZLr9Qn7TOzFRcQwKQD3eLL4Xnsg=="}],"memo":""},"blockNum":"140675"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1u64yyeltjw3q8z0pe9qzmkvthhscfcm8khtcyk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Tb+BRJ0DRnCk2U2dV7z4zpk/lvsGNTMo3XKb4TlE8khWjK7a2iDsQ3ZkbRnA+crLSdSKMtfnwChTdtoz6RkNOA=="}],"memo":""},"blockNum":"140678"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18dxz7at7nsn6w730ld7mju6eysvtztktfxuhha","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"EhOEmQHdnw5GXlC+/n/jmTMLYiYtrPJGPdqYyTIv2XR2vGeihH5auOuv4otrwbmYppVhpreVmwf8QWbDm1Enhg=="}],"memo":""},"blockNum":"140694"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1flmghayyjrs3jl9hqkxsp672g36jy9vtktek6w","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ix5gaISTEKFQBlq4KaLDZBbEbya4lQtv2GuOHGavmot1bp/HIvHwZTzztwqL6ukzXfcjjQeDF2A/4tKvFv10PA=="}],"memo":""},"blockNum":"140696"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1gtghy04s9qjk665fegzdscgsajsfnu09gpc3ag","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"CpoeLMigsw13vRWi1SvaMfjqJKWWyYeLWEslce3h0AoPkUwe89aA6tRrVuBSUMBgyoNkBG3Pymdr1adtS6GaRQ=="}],"memo":""},"blockNum":"140700"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1a5gk3jxttx7ekt830tdyjcpdjw24qnh00rkn8c","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"4XBgrTbKSQUr3SqQ5DhXlA7Fs82MXWjgu1mOG9KodbVaGomadz6zaN5K6XMC7P14B4OLs5g3Hrw4Cr5kB8+65g=="}],"memo":""},"blockNum":"140701"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1pe6j7xlrg4hge8htr6pn8vwsd40vuwjmcw6lxw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"FwT1hQpfJXukgF+w1x210tmld8Qi6eCnVU8AEnw+1UEC2M6Co6VoYaNZGyjE5TAK12lxnZYOpcJmo0YKOBErcw=="}],"memo":""},"blockNum":"140702"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1pth0nnxnj3g9nlpsy3ag77ttyz3lujsh6qzke6","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"uC6RPNHwv4BDss3Y+Dpk78hDpBvQnHPvjNrcEpCDJZk/dt/CJ4nEg1zYZFL+peBoF3/mkkkky3HcCKTmszWQFA=="}],"memo":""},"blockNum":"140712"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18qn0pf5c00e3kfy47yppshg7zd2tyawj3sfqu0","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"fvkjCJL/83gI81azkrjDkwoorQLSmWmDhfWAwcKomyp+SnksU2wqN+Lcd2gGEDucAgCXOCLyowY0ZWUKu596rg=="}],"memo":""},"blockNum":"140716"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1yl4gg3kgfkcy9ppx5fkrsetr73a72evtuz455p","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"BMHbwCy6k5QllP4s3liBWVCmm81wyNN09vljgmHVX84vtBvcQfmxGEIg+r1V/ojQ8PvoW791iqqgml+ATBah0Q=="}],"memo":""},"blockNum":"140717"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1vxx8lruhya5w53hve49dmp48wjwuuwam3rrev3","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"/eAor/LJbaf5ImeokCZOUtuHyj3XnPHwGSGnRhSF0RhQhcsBZ1WbozutYJtEdMBJ4lOpFfIekhLf4a4VuhalZQ=="}],"memo":""},"blockNum":"140722"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1gvvvt4r7qg2ms9cn2kepuvwjt809qsg9y7kr79","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"tNtFVRGbFI0VQYJT0w0PhG1QedTus1xcnz/1MT1o2MAMOT6atohcgJ+qZrtNdiX0VuiAjjdM1vlbTT0tc3vkdg=="}],"memo":""},"blockNum":"140724"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ftxju78j4yqxh598jsw94vzw7tmarulsre6ddt","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"MXCE5hAvEYCO0E6ZJ+HR4XA+sw4H/0uQbItAJhHPM4xWM09VRdNxXVaiEBnAUYDrXqFHaEG3D17Tx1gxdWYsuA=="}],"memo":""},"blockNum":"140728"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1zr7mc4uj0y826q9e0qsyl4gxtrtrc3dctc2kvc","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"/V9MzEFvsjtnkormMcBgR3uPO4kMA7uba79xIENQ1DBusU8Fg53g1Bs22ob9k36TgDRHRhaYWx6C/Bq1gkM8dA=="}],"memo":""},"blockNum":"140729"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g14t3dkd8c2ms0ag5cuhjaku0yef6g38shss7w8s","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"7ZjSIhkcCTQwcUJ/I8rRhFiXA94hDum0owBnyBWUS04l4pOmrEY3Lut0u2ictxpNs2KXWxvQpoPd1VimSlPjNA=="}],"memo":""},"blockNum":"140737"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1nw859ypta98frtqtcly7lqveqlejm9uc5w5p6h","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"qrOZTLY3eL2y0Zmce8kMyVe7T2yYHihDwMg607Y67nJSsvDjkRs1s2ztNEiC2L/z2WchuHabkI+1fCgHh/C9lQ=="}],"memo":""},"blockNum":"140742"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1drdn6df04gh2l4jvtdqdtdfa4z62cd9ayv7wv6","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"a1hvz1zDYNAZI2717mIX8yXJ/xmxyEBttN9D5m9RRzYUKnZmedWzs22m6yu3an0nHo49kN9W9EWT8g4Pof+LJg=="}],"memo":""},"blockNum":"140749"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g13n976h49xgkwfw25h9rnv8h03hcsz44k6stpat","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"hS9sKlTHQDzOQAVNTMDVg+dYnMR0cORG3TX/02yyBEl1F7VYS6Xqy62KWDmXi7vsYEidqrzfBI1GXuOmN3e1Eg=="}],"memo":""},"blockNum":"140750"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1aa5vcnl924sltrx78cyl8ksvrhwukh6vrsht5t","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"VZ5cJGx6gltE7EjHS/wJDBARXku59eSnFLPalt6KIgxCATkxcmvtL9O5UhCs/jzti7BU7wEFprAjAdoA/R+bng=="}],"memo":""},"blockNum":"140754"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10jp689n39n3qakp0rkhhvzz2ejhqa9vr8yussm","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"A0BHucvZRTZZB2tqHf/S8D/mubeIahOZncfS6vRdd8N3jICH3C7iXVXEnM//GjjbMPsV5xN4FUQyL/N8o8ZqVg=="}],"memo":""},"blockNum":"140758"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1mnm697mrecrejfkq9e6ard8huu2e00kfvk5ehk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"vw1uTZVxegr+ut0fSY8sQljQMoTmCqJWBv8MHlNiaKRfbTlkNNmzG57T5eutQYCCaG6uTrfqDux71Ab+JB8WXw=="}],"memo":""},"blockNum":"140759"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1lak7qufm2dse9daredu55felankhmydsj69ews","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"fSdEAN4pCF2mg5EEwd92lE+007fmEXU0Ii4H03K9tzlIWDvc2da4z/MinQLY6W7QKauIUGzSsICImKL6YslVXQ=="}],"memo":""},"blockNum":"140761"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1wpaasassd3u5uva3y3qc5zff7ctntcyy6mzyvr","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"RhCN4+JgM3cMo3MnZYqklgE5BLqv85Nwjw+j1M1lXJ0b5+IZLZLTgUG4YRbOTM93xl03NFxNTbewLx1hDTXbiw=="}],"memo":""},"blockNum":"140766"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1v7na5gfdhpkp4w9ngjhktrg5msvuu3vev830ku","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"d7bhdRkdMDNaijXl2IknXoblbhSJkWNXphc6pPBZU5tvk7Ihyt5+MpujhwZbfB6/Ayis6eBaS15jYiTjAv2qJw=="}],"memo":""},"blockNum":"140767"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1vrlfhcmymmw0ln5kfl0sj0f3vfs90e38f6j8hy","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"RB3v1UDzjZFqS7ZfmmY9VXpoSGcr0pR7OFWcOoDMlHtTS0FwLNKf8dXGJVYmLNAQk6vaKxAfnYOyreTRjm2/uQ=="}],"memo":""},"blockNum":"140772"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1qjq5gdsxn2kkgsc5cckm058mnz5xsw5dvr432z","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"6ynNYjMMgWzvjYOXlA86oXfe3TxIw+yVL87oP3BTQ/9utpyuoVHcBPMjR1jn0j5OyI9JQbKGyo/jhrRdEALIeg=="}],"memo":""},"blockNum":"140774"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ncmcv2v08yaju9e4880xd99jtavl23hetycnea","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"kTrDxEMRRzXdtci0jR1W1kZEtzI1SXUSH+QdgXW/KgN5z8oAiNS6lrNo9RZD4i/Qpcckdyu10thp3GKuxWLnag=="}],"memo":""},"blockNum":"140778"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1yrk783ehtxal05nwyuwptq0myqyjc6tf5grt6v","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"G0ih6p7pINQkLaxgMxYL+EJR9wcijUS1hzhc96huO+YBpeSuFHLcMU/kicE8nLsf99kss3P0tQhQkbV8ASKYBw=="}],"memo":""},"blockNum":"140779"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1pa6lkpaycr3hy2qmdt897w4yhgkp39utev20tl","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"LeulPIbAREnA1i6LZ6kSaBLUEhE0DuxwinKHGQ7rc6R6SZ7REQYFLCmy7GzWu6CrwGRxBQkEvf3rsjlME8bh8A=="}],"memo":""},"blockNum":"140780"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g14sx6k935us98qwapvz69ugdm66dpqe24tva0wd","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"+WjFQXf96xFT09pYpYvKRGRwUloyyZB5Sd1yQjso2cwBDF9yYVPa9f6JC2KkSkB7UrIs6TCO90zQdH4iRBL+9g=="}],"memo":""},"blockNum":"140784"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1p4zqu9hj3pd7kj34zcyf2d2m7lmcvekc9p4kpp","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"P106H7/Yw3SD6iXQER4Yw6ma9RGZRlsnkkUm4GMB+Ql1iMFLIO5G8JhP2owf8d2FacLncRWCtIHtyH0vr0nCTw=="}],"memo":""},"blockNum":"140785"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1tapva8rzag9hfex9kfmphdndytrxlu6520dfjj","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Q6oRZXKPrwHwMC9VMctoIBPAloNPyI2snooS6qoUovMWrH8UFJsdkZCRp42gNTGArQ4XysarA7I/hVboIKUJhg=="}],"memo":""},"blockNum":"140789"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1dsntwpuxz4m48krd8qwm3ql5vmfr28mndu6nc9","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"I1+BCqWbgmoXBtbJFmPMniTtFuwTgJrAw0+AashYDNZveVC9N87Nvop+2nncCJwroYK2a6NUupBmvk9AHpLoOQ=="}],"memo":""},"blockNum":"140796"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1rwd3nvlm32cwdukrqz697vwlf5ykawlnpt6ffh","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"o//gnRlrlg+hoNMLemmonyaScL4+s0LZ0S+C2o0WfxodFZqKIoVSlvKTAQ43DdItfAVs6sjldTCAoml+o0NQmQ=="}],"memo":""},"blockNum":"140800"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1pdrmmehf96k4d3ycacdkwqyzgup8xfewqyu4zk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"+G9oLVJaFGfAP9Ab+LUs3SLLm0Xgl0+qYVVdizgO5ywKLf1TyYjBAiOG609G/kk2U7YVErOtcTiZzR7v9zkkUA=="}],"memo":""},"blockNum":"140801"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1j05am7z9nyksp4e6prx0setu6jn4q3q4qx5a4u","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"6K7pQtaZo/pegJVQ+ggoAaDUnwRTVs528nvxPvJJ9s9P9AhAn+Z5KKR/2cF9VO3lQyuEq8yVVxn3EYeavrnpcA=="}],"memo":""},"blockNum":"140805"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1aqmeawhcctatluarx06whav0dyntjddwn8nqnh","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"6DAJ5ibpqKzAVZNxTVnoqtCKBE/Qypvjz/NA/pjcZp4QQc3qYCiuoLZKQSmkVlgWNeFcb1YSpgqLW3YYLVeU3g=="}],"memo":""},"blockNum":"140806"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g13jxjwkyedar4hxeksp42fx62v6g46ey8h7dtej","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"SJlxC72M5UgsWSDhi34n4/8FOd1XrSo23Z/DsRxHsJoS8eocqB0il2zCJh1msx59xxNBWK5KPPs0jjFsl63low=="}],"memo":""},"blockNum":"140810"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1mrpyptsmh7nr3h5z5tzyxpt4em2p9xe2n4ksxz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"pxJC4JH8Kc2pCFHcWsWTx8XuuYk9KXytITJULkU5HDgiDxyPa4a4aQLFYzcYZdVT+fV0J/Tnam5c3EEJZU6uSg=="}],"memo":""},"blockNum":"140811"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1pp7samcmksf4yukudsgteknkhfthenwrsaq66r","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"0iiQ+PHofAhgn3Z4mkkXL0tdPMH7pTcN9TczeMBMTzl43apw+3lnArF1Z9kp/X/Mf4sH3CSpj+RYBLWTjf2+mQ=="}],"memo":""},"blockNum":"140815"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10m8akcc9xm5z3x6uufju5ev7jsemrw8k8rvpt0","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"fkD0migGNh85/EAlNfhVEOILgvuxygARW3z8dZ2rhPUoPih5kWWVYtq2y6IWntrdSt+e18KffURLkoEzDO5hTg=="}],"memo":""},"blockNum":"140816"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g16x4rr5a20y7dvf2e3kcsx4zt9fj407qmylr8qe","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"gOwpEl/pf7wxVpSQQvk5Ls4Z68cInzUvCnaAYKKuxCQ3bwsc1lflF9RCRlHCoCjS+tqj27Ni5u7uE1pL4yNUng=="}],"memo":""},"blockNum":"140821"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1wr0vrqq06ex9pcupdhrxlt783xm5m4nmu5mksu","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"A+fzJSlqRcGMFz9O80ahggnW6mgmxwiVZo4rt+LKlipA48rWPfoxabxc3EAdsUMTVeYZZzjn0OCs0rGhXIBkOg=="}],"memo":""},"blockNum":"140824"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ngta9wkrrrf60azgxde8axggcgp830547s8gt6","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"zbBaeLbgFi1td/AbtYiFW/OShRVP/FoFI5L9xKhGYfhanR5W5UJrOyQeg4DgXlAAzzrGH1JgvqaDFAr7No4tCw=="}],"memo":""},"blockNum":"140828"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1qc58a263zy2ss6ctjwmz39ajvkspnv7mfwk5ex","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"EiKE/ozNGbGVsxfS9dM8RFGUvIfwvKy5KCiRD+SpMrsj0R/RY725i0jZOWzThUB8crRqrN7K+9ZVJUsRnZxizw=="}],"memo":""},"blockNum":"140829"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g17se4dnpjnwkk28g8shyq5cvcz4hhv64lsq58tk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"m2m4L4eI18yR8YhwdySjTgHSfRW7XYsTvqKJg6noC+J8hFVHOYRbG/uBed/3ttpzJoXozrMCqLG8Kvv7f7o/OQ=="}],"memo":""},"blockNum":"140836"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1sdq58866ajavtyefp2yxy6lp6dl9dhrc4wakz2","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"8ruSakcVyezvcbX0D5kxJ+rR8aUv93guQz/Mlw9fJb1ev3UN2/wUWlRiuoxbIP2fMuicmI6OTOWzhv09n+xsVA=="}],"memo":""},"blockNum":"140840"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1hur9svhdhnkjr4gnu34fr9zrmrx3guu3psp2v9","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"+Xv2itgHKTa4Hfce+wD5dt23N5Defia8VSVS24UfgVBfEeD90l+Ql2gX7mE0FHGRAhZZoVJVqrq+bF9AvXFbpg=="}],"memo":""},"blockNum":"140842"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g143a3n9jhux5ejm2cl4e5qd3xgganjgxz89z4rp","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"K8OoPFJTuJDuqC6NhHaCmhSj2pdhZKVGpnR97NsmoitWsSxRZaZqaXG0cCBEOV/JD1iPGUBXXlQ0oZdf1fopYw=="}],"memo":""},"blockNum":"140854"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g13vdfdyr4609hzm6qhenjmtmc3sgqdc7y907z6u","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"FL/A1PToqAdlEcqzfDFsPF1y58hJiBlhTQtiL7PVTW814w+/hxZFPLogsw1z5T342t3rVZsrkhHxtQcP99IUpg=="}],"memo":""},"blockNum":"140858"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1wafmjnrk7n3ahsprgzmqzfqy0eyget48c07cdr","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"X+zVR1jXSzxOnV38M0yakKAA1eandxF2nUOIPgSQLT0QKDWZBXXVQFuam0kD9FJ14k9p7+71Rg6PE2NNOwwgHw=="}],"memo":""},"blockNum":"140862"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1735l38ddapkft5yhhn4xty6q4qmpreqwdjn0tj","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ZtYsBXq1oHSFty8Uc87A2ZnXqtVk/h647lWPIL176hsEFw0uRKOWIKiNJebxKb/eDronOQLYo/EhaVgALIICug=="}],"memo":""},"blockNum":"140863"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1lhj3d77mz6zszupeaw3l3gp9evp2egm956n3vm","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"yw0hUiih/OQ1RpLt/kAd5xmf/FemN9F46oZns1MjxqwvYwvdfTo1MA4I7VKtsajWbjm5vS+95M7PKWT+wRU6lw=="}],"memo":""},"blockNum":"140864"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ug5ut9nexncrw2yghzcj03ysgj8v566uyjj8c8","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"jlpTKTn8zc6LHSX2VGDXBj4Rb60MJSAdeWd/tAAPwBIMrxNOoHQ/TODGL2L8tYqC/ZGHzSacKMzDNB57RccgtQ=="}],"memo":""},"blockNum":"140868"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1a44gvjuqgnkpjzhhsjka9a9ht7ny0dg0v26n6j","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"W+rw9dhflTBBAUjeTjkVB+ME+FAWP1z0/78SSzPoHVl+iFpXKdUo+4WvFaIjXsgRQTSHkk1DNA4qkRoepu1+OA=="}],"memo":""},"blockNum":"140872"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1gslmcm4gcd7clzns0jyreus7pc6h3d2s7kz0sv","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"vppDCjmp0P/X1TJVeh0w0OoxJf8Zr0FcxPYEVV+8qgwqEPoXvImkj2wS9gtLsI9c7YsIHSCFU8dVMqeeg0moPQ=="}],"memo":""},"blockNum":"140874"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ddakweku8vatvuc2g037pqv7j8769kwws5alu5","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"b/nKrLq88qjbXYnvVBLxivVWzhU+PEE0X2Y27YrsKOJLH/GvcVZ2J0VnJHBQWTu51UgdYEs9Fd8z76A6WrfiKQ=="}],"memo":""},"blockNum":"140878"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1969tm74nlmv4fcge4s3zxzdt3ume92vuaqwc5a","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Vu8A6zLtNyIOJy5HxsQk6K62/rreOY0D902xq8byKXlcbqMkLuVLAsAVPyS7JXT8DY5FU+l9tRRUfepGhJqNkQ=="}],"memo":""},"blockNum":"140879"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1vnugk7lyp8xhlzz366ccz6dwtdgpf3zcy80nms","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"OxcRLc4W0Wzr3AWh8fZXFQx1D36OgROF6UuxeX43smINhkXEeIOKM3cl/80gDnpwADWFjKc3LrpcgnXBSPOVvQ=="}],"memo":""},"blockNum":"140880"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g163snppgwu2raulyrw4a0l7p87x3lhl2uxk4xse","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"cKa8ZPWDYf+GHNuimmxxwnLFSZPw3IGBZdsAb6qggAo40T7gZhuYMk6NAGobHRKMUx64dYMVvwbZvdyBB3wZKw=="}],"memo":""},"blockNum":"140884"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g17ddjctvt953ptrqe2ug7ygcj2pj6lhf4265l53","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"N0uaY/wmj4+XLkthC/jK94Mhq6Fp9BehXfhGopxOb5EDH0rLJB9wuaqf2qnsP5Dg/VqwNtrr5GmYH1hqBmpIDQ=="}],"memo":""},"blockNum":"140885"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1n0xj4nwka2x23q84jyj4yf3hlwx6tz0lxxyqu5","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"MYLqLh3IsrfFEu7lgwZynPpvBgruIQ/8u0KahtCqNDoqwpByUsO2ty2KvDq0o5HdfIT38DN/k9GiwkVGx/FFpA=="}],"memo":""},"blockNum":"140889"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1my8jaq9r38rum7y4vslyegv2d5ksav52qkcssk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"sgnW+GpH6X4IBaEkupz5BFtxe4caxDSEnxW3XZ3VggkSnFgfCYuQu78X4Q484Qu0v8GPpH6q4Of1Tw/RUd5jkQ=="}],"memo":""},"blockNum":"140890"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1gepafnx9kfv6wd92jre2tl09amn8accr2ttxql","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"qc1dBaqtXvgwVNpD3iTirc4yEHsmLhlDJ6iSIENMbWQWbOrGPfjkzh05qrt8Z56mm5nw5zzZTLWJvVK8B5OqPw=="}],"memo":""},"blockNum":"140894"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g13v7mqm3rhf3g5k67nzsg45c44aw75tlrkgpx9f","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"3yiFYBRUeWbRYyj12FleQ2W1pr6YIPxKPk3u4BU/zdpkeSB/P5yrYn4dZY/FB8HBUQPhfJ74ZSxCN9u2NYHthQ=="}],"memo":""},"blockNum":"140895"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1lqnaw6ymkxcuq2fpxl0zthjtqqatkc8lv5qkfh","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"KAWQLHNmtXv1/D8/NROW1f1rbGtFC6C50eq6fcOBpWghIu6vbwj40gTeODM3agf/vizxtU8Tby2gKxIAdthyvQ=="}],"memo":""},"blockNum":"140897"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ly3wd5f3dlqxzltuqzmkr2vp6rcuchr99cks87","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Cj2shRTeJhWdPSYRqzMu0req5N6RxQ/AwY2BsOPB7QRMTsBaXoVOGQ++j6k7iPm5HRUeKQKc8rfSZBjUxK2Prw=="}],"memo":""},"blockNum":"140902"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1syxekfps8dvgprqzng4l4fqw2awlkg9u4t7haw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"pYaITSMgmpxflp4FacgH57NyE0X7HA3z6JhTQXwqFBMPlXkokwWfnDlk6oaxXw1wwWC6R/1U/9B0H/tiyoSFog=="}],"memo":""},"blockNum":"140907"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g19sd6hlzt2fm784r9237cjqu0qp8ux9fpyvyz5q","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"HUnirVqjjRnsaUNJrY1iCsIwIHpLtT43Y/00TFoJp2ctIR9lb77Y7kujLyZImzmT2WjHK3SnVqCKvcWU7cRebw=="}],"memo":""},"blockNum":"140908"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1a0g29wf8y0g5z9cv9qk99yusvrj626kglf33qt","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"P+qnji/ioX8w3bXpQ7TmVHCRcINyzhoR+ac4bPmrJZIVm8geKFs0mx9V8ulK8EkC8dHIzqaQePPWtNsqpA+Usg=="}],"memo":""},"blockNum":"140912"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g19v4yyxdp4wyqucukemjf0gw59ee5km3pczcptz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"WmOfP/sXxc1szHSW+F/HAYmsZRG29DdwhCHaeRwmUYl2i3cqTqoE51BUVDsKI8wSKoL65nn7iJv8uMFyK+zuWg=="}],"memo":""},"blockNum":"140913"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18rdqp5umfn25lw8t4s5u7a570zt532s2dhcns9","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"WmP2X+V1IjQ0/PVWnTuMfZcEsusmtLEOsw3NPPk8vL1CpchE65NElG5H8pxW+papYvOvST3+zn0rTMOrLNmFSw=="}],"memo":""},"blockNum":"140917"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1dm6082whsm3a60l83rr3x9n83tdm6ktrjzagj8","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"bQ+ZtRoCfrZ6taNLfg8AsEplszNONplM8wcim5xL92YBcG9ixst0Y4asq6YOJv4R3/p+YoXDu/7vfuEzGY71WQ=="}],"memo":""},"blockNum":"140918"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ph039sg297wd2mc3dkj8ar6pamdjzzqprrdhv4","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"CGFOV7CzbPlhqD2Jln+0XeIIoi/7TxHmof9f4pypX+9dD1DkIL/uz2f06kmx/C24GSGE33Kq4lgnxWuesEAt3g=="}],"memo":""},"blockNum":"140922"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1zlrn69lx0cgvfqxj3534trxlj42mfw4uy8q267","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"PxLmFD8Doaq4N2YDkt/pl60RZYbtWPj8siEGi3sE9p07U8B1jN1SBr90AxwH3XOKaV4bN9s+z/4VvheLAISnsw=="}],"memo":""},"blockNum":"140923"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1fz8kkecu97djrnd4rykqklthesklf9r96wzu3a","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"JVn/NB8W57u5++eiU8KSwI2/Gll7DYxB0K6qNmgY//pyWkwWY+K50ewYsb0B7qN9nDtzAESUAQJLl6Pd5/MksA=="}],"memo":""},"blockNum":"140924"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1csy02c62t92mxfrxde5pcf856fssrvy94z79jx","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"JbyweylKVcFdAmnvR97q6TSGk49Ic3QoEDVS4xltsARhRq/OA6ajkUxf+Sz+Z9LudQfOjUtaQaZfzaRwQjhObA=="}],"memo":""},"blockNum":"140928"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1cwnmg8r4dejprl262tdfhzfu8g0rh4nmdacvhc","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"T9Y+Kx7ciRLofrpnSL3t6RB/SayfCOhR7rahgyvmIhw1wV78+L5UUHcGZxSsrwpABmR1G6MiYaWO/zdbyesDNA=="}],"memo":""},"blockNum":"140929"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g15jwzhhase0ftv5fj5uglcpn9t8srnq00d7k5dh","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Z8BLJZHcDN/iBC/t4IwpwmfXxyUGg6SakvqXbXRKMsARVvBlzUi/B98c+LQYY6ZByqRuGFoqDlTlG/LvpIwXNw=="}],"memo":""},"blockNum":"140933"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g17jxg73racdwdjwvlq7q6q9wqqpcsw5j3lzlxnt","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"YSLs66QLtdwFnhtEyzXD88vRDxYksft69HKgNWkf+uI5PBldLgbptOLzY/DQxEy8NJ5Zr+pdG7RXE/WK1X2BOA=="}],"memo":""},"blockNum":"140934"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1gqcelnkjjlyah67vv3jww3svxg5q76qanf3w5f","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"4j38ixzsT1f963W2NYqyivtjGasZgJJffHy+6tQ+O5IO8m0Xrij+bqxW5FXUbLcv+tuFEFqY67xOKfALnjRQOw=="}],"memo":""},"blockNum":"140938"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g13cp7k5rgvzle4hsqpgapuwn69yr4909s5xdnzf","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"QzZxSa8P2aUgsjlIwxec+uSTUrar4/hJ+2EHVo+YxCtj+Uxh74VU41E3pvmSEno0/sZCt8iFZDz95Cji/G2/Nw=="}],"memo":""},"blockNum":"140942"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1uald3hmsqqem993cllr65xp9cw48wc7p6l6h9s","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"tctXeUkY4q0mskkKjp1ANasXjgg4oe9dcBuYWEkM1/Q+z/FdkC8g9fpuVdLCi+1ibu8gVj67xUb9YP8LVvFsAA=="}],"memo":""},"blockNum":"140944"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1lhtv04ur5tl4xvswmew0u0zzppuyd4u78ez04c","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"yRic9ewOT1xa7ZA5Q0U0d7VjdhV0yBf17URYQbXfjmYQ96ohdeGzK526s1gRIDceKKt+YXXmxIOeUIPuJGN0Xg=="}],"memo":""},"blockNum":"140949"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g157zkvng3m5uad7jqg7gfncp6vgfk5rl7nm5m5e","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"79RrMUBb5wS6T0zogPRtDipQFU9loUNCCujiUSY7mHonjONZ345xq9eCPrt3zHSYlNB7jFF60wVLdM4NE0oivw=="}],"memo":""},"blockNum":"140950"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1lw36j0w0t3hzj7g8jeptj2tpna3kft7pgt4pne","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"4rwC7UUocHbLcBTvDr/Xw9EL5AcNNgXIH9O9ar09uiMa/NdzobUhUsGxzQJjKV1ZTR4ET6QD9cg01b39M+Nniw=="}],"memo":""},"blockNum":"140954"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1euaxdl732mkwd0kahd48u966z0sf9jkluf46cw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"j98ZkO7Cwt/RRX5vBCTZUjSMUBlVPO8KJd1EQfZbLk5edCNpp3rfaK+sMYMiPU99y0VkQgi7oLk9DihTsYae4w=="}],"memo":""},"blockNum":"140955"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1c7kw87d4jxwh02y56uehlcl82mdhhxwmtdyufw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"kaB/WH1sD1SmAdb/xSvpfNPVlLpX9ukc9Xaak1pQeut6Saghgx75Qm3SfNRYkRZLpCCq6/+yiJ1gNlmZldm2Xw=="}],"memo":""},"blockNum":"140956"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g15cjgazmezrmm5uv8zkqvfd2t0zkcsq08cfvske","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"NC7eszkUFWIyifF+/eeIUaTqV+82A6ucRrG45DB8+zdpHJDe3mSkC/KrvrGlOEbm/urraNt+yaVVVOI3dfO79g=="}],"memo":""},"blockNum":"140957"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ad3kj88aramg6zyxmeuhf7ngpqg5hjq8xy2xh9","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"5p08qq/0zDUb81wNXdsC6rQHtSrM6NIKw18kaGeZ+fFngon8yveVTINOiQDQdEzkMl6iOppYRcgKbewCjeEIMw=="}],"memo":""},"blockNum":"140961"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g14vvg5wwfugu7f9tgu4nutlenzur3ckf2na2z9h","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"SY//bhIQzhSlB0y8DvhcugFvged2NrEdAaezX2auDKIPVPSSCKXmUalOwBIfnkzJutgbFBQsfUfHZXp1NEpMig=="}],"memo":""},"blockNum":"140962"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1jvv99uw54x9v8f0u50jklg8jrjk5qt4pvmdyew","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"sIyQmExMv2Pj4hHxZ8uhXabgWJt90gRVRfuJwaFkiEQTa/jeQrESAVPxuDmmgAb9DqteZWpOMmvixokaEFywgg=="}],"memo":""},"blockNum":"140966"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g19sk5aahg3wtyruyn9vxvg4j03e0dkn9xe5wxxn","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"8Tvtm7BoPX8TklBlmu0iPuyehxNPtgvQUNQt4+7looICWowqEjf82KQwmX+3RXYp7msDpn9/2jXpTqmZS3RoZQ=="}],"memo":""},"blockNum":"140974"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1xucmr9h5yq4l9hjl84gelw4mf4jdlts49kn4yq","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"GvaKTWSEzBn1slSRYrh45aK0cqxWe+fyX1a/+WTY6lB7PcEAIUu/anZFJf9rlrZGtIt1B9xBEjxUIxaOPeWm+Q=="}],"memo":""},"blockNum":"140978"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1pj0l4vmy2nl49033wqj68pjqe539338ylmhs89","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"0kX8xIrcvWHrJPcialHPAZGy4DL2MePzqKDRO0E44e5LJZAu3j68BvpvmuGt7yP/b/C9KTLtgkxKb04hnXWwnA=="}],"memo":""},"blockNum":"140979"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1lhg3tdn0003x5a58ptplagd9gara5j9hs5lwgp","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"p0uNVBAfVilmYtU9PwCB1Wpflu0RzZy5V2rCNkV/httJKMTqp2a7LYXg9ABOgCnOabHaZYjlCX5TrUluU0Cp9g=="}],"memo":""},"blockNum":"140981"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1tntcfc7pexqmq50ugj59klnx4tz56dvhk2qwhr","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"BucEcGJXPn8QTPCKJMLevClLQyaVkg66J/YTJXKs5DNwBFJtspEQ89wd7DZ0KVwwbteswXcg/nNj6VTU5GWQ2Q=="}],"memo":""},"blockNum":"140985"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g13en7200ysqp2dqrc0mfvvr0jkdrhndj6h2l6yn","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"IXsbEtlHo/pswYe7lMIp5RkU0nuzm4LZbqHsCbJbB2YZK8fcyzWEYBVXHHVFCo0PPYawGh+q6MBrGer9ngYotg=="}],"memo":""},"blockNum":"140986"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1kj5exul73ghnnhdvcq9dqk494zly2wqvg2rxa0","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"6ptFG370NS9MVtoTbadQJH3Md8PXozD4bddL6VPVL6MCDo4zxZH7Z58u0J8zP+z3H1J/s0KG+lTrBBPqTuuapw=="}],"memo":""},"blockNum":"140987"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1c9428dy2l6rq9vtf72vr4e0w3thup73c2zda85","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"GfDsQcHdq4k5WebMyI4eCGkXanSHT9B3yyniS+J3snQb3rSevX8O3m+zZvCS03eBOfm7LHR9UU8U/yKXbzMBVA=="}],"memo":""},"blockNum":"140991"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1yr6kdy0arra2vwux5j0dfkedpxcggefntehv9l","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"9iRR2jijUp80QFoAhgNaXJuinGtC0/XPIAmujWZlotZ1sxG4K5IpNfZ3QcKx8VpSnIMigDaa0NajQ099UK70XA=="}],"memo":""},"blockNum":"140992"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g16r7ulc7qnruj32ux9p6evjp6qatv6la7t7405p","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"xK3aluINvrro6JI/BYR38vWHHbEVTVjzqkZhK/T2jxV6U8PCjZAU1E7h+uqSdrKJxQ5lZyCzpjvfnjnBQsLOKw=="}],"memo":""},"blockNum":"140996"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g178yp5gh6lysplej6qf7je3qs6earcu3z697a6g","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"+iy8mPj02c6/NajZ7L53YaPyMuMbArMOlZu7R8q9E5EDdSYGQpRI40NxX9zSKrvOUdoXCYhkxgyIi+FlSH9IpA=="}],"memo":""},"blockNum":"140997"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10ww3d0dej3r000s6pneaevtf5nvgauml2f3wad","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"RiBiqTpuyEuvSnFFPxCxnDWfQwo64B65SwgFBbvImidVu4tHiqwZi1wvMmaVEf9UbvsLtdnVmpC86x4HV3BGRA=="}],"memo":""},"blockNum":"141001"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1kl60zth58dz5ynzr7xusz60fsmprzggks7qw2c","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ikmT7E4gKuWFlA2JewBk/gCfwqqkpIs48x3vvuC+Z3lXqbOJ1bhmj/pLpp3he15sFYP9fHjUZr66PURdPNYySA=="}],"memo":""},"blockNum":"141005"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1j4ew4nu40yhynfa4085ttwfl7pj9s5l4anqmww","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"4GcujhRARzYb4h8E5hZp4Jhof7CcTK9PGzWyNOPJm4l2uH95kCL8IymTKIY7Qo0ujzSucn5/UL+wg060UAN+hQ=="}],"memo":""},"blockNum":"141010"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1s6qmeyvz2cu478eat9gdegd8ce033r5v9psdy0","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"M7IkQSNv19hHz9kTtZzCFj+1+ofZwlez2+U8Meu+MyYsE6lElBTGJfOsrC9B/htuolU1YwKXlRQEEkbxrRcYCg=="}],"memo":""},"blockNum":"141014"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1yf2tpyapnx02jarqzx2nnm0g0zt65k63ptfgyk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"VnB39jZMy5SSohZHPStf1L7epvI1ajbLhA4MlP4viEdHaG6UUKaE+9FzWmlkCM9q4MJQPxFzdnM4ErY88p6uqA=="}],"memo":""},"blockNum":"141015"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18ssan0t3jdwn2q6m084xp8ue83d28gxwewruek","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"3u9DCMLT6oYX3iXDUiKHPr9yzuVsEvSUd+WKQ9wqiNd/StxOpT4KHURCfEUazjLXa4YScWmAwjLOl17Fh/9fOw=="}],"memo":""},"blockNum":"141022"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1p49gsyu5vv7wvtarfqcfaqetvgg98su6q53hdk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"QYndjuAws3lf1hJutM3PQ4X/9k4LJh69CxZAHx+F5otmWdZpmXCyKsxLhV49hJrEN2/IH+i55Qyci2hTMj9d6Q=="}],"memo":""},"blockNum":"141026"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1czdk2t8fhvkscr3cmace2j00uz2pcdzgglr73g","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"j/BiEn3G+VbjOIjWhNmSslZez04UJ+5F0IeO2L49NphOT5AadrgiCegkcu6XD1nH7Mx2A1yHpJXBJ76GT7c93A=="}],"memo":""},"blockNum":"141027"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g178nqry7qwnwjjap9am2nnymy0hwm90my8qce9k","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"4xMmspjcgGPv5cPj7OfvaCLhxYk/mwJMjEud0Bu/Y5FmisdKhdN1ljmrgx3S/9NzH8xanXMMF8/TQHCgWYcfyA=="}],"memo":""},"blockNum":"141031"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1t3047m9f8jejthzmpeh63qwdnsxwzef3t34lws","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"PYjAY2JMR7ApqvMen+69zsdCT52v3w0h7A9phCBPIZQWLbWf0x4vSmRL+pnDbAEf+xzpiXXBC8bIytPCq4ccxA=="}],"memo":""},"blockNum":"141033"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1jy3sd0r3txcjzaxrzg6fz6sy77tlcrd82hjfh0","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"HJ8yxCJO6Ra/iSq7CMsn+56P8SzNxLaMYE0fkjRTdxANpClOTG/M1yMDjcSVxmNT7KMitc7AGYVZUFBGzCPqZA=="}],"memo":""},"blockNum":"141034"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1nr7xqcef3gufu5qtgr9vrevrat2q44hr5szxvx","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"m7WaF+nQpGWyhwxnYLT6GgiwvdIQxexjLzCTZPBISfN+u5Pjku+4r3uGK65vomaJpQD4MVNi0iJSqPUbAMdkfw=="}],"memo":""},"blockNum":"141039"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1wq6sgxmny69a345c4l8mchf8uenv3vv8ul64kv","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"pJbklv+HufgmKOaylIU29Ukh8jkv/NUB+SfoCeWnV5s7cIFIcVmxgns7wNi9xitLfZZ9Icnn93Cviz/XyT8ajg=="}],"memo":""},"blockNum":"141040"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g14kmr94jqlpez9t73vl8tjceepmyhazyctrq7rn","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"lE28ll+APtOAv+C0/BNSxxd+mP0uHgjuaJLfQ79l9addhxt0nhn0NKxVzRohPDFIQ67yCdH+tafcMhXCXS/zpw=="}],"memo":""},"blockNum":"141041"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1steqrxvzverkj9dsgeams8pvjv5pqd3wzpmyn8","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"G2K2L1szNiXF1VSBqfxAb2mKYGlCUd/ykL3NvVtMOrRXLXW3Oz3Lpz1PFNqcFoBpclAElZKqZ+Yz7x3P1HJ3VQ=="}],"memo":""},"blockNum":"141045"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18z6hrnypja4mhqssv9yllpqxy6qql9krass6r5","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"b31t/zfzxsGeRY2I4PPz7mfiQwaxb2NW1G7qRCkktJZb1lNitijzKhOYsyx6tcgb7SofZBc9mD3TW7OiZxhl/A=="}],"memo":""},"blockNum":"141046"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g19pen9lxp79psx3rfcnzpaqtc9a9z2wp8vd2xly","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"zjZ4lKxhUomQoobDt10G5V9aVyVrtVs/ieD4LpX1Q6da9yFluAPwGPdT7WvM43KWzU3vCsHMNqsugO2+FSP7JQ=="}],"memo":""},"blockNum":"141048"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1cpt3236e9wrv9spmtuzcru5mg6klx9tsylwvy4","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"PLyCBQo0c5oJfKExy5/4NSm936AvQtPLOh7V0CgaIo0HxmnSGPTozBo7LIHARoT6JiaroO72Fu2yU1sLUNCZgg=="}],"memo":""},"blockNum":"141052"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1lp0m87jyu8rf30yst2arnc5n4flg9n4auhcl0n","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"HF5vsEfeRru3esDDljgZoSg8S9ppFMd6RNMGmX38PS427hg4HLsrTGbYm1ZfOuN/M4mfBc8sFuJrrreCLq2hTA=="}],"memo":""},"blockNum":"141053"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1mwrf6kh9qekmm5d4dpkenxthhy6p3hzcr3xkfj","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"NOYCfdOQekU2A1YGxhBUpOBFrQm2ruzQNd5jy5/8KrA/GrrVVbkRXrkci0MqNsWYq1HykMdqarkVRNLQ9N5iNw=="}],"memo":""},"blockNum":"141057"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1m3hg35kqeh0qwgzsygk0xtrfh7d2wtkedt2ehf","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"iKu05IuZz1Ri9/sCmOzjNjaQLjQK49lhvDDWbQI3DSFkGMdHPinaKSsqAkBw+HuSQLq6FQcoqh+fK3+Wvob5SA=="}],"memo":""},"blockNum":"141058"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1kdfzn59pgs3gscyxpx90e8f32u0kgaj8c832j8","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"5t0GYPSPAYa9h2rmlG6qg3Tb1pqv8VefJPFCXhSg7EAP+5502yayS/4sEp8l9Uk3a1W0XfRGjnTDRb4/COydLQ=="}],"memo":""},"blockNum":"141062"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1vs4y6gxu45j5fcgqr4gmpeytl2vwskhxdwzq9j","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"bnDl848+GQ+TbTyzRm8PcGs5j+y3kN3IGOXXNTT6ktAMnZET3CblFTYsrzCbtpYoUWSjTKrUr1coulsvqQFBxw=="}],"memo":""},"blockNum":"141066"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1yqw2eq2ax8e3a5mxcvwjsa2h3ds9wzl6k05dfh","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"vTSzybr7JAUKpApOq9u8mAiKT9ffnrKtqPV/5NM623c84O/R8Mgfax0hlVuz5nOf5+y3b/Lbgon2R2bnMKO9TQ=="}],"memo":""},"blockNum":"141067"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18mf6sr07nggz7jvf9ypcfzy9nan0aehreenytw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"aV7VoMqcDfiJ7H7EPm3xFPYI6kkfqGUNJ8wpGcMvHrtp+NgCz4LnZN+jGeXVuwGLsmbdVCSKHAU1sKMBxNpasw=="}],"memo":""},"blockNum":"141071"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1zwmyzh99t5sd704fumgwkhgz3fz4cxz7a48gz8","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"QWpeOPGY2KefY1gwAtYmduT26pKGiLLBGlCeD9I6aLFuDWo7GvO2gVm/icqgwYDbrGcVMr1Ojn/+gZfQbpsyqQ=="}],"memo":""},"blockNum":"141072"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1rhq5y4j9c47uxh8g3r2qp5k6tzz28acg9dfjg8","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"+q8jbZ1DYDIDnv+TM8PN3ktFocf+z2mH2D3jB+VT0Ftu4i2KeRb9A/j0Mjuj9jlLEZJcAwWonB4ejhNOsaWLqA=="}],"memo":""},"blockNum":"141076"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g16ptp595y2lwgekk7q6jc70mhkhj5s52cwt7ny7","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"bQVNO30Qj81Gg7+mTQKK6SpngyRDu9kdG0GBve4kXbA1LVrPzi+17uX+YEy7pxzOKo+hDlIyIfiMVdm1s+s3kg=="}],"memo":""},"blockNum":"141077"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1rsrmltksfn8dplasxu72ypnfytuvkm4hjcmdf3","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"L0xu0eoJiaH3j+Uk29cnBuF+hkqVfTxLyk40cfwmfXYxdfAyjFXg2CprYZU8z/JdifyzbpeTYOIy+pJIjQgbYA=="}],"memo":""},"blockNum":"141081"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1uyqc9066erm55klge5vz7ju2ltwyf657yrl9uz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"gsOQ+IOvMTIlY09kkLDry6xsaeYb/+pYYxKeadOpMsFdKJ1blXiQKqv1SJH57FT+Jqmh5yoEnf4+EHKsEd31/A=="}],"memo":""},"blockNum":"141082"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ngjmj56zgkrytm60gtl6vvg6h0g6jzp6fmmwze","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"EnohgV/WfOUt7OrnbgBDpN02aO7H9sfjsNYQzu2q46gluASiNU2Os4MSWW3jvJPxwnEGcLhHbVaJkI/oYCS0Ew=="}],"memo":""},"blockNum":"141083"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1mkkxuqexun74csjseqjrj5ypmv0eh9ffqexqey","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"n2OAPLL/V9Xar+pazrROj+mYadwiRtXiqLf7mDR2zW8rTzFrHKap+XvL2fbLAC0qgaSikzVxU0Ud3PmtRkUY4w=="}],"memo":""},"blockNum":"141087"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1a0v9rgh38f0xjzg83wc69pm4zqc0ly24fjgcfh","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"V59ITCyJMrUp8t4nszhKzXQBWJ1qHme8oJEoUaypP4V4MMK+QYRMnyFs/rQHXXeQzbV344a73OHvA0jzxbVNlA=="}],"memo":""},"blockNum":"141089"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1qz25v7uxz5hlxc5hjagarm86tvkq4y7kermk9a","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"9bXfvrHn3DE6lKUOWqlFwj9p+bafnjZeoAYQe8akS4dRvRL3OvZdL/kY1qzYMyfcMa0phMpvoyMFOhN6/e2CGg=="}],"memo":""},"blockNum":"141093"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1sljxekmac4gg05cc43r69uexvdtquz5suwr5un","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"YM2Rgf+D36gYjNDaYX3xxXi+HN36e0q+FGd1VAa5ZYta++kivha0arjJa3R2N15Ug5/axzogtWUglOOTRq50jg=="}],"memo":""},"blockNum":"141094"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1sgq8l2angjngadapg73zdxw3yhderj9zfw83aw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"M6VrRcXW9BKCW2eDujITPzPR8m3RH9BuoupGBpqK7EtDvH/bt06zWAkho1++3JUwzwPrnH+vsJWQq/gMcqftDQ=="}],"memo":""},"blockNum":"141098"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18ppat6ugnmm6fhrshlq9mvgfw30v73n4zkvdaz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"vZF1oOt7otLilIOoNT/yG8LsEJHviPF8YcGbvmrk7KJYtaT8EnBHEkprSZ3MdhJE1c6+GpDQSOIo9iBqbWmS7Q=="}],"memo":""},"blockNum":"141101"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g17dms6ent4vcv8tamgss3yr397zhyc28mj0vnyz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"/P3jk47Tg/FuYb5505SgBIkyQ24qHe5hLEeVnqsVnT8IePoUGjlh/a437Xwd5bH3+L9H6HFihpXuj6DOKHnJ7w=="}],"memo":""},"blockNum":"141105"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1pq5jhduxqsvxp9erm6wkx9xms87zl0lujk0gae","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"yRTW5beaSuiNBd1kAZB/IS6Z/5ORWD3f8wdeFnUwjbBw/2okZD2v4LQ3Yndz9J84+32kSBniDNeXLHOY4rPgag=="}],"memo":""},"blockNum":"141109"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1mqmd85n2t3y7e0qkhwvee8jctenvfx5yj936kw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"WuGP5xY3biOKitcFG5lrz/G0QVAxhUTBwlOj1cVXgt1WgzuSQw4WkUKfzEAsM4U9+iP9exZ6j2j1FYJMQ/lb2w=="}],"memo":""},"blockNum":"141110"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18uz4dsxr7fj4a0gkpnedhvlm4shuy6xghluy8n","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"HvfSFphPlYn0Pgx+WEdrAMyW3qSfcQfAAxBvQN9daj4g+guMOkc8vJ/NuuQtCPs3VjsddegKBnY/r2fNb0U9jw=="}],"memo":""},"blockNum":"141112"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1a6c953tqxx6l9dvr8eduzcn8qksuzsnhulfnt5","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"fZhsU8DxWkGMkhuuWh5p+WIbs4oo0qRLc9hfKYLFcC16kiGxyWCEO8VtJqFoGfSIZIeNpBmi9u7F0cDYDAj01g=="}],"memo":""},"blockNum":"141116"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g187zm4a5hmp9dda7vluhkhws5033yrj9m2vtexw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"R5STenesaBsy+Du57FJm71vGurjc1qnucnNkil7SW4I37q2B+FbhNn/cbpR6IctX7JsraxRetmNeWqpSkxJiWA=="}],"memo":""},"blockNum":"141120"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1jul84gyc24rruxvz8jcaac63cysjcnlnh3065n","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"2FJwzJ5IFjLdDDFi+M2Bdztc8YThyel5lZNQxV0DIlRqGicfbfaflulKigLaiZyKEmWUqiiCZD9wfLyRRGLpxQ=="}],"memo":""},"blockNum":"141124"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g125gelz7vsr735y2jk7yy5cn50uhhlcfkq4ngva","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"+PwbzZ9WTKCoxFNKhTmNLFbuGkPIt3HA9Kb5cpC/5rt6xK4bpevY+NIal0Wud44p4qepWUuwu+0sZ8j7zgqwag=="}],"memo":""},"blockNum":"141125"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g14vqhqs7x6qzy0s53069fpp8n9ns4k9kmr3tlq8","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"i0+dsxRgyRgz7xh2LLT7izih+Sgumx3yZNGSYQQB3DYObgvfTDLx8pxzc6/lpdGH4VAUmuar5D5dCSIyV3gLiQ=="}],"memo":""},"blockNum":"141126"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1jkrqxem6tmlg9sk2kz6prp67zfcgp9lpqedldl","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"lk+PEoqpww0JIhjhgVh6pc6WBwYmDRHfvFAfz4j1hscGo2hw34zxdsO57A0LmOJQPDtpEdBB9CsiYBSV4zNr/Q=="}],"memo":""},"blockNum":"141138"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10ljvrv9jeezx0h7qev09x0x9scx40ay50t46v0","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"SHGjrs5s0rUbZ+o+4LdO7dS6zzrk1O2sA8Uxb3Kar0xJL9pBA8LeazRGHxQFl17iWcsr77CejBd+dZWs5gWYJg=="}],"memo":""},"blockNum":"141143"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1zxdthej6mmcyhhlule6s2r65rxl4rmu60uuu9z","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"nDwwPlVwZVvYcT8Gw7mpEhN/jpqdqFuR8duO/3xMVwQoeUklRG/tj/rvMrCIFzb33ogqhv32L+er4z7WXprWRA=="}],"memo":""},"blockNum":"141144"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18f5slaqajfqua7a036rx77tnk6asuv5urpnzzx","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"KbxwYe0BBxzlhzhT7cTSGHMAa1M6T3Qad1C0b3dpgoItG/7gD7BfnjoCykVQlZ6/SIT2unM6BGeGmtbw7+4wAA=="}],"memo":""},"blockNum":"141153"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1cfq6qj9pl6chmzamh4gx9g95f3r5j7mz4jy7v8","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"we+Q5VedWP6DlI1ApMWis1PKkBhg7Co1602Wvhi+aPpoyJBJI8vSum9WCb5U9lv9gACbczqaRmPBB0W2BYwETQ=="}],"memo":""},"blockNum":"141158"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1kmn9re2esqh9akadec4288d6mf74s8v4vp5grk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"277GHhtXDoWzY9Kz7dglRW4Z6VvFfX5M369JdU6mITtXwVig9cbeUSDKhF9YvnTiUt1eqVRtPT2qalg0HAo9ig=="}],"memo":""},"blockNum":"141160"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1xk5ygs8ezx6evj3nzap4zc0yr9y5564lkw2xfh","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"aMJocMwi3DBYiARDn/iKr0QqY25RDQ6t+6t3+vaVWfo4uUzqplKzVxOABJ7FJZ+R8E1EO79+m6euOC6ygpWLHw=="}],"memo":""},"blockNum":"141175"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1fn74pr3wxe8vkvpsxrgwwvl457qk9ff5ccz535","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"+UkElcg/VTRaag3t6vwi0HBxLvEK/G1Z3+sAmWG/kwE2jY+hgMkWoICpRQPI2zKOeBdu39fWodYriLCL43VDiA=="}],"memo":""},"blockNum":"141180"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1yue6fdjrtdwqfcr4gkkjk7j2c7h90rephwcxy2","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"kRKnuCXdBHSMDUykSeamKEX4pkkYybvWlWcd9geKJSE6Oud2s7aunz7k5mAiEdBOdAZr3SU46/Fgf99uEnsI3g=="}],"memo":""},"blockNum":"141181"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1f2xjf5ed2r0jf4myx2vzns6ku8xkuddq9mjm2r","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"jh/96WRtvwdRWMwoKfBuraV0dlSYfj3XOwA1JgLi+VJlyniHLpwmuKALKpkLpKC67eEUcRoi58JiHNkAl2Rd5A=="}],"memo":""},"blockNum":"141185"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18ny2a6a0yh7py94v4v9lf6cq970hdwl2l9n895","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"N0ZOM8j7uV735diocofiozJ/2NZo1gTEelzPO/5NNhpp9Kowd5vNp6ZfWcqTukFQ3rMbMRvlAXTIP+oxu+lZoA=="}],"memo":""},"blockNum":"141236"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g140msvd3xupylscfzvlc9gxssfdjtqye94ytyec","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"0EPHgOHkWHGFzMdWzNz7VJQbX4yLTuS9QSNxdpz+nfNIoQTk7s0S876UKFeEvdezk6blm+8RoF9zB/mWodg/5A=="}],"memo":""},"blockNum":"141237"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1qtxny6048nfhk75p7nyy683ysal822kpnzc6lh","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"NUb8B7+2GL3mzSvVDWZle0pTX7621yxZCVqApwqeRHRdl/RBv0Yrd+1pCqJBdQXVNgzWNEqIduIhVGWsa0yrOw=="}],"memo":""},"blockNum":"141243"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g12yx3r7n7wv8vh3f62nl29hwr3h9p4l86d6a6uz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Z+aTY20dp0i7QOAaNYQqO0a2hJQRHq/SyOM3TWfhvRgWkYYiEnY8LSnzrs1J35I8Ue5HARqFWyKTccGQp6T9Bg=="}],"memo":""},"blockNum":"141256"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ptxxua2nnsh2uqje34dr6erv7p82pct6xn5fg4","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"2GWOj3UOsOI7d5bb2ghY63FtwMjruMUzyaP5ZsunmmJ0yPWIiXANc8D2q1trXu9Xv2E+tg3PAP2sqb6OCzEl9w=="}],"memo":""},"blockNum":"141257"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1lrzlufc49j35tyg58u4afw6jlw0x4er5lfjq5y","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"nnCHUYwOEXl42L/IgqA/Eajp4Q23zf3sBYR0JbFrq4gVPzDXwk4inWxAs5YroXVoHbpesDtcB0WkbwtbKD/KGA=="}],"memo":""},"blockNum":"141260"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g17q35x44myg4zauhwe0g93l4uwgqnzgect7elv2","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"hj4Lr8wDu5LAD2RMRb3I8hhDbxgPU06TLB0CgtIeVMpmrdHAgWYDe+jiZbYlNvvNHzJhbnaWJ2fo9ZSHE3/y1g=="}],"memo":""},"blockNum":"141267"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1pgdpxhka2hw4ze8tap3assuu04us2dcdr4d4cx","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"nqcFWILq03+u7wUk5jkKgzRu4sBpjpfjyWXRo79G1vpB+HnIr6apcomhp/Io5pjD8be15IV3jTMy6D9mMuunZw=="}],"memo":""},"blockNum":"141273"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1x38qsqhke996suv44y4lnk9lrn549fakt3pap5","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"8NMC8pFNVcNVOUq8bwkyIb8XP5LJksySS8lhFqbMbGtwunzvdp0dGDJTWQY04z8ThdBEmUh4sIvfKYJNw4povw=="}],"memo":""},"blockNum":"141274"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1e74uqw9x2rgkh3u4j2lk2r2pgjzcj39w9n9zt0","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"LOlxRqEdEABtcXOsM4J2eWL6RV4oXA8/f7CHWha7O6VgzqIinoq6YgIJjwADOQO/sUUzgxLJSSkmeUkvDb3Hbw=="}],"memo":""},"blockNum":"141279"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1m9y4x69tuvmk64s4rcttjd6g4tva0253mqteg3","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"BzpeIh5AbzsZJ0WrIznCAUiDZCnRfqXBJHr5Jw2Yv+Fj9Mdm1qMJueFBVRLlcG7yiSsq599d4xn4+0mo7c0aIg=="}],"memo":""},"blockNum":"141284"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1k5tyy3ugvj6hckltagr4lhhvhvfjqwd3vm56xx","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"skwp3q+YsSrzFkPn3jnoM/SlbZ+5NVW0lkBh/wR82JIJnaxkvJzFSrcvaFRzxc7VL90mE6ZX9c3iVSGUqcZfew=="}],"memo":""},"blockNum":"141288"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1d5ksj8wwwdqrd6hqd7gnsqcv79r9jfcyp8f394","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"mxIkMYo6KvLCog3vwO9gVvMyG4AVPCRz555WqY21sLcdu+OMi+/6BzkKtG9XALWRSZ1S/XD0Uob4DPkdr3uK8g=="}],"memo":""},"blockNum":"141289"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1hgwshwafd7s35mfkkqjcwe4lcvkfm4panwuzfv","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"7A1v1DkpzHexT04rj3Av5vsXAzd/ejgY/v0ql08HGflqLn1IniWEwhj5SPQHx/R5sAnJvdowjIL7l+4/QJPH6A=="}],"memo":""},"blockNum":"141293"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1whupv24d6smvmdfut5c6v8yytml4cym4laxjkw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"mvRc7leyTmbeDOoilakhBDUEoIsTvtjV9ZFV3Sfmk0YsTzlHBzEJJsZyg187rsFPV8r7+ryJqlPLVCXMqb3rpg=="}],"memo":""},"blockNum":"141295"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1w9e2atngdnje8dvj5ft77xelprwtf0xe6vgkn5","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"qZsJvyeWxijoXZmeGmr/D1s7CW0So8eHuqKwFgQCtR1zOhctUaM6JBX4CTr3ilb6G4cb3seB5DXIl4nQi5rWYA=="}],"memo":""},"blockNum":"141299"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1gqnvy0csmuj2tdkqvewv25kvv56f7lsxu27a4m","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"WzfhLNRPCyfw8MlS1V7YYPRA6SCtcgbKxW0RzVDaPAJHdwjJiSZFn3L58ANs8GKozI+6NLXuuaeJu+fCXrp8Wg=="}],"memo":""},"blockNum":"141300"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g15d6kepmn9u0mr9079srxxxlkqqpa0mmfkhk5ay","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"xcopPs6KbcEeiEGTlAIFTqvunnSnu+EYAXHrMKXrQjdmLrV4sBVREg5aB5NdR1luiIWDX3qJhH6cpklMM4mY+w=="}],"memo":""},"blockNum":"141304"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1m6sxqyfle8x5mzxanlaety6792prqfwmn60ex4","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"u7UQ+CzTIAlMrHvJ6C1b40DYfqmpL6+CC3OeAhnH1h5ZQp7asWbgZ9Glx2j5ED0APGEFHfcpVoEifiSM+DC1Zw=="}],"memo":""},"blockNum":"141305"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1985gkwtx97g7rs3wnpxv3mjzt8smrxmc3x3enr","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"vF2scF8JPkKTCwSDZMRiOFL8KBIwP4DYNKjhu2ZwmBYFwGX7+pYEdJBjrCb+dotSmxIE4ZMQgtqQrIWB/5lVRQ=="}],"memo":""},"blockNum":"141309"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1gxee9h6zzxutuf08m0sksmmd8vjg3a42ecnmes","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"qlUY8gJ1DzTpnxFUNLxignMSI8A64D/vmJJgu5hg4Tp/x6+WpK0Dto9iZ9L8G/raWNkgSUOqudInUGA4GxFDSw=="}],"memo":""},"blockNum":"141311"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1zpeg4snf0ducm2knc9w3hn5l5s9546tj6ez90n","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"0K6o6xozZDyMDzp00XBsMG0WBl7fVd4N5Phh9Agi22VYktWkBAnZj44b2jmetsaxKqucJRU55CC7M1ooIzc2Yg=="}],"memo":""},"blockNum":"141317"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g17gwzt8j2lszqtsntsvafx3yx6a5hme6j6juhdw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"bVG/a04uc97TNmM4sMTiGlzmOotVDfOhmUj1gIOiez9UjMBKlZ/ACh3/G2A1ugPdGBWPqXicP6Ezwl2uMMqVZA=="}],"memo":""},"blockNum":"141321"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1uc4v7kf6u0tszgyp0hs8hltff7zgyf0laceruw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"zBfMrvlwvF2RJq+vYl1kBVMkdsI3DBqSG4wYo/V3vIgd1fpiPyZK6+GsPLg8MuccbxUvUP+8g+fPiMp/mxJpSQ=="}],"memo":""},"blockNum":"141322"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ye2pxa436ru0uj0szwmyqyk6fl5pxrvrv0008w","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"+eaQLz603wc5qyLW9rZANi62dICNZA6oPBXljGFd9I5+KSJFKKkvSyLizHOrnYD4upve4CVpLRRGZUPRC7IAPw=="}],"memo":""},"blockNum":"141326"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1l9g96w2zshkc5deqluj6uv0gwwy36lh45srjht","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"z55tg4zxFjZAVal315hv61us/g5SZtAfmWtxkBW2osczt9GyYpDrnKVD0MecJsSxOyUGrkd91aMvfk4FcJ2P3Q=="}],"memo":""},"blockNum":"141327"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ewgrz73uv5atrgfjxtqll2xsnn6eel2502xdxh","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Nk6T0BA/eeM4xg6TtZbS6cp1PCeOzymRZ+vc89jn08dyHjmhU5+O+p9ZEmV5nxscWdeCy8Kg3v3sGpr2z3XoxA=="}],"memo":""},"blockNum":"141331"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1csh3q96c73pvqjnyfnlpf4k9l33drmy6jz5wrx","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"WBOvDSpLPhXLil8qtyapLSbDdjFQEXn7n/0+cwhwJcsSHI2/byvqbWfED0w6k4W3b2rVMhooI1MsYLZKiLOrVg=="}],"memo":""},"blockNum":"141333"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18f7f9x8ya8j63peknruxhp8fchv8dkz6r8j4p5","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ETZs3asi2PhX4TsH0o2DFqQRnKYaSzzgU3g76jpJFc17xgFUl2BlHUxylfr8Q/zMlFOxsYR4Htr6jpe9/ghrVA=="}],"memo":""},"blockNum":"141337"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g13js8rz8kchvjz967jyh08jth526r86yesykz3q","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ewCDhR4JHzaIodqhfK7V1xetmNNb416Mv98a/hDjOLZsvboFZU2mdegi8RvfdOCMVUfv1U1xWF2jdpYOtnxiKQ=="}],"memo":""},"blockNum":"141344"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1jdflepkjqx8vfeujp9t0yck7yrstu6sr53yxq5","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"9U3yhE1AK0/mU37oy6z0auuMwEmE4I/VOn5W032/JFZ29xPfkW6NY6R+bjZYqRrkmChOCoJcsv0BVaNox8c3tQ=="}],"memo":""},"blockNum":"141348"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1r3dmh30qhdx0l9q0tpwx7suusc8m486fegymdj","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"CO1ctTLOueVe793RYGrfA7dD6ymZEjjL0bVj8oVPSM0lF5vSGxdqdksRx940TbU8Nn667Nw9THxVmKrKSNDTog=="}],"memo":""},"blockNum":"141349"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1e8cqd5z5kxmnsj50c6advk86dlyemhr58cfz5y","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"KB29D23B3MG3yQlTWWPKt5T3uAsIwa9u/RGqbvCilLM3v0cb3BpqJDoovH9PRV4Gl+agtyAJQezLDYVw0OCfAw=="}],"memo":""},"blockNum":"141354"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1tc4q5wfmvakjls30xz82d5esevny564q8ywr5x","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"5yngJg0C0mpDamJ+gbwQGQ2l1ucLtSTXGSR7XHz7/TM+s7jl7g2jYEI4zUYwJYnHG6fks9fVNbnQInXSL9YmRA=="}],"memo":""},"blockNum":"141355"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1c94fa3fyjzmdrlkkytsx9ptkv0ltmq02hcx627","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"GovWR49uf9hdKEWj4YJhPo2clOayDtN54uQLzWVTp5AoerySZhiV6sW42F1Caj1avQUi8UNxNlWEvYeHQno0bw=="}],"memo":""},"blockNum":"141359"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18atfndrhcgh6vaxy463e5qlc264f0f2jfsr60v","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"hUgnLhlsY+rp/TcuMXapMdDT7D/1K557EnRtf4kmdOFTY1h2I1H2n0bB5MsRsStwZLKcP1XP/sdJu/h8hQ2b6g=="}],"memo":""},"blockNum":"141360"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1z3mjmyyh82kx4znf8vepq7n6fdj5y9x895ahrk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"jQf4F2FdXDyNuY5z1hBzDWGPBV/BBjyqj4WKY06KMvU1UJ5ECeYubTQV02i7EX0LZCO6MPFPmauDc2Oe3/WqKg=="}],"memo":""},"blockNum":"141361"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g156xjdvrxcg4xdscdzj2z4peaefeac0r5q8a98j","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"WTrqjsS91vkF/iRQnQx4cAZIw3Ui7hm8nPHVEbV/OcJO785CTd7Hf6xaoHty2PQbT66XRN725dwU4/WbgnOLAA=="}],"memo":""},"blockNum":"141365"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1px82rth6g7s3fprd3qf5fcf9793dr5d5ccmjx3","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"+ZgTmS5e4+qqSrTGHnY7Y8H7CmY0JxpRayTtzEvYD81FGjA1dXeqBzF5IA3jLCnh/1/df/qsnvmUzmODpPM2Jw=="}],"memo":""},"blockNum":"141369"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1vnc8arwdylp57ysy2nrtlc7wk0e362srzh2lqs","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"9CiYdeLGmqVMdNySt9lqccmuWzsuq4JL/7jgC4m8c9JGGV18M5WTVhm9h3PCero0GRFNgMCRfNj4XlAw8IN5GA=="}],"memo":""},"blockNum":"141370"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1xcfjfxmec7tp48zy57jacqrfryvx0l20r8023j","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"hl0zYlrVQYtg/zU5iLng/7gIObSU8Jk7MUXSviJd9+kk9QdIszyj2mjP5CfHrn5zLBcRqblehiz21ixkTEarjw=="}],"memo":""},"blockNum":"141374"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1gkkxa3z5yg5y5pa7c0e6x6rf0rueuf370r37zj","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ug8GDaG34oZ38qTUc4D+5LkJz5n+dBtYNIj3z/Yx2CIp5hKdNnkZta6BrQ00IGGr0hhRTrTp34Edu7XRLQGG8Q=="}],"memo":""},"blockNum":"141382"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1d3zfcr5v2x9ft5ttufa3hjt59swmxr6j4kfc07","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"f8DwHmsLTp6urh38efvHPVDIBZfsBdkBSae1/jS2LBtMH1Yb/crviK4j91M3DhqQXsBhA/QUBl98ZzFYzChksw=="}],"memo":""},"blockNum":"141386"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g16v4q23q6dqn6kl2rhfd3dmz0j3zya20rgc77lk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"RGRJcEcs19+9NO3sa/fQiX7YexwoUAWntsWnAsTJOoNNC2irvbu9XYKl/OwRnd4ieaqvFkPBjlrkBFF7oy2roA=="}],"memo":""},"blockNum":"141388"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1t4yp69fn5nartd5382mfjl9635eh5jgf9fanu2","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"bcJKuVwNup9jpLwCeMa23lOEcv/ZWTyjUrbEkxy8tagt+p1TX8/reh2SMDEsJghppL+Zct/XMDgHLT44RP1fWA=="}],"memo":""},"blockNum":"141395"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1euuvyk9dk2xsg802e375d3qqsrl2c82r42x2kg","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"rEmhKQWxbIFq2q1uHOB93cR5sx+xH8K3mI37wRVKAgAiFywnyT+0Wzkl0MM7SnxfEaut/U9FpBPmCRu+XbJh1g=="}],"memo":""},"blockNum":"141399"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1u80zwamm802f7ghz90vp34aafj6rhql9ts8al7","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"JoM1r1ZWAdRcqG8Yf61oBp7esqNvB8haEiAF/pPt4S4/kRIsMu6yY2r5wgQ72d67BuHNzoTXGw1009aBacw91g=="}],"memo":""},"blockNum":"141400"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1afm2afs8qfsy4fek2chfz87wm6garmesmwzwnn","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"R/pwCrQaJ3/jMvy2Cyfl8JRzUjsPWqJTyVYbdPYMPNQoy+ThLnwB4J9UPu8JPFUQV33Z17lKodMZUyjOqRGghA=="}],"memo":""},"blockNum":"141404"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1lpptul3l6pl63laultzxz6xdslggkzjplszgv4","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ewhEl2ozzLjW3bHq3CAfciW6Tnxh5gAqI0dl5G/QCpAJ26b7TTI8TSGOFS+wrtBGOQRTbOfiuqYGyvzO8J+91A=="}],"memo":""},"blockNum":"141408"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1fu5lj9rfdymylm2k7zz098dup04748587fz72p","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"InFTMmKR5oVZ7uXVsgc9IpHJCedQJxicDdp6wWMHkG4kORuIugI48ZO2KC+p3ZgE1c/k2XxDh6DoILWhe+rc+w=="}],"memo":""},"blockNum":"141410"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g12d960zlrfaxnc3k2m0kc0q29wz5dfwxkyvpxjv","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"rEiSXhV3VYwdS1BxSvacmirCpSv5pPzrEXpN+9F/fbFd4/2h6Bnl/k018UGJwzwMgNQ1cwCyzMYG4V6cMXdhJw=="}],"memo":""},"blockNum":"141414"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1q35crq609hw9qxcrve693mdhejv4e7r036zgwh","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"iBCgYyVluoUy8RFYeMmEOU2JptYo65Gl90o7tarSobBS98o5aDhK3TkiRrQUZHRLD0h/GEIxG3eIZohJSHm70A=="}],"memo":""},"blockNum":"141415"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g16u2z4sczw5t96ad5gdley9d2jpnjlrn7w7gmfc","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"l2ATn+po6DndfBlSRp3OhOkk3EEtIpLH4W1pyqmvmD5jEO3L+W6aH5VnsagFYnjvvv+sh9eXTLsHeLn6y9iUPA=="}],"memo":""},"blockNum":"141419"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1k302rc6yq2estfvwg8qq9dg6xexc243ngx6vze","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"urSfOdY+YNaWvNYphZIhOp4PyiIHkI9MfSQgia0wqYZATi26xlCN+ciy0L7XOwjvFew00qXoLUHcuEG4h5JGsA=="}],"memo":""},"blockNum":"141420"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1rehy3rpwtw53vm2jf2cmvmue86u8w5545hc552","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"96gZx1p0c5T6gwAR+rkEoIDaV+eYr3WdZ3XyghAwkZBY9C4kBcVOHd15EqIXy4yX44gc5/aZhQqEU1fKFqgWQw=="}],"memo":""},"blockNum":"141424"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1negkd5tehumj8xc9phdz80akxuc70ytaf5lsg0","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"EsWEL2neHaEixyB7vKLZ1xwhwDL3dJ2OQE802Rsil/MiugF4UwJMHGFsNWGosmX3lqveESUC3pOKfoAYGXZjyw=="}],"memo":""},"blockNum":"141428"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g168s6u5j4qgfucc8pc7tfcqttmetp4zwghyjy2f","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"J6LjejkZEI3ArMq9h0RIA5cfSnQT273plU4bA5gJjgJ1qWJ1bURUPdEZryjsKJECxraAwNc+WjGsSGSm9w5z0A=="}],"memo":""},"blockNum":"141430"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1stg08aw5g7zzh3ua88nrhqp4l0ht695v23kzht","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"GUdtUY2pFbTpsgNkhQyMPx4+71OSAWs2IqBShtBfs0Z/OQOFYoOZLKaI/Mdf3qWcC95ZXNBmCPsxwk2ryn64lQ=="}],"memo":""},"blockNum":"141434"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1vjgvz3h5sh5za6s6q7a4qz5y8y0r8qt3yh5vku","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"QBwc+U/3rUwqSTDSTlz43WORz9QA4CcajwoaTbxmJgtRvPBU84jXy5UIIA8cYzCtbRHIsMdY/cqkPs+PKvAQoQ=="}],"memo":""},"blockNum":"141435"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1d2gpxjzcxd8xg3qqw0auyk0nkxgl993z4pftmd","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"/oTCC+5KjyFmxWrkTNlsTmawOvxtSSLBqVkm1Obe6OpXwkPRHl5nYZ8lMeY6cy0F2AeIvPUAtZxVZPWS6+PIjw=="}],"memo":""},"blockNum":"141439"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1zu20p7vgz7mn7xxafal4e28308ejyyaqm3453j","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"o1HF+/aMDoGt5YyF5usauP0ods+4Xm6b2q6CbN/2Wit+4mzCtf2pJlu0qQsLyfYRn1HsLLuxNs3KxuoRmgUqdQ=="}],"memo":""},"blockNum":"141440"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g14fe5nuel82g0n9757cg52kn29ej6cccy9386a2","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"1z8KZB/rI7EJd5cV+nvocQ9DudMdYXHvTO8uo1D6PiQ78bCd12gCXJS4JelkVLw4ud8PoD8kJhOSMMlZzF96Dw=="}],"memo":""},"blockNum":"141444"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g19ju3af3jhve3f3gh0cqcur0aumedhah86yzzhw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Bp6cu0/RSbXtyXp8/QD2gYOTZDNFuOrk+Ra2siXs9UgS2uL9j8GDQ1qZaY57W8ceIbZnDTmFi4U5FBkqTfpGug=="}],"memo":""},"blockNum":"141445"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g15zjryyect55lxk8rmlv4y34x4nnhqqar4s2tj9","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"TA3OTnjRqrF6MybK3az+f+EkKJTVDUxLx17P3i3vEtVdGZocfc4YGDpphFIc5mIJh5wS9PL3tSWmM3nOm0J1Mw=="}],"memo":""},"blockNum":"141449"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1mjr5eld2rtwav80zxnsd3sdat6ngdm5hk2t5s0","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"aJM7DG3bDaBGOxJonf4ZZEIPivJ1vgTlHupQxvBrCisl4RDLAk328TOczhnEbeEq1gBsQKg7EhPHSMkrxMQU5Q=="}],"memo":""},"blockNum":"141450"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1yrc3tlllrwk2zneqj6rp7wffftplj6e2fujatk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"9scUS3teNRoe3Sx3n8lpOjp4CoXGnx4f15YgXZ9OAmEHlbV3YBClF2cKSWDT0VgZUUfNiJNwSneCG+58vub8jw=="}],"memo":""},"blockNum":"141451"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1z3kl7xfsdldjeg6t5yds0y9ek9hqcl6kjepwnh","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"l48gxfWxHyu9QAA6NB47al9JC8PMjuHcEnap7Sg6tIIC+0wy6/VEUbgAKLZZnoprwpn1qAqgpzjPEXpXjO0ePQ=="}],"memo":""},"blockNum":"141455"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1sgmm9s5jak5cskvlhcctxjx93as7ukk0pdsflz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"5k+w5O+nFGOcDcxy3PzUq622YT1RvFHJZondizp55yxdjoVyQBYtjTfLurlldZScQADQxPzwm9jn87n5w6zj9A=="}],"memo":""},"blockNum":"141456"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1mdcx89l5em8ax2uvp67kh4qyas7mn85jhy6ye2","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"vpmTuInb30UyRzq9hLV0xqlEJjRnRDMKwE7A346iiqEI+L0oibh6GPsoxu3E1TfY7FV4Yfx7ON2A43XgxuSBFg=="}],"memo":""},"blockNum":"141460"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1lh6lwa97n4wfk9j2xwagqeh69y88xurmngnqvh","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"vtlMJdZapJXwkF4LSvu9PZ+DoW+2dhgRYZxmPGhM5nxaYwFkvrlYFGFg06G/8bWUagastlC8yHf+g0KfohtFRw=="}],"memo":""},"blockNum":"141461"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1qfjvghkqql3r7xcx08ldprzzj0cxvvvukud880","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"x3KNoOI92mPTRXYlN14gSuDursufXQKXdtLD05nlEZROG69KY+/OFe55bF5dA5HbQZIfhcH79Onv5NwRHLXMrA=="}],"memo":""},"blockNum":"141465"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1xh2re8lyd477k2af3e0y9ct2l64z7zgxm0jtdm","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"l5/8d21nKyehQJeftgmLJd1MVErtMh+wWcxLxgi/eSMyF/DS5Jn8rn6f42CuLUaS41nAtoSDee6B8wQpg77hig=="}],"memo":""},"blockNum":"141467"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1z6qjzt2ag0dzpvp6v4t3dah5fn4vxtstgwuul6","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"kBhIZsTW1MDRlPOn17YLkRgmRw4Tz/8jMU8KihxeDhkjVi8Gw28wCEaE8eQzcOj5Vb1VPwdsFJM9AQgiwiJrgg=="}],"memo":""},"blockNum":"141471"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1wtwy2skd94ej45j3zha8795rzqvzl67wy6devx","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"HOlf8HRgZTrtdAg8T9+KSxvd8XgvFMRjddE+IEcOO69TQvC0G5fD8TKGVFVgup/2TwEL2ai83m7xiJJID3FmIQ=="}],"memo":""},"blockNum":"141473"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1qcd2vp97l2gyafchc0tr67yrhmfuwxvpwqe6m6","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"RLPct6tmJG95MT5cW995yrvCPHVC4tsBJd2NnuYcEE1OYH5c/t5MJKcGdPoOZsiKC/Egbk4lGx0tadEXgNIWcA=="}],"memo":""},"blockNum":"141477"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1xa3e2ejx4kyl3hnfd3p9dnjx2xcjvptqzyeds8","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"lyCnkn3F7UNzoAqEf6SaLELpLPNI6RM4/ap/jMjG+/A6iNgqZ5vMSjiLWXIl87sg0G71pYbd5ItLaRI3vNmGag=="}],"memo":""},"blockNum":"141478"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1mjxggx4ma893p5awle3dnfztjhpa53e0u9gn9y","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"sefvj4LLvESEVPEdVCAqc53UAWxfCeVInDYWHFtggWxUfUpBvBwcJ8RPBaB/eeL0BA0NC/Y6+XHZNhouVS0i+w=="}],"memo":""},"blockNum":"141479"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1t26le0rumql63gpsrlwqh5vxs66rhhcvg4fz6f","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"jKkvn0i9AK/M0ufCLR4luwCIDWMNwa3nYNOzshT+CfsEnWPUSGddRldPEBueicSObxo5l2ZMi1q9Ayf6m6mR+w=="}],"memo":""},"blockNum":"141508"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1m2y7xx7ppar34ahf0t6qkasgz2x2zcn3z9x2gk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"MMOGGeokCjy6iPN6p4Jkk/eK41uhEDGJH7NTsyiibbwvplNCRLzDFjUy+pzKwG+In+pY+icYX+i6lb8fNbG7mQ=="}],"memo":""},"blockNum":"141509"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1khl7ujc0gmmjkygku049w3tnjsepw8aj3ka6n0","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"6wfvJb2fV6NUdWyUdX4LFj6ORAXfnIjKIv9dJfTLPZ5EkECnHO1tncQ4nRwhIoA4e83ZqbX003gQ6ORYNXuWYw=="}],"memo":""},"blockNum":"141513"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1szdzuhu9h47eftdse75zfv6v3nh5zhkrfe8ae4","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"s955NzuX838NNEGmYj3agnBUulWzTl3fZ6Yt0Zzs629+vFefF+rdn+p29cGEmM4PhTyAic2wYLi98/yzshFSjw=="}],"memo":""},"blockNum":"141517"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g143da8chdjt9w3u7d44p8av2mdj3xzgsqryr8zy","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"D1nMBZf1f4f6YaHMd8nYz8413SRae9CEawSDJPWDwKtEbVYkK4XYWZAyQEuobk2lU5tygB0R8zGcgCBJfn8Duw=="}],"memo":""},"blockNum":"141521"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1l8wlng8p8fw3mcs4zw33ae4g5v32mywmffutvt","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"CEmeWbN6VexKHuSavxy3qF6puYRGG+Q85t1Pc0v1MNw75sAPA6iz3T56ukUiRdGcQJPIXNNkgmv4DJMqoeYZVQ=="}],"memo":""},"blockNum":"141522"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g14cvrpagehqpe3nzg73gcmcmvd9znrtkfrd3ufd","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"K63P99/urnv9TkjjjzvObO8vL686ZY0CpKhcuSX0wmNKQFav08oXbXkDm1nd7D2T8jfofKmsMoqyBRed++Nt5Q=="}],"memo":""},"blockNum":"141546"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g159c3yv0kscz040njkk9msehrq0wazh28ne8ppu","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"95gdvC6ehjkT8O/e/WVfcjNnkiqOInKGFcKi5Hgr2t1sHX1DET+UKvucgl+aTWVCvCq9e7xxn8ujBPBKl2nWsw=="}],"memo":""},"blockNum":"141550"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1zju7hyu49jf995wjmnn32caxsy5gpuhh0u09uf","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"r0r+4/eZotEapjX40ZXTfEFS0sknNm6oXEzbQ5SmYypcVyDvzy/lCVZqFjdos9r0u0jUKkYG2WAYTHVbBLbW4A=="}],"memo":""},"blockNum":"141552"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ql2am5682kyf9pjpyalkdyexetd4p5tlc7sfuz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"VwIb4nr/sfEJEL9FQXbPRpISafNOzAbd8JcanlfWhsA2ChO5CtYaJBCw3vc5fCeIwQngxd1eJCOHEYdtr7qAoQ=="}],"memo":""},"blockNum":"141557"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1c9wzm3sc4ndtafefxpyyq00alfkl0eqmyppxcj","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"+Wgi6sCqU6BMM34l3yFK6TnSvtN2sxz41dz5CI5CuLJz/YemLvAG/OFfdhqooOfVg9ZJAouBia6GgMyFO/HswQ=="}],"memo":""},"blockNum":"141561"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18v5f8xj9pc87773jh2qgze5fk8agwmal0y3sjp","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"E1tH3gnF6zC3cMUMJnsS42jw4ZBkyEXTmMHdvzPtLaQZauBQQAyrz+Xyr6R4xUvBmLjV3BCxcH1fLkFtavNyBw=="}],"memo":""},"blockNum":"141562"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g188dwk8lk2elc5sduj4cy8xkqp8499j0dcjpjft","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"mFLGIoMngpfDNnR4d+bqnHH3OntuW1Mo5JEyiCQJGutQy20Zmi1oiE9pTmJvGfrwC2Hed9xjxDahbLvV5b8DIw=="}],"memo":""},"blockNum":"141584"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g16hj0w4lzmmjlpt9qcynuhj0ggj79z88nh8m254","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"PXrBwjSKgX8V7XN43Ahed3h/zIZ+JcpTurNBsKvJY70T0IELQqAchZyGMSZi37nc1JihVgn5yA0sVVXlSN6gAQ=="}],"memo":""},"blockNum":"141586"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1p2tr8xvzfl2fp333k2nc7zzjduncmh7c0kx5em","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"PF45zEsCf+mZKMyANXYT1RsBb3CWgYsVzmlZda4lbU97yp5IhPqQnH49qb7gW5AYrhsBvWc2i/+5NU+Mswi8AA=="}],"memo":""},"blockNum":"141587"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g17ap6gr999z9gqv3wvwz6pw2hwu385crcerw9j8","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"k8BIZpDxyDsF4hNQekUCSpO/Dvo5lvGgyuIZv+utm24tGNUlJdm7FCa9sRBZyDVPle7bRlZ/3dNhALv+uu1GJA=="}],"memo":""},"blockNum":"141592"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1u7xrn0t9tlnj9uhluxt7yvjk5eynx89p6renkn","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Yjn5elbIj4sHvXxx9ag1FuZ/1QlAOJJUoZQipebEg+FTLerDmYjybfFDa8EGxNStfwJi0ZejdEgZC7YDcx4rvw=="}],"memo":""},"blockNum":"141597"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1dv0rj0t5myezr4lynkzvt6qwy0qmkv83q8g862","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"khhgWy7nIqSrqPsfz/3iSAja9xWMXNj9PEw2z+RR2/UwBRQbLX8le67sNdhPxTjLSzxOa/z5chyhmDzE97NSOA=="}],"memo":""},"blockNum":"141598"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g104fzqnkmrzj250pzjt4d8puu80ayeqmmwmlaay","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"pSW3zT8U3dOcYx9kqwOfMDhU4qA/MEHqHd/N49x3gz17rXX3Z2uv1DE0dtsmiDrpEP59nf5RbMQJtUlvtVGBew=="}],"memo":""},"blockNum":"141599"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1r77020vaym03twkl8c9aj5skvaap23r5xlgm0h","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"2/NAJtDhcwN4xYwu7SKM1M4PRRWzgrud/HONbr25V/JvxvDcrkl3LDPffHk5Cjy7Lao1+cThac444k1W1lwMww=="}],"memo":""},"blockNum":"141601"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g14plxrz23suuxeppm0h3n08zeahekxugztjcp6z","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"EEn+pTi9rNEVq6XPpRPAf1TD+2J8Ve26+5mYTQCMutZPTXLmIQmUZZ5N9L3N0nvGdvz5Rdoyz1/grUfZemDSUQ=="}],"memo":""},"blockNum":"141605"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1u46rd45ldk5q673kqpepgdkttr4ld6zr9q3ycj","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"/z44kONfH646w8hbnZ0qCQoE829tAaQRwvVR5ENhOT0EkVWgPHdNHksJIpOEC1Z7ES+xN8+8IYQfC8NBl7GLCQ=="}],"memo":""},"blockNum":"141606"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1uy2xxv30qatxq0cf9nd6pt5a8dnk79pnkjrhxl","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"7KY9MSDfz74kQlS/omv53z9RcDa3rIX/+/L+WgVaXsQMNw115B4TtO/1/zN0k+2gH+L9q8vCK/y8Dye3I2Y6nQ=="}],"memo":""},"blockNum":"141611"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1kkht6xqsdded6hjtfchr6pkhjlqvv2pc3v8tps","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"nG1SYtphIzjKU735X84dEZ6szBouvXZBL1MI3OqvnkgmkPp1ct00YBJAaRh5FQTPDS3RCLdczwzkB4jl9WRssg=="}],"memo":""},"blockNum":"141613"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1qa0u9prsrmfdm7ufwkaakk6lywp2aeh447anxz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"FZ8cbv7DZz8JM4u7cC3fwjePDECT4ekrKDvwFw0Bw4AIlNgyJDPf74jOcwuF15IH/ktQsNK1ilTUDLjdJZ4fIA=="}],"memo":""},"blockNum":"141618"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1rhjjl54nqn9ymdv9appxkzcupt2a6fcghdwdhk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"En0J59DGVoC45kx1PNcJBK/TYe7nnvWFbK8iwj96attd/nbmQvF/HCF9AacxUhRRrcGys7Ky2vXfHTZC7vf+OA=="}],"memo":""},"blockNum":"141628"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1spqf2rt9xg4jmfkl6qthrcwthv5s9ydyfep6y4","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"lSL565Nhh6CNIlAeM9Xpel0nqpWJEUIro0I2nUJlEQkPz6wgHwzRaLGINCHqyIxtRqbn0AtKRicP1X7lkFc+wQ=="}],"memo":""},"blockNum":"141637"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1w5dje3y7urmmwvhfx22hu0gwptljgxa2nsdzq3","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"pl2z4BZJdxG6o9/1hawHMhv1EOVrEBsQ8Q7AcbC6sPNHVRtfM7jjh3589OPszfBaKfVDTVy9smNeQuXDkC9NVA=="}],"memo":""},"blockNum":"141642"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1xppc9drgs5tnkl6tgygevhx746f2026zycpmx7","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"LfUvgVBcoyr5xma5BjK7DjlvnuJRVz2wV0y0hzovspZiLzjs855Qbkh1jcicqlsrh2WtTsR9mu0LtraUWmCC7A=="}],"memo":""},"blockNum":"141647"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1p3l4kkk20jkaeekfz2ld49mnpu70s5q25l23ac","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"S9jeeDSnKIPPK587mojn9gEaEBniHvsfVz74EffkpCoI9TYn7+a1Tp+IDVNLyOqeOsAAEaJ5dftTT4jHb+z+Dw=="}],"memo":""},"blockNum":"141651"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10pulysyn6rx0m6mz0ndj0vwsa9lpeuu97x83mj","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"0EYe3CifijPMZycO9lw3+KsH/JHwvDwAbKZuCjggNZACLEgrjWZf06APofQ6YqKXPPMgfAbQPyPZyQ/2RAPXaQ=="}],"memo":""},"blockNum":"141652"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g16kn0ea230zku92g3jejt9u054a5h3f20jfaus3","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"MXoH8tZhYu6Fsgv8l/LfmFeHvJfaBelEBQHi5x3OwlpadYWLW019ltDKyIL399So8zKdNmP4KAUM+YYqlCOEVw=="}],"memo":""},"blockNum":"141657"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g107cwxwln30pwdztu4gcpwrukq38dxlgwdjjmpr","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ZJ+9Td1Ou8VqkodAWTriOxspXKlH8v7Pk/9gT6TQ2xAMIJduN/ExsReYgCxBm8KSkdIg4v83qwUNIwjfj8bafQ=="}],"memo":""},"blockNum":"141658"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1dljuyr7flmzpjwyd6zqn4p744899q2usrzqzla","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"MQJ6hYx5nvFIC7eCvwRdPYYnHX9GVY2KQiEQt3WPNyR8Px6N7H9jQmlC874gKhvyQhoscoAkTmNmuXVTqWQ2lA=="}],"memo":""},"blockNum":"141662"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g12nmn7g2jxtqsyvjgumcpvcnucl3luld7zg0m0u","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"fZ0LhxTbh3hoayLop7uls18xz/dIKlfd5i0vn6astnUME+RmIsL0s63qyx3PxoV3eC7tPZg5mM/mc3mBnJeqQg=="}],"memo":""},"blockNum":"141691"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ek2q4a64nfe5m6k6vsv6dej8kwcw0nmnk3uz6g","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"6O7BqYD99ZZbeM6lz6/FgWZEU4rdIpOkLQ161ouLq0lSvyXQIBrC5x28XEgFp/Wjp5kn70N85LJAn6MIgOGP/g=="}],"memo":""},"blockNum":"141692"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1x334vrpngwk4kqrhwqr5vmyugzuhd77jfc56jx","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"vdX3rOK+/CWlJwNrCrYWWdiEhxhy61jdawTLH/xpNmpIht8cSlgBako9QE1xlTdnsjHN9KcvRgVuInAzEgiYZg=="}],"memo":""},"blockNum":"141706"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1rd9qfewfx3nuvrjvklhy6g4n44vc9aahffszec","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"++DkbFI43fbO+XnbBT93m0KEWCYv04Ntp/qM7c1tWKYjIVryrsCMkYv1FF2Hn3hT6Xe64dHCUnanvUIG83Ysug=="}],"memo":""},"blockNum":"141710"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ewsvz239rx9c60rcwz6g6e33wsmhwynv35wqg0","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"3FJHPkLc+ppZiCfJcBucg20SmD1gIzmcITYu+Xi33kBA5W3VxmKHtM0238YN0waZPQ5ShR1SQu5kpnNbKBqzWQ=="}],"memo":""},"blockNum":"141711"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1qrjxajkecfgzv6066x2lfru6mflz65fu354uss","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"+iQ54ruaH37WoiGELAhlYXHRxzLwzP1rY7K5ZYh+lKNUlD8/5vajYOjlYrteSw56qt6+BZzJwia+isMpRy/5gQ=="}],"memo":""},"blockNum":"141716"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1yxswmrrckw70pz7gugh0wtq59dsmrhn3z3m00s","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"6UED/EUmNe/vQLJIl+zMX0NiLhEF4XzsjI+Oxqk1FJgXuXDTx5zLQPsVJqCTcKdubWDmrX9pj+orI0fOw27XTQ=="}],"memo":""},"blockNum":"141723"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1u6p865knhktqwryryt6cpkwqf955pm3ua9vlhq","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"vaeCDx0CFN3TNul40W1bM3AXB9YC4O6fXapnJrYZGspxk3csgBCFQu2aJu5j8Ss/SUzzK3cVl/qC3AwdAqcegw=="}],"memo":""},"blockNum":"141730"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1kmvtae73j89c0x4ugrnegvwnlp7nppsx9kqww2","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Xr2AO2zb+w1MaEmuRet2HgDfF6/el7jrC8QtCiHqqsVgabp9jccz5csKXXOx1JngqyThbntElqXQcxH5eKuN1w=="}],"memo":""},"blockNum":"141737"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1eyygpjvpy9y9h6wkvy87f3cquwy3nwln4mt34z","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"AmKYwWMItxA4V3bWGIt02vmMidYESULbGow7l4oH2x1aFZK6kM3Vj1yk45idPNpFI92IpOmJSA50tRTwrrP1KA=="}],"memo":""},"blockNum":"141741"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ng5lvs009kr426c5m0lycykwt5qvw27h0z0qjt","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"PHz3YNAjXSo+k5mCwrw5X5INMMfHwbCVEMlBTLQfyxY5Q7pmd2zpLAbq+JeMqtY/6RF+Yhs/eI++9UudMfWGlA=="}],"memo":""},"blockNum":"141742"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1xyruz9hdeh9zvgsz5je485ptekpv8c8n4kvmv6","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"mnVpzIh2ibC9c7YizDI2EfBLoXiiblLBoOPDhYULK81mcR3fqKe1fJ+nE8lRPjVxupOLeoa+OYTOThVV7Op7HQ=="}],"memo":""},"blockNum":"141746"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1kwz6dlxkufx8jqjype4y8q246ltwuzt0z2wspa","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"WrId5p46j4/Ep0Sf+bVLk0cl7c65zfd3dFEPqYxWFNNQtMgrjaa1/C8QuOAatmR9vGAVG4Eda3ZZlrkcymGWiQ=="}],"memo":""},"blockNum":"141748"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1cvla8j3y4nfsuuxa07fycdnmhaqazuh40z29cs","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"xHseG967fXDeXGS9IiO+XeQzdpWKJuEEJrjG/HKpTPUzmyi6LCIkEP04Riwa7lkVXwPxrJe4r+5cHVgtHRDc5g=="}],"memo":""},"blockNum":"141753"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g17clhftcmtdr8vjjjgclgn6yn5rvw8hzec6lsrp","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"17oiu8PXxBBtBZbCrZ+dlfSzRF2xaY6vy9jevbBW5CxY7Qlsz40BgJPEYh3rlFMVr4i/JGQTlwtGdTNhy6ZvMA=="}],"memo":""},"blockNum":"141755"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1m7y3yg72qn5hnmt8ud9rau95qygsd2wurcxz23","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Q324H0GpC+71aeOjuyoyVJU7tgHuNmzM44DKkexCe8hwEzTyeqQxF+51uB7ISf23W5f7BNw/NrulW1NzeaMY1g=="}],"memo":""},"blockNum":"141760"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g19hav0t2zjjps8puhnk9j2jj50q7sht9j5q9wdh","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"5TK4k/enYLlOtTXYs9snnAbmlACz8hW9Wbapg4ArXkJz938rntpWDjLC73gLuxrzgx8SL6IVfGv2Meo3uDkTKw=="}],"memo":""},"blockNum":"141767"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g15ltk0txs2uhvpput4s4n4rhnhwer6ldx6ny3kl","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"mSY3vDYzcE5tzRnya28Td3RPrSx8+bQz5GzruxzWFFIbHufS36lZISz/CmR3Qk/OSJE8aWD2n9/5sCzyGSTA0w=="}],"memo":""},"blockNum":"141771"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18qh6kfqm2rgda43p09ezmhhsjcgma7me50pcgg","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"zfjvuE1B6XkZwZ5DONeCyaxpctn85cJwES6W14htFBEUTO6tTa42M0mc/7neW0Y9bDHOmrdDEjdWC+QdoLdPWQ=="}],"memo":""},"blockNum":"141779"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g189rc25ju5psvlfrqm29p6q60wdf0uu3t4t9ptu","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"4ZBGxjJt1N5XxFQg4C2LV97dLQqCJQr/p5OpHTdR/fR2wKI4fy5MISpITZM5iPswpjM72Dyg59Rpgb9hKP98fw=="}],"memo":""},"blockNum":"141784"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1pz9lnac26f8n5rhkhy9wp65rydggnfzqs7r9z9","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"VIcyf0FAhZVco6/0bpeR9zbgKgR3xGb+CvXe6F2qwpk1cc0Ffn5EcYEKSjjhTbbqXAGq9iDGJVZkkvewdDiYmQ=="}],"memo":""},"blockNum":"141789"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ln93y5pm37dcyxug8tfl3xknwm9hqx07zpcclk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"kMW9y9SxqpDRcC3HVjgeNtb02pukIfAotPZMzjD0R4pznux8sS8i4TrDFt+XrowA5VGCeXpvxEHLhu/aBJGCUg=="}],"memo":""},"blockNum":"141793"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1tqp2t8dv9754l0h2v770djpt9dyk2nxmrvpd40","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"QUXrcY6f1AzBMiMhd1//37kSGSZF5rT7YlSSFcjqq5k61CvAaD/SJLJY70XnLOD8gr1i5tl4QldBW5DQDBEchA=="}],"memo":""},"blockNum":"141795"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g14t2uugn2k0pj8fe67n7p4t3a4va6yzckd7vvd4","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"E1OWE6pO9elNLzcoK6bz0qHKdj/Se4h/QL1GEQvOc38qs+pmbxYvBmZjf31rxFge4jtmBzhtXZ09beRtTgmcFA=="}],"memo":""},"blockNum":"141799"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g146k4au5y8ravvg8sd0cgkxej2ka8zvyg0l7fka","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"qYjB8sp3FfNJIwrtYfHV6+vCqXgdCToL1Plygqb/+H5OdpniV4ASO9psJ+jAOHKB1p5clOkbKNnhYHOZiBSqbA=="}],"memo":""},"blockNum":"141800"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1s282m4mkn7qx2kw9yvdc7dq8dspaa9rkjyu99j","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"y5J6s+Xi2tHXXEIVyHky9OnyjyDYnjTiwNQ9doCxsIBQUB9ZRazznCMOYqgf52EzH9tOKmrQ+kNJ9BmBeocKhA=="}],"memo":""},"blockNum":"141804"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1k6tfey3nq3vmk4wyvxwn74e6lfug6dd2j8sxe2","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"UthembpnhSmAK4s5RH2rBOyBTmPKJw13SBzTRyKsO6lR3RHqs0eXGaPBuhtbmtNVk423yLO/9x2Reo2csO7gyA=="}],"memo":""},"blockNum":"141809"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1cj5nupnhvn7fyme8ekvh0yxhe48vr9rvekn5v5","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"1ZDtoCWuZpMdkJ5DKd9628vUbv57b60VGai4rnloYiZyQiTSUYqlYl/9PN46h5UP3bziXyvGufYUuhvVPhcqPA=="}],"memo":""},"blockNum":"141813"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ynh3m9wwq0ssq7j763p8t7yn4u0n8vesddlgue","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"B8AJzMe68Sby5e6fV6PDRD+a84jZ/gT9bD8/6JfqAZ1il2WpspL9PsKlT6W5mupYrTQL4+rgH9hgL9O9JRlnyA=="}],"memo":""},"blockNum":"141821"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1chk4406agfn2fnh4qny0j23krhszuxsc988vjp","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"h67ueCY653CKr2NcUwBQokmauFzc3Z3WNiWVbjvE6V1DKPf+Wxw3ktzXDi9LtkZWMj7uhHTUG7LEhslwfYY+jA=="}],"memo":""},"blockNum":"141823"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1jfqt8vpu86j967hsfmcdpx79f3mmwvylaq5uy3","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"XUJVAoW2UxPVnIDrPXlTzx0+whguVrqjxUGFId1Oujta98p/0vo8YrJMq/qHouySb4YDw5niEdgxPDUGMlsC4Q=="}],"memo":""},"blockNum":"141827"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1zmvsgsesa7lgkem3wn3gp8v6n04qfnumed0vr4","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"jehV+zM9mi/KGeuFe1iYyTuu40XIefHr4xfPMeIq63Q7rnNvD0Eep1dYeobRqHWkAOqv9i3Gkl6vmDWV0S+18Q=="}],"memo":""},"blockNum":"141829"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1dn6v0wzqqcr5lg3wtnc8da9h9xd8cvz0t3m670","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"jhSOUerUhP0SxFZj9UFsP3KbPre39BHvB4ikYadtYm8ha4Mu1leM8gXPizMcP6Qe7Flmh8H0niI36JfG3gEt1Q=="}],"memo":""},"blockNum":"141834"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1a4va7yaddd007s64an48rx4r3j509nnwkqaw4z","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"aqx7bYXiTlxUM0EWDfVSvwZAo0hUQ7gO446IOWKGmVpIJhT79/3k0QMUeOUrjxoBBlXBizagVrHXNekDZA5o1g=="}],"memo":""},"blockNum":"141838"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1hsvul3yu82v7l2xfpwpala2d5jlldlaappluja","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"G3Iz1GHLOOltUioCKo68navrmJOAn8A510v6yBuOQ9w2FmX3ijOAg8KmefLktUMUh8S7/uIHyNYz0/AsIRRWMQ=="}],"memo":""},"blockNum":"141839"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g15hcpv0xman5fay3hndssyurxrkr7ef7tk0ycg6","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"8f2EW7+sUBUg0EiAgF7jBhiC0lRt4LIgo8In9du3H/1j9mJo99psQqQbGAI5zZvI+W/vwQHv9WRmO0aeJja4MA=="}],"memo":""},"blockNum":"141843"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1cljaywdxp78fq7ta38jc27wxrp60zjmnee6v8u","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"228aVX8AQIYzqvI8+yHfuDxOLMZJkg6AP9Wgf67teFBvvCaxwWM+xq2ZKR4tPOtV01YXBrnJRcJV2Pt5YYwSHA=="}],"memo":""},"blockNum":"141844"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1m0k7v760ydv4h3qnyc047zmq23tyg7hhck6cnw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"knROZDxCdzjhVJVdKgrFkLq9YJj++wGy9+zTTBAEUWZgetexr+tpFFo7Vllw4V+1qZ22Q70POIkNzDsCeD/OPQ=="}],"memo":""},"blockNum":"141848"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1wnnwzqny92dh0mtlxwlu6vfzpuvp8fgtadtunm","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"JRqWOevX21ytuGu3QX79FHhPvBysqzLiUK5+NYwhdx8krsenlqvFS0R8zsFkL94HtQTiZ7Z+ocPbwYyQbM8yig=="}],"memo":""},"blockNum":"141849"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1xupnhe93vmjv9tsq6frnyls9a4juhjvjkklcyg","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"d3uDhPvN+osAGEdk9/Wj/hfpCtC+6/dpwwavcZ8RUBIcXFKHYe458eFfVunqWbEDK0yFxijQbhJCXlcff/rJKw=="}],"memo":""},"blockNum":"141853"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1edjlrn2wfv5aey4ll624w00h85wnc4ln8j3e70","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"UBdy3IRdj14W2GnIeezDf9tHL/AswyZpeMoGOcE7GSZPH7Bu3gk7aalQOjRzW8VN9gi7LWr+RU0XLJ/2BIkn4A=="}],"memo":""},"blockNum":"141854"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1e56hwgzphxfelcld90yr6vdat4lvskl923yp3s","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"gQOMay41QxIqtcOviXe5H7gD0R7O3sSB8crZr1H0JeglxjKScj/ECCUsf/Q0UsCaFtnDianO+lXNE7NRpOUAUQ=="}],"memo":""},"blockNum":"141858"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g13pvadkz6e7ncp2zsgezhpe7gyea4ufmqm29spq","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"bvgZtxUXNSIu/LPfMKLX8KuklDl07+FCizsvlTe6xS1IwoBkJeyg6olB3N5LN/K07IEhfNIIymhjIy2dC0kQYw=="}],"memo":""},"blockNum":"141862"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1twd6emxhm37re8ep60kra5r5ume90av4qe7yyz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Tx6oZXIHlBG6IPmDuoAfwr8zIlGd97aK9xQaw8/q2HFzndDMVOOtI7NZePnrpmreL4s1nJh2toX8OuH900/l2A=="}],"memo":""},"blockNum":"141865"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1j0gk4zxa2xw3szjlachpr5u58z6aju84jpujjh","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"KzHd+2PHkQEsfjjNHYqRLtR4vDii/D/wXl1NmxqnalNcoHMrBo+5dmiAOgTbwXpECPY2rGagBC7i+/cgAta2EQ=="}],"memo":""},"blockNum":"141869"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1j4xuu28vhtc3wec0h0fs4x2jntyyekq7t7j379","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"tOUsDQX/axOj/oafTBdT50c7SkgD7CAUD3T6A+9nP5h4TNZZx/KEs6E+ncQTRZCjRGOlJhDlUcdqqf5B5woa0Q=="}],"memo":""},"blockNum":"141870"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1naz3dqvx7vnxpk0mdhvu9sc3yks6rxw2qa8gtc","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"2FOo8+rcUHgb8kJrb3ps1jU3s3OWFJdpx/xww/jB8ldgF71oi4OtnE3+PlCScitr67twAwSYgHdFbXQL+hDrkg=="}],"memo":""},"blockNum":"141877"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g15edmm0w5slav4k4usy2z7qf2s30ccgx4p2lhqs","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"xnEnRRJBAbPFroH5qJpHz6maZK9aW3CDs3PfsaQvNfJEge2LCJUNdSHGd9w5RyDf51VLRU2s9WoC/h0aq4CVog=="}],"memo":""},"blockNum":"141881"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ht4l4t2rg57jd2cmfm59f3455t0dhzh7hdnfyg","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Uhu0aRaNnfTIzxEPBhN0lqQ4xUAUZOl1QaIxdOJHow9uNpcLQGqReBfhs2rguiZaf/cdqcI7ZbkEpOIRJlPEow=="}],"memo":""},"blockNum":"141882"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1t3zyyqwugvwjhvtm5rf5gd4syzhsaqg5pmsjse","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"mL3gMkWzpTsHCtAH2EzPPcDraedwkJPPzeGHmjpvi5dkB7PV2mNXE7R4Gn+fL1QkWXogm9+Yy0o5k7YqHzQ6FA=="}],"memo":""},"blockNum":"141883"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10f92yafpwsg5cj8cxjpy6589kkshf5wutwlf3u","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"RWg58keZIjYmu7LGmk9oeurhNCutDB5/PI0AXmacTGkTUtd7vN55B9vWhm9Hj6fEKCqoBkFkeIOspwcf1RjvkQ=="}],"memo":""},"blockNum":"142286"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g12vx7dn3dqq89mz550zwunvg4qw6epq73d9csay","package":{"name":"foo","path":"gno.land/r/onbloc/foo","files":[{"name":"foo.gno","body":"package foo\n\nimport (\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n\tpusers \"gno.land/p/demo/users\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbanker *grc20.Banker\n\tadmin  *ownable.Ownable\n\ttoken  grc20.Token\n)\n\nfunc init() {\n\tadmin = ownable.NewWithAddress(\"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c\") // GNOSWAP_ADMIN\n\tbanker = grc20.NewBanker(\"Foo\", \"FOO\", 6)\n\tbanker.Mint(admin.Owner(), 100_000_000_000_000)\n\ttoken = banker.Token()\n}\n\nfunc TotalSupply() uint64 { return token.TotalSupply() }\n\nfunc BalanceOf(owner pusers.AddressOrName) uint64 {\n\townerAddr := users.Resolve(owner)\n\treturn token.BalanceOf(ownerAddr)\n}\n\nfunc Allowance(owner, spender pusers.AddressOrName) uint64 {\n\townerAddr := users.Resolve(owner)\n\tspenderAddr := users.Resolve(spender)\n\treturn token.Allowance(ownerAddr, spenderAddr)\n}\n\nfunc Transfer(to pusers.AddressOrName, amount uint64) {\n\ttoAddr := users.Resolve(to)\n\tcheckErr(token.Transfer(toAddr, amount))\n}\n\nfunc Approve(spender pusers.AddressOrName, amount uint64) {\n\tspenderAddr := users.Resolve(spender)\n\tcheckErr(token.Approve(spenderAddr, amount))\n}\n\nfunc TransferFrom(from, to pusers.AddressOrName, amount uint64) {\n\tfromAddr := users.Resolve(from)\n\ttoAddr := users.Resolve(to)\n\tcheckErr(token.TransferFrom(fromAddr, toAddr, amount))\n}\n\nfunc Burn(from pusers.AddressOrName, amount uint64) {\n\tadmin.AssertCallerIsOwner()\n\tfromAddr := users.Resolve(from)\n\tcheckErr(banker.Burn(fromAddr, amount))\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn banker.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := pusers.AddressOrName(parts[1])\n\t\townerAddr := users.Resolve(owner)\n\t\tbalance := banker.BalanceOf(ownerAddr)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc checkErr(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"},{"name":"gno.mod","body":"module gno.land/r/onbloc/foo\n\nrequire (\n\tgno.land/p/demo/grc/grc20 v0.0.0-latest\n\tgno.land/p/demo/ownable v0.0.0-latest\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/uassert v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n\tgno.land/p/demo/users v0.0.0-latest\n\tgno.land/r/demo/users v0.0.0-latest\n)"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6/Tht9RvFvqjDoHGyl6CetXPZMDH3SyRzH9xo+l4j9s"},"signature":"ER6XBbHsJA6v17Gl9TTts3yr3VvGyVwnOGB6yOHttkgmmzP09KVeiFzY99i8EDOvMlm4A2c2EQPNWvWcWfjycA=="}],"memo":""},"blockNum":"143368"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g12vx7dn3dqq89mz550zwunvg4qw6epq73d9csay","package":{"name":"bar","path":"gno.land/r/onbloc/bar","files":[{"name":"bar.gno","body":"package bar\n\nimport (\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n\tpusers \"gno.land/p/demo/users\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbanker *grc20.Banker\n\tadmin  *ownable.Ownable\n\ttoken  grc20.Token\n)\n\nfunc init() {\n\tadmin = ownable.NewWithAddress(\"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c\") // GNOSWAP_ADMIN\n\tbanker = grc20.NewBanker(\"Bar\", \"BAR\", 6)\n\tbanker.Mint(admin.Owner(), 100_000_000_000_000)\n\ttoken = banker.Token()\n}\n\nfunc TotalSupply() uint64 { return token.TotalSupply() }\n\nfunc BalanceOf(owner pusers.AddressOrName) uint64 {\n\townerAddr := users.Resolve(owner)\n\treturn token.BalanceOf(ownerAddr)\n}\n\nfunc Allowance(owner, spender pusers.AddressOrName) uint64 {\n\townerAddr := users.Resolve(owner)\n\tspenderAddr := users.Resolve(spender)\n\treturn token.Allowance(ownerAddr, spenderAddr)\n}\n\nfunc Transfer(to pusers.AddressOrName, amount uint64) {\n\ttoAddr := users.Resolve(to)\n\tcheckErr(token.Transfer(toAddr, amount))\n}\n\nfunc Approve(spender pusers.AddressOrName, amount uint64) {\n\tspenderAddr := users.Resolve(spender)\n\tcheckErr(token.Approve(spenderAddr, amount))\n}\n\nfunc TransferFrom(from, to pusers.AddressOrName, amount uint64) {\n\tfromAddr := users.Resolve(from)\n\ttoAddr := users.Resolve(to)\n\tcheckErr(token.TransferFrom(fromAddr, toAddr, amount))\n}\n\nfunc Burn(from pusers.AddressOrName, amount uint64) {\n\tadmin.AssertCallerIsOwner()\n\tfromAddr := users.Resolve(from)\n\tcheckErr(banker.Burn(fromAddr, amount))\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn banker.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := pusers.AddressOrName(parts[1])\n\t\townerAddr := users.Resolve(owner)\n\t\tbalance := banker.BalanceOf(ownerAddr)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc checkErr(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"},{"name":"gno.mod","body":"module gno.land/r/onbloc/bar\n\nrequire (\n\tgno.land/p/demo/grc/grc20 v0.0.0-latest\n\tgno.land/p/demo/ownable v0.0.0-latest\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/uassert v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n\tgno.land/p/demo/users v0.0.0-latest\n\tgno.land/r/demo/users v0.0.0-latest\n)"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6/Tht9RvFvqjDoHGyl6CetXPZMDH3SyRzH9xo+l4j9s"},"signature":"DeeDriY1DsLtMWi/PAR/kQNmVE465YdlBubmPLlygAAe5mbinYKHHLmFU04JUYVq6BxXIPyuIdgYlJu56V7Srg=="}],"memo":""},"blockNum":"143371"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g12vx7dn3dqq89mz550zwunvg4qw6epq73d9csay","package":{"name":"baz","path":"gno.land/r/onbloc/baz","files":[{"name":"baz.gno","body":"package baz\n\nimport (\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n\tpusers \"gno.land/p/demo/users\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbanker *grc20.Banker\n\tadmin  *ownable.Ownable\n\ttoken  grc20.Token\n)\n\nfunc init() {\n\tadmin = ownable.NewWithAddress(\"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c\") // GNOSWAP_ADMIN\n\tbanker = grc20.NewBanker(\"Baz\", \"BAZ\", 6)\n\tbanker.Mint(admin.Owner(), 100_000_000_000_000)\n\ttoken = banker.Token()\n}\n\nfunc TotalSupply() uint64 { return token.TotalSupply() }\n\nfunc BalanceOf(owner pusers.AddressOrName) uint64 {\n\townerAddr := users.Resolve(owner)\n\treturn token.BalanceOf(ownerAddr)\n}\n\nfunc Allowance(owner, spender pusers.AddressOrName) uint64 {\n\townerAddr := users.Resolve(owner)\n\tspenderAddr := users.Resolve(spender)\n\treturn token.Allowance(ownerAddr, spenderAddr)\n}\n\nfunc Transfer(to pusers.AddressOrName, amount uint64) {\n\ttoAddr := users.Resolve(to)\n\tcheckErr(token.Transfer(toAddr, amount))\n}\n\nfunc Approve(spender pusers.AddressOrName, amount uint64) {\n\tspenderAddr := users.Resolve(spender)\n\tcheckErr(token.Approve(spenderAddr, amount))\n}\n\nfunc TransferFrom(from, to pusers.AddressOrName, amount uint64) {\n\tfromAddr := users.Resolve(from)\n\ttoAddr := users.Resolve(to)\n\tcheckErr(token.TransferFrom(fromAddr, toAddr, amount))\n}\n\nfunc Burn(from pusers.AddressOrName, amount uint64) {\n\tadmin.AssertCallerIsOwner()\n\tfromAddr := users.Resolve(from)\n\tcheckErr(banker.Burn(fromAddr, amount))\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn banker.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := pusers.AddressOrName(parts[1])\n\t\townerAddr := users.Resolve(owner)\n\t\tbalance := banker.BalanceOf(ownerAddr)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc checkErr(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"},{"name":"gno.mod","body":"module gno.land/r/onbloc/baz\n\nrequire (\n\tgno.land/p/demo/grc/grc20 v0.0.0-latest\n\tgno.land/p/demo/ownable v0.0.0-latest\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/uassert v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n\tgno.land/p/demo/users v0.0.0-latest\n\tgno.land/r/demo/users v0.0.0-latest\n)"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6/Tht9RvFvqjDoHGyl6CetXPZMDH3SyRzH9xo+l4j9s"},"signature":"gJSohkuUxeBhK98Pncs6urdxD/PfvSbAQHraS2RWBgBMsn/cGMMSuXg01XMyuBHnbjLSE5ke5iTgq1O/aohQxw=="}],"memo":""},"blockNum":"143376"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g12vx7dn3dqq89mz550zwunvg4qw6epq73d9csay","package":{"name":"qux","path":"gno.land/r/onbloc/qux","files":[{"name":"gno.mod","body":"module gno.land/r/onbloc/qux\n\nrequire (\n\tgno.land/p/demo/grc/grc20 v0.0.0-latest\n\tgno.land/p/demo/ownable v0.0.0-latest\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/uassert v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n\tgno.land/p/demo/users v0.0.0-latest\n\tgno.land/r/demo/users v0.0.0-latest\n)"},{"name":"qux.gno","body":"package qux\n\nimport (\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n\tpusers \"gno.land/p/demo/users\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbanker *grc20.Banker\n\tadmin  *ownable.Ownable\n\ttoken  grc20.Token\n)\n\nfunc init() {\n\tadmin = ownable.NewWithAddress(\"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c\") // GNOSWAP_ADMIN\n\tbanker = grc20.NewBanker(\"Qux\", \"QUX\", 6)\n\tbanker.Mint(admin.Owner(), 100_000_000_000_000)\n\ttoken = banker.Token()\n}\n\nfunc TotalSupply() uint64 { return token.TotalSupply() }\n\nfunc BalanceOf(owner pusers.AddressOrName) uint64 {\n\townerAddr := users.Resolve(owner)\n\treturn token.BalanceOf(ownerAddr)\n}\n\nfunc Allowance(owner, spender pusers.AddressOrName) uint64 {\n\townerAddr := users.Resolve(owner)\n\tspenderAddr := users.Resolve(spender)\n\treturn token.Allowance(ownerAddr, spenderAddr)\n}\n\nfunc Transfer(to pusers.AddressOrName, amount uint64) {\n\ttoAddr := users.Resolve(to)\n\tcheckErr(token.Transfer(toAddr, amount))\n}\n\nfunc Approve(spender pusers.AddressOrName, amount uint64) {\n\tspenderAddr := users.Resolve(spender)\n\tcheckErr(token.Approve(spenderAddr, amount))\n}\n\nfunc TransferFrom(from, to pusers.AddressOrName, amount uint64) {\n\tfromAddr := users.Resolve(from)\n\ttoAddr := users.Resolve(to)\n\tcheckErr(token.TransferFrom(fromAddr, toAddr, amount))\n}\n\nfunc Burn(from pusers.AddressOrName, amount uint64) {\n\tadmin.AssertCallerIsOwner()\n\tfromAddr := users.Resolve(from)\n\tcheckErr(banker.Burn(fromAddr, amount))\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn banker.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := pusers.AddressOrName(parts[1])\n\t\townerAddr := users.Resolve(owner)\n\t\tbalance := banker.BalanceOf(ownerAddr)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc checkErr(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6/Tht9RvFvqjDoHGyl6CetXPZMDH3SyRzH9xo+l4j9s"},"signature":"9xX7sffAFnqmFkJgAR3ZFanG/1mZMfhRgsAHRRZm0Ux+wlH/sMhMt0ODYf5QHqwb9/LuZ7fKQnc7dPc+wysVoQ=="}],"memo":""},"blockNum":"143378"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g12vx7dn3dqq89mz550zwunvg4qw6epq73d9csay","package":{"name":"obl","path":"gno.land/r/onbloc/obl","files":[{"name":"gno.mod","body":"module gno.land/r/onbloc/obl\n\nrequire (\n\tgno.land/p/demo/grc/grc20 v0.0.0-latest\n\tgno.land/p/demo/ownable v0.0.0-latest\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/uassert v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n\tgno.land/p/demo/users v0.0.0-latest\n\tgno.land/r/demo/users v0.0.0-latest\n)"},{"name":"obl.gno","body":"package obl\n\nimport (\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n\tpusers \"gno.land/p/demo/users\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbanker *grc20.Banker\n\tadmin  *ownable.Ownable\n\ttoken  grc20.Token\n)\n\nfunc init() {\n\tadmin = ownable.NewWithAddress(\"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c\") // GNOSWAP_ADMIN\n\tbanker = grc20.NewBanker(\"Obl\", \"OBL\", 6)\n\tbanker.Mint(admin.Owner(), 100_000_000_000_000)\n\ttoken = banker.Token()\n}\n\nfunc TotalSupply() uint64 { return token.TotalSupply() }\n\nfunc BalanceOf(owner pusers.AddressOrName) uint64 {\n\townerAddr := users.Resolve(owner)\n\treturn token.BalanceOf(ownerAddr)\n}\n\nfunc Allowance(owner, spender pusers.AddressOrName) uint64 {\n\townerAddr := users.Resolve(owner)\n\tspenderAddr := users.Resolve(spender)\n\treturn token.Allowance(ownerAddr, spenderAddr)\n}\n\nfunc Transfer(to pusers.AddressOrName, amount uint64) {\n\ttoAddr := users.Resolve(to)\n\tcheckErr(token.Transfer(toAddr, amount))\n}\n\nfunc Approve(spender pusers.AddressOrName, amount uint64) {\n\tspenderAddr := users.Resolve(spender)\n\tcheckErr(token.Approve(spenderAddr, amount))\n}\n\nfunc TransferFrom(from, to pusers.AddressOrName, amount uint64) {\n\tfromAddr := users.Resolve(from)\n\ttoAddr := users.Resolve(to)\n\tcheckErr(token.TransferFrom(fromAddr, toAddr, amount))\n}\n\nfunc Burn(from pusers.AddressOrName, amount uint64) {\n\tadmin.AssertCallerIsOwner()\n\tfromAddr := users.Resolve(from)\n\tcheckErr(banker.Burn(fromAddr, amount))\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn banker.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := pusers.AddressOrName(parts[1])\n\t\townerAddr := users.Resolve(owner)\n\t\tbalance := banker.BalanceOf(ownerAddr)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc checkErr(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6/Tht9RvFvqjDoHGyl6CetXPZMDH3SyRzH9xo+l4j9s"},"signature":"aimjH/15Cf24w+VLqtvucdRi+vGK0ieMapkZLQJ6/v9kbiMUD2hA1bqi/Basod8NfCkgDmV3L6MT0239ACnxLA=="}],"memo":""},"blockNum":"143389"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g17c9kgdpgvwytl403cwyxmezt4qjl0jcg95sg5y","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"j9/cOF0rDETkCecJwR8MzUpFdqp+EQE3LcCL2xIZsSRf9XiQAWcWJg/Et2vo2WD6gydIdmJhVAU3lx4T1jQLhw=="}],"memo":""},"blockNum":"144171"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ur6am2fhpad8kmy9hn50yteap9tvh86tuhj3zd","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"BndXd8s7aOoDTa6kDexH96sGVu47eS/cJX3UWadvavcJ6QGweApDX3FXAY+iIvB3HnjNB+mGJL53PHrhvrHWqw=="}],"memo":""},"blockNum":"144176"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1rjxwsk6x4uqyg8svpc3f2pf0emlq6xp89n8epa","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"yq5MLBh+D4hh8icGJ9ScF59wmKytouuXmFD6nECC4hUtvR4h5VaSpPqU4Cl00TQF6QfZjnpK39WzUXoHV2krqQ=="}],"memo":""},"blockNum":"144180"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g19y68crdmv843je5q93rvdvxepxk7zyzpxh89j5","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"vdHMksTLb5XvoxaZFcQ9Ju4IynXMA66vjHKsw+c+Gps83et4R+KcPTK8kSwmOuxiqQKbNnXcoJ63SIZRmYK0pw=="}],"memo":""},"blockNum":"144184"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g15dzkrdegj904ulekuqz4d5a2j8530a48ggj7ly","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"YvCC1BGRwBaL6Ve2T2YpUlAnkvBjIL8ROA3umtvKQAQcaH0FvFf/uGHmmOoRh64WaeBrvOUTyOelFqjp0+fCvA=="}],"memo":""},"blockNum":"144189"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1vr7fjl8ydpdg264wu73e35x532ql58gvedk9yn","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"4fLSZlM84yntP4jKSX37OEfGe8chI65EKU4dyIEf0ddhYQFTAO2kjXOfCjuAM/6Kem20eiE56fKnXTqtb7wc+A=="}],"memo":""},"blockNum":"144194"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ct38yws9y685qlrx8pdecajhk96umv3tn05dfe","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"43Dr13M3rrV1p+O1xR1qNY/83qnqGH5f6fSDgXdUyx4MYQqu0Xc+ZGzgSJTm0ssx/A1wBmHKIBTfh4aFb/DhGg=="}],"memo":""},"blockNum":"144204"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1yut24n2ltwvzygduy95sstpeemw0q6v2c34rg7","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ZmJUSNxfHy/kmaVmlnP9sJ2c9SEb8UcmilJL59yZ5VwAOT6jZ7ixiR0Jj4GTr+ECaXyZ+tqmLodL8bKUKkVssw=="}],"memo":""},"blockNum":"144205"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g17em2r7d0p63ny8j8h44ug7h8kf4y0w0vuru903","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"XKJvD+Y4g8t5MGKB43ZwQiGTx80Ydp0bBQ81MhIJJadfPpSIduw9VmXDmRSX+Dy54XFo56iuGYnlKtFzbBb0lw=="}],"memo":""},"blockNum":"144209"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1g4635n4cdfh2xjkuqequxsmlepz5kz7gcqhraa","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"BGRW1FE76mfbNvh2jIGSiI5jvxjP6p2+pNY9IT4UCKhCrHHIpJJg5MvPkpkTFYMK5Gtldv51jfpMsZ1spiUv5w=="}],"memo":""},"blockNum":"144217"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g16a4efpmypwkjg9d7n9wu5f5xt7dfsjadqjhxd5","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"zLtgb3GrJj5m03vVbD3OApgcFs5G03pn7QRcf9+UKk40B0hReLmCJO3hh3rJqL5pCQ72L9YCz04FJLrYYaDpJw=="}],"memo":""},"blockNum":"144221"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1as94s2yruvswz7jtn9u328atmfcm83uxwl5m8l","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"z6Cli5VcmjoSEoWukKcCmvNZaSGnT/Rodbl6gFe1rvFkqV4vtyFp+pN8ixjJLFSMRwKM4rOU8M8wcXoVYO48mw=="}],"memo":""},"blockNum":"144226"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1mlxtuqe7ml6pqrfkr8c75tkjetfw5mu3jy2dwt","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"lLulhtjRYSgQ7X3nw0xHoStZ/tlCBbMgNzZwHb16S804pWHg2KG38LGQA/wKeTFwNDniG8ymaGHOYir8nIVRkw=="}],"memo":""},"blockNum":"144233"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1qq2mgxpaq2gu949q5a9q5k4rg79pyfpdlz6hx9","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"1IYv7A9azCPViRHRD7x5tkfH0kvxyUDcWNbHBKcNDzAhheWxIylkTqy24U0RjZ/WusOPtpgoBEJP4zw1L0Ecng=="}],"memo":""},"blockNum":"144238"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18we4s3y0md6jw24ceeaqwdu2y2trajl2xxa4e2","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"2z891bglo4mTzZpyvC4P5OP6q1iWmqh+wIpPFenEdE0C2xb3wq1cPkRYqg22JxegN08sgWJOHTwpyN8/JYadbw=="}],"memo":""},"blockNum":"144243"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1cd47a5jff8343x2zfw9rhr5jhzthp2uy02ulkt","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"zIXvfTMFg479milxCojAqTQCKBiU90Q+/wvfzgKZ78hd4eARmhBNu6nvFRHh6sd8q1s5LY82lw6Foyg5dm/P5g=="}],"memo":""},"blockNum":"144250"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1wyymkcfy342ajff3tmkew0l6976qq8hh6achzj","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"6sFDftgldFTsgDoXBZINNXt42qRSKwftPGuWAXswoVcrvBUlAzM3micQ1uqp3+cVM0Gss6XcxdtNu8dRzt9img=="}],"memo":""},"blockNum":"144255"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1jll3gx9v7u8d55mlnln3u29r7zmhdtm8g3xevw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"UERaWKKTyq3la7P6Vjl7Xf5fDsowhD0QZgRDzJMpvlYhhQnNyJDuszIw8Mf5xL9aWInN7PSxdUhCgwl59V7kug=="}],"memo":""},"blockNum":"144259"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1augzcwcz79x2lvu64m9mqg5ugpzgaqpkz3kuxa","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"QuPvKNnUcqGGTJW7ip7ZwZaEK2KGKxia1ceYk8W5Vr5/QWv5CQNgjI/BGsht/Vk073cm0vYPvKE3NH4eHwCriA=="}],"memo":""},"blockNum":"144263"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1crtm8vf7gxu4qxvmmnw5cnjn8vqpdn22fw8fsz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"HafJ1CcycgEM5JDLq5kFHI8H7frRkKHtTLXo8UIQ8JoYf+2bBzhBh5a2EMgmRmK6cGBrPBtsRE6BMn6vpLbFnw=="}],"memo":""},"blockNum":"144268"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1jr4547eyfxuz7vxw8vtvdqf7k8qfd3z2q78wgg","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"NUqZcfOL0y4bd8Kts3igMw+sEqUAed5JGQzIOApZiRYKzXuO/y9Z0zDywZkveFu/gCM42UsAivYORf+QnyRSkw=="}],"memo":""},"blockNum":"144273"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g139q4pz4hef7rtzn6jkzugrajewxynv5j07x8cz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"BNLTLmBSLVUvi/gxhNh5uzIIGSJMsleRjBCzHJ5+NbELxrBhrCEcpNMSNMROXdpon35ToiAVo2oWFU7xh6s05A=="}],"memo":""},"blockNum":"144277"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1svzuh50ykecyu84g899nd0l7hz5grunpl3ktal","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"0LakbZSJMecOBkX/nnUoLkQxsj6B+pglWQfhY3y0dlAJVRuPJwsiPx/2Thmo6YxUg2r43hksBandnh/bcCDhBw=="}],"memo":""},"blockNum":"144282"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1mu4f6ra98fal7zd38klhlxnzr9nv59cxqv4hpy","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Ipr1sRZOZDs7/lR7t+MfKBXwredhZVbZqeYbMt4Y58wS5XiriW9mJtj7bYBWHN/p75W8/A2NQQmSLiZecf0SSw=="}],"memo":""},"blockNum":"144287"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1sfy8mjkjp23c272xkq4jadwhx9tmq3j2vc7kjt","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"fZDVwal9tSH8diuMYSH45j6O6pJ5TK+NCxCjdHZCvCN0meeED5b7d5VTgHTi6kEXVh6EmVJ0LtF46iD3h8zzzg=="}],"memo":""},"blockNum":"144291"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g147c2c77q5yw4ucdrza8dmy60h6mxyjl4qnhv5k","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ZOwcnV7NMg+ttNxBCRymH3QFvMkmeWA5ZK4ho2Z6LJJ/Sk1sVvAbK7uq3HxIZ+nVB0TgcSeyWP1vrUBIRkNiRQ=="}],"memo":""},"blockNum":"144295"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g15duxtn8t0a2thpecra0xrr6nqm70suqqm4fvq3","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"9OHoL9RvjXkh4UW2h0KZg7M2Z/Z5wdzFs5fVgWq/4v8Qk86cykHkekpX9upLiBWaxQdlCrYBVGvZycbnD6rGOg=="}],"memo":""},"blockNum":"144299"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1fnxvzrukngnvque887g57pntv4pkfw0r8wdnl4","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"A83aMPvPM8hhV+jAJvFmJVKd9NmEYKyD2vx4roYJMP0AWNoOkgIrvzzJOpNVIdMNOEfg1yKf+ebsuK09tGJFHQ=="}],"memo":""},"blockNum":"144304"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1anst8aufv7t4h2q5nquzmexrumf8gd83t0jxtu","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"tiKF+XzWt3wOoNX+7awZyzr03vySb6VVqMqbXUuXRh02yhaLeGH5yd9ffMyKWl4EHgz7AitCSHUri0+/jjVYMA=="}],"memo":""},"blockNum":"144309"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1vfj3a9yfcl8jm3gr6k70svswuwfvk4ndserd4u","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"t7+InLXKBDETEkl3O7ZACPhjlmt2kFaptDpylxbGoLJ2at4xC4+He3vhhP3016MuU/i2yeombrbkQx61FyahIA=="}],"memo":""},"blockNum":"144314"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g14d7r2geeuyfxk6fmfm633z3th4kx2fh4m90t66","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"CHcbM+8N1fTG0IOoUW7xB5wIkCl9rHxhJT7KYq9gJ2Z4mzX8qnmpvh9OaSwNL3EwNAIWBJwDs4Zaha8XVCflCg=="}],"memo":""},"blockNum":"144318"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1tejtz36055sjxs4np0yffz4heqe2u6yv7ev5vn","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"3yR5h/6Y/2lKpNSeTcHPqqX8HhBIU9+0A/MGZ95j/Q1yqnwW5TTn+7cxH4N5lq2jpaV9VwOlltYaWvGFdvLjSg=="}],"memo":""},"blockNum":"144323"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1cvakts04fsvwnmwjnutyehu5wehhyd7kq99rw6","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"cwSKH6ml5MIICsqo75vElF8KbFSEV5Oop2KZK3x07S801lWCCQOgZMQNJIf2Wod8o/6MHapT2FyjCZm/w2PDAg=="}],"memo":""},"blockNum":"144330"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1nwmgcu7az3ujwys8zune39kfywlq55h87trpdy","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"dHqECT9ZWX+9Y7eg0ztFrN7+6OFd1MUBuX+QerW2oZlj0bbWZmy0+vG4M5wj8EsT9fWa0U1QsN0yplK1+j7u5Q=="}],"memo":""},"blockNum":"144335"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1lyjwnh0c2rj694t8d47w9uawkq97fy857du6c7","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"IH4zD0WJl7ogWN1oP2IMaRhkZAIQTVmlVde+DSA0feB1kJwYKUXQD6U9MUIBAdH4qWiGT051N5TAGBR89hC02g=="}],"memo":""},"blockNum":"144340"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1d4auc2rt8urdl9zd49kk7qc0gcpellxs0gkhxx","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"kKT5WNHKLfmCSz4MUQmVpjFr/0jGFGV11X8avwYvQhkV5b7gS7S9ZDsW9dcD7EWek8cdHH+wgVKKaNQEvRwT5w=="}],"memo":""},"blockNum":"144345"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g16m0tkct7npnayvyugwvvylzzhe686q0nlma28t","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"yNbXcI+Fb8YiDsPe13bKoKbkR6z/RUGObTTwARhY4l9ba/L0gNpfqe4c+ublR2EhajdcRATWJ5V2n0O07X3jqw=="}],"memo":""},"blockNum":"144350"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1d4zktc9w4y4lyk4c0kahrdtpu8dxqnsjy4rr57","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"pn5J3hZqviqv1lCF/71NfLG4Yw4Avv1kT/5YSw4k11AISsMC1qqsq+vTrkMIG4pgb0bOzS0Sb3dNzOCx9hIiHA=="}],"memo":""},"blockNum":"144354"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1u327kkmafyf3nvjg43rgnl7z8h4tgzlx6qjkvg","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"KrnVKW3SCXxByebJqnUCthWy6+GA23ouPX/N35ovTRhf8J/7YHAEQ6b56dcnmWJCZ1vU4qPw7JQh0WYEfzktlw=="}],"memo":""},"blockNum":"144358"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1s8wsvaelmzw6zu0hnnkztdr77k4u0dc97sq5lp","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"mIOMnNgCSrttmTlacaTQHQg0hZZ36Xjc+crVd26MgixYOBaSdCqHniHKdIuaAjoPTRN0fAMV9BKDX6ktOA4ivw=="}],"memo":""},"blockNum":"144363"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1m3v3kc3ezc407nxl9n72akt0f22526ssrwdsqg","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"GBxx6SKANT39uHCTkbbp9lhmoivaHv/bplMd6ZrWMlZbwWm5TtyP+ptU1I2OtjjfqXNGIvF6fgCWykRXnDXlvQ=="}],"memo":""},"blockNum":"144503"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1d8fzelwwwrch57czkkwegm4xnge9d2pkp0n888","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"AMEebC88lvYz2QGU1KjKCSm4I9srJV3iUhJa7JTY2hdElEEScou/NGKot8Mg45gNHSeCxBoR1jbjbRLfHegi9Q=="}],"memo":""},"blockNum":"144508"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g144gxx5njxtkkeuwqfljc6mr54umgjs5hquq3zg","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"3CSDnbHAgxLHQ8fXGWbppB7F6pb0pywG6R/br0TDvVQkZf0o9JCSd37kwd45yelH+PV9yp0Zyd+zw5/bsQTAaA=="}],"memo":""},"blockNum":"144520"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18ae7dq5enlrrkeah6t2l6tmguu09qdr8shl8x5","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ibZn9Qbe1Kr3OJwqxYRxKKOKGKfYE4frU1PdrGZe98pkkfe914YAIAVnyr0RhPKQM2WLv0kjn+/c0I1qfIN3Ew=="}],"memo":""},"blockNum":"144524"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1z6td20de39g8su45nevfq4mqt486kdfgeuhx8v","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"nHms4UcNIsrm9P+J/iS1ponxx+eHpEV7InPpSRk3s4FaCvNmlucOLGSFXlliTnbKSTtT0FcjpY07a5EspGCxHQ=="}],"memo":""},"blockNum":"144529"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g14yz2jw5hukhp4lzfrdulf4kpzgk2dw54wlfg6s","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"WiVuU5rZ04k2oLNC4XEHDl0kFu7nAnW199qWIY0oXQZ+E7OHT156leY/yf4bDn9w0Ozcuuh7I3PZ8cBssA9Anw=="}],"memo":""},"blockNum":"144534"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1c6v96g3emel664tzqwv2kj6yg8ks9alh3n52du","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"F8PE8eMjlTi0CKKiVBDGED0UzXzw32PZBFwCrGCOsiUtbNuRUB7AGoApJDTWQTS3KxY1fw0upy9lTlgLKqpHGg=="}],"memo":""},"blockNum":"144539"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g108j8dd3nlh5wskh02cf3s0a68yhqmtrvmmngmw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"kuNGxsZ2A8sNHfXJPHUVAusKyuLbNbpSmAtNQvL0iZVy/zTrkpG60MU0qT2Fwqbl+2qbQbdSSVHLeDglIAwZvQ=="}],"memo":""},"blockNum":"144543"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1jy39dj555y0laeggu4t4uertjnl59ejrtet8tr","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"xRD9hlHQoMua1iZ8EbzR+8mdiv26g+ltID5btibT4NVGtxOzdOBeXbNYQtSUn1K2jNLUi/g/yhokK+jtS7Wo9g=="}],"memo":""},"blockNum":"144548"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1glrd8qyr2ezrmpxcv4kn7j230rfwa2280clmcw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ITWtAOdpNq/euF9k8xjyrDhNWZ/aZu7UFm2V5w0dxAJZ5IseW+IicubzRKS+C65EcQMqx+uFvV/eMcNcl6fsDQ=="}],"memo":""},"blockNum":"144552"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1u4zrr7w0kfn4qy97h2aly6m83sy7007zghuvsq","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Ke+G0I0D+3v46sTucgJb3Aywuj4Mqr/MJvvO6gWECWYMx5OXivDRkiPNbT5MXcK05wlC5tyt7o0mT2HtFI8ytw=="}],"memo":""},"blockNum":"144556"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g152pgg9hv22e6ryj4ssdzgnaqvuzwn2ra7dh6md","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"YYzO2I2ue5GNt/AX4W6h4tZsnYz/IuK1bLVowrjvstUn9f8kx/x5iMJCwDE22De3PYWXtIwU1HoDuxxeqDTZEw=="}],"memo":""},"blockNum":"144561"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1mrwmj2q0x70tdf6p9xfaq4w4w6vq6e0jlvtf0p","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"BRqYth2cN0F4PcaG3Ky8PJ/b9pQK3nstcGuHOvNIDFQT9HqjlLo6aJkvvEMT5E7L+HUUnuiLC6LWGOsBlnJwtw=="}],"memo":""},"blockNum":"144566"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18xdfpjulfd7ztu6327497ev52zvfhx9ghdqm6w","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"jSwocZmCz/vNwkZjr06pu2uFcFmtr7h6q8MkADrKMSYWd7ulSHWTJZmpHC3OtazhWj11tw4fIlJlbfnNMbqsBw=="}],"memo":""},"blockNum":"144571"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1q4etau7senf4s805zmyzn5349xvx3guutk6z99","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"aTEnUZ5neQQ18/adS7DgFAIZDPVSsH/yIVzKq7efoyEh8D6Ef50QH0jGOvPI9bqxiCjcnGoKTY8ZL/Sl0iQI4Q=="}],"memo":""},"blockNum":"144582"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1evnaeslxs7fwdcqtage9z22nn4gmpc2768de8s","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"r1TTAQpcN6PcFzuF1OOuSGaPE/v3JPcuVZ5VAdxpIjR+D98GZskcSnXAzacNU3C+UwHZwP6M1df6GjBNv6J0Yg=="}],"memo":""},"blockNum":"144587"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g16shlzhtg5hdt78lsjkpgy2hxvf834lm0zdfcft","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"nhd7Keo0E1eTKhFUIoGqR3hNJ9iOJ5rFjWf3H2ThqncHp5cZowyWIqd/+ARwRY/Do/hegy8CoI45UeBkcwh95A=="}],"memo":""},"blockNum":"144592"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1p6zgxxkcx8e9ddjtjpn5rpyszwxkflcrgthfsw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"06FRpYUWIq3JWP5vcUocJiYcLf5qhr8UEuH02Qo+G3Urx+b+A5M5AqqpO8emmpYbJInKL/6+KyWMh0hNamkzoQ=="}],"memo":""},"blockNum":"144597"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g17jxn7j2gpg0ht8pu59e9k2nt95n5rlg953n5sv","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ryQlIKL/QXqeAMm2saDg9hiRc65r+bkEa8fcnLknYy98KFWFGpOVky9QGQNqJO+Zhh2MOWMSlDNsmKItWjilxA=="}],"memo":""},"blockNum":"144601"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1aj6w03skp8s7cfpunvqtv2f4423cskzsa8rvcz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"6TL4SF/xzfs+4CdRWi40F4o/NtFP+p8edkjeWUyat50odvRtCLJVP68gC5fBnAtAgcv6XISAnvfzU76ajjtMRw=="}],"memo":""},"blockNum":"144605"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g14uh5vjjq88zx80ph94l7p5mqthn79zkr97u0qr","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"GrxPhF4qt4fFMBxGSmF4gl33GTMgS0ffwCY9n/KGe2RTojFOnCLVCnZG3sQeXUD5rbJM7di74mVpiOKmPGo/Iw=="}],"memo":""},"blockNum":"144610"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g136lalr8rel5qu30n38stvp6v7654kw3vt85raa","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"C1C9SEibpHuvrkNp+peaNIwSG3+J4ZGzrhnu4PQ2ScMHJ6J2srgy/uaS3xQXigVAdnEpPAkmBWBOkVRxOcWstA=="}],"memo":""},"blockNum":"144628"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ejrf6mf6c3tdspdhvcu9dtuhhf4fc4zf6r7vkk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"gb2Fh8orQKQz8PxIqIuj08IBki62GwBaSHqsR4KhatVrbq511KO6/7jTvRJos4/0oiTt7NyKknuPG6ym1ZHOtw=="}],"memo":""},"blockNum":"144632"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1p7jta9ke3g7rq2q7ce993zpq9s5526uwm2tmt2","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"v1TNHdEMKSZAHp0vheRt9a2UCvRvO22p1xs5vToagjB4gqbEUiPx/9N6wuKAUZAJTmJ6orRNB7cMKmWan0ljzQ=="}],"memo":""},"blockNum":"144649"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g133effw3zfajq08ctzxtpntscsucgap3xa7k4p7","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"/jT4GvS1XXAVOCnLplq+MfBjKYD5g/GiGyFrIzEVais2Oc8vFVCnBh4EzVQ1Ve7+HZX2VR5g7Trf9f5xUd3uYA=="}],"memo":""},"blockNum":"144653"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g16tskjak3sw9wcdx5mhymlt20vh8800huskzh4r","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"5NfdQkM5FZnqNfa5F0uDqhwEDEHBbFwDNrhRewXncys8aMS/rRYLxj1aqsiJq1zNlwHMgKZqGfnFnJZC8CjdIQ=="}],"memo":""},"blockNum":"144658"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1j4rvs85ej72hlnyx02w24k9a6q9f0tcvgfpyyz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"eR7EYOWf/URb5B1ddpWj08mZgrdZIdoW7a9D0Yu3abNvFs+1d9B6n90quUuO6bN52icSR4O6EsKno4jNf+49bA=="}],"memo":""},"blockNum":"144664"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1k2yn7ewu56z607ve9mv2pw23eermd7qlmsu4gm","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"nCQuFOZzqtL7p2GcA7BW766TUz1+pkPcYz7rKrFlk6dHBVC8N8XkhwM8KMHcS9+cKk0N4tEfQP/Oz+3cu+RKrQ=="}],"memo":""},"blockNum":"144669"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1e7wcnz6q5kfxmpnyg962whfjnyll2dg53evqv3","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"GZ4bnIt5HZGSeV61TiMSlLNibMfskfmchmbQl1ZnFc90pwQoTLG/0HBIbVahOINCkgfO1WD9hJAAYRC0xZnAbg=="}],"memo":""},"blockNum":"144673"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1pjdrn3qvu60zuztfqq0m04a7qxhek7xkyqy6c7","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"lk8OVA2nIZuCkfIj2eJrIcFilpJwgWm2qS+m08z9PYg5vAgvtm6jlj+0za+DuBUrg/TApdJwyTnCgHzZwE3Erw=="}],"memo":""},"blockNum":"144678"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10jrgg8m3wqxmttxjyt8v0wvcsf40z5zwpan8fg","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"8APc1q9RgmYEYKMzIKrrMd6M0/P1OjLWuvZN1/FOy2tvumWAm+VIuQZ9UdQxQ5GHYJl8uGzUxCSWcyNNl756gg=="}],"memo":""},"blockNum":"144682"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1nca2zuwegccyf50fd2ucsqjc4grrtz84uy0lx7","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"qdvwkGInQ5mi8dPL9bjksKkiVg+A6wNX3v9BbHi16qRLAjWBbjfL/MSRuN8UnVqxzGR/7t3xAXYjWWVdKtr7Kg=="}],"memo":""},"blockNum":"144686"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1wnf236gvapnajjyv2rctndrzumg6l6st2pfxyx","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"0tZ7BVPK8InrRPu7GGDxizpyVMrBgKCArHBXa5Mab9l/cvu6bdbgmMuzUfTBvwnL9G7ky0WltG2H22b0hNYvKw=="}],"memo":""},"blockNum":"144690"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g15g86lf56ncs824szqrkcpzn2jevkfkayvy5tkk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"7T4ISVL4w+XELEbrh1j1YwtO6o80RohhWb6kEtmbot8uuvC1EeZabfDzW3nW1KaTqZsEO97raFZPixUTFBDQeA=="}],"memo":""},"blockNum":"144694"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1q9szeljuwmfrhl9jj7gvm8eqdfe6a99c5g8kxa","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"bhhos+G1GtpRM5ujy5llyTdd//98+3Knu5qaL2TScBxzn76KFg/RK0AS24uelG4xUD6JhwfH/ltKpxFZac0N6A=="}],"memo":""},"blockNum":"144699"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1n6j6pke7l6c7uvs8hkaygjq5aszdtn2cpmehs5","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"T0O7TlICaPtU7EOYslPaSzca0g5vT+cB2z4puG3sxtpv/Smxb02uj4TLf4em32HdPeApFrcR7VI/YYjWkk5c9g=="}],"memo":""},"blockNum":"144703"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1maez27yf8nv9pk7ahy72d2pdlgj2zs99tyxatt","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"6pOR9Ey66fP8+DEynXzbVxkZW04+PdlEOW57/1CUAthtN9v4NDQ95A2XN0bCXKshwjzWZJYlpDaGJ8Zl1W1XBg=="}],"memo":""},"blockNum":"144708"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1fy3q2r5j76d6gq7nq2y9x82d65qyqgzhuk4paf","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"QBxVgbxHiU1kP04wORN59nRJt7puZLbyFC3lSVQ+EPw9b+p6UFHb8OmxvP5O92R2sgbEHGEHlbe6YFd4MdCsHw=="}],"memo":""},"blockNum":"144713"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1s75dx383zrwvg200cyqek84elkeutr5helqv5u","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"YIyMGc7KI1wrN7tPMsTbnPXJy8jZLZHu7ifqmVCPbAQDt/7ymbH/BToSLfnTiRXNyfunsiTPH3LDO2Y46eEvzQ=="}],"memo":""},"blockNum":"144717"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1574xfwjd8yq4qnj5x59prrgeqda6z44t5q233f","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"NooEmhOA4g5zuemCeBFksZZMgOlr/8VHVdNCPYeEJcc1NsQijNfIEPo0DrkOGCMvi7RmR/yIbwp7DR+7WGIHFQ=="}],"memo":""},"blockNum":"144722"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1pvxuwpa2w2rjv5jt63d558r60uneln5lfs6vnn","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"zPVqM4yScbxk3es8+S+v+JUGkQk8BFTHg+SlS01zIDtTbDm01EUSQ7y73eaaoP+FheYjBuKz1vrh2zri3IY0ww=="}],"memo":""},"blockNum":"144727"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g17caj027mwun89wqegavs5v2jr24va6wr57qtzm","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"CfhlO75TdD54uNVDEdSIu3+epFApJwjQOGwI7kIVRywAjW0ApyaQDW75VA9pXMY18hbnvFoZuuqeWrHEar755A=="}],"memo":""},"blockNum":"144732"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1jh2wk8zwjn8tdl2lgz5xuyhmlfnjgz7ley7mkq","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"YX8tkcfIru/7beadN/NfHe8lJfwQf5VFr9zrfbnoVXMPvdHli2PFsxaDed24Yjc8KXN5t/wEB3nHti4RVk0JHA=="}],"memo":""},"blockNum":"144737"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1c29ag5wpe43nn3qngjar3dl0fky0ad5jxunjzh","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"S95a/Xyb12dSHarQ5Tzz6yiwuh2/54gPzj7bWhDS69E4zwpEumU2V8UATj+huBSKjUubhjmMLCmTFZdpR1Iphw=="}],"memo":""},"blockNum":"144741"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1j836r4sa3uplsq76lthhvjrjdqqeqlrmreaav0","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"U0xcKjeCShqEqfJHVXUOb32BKj0AI5B806kPC+42RHlYCssqOsxftLzRx+d1FapeckOz0ScICdjZnW1HWtORjQ=="}],"memo":""},"blockNum":"144745"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10cxcvvpf47cfmq8wr0ufp8u7fdsf6lh7gztdx7","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"fDY74y9KNI/bSP6fxRPmn7MM8ojXC+oayokT6eWlQkl+9UwqHOFcxX64071RU0fyqXTUylF7JVnad48ENX39lA=="}],"memo":""},"blockNum":"144749"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g13ehuucr5tu4lyzjkjgl6ewnxgyk5jnz6ezhufq","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"+9R5Zehr9ORUexDyMs0QRfHlZZn1iUdEYoBgsRnv9mR0VgHJs/P5BUJbAlR0nh+IgA+hhae9p1RDhvsu7No+Mw=="}],"memo":""},"blockNum":"144754"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1q38d30p84fc7w7retce2k29vwndlqldwsyjk4y","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"o0JFaf+MXlRxY8yBRFkdBqY71Ibq12PZ5VLUv2hrMPkKdIMdSXuS2DXBc+//gODb0AlYps2rNL8PQvDrrLUKGA=="}],"memo":""},"blockNum":"144758"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1rm9a388sfltryzxwclswmnxdm63t5e0delnv2m","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"PzzLdCWMQdcBjo8Fasm1Y1Q5X6bJkB9udJkie3TUSTMrZ401R3uIEIRoKDyQJ335L45bDYYeiqLzoxlhtKEfNQ=="}],"memo":""},"blockNum":"144762"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1j9qnm0va83t4zhuw8cyrmgv5r3r2lec96tpdcd","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"yl8EzFgFGGpRJPDBkvZ+oUvWgMIqdCwMveyGC4k6eQYrP1Sfq9EjG18CANU/rtf3W9gXUUz4Ru5h0U1S/pGBhA=="}],"memo":""},"blockNum":"144768"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g16hp337v23e8tf7j77zp22vrnn8vj7js4cgnnvd","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"SAx/pTyC5Rkve1x70LPrroVrBVhMcoMFKkz4IhsnNJ4q5lQj4tV1SQTPFZWWs/ya9LzgUVUUZwf4TddPXu7GnQ=="}],"memo":""},"blockNum":"144791"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1dk4446ap8n2su95y9ah4eqe59z4nh68hxw5ewn","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"F+k+SmvWB9qafqXxs+KsPCC8+vkNr1z3sIUFDrVAXooWl9BV1kUpaOimX+9DytLYjlLSKXuLZWrxp2/hG3LFfQ=="}],"memo":""},"blockNum":"144797"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1xu7qfws8j3m6rq0wkuwqp29elu4k6dt39tr7j2","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"C+7eAhOlr9krEJsyt2ad7eGXhCqMAFaEglI07EIb8tMKSIRwpV8sTDKk/g5XHMVlmZ6V5ttLhMnPMCEMaxUftg=="}],"memo":""},"blockNum":"144803"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1sz3d39pusrw4sdwdl7uqj2fwmds8av7dv46l2r","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"FcVz0Eiyj56PLX/ioxRJ+shy38/zTSp117NDiU4A2iY9mjlCO47hMiflN+l8QJ/mzZvdrLMK8KSOzyowB6dnRw=="}],"memo":""},"blockNum":"144808"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g159ht5qs4crffrcua6sayed8htkdnyjn9d4khw6","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Enq01d/9UPpegfQAUwHTMCYKtKZx6qCK4y9PN+8V9pstk7YuexzwXyU3vFjD+5yvC9drwG2eXvBoPsiQgw95ag=="}],"memo":""},"blockNum":"144813"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1fysesd6kjpwdj3leuwxcgtkx44ldh0tplet5za","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ePC+yXrBy78ZpxIGxBB8HFR7jBJTZagNugGixMucNwI0Z5AIJO6GKV0NjAodipKE1gMWvrNSnIjRCCWeLLE6Lg=="}],"memo":""},"blockNum":"144818"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1dlu8tpwmwr32tumlfrug5jlg52k83uz4vxhmch","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Uo5Dvhn0n+hR8aGY19I3c8JzxVEf1Xj8T2xoXCQ8ZKVm5E6v+4f8cJBJPvpgG+eRFSWEV7xYb4NCKHkPxPHJBg=="}],"memo":""},"blockNum":"144822"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g17mrpz5vqa3h6l9yfd3eg0q8qcnd4apy27eemwg","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"01t3e4d/QLEtZkP2W+Ob9qt6X4j2/hU+edYZn2fVMrFV+Wj9bOVI3FscQMfB5vcF0wV80Ec6LKXzupoiCGKt/A=="}],"memo":""},"blockNum":"144827"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1kpye50s3dl3kwpmzkhr45skutfk47zjc2d0rzq","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"MhmKLrGAa+i2RBdk+70PEy88KDJQ1a03sO/6FqutKvZqCtnimsvWLj8VI432Jaq1GeHECWvSdlShLaHO+RX/JA=="}],"memo":""},"blockNum":"144831"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g166pwsha4vvpkvy2x4rweuuhzweduwn2nz5lg2d","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"fDm5d4RVJzKdeS8Ix6ekil5CW+2xYD8/zXNgLxN9wJxilxYPxS1vcn4Nb4KuJtQddagWgkt2fPyG2NoiBqO/Kw=="}],"memo":""},"blockNum":"144836"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1lcl9tnyzdycfd0hrwsdysyxksy8zxrnuxl527a","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"LgyUFrqF1c8IZXhO82jIMAojB1De3HxtoKRVD0gN9mETlg2bKyn6ElTUJd+wgSRAgHfrzSwOokHInAsJn26d/A=="}],"memo":""},"blockNum":"144840"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1g3wnhljqtcagkue3tlwemmvtsvg0f25pkjs8dp","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"J8qLs39xmJtckdC/lnTeRj9xO1qclxoczQnGInsDyUN5d2xPvRrnPc8jS0KOQIdGHNtzjXJXZjtTR7kdfTldYw=="}],"memo":""},"blockNum":"144844"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1e5wq6zz2zyutkc8ulkehr2zlfaptt26lm5j52e","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"kXa9O7pfx/Pt6bu9QsavSCencoSW8VnmEKjbBRU19BMXxlkjZmcQLjzG02o3YnrxRJ8H/ZI5zfKnz7zH7UQRPQ=="}],"memo":""},"blockNum":"144862"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1vg6atfsmdm3q06jz4vzxu985elxv5sqe2ak09q","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Ij8yfwgd5bdaqNRCltN6pGc8FuQ3hWZJ3qqRHEFgXTACD4HB0eXaPkEXihZHCBBAPjUGO9S39B2DZkeyB05g7g=="}],"memo":""},"blockNum":"144867"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1rtgfx3ja2wead343pn4pg9ket4ggfds69cu5gp","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"vo+GuWtf+TOje3qKvYyx5qmZa4CxaH8s4XGpwm41CUsvzpTCQxg3JbvC0WNhCepPOWdlgVPQCo9wMpij0OKd1A=="}],"memo":""},"blockNum":"144875"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1rfcvyljz73a7ayc5yc4elv4kdx9s4kywl2j3wx","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"xZV4ghvujOVL9ysdD3dbNo2FQhg8a/qRxeyktiXqTD1aY+y1kYg2WsUZx7vLRg/snkQbkmdinBMlgtrsFGLi5A=="}],"memo":""},"blockNum":"144881"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1vt26yxl5ge5tqh9lgwhj04tmdk5antmc9vhxtg","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"7gs0imak2WnI0xnDmr2Gq56w7KEWmB/SmLMx9D1zGvpGJSjZWnKGPCia8kZ8a3YEK6RvrwN+/nNcHy7JdZlu9g=="}],"memo":""},"blockNum":"144886"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1s0qmdwle2dqanj9xkdn9hjdjm4960hgrexz0qt","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"0mI8spUvKL5pswMxg+iqLj3ldtKbEPETbzF0eZBb1ZQOVo5IAX3D70phfrOYZPoFEsCLkbmYOznv0YenquJuaw=="}],"memo":""},"blockNum":"144891"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g12qhtqqxchpwpju4cmemvzh92vdz7a6tn4arggg","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"HSwImWh9psSh79rGji6SQIcDFjjsRDF8BwGGh9sD3aQ8NBWzZj7PPnM1bYtlXglWYWqzKLGxEPCrnmJe0T9GDQ=="}],"memo":""},"blockNum":"144897"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1zaugqpxgfjf7s3q7rjt04uwjhdrq2u28e7e3cn","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"MrzNgginSC9zb+tYWCOphKsiWkH11Lv6TASTNQ6ghF9wXGLlvORWzIJ73dVo0F/BpUULylNqt3GfSbJD+G/rzQ=="}],"memo":""},"blockNum":"144902"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ewux8claglqgek6gy8kcflts2am5g0t2yvj9al","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ah9GasgerOnr2AU2MmlgldQ5xilU10tYU4QI0sm6Ll4KVzEQ1mVlBHZclkdF53WBTVrziSWmw/AjYPJnddmezg=="}],"memo":""},"blockNum":"144907"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1a8fkldgga7zdu69v73m3e3m7hvpap794k7u8ag","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"t+42uUQsuETVXVsY8rJxL9cVRs3fsyXeNUzadoV++lxCF+ATXQYTTrIbjhF+olgeA8mEus4vINr7JcXK4Jsg/g=="}],"memo":""},"blockNum":"144912"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1t6u2xuw34v4cl259uta29vypvym87rfvl9qreg","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"gg2GL+fxss+EAt2VuYtUDHxG/oen2pHDGNVr/AR19VICq+SZU5CjyPr5pfGAotcCQ4YRC6MsFYNz3ctNRzfKsg=="}],"memo":""},"blockNum":"144916"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g13lf2evuzefzkdkxnjwcgsac78e6esvk6sdnfgt","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"WRl7cVFyxku6bL8aZUShV2V7bvFcmvN0xN1MRp5cNlEegchogdnNdhm+kjexbBdZ2QaQ20Z8R+Kp4KtOto8nhw=="}],"memo":""},"blockNum":"144920"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1kk5ykuur92pnmqephrkq9hrpgrzdytjjw0vqyn","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"f1qLU301qFvqwv18Mh/J7u83TVNmK2k64IMJn6JWOuAPWC6yxDVSjRfaC77AXwl/gk1aEdygKoXQnHZZTJkW2Q=="}],"memo":""},"blockNum":"144925"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1e9ewvgh76hvkn2p0waklkn45dp4w7wr6kycwuk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"xCIP3w9JtmxpvnSC72J6sIpkt2gTY2tEqF7+Z43Rj0N2t71vbeUDAVCGkCUSjAco9aiUfdo3kHUbmsB1ZCKtNA=="}],"memo":""},"blockNum":"144930"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1jwejjwry9ha6tj7tzvughkd2v9ddqgmk77600x","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"xBur9ngMMjLHqkBn1hE+vcO0g0deUbNK0ypGmQSsKyYVkHoXNGYur2BrtJaw2iqcULocAw+uPTiQiOW6176PNA=="}],"memo":""},"blockNum":"144934"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1lag45tqrgtrrl6kjvjd23n2cc7g3tg6cyce6ru","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"X0WB6KAXVoaPpJssVNOxsZ1BPkm7QyMaM0RixNV11W96Ek8Cv/fdVOPKrN/KrxHBVvGNYtQzSGb8L8xoGTg3fg=="}],"memo":""},"blockNum":"144938"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1nyx0flj07fz788g7gqqttjhtqlsquvru6236h3","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"VCl3BSVlXX8ZnJoug9LVA1TESgRu3M0mKPy5bkgPLDdEo1WnmMn2CqnQOJ50/HaYroHpBLMaCUrK54PwvuI7wA=="}],"memo":""},"blockNum":"144943"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1yr9ey509gz3n92utqexsan4ukdh4pknc7ltw7x","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"71Sr78BqIF1IOSWo0mDKeWjFJzBoOmTFcMpfcp9MLzp+5FiO2h+RZgh4+idqx4o65dBCbMNTDsiP3EI+dwMfdA=="}],"memo":""},"blockNum":"144949"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1g65xn0l43n9wz2pzm0klv6adtxwevlf05u88de","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ohyS87IdaPZt3JbDdhnteVAnjCcXI46AxF6bQOYIze1UFDB8z1vP4aO6DzoX0JD6Xe1SRKMSbAH0ZPYV62K1gQ=="}],"memo":""},"blockNum":"144954"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10lgf508tw8tlet5n644h77ynsjyvlf6wmp33jl","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"a0eCy/YkGs7ZGhZQ4eiqaItCY5XP6zDucxCuDaUwt5wZnOpn2aapzMT8H/6M2N3B2I8c5xXbokIzGoytnUFNOA=="}],"memo":""},"blockNum":"144960"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1fjs05el5dattpxma05lx7zlul44084kyyc9krc","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"VSxM87cciiGnG1ydVMLeEco1M4F/2QUTmyI2RAuimWUnf08INtL2sD3yAQVMBYJ8TWRHUXwjLcxLF5Yh3ehDlg=="}],"memo":""},"blockNum":"144965"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1c2pn6dcdv95h94r2tj3mn8n0ks6kgvwp6awqps","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"5T+kCw0sZCb75wQerVmLgjNtlZj2I9EPiT2ECljO9X4Fh2iVVuOl3l7OxAKSN2oQQvDg7bb+yAEgOn3755asyw=="}],"memo":""},"blockNum":"144971"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g17sx7fn3v6hu3r0d08vu37qs5qlfs70jt4dspdp","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"xa9kUNEHvHu9MPRUZgnuY0H+juOGwyDe2Evz+uDIGXNMq7GrKC6bkEClGLiXxYNonaIcItmBBodkv0QdHlUWRA=="}],"memo":""},"blockNum":"144974"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1lwr42dv7ee4en5lx5me99a6g4v8qk2z95jleen","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Dyfm1LPJ8x9sUdTZk8PptqB/alEMn8XFUmQ2rMtd6NgRWN++UIxqkK1f9c42K+RrKewFown/ILvLlTk2++IbqA=="}],"memo":""},"blockNum":"144979"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1au9qfw204pe06jnekcj5qvsyux4wsasd45z4d9","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"GvifZbIe1yz4fzghUyQoQDlLAtfWNJ3oh75pxxAW2NE6h0h+TNWnnQVPwFNnYDCA8M8/x80XlEKvfkttd84z9A=="}],"memo":""},"blockNum":"144983"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1c6a2j6uh6ylywmraahyckcd45zs607wztlz5u5","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"egExEx1vtq5YQhj+o7Gl6x35Dt4i5RDKp1hYjLeAHPYnfh0OwE9vec89enMgS78pF2VutVTK/91uTlxxINlPDg=="}],"memo":""},"blockNum":"144987"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1tc3lp2u558hwy3l57kg68885af8c3lv7zlvjyy","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"816YQSl/zC3aAYLiYz7k4hTynFOdrqRXQ+Smpm6bUjJnLG+tivO4o0Gw25Xi/1DA5DW56qJDVa4WUdZFoX4wQA=="}],"memo":""},"blockNum":"144991"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g12mq8usqg36nvamxt4d4mvhrfqqak27nku446x7","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"b6mHbMD5jFI28gLeEgWta9J59LigRtxtNZkUe/l6Qm9Ld6Rl1F9RdQWt1N4Ct+0nj/ISO4vkipNtPtJTnNJ/Dw=="}],"memo":""},"blockNum":"144996"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1hvke7mmqhnm2dcfa3vkcrsdak0vzaj8r4q5w4n","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"9v1OMhkxF2v6kY5OoIZC2t/T/0hbFoCDbo6hBZaTf+wo2xyoOLibAqh6VWPipPWup0i6bu9gqcN+GlovnGlUTw=="}],"memo":""},"blockNum":"145001"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1qukr7vceaw45s5kp53lewy6rjewzdhf0evdvmk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"3OIo7yfu9FpFSb8YwUeCYwr87WYTONG0aQ0xsCPFJt0nslwBRAJJ2NHguY7ypO1iqAyhHi8GzOBa8d+TA1fy1g=="}],"memo":""},"blockNum":"145005"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g17efn2rtys0378s7uj8e095h292u60qx2dufeuw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"qkvldd1PAmz7PvP9byKNLxiLBg+eLhHYFPv6kAU5CgolG9pKT8Gu+nlfzvpuq/JT6l8aIny883ZqwJ+/bry3+Q=="}],"memo":""},"blockNum":"145021"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1mw237adl4hqtlpwjkzttapnq7awku7gztarqr0","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"loIyZ2H3OE1FkVS2oVVisStRi+nFIYPKmtOlu6XEzdgfBXI+h55pgKgGUDuMq+WRBB1plsJvHLA7IXZDroqreQ=="}],"memo":""},"blockNum":"145026"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g15dpus9qscle4ptcc6uc053xghhvlz8g9mhk4u0","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"M/+p2+UKW/nq3XU/kOfp38Nv08LAYiZiPMLrW8XlpFReLuPdJ7xdDyLB+16OoArvo7peYm8INpm/Q6Vd9UDbrw=="}],"memo":""},"blockNum":"145031"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1jdnafqz7mfxjltes7we972nga24hkvl56eew28","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"q7FkAprzKPF3wUHKEZBx9R7BrQA7DHpVtQUm12XXGi4JQPpVzFY3rY6pkkbWhccFxhj7zLwLmfEMZ3LxpxE8/A=="}],"memo":""},"blockNum":"145035"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1xa8zkkw5zyjpyyez4kqzsvr3jc0euj2qceuzlg","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"o8i5CvslYiZjiNm4DgYay5mcT6qoO/jxzhtA57L+A/cEMolC1baUekJNQLQJjeajOX5bTlTW2ihxFcqpS/JKcA=="}],"memo":""},"blockNum":"145039"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1t8m707dhgkq7ne2ztm8punkdpjykwdf02qwlft","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"VYsrkH33uo5quionFteUAKidWBK0rCieybqBKfWMrC8w6t2ZOJvpSTpxQarGJGD40mTidsAT5z0jTZMBaIviqg=="}],"memo":""},"blockNum":"145044"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1qvjva3xrztvqe693ertmmjzc0ezczd8xnf6cxq","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"FrLaNppXT2wen98ozdnfYc6yr1/vw5iSbILmoWyS0f0UXcl4EGsL+nU8NA8c3ZNJpl6+/0TMXS0mR2Vb6YgQ2Q=="}],"memo":""},"blockNum":"145048"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1hqdyglz3k3a8h4kg8whrrp0cajfkz0w3xctckp","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"jFPbkrYIyFT1TCIVVbcR8LVP06Km8oveMYEr3pzVg+Fm5ZXwUM/F/XIq6aZduy6ofAJMe2oS4cC+II4JBnp6bg=="}],"memo":""},"blockNum":"145052"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1p7sa56jhwl62ekdxhp0plfyx53p52atcycpnkf","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"wn4Zqsh4GdwqXdbphHKaruHbmjXtF1PVR852oA2MV8Q61+VGw5Dg1XwtTpU1Nrs+kVpgcRD2ku4pmavCd3URjg=="}],"memo":""},"blockNum":"145057"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g12hlmwzuqmtqcc2us6xmmt9ta7qn9cm7x52uthn","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"jmZbnYiPLKB4DBMDki3mC6BBOGAxIDk9R3SCAYnuK18PulgcqNPoOr13TP4KvdO/yU+FpRne/MsbtVnfyy88Kg=="}],"memo":""},"blockNum":"145062"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1yynz8tgayxsgltkygmuqmjs46nta3yp2u5zgcv","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"TBEjJqT7EMY/7dvNvw0/yADSkiRyyH7M42INzQvqaCUgmmH/4870GAFDJ996iIhY508vfYdnCRtzC62tOSZRlQ=="}],"memo":""},"blockNum":"145067"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g15lqav53n4889wnj3xcuz9kchw8j9fdp6hsnly4","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"atkFoaf9WPEALL/4H00JIGAf27CODGHL1QmiQYa4Hs1s91qbjiJIgH3TzTbzI7dea7OH0e0Fy8hnFOdp411xhw=="}],"memo":""},"blockNum":"145072"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1wmzr545f68c5ujpeggy5kmknphz4mz6yshgr53","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"u2oNShLcD7vPFOOBGoVy4+1DhdR70EZU4VCmCRLJigZ90JEL6MNY97OXwy0MwKk1QmLmeSKGrSWFBuYV+glx+w=="}],"memo":""},"blockNum":"145076"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1dlx0rx60qqrf0mz6rv0vw6sc3vn293k0vv0wn4","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"LcAO/3O/Ux7m+veDsA70holhqOI/pmbe5N/BzmM3XpNEzvCUb4pFxruyfEtukZo98vnvZuCYEU/EZ0onfaG7Bw=="}],"memo":""},"blockNum":"145080"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g14zg05f2t88z38xqg9hhahe4sx6ux62kkx63tvq","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"L11KL955mhZda/H+J2iyVUYLvO29Uu8fzTnFanTiSelMPVjXPSUcPJ+YpVJC962mV7eUIUyGAgPMgcFe8Y+LwA=="}],"memo":""},"blockNum":"145085"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g15jyc2a50yhs9hs5tyydh0x64tanu5vst38dw7k","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"dR6dAMOQfiTlaZQutE2VMV/Y0xtv4udalBntYRFsZzdre5bijNq/AHokyxFB2QUn7pRAtkSrFHMplOVfWNoUBg=="}],"memo":""},"blockNum":"145089"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10vnj0fg7hnm0cuep3evmxcunzlex4rzhaa50kc","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"UwJuOtmW18v1UlJ2gnIzXLxsxzgeLjz7R1oOY5Y87apevwlmBvHPJn5oI88YNIZAiFigMflaAyrgw5/uLNbG8A=="}],"memo":""},"blockNum":"145097"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1nv45wd9xp43c0pynfjuefcm6u8kghd6wqlvay5","amount":"5000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"1jpuc59I+NPrFNj7fmlZEYyzxQxF6Q5HT77Co2sXPyEy5iBVwYH7eCOitE+PHzrndstkLIoKVygSSU5zEfXyaQ=="}],"memo":""},"blockNum":"145101"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10h5pxwttqz37e3wepj8vnq3a48eqcg0td78uxm","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"1DPlEk7wH4R9dqmQQIIzYKfjh+INkRT+wcarTifsCfRG1PvDoafIdCr6lmCTgPBHgrC35+eQ2dWN8cxMZ0Ad7A=="}],"memo":""},"blockNum":"145105"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g15jjzjkkf7lhr65xkrvwt9ug87hjp6ntmr0gajw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"I/4Ap29pwNVWioaHRndYMaxFSBvVoa4InT1WN0WcBjVZc61gRhpe7W8Kvf9oSciz2j1dfabFydvfn5rUfCbP7Q=="}],"memo":""},"blockNum":"145110"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1jewz4ttntshqch4yal49vvpx9t467x54wltf33","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"AkUz92PxoY+oq0xuH33hNhx+W2lMf5sCY7+/Ec8lY55ICxj9RlVoJ1+qQjPPFtw+gTPrS40IxKTXfsjJBJH/Gw=="}],"memo":""},"blockNum":"145115"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ee4al7ezmr3wrw9jys69quqt3ch92x2zs2h8cx","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"eUlNnCtaVz3ONdk9wCCBVSXXr9/1BrSWYlWLT0qjb+IXwbVi6Ukglu9+2fwScvCKOv2NNFWUURE7wv1zOJpChA=="}],"memo":""},"blockNum":"145120"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1kj4jc4s043ql8mvyajk3e07ap5fvfsgq7a0mgf","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"z3a2aI+Yt6PjCbG0IsHPMxdXov5WaPXsBX6cqOdgbflCSpEM88NfNkgfY7gL/hMllDlRswa4N+6ndlH25Efd9A=="}],"memo":""},"blockNum":"145124"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1k3lxluu0c0xh50gl42u24gw3he2p574npe8n3v","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"SxZpecu5OGxjRiEpcCuBWta0XlW/iHlcW3zaY9LMbd1B7POUT1QSX4aJEThxIjlmHkjZgoxZm8mqgFo1nULjQA=="}],"memo":""},"blockNum":"145129"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g139qdku99vx5lh7tq8j4e72uhrfa203p554jqx0","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"4xnRh+XPaZP8tyZmlOspCRi1AvD9lFW2fYpu2ZdTeSo2B5fZmrScZS14Njylb7U6mTQ1YCUDYNwnZ5EIDD3DKw=="}],"memo":""},"blockNum":"145134"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g13v3tkx2vwmlwvf08e95ftttl6rhr7xzhnzdk2u","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"pnFMg67xJt+SOPNrNWqvlYhlBvBzFKAI8/rwM8YOxW1NdqZiflMthFMnpEpEMZzPxK1JANf6GDxLLgF0fvufPg=="}],"memo":""},"blockNum":"145139"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g152ctt882k0sh65yv2x798jg3ze34qgykvjefps","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"JjZccX74cHPmYHyk5ZZTwK348bTQ6qB7qweFQ9WvqK5FIA62caqrxjHtTntxe629KAQIwWAukgNEpDVN+dYegw=="}],"memo":""},"blockNum":"145144"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1qznctqu0pz9qtpjhwyq8ar4adm6shzjsql23p9","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"l1dSfRtXyLxxLiMXOzMDEcdiVvhMyML6IUAqLXTB+Bwr0iIgm+UgXoRr1jVjcXBT3R2uNavVL3izdOEZKAB7iw=="}],"memo":""},"blockNum":"145148"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1wqh5axf8prl99yzufe0n75zm9rdqfkafmz32c9","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"FQcS8Pxx644VQ/vDC+xY1OUKugJYvxcsoj4tCzg+G+IJnCT7frOC/iZDlsgYIU2TLnyEwl/4mqB6tHhxw8ljjg=="}],"memo":""},"blockNum":"145153"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1v74r4ttspawmqgzmfd7rjp50zypnnz8d0lqz3t","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"oJrODoP4+X4UPkWrrL8Wr3/2Pdu2nrtpy1PvN8QYh+JVrPBWcUjWOAgJ5MyAgBkqdrFzl1bvb5HrWOgpV7E6dA=="}],"memo":""},"blockNum":"145158"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g19tjgs5q66e583asy780az0xxdll5mm8r9z6hdu","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"OLSfJseTyle/o3R2zVNv+oYd3W3hrgDJ5/m1hLZQ6bRqBJFHJZXc8xxRmiS9yPYpLergZawqbCTQ0RdPq+6Abw=="}],"memo":""},"blockNum":"145163"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1vd8mc0se2575tnv2m8t9qydhfrp84mjcmkq2sp","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"tW0o3VxQ0elqipurXk2aNB135a1BH0/8jUcYKxqmKC0ivet1ecj198hyN5+Sh0lchUOATU8HhnF1PnA0+PZK5g=="}],"memo":""},"blockNum":"145168"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10vp6c99y0q47q7z66474jsn2a3umr26n0avl6m","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"+R9qSATesOpQLxywRgVr8fHos5eN19iD4JC1vtWHD1habLVu54p8VkLLTo5+KziX3H17oRc3IDydeMdUUAGT/A=="}],"memo":""},"blockNum":"145173"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ugfsv0df6xh9mtfdq4a62h7neepwmdwxfrpx3f","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"uYw3ncgFfbAPrlu4qQodITJlhmiDdQmOuacRUM3Wtf8fRGEmJeH8bCIOhq24ujwSrLakkUUHnKKJ2K+6IQaUlQ=="}],"memo":""},"blockNum":"145178"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1g5uj05uxhsvftpl5vhrd4z7mxfmg44dam3d5wv","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ea77qta2DynPKHmNHKhwi2jKajp/e9oLxl4DY0kXOhB4e5SMsnNNTOiCQPyqdnd/DlPo4QmepLWXHuwzeple1Q=="}],"memo":""},"blockNum":"145183"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ajnkw0w0z7kzlvp4wah65e2jsrpsartpgqtr26","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"m7kutSeBs8QCyl9mgAwJ5mRzuDZPDK/6RFcB4nriA1tkw7kmQj/ibcF5FG2kGVs4phO4rIuzLumkG8vwrHC3bQ=="}],"memo":""},"blockNum":"145188"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1kjzjzjxdg54946g0gq2s4warmkkc70vdmy2hwn","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"oZisCQNvZFetZxP6bF+wBsgUvnx7Uu+MCrNATn95dh8kGNaY4eMUt7skIKBQFZ4ZFyU9cCl6rnkNXska+Fr02Q=="}],"memo":""},"blockNum":"145194"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g13zv4dwmketw93tjz4hnglgq96xpayc6xm8hsle","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"YIECFQfThKzloVCbUcOSPl4bzdZ9h0s2xH1yeqo0AgFvmdK6JKyg7U7jYAia/Wu3vV4pzLH8FkD5xqVB/cdV4g=="}],"memo":""},"blockNum":"145199"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1dam32w7kuhkfctkktdg8wvmlkswatfkjlzqw3v","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"2Dr64ENnGaJ1CqdAw/mGhzBfExsxZW7hROvc0pdHiiF3SUBx0KCdMZ41Nvk/KruC3hf1GLa1ChWGzLh+ig5a6A=="}],"memo":""},"blockNum":"145204"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g187x485dclj94aq5fhvd630th72c96zq66ae5e0","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"fCLWktYEyU6MFjEzv4MaDjnYM6xSrVcqdjmQvgeGnnMRDW1M2qxMsAoyZz6kR6Kd2iPzI7kPfRaJVcM7hSQvYw=="}],"memo":""},"blockNum":"145209"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1rm80fr9ud8d2js0wfhtfrlxt5a0pqk2vm2gmck","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"z9Q79x4wHlc3DNpj6S/w6gLhByC/+VnOdOR9Zp2OU/gCHrYK07XFGz1C6CxNapScioEXvsdb/vCNWl047aeO8Q=="}],"memo":""},"blockNum":"145213"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1rgtfvs6encuw86qxwuhz74z2w5xre8g3dvhpt5","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"hv7SDH+hE6GEMlBmwl9bPDYQdFR28gtPHAmi7lFFvzNzQ/2K4I6Ty1aRu1GI/h5+6OTc/I9fHAZEtM1DgysVlg=="}],"memo":""},"blockNum":"145218"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1qjjff5cjpv3ygv4qxgwr8e775c4y6xynee9477","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"RF75DHTeIo+xoS8sQloqWUfJxrYhZZV68ZeABzAlyh8tc6QOdPFpoNLtS6cpkC/w5xdllMJtddB3JSonBJfF1A=="}],"memo":""},"blockNum":"145222"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1xrm87ztpe3cqyr3ghevdgsmavg2avhgnzj5uqs","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Yoqe3Anp/f+2UD6HLyFkzTLtAxLms8vlDrvrGfmFj2c/YVs9CZcfrIsmgAe6Nh3/4oWtNThL3zh1sjasLLLscw=="}],"memo":""},"blockNum":"145227"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1sg8hwaugnd00n9h6ccwpyazs5n5tsdnsgx8r5n","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"DMljh9XarIwisd5jklM5zxn25wahCywGIFnjDBNtHR1Oui4DuOBBxNKVWTedDA9v/iekUstj7T1g5fPWmzKmTg=="}],"memo":""},"blockNum":"145231"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1zxzuwyqhwq4xf4v0vywsqfgfp4pvre8v9lgnks","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"iLFnzy4yWPJvhVqz6ed9HKmfxVg8ZriwVuQ4bGOQw0JotaZkcvItNcjR+iY35+1VKYLJ43Ghr8A3ZpJw9yzNhA=="}],"memo":""},"blockNum":"145235"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10vp5hza8m0m43qzw5la2cqv33h5w09fdjrfjh4","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"SuyiZGy31VZc/0gnMP1FJpoqkAC7Jq7EXWD2bhDNxmxPSUl3IQRYsHUFMdSwSHpeT/itK016oz6SsfwnAt7ghw=="}],"memo":""},"blockNum":"145239"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1eu8xlv9skuezu9ppp7j7y6jetw5f8u4kw7csne","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"cdlYbBMoQXqVM/vZzF5Myh9IHSjhB0vjJhsWesp2EwsASt46p0wY5pRJDuoxIh3jtBWPDKXpuyK7FB+uo1YgrA=="}],"memo":""},"blockNum":"145244"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g12ev7xkxfj5w0z0annd67f2egj83ue4afw0ud7y","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"IhHfzfQX8DGuorK1kW1A1SyXuOlChvCwHoAeA1Rq5mFHinm0dCU/mpWuVUM2Kyb34LBYE9xnp5aOvgt2F6u9JA=="}],"memo":""},"blockNum":"145248"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1eljr0u9hzcq8jrr8xsqz736prjw83u343ajy89","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"BYWVjgJpV1R8a3+g7vhhuk4e7wjJpgTBTfI+oOKWlKxTDz0kk+Q/G/LnRJCIGJRCyi9Qaw7jY8monJ3IR3swfw=="}],"memo":""},"blockNum":"145252"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g162nsl2wn9g2uzz2teg0yuxts4637x54az7kv2x","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"LqBtCSeLiG01iH14pU1bLZiklKnGxebcGKxokl0q4xd+12MBe0oPvoy76mDqeIjzffCOXw/aTtiSUC6rXbVPIQ=="}],"memo":""},"blockNum":"145256"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1cd0s66sqe8cll0hdkv0q64dd0f8u8pp4lf2dql","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"KRgTSwenIgya+1T6fKgMK4B0lxuMPt0305F4rw2t1CJNg8rsGPavb6bzz0zsCsVljHezN90ZyVT2548UdIg4tw=="}],"memo":""},"blockNum":"145260"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1avv5jjmmxkzy80sgktfwzdt3vm50l6gx86y0uv","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ullHKEcNfG8TAeEhZW97b0z2aKWuLIDrnWIV2ss17p4eLu8+OnJ+rBTO3E5rtjZKr3a7l44etjRyfT/H9ErO+A=="}],"memo":""},"blockNum":"145272"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1swnuam9u5m5yhpvs650aa23q75kuf98lsjsczw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"5NI7Zp8IYEW5rs4Y/Pfj075i7Z1hKrf2Oa7215byx8oaJbe8c/KAdM3qJD0xyA5/FAVFrDn8cSdVvqkAp1CxSQ=="}],"memo":""},"blockNum":"145276"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g174l2sy5n4surj4j07c7uycghyqhkwwl44pkulf","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"AAn9IHddFbe+1qFyb+SiyO1J/NES4L/nQG7CJjX/reR6uhc+KKgtl9b+goOW+JS3rqQku1bvTKr1n9fRILumFw=="}],"memo":""},"blockNum":"145281"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1q77u35mws5ed2v43z8h9hn4pyt9xl0v0fzutgp","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"DKygdmiN+H8blm85flfrckG3tB8AJhMnOHzKh/IrABpKjbfQFpDHFClYuSvtHOYYauETMiHYPlvBJPMVLHfyRw=="}],"memo":""},"blockNum":"145286"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g12mu7amrrg2etqykjgcfysq3nwea69y2ka29jvp","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"HxuQpkhBMNCWXj7lcAdEcMaGXoeDt26eDBUX8hZfHvZqSdLhSwAgcszjfFZx0N46PbG6MiBLDjePy6BCJ91ZxA=="}],"memo":""},"blockNum":"145292"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g19p37ryxhlc8ghs5lwqck962sqr4udlzc4qfxnc","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"YrWYyhfDBei4e8vHbz755hEw1NFO2poN5QwpHIHw9YNRPTAkTq06Wzit0MAASVdZROh4Uxh7VX1Iu/l8Fl1pRw=="}],"memo":""},"blockNum":"145296"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10c7jes46egrtrjyu82ut7nhfkkuj74sdp2t2nh","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"jPOOY6YYnKJF5RBiwU7koKAgVqIXnPcoXwGI+3aEk2UD306+YPJKA708YjBW/wRzsGTAV9TzKotkJCVTretxAQ=="}],"memo":""},"blockNum":"145301"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18nz8k490fet7enlajqxswfz05l3qymfrkn4f4e","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"VpDKHAgAIwXdAHE+vFJFSIesiMsH+MP7ZcNB1TiisWxR/PkWHkxCG4vxYqteXOocdmtVUjCBzwqo/i6qmmHCFA=="}],"memo":""},"blockNum":"145305"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10yv2nekwfqgvr5j5kxx5r6nd3fqq9ckyjzts7w","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"/3sptOevpLjJJ3LqW0vdwO3a6qb97r+r5QpG7izJOq859miBJGLTDtpG1dvIdsOoC8nRr2o92adoEl3oPPklZQ=="}],"memo":""},"blockNum":"145309"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18ljuz6wn42nu8teffpl7vm3carsahlahnn082z","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"lgA8Gbd2UrRjEc6yLJS83cVX1MEqnAor8clTKM7a3ERIz9SvA3q6cQZrOCtulfwbvXVse9An+X7yudqV5nE4yw=="}],"memo":""},"blockNum":"145314"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1590lawc8pdvre34k6umnllfat32j742ndraxkg","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"IywY3ucrQRYW6upEx6i+wSa+wNFT0xS4Xciq87paiUkPOo1KUARb044iYyp/6XEvhUiNZ7Gs3O+aNUpKSOGNYA=="}],"memo":""},"blockNum":"145318"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1pdx0596aeda86gmrp2p438j9kudmlvrj5y3ul6","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"CFLvz2EV4GvIlxdzLA7HJlrSJy5gLu4v5iI2zT+3kjNWzCIY7wfXzbbsVWYYG8hHkzShlA7H38AkZ8VbYVDo+A=="}],"memo":""},"blockNum":"145322"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1e6a5hlecc390c93pg757s3g72x8dqdkrqm2jcx","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"CRsJmpNENPdvLYd5O9GxLl2xXFL1MCJEC7x1NOcEZm53KdYe2YjeDpOxiPRlaqHugw927XlXaYyItknNvGcOMA=="}],"memo":""},"blockNum":"145327"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1mguja7tlg9ervgx66c39xuudkk2xvtevms3kz7","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"h8hYOPxQQm2b/2PyMGOyXKBYjWRxS6zJ1MbD2Fn+gYctzmZintqADO+5iVKw+Mpj1OM5FmPNxsqnNMkOJSSang=="}],"memo":""},"blockNum":"145331"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1x05vjl2s65y6qt6u77nf73m6rdm0le03egj0ep","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"c5v3h/+mFpYVCAgHSdlyO8gR4QtP7VTiHsPxkvqA7Uhi5ledQ+qswTaxS3d7YhDjrv0LAoeQzmbRQ468DIpadw=="}],"memo":""},"blockNum":"145336"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1k9cad32m0psxemktqv28zg4ehslu9gcu7s3uvj","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"DLgWDTYuyim4rQ4u6GcpDDJqglnF8bAqkUKULD3U8hd0/GwFiqNjW4s1wWX2hLmwrqcpBzAkqbmdC76KLaXTSQ=="}],"memo":""},"blockNum":"145340"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1duee2nw5dqzj8ausjca4n6e7h7tey6shvpytme","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"KZPnmoc6U11CjepfB198TmvPpjLodw9y7rTYOG3DbwglK2DZkNFMwacTRC3V2tkXPHM6Oo+Fgi9SnytT4rRdkQ=="}],"memo":""},"blockNum":"145344"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g16dnjmq847yf35y5zkv7flqmxeysxqg0scz0alk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"91dA7IaZGe7foQzT0trr0Y4m6G9SLWqwZhY8HPlhYkAuVawxRpEpthN2FYcRYar2Y1CBrDOlDK21RGxdVs3aLQ=="}],"memo":""},"blockNum":"145349"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g164jhf33ljcec7vuw374s9fjfydqdxvu9luahwx","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Y8JNzKidPgT0k+Y7USnlK559Ci50NnljNMIvlMiwEllxTxWKJhL0PkcaQXbhL5pMObtGUVhsmCtpD0sj+F/OqA=="}],"memo":""},"blockNum":"145354"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1e0q89fuz897ymd42zayxuvt0v4pw9t0d6nscx4","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Hd+4SUYa8izQKI3ynoXaY5Kq92AdTOPa+uJ+efqzypZDXcrgUjkfAcB9YZcAyAXGedFql+2p+PJFp5LIclNO2Q=="}],"memo":""},"blockNum":"145359"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1njnnct7k209wjzd9ytpjfm36rna59ekk80upww","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ogqYCjEBPcY2abqndzUIQPMiwwcDkGhw5WD0RveLp5cechvKB+5l5f6d0YUDs02eqvF6rHUjqJiZhavNSunwHA=="}],"memo":""},"blockNum":"145363"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g12xstl4985lehg25mmj564072npdw3d24scqe8y","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"uNYxBbDqDz6AuXGBt/O8DG84ulxaYaOWqKbI6OVrjyUzpDE6agtv+aOLa9eibaDPIt3Ddk8ntM00kZcOPJn8rw=="}],"memo":""},"blockNum":"145367"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1pmc54ftuyrz46nqc6vylckqfvxxhemadlklyqu","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Ake74opeOVGoIriKM1cbek3boShM+N9+LSDUAxF/7HRLdSfnanwjgFdsP94dNTGGH2eNSo+jA3P1JnnRCFNZxw=="}],"memo":""},"blockNum":"145379"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1s6xztj0mnpre0ex4dlq896cjvdgeav3h74lcq9","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"NXNYiu5WX5k+5YMnEaQxydKnOiLAyw/n08bMMgHm1WNaV1WTBYmMZusajRM+AfSsjyEvQ6EfSGIpqaLYHmwG0g=="}],"memo":""},"blockNum":"145383"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ccqwauqcwfzhv0w5g0kv8rqtujn4zzy033qafz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"TF/HyN/5ggZ5QmIGENmevbCv6vi4U9w8+KDYaQEMUmQ2TcIR3PRX/c2WLPHBU8cZp+4hHoOFWnJY9ZzVq0A7rA=="}],"memo":""},"blockNum":"145388"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1avc7x3g5psr3gnepdhyglugdvpjhm2evx6x983","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Ql1lYYbZa7pHtMvYZbXw+Niox2J1tvavsqck3Efmz+YH9m6DXXYUYlBa6DG6/0KgbYjYq7poTmMTXHpTJ5Hqrg=="}],"memo":""},"blockNum":"145393"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g15gfxz0luynjfg26wccxey0dnnm484hr9jja4gz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"SAC4li0IqFrqWQBXpV0zmT2Urs6bdz9NZmXsBCcOsKoIjM7MtwOWyHBNVZ8HubKX7tKoj2i8p9L/MUyb+6sQ8Q=="}],"memo":""},"blockNum":"145397"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1el3uundktlksvx02lv34lnxpxnt2k5nkz3f83m","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"3Ry8gICli0Hf85LMjqXwlL4uiJYE7nlZUlG4/poWkZ8dNZJOMximkvUXZzqLdarwOW5bMV7isSHcHqOLXQhR5Q=="}],"memo":""},"blockNum":"145402"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1xrgenpxr52n2paq4fk99ggsv8jfjrhyfgmcn2r","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"0oRJhRyjWsPHaAz7fhyIvz2XNmDhBOqZuDHgAxkkGghkLKJwljfy+37PZo5ubahTcA3wnPREVMaBux9Utxy3Yg=="}],"memo":""},"blockNum":"145407"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1lxy5txzweq6yrct0qm73s38lhn5ke0wca3tghs","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"jq9ot2sd8ku1WeyQoIZs66kmoiKCL7L6ClFUVvohtMNyQggeW0shEwFJNCi65Kn8lEQrJgICfBrMZbacvPaL0w=="}],"memo":""},"blockNum":"145411"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g12mhg725qmxf5zmlxtch7mj70q2kamfysyg253u","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"MUx3EuGhTKYC4cQYFydNWAVC52kTKbuDBOkVmpumXVo9z6/KueNDV4aGvcJYSDW9bdAt0e/ZElsgjn4lYo92Jg=="}],"memo":""},"blockNum":"145416"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1gr4q3xghx3k8rf86adnpv0rzzzccdlp0w99cue","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ru/tUSJANyC7wn89K1RVK1f6YF3pMYW73O8eELlqHu9cr/m2dzWsJ4v0bOZssHpiCeVqYGvp9OjTPTzXVjb2Og=="}],"memo":""},"blockNum":"145420"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ktn393csdk6en6suv83jcy29h39p5qeny3f9kt","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"r3BDVXE0zxdy8T24QLuXr+AFrh7EaVuljLDLsot3xAgJkgUGpCTj/HV5SKCKOXi5nS7BksGa6So9s4MaeLAAtQ=="}],"memo":""},"blockNum":"145456"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g19zrae6lgkpwfm28kewm8vqm7quz7vc2u345chv","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"4c41YkBS2OhUQqMifX6EpSbuKrrba5jL7JUQwQcg5wROHkDue3AtAvMlhCab+hQ3EOKkd/R3rPIJETAswhs7Uw=="}],"memo":""},"blockNum":"145461"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1dz8c6w9tx7nn58elhqljwm3m7smlutkt6e7h53","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"r8sKeFtAsy8k4R8QZUYzGvsT+cj90JpxKiwNMErrsogZ0+7WCrivOYfaAdX3SzjSQAtetOe6DWIS2NPAqvtUSQ=="}],"memo":""},"blockNum":"145466"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1uyufvpdfxpd5z64c69a000u4x9zhynkdwwxnhy","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ShUXGIPLdWoobWDj62BOEXlWVdP6rHaU34r6uEtQ4ZxVwbI7917YBbEpL0jervk0AA/BqYAEwSnFB6mg1kyQuA=="}],"memo":""},"blockNum":"145471"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1unl8pg5vj0nam0r4mdsmzcm0k356583gta35gl","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"rf4zo6tm2jIoA37in6xrXsJgPooUz7FIVOZvy0qEvHEI3061AGAOhdkp47KsZXPpVn5Ti1hyDRQjodBkFSb9IA=="}],"memo":""},"blockNum":"145488"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g149ra62anq4keg94yxg23da5t8w9vajc5p092rt","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"YuXutYg/7mVdZBNXkUUPZQOxWZQFUBAJ9ord68cxFvQPhoyi1igtcb0B7WPFc5xvs1ScpxS44SuZGxqfb276HA=="}],"memo":""},"blockNum":"145493"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ysk55cdun4rqaxxml27qjl40d47ectakj62245","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"UzYhQgM3ds2EK8vm4J4i8oQQmGcbDVp+OKoiLat4ZZ8iVkLpJQg7mRHNUIrqyLzI226uOCRQiVFmFiiYHNVlzg=="}],"memo":""},"blockNum":"145497"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ukugnnfvc0aqjdapyyyc2625gkufearnvvx4ep","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"bG21cshnBtyoys1rnVqQzxh25q/YVrcJ8JwkPS3hCHUsPKve9N09z8pKjP2u2m5Jb+D7NMbeACHEUoB4DhOqiQ=="}],"memo":""},"blockNum":"145501"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1jfavcn97fj3ljrjdnunp943f4kydxft3yzx90h","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"NjZ2JSUA03RpcYonUmbFIy88A+mTu6HWYlrydc0EWjEj0Yc+W7mpE+1KgX65wjSyLdTsn8yliTF+FEpvCrXZ/A=="}],"memo":""},"blockNum":"145506"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g12vsf476em9ssg5ep8drv9chhtreq8a5a6tdnte","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"dLm5wp/OTCikV4CARlcIFn05hvjvCSEG+N3QPF+B38IXKJ9mr9ali+Ef5dZ2KhAJPs+Y7jFGeIzDiqL5SvZmHQ=="}],"memo":""},"blockNum":"145511"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1zqjh4c58g7vetk45f2mdav2cjumq6wdn30trau","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"jYpVi93YQKCVa4ZLdagNmlZdHPK8X8HLgWqkd4BhgP1743GcAejht75bxhEMFT23CYrifH1+PcTKl//wAk1WOQ=="}],"memo":""},"blockNum":"145516"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g13fd4e62t9z3p756cmndhe5fznmk2vuz9yaplwd","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Oi8bk+5vIWwihn9/enU61ZDxtcRJ05+OKcosR20jPxovx75UuAnBaYm1dMhSRYab4N3bZlfmx7fJ2i8oMh1m0A=="}],"memo":""},"blockNum":"145520"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g14dl2k07v4dmur4juqruh5n38vet7j8gkjm38ae","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"gLQWRfqAifhA5puKFRCVNgnIwPpH/am+ya8ickDGrswmaQIwhVL2K+vQAWkNV3tF9nFr4lCmnIbcfrs22dc/Gg=="}],"memo":""},"blockNum":"145525"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1yta6xhtttqma8032xpu36myzj7rvg9vt2eemqx","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"+8m7fmO+6kEaTZrcQo95zU1HatUjAsfE74rNHRwbSM1k+GCCywnF7ezqC+7y6pxMTFaoRwuO4yJOD9YREA6/tQ=="}],"memo":""},"blockNum":"145530"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1n7ff7ye7kyy24wuer2gckdplrxengvnv9rvsj3","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"BIVzF317OcRwo7QIw/B0NDiqPFqaA1Kio9Jjs9/4vckoyXXFCULHBuSqd7qfQjdudTVjxldGJ1I5/9Zkx7A6IQ=="}],"memo":""},"blockNum":"145534"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1lmmf24jvxlr3jrdvtnp3szpus297vjfytk0n6t","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"DorDHHJBG9PNDcDkfceZN18GLmBxMRCjoAYyPrD/fnJEW2m6F6Sgx1vS31CJXqqASczl0wfdrvpbbWINfta/Jg=="}],"memo":""},"blockNum":"145539"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g14wp0pjagehhkudh3k3a6wzw7qpj7cma9kfl9tn","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"HgXDbGm3qejdPCeLOJ8mtWpW8RqQzuiFwFdCPC04fZMGoz+91SCXzZaUzyqj3B40Ywt3DHBdX+nBUWh92qajcQ=="}],"memo":""},"blockNum":"145555"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1l2ydgy9yupdje269cnzqrm5gupdfhqpqhc0s24","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"jfriUYTZRGcUucZIDLH+3pqyaPLM6Wb0FHX1rHXzrq10lQQqT1NMQZLcrXgwkinVuTYNuZOKeL6J8mTClGIJ6w=="}],"memo":""},"blockNum":"145560"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1j0m53jkc3x9qd8v85q5tn5vcntywetmydk93ww","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"fjAgXk+ChSkHgloGGkqyyzb2zPp25nn5sSfmuRlBZ5pRZIxrb2EpjXOWC5slpppk6HxETnMOQ3hfSaXDyaedfw=="}],"memo":""},"blockNum":"145565"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g16hyuw7yug8w7twrv0y3vn3my0fq2nvg5vqqyzg","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Zt/9syR8MfcNOXaJkEgE4L3lR6R/IkE+bfDm4UkpZ6k08ZMto7N0Q+V7xtQT5ezN2wzM5bohsAw0ahlTe4+3RA=="}],"memo":""},"blockNum":"145570"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1dnpqg00zme7sv2gttyfjndl0s00mrwwrw6pz72","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"pp3Kb2bnkILgpgzESsU9XOYptKK5JyoNL61G/19lpX8gnEryWd0Q+CBlwVs5Re1M6uDwHhtxUknm4uEhNZl51Q=="}],"memo":""},"blockNum":"145575"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1gmhjqv7p5l4r3acl2wfg35m5lvy3xzm7cw8uyg","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"j4ycFVkOirW5VqKVXpYlLR0+30znKHC9fbVid3y7+l89PaYtyTabt7oznicoV7eSa0EAwBbwFdeNzmuyRxPfuw=="}],"memo":""},"blockNum":"145579"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1xvdp7kxxc538ls3w2qdvf6cvh4dk2yjhdcjwff","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"cvvTLBIFwq1c583zlnM1p8i5mxO6PZnjcO6TaFwdMa9IyhRNYEXWxtHOKOtIEAtAiFOKa2BSELXRs3+hz2246A=="}],"memo":""},"blockNum":"145583"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g14e0ew6m99kzfmk2jd0xugw5vhy8war6wgrnnfw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"o4Nspk1yCYEATh5KrcyCeQcmbz3eYqegPk9ViSvn6U9vO1DAARrLuJVNXyiPMgXPbTvWXHChlP680nNPYe4pfw=="}],"memo":""},"blockNum":"145587"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10uwvw88r5a7nrye7d5dkq5cxwdntwf9vn5hhnd","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ylCl+nxMlThd+Po9L/x1oKWAY6SILkxjRisyVYMDn1QmUFFihnR571CohbQSmC+3qwtJSHviTlfIycoBkRDDsA=="}],"memo":""},"blockNum":"145591"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1z7zaumdzpztwsengg6qf53y49amlgkzjthtkqd","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"9car5BbuiVcJbKn+0tOHDpMk2v7rzccBM6cgzl2FKgZnVkiTktDT4ueuVsKLTOW85sQVE0oVAKwfpI7ej36Trw=="}],"memo":""},"blockNum":"145595"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1elnffx23g96ecprvazm0kmjxs9mr09k4mg0khj","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"pKhml+ohw40aZcycWyPXM2AYB1kSWLP22Yq4qG4edmxxkYGevL/WyR6Tu3hD+EQxjYa/kq3xKaOnEo7MqjEBgg=="}],"memo":""},"blockNum":"145600"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1wtftucv0add3m2mgqpm2cjp4s9caqssez6w54a","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"vA3W/LFuwVL1UlZ271tJJv7CHHgcHZj93fOv4npqaA9VZLgSOdnJ8MKT/bGtSXzRjwDRikaiB5DmJVB3JKF8WA=="}],"memo":""},"blockNum":"145604"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g194lm06h0w9xq5w5q3z5nm5f5qp0euqr8z2wg9c","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"bJ1iMgElmJUJ4mZgy3PW5hq/mqBgJvza5MmuPg6wpZ5kjsbqmS/OfJFf7WGjQug8K2BHa4B/LbIIfw9dk3Y31A=="}],"memo":""},"blockNum":"145609"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1edxyznkaf9s0hrz2q32amqq6avlk2lt227tnrw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ovtx8jwMOvrdgvP0x4twtMzySWdXMV6WvmY6x+zh9itxAjaqbrtYH9cvv9qA4d4MLI+eaGX+nXVK0C1/YfQV7w=="}],"memo":""},"blockNum":"145614"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1szstmak7r5auq4pj3d3y280a9w3gg3ztaz4ks2","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"H84NC4H9kJJOrkygp4WhKd52BUS0URM7bf8BUA+gmFUyBEOEyJSr+WYDk2EQAWWh1eisRcow62r1jr2Ac+vaqQ=="}],"memo":""},"blockNum":"145618"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1c4vw369gqrqkdmzlxj02zyqv753fnf9qm6spyt","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"U8M384ll/FF+IHrcMFrEyWvbviLwNJEfss3EQXo8eOlpRzgNVHspH/BDy7UpTVE1OhCkvBHSaxgLtV/9QFdM9w=="}],"memo":""},"blockNum":"145622"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g12vsm3kfpy45eht58f7u57t6rymvjrcy39jzkkf","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"opInknEi65wV+XchRo2YbhvnIv2U7+y/s82/mP+tdYBb+h+hGAzrFzLV78UwSs53HBPQfRK6yz0V5QVpRtiQng=="}],"memo":""},"blockNum":"145626"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1jjpr4zlcu8qwwnnpen33vu4y7g9y92e2a0464v","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"tpMUmUInRE3NEyfUd7kOFR+lQvFp6gwyroD2tlm/11hZWNG/AMInFFFmQSptCf65LoZjCrw/d5FWO8yA3I24hQ=="}],"memo":""},"blockNum":"145631"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1p3fc43tdxqf5p34ex6dr3v8vytjwje67wdypvx","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"/ABxdCseAIUV5F4c6Yny/OkTfxXwDqoGOAx2ICC33+0IU7DKeJVCy6JRr737XCriOP7S50zs1WHdLIGDwIWxmw=="}],"memo":""},"blockNum":"145635"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1gkq5q7ym6z0wsw6zyjwp63wm9y0gam5yracaac","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"elAuCNbct9qaJ44VSLMVL+5YQkNaOurs8Ehcj2e3VLI/DGYLPDtqw0dzttGP+zMByw/e4JivK4Krc2TcJ8PMrg=="}],"memo":""},"blockNum":"145639"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1zgu0xecmdvzwruj5xrenxhw5uf58snsrmfmmum","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"f/z2OdijnTy+TYs/qqm7wQXn5rolTMKQs/subkXk1WVlCfH9AosRJ8Q8bjA2G3nphxLmV8wqBxrBLqHzdcSB9g=="}],"memo":""},"blockNum":"145644"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g17e4t4rsh8jdep0zajrx9n3k9elwpvzm40590r7","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"iiCY+KSodgmJsa7nUJOmRu6C4sDK43vztlD0aP+85pQ0knfvO293juBt9UgrGwpJma3UVau8Ckta5683oGwc9A=="}],"memo":""},"blockNum":"145649"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1msnpns6jgj9f997s79tfued7x6h4n6pw5sh55v","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"NSPJfU+TXr69JS4GEQmBuaqh5IKDPWrxNbwnfq7FpBspRYbX280nrgxdhFOmHeTbWTaIHqHfWwHLAAXNTLukNQ=="}],"memo":""},"blockNum":"145654"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1lsmcdgpmmaqj8l2ygjqhmwuqt9mayhde89hzaw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"UnjcrXQysFde6OHvLT6+iG7EFWX3X4fDSf7h5YGRg4RwgZdThtw7a37yXqq7K7qS++iNS/BMoL7bkmdIRfsi7w=="}],"memo":""},"blockNum":"145658"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1nhnevzj4ag8fmx7lelsn042sew0ulaskq67jrp","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"dSfE0tNHF5+dqweacB5dg2JRXN6t7MRTN9uzGFrDHVgzt/w+RA5j+8uK7I88m4UKvS8V48MdD1Hj3SsZ10l4XA=="}],"memo":""},"blockNum":"145662"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1e3xtxwlau5vumjh8jmz9wfstz2dk8sa002qmxf","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"pbT6F7VxQ1GVQVTlQH/KJtJFX7pXH28nkMwc5cRdHXIvllnOF2DMMVaPipv+UzYNgBNxhzBOPFLjNAdUoZLGgA=="}],"memo":""},"blockNum":"145667"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1srwegw5l4ytr23wk0zvnhhkf20upq2hq5ze9yc","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"UdSTBtuJ0oW/IsSLzLT8npuXi7pWOEs+sBEl6jRbxcp9/ogRu1bs9lE0IAZdN8kSjyx2ydp/a+a+fGUYJbUgmA=="}],"memo":""},"blockNum":"145671"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1yyjvtnznl58j26ly7f5zs05yplxunm6xpef05l","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"OYd77e6UjRPhw7TSBiuEvKgRWBDidaPoobrnwmXvCEQrqlXx9LqlyMHozNhr4m3YS9pyDpxWxlxH+SBY3Ys9ug=="}],"memo":""},"blockNum":"145676"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1rx3ujz3wha88r7vrjvak2mwr25fsxau0ra3rqh","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"FpbAbf30rdjdbHOdx7KjQygBK4JWDj41JXKz79mVzEEIWUYJoHEshPCCvy7dAkLuNNc/tw07cm+R24EZ7gD6ow=="}],"memo":""},"blockNum":"145681"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1j90s0sg862g2ucuzffufqnadj0unmsmjup0sxc","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"7cZ5Cc8jJWOpUTp4/uEvsZ2cjnk0qZI2MoDhJCDxK+hRXBrKqOhLCsXwBS4xL87c5kUpcReG38/CYwto9cVrug=="}],"memo":""},"blockNum":"145686"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1cr9u5g3q3psxw4dztlc6tas0z7xqyue2wukck4","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"LqkGkS2Yq8+G95GRtgqEd4w8KIfxiwRRrsutxSH693BZnYe33tTOL8zrpZS+r0JDGMczkLX6YsR9oXrGExdskQ=="}],"memo":""},"blockNum":"145690"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1a9d2l6ltnh2g5cerunmma847p3ec2kz6n3g62l","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"JLP3MEVf5FaAd67iibEGSFxsYZWFXGLFHdw85KZ6IgZNA5Ymmc2Y1MVxa4cf9driyg8450Xj24KLYrlTf/+uqQ=="}],"memo":""},"blockNum":"145694"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1gwsq6xqctyz04v7wyqzm79y8ctc9xe009g9t02","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"3qIXwkBj3mXaaisDtm7vnuO2RXkQ2Tk1u2Rkhk3eJGkYgjeE66y+VX5AMhI2IUbeITQ2yLgWFpDw37CBMpkJ0w=="}],"memo":""},"blockNum":"145698"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g14aaw8u6u2sqslsssl7kcht4wng9gxkg29dcpsz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Exh14v98TrU28gyY6R5rT9Te2xbCX3oAq5A5TeUDmVFOkP2KMCrXWjHG2Va6xbM0tz2LWW0osT24fIOXje2hZQ=="}],"memo":""},"blockNum":"145702"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1q2ksgxa5c9c48x4y4xtxp6rz0ffj0556skpx72","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Lwm0YIGaoOsaCqWDVQtqREw4sto2STeXumpfwH2tPTM0fACscPdS7LZqUTaLW3NPqxtWzyY24ENgTCw96sPSWw=="}],"memo":""},"blockNum":"145706"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1rza55v64r6h34ncy6yg9fym3ajxk2vcdh682hd","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"M2jfZKbvUg0IKbIARuBsX51xK3wApsQZX3HQEW1g4FQ9WWdar4TBI3Kp1NuweCdndCzCG3ceyRnjwfRrvBAHHw=="}],"memo":""},"blockNum":"145710"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1pfn5vqcw57872l79xrpuqdsvu2fr250kvmr3rj","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Cg3wrtozQ1EtxBAdX1hEJnlfN33u1gfS0Bj9FgZlY9xVtkhmaEOiRr187/oO7u8AscIDQrznup8lzWkVGXlevQ=="}],"memo":""},"blockNum":"145714"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g124pj2s0xq768k7p83pae6xl6lkk29nd7r3q7cz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"WvCKACLguJhjWc1ibjqMYf4J81IHgeEmrh+723O+8TVwP3j2ywqsq7Xinw5ZyWr1hu1MbEevQJrUBaL301ACWg=="}],"memo":""},"blockNum":"145719"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1fl0u4d5nxdg60twkgsjfnkhc36m9d54gj7jj7l","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"uOzFZRqktTKcayxYYJ3YvreXvocq+U5drOmr85aqiw8MeS2C1WYXIs5NnEWsd49LJ4seuFzgU2sTUvk/dnPjCw=="}],"memo":""},"blockNum":"145724"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1gyj3yzhtt4ra86q6690ts4t92al643vh4w7jq5","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"TyrTQhRCIz4Ry2JBfYAmUl9+8vPwXn9LAebDEVX+b2MQsQsYQ3dEmGEjDgjlrL0nUm2hiw9FqsjqgNUC9nBmuw=="}],"memo":""},"blockNum":"145729"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1fccrl02tv353xyj59x60tgmm6z4et499mql0xe","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Pu//1ZJcKk86/SWJaBphxN7jq9yCL9rs98y2oUgWZOJ80MyEKI6rXrZyyDHlmNOEmEB0MmusKgtcZCVm5qahNQ=="}],"memo":""},"blockNum":"145735"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1yah80hn5xegc04df5h3haudk9269wa3sxzd2u7","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"n2LlUnOw0Sdta4+qtMuvneTn9DBuVPC67N5t1SYBXd8M9oOclGHr1JKpmVIEU1edSDR6FC92OAxQyoYnBgDqHA=="}],"memo":""},"blockNum":"145739"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g12jfp62lxlgw6ghumssqsg5aj8mlx6lchpgjuzw","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"aAT8xYTgZiVZ1GqNtxnxPB3nfxCUPpuUJizzofEbjzBDiqnroIY5PMNgJbmWea6/6smTJX2I5FN0MgbSLjQ0oQ=="}],"memo":""},"blockNum":"145743"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g19fhm7hr4ajy6h58m2236eeu3vufl68e9vmtpun","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"lRL9PIW+NLK3hN54avT3vgZ7j8lS3iqaJIq13nu9IbM+6nNj4TJ2en2QzDV7qliE8f9/uj/4cFKcZEWLN6ybag=="}],"memo":""},"blockNum":"145748"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g13yjxyq68gqr4c0t9awgx52nzg3522845vhftvh","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"GiytOw0YpWFRJzWLq9kiHfcqRuRz+HvolAPIPKRL9wZ5p2WOJXo4gmfTWzap9CjFjD1NMTe/TVpclwlB2ohV2g=="}],"memo":""},"blockNum":"145753"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g18x3mqxnc6am565qnt6nms4kjnkfs7zjmhth4x7","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"EoBooEvEuU3bN3VL+5ymlda4Q40d5H8GL2VBnwyf1ylhzYRifNQUR5lAFNPDsZTQ01fjMKpw2zTcRpYiJJAiXA=="}],"memo":""},"blockNum":"145758"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1q8fw0ak0r88mppusmmsct09r2ktee6a7z2tl76","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"b90LEzlXQ9LuZ7AmNWJCDNcXD4yOqDwa6nASyOox9tlw2Y5XlcRl5UjQqpV7zM1q1PyE7CmfG1ruSb1PNKdElw=="}],"memo":""},"blockNum":"145762"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1djm8slf4ww3zs62xw66fuljw0w459674n5uln6","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"86Z0PCt1PXUwCno19FuvQbzciufAMtZydVOsEI9H4XtN/9JzQrg6UikdMutpJvziyWrSVEsA9SUFy9kfEp5ehQ=="}],"memo":""},"blockNum":"145767"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1k4yhr9mwrtvyhun5rz9m69f0zuxwhl3ke9mk0w","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"CbMQqaCUmsIcAyZQsTRseqwP/tLG/vN8SXXoLMdPYScXqv+gUSH2GEo06Lhadcsuvkh6hqK1T2SJ6cz6oJ4lXQ=="}],"memo":""},"blockNum":"145772"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g15c3dqu6ejmjm0rgv8ndzq8kz76n74lygs9dxk6","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"nr0wA2ADW/1l5Iy+XjgFHA/VaIUTUzgRj5uLZo9+Zgx0gdzJi3qWVIW2vcUIVio8UOeEjW2buPK3gkRnIY8J4g=="}],"memo":""},"blockNum":"145784"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1wa9re9vfkw44rjr054gydj8tv2u7vl4y9h50us","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"3w1DB5VWvfGcyymkpjPK6ezYEQYb1OMEN0fBi9sieOpl+OMZa1FLe4gwR4sxHhPRsZZk7kxy/gal0DUSry315g=="}],"memo":""},"blockNum":"145789"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1u4x6g3trhxa3a4kazt8q6u52ndrg0kvp0fqjye","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"itL6+p/cthvYPRg2Vojt/BjLYUJcpnKmtBPgavlTkK1rKlgimeWitFFnRUnxdNT04zr6DzxIjsOwPnSBcMCvsA=="}],"memo":""},"blockNum":"145793"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1c8mrhxp0wh9lk05gcv5fymjz65um9ehhcswhr8","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"6ZL64Yhgu/1LbFyvo4g012WW2XZuJbnGnczZbntdwzQ+NIIkjVh/0mvu0ZASvH+DGKBC+6opZHQeOC9Gg5fJ/A=="}],"memo":""},"blockNum":"145797"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1e7gpgpj0vaxagc5mw3uazxwy8umzj5lnjz9f5j","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"xCV/OpW2M9fhldVl4Khooi1771cMoqcJh3xnc8mqJekVrica/dqmOrVEx9tG3LGaIGO19l0WlKgvfVgHw8v02g=="}],"memo":""},"blockNum":"145802"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g16zg754yxpj6gjvkvn35rjjlq3ncwdraras2xma","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"VDfXK0uCqFR74p6XT0svV7WX1ToEVnNIoKeNu7PNdMJSOw+f+/MVorWx03UqYmVnZiw4fozsph+uzC5bO4Q7LQ=="}],"memo":""},"blockNum":"145807"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1sufyxdkz05zxf4tenjf3t2ev724rj6z838cml4","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"GW6uodnIXhIHch9FP7jqFYNEdvPohY/Mft1G5CWrOG15EZN6Sg3OfGIrXm7DUmS/cWuqQ4wE0vwOsnUKYBLn5A=="}],"memo":""},"blockNum":"145811"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1v6msf4pse9atwu004gpqv89l5jd2g0ylxwwaqg","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Yj6TRYP5YKOnbQo4hBYYtKG0xGEbrtKr6jTVAZSEM2hLsApwfViqLrtW6vHu78OsFG4Cr2AUGtRZDJYIKRKJaQ=="}],"memo":""},"blockNum":"145816"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1fa5p5r6dr5qne485fh4j90rw4t9cyqwpm8fmmm","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"aAxykdDceFyFoAQY5hHTjG6IF8HPF86Ldi1l+Xzm8mV0Tzs0whoz6EPzR9mM7bQC08FDejZIDhLir0G140jP5Q=="}],"memo":""},"blockNum":"145820"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1cdnhkf84x8adtysmufakp766yjtr24jy88y58v","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"J6pTqNWaNoBccQClOAbj06XD2758HDNfmOmt8qPzQVwq7sioxyGs98QHW9YNa7LpjYnmuicMWuumsM4Qv3f+8Q=="}],"memo":""},"blockNum":"145827"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1f8ndswwgalmnlfzwz9p98ujyj7m3fccg2wyknn","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"sR+oCYujnky+tvPhwCa4jcB7JTZqyhkQ6nEt92j7cJJdBGnywpQrBRxCF0dJBZ0vaQpe938gpF/fO2on4Gdklw=="}],"memo":""},"blockNum":"145832"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1avj9cc7uu0km24wxys0m535mezxc39k9f53c65","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"4hHpa7dsxXsH0yV6S+os6FbBgKom8Xw3+kplLHyDQ7AyybcPDFZ7EJIR3CUq3DgK9ln3jZwDNT8Bqyn6Mz9NSQ=="}],"memo":""},"blockNum":"145837"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1sx8qt43lpmfdn5efn5xy2qt9mes2n846j4qq85","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"IEFabIWk5r970Q565zOI7nqvJuxAWH1KA80ht9KH10IUsdpyOzX3g8FyhVXha7XJZxMgCA4jzwpkA9k+b01qUA=="}],"memo":""},"blockNum":"145842"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1p3tynv34fdcn8ncka4qltmwwe30azaqterkhcy","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Ms2u5IZwLM9q9a1mVyNfOn3bl1P6kM+ga9C5O32jy+1uTPykd3THbaQ9CrOZvax1zfGHSMoy4r/6F7OcMXDjSA=="}],"memo":""},"blockNum":"145848"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1m0qp5cljf8atgs5045guws530n4vgq63ergjfx","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"wmJxvWX5FQKHA7k23l+I3RQIxqHDWjAH+5hrzAd8H617ByW6D+tLq+4OHuiTou5r5Cz/c4KmGLGur4ET/w9n0A=="}],"memo":""},"blockNum":"145853"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1gzm76uq8cpjvssnqdrw5gpl67crnk3nwrjj73w","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"kGT+BKq8cjR+3QzGIfgBWoUc0op3UiWA+8X4yeDStXY3f8zE/yhN8xb/gBRxQk/m070mm2JviqFe8i/T7ou/CA=="}],"memo":""},"blockNum":"145858"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10cav8xx788u54pgj8c56smez8wvfhga949td09","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"WBd/CQ4sqzBELT2sU5ZauEjXJ6gcqaTgaPdLAGsxGcQF3WK7NDvrpRKs9M1K3O7mIW0zndsyhAWH+4IMvI8Xlw=="}],"memo":""},"blockNum":"145863"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g19uew6svd6e2d862y39cythej43fta3ndlnf842","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"YLEdjpza66xqEbZLdJnBC6fOcV+kh6xtk2Nv+EkA5hFlFepOmRVq9UQK13Ogc4PMlYXNWvfZDggVhb8//TzS2A=="}],"memo":""},"blockNum":"145868"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1vfxsc4d49j5ahcxa5pxq6psc40xu59khcrpk39","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ELaaUSw2dQkF3s55Ta1Zr5XjmB+blfr/zK9PqxroB8U/dDap4XiB4VrXP5qFhrPo7lZ9ENWY1HpEhmz65WZkQw=="}],"memo":""},"blockNum":"145873"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10m2dmryh2wnqdkpcphhgvc27wwdxyxpv9a2h0l","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"IK/gsKdq/sNUztL7k52A5+N+Wo74ozGIHHuCx02tFNZtiFuhwR84zSaLglgYt1Ss7tvcTxp5t32OGCu3melXwg=="}],"memo":""},"blockNum":"145878"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g14qpdqrdlu9gmd5h9yk4uqgj06xcxwa5nq556q3","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"oiThtp/DjXVnUhBKZs0eIrk+wJYG+Fk7oep2A4dOWDE0leJAix5sv+dsEy3zr/Xi6bSnuWL0GKB3Xwd+cmLrow=="}],"memo":""},"blockNum":"145882"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1p72dzwzrr9mwczr2hul4ut63duem27d40m6x53","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"uXgop564cVlEwZXmUvbJ9i2KlYhbTKyqJPBwXLRHEH0MC3UuYR0x/6yY8uG0sYW+2mNMJ8pxmzJLEs8IB/JbbA=="}],"memo":""},"blockNum":"145887"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1v7rf2ja2fw7elz7zujut4ac6pzlskquzau86y4","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"IG1FarRtubj+an1343AUR2K0RWu8myhoL2VDwaiDuchTDNkdsRnHBHV9IVjuBNfxr6it9wboWRhus1rQLWXzZQ=="}],"memo":""},"blockNum":"145892"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g19vutjlpxdjp6gt0yvtg02n0s2205jdeczzkpaz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Jf91aDCYSaz4188raeb5TDehT7JFTaDl1RbOgy0B7e0178Gus/9LfeeBoNWF4sN+SNCU9WPSzGttLn/SWVxOvA=="}],"memo":""},"blockNum":"145906"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1tsjffuu847c80clmh86qahnf3tnewnmv6nrwrr","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"J7cMyKmVsmskd9Y41Yx2vNjmrvvCjq+guw57Kecq/iIm7A0M7XY582sc97u0LYVkj/Ab1iLtO6Gernj3wyNWaA=="}],"memo":""},"blockNum":"145910"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1p5dhayfgcacpsk39pxfls549pm0ep6rmu3xu0c","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ISJU8Dt9SjzkdGylJ3XTmRqF4pITjzur00ZYifvxJnQDDKWK8lOIIFTwoxGwMB0EovQAIBVYRSEcgRtYRbPlSA=="}],"memo":""},"blockNum":"145915"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1smfpqk9q062je4nsv7062ws3vex9zwx5k4p8t9","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"/MqtJ1gQl40v5uqhvy14IBR993xzduyZflnVAFgKy+s4npKTBOh4y1hRPxpR1A0qp7MzoRwuAKyMXegO09KnvA=="}],"memo":""},"blockNum":"145920"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1sk250e4q24f870g98dmh8sqfesndz5g8r83a5a","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"JXy7woS+SuQ7+PC06idrhRTMvUn9D2F1qacNoo2ynqlNiP4TDRbD35HCSAM3K+QOV2LodoDfT9kMenSDaI3GDQ=="}],"memo":""},"blockNum":"145935"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g100987uhsqcrcsxuzr206r5p3prvv2hzs9r9st4","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"n7eCvKLTtM074a3Z7rHTus+KU1JwU0MddGnzRJbDqMgImpwpfV65dGon6HqMGVn1nExWtniMM6/ZUFij5HXRjw=="}],"memo":""},"blockNum":"145940"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ldmkza3exvhzzjagjmuucwte4z67zefhkjaduu","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Mo65h3qAlv1+lioZHhpHtYDUwUqkhCOjqqk1JAOaezsYwFzXAfs6NWD/owDNNFoOtEm7UJ8PX7PlX+K76edoYA=="}],"memo":""},"blockNum":"145945"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g13yncys5pm639jyxlt890wpkgw0j02e5mqz6g95","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"qBBY12t3JPlPuKzdDk61kMfoj1vyRu4OEADlwm6jE58QfwaeZNC29VEEyXDatYKCAaEzJLlSZ1rTXN/epOD2CQ=="}],"memo":""},"blockNum":"145949"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1rzj00laty55zznspvcl5j30lht0fwqpj337wcx","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"MhPSWBfOLgFGicXiBdTp6emNMrWphlcUs1VoaRcSrWxOBwNf94An+rfsyWXzz6CwebPxWayJysNpaTKDG3ycLg=="}],"memo":""},"blockNum":"145953"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g13w8gns7sftta263966aq2wdym247wz5tajy3hp","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"TMmcWwgfjZkBMLyb4xEgRbz0cDDb3zlDruxllLPghwBnY6Xmt53dYPNCwn9f+CYfNZQFiXmlcQz9dRHuSyDfDQ=="}],"memo":""},"blockNum":"145958"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g17cx4gzmnltfqmjet0f68k7sheafd5fy202ncnt","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"E5btPdE5QVVVxdSlvdGj/XtgQkWQXpkoNjKWoJQgLxgz8/rGx+RGBuN/d6+0LbmCpOE4gzujLHGF1zMsj2snIg=="}],"memo":""},"blockNum":"145963"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g19cdd3lel08dcrly24ejf6yldm2rq3ecs6szekf","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"qb9q5eCNR/idtau5elgcvvUc20uidWJu5CN4tEntL7MNjCbczQ1nM6WpF/Ie1EoF+iYn6MXQc88qxyAiBx+trw=="}],"memo":""},"blockNum":"145976"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1s5rzs4228su2czygg7q8ukz26l66kupay53njk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"g2rsFtV5S6qfuzteCNgNmO9leAl9X6JFlmCsC+4d3aJZsBmnTbDUfrZ4YxwkMBYwkPjvLEfZ0H5vIY7pCrVk/A=="}],"memo":""},"blockNum":"145981"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ht4u7l99mteq9nkglfa6dwgg6a2kvrelgqtt7k","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"j4zmprf6dhELaq06P45t7kzxMnvJKhBBhLYmzAwI24AmaaaKuFbcYJkBioSoX33hxqIdgeATUIqcsHIxCrPurA=="}],"memo":""},"blockNum":"145986"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1hx6zgnywc2zlycmdqejqaesfxqauu6penvu3cn","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"0lfZfY5M3FelnjM9jN7nyHHzd14Bciqf7MC8nyLkutRp/d/filrXwPJK5RvylUlD2EGBZZVIjrZT7HidMdUAxw=="}],"memo":""},"blockNum":"145990"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1zy4a77v4v3s575889u36w7zs74m3u983h8qct5","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"sUfFCtgtCg0JIChrFhfeI7a2iRiKCx+otdWZoAmHO+l5NgfWF1tsLX6ir4fb2rPEuJqv3op5O67tKmV5ScS7Qg=="}],"memo":""},"blockNum":"145995"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1xakrdtc69cnmcvl86luucvdywmx2xxryzld6t9","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"djB6r3hJPmvz7ix4jxNsR7HNGRuWHSlYbbtgfLG9rOomEm61R1OHxgPGSOmwPvfyWYt29o1z4Q+Zcp0LWkTR3g=="}],"memo":""},"blockNum":"146000"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g19tl5eac30w759qw29q5n3xcy8mrekjhl7z63qn","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"DahZhk9TSFfkV2xuGrLYiW8AaYsvc3IYQSikddb0fslsvY36WlyRLkpFe+gBgdwZhHlIzccXWV+hyyiv2+kwSA=="}],"memo":""},"blockNum":"146006"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1rz3hxcuklyz4kqwucd2m30zrsql4nu80x9xdsk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"WcAFciXvv/T0xQGP27sxrsqHT7pnHPYJX+AnPMoP3PBX98uW98TAmFstqA9gEkuXGnUA8kQL8fUraPV+pOhd5A=="}],"memo":""},"blockNum":"146012"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g16jyxv8t226wgkx3pjlft8d9jsx9e7gp70xe6ea","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"r3LPXMqEjGTdgFH+UiCocfZch27rKY6GhMHmAkKkWXMHNEsznJ9K+FPrwGkBe9jbSCpmANGEsoyB1205Wo0esg=="}],"memo":""},"blockNum":"146040"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ax9heegayhggjr84gzjn9ervfwq26dgnnw9hde","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"KVBxizrbVeiqAmLN8OwdpENRYo+OLz1BVvkA65ovvwkr1UJcH534A6fI7WChEl+eBo8fUcoM5bAqUV3JfVr5+w=="}],"memo":""},"blockNum":"146055"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1vs5zfnh6lwq5y6n5h38j0hpq8pcxtr73f74pz8","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"mtgeIBsu+fMAcRCCkoXqI2KsgdJQk1onvVicI63Xk70xhTFXa2i25HgHeStkQMkvYu8ooqkdylv3e//s7xXOuw=="}],"memo":""},"blockNum":"146084"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1xc83g3ajlqrqr33n0safj7dxp7um8keqf84kxx","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"p2/hS6a9vkqR3NjUatWzLcOjAmaOONf2jK93pU/Cf/0RBUsrKn1VVMASZlb35iZXMUz5tQvVesPpBw1+voGOGg=="}],"memo":""},"blockNum":"146090"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1xz2nex70r2rjh9ct09axtp9up73rtl79l4xgsm","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"vK7giYcDf0Z3ijzpmSuCRbiifWFFqjsGkzzmMVLzl6REhWX3OlQ93oUeZ7CGvtWtaxh21oOlSyA0BLBe1+xXyg=="}],"memo":""},"blockNum":"146095"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1a9ppzzzshlv37vu809px4ygh97wua5zwglwhdj","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"A37cYG4r4ipFrYXAbowPqQvjfUvauLdiOkS53OVu9E51uh1XN+UtpixvjTDHy2xyia5aRZNm3dVsYD+NTXQMng=="}],"memo":""},"blockNum":"146127"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1g00ku08ltajeqnaulepavfrqvtge4l84peypkv","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"V38JF2id6g4cRGvqsKwUyPUGz8PeTxUDPimqGGCR7r8BzD1jnh1/uQhlKmbwR9DjtGGHMwCNa9rFQJdToPP92g=="}],"memo":""},"blockNum":"146131"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ynvj9e4svch6vlhah4l2jfhzfnkvxdpqpwrwsn","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"TjxE3VYybrH1D4iv5U126K/jVpAjHQARFCfTUHS+aTkUuv1o9RZsXm7VW1pd+mvwZMxlMXzesYCd0/LKg5p4Zw=="}],"memo":""},"blockNum":"146136"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g19pxjjad2vm2ee9cgd8cdd4w9vmxuwf6undfvl7","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"7sClh9heENe5wnn1mY4dWGCKW7fBVqia0sa/xSiPyT1ODKHmeat3OmuHahteoAFW/4s82b1+AcHE12MmBNbU+w=="}],"memo":""},"blockNum":"146141"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g15uys52yyuyux0gg8fy2d93xrux0qs0tlmdjc4m","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Bwp+zrv4I9LwOEcrjtVxi34uEa+9ImgDk/gSJ8KPq4wBZ5xUyR0YL0YNlZ9NuF3v4kqp142j/a6Tcd4sJCsQ0Q=="}],"memo":""},"blockNum":"146147"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g14a9geezq59jx8mxhq7rhdg76pupka0ru4kd2x8","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"mzFE2hb2N/oZjTklow5nhQsEKPo7qOgGZ9Y+4xiEDI5EBAt3uvq3Q8MVPUbNOjEo448WSIyCCpBceiGo9kNRcA=="}],"memo":""},"blockNum":"146151"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1k0r9n0k3gytqveqvtk948c588gfun3heqj056f","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"EQ4W7Ay61OB3AcVnLI04LZnMrkwgO8jSRFDDAGA8cT1QddSW861T8T8KrLnzVBeeR+GRK1o0np2s9gYnM/aRow=="}],"memo":""},"blockNum":"146155"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g12vx7dn3dqq89mz550zwunvg4qw6epq73d9csay","package":{"name":"usdc","path":"gno.land/r/onbloc/usdc","files":[{"name":"gno.mod","body":"module gno.land/r/onbloc/usdc\n\nrequire (\n\tgno.land/p/demo/grc/grc20 v0.0.0-latest\n\tgno.land/p/demo/ownable v0.0.0-latest\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/uassert v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n\tgno.land/p/demo/users v0.0.0-latest\n\tgno.land/r/demo/users v0.0.0-latest\n)"},{"name":"usdc.gno","body":"package usdc\n\nimport (\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n\tpusers \"gno.land/p/demo/users\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tbanker *grc20.Banker\n\tadmin  *ownable.Ownable\n\ttoken  grc20.Token\n)\n\nfunc init() {\n\tadmin = ownable.NewWithAddress(\"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c\") // GNOSWAP_ADMIN\n\tbanker = grc20.NewBanker(\"Usd Coin\", \"USDC\", 6)\n\tbanker.Mint(admin.Owner(), 100_000_000_000_000)\n\ttoken = banker.Token()\n}\n\nfunc TotalSupply() uint64 { return token.TotalSupply() }\n\nfunc BalanceOf(owner pusers.AddressOrName) uint64 {\n\townerAddr := users.Resolve(owner)\n\treturn token.BalanceOf(ownerAddr)\n}\n\nfunc Allowance(owner, spender pusers.AddressOrName) uint64 {\n\townerAddr := users.Resolve(owner)\n\tspenderAddr := users.Resolve(spender)\n\treturn token.Allowance(ownerAddr, spenderAddr)\n}\n\nfunc Transfer(to pusers.AddressOrName, amount uint64) {\n\ttoAddr := users.Resolve(to)\n\tcheckErr(token.Transfer(toAddr, amount))\n}\n\nfunc Approve(spender pusers.AddressOrName, amount uint64) {\n\tspenderAddr := users.Resolve(spender)\n\tcheckErr(token.Approve(spenderAddr, amount))\n}\n\nfunc TransferFrom(from, to pusers.AddressOrName, amount uint64) {\n\tfromAddr := users.Resolve(from)\n\ttoAddr := users.Resolve(to)\n\tcheckErr(token.TransferFrom(fromAddr, toAddr, amount))\n}\n\nfunc Burn(from pusers.AddressOrName, amount uint64) {\n\tadmin.AssertCallerIsOwner()\n\tfromAddr := users.Resolve(from)\n\tcheckErr(banker.Burn(fromAddr, amount))\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn banker.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := pusers.AddressOrName(parts[1])\n\t\townerAddr := users.Resolve(owner)\n\t\tbalance := banker.BalanceOf(ownerAddr)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc checkErr(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6/Tht9RvFvqjDoHGyl6CetXPZMDH3SyRzH9xo+l4j9s"},"signature":"O/1zNWgzH9uIGrpdZ0uZbuf4MJlpxlRVWZ2zlzBL++45IIc/Zg+UFZDzwYlnLX4m4Uc7jYVhY22coj4g606oWw=="}],"memo":""},"blockNum":"147596"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","package":{"name":"gnft","path":"gno.land/r/gnoswap/gnft","files":[{"name":"gnft.gno","body":"package gnft\n\nimport (\n\t\"math/rand\"\n\t\"std\"\n\t\"time\"\n\n\t\"gno.land/p/demo/grc/grc721\"\n\t\"gno.land/r/demo/users\"\n\n\tpusers \"gno.land/p/demo/users\"\n)\n\nvar (\n\tadmin std.Address = \"g1y3uyaa63sjxvah2cx3c2usavwvx97kl8m2v7ye\" // deployed position contract\n\tgnft              = grc721.NewBasicNFT(\"GNOSWAP NFT\", \"GNFT\")\n)\n\nvar userMinted = make(map[std.Address][]grc721.TokenID)\n\nfunc init() {}\n\n// Getters\nfunc TotalSupply() uint64 {\n\treturn gnft.TokenCount()\n}\n\nfunc GetTokenURI(tid grc721.TokenID) string {\n\turi, err := gnft.TokenURI(tid)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\treturn string(uri)\n}\n\nfunc BalanceOf(user pusers.AddressOrName) uint64 {\n\tbalance, err := gnft.BalanceOf(users.Resolve(user))\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\treturn balance\n}\n\nfunc OwnerOf(tid grc721.TokenID) std.Address {\n\towner, err := gnft.OwnerOf(tid)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\treturn owner\n}\n\nfunc IsApprovedForAll(owner, user pusers.AddressOrName) bool {\n\treturn gnft.IsApprovedForAll(users.Resolve(owner), users.Resolve(user))\n}\n\nfunc GetApproved(tid grc721.TokenID) (std.Address, bool) {\n\taddr, err := gnft.GetApproved(tid)\n\tif err != nil {\n\t\treturn \"\", false\n\t}\n\n\treturn addr, true\n}\n\n// Setters\n\nfunc Approve(user pusers.AddressOrName, tid grc721.TokenID) {\n\terr := gnft.Approve(users.Resolve(user), tid)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n}\n\nfunc SetApprovalForAll(user pusers.AddressOrName, approved bool) {\n\terr := gnft.SetApprovalForAll(users.Resolve(user), approved)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n}\n\nfunc TransferFrom(from, to pusers.AddressOrName, tid grc721.TokenID) {\n\terr := gnft.TransferFrom(users.Resolve(from), users.Resolve(to), tid)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n}\n\n// Admin\nfunc Mint(to pusers.AddressOrName, tid grc721.TokenID) grc721.TokenID {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\n\terr := gnft.Mint(users.Resolve(to), tid)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\tuserMinted[users.Resolve(to)] = append(userMinted[users.Resolve(to)], tid)\n\treturn tid\n}\n\nfunc Burn(tid grc721.TokenID) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\terr := gnft.Burn(tid)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n}\n\nfunc SetAdmin(newAdmin pusers.AddressOrName) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\tadmin = users.Resolve(newAdmin)\n}\n\n// Render\n\nfunc Render(path string) string {\n\tswitch {\n\tcase path == \"\":\n\t\treturn gnft.RenderHome()\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\n// Util\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"gnft_assertIsAdmin_restricted access\")\n\t}\n}\n\nfunc Exists(tid grc721.TokenID) bool {\n\t_, err := gnft.OwnerOf(tid)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\treturn true\n}\n\nfunc SetTokenURI(tid grc721.TokenID) {\n\t// rand instance\n\tseed1 := uint64(time.Now().Unix())\n\tseed2 := uint64(time.Now().UnixNano())\n\tpcg := rand.NewPCG(seed1, seed2)\n\tr := rand.New(pcg)\n\n\ttokenURI := genImageURI(r)\n\n\tok, err := gnft.SetTokenURI(tid, grc721.TokenURI(tokenURI))\n\tif !ok {\n\t\tpanic(err.Error())\n\t}\n\n\tstd.Emit(\n\t\t\"GNOSWAP\",\n\t\t\"m_origCaller\", std.GetOrigCaller().String(),\n\t\t\"m_prevRealm\", std.PrevRealm().PkgPath(),\n\t\t\"p_tokenId\", string(tid),\n\t\t\"tokenURI\", tokenURI,\n\t\t\"SetTokenURI\", \"SetTokenURI\",\n\t)\n}\n\nfunc SetTokenURILast() {\n\torigCaller := std.GetOrigCaller()\n\n\t// rand instance\n\tseed1 := uint64(time.Now().Unix())\n\tseed2 := uint64(time.Now().UnixNano())\n\tpcg := rand.NewPCG(seed1, seed2)\n\tr := rand.New(pcg)\n\n\tusersNFT := userMinted[origCaller]\n\tfor _, tid := range usersNFT {\n\t\ttokenURI := genImageURI(r)\n\n\t\tok, err := gnft.SetTokenURI(tid, grc721.TokenURI(tokenURI))\n\t\tif !ok {\n\t\t\tpanic(err.Error())\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"GNOSWAP\",\n\t\t\t\"m_origCaller\", std.GetOrigCaller().String(),\n\t\t\t\"m_prevRealm\", std.PrevRealm().PkgPath(),\n\t\t\t\"p_tokenId\", string(tid),\n\t\t\t\"tokenURI\", tokenURI,\n\t\t\t\"SetTokenURILast\", \"SetTokenURILast\",\n\t\t)\n\t}\n\n\tdelete(userMinted, origCaller)\n}\n"},{"name":"gno.mod","body":"module gno.land/r/gnoswap/gnft\n\nrequire (\n\tgno.land/p/demo/grc/grc721 v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n\tgno.land/p/demo/users v0.0.0-latest\n\tgno.land/r/demo/users v0.0.0-latest\n)\n"},{"name":"svg_generator.gno","body":"package gnft\n\nimport (\n\t\"math/rand\"\n\n\t\"gno.land/p/demo/ufmt\"\n\n\tb64 \"encoding/base64\"\n)\n\nvar baseTempalte = `\u003csvg width=\"135\" height=\"135\" viewBox=\"0 0 135 135\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n\u003ccircle cx=\"67\" cy=\"68\" r=\"46\" fill=\"url(#paint0_linear_7698_56946)\"/\u003e\n\u003cpath d=\"M58.7734 53.6828L67.4941 48L85.0002 59.3178L76.2927 64.9957L58.7734 53.6828Z\" fill=\"white\"/\u003e\n\u003cpath d=\"M58.9541 67.7177L67.6748 62.0349L85.0001 73.1804L76.4536 78.9596L58.9541 67.7177Z\" fill=\"white\" fill-opacity=\"0.4\"/\u003e\n\u003cpath d=\"M50.0269 75.8605L58.7735 70.1777L76.2408 81.517L67.4942 87.1472L50.0269 75.8605Z\" fill=\"white\" fill-opacity=\"0.6\"/\u003e\n\u003cpath d=\"M50.001 59.3174L58.7724 53.6672L58.7724 70.1797L50.001 75.8737L50.001 59.3174Z\" fill=\"white\"/\u003e\n\u003cpath d=\"M76.4545 78.9598L85.0017 73.1807L85.0017 75.8302L76.2734 81.5023L76.4545 78.9598Z\" fill=\"white\" fill-opacity=\"0.5\"/\u003e\n\u003cpath d=\"M58.7734 53.6828L67.4941 48L85.0002 59.3178L76.2927 64.9957L58.7734 53.6828Z\" fill=\"white\"/\u003e\n\u003cpath d=\"M58.9541 67.7177L67.6748 62.0349L85.0001 73.1804L76.4536 78.9596L58.9541 67.7177Z\" fill=\"white\" fill-opacity=\"0.4\"/\u003e\n\u003cpath d=\"M50.0269 75.8605L58.7735 70.1777L76.2408 81.517L67.4942 87.1472L50.0269 75.8605Z\" fill=\"white\" fill-opacity=\"0.6\"/\u003e\n\u003cpath d=\"M50.001 59.3174L58.7724 53.6672L58.7724 70.1797L50.001 75.8737L50.001 59.3174Z\" fill=\"white\"/\u003e\n\u003cpath d=\"M76.4545 78.9598L85.0017 73.1807L85.0017 75.8302L76.2734 81.5023L76.4545 78.9598Z\" fill=\"white\" fill-opacity=\"0.5\"/\u003e\n\u003cdefs\u003e\n\u003clinearGradient id=\"paint0_linear_7698_56946\" x1=\"%d\" y1=\"%d\" x2=\"%d\" y2=\"%d\" gradientUnits=\"userSpaceOnUse\"\u003e\n\t\u003cstop stop-color=\"%s\"/\u003e\n\t\u003cstop offset=\"1\" stop-color=\"%s\"/\u003e\n\u003c/linearGradient\u003e\n\u003c/defs\u003e\n\u003c/svg\u003e\n`\n\n// range for hex color\nconst charset = \"0123456789ABCDEF\"\n\nfunc genImageURI(r *rand.Rand) string {\n\timageRaw := genImageRaw(r)\n\tsEnc := b64.StdEncoding.EncodeToString([]byte(imageRaw))\n\n\treturn \"data:image/svg+xml;base64,\" + sEnc\n}\n\nfunc genImageRaw(r *rand.Rand) string {\n\tx1 := randNumber(7, 13, r)\n\ty1 := randNumber(7, 13, r)\n\n\tx2 := randNumber(121, 126, r)\n\ty2 := randNumber(121, 126, r)\n\n\tcolor1 := randColor(r)\n\tcolor2 := randColor(r)\n\n\trandImage := ufmt.Sprintf(baseTempalte, x1, y1, x2, y2, color1, color2)\n\treturn randImage\n}\n\nfunc randNumber(lower, upper uint64, r *rand.Rand) uint64 {\n\treturn lower + uint64(r.IntN(int(upper-lower+1)))\n}\n\nfunc randColor(r *rand.Rand) string {\n\tcolor := \"#\"\n\tfor i := 0; i \u003c 6; i++ {\n\t\tcolor += string(charset[r.IntN(len(charset))])\n\t}\n\treturn color\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"t4S3Q5jbBE4fVoh+TiP6gWBTI2KaYBwoDN6ceUNOT6Miv1HjYSKSc3xxa89dTC0BUMwhYKQ2qXlgEy/nX+G8Tw=="}],"memo":""},"blockNum":"147598"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","package":{"name":"uint256","path":"gno.land/p/gnoswap/uint256","files":[{"name":"LICENSE","body":"BSD 3-Clause License\n\nCopyright 2020 uint256 Authors\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"},{"name":"README.md","body":"# Fixed size 256-bit math library\n\nThis is a library specialized at replacing the `big.Int` library for math based on 256-bit types.\n\noriginal repository: [uint256](\u003chttps://github.com/holiman/uint256/tree/master\u003e)\n"},{"name":"arithmetic.gno","body":"// arithmetic provides arithmetic operations for Uint objects.\n// This includes basic binary operations such as addition, subtraction, multiplication, division, and modulo operations\n// as well as overflow checks, and negation. These functions are essential for numeric\n// calculations using 256-bit unsigned integers.\npackage uint256\n\nimport (\n\t\"math/bits\"\n)\n\n// Add sets z to the sum x+y\nfunc (z *Uint) Add(x, y *Uint) *Uint {\n\tvar carry uint64\n\tz.arr[0], carry = bits.Add64(x.arr[0], y.arr[0], 0)\n\tz.arr[1], carry = bits.Add64(x.arr[1], y.arr[1], carry)\n\tz.arr[2], carry = bits.Add64(x.arr[2], y.arr[2], carry)\n\tz.arr[3], _ = bits.Add64(x.arr[3], y.arr[3], carry)\n\treturn z\n}\n\n// AddOverflow sets z to the sum x+y, and returns z and whether overflow occurred\nfunc (z *Uint) AddOverflow(x, y *Uint) (*Uint, bool) {\n\tvar carry uint64\n\tz.arr[0], carry = bits.Add64(x.arr[0], y.arr[0], 0)\n\tz.arr[1], carry = bits.Add64(x.arr[1], y.arr[1], carry)\n\tz.arr[2], carry = bits.Add64(x.arr[2], y.arr[2], carry)\n\tz.arr[3], carry = bits.Add64(x.arr[3], y.arr[3], carry)\n\treturn z, carry != 0\n}\n\n// Sub sets z to the difference x-y\nfunc (z *Uint) Sub(x, y *Uint) *Uint {\n\tvar carry uint64\n\tz.arr[0], carry = bits.Sub64(x.arr[0], y.arr[0], 0)\n\tz.arr[1], carry = bits.Sub64(x.arr[1], y.arr[1], carry)\n\tz.arr[2], carry = bits.Sub64(x.arr[2], y.arr[2], carry)\n\tz.arr[3], _ = bits.Sub64(x.arr[3], y.arr[3], carry)\n\treturn z\n}\n\n// SubOverflow sets z to the difference x-y and returns z and true if the operation underflowed\nfunc (z *Uint) SubOverflow(x, y *Uint) (*Uint, bool) {\n\tvar carry uint64\n\tz.arr[0], carry = bits.Sub64(x.arr[0], y.arr[0], 0)\n\tz.arr[1], carry = bits.Sub64(x.arr[1], y.arr[1], carry)\n\tz.arr[2], carry = bits.Sub64(x.arr[2], y.arr[2], carry)\n\tz.arr[3], carry = bits.Sub64(x.arr[3], y.arr[3], carry)\n\treturn z, carry != 0\n}\n\n// Neg returns -x mod 2^256.\nfunc (z *Uint) Neg(x *Uint) *Uint {\n\treturn z.Sub(new(Uint), x)\n}\n\n// commented out for possible overflow\n// Mul sets z to the product x*y\nfunc (z *Uint) Mul(x, y *Uint) *Uint {\n\tvar (\n\t\tres              Uint\n\t\tcarry            uint64\n\t\tres1, res2, res3 uint64\n\t)\n\n\tcarry, res.arr[0] = bits.Mul64(x.arr[0], y.arr[0])\n\tcarry, res1 = umulHop(carry, x.arr[1], y.arr[0])\n\tcarry, res2 = umulHop(carry, x.arr[2], y.arr[0])\n\tres3 = x.arr[3]*y.arr[0] + carry\n\n\tcarry, res.arr[1] = umulHop(res1, x.arr[0], y.arr[1])\n\tcarry, res2 = umulStep(res2, x.arr[1], y.arr[1], carry)\n\tres3 = res3 + x.arr[2]*y.arr[1] + carry\n\n\tcarry, res.arr[2] = umulHop(res2, x.arr[0], y.arr[2])\n\tres3 = res3 + x.arr[1]*y.arr[2] + carry\n\n\tres.arr[3] = res3 + x.arr[0]*y.arr[3]\n\n\treturn z.Set(\u0026res)\n}\n\n// MulOverflow sets z to the product x*y, and returns z and  whether overflow occurred\nfunc (z *Uint) MulOverflow(x, y *Uint) (*Uint, bool) {\n\tp := umul(x, y)\n\tcopy(z.arr[:], p[:4])\n\treturn z, (p[4] | p[5] | p[6] | p[7]) != 0\n}\n\n// commented out for possible overflow\n// Div sets z to the quotient x/y for returns z.\n// If y == 0, z is set to 0\nfunc (z *Uint) Div(x, y *Uint) *Uint {\n\tif y.IsZero() || y.Gt(x) {\n\t\treturn z.Clear()\n\t}\n\tif x.Eq(y) {\n\t\treturn z.SetOne()\n\t}\n\t// Shortcut some cases\n\tif x.IsUint64() {\n\t\treturn z.SetUint64(x.Uint64() / y.Uint64())\n\t}\n\n\t// At this point, we know\n\t// x/y ; x \u003e y \u003e 0\n\n\tvar quot Uint\n\tudivrem(quot.arr[:], x.arr[:], y)\n\treturn z.Set(\u0026quot)\n}\n\n// MulMod calculates the modulo-m multiplication of x and y and\n// returns z.\n// If m == 0, z is set to 0 (OBS: differs from the big.Int)\nfunc (z *Uint) MulMod(x, y, m *Uint) *Uint {\n\tif x.IsZero() || y.IsZero() || m.IsZero() {\n\t\treturn z.Clear()\n\t}\n\tp := umul(x, y)\n\n\tif m.arr[3] != 0 {\n\t\tmu := Reciprocal(m)\n\t\tr := reduce4(p, m, mu)\n\t\treturn z.Set(\u0026r)\n\t}\n\n\tvar (\n\t\tpl Uint\n\t\tph Uint\n\t)\n\n\tpl = Uint{arr: [4]uint64{p[0], p[1], p[2], p[3]}}\n\tph = Uint{arr: [4]uint64{p[4], p[5], p[6], p[7]}}\n\n\t// If the multiplication is within 256 bits use Mod().\n\tif ph.IsZero() {\n\t\treturn z.Mod(\u0026pl, m)\n\t}\n\n\tvar quot [8]uint64\n\trem := udivrem(quot[:], p[:], m)\n\treturn z.Set(\u0026rem)\n}\n\n// Mod sets z to the modulus x%y for y != 0 and returns z.\n// If y == 0, z is set to 0 (OBS: differs from the big.Uint)\nfunc (z *Uint) Mod(x, y *Uint) *Uint {\n\tif x.IsZero() || y.IsZero() {\n\t\treturn z.Clear()\n\t}\n\tswitch x.Cmp(y) {\n\tcase -1:\n\t\t// x \u003c y\n\t\tcopy(z.arr[:], x.arr[:])\n\t\treturn z\n\tcase 0:\n\t\t// x == y\n\t\treturn z.Clear() // They are equal\n\t}\n\n\t// At this point:\n\t// x != 0\n\t// y != 0\n\t// x \u003e y\n\n\t// Shortcut trivial case\n\tif x.IsUint64() {\n\t\treturn z.SetUint64(x.Uint64() % y.Uint64())\n\t}\n\n\tvar quot Uint\n\t*z = udivrem(quot.arr[:], x.arr[:], y)\n\treturn z\n}\n\n// DivMod sets z to the quotient x div y and m to the modulus x mod y and returns the pair (z, m) for y != 0.\n// If y == 0, both z and m are set to 0 (OBS: differs from the big.Int)\nfunc (z *Uint) DivMod(x, y, m *Uint) (*Uint, *Uint) {\n\tif y.IsZero() {\n\t\treturn z.Clear(), m.Clear()\n\t}\n\tvar quot Uint\n\t*m = udivrem(quot.arr[:], x.arr[:], y)\n\t*z = quot\n\treturn z, m\n}\n\n// Exp sets z = base**exponent mod 2**256, and returns z.\nfunc (z *Uint) Exp(base, exponent *Uint) *Uint {\n\tres := Uint{arr: [4]uint64{1, 0, 0, 0}}\n\tmultiplier := *base\n\texpBitLen := exponent.BitLen()\n\n\tcurBit := 0\n\tword := exponent.arr[0]\n\tfor ; curBit \u003c expBitLen \u0026\u0026 curBit \u003c 64; curBit++ {\n\t\tif word\u00261 == 1 {\n\t\t\tres.Mul(\u0026res, \u0026multiplier)\n\t\t}\n\t\tmultiplier.squared()\n\t\tword \u003e\u003e= 1\n\t}\n\n\tword = exponent.arr[1]\n\tfor ; curBit \u003c expBitLen \u0026\u0026 curBit \u003c 128; curBit++ {\n\t\tif word\u00261 == 1 {\n\t\t\tres.Mul(\u0026res, \u0026multiplier)\n\t\t}\n\t\tmultiplier.squared()\n\t\tword \u003e\u003e= 1\n\t}\n\n\tword = exponent.arr[2]\n\tfor ; curBit \u003c expBitLen \u0026\u0026 curBit \u003c 192; curBit++ {\n\t\tif word\u00261 == 1 {\n\t\t\tres.Mul(\u0026res, \u0026multiplier)\n\t\t}\n\t\tmultiplier.squared()\n\t\tword \u003e\u003e= 1\n\t}\n\n\tword = exponent.arr[3]\n\tfor ; curBit \u003c expBitLen \u0026\u0026 curBit \u003c 256; curBit++ {\n\t\tif word\u00261 == 1 {\n\t\t\tres.Mul(\u0026res, \u0026multiplier)\n\t\t}\n\t\tmultiplier.squared()\n\t\tword \u003e\u003e= 1\n\t}\n\treturn z.Set(\u0026res)\n}\n\nfunc (z *Uint) squared() {\n\tvar (\n\t\tres                    Uint\n\t\tcarry0, carry1, carry2 uint64\n\t\tres1, res2             uint64\n\t)\n\n\tcarry0, res.arr[0] = bits.Mul64(z.arr[0], z.arr[0])\n\tcarry0, res1 = umulHop(carry0, z.arr[0], z.arr[1])\n\tcarry0, res2 = umulHop(carry0, z.arr[0], z.arr[2])\n\n\tcarry1, res.arr[1] = umulHop(res1, z.arr[0], z.arr[1])\n\tcarry1, res2 = umulStep(res2, z.arr[1], z.arr[1], carry1)\n\n\tcarry2, res.arr[2] = umulHop(res2, z.arr[0], z.arr[2])\n\n\tres.arr[3] = 2*(z.arr[0]*z.arr[3]+z.arr[1]*z.arr[2]) + carry0 + carry1 + carry2\n\n\tz.Set(\u0026res)\n}\n\n// udivrem divides u by d and produces both quotient and remainder.\n// The quotient is stored in provided quot - len(u)-len(d)+1 words.\n// It loosely follows the Knuth's division algorithm (sometimes referenced as \"schoolbook\" division) using 64-bit words.\n// See Knuth, Volume 2, section 4.3.1, Algorithm D.\nfunc udivrem(quot, u []uint64, d *Uint) (rem Uint) {\n\tvar dLen int\n\tfor i := len(d.arr) - 1; i \u003e= 0; i-- {\n\t\tif d.arr[i] != 0 {\n\t\t\tdLen = i + 1\n\t\t\tbreak\n\t\t}\n\t}\n\n\tshift := uint(bits.LeadingZeros64(d.arr[dLen-1]))\n\n\tvar dnStorage Uint\n\tdn := dnStorage.arr[:dLen]\n\tfor i := dLen - 1; i \u003e 0; i-- {\n\t\tdn[i] = (d.arr[i] \u003c\u003c shift) | (d.arr[i-1] \u003e\u003e (64 - shift))\n\t}\n\tdn[0] = d.arr[0] \u003c\u003c shift\n\n\tvar uLen int\n\tfor i := len(u) - 1; i \u003e= 0; i-- {\n\t\tif u[i] != 0 {\n\t\t\tuLen = i + 1\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif uLen \u003c dLen {\n\t\tcopy(rem.arr[:], u)\n\t\treturn rem\n\t}\n\n\tvar unStorage [9]uint64\n\tun := unStorage[:uLen+1]\n\tun[uLen] = u[uLen-1] \u003e\u003e (64 - shift)\n\tfor i := uLen - 1; i \u003e 0; i-- {\n\t\tun[i] = (u[i] \u003c\u003c shift) | (u[i-1] \u003e\u003e (64 - shift))\n\t}\n\tun[0] = u[0] \u003c\u003c shift\n\n\t// TODO: Skip the highest word of numerator if not significant.\n\n\tif dLen == 1 {\n\t\tr := udivremBy1(quot, un, dn[0])\n\t\trem.SetUint64(r \u003e\u003e shift)\n\t\treturn rem\n\t}\n\n\tudivremKnuth(quot, un, dn)\n\n\tfor i := 0; i \u003c dLen-1; i++ {\n\t\trem.arr[i] = (un[i] \u003e\u003e shift) | (un[i+1] \u003c\u003c (64 - shift))\n\t}\n\trem.arr[dLen-1] = un[dLen-1] \u003e\u003e shift\n\n\treturn rem\n}\n\n// umul computes full 256 x 256 -\u003e 512 multiplication.\nfunc umul(x, y *Uint) [8]uint64 {\n\tvar (\n\t\tres                           [8]uint64\n\t\tcarry, carry4, carry5, carry6 uint64\n\t\tres1, res2, res3, res4, res5  uint64\n\t)\n\n\tcarry, res[0] = bits.Mul64(x.arr[0], y.arr[0])\n\tcarry, res1 = umulHop(carry, x.arr[1], y.arr[0])\n\tcarry, res2 = umulHop(carry, x.arr[2], y.arr[0])\n\tcarry4, res3 = umulHop(carry, x.arr[3], y.arr[0])\n\n\tcarry, res[1] = umulHop(res1, x.arr[0], y.arr[1])\n\tcarry, res2 = umulStep(res2, x.arr[1], y.arr[1], carry)\n\tcarry, res3 = umulStep(res3, x.arr[2], y.arr[1], carry)\n\tcarry5, res4 = umulStep(carry4, x.arr[3], y.arr[1], carry)\n\n\tcarry, res[2] = umulHop(res2, x.arr[0], y.arr[2])\n\tcarry, res3 = umulStep(res3, x.arr[1], y.arr[2], carry)\n\tcarry, res4 = umulStep(res4, x.arr[2], y.arr[2], carry)\n\tcarry6, res5 = umulStep(carry5, x.arr[3], y.arr[2], carry)\n\n\tcarry, res[3] = umulHop(res3, x.arr[0], y.arr[3])\n\tcarry, res[4] = umulStep(res4, x.arr[1], y.arr[3], carry)\n\tcarry, res[5] = umulStep(res5, x.arr[2], y.arr[3], carry)\n\tres[7], res[6] = umulStep(carry6, x.arr[3], y.arr[3], carry)\n\n\treturn res\n}\n\n// umulStep computes (hi * 2^64 + lo) = z + (x * y) + carry.\nfunc umulStep(z, x, y, carry uint64) (hi, lo uint64) {\n\thi, lo = bits.Mul64(x, y)\n\tlo, carry = bits.Add64(lo, carry, 0)\n\thi, _ = bits.Add64(hi, 0, carry)\n\tlo, carry = bits.Add64(lo, z, 0)\n\thi, _ = bits.Add64(hi, 0, carry)\n\treturn hi, lo\n}\n\n// umulHop computes (hi * 2^64 + lo) = z + (x * y)\nfunc umulHop(z, x, y uint64) (hi, lo uint64) {\n\thi, lo = bits.Mul64(x, y)\n\tlo, carry := bits.Add64(lo, z, 0)\n\thi, _ = bits.Add64(hi, 0, carry)\n\treturn hi, lo\n}\n\n// udivremBy1 divides u by single normalized word d and produces both quotient and remainder.\n// The quotient is stored in provided quot.\nfunc udivremBy1(quot, u []uint64, d uint64) (rem uint64) {\n\treciprocal := reciprocal2by1(d)\n\trem = u[len(u)-1] // Set the top word as remainder.\n\tfor j := len(u) - 2; j \u003e= 0; j-- {\n\t\tquot[j], rem = udivrem2by1(rem, u[j], d, reciprocal)\n\t}\n\treturn rem\n}\n\n// udivremKnuth implements the division of u by normalized multiple word d from the Knuth's division algorithm.\n// The quotient is stored in provided quot - len(u)-len(d) words.\n// Updates u to contain the remainder - len(d) words.\nfunc udivremKnuth(quot, u, d []uint64) {\n\tdh := d[len(d)-1]\n\tdl := d[len(d)-2]\n\treciprocal := reciprocal2by1(dh)\n\n\tfor j := len(u) - len(d) - 1; j \u003e= 0; j-- {\n\t\tu2 := u[j+len(d)]\n\t\tu1 := u[j+len(d)-1]\n\t\tu0 := u[j+len(d)-2]\n\n\t\tvar qhat, rhat uint64\n\t\tif u2 \u003e= dh { // Division overflows.\n\t\t\tqhat = ^uint64(0)\n\t\t\t// TODO: Add \"qhat one to big\" adjustment (not needed for correctness, but helps avoiding \"add back\" case).\n\t\t} else {\n\t\t\tqhat, rhat = udivrem2by1(u2, u1, dh, reciprocal)\n\t\t\tph, pl := bits.Mul64(qhat, dl)\n\t\t\tif ph \u003e rhat || (ph == rhat \u0026\u0026 pl \u003e u0) {\n\t\t\t\tqhat--\n\t\t\t\t// TODO: Add \"qhat one to big\" adjustment (not needed for correctness, but helps avoiding \"add back\" case).\n\t\t\t}\n\t\t}\n\n\t\t// Multiply and subtract.\n\t\tborrow := subMulTo(u[j:], d, qhat)\n\t\tu[j+len(d)] = u2 - borrow\n\t\tif u2 \u003c borrow { // Too much subtracted, add back.\n\t\t\tqhat--\n\t\t\tu[j+len(d)] += addTo(u[j:], d)\n\t\t}\n\n\t\tquot[j] = qhat // Store quotient digit.\n\t}\n}\n\n// isBitSet returns true if bit n-th is set, where n = 0 is LSB.\n// The n must be \u003c= 255.\nfunc (z *Uint) isBitSet(n uint) bool {\n\treturn (z.arr[n/64] \u0026 (1 \u003c\u003c (n % 64))) != 0\n}\n\n// addTo computes x += y.\n// Requires len(x) \u003e= len(y).\nfunc addTo(x, y []uint64) uint64 {\n\tvar carry uint64\n\tfor i := 0; i \u003c len(y); i++ {\n\t\tx[i], carry = bits.Add64(x[i], y[i], carry)\n\t}\n\treturn carry\n}\n\n// subMulTo computes x -= y * multiplier.\n// Requires len(x) \u003e= len(y).\nfunc subMulTo(x, y []uint64, multiplier uint64) uint64 {\n\tvar borrow uint64\n\tfor i := 0; i \u003c len(y); i++ {\n\t\ts, carry1 := bits.Sub64(x[i], borrow, 0)\n\t\tph, pl := bits.Mul64(y[i], multiplier)\n\t\tt, carry2 := bits.Sub64(s, pl, 0)\n\t\tx[i] = t\n\t\tborrow = ph + carry1 + carry2\n\t}\n\treturn borrow\n}\n\n// reciprocal2by1 computes \u003c^d, ^0\u003e / d.\nfunc reciprocal2by1(d uint64) uint64 {\n\treciprocal, _ := bits.Div64(^d, ^uint64(0), d)\n\treturn reciprocal\n}\n\n// udivrem2by1 divides \u003cuh, ul\u003e / d and produces both quotient and remainder.\n// It uses the provided d's reciprocal.\n// Implementation ported from https://github.com/chfast/intx and is based on\n// \"Improved division by invariant integers\", Algorithm 4.\nfunc udivrem2by1(uh, ul, d, reciprocal uint64) (quot, rem uint64) {\n\tqh, ql := bits.Mul64(reciprocal, uh)\n\tql, carry := bits.Add64(ql, ul, 0)\n\tqh, _ = bits.Add64(qh, uh, carry)\n\tqh++\n\n\tr := ul - qh*d\n\n\tif r \u003e ql {\n\t\tqh--\n\t\tr += d\n\t}\n\n\tif r \u003e= d {\n\t\tqh++\n\t\tr -= d\n\t}\n\n\treturn qh, r\n}\n"},{"name":"arithmetic_test.gno","body":"package uint256\n\nimport \"testing\"\n\ntype binOp2Test struct {\n\tx, y, want string\n}\n\nfunc TestAdd(t *testing.T) {\n\ttests := []binOp2Test{\n\t\t{\"0\", \"1\", \"1\"},\n\t\t{\"1\", \"0\", \"1\"},\n\t\t{\"1\", \"1\", \"2\"},\n\t\t{\"1\", \"3\", \"4\"},\n\t\t{\"10\", \"10\", \"20\"},\n\t\t{\"18446744073709551615\", \"18446744073709551615\", \"36893488147419103230\"}, // uint64 overflow\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\twant, err := FromDecimal(tc.want)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := \u0026Uint{}\n\t\tgot.Add(x, y)\n\n\t\tif got.Neq(want) {\n\t\t\tt.Errorf(\"Add(%s, %s) = %v, want %v\", tc.x, tc.y, got.ToString(), want.ToString())\n\t\t}\n\t}\n}\n\nfunc TestSub(t *testing.T) {\n\ttests := []binOp2Test{\n\t\t{\"1\", \"0\", \"1\"},\n\t\t{\"1\", \"1\", \"0\"},\n\t\t{\"10\", \"10\", \"0\"},\n\t\t{\"31337\", \"1337\", \"30000\"},\n\t\t{\"2\", \"3\", \"115792089237316195423570985008687907853269984665640564039457584007913129639935\"}, // underflow\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\twant, err := FromDecimal(tc.want)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := \u0026Uint{}\n\t\tgot.Sub(x, y)\n\n\t\tif got.Neq(want) {\n\t\t\tt.Errorf(\"Sub(%s, %s) = %v, want %v\", tc.x, tc.y, got.ToString(), want.ToString())\n\t\t}\n\t}\n}\n\nfunc TestMul(t *testing.T) {\n\ttests := []binOp2Test{\n\t\t{\"1\", \"0\", \"0\"},\n\t\t{\"1\", \"1\", \"1\"},\n\t\t{\"10\", \"10\", \"100\"},\n\t\t{\"18446744073709551615\", \"2\", \"36893488147419103230\"}, // uint64 overflow\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\twant, err := FromDecimal(tc.want)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := \u0026Uint{}\n\t\tgot.Mul(x, y)\n\n\t\tif got.Neq(want) {\n\t\t\tt.Errorf(\"Mul(%s, %s) = %v, want %v\", tc.x, tc.y, got.ToString(), want.ToString())\n\t\t}\n\t}\n}\n\nfunc TestDiv(t *testing.T) {\n\ttests := []binOp2Test{\n\t\t{\"31337\", \"3\", \"10445\"},\n\t\t{\"31337\", \"0\", \"0\"},\n\t\t{\"0\", \"31337\", \"0\"},\n\t\t{\"1\", \"1\", \"1\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\twant, err := FromDecimal(tc.want)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := \u0026Uint{}\n\t\tgot.Div(x, y)\n\n\t\tif got.Neq(want) {\n\t\t\tt.Errorf(\"Div(%s, %s) = %v, want %v\", tc.x, tc.y, got.ToString(), want.ToString())\n\t\t}\n\t}\n}\n\nfunc TestMod(t *testing.T) {\n\ttests := []binOp2Test{\n\t\t{\"31337\", \"3\", \"2\"},\n\t\t{\"31337\", \"0\", \"0\"},\n\t\t{\"0\", \"31337\", \"0\"},\n\t\t{\"2\", \"31337\", \"2\"},\n\t\t{\"1\", \"1\", \"0\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\twant, err := FromDecimal(tc.want)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := \u0026Uint{}\n\t\tgot.Mod(x, y)\n\n\t\tif got.Neq(want) {\n\t\t\tt.Errorf(\"Mod(%s, %s) = %v, want %v\", tc.x, tc.y, got.ToString(), want.ToString())\n\t\t}\n\t}\n}\n\nfunc TestDivMod(t *testing.T) {\n\ttests := []struct {\n\t\tx       string\n\t\ty       string\n\t\twantDiv string\n\t\twantMod string\n\t}{\n\t\t{\"1\", \"1\", \"1\", \"0\"},\n\t\t{\"10\", \"10\", \"1\", \"0\"},\n\t\t{\"100\", \"10\", \"10\", \"0\"},\n\t\t{\"31337\", \"3\", \"10445\", \"2\"},\n\t\t{\"31337\", \"0\", \"0\", \"0\"},\n\t\t{\"0\", \"31337\", \"0\", \"0\"},\n\t\t{\"2\", \"31337\", \"0\", \"2\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\twantDiv, err := FromDecimal(tc.wantDiv)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\twantMod, err := FromDecimal(tc.wantMod)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgotDiv := new(Uint)\n\t\tgotMod := new(Uint)\n\t\tgotDiv.DivMod(x, y, gotMod)\n\n\t\tfor i := range gotDiv.arr {\n\t\t\tif gotDiv.arr[i] != wantDiv.arr[i] {\n\t\t\t\tt.Errorf(\"DivMod(%s, %s) got Div %v, want Div %v\", tc.x, tc.y, gotDiv, wantDiv)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tfor i := range gotMod.arr {\n\t\t\tif gotMod.arr[i] != wantMod.arr[i] {\n\t\t\t\tt.Errorf(\"DivMod(%s, %s) got Mod %v, want Mod %v\", tc.x, tc.y, gotMod, wantMod)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc TestNeg(t *testing.T) {\n\ttests := []struct {\n\t\tx    string\n\t\twant string\n\t}{\n\t\t{\"31337\", \"115792089237316195423570985008687907853269984665640564039457584007913129608599\"},\n\t\t{\"115792089237316195423570985008687907853269984665640564039457584007913129608599\", \"31337\"},\n\t\t{\"0\", \"0\"},\n\t\t{\"2\", \"115792089237316195423570985008687907853269984665640564039457584007913129639934\"},\n\t\t{\"1\", \"115792089237316195423570985008687907853269984665640564039457584007913129639935\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\twant, err := FromDecimal(tc.want)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := \u0026Uint{}\n\t\tgot.Neg(x)\n\n\t\tif got.Neq(want) {\n\t\t\tt.Errorf(\"Neg(%s) = %v, want %v\", tc.x, got.ToString(), want.ToString())\n\t\t}\n\t}\n}\n\nfunc TestExp(t *testing.T) {\n\ttests := []binOp2Test{\n\t\t{\"31337\", \"3\", \"30773171189753\"},\n\t\t{\"31337\", \"0\", \"1\"},\n\t\t{\"0\", \"31337\", \"0\"},\n\t\t{\"1\", \"1\", \"1\"},\n\t\t{\"2\", \"3\", \"8\"},\n\t\t{\"2\", \"64\", \"18446744073709551616\"},\n\t\t{\"2\", \"128\", \"340282366920938463463374607431768211456\"},\n\t\t{\"2\", \"255\", \"57896044618658097711785492504343953926634992332820282019728792003956564819968\"},\n\t\t{\"2\", \"256\", \"0\"}, // overflow\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\twant, err := FromDecimal(tc.want)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := \u0026Uint{}\n\t\tgot.Exp(x, y)\n\n\t\tif got.Neq(want) {\n\t\t\tt.Errorf(\"Exp(%s, %s) = %v, want %v\", tc.x, tc.y, got.ToString(), want.ToString())\n\t\t}\n\t}\n}\n"},{"name":"bits_table.gno","body":"// Copyright 2017 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Code generated by go run make_tables.go. DO NOT EDIT.\n\npackage uint256\n\nconst ntz8tab = \"\" +\n\t\"\\x08\\x00\\x01\\x00\\x02\\x00\\x01\\x00\\x03\\x00\\x01\\x00\\x02\\x00\\x01\\x00\" +\n\t\"\\x04\\x00\\x01\\x00\\x02\\x00\\x01\\x00\\x03\\x00\\x01\\x00\\x02\\x00\\x01\\x00\" +\n\t\"\\x05\\x00\\x01\\x00\\x02\\x00\\x01\\x00\\x03\\x00\\x01\\x00\\x02\\x00\\x01\\x00\" +\n\t\"\\x04\\x00\\x01\\x00\\x02\\x00\\x01\\x00\\x03\\x00\\x01\\x00\\x02\\x00\\x01\\x00\" +\n\t\"\\x06\\x00\\x01\\x00\\x02\\x00\\x01\\x00\\x03\\x00\\x01\\x00\\x02\\x00\\x01\\x00\" +\n\t\"\\x04\\x00\\x01\\x00\\x02\\x00\\x01\\x00\\x03\\x00\\x01\\x00\\x02\\x00\\x01\\x00\" +\n\t\"\\x05\\x00\\x01\\x00\\x02\\x00\\x01\\x00\\x03\\x00\\x01\\x00\\x02\\x00\\x01\\x00\" +\n\t\"\\x04\\x00\\x01\\x00\\x02\\x00\\x01\\x00\\x03\\x00\\x01\\x00\\x02\\x00\\x01\\x00\" +\n\t\"\\x07\\x00\\x01\\x00\\x02\\x00\\x01\\x00\\x03\\x00\\x01\\x00\\x02\\x00\\x01\\x00\" +\n\t\"\\x04\\x00\\x01\\x00\\x02\\x00\\x01\\x00\\x03\\x00\\x01\\x00\\x02\\x00\\x01\\x00\" +\n\t\"\\x05\\x00\\x01\\x00\\x02\\x00\\x01\\x00\\x03\\x00\\x01\\x00\\x02\\x00\\x01\\x00\" +\n\t\"\\x04\\x00\\x01\\x00\\x02\\x00\\x01\\x00\\x03\\x00\\x01\\x00\\x02\\x00\\x01\\x00\" +\n\t\"\\x06\\x00\\x01\\x00\\x02\\x00\\x01\\x00\\x03\\x00\\x01\\x00\\x02\\x00\\x01\\x00\" +\n\t\"\\x04\\x00\\x01\\x00\\x02\\x00\\x01\\x00\\x03\\x00\\x01\\x00\\x02\\x00\\x01\\x00\" +\n\t\"\\x05\\x00\\x01\\x00\\x02\\x00\\x01\\x00\\x03\\x00\\x01\\x00\\x02\\x00\\x01\\x00\" +\n\t\"\\x04\\x00\\x01\\x00\\x02\\x00\\x01\\x00\\x03\\x00\\x01\\x00\\x02\\x00\\x01\\x00\"\n\nconst pop8tab = \"\" +\n\t\"\\x00\\x01\\x01\\x02\\x01\\x02\\x02\\x03\\x01\\x02\\x02\\x03\\x02\\x03\\x03\\x04\" +\n\t\"\\x01\\x02\\x02\\x03\\x02\\x03\\x03\\x04\\x02\\x03\\x03\\x04\\x03\\x04\\x04\\x05\" +\n\t\"\\x01\\x02\\x02\\x03\\x02\\x03\\x03\\x04\\x02\\x03\\x03\\x04\\x03\\x04\\x04\\x05\" +\n\t\"\\x02\\x03\\x03\\x04\\x03\\x04\\x04\\x05\\x03\\x04\\x04\\x05\\x04\\x05\\x05\\x06\" +\n\t\"\\x01\\x02\\x02\\x03\\x02\\x03\\x03\\x04\\x02\\x03\\x03\\x04\\x03\\x04\\x04\\x05\" +\n\t\"\\x02\\x03\\x03\\x04\\x03\\x04\\x04\\x05\\x03\\x04\\x04\\x05\\x04\\x05\\x05\\x06\" +\n\t\"\\x02\\x03\\x03\\x04\\x03\\x04\\x04\\x05\\x03\\x04\\x04\\x05\\x04\\x05\\x05\\x06\" +\n\t\"\\x03\\x04\\x04\\x05\\x04\\x05\\x05\\x06\\x04\\x05\\x05\\x06\\x05\\x06\\x06\\x07\" +\n\t\"\\x01\\x02\\x02\\x03\\x02\\x03\\x03\\x04\\x02\\x03\\x03\\x04\\x03\\x04\\x04\\x05\" +\n\t\"\\x02\\x03\\x03\\x04\\x03\\x04\\x04\\x05\\x03\\x04\\x04\\x05\\x04\\x05\\x05\\x06\" +\n\t\"\\x02\\x03\\x03\\x04\\x03\\x04\\x04\\x05\\x03\\x04\\x04\\x05\\x04\\x05\\x05\\x06\" +\n\t\"\\x03\\x04\\x04\\x05\\x04\\x05\\x05\\x06\\x04\\x05\\x05\\x06\\x05\\x06\\x06\\x07\" +\n\t\"\\x02\\x03\\x03\\x04\\x03\\x04\\x04\\x05\\x03\\x04\\x04\\x05\\x04\\x05\\x05\\x06\" +\n\t\"\\x03\\x04\\x04\\x05\\x04\\x05\\x05\\x06\\x04\\x05\\x05\\x06\\x05\\x06\\x06\\x07\" +\n\t\"\\x03\\x04\\x04\\x05\\x04\\x05\\x05\\x06\\x04\\x05\\x05\\x06\\x05\\x06\\x06\\x07\" +\n\t\"\\x04\\x05\\x05\\x06\\x05\\x06\\x06\\x07\\x05\\x06\\x06\\x07\\x06\\x07\\x07\\x08\"\n\nconst rev8tab = \"\" +\n\t\"\\x00\\x80\\x40\\xc0\\x20\\xa0\\x60\\xe0\\x10\\x90\\x50\\xd0\\x30\\xb0\\x70\\xf0\" +\n\t\"\\x08\\x88\\x48\\xc8\\x28\\xa8\\x68\\xe8\\x18\\x98\\x58\\xd8\\x38\\xb8\\x78\\xf8\" +\n\t\"\\x04\\x84\\x44\\xc4\\x24\\xa4\\x64\\xe4\\x14\\x94\\x54\\xd4\\x34\\xb4\\x74\\xf4\" +\n\t\"\\x0c\\x8c\\x4c\\xcc\\x2c\\xac\\x6c\\xec\\x1c\\x9c\\x5c\\xdc\\x3c\\xbc\\x7c\\xfc\" +\n\t\"\\x02\\x82\\x42\\xc2\\x22\\xa2\\x62\\xe2\\x12\\x92\\x52\\xd2\\x32\\xb2\\x72\\xf2\" +\n\t\"\\x0a\\x8a\\x4a\\xca\\x2a\\xaa\\x6a\\xea\\x1a\\x9a\\x5a\\xda\\x3a\\xba\\x7a\\xfa\" +\n\t\"\\x06\\x86\\x46\\xc6\\x26\\xa6\\x66\\xe6\\x16\\x96\\x56\\xd6\\x36\\xb6\\x76\\xf6\" +\n\t\"\\x0e\\x8e\\x4e\\xce\\x2e\\xae\\x6e\\xee\\x1e\\x9e\\x5e\\xde\\x3e\\xbe\\x7e\\xfe\" +\n\t\"\\x01\\x81\\x41\\xc1\\x21\\xa1\\x61\\xe1\\x11\\x91\\x51\\xd1\\x31\\xb1\\x71\\xf1\" +\n\t\"\\x09\\x89\\x49\\xc9\\x29\\xa9\\x69\\xe9\\x19\\x99\\x59\\xd9\\x39\\xb9\\x79\\xf9\" +\n\t\"\\x05\\x85\\x45\\xc5\\x25\\xa5\\x65\\xe5\\x15\\x95\\x55\\xd5\\x35\\xb5\\x75\\xf5\" +\n\t\"\\x0d\\x8d\\x4d\\xcd\\x2d\\xad\\x6d\\xed\\x1d\\x9d\\x5d\\xdd\\x3d\\xbd\\x7d\\xfd\" +\n\t\"\\x03\\x83\\x43\\xc3\\x23\\xa3\\x63\\xe3\\x13\\x93\\x53\\xd3\\x33\\xb3\\x73\\xf3\" +\n\t\"\\x0b\\x8b\\x4b\\xcb\\x2b\\xab\\x6b\\xeb\\x1b\\x9b\\x5b\\xdb\\x3b\\xbb\\x7b\\xfb\" +\n\t\"\\x07\\x87\\x47\\xc7\\x27\\xa7\\x67\\xe7\\x17\\x97\\x57\\xd7\\x37\\xb7\\x77\\xf7\" +\n\t\"\\x0f\\x8f\\x4f\\xcf\\x2f\\xaf\\x6f\\xef\\x1f\\x9f\\x5f\\xdf\\x3f\\xbf\\x7f\\xff\"\n\nconst len8tab = \"\" +\n\t\"\\x00\\x01\\x02\\x02\\x03\\x03\\x03\\x03\\x04\\x04\\x04\\x04\\x04\\x04\\x04\\x04\" +\n\t\"\\x05\\x05\\x05\\x05\\x05\\x05\\x05\\x05\\x05\\x05\\x05\\x05\\x05\\x05\\x05\\x05\" +\n\t\"\\x06\\x06\\x06\\x06\\x06\\x06\\x06\\x06\\x06\\x06\\x06\\x06\\x06\\x06\\x06\\x06\" +\n\t\"\\x06\\x06\\x06\\x06\\x06\\x06\\x06\\x06\\x06\\x06\\x06\\x06\\x06\\x06\\x06\\x06\" +\n\t\"\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\" +\n\t\"\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\" +\n\t\"\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\" +\n\t\"\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\\x07\" +\n\t\"\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\" +\n\t\"\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\" +\n\t\"\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\" +\n\t\"\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\" +\n\t\"\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\" +\n\t\"\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\" +\n\t\"\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\" +\n\t\"\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\\x08\"\n"},{"name":"bitwise.gno","body":"// bitwise contains bitwise operations for Uint instances.\n// This file includes functions to perform bitwise AND, OR, XOR, and NOT operations, as well as bit shifting.\n// These operations are crucial for manipulating individual bits within a 256-bit unsigned integer.\npackage uint256\n\n// Or sets z = x | y and returns z.\nfunc (z *Uint) Or(x, y *Uint) *Uint {\n\tz.arr[0] = x.arr[0] | y.arr[0]\n\tz.arr[1] = x.arr[1] | y.arr[1]\n\tz.arr[2] = x.arr[2] | y.arr[2]\n\tz.arr[3] = x.arr[3] | y.arr[3]\n\treturn z\n}\n\n// And sets z = x \u0026 y and returns z.\nfunc (z *Uint) And(x, y *Uint) *Uint {\n\tz.arr[0] = x.arr[0] \u0026 y.arr[0]\n\tz.arr[1] = x.arr[1] \u0026 y.arr[1]\n\tz.arr[2] = x.arr[2] \u0026 y.arr[2]\n\tz.arr[3] = x.arr[3] \u0026 y.arr[3]\n\treturn z\n}\n\n// Not sets z = ^x and returns z.\nfunc (z *Uint) Not(x *Uint) *Uint {\n\tz.arr[3], z.arr[2], z.arr[1], z.arr[0] = ^x.arr[3], ^x.arr[2], ^x.arr[1], ^x.arr[0]\n\treturn z\n}\n\n// AndNot sets z = x \u0026^ y and returns z.\nfunc (z *Uint) AndNot(x, y *Uint) *Uint {\n\tz.arr[0] = x.arr[0] \u0026^ y.arr[0]\n\tz.arr[1] = x.arr[1] \u0026^ y.arr[1]\n\tz.arr[2] = x.arr[2] \u0026^ y.arr[2]\n\tz.arr[3] = x.arr[3] \u0026^ y.arr[3]\n\treturn z\n}\n\n// Xor sets z = x ^ y and returns z.\nfunc (z *Uint) Xor(x, y *Uint) *Uint {\n\tz.arr[0] = x.arr[0] ^ y.arr[0]\n\tz.arr[1] = x.arr[1] ^ y.arr[1]\n\tz.arr[2] = x.arr[2] ^ y.arr[2]\n\tz.arr[3] = x.arr[3] ^ y.arr[3]\n\treturn z\n}\n\n// Lsh sets z = x \u003c\u003c n and returns z.\nfunc (z *Uint) Lsh(x *Uint, n uint) *Uint {\n\t// n % 64 == 0\n\tif n\u00260x3f == 0 {\n\t\tswitch n {\n\t\tcase 0:\n\t\t\treturn z.Set(x)\n\t\tcase 64:\n\t\t\treturn z.lsh64(x)\n\t\tcase 128:\n\t\t\treturn z.lsh128(x)\n\t\tcase 192:\n\t\t\treturn z.lsh192(x)\n\t\tdefault:\n\t\t\treturn z.Clear()\n\t\t}\n\t}\n\tvar a, b uint64\n\t// Big swaps first\n\tswitch {\n\tcase n \u003e 192:\n\t\tif n \u003e 256 {\n\t\t\treturn z.Clear()\n\t\t}\n\t\tz.lsh192(x)\n\t\tn -= 192\n\t\tgoto sh192\n\tcase n \u003e 128:\n\t\tz.lsh128(x)\n\t\tn -= 128\n\t\tgoto sh128\n\tcase n \u003e 64:\n\t\tz.lsh64(x)\n\t\tn -= 64\n\t\tgoto sh64\n\tdefault:\n\t\tz.Set(x)\n\t}\n\n\t// remaining shifts\n\ta = z.arr[0] \u003e\u003e (64 - n)\n\tz.arr[0] = z.arr[0] \u003c\u003c n\n\nsh64:\n\tb = z.arr[1] \u003e\u003e (64 - n)\n\tz.arr[1] = (z.arr[1] \u003c\u003c n) | a\n\nsh128:\n\ta = z.arr[2] \u003e\u003e (64 - n)\n\tz.arr[2] = (z.arr[2] \u003c\u003c n) | b\n\nsh192:\n\tz.arr[3] = (z.arr[3] \u003c\u003c n) | a\n\n\treturn z\n}\n\n// Rsh sets z = x \u003e\u003e n and returns z.\nfunc (z *Uint) Rsh(x *Uint, n uint) *Uint {\n\t// n % 64 == 0\n\tif n\u00260x3f == 0 {\n\t\tswitch n {\n\t\tcase 0:\n\t\t\treturn z.Set(x)\n\t\tcase 64:\n\t\t\treturn z.rsh64(x)\n\t\tcase 128:\n\t\t\treturn z.rsh128(x)\n\t\tcase 192:\n\t\t\treturn z.rsh192(x)\n\t\tdefault:\n\t\t\treturn z.Clear()\n\t\t}\n\t}\n\tvar a, b uint64\n\t// Big swaps first\n\tswitch {\n\tcase n \u003e 192:\n\t\tif n \u003e 256 {\n\t\t\treturn z.Clear()\n\t\t}\n\t\tz.rsh192(x)\n\t\tn -= 192\n\t\tgoto sh192\n\tcase n \u003e 128:\n\t\tz.rsh128(x)\n\t\tn -= 128\n\t\tgoto sh128\n\tcase n \u003e 64:\n\t\tz.rsh64(x)\n\t\tn -= 64\n\t\tgoto sh64\n\tdefault:\n\t\tz.Set(x)\n\t}\n\n\t// remaining shifts\n\ta = z.arr[3] \u003c\u003c (64 - n)\n\tz.arr[3] = z.arr[3] \u003e\u003e n\n\nsh64:\n\tb = z.arr[2] \u003c\u003c (64 - n)\n\tz.arr[2] = (z.arr[2] \u003e\u003e n) | a\n\nsh128:\n\ta = z.arr[1] \u003c\u003c (64 - n)\n\tz.arr[1] = (z.arr[1] \u003e\u003e n) | b\n\nsh192:\n\tz.arr[0] = (z.arr[0] \u003e\u003e n) | a\n\n\treturn z\n}\n\n// SRsh (Signed/Arithmetic right shift)\n// considers z to be a signed integer, during right-shift\n// and sets z = x \u003e\u003e n and returns z.\nfunc (z *Uint) SRsh(x *Uint, n uint) *Uint {\n\t// If the MSB is 0, SRsh is same as Rsh.\n\tif !x.isBitSet(255) {\n\t\treturn z.Rsh(x, n)\n\t}\n\tif n%64 == 0 {\n\t\tswitch n {\n\t\tcase 0:\n\t\t\treturn z.Set(x)\n\t\tcase 64:\n\t\t\treturn z.srsh64(x)\n\t\tcase 128:\n\t\t\treturn z.srsh128(x)\n\t\tcase 192:\n\t\t\treturn z.srsh192(x)\n\t\tdefault:\n\t\t\treturn z.SetAllOne()\n\t\t}\n\t}\n\tvar a uint64 = MaxUint64 \u003c\u003c (64 - n%64)\n\t// Big swaps first\n\tswitch {\n\tcase n \u003e 192:\n\t\tif n \u003e 256 {\n\t\t\treturn z.SetAllOne()\n\t\t}\n\t\tz.srsh192(x)\n\t\tn -= 192\n\t\tgoto sh192\n\tcase n \u003e 128:\n\t\tz.srsh128(x)\n\t\tn -= 128\n\t\tgoto sh128\n\tcase n \u003e 64:\n\t\tz.srsh64(x)\n\t\tn -= 64\n\t\tgoto sh64\n\tdefault:\n\t\tz.Set(x)\n\t}\n\n\t// remaining shifts\n\tz.arr[3], a = (z.arr[3]\u003e\u003en)|a, z.arr[3]\u003c\u003c(64-n)\n\nsh64:\n\tz.arr[2], a = (z.arr[2]\u003e\u003en)|a, z.arr[2]\u003c\u003c(64-n)\n\nsh128:\n\tz.arr[1], a = (z.arr[1]\u003e\u003en)|a, z.arr[1]\u003c\u003c(64-n)\n\nsh192:\n\tz.arr[0] = (z.arr[0] \u003e\u003e n) | a\n\n\treturn z\n}\n\nfunc (z *Uint) lsh64(x *Uint) *Uint {\n\tz.arr[3], z.arr[2], z.arr[1], z.arr[0] = x.arr[2], x.arr[1], x.arr[0], 0\n\treturn z\n}\n\nfunc (z *Uint) lsh128(x *Uint) *Uint {\n\tz.arr[3], z.arr[2], z.arr[1], z.arr[0] = x.arr[1], x.arr[0], 0, 0\n\treturn z\n}\n\nfunc (z *Uint) lsh192(x *Uint) *Uint {\n\tz.arr[3], z.arr[2], z.arr[1], z.arr[0] = x.arr[0], 0, 0, 0\n\treturn z\n}\n\nfunc (z *Uint) rsh64(x *Uint) *Uint {\n\tz.arr[3], z.arr[2], z.arr[1], z.arr[0] = 0, x.arr[3], x.arr[2], x.arr[1]\n\treturn z\n}\n\nfunc (z *Uint) rsh128(x *Uint) *Uint {\n\tz.arr[3], z.arr[2], z.arr[1], z.arr[0] = 0, 0, x.arr[3], x.arr[2]\n\treturn z\n}\n\nfunc (z *Uint) rsh192(x *Uint) *Uint {\n\tz.arr[3], z.arr[2], z.arr[1], z.arr[0] = 0, 0, 0, x.arr[3]\n\treturn z\n}\n\nfunc (z *Uint) srsh64(x *Uint) *Uint {\n\tz.arr[3], z.arr[2], z.arr[1], z.arr[0] = MaxUint64, x.arr[3], x.arr[2], x.arr[1]\n\treturn z\n}\n\nfunc (z *Uint) srsh128(x *Uint) *Uint {\n\tz.arr[3], z.arr[2], z.arr[1], z.arr[0] = MaxUint64, MaxUint64, x.arr[3], x.arr[2]\n\treturn z\n}\n\nfunc (z *Uint) srsh192(x *Uint) *Uint {\n\tz.arr[3], z.arr[2], z.arr[1], z.arr[0] = MaxUint64, MaxUint64, MaxUint64, x.arr[3]\n\treturn z\n}\n"},{"name":"bitwise_test.gno","body":"package uint256\n\nimport (\n\t\"testing\"\n)\n\ntype logicOpTest struct {\n\tname string\n\tx    Uint\n\ty    Uint\n\twant Uint\n}\n\nfunc TestOr(t *testing.T) {\n\ttests := []logicOpTest{\n\t\t{\n\t\t\tname: \"all zeros\",\n\t\t\tx:    Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t\ty:    Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t\twant: Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t},\n\t\t{\n\t\t\tname: \"all ones\",\n\t\t\tx:    Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t\ty:    Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t\twant: Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t},\n\t\t{\n\t\t\tname: \"mixed\",\n\t\t\tx:    Uint{arr: [4]uint64{^uint64(0), ^uint64(0), 0, 0}},\n\t\t\ty:    Uint{arr: [4]uint64{0, 0, ^uint64(0), ^uint64(0)}},\n\t\t\twant: Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t},\n\t\t{\n\t\t\tname: \"one operand all ones\",\n\t\t\tx:    Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t\ty:    Uint{arr: [4]uint64{0x5555555555555555, 0xAAAAAAAAAAAAAAAA, 0xFFFFFFFFFFFFFFFF, 0x0000000000000000}},\n\t\t\twant: Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t},\n\t}\n\n\tfor _, tc := range tests {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tres := new(Uint).Or(\u0026tc.x, \u0026tc.y)\n\t\t\tif *res != tc.want {\n\t\t\t\tt.Errorf(\"Or(%s, %s) = %s, want %s\", tc.x.ToString(), tc.y.ToString(), res.ToString(), (tc.want).ToString())\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestAnd(t *testing.T) {\n\ttests := []logicOpTest{\n\t\t{\n\t\t\tname: \"all zeros\",\n\t\t\tx:    Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t\ty:    Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t\twant: Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t},\n\t\t{\n\t\t\tname: \"all ones\",\n\t\t\tx:    Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t\ty:    Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t\twant: Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t},\n\t\t{\n\t\t\tname: \"mixed\",\n\t\t\tx:    Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t\ty:    Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t\twant: Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t},\n\t\t{\n\t\t\tname: \"mixed 2\",\n\t\t\tx:    Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t\ty:    Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t\twant: Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t},\n\t\t{\n\t\t\tname: \"mixed 3\",\n\t\t\tx:    Uint{arr: [4]uint64{^uint64(0), ^uint64(0), 0, 0}},\n\t\t\ty:    Uint{arr: [4]uint64{0, 0, ^uint64(0), ^uint64(0)}},\n\t\t\twant: Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t},\n\t\t{\n\t\t\tname: \"one operand zero\",\n\t\t\tx:    Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t\ty:    Uint{arr: [4]uint64{0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF}},\n\t\t\twant: Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t},\n\t\t{\n\t\t\tname: \"one operand all ones\",\n\t\t\tx:    Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t\ty:    Uint{arr: [4]uint64{0x5555555555555555, 0xAAAAAAAAAAAAAAAA, 0xFFFFFFFFFFFFFFFF, 0x0000000000000000}},\n\t\t\twant: Uint{arr: [4]uint64{0x5555555555555555, 0xAAAAAAAAAAAAAAAA, 0xFFFFFFFFFFFFFFFF, 0x0000000000000000}},\n\t\t},\n\t}\n\n\tfor _, tc := range tests {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tres := new(Uint).And(\u0026tc.x, \u0026tc.y)\n\t\t\tif *res != tc.want {\n\t\t\t\tt.Errorf(\"And(%s, %s) = %s, want %s\", tc.x.ToString(), tc.y.ToString(), res.ToString(), (tc.want).ToString())\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestNot(t *testing.T) {\n\ttests := []struct {\n\t\tname string\n\t\tx    Uint\n\t\twant Uint\n\t}{\n\t\t{\n\t\t\tname: \"all zeros\",\n\t\t\tx:    Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t\twant: Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t},\n\t\t{\n\t\t\tname: \"all ones\",\n\t\t\tx:    Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t\twant: Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t},\n\t\t{\n\t\t\tname: \"mixed\",\n\t\t\tx:    Uint{arr: [4]uint64{^uint64(0), ^uint64(0), 0, 0}},\n\t\t\twant: Uint{arr: [4]uint64{0, 0, ^uint64(0), ^uint64(0)}},\n\t\t},\n\t}\n\n\tfor _, tc := range tests {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tres := new(Uint).Not(\u0026tc.x)\n\t\t\tif *res != tc.want {\n\t\t\t\tt.Errorf(\"Not(%s) = %s, want %s\", tc.x.ToString(), res.ToString(), (tc.want).ToString())\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestAndNot(t *testing.T) {\n\ttests := []logicOpTest{\n\t\t{\n\t\t\tname: \"all zeros\",\n\t\t\tx:    Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t\ty:    Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t\twant: Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t},\n\t\t{\n\t\t\tname: \"all ones\",\n\t\t\tx:    Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t\ty:    Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t\twant: Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t},\n\t\t{\n\t\t\tname: \"mixed\",\n\t\t\tx:    Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t\ty:    Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t\twant: Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t},\n\t\t{\n\t\t\tname: \"mixed 2\",\n\t\t\tx:    Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t\ty:    Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t\twant: Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t},\n\t\t{\n\t\t\tname: \"mixed 3\",\n\t\t\tx:    Uint{arr: [4]uint64{^uint64(0), ^uint64(0), 0, 0}},\n\t\t\ty:    Uint{arr: [4]uint64{0, 0, ^uint64(0), ^uint64(0)}},\n\t\t\twant: Uint{arr: [4]uint64{^uint64(0), ^uint64(0), 0, 0}},\n\t\t},\n\t\t{\n\t\t\tname: \"one operand zero\",\n\t\t\tx:    Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t\ty:    Uint{arr: [4]uint64{0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF}},\n\t\t\twant: Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t},\n\t\t{\n\t\t\tname: \"one operand all ones\",\n\t\t\tx:    Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t\ty:    Uint{arr: [4]uint64{0x5555555555555555, 0xAAAAAAAAAAAAAAAA, 0xFFFFFFFFFFFFFFFF, 0x0000000000000000}},\n\t\t\twant: Uint{arr: [4]uint64{0xAAAAAAAAAAAAAAAA, 0x5555555555555555, 0x0000000000000000, ^uint64(0)}},\n\t\t},\n\t}\n\n\tfor _, tc := range tests {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tres := new(Uint).AndNot(\u0026tc.x, \u0026tc.y)\n\t\t\tif *res != tc.want {\n\t\t\t\tt.Errorf(\"AndNot(%s, %s) = %s, want %s\", tc.x.ToString(), tc.y.ToString(), res.ToString(), (tc.want).ToString())\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestXor(t *testing.T) {\n\ttests := []logicOpTest{\n\t\t{\n\t\t\tname: \"all zeros\",\n\t\t\tx:    Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t\ty:    Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t\twant: Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t},\n\t\t{\n\t\t\tname: \"all ones\",\n\t\t\tx:    Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t\ty:    Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t\twant: Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t},\n\t\t{\n\t\t\tname: \"mixed\",\n\t\t\tx:    Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t\ty:    Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t\twant: Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t},\n\t\t{\n\t\t\tname: \"mixed 2\",\n\t\t\tx:    Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t\ty:    Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t\twant: Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t},\n\t\t{\n\t\t\tname: \"mixed 3\",\n\t\t\tx:    Uint{arr: [4]uint64{^uint64(0), ^uint64(0), 0, 0}},\n\t\t\ty:    Uint{arr: [4]uint64{0, 0, ^uint64(0), ^uint64(0)}},\n\t\t\twant: Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t},\n\t\t{\n\t\t\tname: \"one operand zero\",\n\t\t\tx:    Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t\ty:    Uint{arr: [4]uint64{0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF}},\n\t\t\twant: Uint{arr: [4]uint64{0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF}},\n\t\t},\n\t\t{\n\t\t\tname: \"one operand all ones\",\n\t\t\tx:    Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t\ty:    Uint{arr: [4]uint64{0x5555555555555555, 0xAAAAAAAAAAAAAAAA, 0xFFFFFFFFFFFFFFFF, 0x0000000000000000}},\n\t\t\twant: Uint{arr: [4]uint64{0xAAAAAAAAAAAAAAAA, 0x5555555555555555, 0x0000000000000000, ^uint64(0)}},\n\t\t},\n\t}\n\n\tfor _, tc := range tests {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tres := new(Uint).Xor(\u0026tc.x, \u0026tc.y)\n\t\t\tif *res != tc.want {\n\t\t\t\tt.Errorf(\"Xor(%s, %s) = %s, want %s\", tc.x.ToString(), tc.y.ToString(), res.ToString(), (tc.want).ToString())\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestLsh(t *testing.T) {\n\ttests := []struct {\n\t\tx    string\n\t\ty    uint\n\t\twant string\n\t}{\n\t\t{\"0\", 0, \"0\"},\n\t\t{\"0\", 1, \"0\"},\n\t\t{\"0\", 64, \"0\"},\n\t\t{\"1\", 0, \"1\"},\n\t\t{\"1\", 1, \"2\"},\n\t\t{\"1\", 64, \"18446744073709551616\"},\n\t\t{\"1\", 128, \"340282366920938463463374607431768211456\"},\n\t\t{\"1\", 192, \"6277101735386680763835789423207666416102355444464034512896\"},\n\t\t{\"1\", 255, \"57896044618658097711785492504343953926634992332820282019728792003956564819968\"},\n\t\t{\"1\", 256, \"0\"},\n\t\t{\"31337\", 0, \"31337\"},\n\t\t{\"31337\", 1, \"62674\"},\n\t\t{\"31337\", 64, \"578065619037836218990592\"},\n\t\t{\"31337\", 128, \"10663428532201448629551770073089320442396672\"},\n\t\t{\"31337\", 192, \"196705537081812415096322133155058642481399512563169449530621952\"},\n\t\t{\"31337\", 193, \"393411074163624830192644266310117284962799025126338899061243904\"},\n\t\t{\"31337\", 255, \"57896044618658097711785492504343953926634992332820282019728792003956564819968\"},\n\t\t{\"31337\", 256, \"0\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\twant, err := FromDecimal(tc.want)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := \u0026Uint{}\n\t\tgot.Lsh(x, tc.y)\n\n\t\tif got.Neq(want) {\n\t\t\tt.Errorf(\"Lsh(%s, %d) = %s, want %s\", tc.x, tc.y, got.ToString(), want.ToString())\n\t\t}\n\t}\n}\n\nfunc TestRsh(t *testing.T) {\n\ttests := []struct {\n\t\tx    string\n\t\ty    uint\n\t\twant string\n\t}{\n\t\t{\"0\", 0, \"0\"},\n\t\t{\"0\", 1, \"0\"},\n\t\t{\"0\", 64, \"0\"},\n\t\t{\"1\", 0, \"1\"},\n\t\t{\"1\", 1, \"0\"},\n\t\t{\"1\", 64, \"0\"},\n\t\t{\"1\", 128, \"0\"},\n\t\t{\"1\", 192, \"0\"},\n\t\t{\"1\", 255, \"0\"},\n\t\t{\"57896044618658097711785492504343953926634992332820282019728792003956564819968\", 255, \"1\"},\n\t\t{\"6277101735386680763835789423207666416102355444464034512896\", 192, \"1\"},\n\t\t{\"340282366920938463463374607431768211456\", 128, \"1\"},\n\t\t{\"18446744073709551616\", 64, \"1\"},\n\t\t{\"393411074163624830192644266310117284962799025126338899061243904\", 193, \"31337\"},\n\t\t{\"196705537081812415096322133155058642481399512563169449530621952\", 192, \"31337\"},\n\t\t{\"10663428532201448629551770073089320442396672\", 128, \"31337\"},\n\t\t{\"578065619037836218990592\", 64, \"31337\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\twant, err := FromDecimal(tc.want)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := \u0026Uint{}\n\t\tgot.Rsh(x, tc.y)\n\n\t\tif got.Neq(want) {\n\t\t\tt.Errorf(\"Rsh(%s, %d) = %s, want %s\", tc.x, tc.y, got.ToString(), want.ToString())\n\t\t}\n\t}\n}\n"},{"name":"cmp.gno","body":"// cmp (or, comparisons) includes methods for comparing Uint instances.\n// These comparison functions cover a range of operations including equality checks, less than/greater than\n// evaluations, and specialized comparisons such as signed greater than. These are fundamental for logical\n// decision making based on Uint values.\npackage uint256\n\nimport (\n\t\"math/bits\"\n)\n\n// Cmp compares z and x and returns:\n//\n//\t-1 if z \u003c  x\n//\t 0 if z == x\n//\t+1 if z \u003e  x\nfunc (z *Uint) Cmp(x *Uint) (r int) {\n\t// z \u003c x \u003c=\u003e z - x \u003c 0 i.e. when subtraction overflows.\n\td0, carry := bits.Sub64(z.arr[0], x.arr[0], 0)\n\td1, carry := bits.Sub64(z.arr[1], x.arr[1], carry)\n\td2, carry := bits.Sub64(z.arr[2], x.arr[2], carry)\n\td3, carry := bits.Sub64(z.arr[3], x.arr[3], carry)\n\tif carry == 1 {\n\t\treturn -1\n\t}\n\tif d0|d1|d2|d3 == 0 {\n\t\treturn 0\n\t}\n\treturn 1\n}\n\n// IsZero returns true if z == 0\nfunc (z *Uint) IsZero() bool {\n\treturn (z.arr[0] | z.arr[1] | z.arr[2] | z.arr[3]) == 0\n}\n\n// Sign returns:\n//\n//\t-1 if z \u003c  0\n//\t 0 if z == 0\n//\t+1 if z \u003e  0\n//\n// Where z is interpreted as a two's complement signed number\nfunc (z *Uint) Sign() int {\n\tif z.IsZero() {\n\t\treturn 0\n\t}\n\tif z.arr[3] \u003c 0x8000000000000000 {\n\t\treturn 1\n\t}\n\treturn -1\n}\n\n// LtUint64 returns true if z is smaller than n\nfunc (z *Uint) LtUint64(n uint64) bool {\n\treturn z.arr[0] \u003c n \u0026\u0026 (z.arr[1]|z.arr[2]|z.arr[3]) == 0\n}\n\n// GtUint64 returns true if z is larger than n\nfunc (z *Uint) GtUint64(n uint64) bool {\n\treturn z.arr[0] \u003e n || (z.arr[1]|z.arr[2]|z.arr[3]) != 0\n}\n\n// Lt returns true if z \u003c x\nfunc (z *Uint) Lt(x *Uint) bool {\n\t// z \u003c x \u003c=\u003e z - x \u003c 0 i.e. when subtraction overflows.\n\t_, carry := bits.Sub64(z.arr[0], x.arr[0], 0)\n\t_, carry = bits.Sub64(z.arr[1], x.arr[1], carry)\n\t_, carry = bits.Sub64(z.arr[2], x.arr[2], carry)\n\t_, carry = bits.Sub64(z.arr[3], x.arr[3], carry)\n\n\treturn carry != 0\n}\n\n// Gt returns true if z \u003e x\nfunc (z *Uint) Gt(x *Uint) bool {\n\treturn x.Lt(z)\n}\n\n// Lte returns true if z \u003c= x\nfunc (z *Uint) Lte(x *Uint) bool {\n\tcond1 := z.Lt(x)\n\tcond2 := z.Eq(x)\n\n\tif cond1 || cond2 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// Gte returns true if z \u003e= x\nfunc (z *Uint) Gte(x *Uint) bool {\n\tcond1 := z.Gt(x)\n\tcond2 := z.Eq(x)\n\n\tif cond1 || cond2 {\n\t\treturn true\n\t}\n\treturn false\n}\n\n// Eq returns true if z == x\nfunc (z *Uint) Eq(x *Uint) bool {\n\treturn (z.arr[0] == x.arr[0]) \u0026\u0026 (z.arr[1] == x.arr[1]) \u0026\u0026 (z.arr[2] == x.arr[2]) \u0026\u0026 (z.arr[3] == x.arr[3])\n}\n\n// Neq returns true if z != x\nfunc (z *Uint) Neq(x *Uint) bool {\n\treturn !z.Eq(x)\n}\n\n// Sgt interprets z and x as signed integers, and returns\n// true if z \u003e x\nfunc (z *Uint) Sgt(x *Uint) bool {\n\tzSign := z.Sign()\n\txSign := x.Sign()\n\n\tswitch {\n\tcase zSign \u003e= 0 \u0026\u0026 xSign \u003c 0:\n\t\treturn true\n\tcase zSign \u003c 0 \u0026\u0026 xSign \u003e= 0:\n\t\treturn false\n\tdefault:\n\t\treturn z.Gt(x)\n\t}\n}\n"},{"name":"cmp_test.gno","body":"package uint256\n\nimport (\n\t\"strings\"\n\t\"testing\"\n)\n\nfunc TestCmp(t *testing.T) {\n\ttests := []struct {\n\t\tx, y string\n\t\twant int\n\t}{\n\t\t{\"0\", \"0\", 0},\n\t\t{\"0\", \"1\", -1},\n\t\t{\"1\", \"0\", 1},\n\t\t{\"1\", \"1\", 0},\n\t\t{\"10\", \"10\", 0},\n\t\t{\"10\", \"11\", -1},\n\t\t{\"11\", \"10\", 1},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := x.Cmp(y)\n\t\tif got != tc.want {\n\t\t\tt.Errorf(\"Cmp(%s, %s) = %v, want %v\", tc.x, tc.y, got, tc.want)\n\t\t}\n\t}\n}\n\nfunc TestIsZero(t *testing.T) {\n\ttests := []struct {\n\t\tx    string\n\t\twant bool\n\t}{\n\t\t{\"0\", true},\n\t\t{\"1\", false},\n\t\t{\"10\", false},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := x.IsZero()\n\t\tif got != tc.want {\n\t\t\tt.Errorf(\"IsZero(%s) = %v, want %v\", tc.x, got, tc.want)\n\t\t}\n\t}\n}\n\nfunc TestLtUint64(t *testing.T) {\n\ttests := []struct {\n\t\tx    string\n\t\ty    uint64\n\t\twant bool\n\t}{\n\t\t{\"0\", 1, true},\n\t\t{\"1\", 0, false},\n\t\t{\"10\", 10, false},\n\t\t{\"0xffffffffffffffff\", 0, false},\n\t\t{\"0x10000000000000000\", 10000000000000000, false},\n\t}\n\n\tfor _, tc := range tests {\n\t\tvar x *Uint\n\t\tvar err error\n\n\t\tif strings.HasPrefix(tc.x, \"0x\") {\n\t\t\tx, err = FromHex(tc.x)\n\t\t\tif err != nil {\n\t\t\t\tt.Error(err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t} else {\n\t\t\tx, err = FromDecimal(tc.x)\n\t\t\tif err != nil {\n\t\t\t\tt.Error(err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\tgot := x.LtUint64(tc.y)\n\n\t\tif got != tc.want {\n\t\t\tt.Errorf(\"LtUint64(%s, %d) = %v, want %v\", tc.x, tc.y, got, tc.want)\n\t\t}\n\t}\n}\n\nfunc TestSGT(t *testing.T) {\n\tx := MustFromHex(\"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\")\n\ty := MustFromHex(\"0x0\")\n\tactual := x.Sgt(y)\n\tif actual {\n\t\tt.Fatalf(\"Expected %v false\", actual)\n\t}\n\n\tx = MustFromHex(\"0x0\")\n\ty = MustFromHex(\"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\")\n\tactual = x.Sgt(y)\n\tif !actual {\n\t\tt.Fatalf(\"Expected %v true\", actual)\n\t}\n}\n\nfunc TestEq(t *testing.T) {\n\ttests := []struct {\n\t\tx    string\n\t\ty    string\n\t\twant bool\n\t}{\n\t\t{\"0xffffffffffffffff\", \"18446744073709551615\", true},\n\t\t{\"0x10000000000000000\", \"18446744073709551616\", true},\n\t\t{\"0\", \"0\", true},\n\t\t{\"115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"115792089237316195423570985008687907853269984665640564039457584007913129639935\", true},\n\t}\n\n\tfor i, tc := range tests {\n\t\tvar x *Uint\n\t\tvar err error\n\n\t\tif strings.HasPrefix(tc.x, \"0x\") {\n\t\t\tx, err = FromHex(tc.x)\n\t\t\tif err != nil {\n\t\t\t\tt.Error(err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t} else {\n\t\t\tx, err = FromDecimal(tc.x)\n\t\t\tif err != nil {\n\t\t\t\tt.Error(err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\ty, err := FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := x.Eq(y)\n\n\t\tif got != tc.want {\n\t\t\tt.Errorf(\"Eq(%s, %s) = %v, want %v\", tc.x, tc.y, got, tc.want)\n\t\t}\n\t}\n}\n"},{"name":"conversion.gno","body":"// conversions contains methods for converting Uint instances to other types and vice versa.\n// This includes conversions to and from basic types such as uint64 and int32, as well as string representations\n// and byte slices. Additionally, it covers marshaling and unmarshaling for JSON and other text formats.\npackage uint256\n\nimport (\n\t\"encoding/binary\"\n\t\"errors\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// Uint64 returns the lower 64-bits of z\nfunc (z *Uint) Uint64() uint64 {\n\treturn z.arr[0]\n}\n\n// Uint64WithOverflow returns the lower 64-bits of z and bool whether overflow occurred\nfunc (z *Uint) Uint64WithOverflow() (uint64, bool) {\n\treturn z.arr[0], (z.arr[1] | z.arr[2] | z.arr[3]) != 0\n}\n\n// SetUint64 sets z to the value x\nfunc (z *Uint) SetUint64(x uint64) *Uint {\n\tz.arr[3], z.arr[2], z.arr[1], z.arr[0] = 0, 0, 0, x\n\treturn z\n}\n\n// IsUint64 reports whether z can be represented as a uint64.\nfunc (z *Uint) IsUint64() bool {\n\treturn (z.arr[1] | z.arr[2] | z.arr[3]) == 0\n}\n\n// Dec returns the decimal representation of z.\nfunc (z *Uint) Dec() string {\n\tif z.IsZero() {\n\t\treturn \"0\"\n\t}\n\tif z.IsUint64() {\n\t\treturn strconv.FormatUint(z.Uint64(), 10)\n\t}\n\n\t// The max uint64 value being 18446744073709551615, the largest\n\t// power-of-ten below that is 10000000000000000000.\n\t// When we do a DivMod using that number, the remainder that we\n\t// get back is the lower part of the output.\n\t//\n\t// The ascii-output of remainder will never exceed 19 bytes (since it will be\n\t// below 10000000000000000000).\n\t//\n\t// Algorithm example using 100 as divisor\n\t//\n\t// 12345 % 100 = 45   (rem)\n\t// 12345 / 100 = 123  (quo)\n\t// -\u003e output '45', continue iterate on 123\n\tvar (\n\t\t// out is 98 bytes long: 78 (max size of a string without leading zeroes,\n\t\t// plus slack so we can copy 19 bytes every iteration).\n\t\t// We init it with zeroes, because when strconv appends the ascii representations,\n\t\t// it will omit leading zeroes.\n\t\tout     = []byte(\"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\")\n\t\tdivisor = NewUint(10000000000000000000) // 20 digits\n\t\ty       = new(Uint).Set(z)              // copy to avoid modifying z\n\t\tpos     = len(out)                      // position to write to\n\t\tbuf     = make([]byte, 0, 19)           // buffer to write uint64:s to\n\t)\n\tfor {\n\t\t// Obtain Q and R for divisor\n\t\tvar quot Uint\n\t\trem := udivrem(quot.arr[:], y.arr[:], divisor)\n\t\ty.Set(\u0026quot) // Set Q for next loop\n\t\t// Convert the R to ascii representation\n\t\tbuf = strconv.AppendUint(buf[:0], rem.Uint64(), 10)\n\t\t// Copy in the ascii digits\n\t\tcopy(out[pos-len(buf):], buf)\n\t\tif y.IsZero() {\n\t\t\tbreak\n\t\t}\n\t\t// Move 19 digits left\n\t\tpos -= 19\n\t}\n\t// skip leading zeroes by only using the 'used size' of buf\n\treturn string(out[pos-len(buf):])\n}\n\nfunc (z *Uint) Scan(src interface{}) error {\n\tif src == nil {\n\t\tz.Clear()\n\t\treturn nil\n\t}\n\n\tswitch src := src.(type) {\n\tcase string:\n\t\treturn z.scanScientificFromString(src)\n\tcase []byte:\n\t\treturn z.scanScientificFromString(string(src))\n\t}\n\treturn errors.New(\"default // unsupported type: can't convert to uint256.Uint\")\n}\n\nfunc (z *Uint) scanScientificFromString(src string) error {\n\tif len(src) == 0 {\n\t\tz.Clear()\n\t\treturn nil\n\t}\n\n\tidx := strings.IndexByte(src, 'e')\n\tif idx == -1 {\n\t\treturn z.SetFromDecimal(src)\n\t}\n\tif err := z.SetFromDecimal(src[:idx]); err != nil {\n\t\treturn err\n\t}\n\tif src[(idx+1):] == \"0\" {\n\t\treturn nil\n\t}\n\texp := new(Uint)\n\tif err := exp.SetFromDecimal(src[(idx + 1):]); err != nil {\n\t\treturn err\n\t}\n\tif exp.GtUint64(77) { // 10**78 is larger than 2**256\n\t\treturn ErrBig256Range\n\t}\n\texp.Exp(NewUint(10), exp)\n\tif _, overflow := z.MulOverflow(z, exp); overflow {\n\t\treturn ErrBig256Range\n\t}\n\treturn nil\n}\n\n// ToString returns the decimal string representation of z. It returns an empty string if z is nil.\n// OBS: doesn't exist from holiman's uint256\nfunc (z *Uint) ToString() string {\n\tif z == nil {\n\t\treturn \"\"\n\t}\n\n\treturn z.Dec()\n}\n\n// MarshalJSON implements json.Marshaler.\n// MarshalJSON marshals using the 'decimal string' representation. This is _not_ compatible\n// with big.Uint: big.Uint marshals into JSON 'native' numeric format.\n//\n// The JSON  native format is, on some platforms, (e.g. javascript), limited to 53-bit large\n// integer space. Thus, U256 uses string-format, which is not compatible with\n// big.int (big.Uint refuses to unmarshal a string representation).\nfunc (z *Uint) MarshalJSON() ([]byte, error) {\n\treturn []byte(`\"` + z.Dec() + `\"`), nil\n}\n\n// UnmarshalJSON implements json.Unmarshaler. UnmarshalJSON accepts either\n// - Quoted string: either hexadecimal OR decimal\n// - Not quoted string: only decimal\nfunc (z *Uint) UnmarshalJSON(input []byte) error {\n\tif len(input) \u003c 2 || input[0] != '\"' || input[len(input)-1] != '\"' {\n\t\t// if not quoted, it must be decimal\n\t\treturn z.fromDecimal(string(input))\n\t}\n\treturn z.UnmarshalText(input[1 : len(input)-1])\n}\n\n// MarshalText implements encoding.TextMarshaler\n// MarshalText marshals using the decimal representation (compatible with big.Uint)\nfunc (z *Uint) MarshalText() ([]byte, error) {\n\treturn []byte(z.Dec()), nil\n}\n\n// UnmarshalText implements encoding.TextUnmarshaler. This method\n// can unmarshal either hexadecimal or decimal.\n// - For hexadecimal, the input _must_ be prefixed with 0x or 0X\nfunc (z *Uint) UnmarshalText(input []byte) error {\n\tif len(input) \u003e= 2 \u0026\u0026 input[0] == '0' \u0026\u0026 (input[1] == 'x' || input[1] == 'X') {\n\t\treturn z.fromHex(string(input))\n\t}\n\treturn z.fromDecimal(string(input))\n}\n\n// SetBytes interprets buf as the bytes of a big-endian unsigned\n// integer, sets z to that value, and returns z.\n// If buf is larger than 32 bytes, the last 32 bytes is used.\nfunc (z *Uint) SetBytes(buf []byte) *Uint {\n\tswitch l := len(buf); l {\n\tcase 0:\n\t\tz.Clear()\n\tcase 1:\n\t\tz.SetBytes1(buf)\n\tcase 2:\n\t\tz.SetBytes2(buf)\n\tcase 3:\n\t\tz.SetBytes3(buf)\n\tcase 4:\n\t\tz.SetBytes4(buf)\n\tcase 5:\n\t\tz.SetBytes5(buf)\n\tcase 6:\n\t\tz.SetBytes6(buf)\n\tcase 7:\n\t\tz.SetBytes7(buf)\n\tcase 8:\n\t\tz.SetBytes8(buf)\n\tcase 9:\n\t\tz.SetBytes9(buf)\n\tcase 10:\n\t\tz.SetBytes10(buf)\n\tcase 11:\n\t\tz.SetBytes11(buf)\n\tcase 12:\n\t\tz.SetBytes12(buf)\n\tcase 13:\n\t\tz.SetBytes13(buf)\n\tcase 14:\n\t\tz.SetBytes14(buf)\n\tcase 15:\n\t\tz.SetBytes15(buf)\n\tcase 16:\n\t\tz.SetBytes16(buf)\n\tcase 17:\n\t\tz.SetBytes17(buf)\n\tcase 18:\n\t\tz.SetBytes18(buf)\n\tcase 19:\n\t\tz.SetBytes19(buf)\n\tcase 20:\n\t\tz.SetBytes20(buf)\n\tcase 21:\n\t\tz.SetBytes21(buf)\n\tcase 22:\n\t\tz.SetBytes22(buf)\n\tcase 23:\n\t\tz.SetBytes23(buf)\n\tcase 24:\n\t\tz.SetBytes24(buf)\n\tcase 25:\n\t\tz.SetBytes25(buf)\n\tcase 26:\n\t\tz.SetBytes26(buf)\n\tcase 27:\n\t\tz.SetBytes27(buf)\n\tcase 28:\n\t\tz.SetBytes28(buf)\n\tcase 29:\n\t\tz.SetBytes29(buf)\n\tcase 30:\n\t\tz.SetBytes30(buf)\n\tcase 31:\n\t\tz.SetBytes31(buf)\n\tdefault:\n\t\tz.SetBytes32(buf[l-32:])\n\t}\n\treturn z\n}\n\n// SetBytes1 is identical to SetBytes(in[:1]), but panics is input is too short\nfunc (z *Uint) SetBytes1(in []byte) *Uint {\n\tz.arr[3], z.arr[2], z.arr[1] = 0, 0, 0\n\tz.arr[0] = uint64(in[0])\n\treturn z\n}\n\n// SetBytes2 is identical to SetBytes(in[:2]), but panics is input is too short\nfunc (z *Uint) SetBytes2(in []byte) *Uint {\n\t_ = in[1] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3], z.arr[2], z.arr[1] = 0, 0, 0\n\tz.arr[0] = uint64(binary.BigEndian.Uint16(in[0:2]))\n\treturn z\n}\n\n// SetBytes3 is identical to SetBytes(in[:3]), but panics is input is too short\nfunc (z *Uint) SetBytes3(in []byte) *Uint {\n\t_ = in[2] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3], z.arr[2], z.arr[1] = 0, 0, 0\n\tz.arr[0] = uint64(binary.BigEndian.Uint16(in[1:3])) | uint64(in[0])\u003c\u003c16\n\treturn z\n}\n\n// SetBytes4 is identical to SetBytes(in[:4]), but panics is input is too short\nfunc (z *Uint) SetBytes4(in []byte) *Uint {\n\t_ = in[3] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3], z.arr[2], z.arr[1] = 0, 0, 0\n\tz.arr[0] = uint64(binary.BigEndian.Uint32(in[0:4]))\n\treturn z\n}\n\n// SetBytes5 is identical to SetBytes(in[:5]), but panics is input is too short\nfunc (z *Uint) SetBytes5(in []byte) *Uint {\n\t_ = in[4] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3], z.arr[2], z.arr[1] = 0, 0, 0\n\tz.arr[0] = bigEndianUint40(in[0:5])\n\treturn z\n}\n\n// SetBytes6 is identical to SetBytes(in[:6]), but panics is input is too short\nfunc (z *Uint) SetBytes6(in []byte) *Uint {\n\t_ = in[5] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3], z.arr[2], z.arr[1] = 0, 0, 0\n\tz.arr[0] = bigEndianUint48(in[0:6])\n\treturn z\n}\n\n// SetBytes7 is identical to SetBytes(in[:7]), but panics is input is too short\nfunc (z *Uint) SetBytes7(in []byte) *Uint {\n\t_ = in[6] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3], z.arr[2], z.arr[1] = 0, 0, 0\n\tz.arr[0] = bigEndianUint56(in[0:7])\n\treturn z\n}\n\n// SetBytes8 is identical to SetBytes(in[:8]), but panics is input is too short\nfunc (z *Uint) SetBytes8(in []byte) *Uint {\n\t_ = in[7] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3], z.arr[2], z.arr[1] = 0, 0, 0\n\tz.arr[0] = binary.BigEndian.Uint64(in[0:8])\n\treturn z\n}\n\n// SetBytes9 is identical to SetBytes(in[:9]), but panics is input is too short\nfunc (z *Uint) SetBytes9(in []byte) *Uint {\n\t_ = in[8] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3], z.arr[2] = 0, 0\n\tz.arr[1] = uint64(in[0])\n\tz.arr[0] = binary.BigEndian.Uint64(in[1:9])\n\treturn z\n}\n\n// SetBytes10 is identical to SetBytes(in[:10]), but panics is input is too short\nfunc (z *Uint) SetBytes10(in []byte) *Uint {\n\t_ = in[9] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3], z.arr[2] = 0, 0\n\tz.arr[1] = uint64(binary.BigEndian.Uint16(in[0:2]))\n\tz.arr[0] = binary.BigEndian.Uint64(in[2:10])\n\treturn z\n}\n\n// SetBytes11 is identical to SetBytes(in[:11]), but panics is input is too short\nfunc (z *Uint) SetBytes11(in []byte) *Uint {\n\t_ = in[10] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3], z.arr[2] = 0, 0\n\tz.arr[1] = uint64(binary.BigEndian.Uint16(in[1:3])) | uint64(in[0])\u003c\u003c16\n\tz.arr[0] = binary.BigEndian.Uint64(in[3:11])\n\treturn z\n}\n\n// SetBytes12 is identical to SetBytes(in[:12]), but panics is input is too short\nfunc (z *Uint) SetBytes12(in []byte) *Uint {\n\t_ = in[11] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3], z.arr[2] = 0, 0\n\tz.arr[1] = uint64(binary.BigEndian.Uint32(in[0:4]))\n\tz.arr[0] = binary.BigEndian.Uint64(in[4:12])\n\treturn z\n}\n\n// SetBytes13 is identical to SetBytes(in[:13]), but panics is input is too short\nfunc (z *Uint) SetBytes13(in []byte) *Uint {\n\t_ = in[12] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3], z.arr[2] = 0, 0\n\tz.arr[1] = bigEndianUint40(in[0:5])\n\tz.arr[0] = binary.BigEndian.Uint64(in[5:13])\n\treturn z\n}\n\n// SetBytes14 is identical to SetBytes(in[:14]), but panics is input is too short\nfunc (z *Uint) SetBytes14(in []byte) *Uint {\n\t_ = in[13] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3], z.arr[2] = 0, 0\n\tz.arr[1] = bigEndianUint48(in[0:6])\n\tz.arr[0] = binary.BigEndian.Uint64(in[6:14])\n\treturn z\n}\n\n// SetBytes15 is identical to SetBytes(in[:15]), but panics is input is too short\nfunc (z *Uint) SetBytes15(in []byte) *Uint {\n\t_ = in[14] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3], z.arr[2] = 0, 0\n\tz.arr[1] = bigEndianUint56(in[0:7])\n\tz.arr[0] = binary.BigEndian.Uint64(in[7:15])\n\treturn z\n}\n\n// SetBytes16 is identical to SetBytes(in[:16]), but panics is input is too short\nfunc (z *Uint) SetBytes16(in []byte) *Uint {\n\t_ = in[15] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3], z.arr[2] = 0, 0\n\tz.arr[1] = binary.BigEndian.Uint64(in[0:8])\n\tz.arr[0] = binary.BigEndian.Uint64(in[8:16])\n\treturn z\n}\n\n// SetBytes17 is identical to SetBytes(in[:17]), but panics is input is too short\nfunc (z *Uint) SetBytes17(in []byte) *Uint {\n\t_ = in[16] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3] = 0\n\tz.arr[2] = uint64(in[0])\n\tz.arr[1] = binary.BigEndian.Uint64(in[1:9])\n\tz.arr[0] = binary.BigEndian.Uint64(in[9:17])\n\treturn z\n}\n\n// SetBytes18 is identical to SetBytes(in[:18]), but panics is input is too short\nfunc (z *Uint) SetBytes18(in []byte) *Uint {\n\t_ = in[17] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3] = 0\n\tz.arr[2] = uint64(binary.BigEndian.Uint16(in[0:2]))\n\tz.arr[1] = binary.BigEndian.Uint64(in[2:10])\n\tz.arr[0] = binary.BigEndian.Uint64(in[10:18])\n\treturn z\n}\n\n// SetBytes19 is identical to SetBytes(in[:19]), but panics is input is too short\nfunc (z *Uint) SetBytes19(in []byte) *Uint {\n\t_ = in[18] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3] = 0\n\tz.arr[2] = uint64(binary.BigEndian.Uint16(in[1:3])) | uint64(in[0])\u003c\u003c16\n\tz.arr[1] = binary.BigEndian.Uint64(in[3:11])\n\tz.arr[0] = binary.BigEndian.Uint64(in[11:19])\n\treturn z\n}\n\n// SetBytes20 is identical to SetBytes(in[:20]), but panics is input is too short\nfunc (z *Uint) SetBytes20(in []byte) *Uint {\n\t_ = in[19] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3] = 0\n\tz.arr[2] = uint64(binary.BigEndian.Uint32(in[0:4]))\n\tz.arr[1] = binary.BigEndian.Uint64(in[4:12])\n\tz.arr[0] = binary.BigEndian.Uint64(in[12:20])\n\treturn z\n}\n\n// SetBytes21 is identical to SetBytes(in[:21]), but panics is input is too short\nfunc (z *Uint) SetBytes21(in []byte) *Uint {\n\t_ = in[20] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3] = 0\n\tz.arr[2] = bigEndianUint40(in[0:5])\n\tz.arr[1] = binary.BigEndian.Uint64(in[5:13])\n\tz.arr[0] = binary.BigEndian.Uint64(in[13:21])\n\treturn z\n}\n\n// SetBytes22 is identical to SetBytes(in[:22]), but panics is input is too short\nfunc (z *Uint) SetBytes22(in []byte) *Uint {\n\t_ = in[21] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3] = 0\n\tz.arr[2] = bigEndianUint48(in[0:6])\n\tz.arr[1] = binary.BigEndian.Uint64(in[6:14])\n\tz.arr[0] = binary.BigEndian.Uint64(in[14:22])\n\treturn z\n}\n\n// SetBytes23 is identical to SetBytes(in[:23]), but panics is input is too short\nfunc (z *Uint) SetBytes23(in []byte) *Uint {\n\t_ = in[22] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3] = 0\n\tz.arr[2] = bigEndianUint56(in[0:7])\n\tz.arr[1] = binary.BigEndian.Uint64(in[7:15])\n\tz.arr[0] = binary.BigEndian.Uint64(in[15:23])\n\treturn z\n}\n\n// SetBytes24 is identical to SetBytes(in[:24]), but panics is input is too short\nfunc (z *Uint) SetBytes24(in []byte) *Uint {\n\t_ = in[23] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3] = 0\n\tz.arr[2] = binary.BigEndian.Uint64(in[0:8])\n\tz.arr[1] = binary.BigEndian.Uint64(in[8:16])\n\tz.arr[0] = binary.BigEndian.Uint64(in[16:24])\n\treturn z\n}\n\n// SetBytes25 is identical to SetBytes(in[:25]), but panics is input is too short\nfunc (z *Uint) SetBytes25(in []byte) *Uint {\n\t_ = in[24] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3] = uint64(in[0])\n\tz.arr[2] = binary.BigEndian.Uint64(in[1:9])\n\tz.arr[1] = binary.BigEndian.Uint64(in[9:17])\n\tz.arr[0] = binary.BigEndian.Uint64(in[17:25])\n\treturn z\n}\n\n// SetBytes26 is identical to SetBytes(in[:26]), but panics is input is too short\nfunc (z *Uint) SetBytes26(in []byte) *Uint {\n\t_ = in[25] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3] = uint64(binary.BigEndian.Uint16(in[0:2]))\n\tz.arr[2] = binary.BigEndian.Uint64(in[2:10])\n\tz.arr[1] = binary.BigEndian.Uint64(in[10:18])\n\tz.arr[0] = binary.BigEndian.Uint64(in[18:26])\n\treturn z\n}\n\n// SetBytes27 is identical to SetBytes(in[:27]), but panics is input is too short\nfunc (z *Uint) SetBytes27(in []byte) *Uint {\n\t_ = in[26] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3] = uint64(binary.BigEndian.Uint16(in[1:3])) | uint64(in[0])\u003c\u003c16\n\tz.arr[2] = binary.BigEndian.Uint64(in[3:11])\n\tz.arr[1] = binary.BigEndian.Uint64(in[11:19])\n\tz.arr[0] = binary.BigEndian.Uint64(in[19:27])\n\treturn z\n}\n\n// SetBytes28 is identical to SetBytes(in[:28]), but panics is input is too short\nfunc (z *Uint) SetBytes28(in []byte) *Uint {\n\t_ = in[27] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3] = uint64(binary.BigEndian.Uint32(in[0:4]))\n\tz.arr[2] = binary.BigEndian.Uint64(in[4:12])\n\tz.arr[1] = binary.BigEndian.Uint64(in[12:20])\n\tz.arr[0] = binary.BigEndian.Uint64(in[20:28])\n\treturn z\n}\n\n// SetBytes29 is identical to SetBytes(in[:29]), but panics is input is too short\nfunc (z *Uint) SetBytes29(in []byte) *Uint {\n\t_ = in[23] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3] = bigEndianUint40(in[0:5])\n\tz.arr[2] = binary.BigEndian.Uint64(in[5:13])\n\tz.arr[1] = binary.BigEndian.Uint64(in[13:21])\n\tz.arr[0] = binary.BigEndian.Uint64(in[21:29])\n\treturn z\n}\n\n// SetBytes30 is identical to SetBytes(in[:30]), but panics is input is too short\nfunc (z *Uint) SetBytes30(in []byte) *Uint {\n\t_ = in[29] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3] = bigEndianUint48(in[0:6])\n\tz.arr[2] = binary.BigEndian.Uint64(in[6:14])\n\tz.arr[1] = binary.BigEndian.Uint64(in[14:22])\n\tz.arr[0] = binary.BigEndian.Uint64(in[22:30])\n\treturn z\n}\n\n// SetBytes31 is identical to SetBytes(in[:31]), but panics is input is too short\nfunc (z *Uint) SetBytes31(in []byte) *Uint {\n\t_ = in[30] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3] = bigEndianUint56(in[0:7])\n\tz.arr[2] = binary.BigEndian.Uint64(in[7:15])\n\tz.arr[1] = binary.BigEndian.Uint64(in[15:23])\n\tz.arr[0] = binary.BigEndian.Uint64(in[23:31])\n\treturn z\n}\n\n// SetBytes32 sets z to the value of the big-endian 256-bit unsigned integer in.\nfunc (z *Uint) SetBytes32(in []byte) *Uint {\n\t_ = in[31] // bounds check hint to compiler; see golang.org/issue/14808\n\tz.arr[3] = binary.BigEndian.Uint64(in[0:8])\n\tz.arr[2] = binary.BigEndian.Uint64(in[8:16])\n\tz.arr[1] = binary.BigEndian.Uint64(in[16:24])\n\tz.arr[0] = binary.BigEndian.Uint64(in[24:32])\n\treturn z\n}\n\n// Utility methods that are \"missing\" among the bigEndian.UintXX methods.\n\n// bigEndianUint40 returns the uint64 value represented by the 5 bytes in big-endian order.\nfunc bigEndianUint40(b []byte) uint64 {\n\t_ = b[4] // bounds check hint to compiler; see golang.org/issue/14808\n\treturn uint64(b[4]) | uint64(b[3])\u003c\u003c8 | uint64(b[2])\u003c\u003c16 | uint64(b[1])\u003c\u003c24 |\n\t\tuint64(b[0])\u003c\u003c32\n}\n\n// bigEndianUint56 returns the uint64 value represented by the 7 bytes in big-endian order.\nfunc bigEndianUint56(b []byte) uint64 {\n\t_ = b[6] // bounds check hint to compiler; see golang.org/issue/14808\n\treturn uint64(b[6]) | uint64(b[5])\u003c\u003c8 | uint64(b[4])\u003c\u003c16 | uint64(b[3])\u003c\u003c24 |\n\t\tuint64(b[2])\u003c\u003c32 | uint64(b[1])\u003c\u003c40 | uint64(b[0])\u003c\u003c48\n}\n\n// bigEndianUint48 returns the uint64 value represented by the 6 bytes in big-endian order.\nfunc bigEndianUint48(b []byte) uint64 {\n\t_ = b[5] // bounds check hint to compiler; see golang.org/issue/14808\n\treturn uint64(b[5]) | uint64(b[4])\u003c\u003c8 | uint64(b[3])\u003c\u003c16 | uint64(b[2])\u003c\u003c24 |\n\t\tuint64(b[1])\u003c\u003c32 | uint64(b[0])\u003c\u003c40\n}\n"},{"name":"conversion_test.gno","body":"package uint256\n\nimport (\n\t\"testing\"\n)\n\nfunc TestIsUint64(t *testing.T) {\n\ttests := []struct {\n\t\tx    string\n\t\twant bool\n\t}{\n\t\t{\"0x0\", true},\n\t\t{\"0x1\", true},\n\t\t{\"0x10\", true},\n\t\t{\"0xffffffffffffffff\", true},\n\t\t{\"0x10000000000000000\", false},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx := MustFromHex(tc.x)\n\t\tgot := x.IsUint64()\n\n\t\tif got != tc.want {\n\t\t\tt.Errorf(\"IsUint64(%s) = %v, want %v\", tc.x, got, tc.want)\n\t\t}\n\t}\n}\n\nfunc TestDec(t *testing.T) {\n\ttestCases := []struct {\n\t\tname string\n\t\tz    Uint\n\t\twant string\n\t}{\n\t\t{\n\t\t\tname: \"zero\",\n\t\t\tz:    Uint{arr: [4]uint64{0, 0, 0, 0}},\n\t\t\twant: \"0\",\n\t\t},\n\t\t{\n\t\t\tname: \"less than 20 digits\",\n\t\t\tz:    Uint{arr: [4]uint64{1234567890, 0, 0, 0}},\n\t\t\twant: \"1234567890\",\n\t\t},\n\t\t{\n\t\t\tname: \"max possible value\",\n\t\t\tz:    Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}},\n\t\t\twant: \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tresult := tc.z.Dec()\n\t\t\tif result != tc.want {\n\t\t\t\tt.Errorf(\"Dec(%v) = %s, want %s\", tc.z, result, tc.want)\n\t\t\t}\n\t\t})\n\t}\n}\n"},{"name":"error.gno","body":"package uint256\n\nimport (\n\t\"errors\"\n)\n\nvar (\n\tErrEmptyString      = errors.New(\"empty hex string\")\n\tErrSyntax           = errors.New(\"invalid hex string\")\n\tErrRange            = errors.New(\"number out of range\")\n\tErrMissingPrefix    = errors.New(\"hex string without 0x prefix\")\n\tErrEmptyNumber      = errors.New(\"hex string \\\"0x\\\"\")\n\tErrLeadingZero      = errors.New(\"hex number with leading zero digits\")\n\tErrBig256Range      = errors.New(\"hex number \u003e 256 bits\")\n\tErrBadBufferLength  = errors.New(\"bad ssz buffer length\")\n\tErrBadEncodedLength = errors.New(\"bad ssz encoded length\")\n\tErrInvalidBase      = errors.New(\"invalid base\")\n\tErrInvalidBitSize   = errors.New(\"invalid bit size\")\n)\n\ntype u256Error struct {\n\tfn    string // function name\n\tinput string\n\terr   error\n}\n\nfunc (e *u256Error) Error() string {\n\treturn e.fn + \": \" + e.input + \": \" + e.err.Error()\n}\n\nfunc (e *u256Error) Unwrap() error {\n\treturn e.err\n}\n\nfunc errEmptyString(fn, input string) error {\n\treturn \u0026u256Error{fn: fn, input: input, err: ErrEmptyString}\n}\n\nfunc errSyntax(fn, input string) error {\n\treturn \u0026u256Error{fn: fn, input: input, err: ErrSyntax}\n}\n\nfunc errMissingPrefix(fn, input string) error {\n\treturn \u0026u256Error{fn: fn, input: input, err: ErrMissingPrefix}\n}\n\nfunc errEmptyNumber(fn, input string) error {\n\treturn \u0026u256Error{fn: fn, input: input, err: ErrEmptyNumber}\n}\n\nfunc errLeadingZero(fn, input string) error {\n\treturn \u0026u256Error{fn: fn, input: input, err: ErrLeadingZero}\n}\n\nfunc errRange(fn, input string) error {\n\treturn \u0026u256Error{fn: fn, input: input, err: ErrRange}\n}\n\nfunc errBig256Range(fn, input string) error {\n\treturn \u0026u256Error{fn: fn, input: input, err: ErrBig256Range}\n}\n\nfunc errBadBufferLength(fn, input string) error {\n\treturn \u0026u256Error{fn: fn, input: input, err: ErrBadBufferLength}\n}\n\nfunc errInvalidBase(fn string, base int) error {\n\treturn \u0026u256Error{fn: fn, input: string(base), err: ErrInvalidBase}\n}\n\nfunc errInvalidBitSize(fn string, bitSize int) error {\n\treturn \u0026u256Error{fn: fn, input: string(bitSize), err: ErrInvalidBitSize}\n}\n"},{"name":"gno.mod","body":"module gno.land/p/gnoswap/uint256\n"},{"name":"gs_overflow_calculation.gno","body":"// REF: https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/FullMath.sol\npackage uint256\n\nimport (\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tMAX_UINT256 = \"115792089237316195423570985008687907853269984665640564039457584007913129639935\"\n)\n\nfunc MulDiv(\n\ta, b, denominator *Uint,\n) *Uint {\n\tprod0 := Zero()\n\tprod1 := Zero()\n\n\t{\n\t\tmm := new(Uint).MulMod(a, b, new(Uint).Not(Zero()))\n\t\tprod0 = new(Uint).Mul(a, b)\n\n\t\tltBool := mm.Lt(prod0)\n\t\tltUint := Zero()\n\t\tif ltBool {\n\t\t\tltUint = One()\n\t\t}\n\t\tprod1 = new(Uint).Sub(new(Uint).Sub(mm, prod0), ltUint)\n\t}\n\n\t// Handle non-overflow cases, 256 by 256 division\n\tif prod1.IsZero() {\n\t\tif !(denominator.Gt(Zero())) { // require(denominator \u003e 0);\n\t\t\tpanic(ufmt.Sprintf(\"uint256_MulDiv()__denominator(%s) \u003e 0\", denominator.ToString()))\n\t\t}\n\n\t\tresult := new(Uint).Div(prod0, denominator)\n\t\treturn result\n\t}\n\n\t// Make sure the result is less than 2**256.\n\t// Also prevents denominator == 0\n\tif !(denominator.Gt(prod1)) { // require(denominator \u003e prod1)\n\t\tpanic(ufmt.Sprintf(\"uint256_MulDiv()__denominator(%s) \u003e prod1(%s)\", denominator.ToString(), prod1.ToString()))\n\t}\n\n\t///////////////////////////////////////////////\n\t// 512 by 256 division.\n\t///////////////////////////////////////////////\n\n\t// Make division exact by subtracting the remainder from [prod1 prod0]\n\t// Compute remainder using mulmod\n\tremainder := Zero()\n\tremainder = new(Uint).MulMod(a, b, denominator)\n\n\t// Subtract 256 bit number from 512 bit number\n\tgtBool := remainder.Gt(prod0)\n\tgtUint := Zero()\n\tif gtBool {\n\t\tgtUint = One()\n\t}\n\tprod1 = new(Uint).Sub(prod1, gtUint)\n\tprod0 = new(Uint).Sub(prod0, remainder)\n\n\t// Factor powers of two out of denominator\n\t// Compute largest power of two divisor of denominator.\n\t// Always \u003e= 1.\n\ttwos := Zero()\n\ttwos = new(Uint).And(new(Uint).Neg(denominator), denominator)\n\n\t// Divide denominator by power of two\n\tdenominator = new(Uint).Div(denominator, twos)\n\n\t// Divide [prod1 prod0] by the factors of two\n\tprod0 = new(Uint).Div(prod0, twos)\n\n\t// Shift in bits from prod1 into prod0. For this we need\n\t// to flip `twos` such that it is 2**256 / twos.\n\t// If twos is zero, then it becomes one\n\ttwos = new(Uint).Add(\n\t\tnew(Uint).Div(\n\t\t\tnew(Uint).Sub(Zero(), twos),\n\t\t\ttwos,\n\t\t),\n\t\tOne(),\n\t)\n\tprod0 = new(Uint).Or(prod0, new(Uint).Mul(prod1, twos))\n\n\t// Invert denominator mod 2**256\n\t// Now that denominator is an odd number, it has an inverse\n\t// modulo 2**256 such that denominator * inv = 1 mod 2**256.\n\t// Compute the inverse by starting with a seed that is correct\n\t// correct for four bits. That is, denominator * inv = 1 mod 2**4\n\tinv := Zero()\n\tinv = new(Uint).Mul(NewUint(3), denominator)\n\tinv = new(Uint).Xor(inv, NewUint(2))\n\n\t// Now use Newton-Raphson iteration to improve the precision.\n\t// Thanks to Hensel's lifting lemma, this also works in modular\n\t// arithmetic, doubling the correct bits in each step.\n\n\tinv = new(Uint).Mul(inv, new(Uint).Sub(NewUint(2), new(Uint).Mul(denominator, inv))) // inverse mod 2**8\n\tinv = new(Uint).Mul(inv, new(Uint).Sub(NewUint(2), new(Uint).Mul(denominator, inv))) // inverse mod 2**16\n\tinv = new(Uint).Mul(inv, new(Uint).Sub(NewUint(2), new(Uint).Mul(denominator, inv))) // inverse mod 2**32\n\tinv = new(Uint).Mul(inv, new(Uint).Sub(NewUint(2), new(Uint).Mul(denominator, inv))) // inverse mod 2**64\n\tinv = new(Uint).Mul(inv, new(Uint).Sub(NewUint(2), new(Uint).Mul(denominator, inv))) // inverse mod 2**128\n\tinv = new(Uint).Mul(inv, new(Uint).Sub(NewUint(2), new(Uint).Mul(denominator, inv))) // inverse mod 2**256\n\n\t// Because the division is now exact we can divide by multiplying\n\t// with the modular inverse of denominator. This will give us the\n\t// correct result modulo 2**256. Since the precoditions guarantee\n\t// that the outcome is less than 2**256, this is the final result.\n\t// We don't need to compute the high bits of the result and prod1\n\t// is no longer required.\n\tresult := new(Uint).Mul(prod0, inv)\n\treturn result\n}\n\nfunc MulDivRoundingUp(\n\ta, b, denominator *Uint,\n) *Uint {\n\tresult := MulDiv(a, b, denominator)\n\n\tif new(Uint).MulMod(a, b, denominator).Gt(Zero()) {\n\t\tif !(result.Lt(MustFromDecimal(MAX_UINT256))) { // require(result \u003c MAX_UINT256)\n\t\t\tpanic(ufmt.Sprintf(\"uint256_MulDivRoundingUp()__result(%s) \u003c MAX_UINT256\", result.ToString()))\n\t\t}\n\n\t\tresult = new(Uint).Add(result, One())\n\t}\n\n\treturn result\n}\n\n// UnsafeMath\n// https://github.com/Uniswap/v3-core/blob/d8b1c635c275d2a9450bd6a78f3fa2484fef73eb/contracts/libraries/UnsafeMath.sol\nfunc DivRoundingUp(\n\tx, y *Uint,\n) *Uint {\n\tdiv := new(Uint).Div(x, y)\n\tmod := new(Uint).Mod(x, y)\n\n\tz := new(Uint).Add(div, gt(mod, Zero()))\n\treturn z\n}\n\nfunc gt(x, y *Uint) *Uint {\n\tif x.Gt(y) {\n\t\treturn One()\n\t}\n\treturn Zero()\n}\n"},{"name":"gs_pointer.gno","body":"package uint256\n\nfunc (z *Uint) NilToZero() *Uint {\n\tif z == nil {\n\t\tz = NewUint(0)\n\t}\n\treturn z\n}\n"},{"name":"mod.gno","body":"package uint256\n\nimport (\n\t\"math/bits\"\n)\n\n// Some utility functions\n\n// Reciprocal computes a 320-bit value representing 1/m\n//\n// Notes:\n// - specialized for m.arr[3] != 0, hence limited to 2^192 \u003c= m \u003c 2^256\n// - returns zero if m.arr[3] == 0\n// - starts with a 32-bit division, refines with newton-raphson iterations\nfunc Reciprocal(m *Uint) (mu [5]uint64) {\n\tif m.arr[3] == 0 {\n\t\treturn mu\n\t}\n\n\ts := bits.LeadingZeros64(m.arr[3]) // Replace with leadingZeros(m) for general case\n\tp := 255 - s                       // floor(log_2(m)), m\u003e0\n\n\t// 0 or a power of 2?\n\n\t// Check if at least one bit is set in m.arr[2], m.arr[1] or m.arr[0],\n\t// or at least two bits in m.arr[3]\n\n\tif m.arr[0]|m.arr[1]|m.arr[2]|(m.arr[3]\u0026(m.arr[3]-1)) == 0 {\n\n\t\tmu[4] = ^uint64(0) \u003e\u003e uint(p\u002663)\n\t\tmu[3] = ^uint64(0)\n\t\tmu[2] = ^uint64(0)\n\t\tmu[1] = ^uint64(0)\n\t\tmu[0] = ^uint64(0)\n\n\t\treturn mu\n\t}\n\n\t// Maximise division precision by left-aligning divisor\n\n\tvar (\n\t\ty  Uint   // left-aligned copy of m\n\t\tr0 uint32 // estimate of 2^31/y\n\t)\n\n\ty.Lsh(m, uint(s)) // 1/2 \u003c y \u003c 1\n\n\t// Extract most significant 32 bits\n\n\tyh := uint32(y.arr[3] \u003e\u003e 32)\n\n\tif yh == 0x80000000 { // Avoid overflow in division\n\t\tr0 = 0xffffffff\n\t} else {\n\t\tr0, _ = bits.Div32(0x80000000, 0, yh)\n\t}\n\n\t// First iteration: 32 -\u003e 64\n\n\tt1 := uint64(r0)                 // 2^31/y\n\tt1 *= t1                         // 2^62/y^2\n\tt1, _ = bits.Mul64(t1, y.arr[3]) // 2^62/y^2 * 2^64/y / 2^64 = 2^62/y\n\n\tr1 := uint64(r0) \u003c\u003c 32 // 2^63/y\n\tr1 -= t1               // 2^63/y - 2^62/y = 2^62/y\n\tr1 *= 2                // 2^63/y\n\n\tif (r1 | (y.arr[3] \u003c\u003c 1)) == 0 {\n\t\tr1 = ^uint64(0)\n\t}\n\n\t// Second iteration: 64 -\u003e 128\n\n\t// square: 2^126/y^2\n\ta2h, a2l := bits.Mul64(r1, r1)\n\n\t// multiply by y: e2h:e2l:b2h = 2^126/y^2 * 2^128/y / 2^128 = 2^126/y\n\tb2h, _ := bits.Mul64(a2l, y.arr[2])\n\tc2h, c2l := bits.Mul64(a2l, y.arr[3])\n\td2h, d2l := bits.Mul64(a2h, y.arr[2])\n\te2h, e2l := bits.Mul64(a2h, y.arr[3])\n\n\tb2h, c := bits.Add64(b2h, c2l, 0)\n\te2l, c = bits.Add64(e2l, c2h, c)\n\te2h, _ = bits.Add64(e2h, 0, c)\n\n\t_, c = bits.Add64(b2h, d2l, 0)\n\te2l, c = bits.Add64(e2l, d2h, c)\n\te2h, _ = bits.Add64(e2h, 0, c)\n\n\t// subtract: t2h:t2l = 2^127/y - 2^126/y = 2^126/y\n\tt2l, b := bits.Sub64(0, e2l, 0)\n\tt2h, _ := bits.Sub64(r1, e2h, b)\n\n\t// double: r2h:r2l = 2^127/y\n\tr2l, c := bits.Add64(t2l, t2l, 0)\n\tr2h, _ := bits.Add64(t2h, t2h, c)\n\n\tif (r2h | r2l | (y.arr[3] \u003c\u003c 1)) == 0 {\n\t\tr2h = ^uint64(0)\n\t\tr2l = ^uint64(0)\n\t}\n\n\t// Third iteration: 128 -\u003e 192\n\n\t// square r2 (keep 256 bits): 2^190/y^2\n\ta3h, a3l := bits.Mul64(r2l, r2l)\n\tb3h, b3l := bits.Mul64(r2l, r2h)\n\tc3h, c3l := bits.Mul64(r2h, r2h)\n\n\ta3h, c = bits.Add64(a3h, b3l, 0)\n\tc3l, c = bits.Add64(c3l, b3h, c)\n\tc3h, _ = bits.Add64(c3h, 0, c)\n\n\ta3h, c = bits.Add64(a3h, b3l, 0)\n\tc3l, c = bits.Add64(c3l, b3h, c)\n\tc3h, _ = bits.Add64(c3h, 0, c)\n\n\t// multiply by y: q = 2^190/y^2 * 2^192/y / 2^192 = 2^190/y\n\n\tx0 := a3l\n\tx1 := a3h\n\tx2 := c3l\n\tx3 := c3h\n\n\tvar q0, q1, q2, q3, q4, t0 uint64\n\n\tq0, _ = bits.Mul64(x2, y.arr[0])\n\tq1, t0 = bits.Mul64(x3, y.arr[0])\n\tq0, c = bits.Add64(q0, t0, 0)\n\tq1, _ = bits.Add64(q1, 0, c)\n\n\tt1, _ = bits.Mul64(x1, y.arr[1])\n\tq0, c = bits.Add64(q0, t1, 0)\n\tq2, t0 = bits.Mul64(x3, y.arr[1])\n\tq1, c = bits.Add64(q1, t0, c)\n\tq2, _ = bits.Add64(q2, 0, c)\n\n\tt1, t0 = bits.Mul64(x2, y.arr[1])\n\tq0, c = bits.Add64(q0, t0, 0)\n\tq1, c = bits.Add64(q1, t1, c)\n\tq2, _ = bits.Add64(q2, 0, c)\n\n\tt1, t0 = bits.Mul64(x1, y.arr[2])\n\tq0, c = bits.Add64(q0, t0, 0)\n\tq1, c = bits.Add64(q1, t1, c)\n\tq3, t0 = bits.Mul64(x3, y.arr[2])\n\tq2, c = bits.Add64(q2, t0, c)\n\tq3, _ = bits.Add64(q3, 0, c)\n\n\tt1, _ = bits.Mul64(x0, y.arr[2])\n\tq0, c = bits.Add64(q0, t1, 0)\n\tt1, t0 = bits.Mul64(x2, y.arr[2])\n\tq1, c = bits.Add64(q1, t0, c)\n\tq2, c = bits.Add64(q2, t1, c)\n\tq3, _ = bits.Add64(q3, 0, c)\n\n\tt1, t0 = bits.Mul64(x1, y.arr[3])\n\tq1, c = bits.Add64(q1, t0, 0)\n\tq2, c = bits.Add64(q2, t1, c)\n\tq4, t0 = bits.Mul64(x3, y.arr[3])\n\tq3, c = bits.Add64(q3, t0, c)\n\tq4, _ = bits.Add64(q4, 0, c)\n\n\tt1, t0 = bits.Mul64(x0, y.arr[3])\n\tq0, c = bits.Add64(q0, t0, 0)\n\tq1, c = bits.Add64(q1, t1, c)\n\tt1, t0 = bits.Mul64(x2, y.arr[3])\n\tq2, c = bits.Add64(q2, t0, c)\n\tq3, c = bits.Add64(q3, t1, c)\n\tq4, _ = bits.Add64(q4, 0, c)\n\n\t// subtract: t3 = 2^191/y - 2^190/y = 2^190/y\n\t_, b = bits.Sub64(0, q0, 0)\n\t_, b = bits.Sub64(0, q1, b)\n\tt3l, b := bits.Sub64(0, q2, b)\n\tt3m, b := bits.Sub64(r2l, q3, b)\n\tt3h, _ := bits.Sub64(r2h, q4, b)\n\n\t// double: r3 = 2^191/y\n\tr3l, c := bits.Add64(t3l, t3l, 0)\n\tr3m, c := bits.Add64(t3m, t3m, c)\n\tr3h, _ := bits.Add64(t3h, t3h, c)\n\n\t// Fourth iteration: 192 -\u003e 320\n\n\t// square r3\n\n\ta4h, a4l := bits.Mul64(r3l, r3l)\n\tb4h, b4l := bits.Mul64(r3l, r3m)\n\tc4h, c4l := bits.Mul64(r3l, r3h)\n\td4h, d4l := bits.Mul64(r3m, r3m)\n\te4h, e4l := bits.Mul64(r3m, r3h)\n\tf4h, f4l := bits.Mul64(r3h, r3h)\n\n\tb4h, c = bits.Add64(b4h, c4l, 0)\n\te4l, c = bits.Add64(e4l, c4h, c)\n\te4h, _ = bits.Add64(e4h, 0, c)\n\n\ta4h, c = bits.Add64(a4h, b4l, 0)\n\td4l, c = bits.Add64(d4l, b4h, c)\n\td4h, c = bits.Add64(d4h, e4l, c)\n\tf4l, c = bits.Add64(f4l, e4h, c)\n\tf4h, _ = bits.Add64(f4h, 0, c)\n\n\ta4h, c = bits.Add64(a4h, b4l, 0)\n\td4l, c = bits.Add64(d4l, b4h, c)\n\td4h, c = bits.Add64(d4h, e4l, c)\n\tf4l, c = bits.Add64(f4l, e4h, c)\n\tf4h, _ = bits.Add64(f4h, 0, c)\n\n\t// multiply by y\n\n\tx1, x0 = bits.Mul64(d4h, y.arr[0])\n\tx3, x2 = bits.Mul64(f4h, y.arr[0])\n\tt1, t0 = bits.Mul64(f4l, y.arr[0])\n\tx1, c = bits.Add64(x1, t0, 0)\n\tx2, c = bits.Add64(x2, t1, c)\n\tx3, _ = bits.Add64(x3, 0, c)\n\n\tt1, t0 = bits.Mul64(d4h, y.arr[1])\n\tx1, c = bits.Add64(x1, t0, 0)\n\tx2, c = bits.Add64(x2, t1, c)\n\tx4, t0 := bits.Mul64(f4h, y.arr[1])\n\tx3, c = bits.Add64(x3, t0, c)\n\tx4, _ = bits.Add64(x4, 0, c)\n\tt1, t0 = bits.Mul64(d4l, y.arr[1])\n\tx0, c = bits.Add64(x0, t0, 0)\n\tx1, c = bits.Add64(x1, t1, c)\n\tt1, t0 = bits.Mul64(f4l, y.arr[1])\n\tx2, c = bits.Add64(x2, t0, c)\n\tx3, c = bits.Add64(x3, t1, c)\n\tx4, _ = bits.Add64(x4, 0, c)\n\n\tt1, t0 = bits.Mul64(a4h, y.arr[2])\n\tx0, c = bits.Add64(x0, t0, 0)\n\tx1, c = bits.Add64(x1, t1, c)\n\tt1, t0 = bits.Mul64(d4h, y.arr[2])\n\tx2, c = bits.Add64(x2, t0, c)\n\tx3, c = bits.Add64(x3, t1, c)\n\tx5, t0 := bits.Mul64(f4h, y.arr[2])\n\tx4, c = bits.Add64(x4, t0, c)\n\tx5, _ = bits.Add64(x5, 0, c)\n\tt1, t0 = bits.Mul64(d4l, y.arr[2])\n\tx1, c = bits.Add64(x1, t0, 0)\n\tx2, c = bits.Add64(x2, t1, c)\n\tt1, t0 = bits.Mul64(f4l, y.arr[2])\n\tx3, c = bits.Add64(x3, t0, c)\n\tx4, c = bits.Add64(x4, t1, c)\n\tx5, _ = bits.Add64(x5, 0, c)\n\n\tt1, t0 = bits.Mul64(a4h, y.arr[3])\n\tx1, c = bits.Add64(x1, t0, 0)\n\tx2, c = bits.Add64(x2, t1, c)\n\tt1, t0 = bits.Mul64(d4h, y.arr[3])\n\tx3, c = bits.Add64(x3, t0, c)\n\tx4, c = bits.Add64(x4, t1, c)\n\tx6, t0 := bits.Mul64(f4h, y.arr[3])\n\tx5, c = bits.Add64(x5, t0, c)\n\tx6, _ = bits.Add64(x6, 0, c)\n\tt1, t0 = bits.Mul64(a4l, y.arr[3])\n\tx0, c = bits.Add64(x0, t0, 0)\n\tx1, c = bits.Add64(x1, t1, c)\n\tt1, t0 = bits.Mul64(d4l, y.arr[3])\n\tx2, c = bits.Add64(x2, t0, c)\n\tx3, c = bits.Add64(x3, t1, c)\n\tt1, t0 = bits.Mul64(f4l, y.arr[3])\n\tx4, c = bits.Add64(x4, t0, c)\n\tx5, c = bits.Add64(x5, t1, c)\n\tx6, _ = bits.Add64(x6, 0, c)\n\n\t// subtract\n\t_, b = bits.Sub64(0, x0, 0)\n\t_, b = bits.Sub64(0, x1, b)\n\tr4l, b := bits.Sub64(0, x2, b)\n\tr4k, b := bits.Sub64(0, x3, b)\n\tr4j, b := bits.Sub64(r3l, x4, b)\n\tr4i, b := bits.Sub64(r3m, x5, b)\n\tr4h, _ := bits.Sub64(r3h, x6, b)\n\n\t// Multiply candidate for 1/4y by y, with full precision\n\n\tx0 = r4l\n\tx1 = r4k\n\tx2 = r4j\n\tx3 = r4i\n\tx4 = r4h\n\n\tq1, q0 = bits.Mul64(x0, y.arr[0])\n\tq3, q2 = bits.Mul64(x2, y.arr[0])\n\tq5, q4 := bits.Mul64(x4, y.arr[0])\n\n\tt1, t0 = bits.Mul64(x1, y.arr[0])\n\tq1, c = bits.Add64(q1, t0, 0)\n\tq2, c = bits.Add64(q2, t1, c)\n\tt1, t0 = bits.Mul64(x3, y.arr[0])\n\tq3, c = bits.Add64(q3, t0, c)\n\tq4, c = bits.Add64(q4, t1, c)\n\tq5, _ = bits.Add64(q5, 0, c)\n\n\tt1, t0 = bits.Mul64(x0, y.arr[1])\n\tq1, c = bits.Add64(q1, t0, 0)\n\tq2, c = bits.Add64(q2, t1, c)\n\tt1, t0 = bits.Mul64(x2, y.arr[1])\n\tq3, c = bits.Add64(q3, t0, c)\n\tq4, c = bits.Add64(q4, t1, c)\n\tq6, t0 := bits.Mul64(x4, y.arr[1])\n\tq5, c = bits.Add64(q5, t0, c)\n\tq6, _ = bits.Add64(q6, 0, c)\n\n\tt1, t0 = bits.Mul64(x1, y.arr[1])\n\tq2, c = bits.Add64(q2, t0, 0)\n\tq3, c = bits.Add64(q3, t1, c)\n\tt1, t0 = bits.Mul64(x3, y.arr[1])\n\tq4, c = bits.Add64(q4, t0, c)\n\tq5, c = bits.Add64(q5, t1, c)\n\tq6, _ = bits.Add64(q6, 0, c)\n\n\tt1, t0 = bits.Mul64(x0, y.arr[2])\n\tq2, c = bits.Add64(q2, t0, 0)\n\tq3, c = bits.Add64(q3, t1, c)\n\tt1, t0 = bits.Mul64(x2, y.arr[2])\n\tq4, c = bits.Add64(q4, t0, c)\n\tq5, c = bits.Add64(q5, t1, c)\n\tq7, t0 := bits.Mul64(x4, y.arr[2])\n\tq6, c = bits.Add64(q6, t0, c)\n\tq7, _ = bits.Add64(q7, 0, c)\n\n\tt1, t0 = bits.Mul64(x1, y.arr[2])\n\tq3, c = bits.Add64(q3, t0, 0)\n\tq4, c = bits.Add64(q4, t1, c)\n\tt1, t0 = bits.Mul64(x3, y.arr[2])\n\tq5, c = bits.Add64(q5, t0, c)\n\tq6, c = bits.Add64(q6, t1, c)\n\tq7, _ = bits.Add64(q7, 0, c)\n\n\tt1, t0 = bits.Mul64(x0, y.arr[3])\n\tq3, c = bits.Add64(q3, t0, 0)\n\tq4, c = bits.Add64(q4, t1, c)\n\tt1, t0 = bits.Mul64(x2, y.arr[3])\n\tq5, c = bits.Add64(q5, t0, c)\n\tq6, c = bits.Add64(q6, t1, c)\n\tq8, t0 := bits.Mul64(x4, y.arr[3])\n\tq7, c = bits.Add64(q7, t0, c)\n\tq8, _ = bits.Add64(q8, 0, c)\n\n\tt1, t0 = bits.Mul64(x1, y.arr[3])\n\tq4, c = bits.Add64(q4, t0, 0)\n\tq5, c = bits.Add64(q5, t1, c)\n\tt1, t0 = bits.Mul64(x3, y.arr[3])\n\tq6, c = bits.Add64(q6, t0, c)\n\tq7, c = bits.Add64(q7, t1, c)\n\tq8, _ = bits.Add64(q8, 0, c)\n\n\t// Final adjustment\n\n\t// subtract q from 1/4\n\t_, b = bits.Sub64(0, q0, 0)\n\t_, b = bits.Sub64(0, q1, b)\n\t_, b = bits.Sub64(0, q2, b)\n\t_, b = bits.Sub64(0, q3, b)\n\t_, b = bits.Sub64(0, q4, b)\n\t_, b = bits.Sub64(0, q5, b)\n\t_, b = bits.Sub64(0, q6, b)\n\t_, b = bits.Sub64(0, q7, b)\n\t_, b = bits.Sub64(uint64(1)\u003c\u003c62, q8, b)\n\n\t// decrement the result\n\tx0, t := bits.Sub64(r4l, 1, 0)\n\tx1, t = bits.Sub64(r4k, 0, t)\n\tx2, t = bits.Sub64(r4j, 0, t)\n\tx3, t = bits.Sub64(r4i, 0, t)\n\tx4, _ = bits.Sub64(r4h, 0, t)\n\n\t// commit the decrement if the subtraction underflowed (reciprocal was too large)\n\tif b != 0 {\n\t\tr4h, r4i, r4j, r4k, r4l = x4, x3, x2, x1, x0\n\t}\n\n\t// Shift to correct bit alignment, truncating excess bits\n\n\tp = (p \u0026 63) - 1\n\n\tx0, c = bits.Add64(r4l, r4l, 0)\n\tx1, c = bits.Add64(r4k, r4k, c)\n\tx2, c = bits.Add64(r4j, r4j, c)\n\tx3, c = bits.Add64(r4i, r4i, c)\n\tx4, _ = bits.Add64(r4h, r4h, c)\n\n\tif p \u003c 0 {\n\t\tr4h, r4i, r4j, r4k, r4l = x4, x3, x2, x1, x0\n\t\tp = 0 // avoid negative shift below\n\t}\n\n\t{\n\t\tr := uint(p)      // right shift\n\t\tl := uint(64 - r) // left shift\n\n\t\tx0 = (r4l \u003e\u003e r) | (r4k \u003c\u003c l)\n\t\tx1 = (r4k \u003e\u003e r) | (r4j \u003c\u003c l)\n\t\tx2 = (r4j \u003e\u003e r) | (r4i \u003c\u003c l)\n\t\tx3 = (r4i \u003e\u003e r) | (r4h \u003c\u003c l)\n\t\tx4 = (r4h \u003e\u003e r)\n\t}\n\n\tif p \u003e 0 {\n\t\tr4h, r4i, r4j, r4k, r4l = x4, x3, x2, x1, x0\n\t}\n\n\tmu[0] = r4l\n\tmu[1] = r4k\n\tmu[2] = r4j\n\tmu[3] = r4i\n\tmu[4] = r4h\n\n\treturn mu\n}\n\n// reduce4 computes the least non-negative residue of x modulo m\n//\n// requires a four-word modulus (m.arr[3] \u003e 1) and its inverse (mu)\nfunc reduce4(x [8]uint64, m *Uint, mu [5]uint64) (z Uint) {\n\t// NB: Most variable names in the comments match the pseudocode for\n\t// \tBarrett reduction in the Handbook of Applied Cryptography.\n\n\t// q1 = x/2^192\n\n\tx0 := x[3]\n\tx1 := x[4]\n\tx2 := x[5]\n\tx3 := x[6]\n\tx4 := x[7]\n\n\t// q2 = q1 * mu; q3 = q2 / 2^320\n\n\tvar q0, q1, q2, q3, q4, q5, t0, t1, c uint64\n\n\tq0, _ = bits.Mul64(x3, mu[0])\n\tq1, t0 = bits.Mul64(x4, mu[0])\n\tq0, c = bits.Add64(q0, t0, 0)\n\tq1, _ = bits.Add64(q1, 0, c)\n\n\tt1, _ = bits.Mul64(x2, mu[1])\n\tq0, c = bits.Add64(q0, t1, 0)\n\tq2, t0 = bits.Mul64(x4, mu[1])\n\tq1, c = bits.Add64(q1, t0, c)\n\tq2, _ = bits.Add64(q2, 0, c)\n\n\tt1, t0 = bits.Mul64(x3, mu[1])\n\tq0, c = bits.Add64(q0, t0, 0)\n\tq1, c = bits.Add64(q1, t1, c)\n\tq2, _ = bits.Add64(q2, 0, c)\n\n\tt1, t0 = bits.Mul64(x2, mu[2])\n\tq0, c = bits.Add64(q0, t0, 0)\n\tq1, c = bits.Add64(q1, t1, c)\n\tq3, t0 = bits.Mul64(x4, mu[2])\n\tq2, c = bits.Add64(q2, t0, c)\n\tq3, _ = bits.Add64(q3, 0, c)\n\n\tt1, _ = bits.Mul64(x1, mu[2])\n\tq0, c = bits.Add64(q0, t1, 0)\n\tt1, t0 = bits.Mul64(x3, mu[2])\n\tq1, c = bits.Add64(q1, t0, c)\n\tq2, c = bits.Add64(q2, t1, c)\n\tq3, _ = bits.Add64(q3, 0, c)\n\n\tt1, _ = bits.Mul64(x0, mu[3])\n\tq0, c = bits.Add64(q0, t1, 0)\n\tt1, t0 = bits.Mul64(x2, mu[3])\n\tq1, c = bits.Add64(q1, t0, c)\n\tq2, c = bits.Add64(q2, t1, c)\n\tq4, t0 = bits.Mul64(x4, mu[3])\n\tq3, c = bits.Add64(q3, t0, c)\n\tq4, _ = bits.Add64(q4, 0, c)\n\n\tt1, t0 = bits.Mul64(x1, mu[3])\n\tq0, c = bits.Add64(q0, t0, 0)\n\tq1, c = bits.Add64(q1, t1, c)\n\tt1, t0 = bits.Mul64(x3, mu[3])\n\tq2, c = bits.Add64(q2, t0, c)\n\tq3, c = bits.Add64(q3, t1, c)\n\tq4, _ = bits.Add64(q4, 0, c)\n\n\tt1, t0 = bits.Mul64(x0, mu[4])\n\t_, c = bits.Add64(q0, t0, 0)\n\tq1, c = bits.Add64(q1, t1, c)\n\tt1, t0 = bits.Mul64(x2, mu[4])\n\tq2, c = bits.Add64(q2, t0, c)\n\tq3, c = bits.Add64(q3, t1, c)\n\tq5, t0 = bits.Mul64(x4, mu[4])\n\tq4, c = bits.Add64(q4, t0, c)\n\tq5, _ = bits.Add64(q5, 0, c)\n\n\tt1, t0 = bits.Mul64(x1, mu[4])\n\tq1, c = bits.Add64(q1, t0, 0)\n\tq2, c = bits.Add64(q2, t1, c)\n\tt1, t0 = bits.Mul64(x3, mu[4])\n\tq3, c = bits.Add64(q3, t0, c)\n\tq4, c = bits.Add64(q4, t1, c)\n\tq5, _ = bits.Add64(q5, 0, c)\n\n\t// Drop the fractional part of q3\n\n\tq0 = q1\n\tq1 = q2\n\tq2 = q3\n\tq3 = q4\n\tq4 = q5\n\n\t// r1 = x mod 2^320\n\n\tx0 = x[0]\n\tx1 = x[1]\n\tx2 = x[2]\n\tx3 = x[3]\n\tx4 = x[4]\n\n\t// r2 = q3 * m mod 2^320\n\n\tvar r0, r1, r2, r3, r4 uint64\n\n\tr4, r3 = bits.Mul64(q0, m.arr[3])\n\t_, t0 = bits.Mul64(q1, m.arr[3])\n\tr4, _ = bits.Add64(r4, t0, 0)\n\n\tt1, r2 = bits.Mul64(q0, m.arr[2])\n\tr3, c = bits.Add64(r3, t1, 0)\n\t_, t0 = bits.Mul64(q2, m.arr[2])\n\tr4, _ = bits.Add64(r4, t0, c)\n\n\tt1, t0 = bits.Mul64(q1, m.arr[2])\n\tr3, c = bits.Add64(r3, t0, 0)\n\tr4, _ = bits.Add64(r4, t1, c)\n\n\tt1, r1 = bits.Mul64(q0, m.arr[1])\n\tr2, c = bits.Add64(r2, t1, 0)\n\tt1, t0 = bits.Mul64(q2, m.arr[1])\n\tr3, c = bits.Add64(r3, t0, c)\n\tr4, _ = bits.Add64(r4, t1, c)\n\n\tt1, t0 = bits.Mul64(q1, m.arr[1])\n\tr2, c = bits.Add64(r2, t0, 0)\n\tr3, c = bits.Add64(r3, t1, c)\n\t_, t0 = bits.Mul64(q3, m.arr[1])\n\tr4, _ = bits.Add64(r4, t0, c)\n\n\tt1, r0 = bits.Mul64(q0, m.arr[0])\n\tr1, c = bits.Add64(r1, t1, 0)\n\tt1, t0 = bits.Mul64(q2, m.arr[0])\n\tr2, c = bits.Add64(r2, t0, c)\n\tr3, c = bits.Add64(r3, t1, c)\n\t_, t0 = bits.Mul64(q4, m.arr[0])\n\tr4, _ = bits.Add64(r4, t0, c)\n\n\tt1, t0 = bits.Mul64(q1, m.arr[0])\n\tr1, c = bits.Add64(r1, t0, 0)\n\tr2, c = bits.Add64(r2, t1, c)\n\tt1, t0 = bits.Mul64(q3, m.arr[0])\n\tr3, c = bits.Add64(r3, t0, c)\n\tr4, _ = bits.Add64(r4, t1, c)\n\n\t// r = r1 - r2\n\n\tvar b uint64\n\n\tr0, b = bits.Sub64(x0, r0, 0)\n\tr1, b = bits.Sub64(x1, r1, b)\n\tr2, b = bits.Sub64(x2, r2, b)\n\tr3, b = bits.Sub64(x3, r3, b)\n\tr4, b = bits.Sub64(x4, r4, b)\n\n\t// if r\u003c0 then r+=m\n\n\tif b != 0 {\n\t\tr0, c = bits.Add64(r0, m.arr[0], 0)\n\t\tr1, c = bits.Add64(r1, m.arr[1], c)\n\t\tr2, c = bits.Add64(r2, m.arr[2], c)\n\t\tr3, c = bits.Add64(r3, m.arr[3], c)\n\t\tr4, _ = bits.Add64(r4, 0, c)\n\t}\n\n\t// while (r\u003e=m) r-=m\n\n\tfor {\n\t\t// q = r - m\n\t\tq0, b = bits.Sub64(r0, m.arr[0], 0)\n\t\tq1, b = bits.Sub64(r1, m.arr[1], b)\n\t\tq2, b = bits.Sub64(r2, m.arr[2], b)\n\t\tq3, b = bits.Sub64(r3, m.arr[3], b)\n\t\tq4, b = bits.Sub64(r4, 0, b)\n\n\t\t// if borrow break\n\t\tif b != 0 {\n\t\t\tbreak\n\t\t}\n\n\t\t// r = q\n\t\tr4, r3, r2, r1, r0 = q4, q3, q2, q1, q0\n\t}\n\n\tz.arr[3], z.arr[2], z.arr[1], z.arr[0] = r3, r2, r1, r0\n\n\treturn z\n}\n"},{"name":"uint256.gno","body":"// Ported from https://github.com/holiman/uint256\n// This package provides a 256-bit unsigned integer type, Uint256, and associated functions.\npackage uint256\n\nimport (\n\t\"errors\"\n\t\"math/bits\"\n)\n\nconst (\n\tMaxUint64 = 1\u003c\u003c64 - 1\n\tuintSize  = 32 \u003c\u003c (^uint(0) \u003e\u003e 63)\n)\n\n// Uint is represented as an array of 4 uint64, in little-endian order,\n// so that Uint[3] is the most significant, and Uint[0] is the least significant\ntype Uint struct {\n\tarr [4]uint64\n}\n\n// NewUint returns a new initialized Uint.\nfunc NewUint(val uint64) *Uint {\n\tz := \u0026Uint{arr: [4]uint64{val, 0, 0, 0}}\n\treturn z\n}\n\n// Zero returns a new Uint initialized to zero.\nfunc Zero() *Uint {\n\treturn NewUint(0)\n}\n\n// One returns a new Uint initialized to one.\nfunc One() *Uint {\n\treturn NewUint(1)\n}\n\n// SetAllOne sets all the bits of z to 1\nfunc (z *Uint) SetAllOne() *Uint {\n\tz.arr[3], z.arr[2], z.arr[1], z.arr[0] = MaxUint64, MaxUint64, MaxUint64, MaxUint64\n\treturn z\n}\n\n// Set sets z to x and returns z.\nfunc (z *Uint) Set(x *Uint) *Uint {\n\t*z = *x\n\n\treturn z\n}\n\n// SetOne sets z to 1\nfunc (z *Uint) SetOne() *Uint {\n\tz.arr[3], z.arr[2], z.arr[1], z.arr[0] = 0, 0, 0, 1\n\treturn z\n}\n\nconst twoPow256Sub1 = \"115792089237316195423570985008687907853269984665640564039457584007913129639935\"\n\n// SetFromDecimal sets z from the given string, interpreted as a decimal number.\n// OBS! This method is _not_ strictly identical to the (*big.Uint).SetString(..., 10) method.\n// Notable differences:\n// - This method does not accept underscore input, e.g. \"100_000\",\n// - This method does not accept negative zero as valid, e.g \"-0\",\n//   - (this method does not accept any negative input as valid))\nfunc (z *Uint) SetFromDecimal(s string) (err error) {\n\t// Remove max one leading +\n\tif len(s) \u003e 0 \u0026\u0026 s[0] == '+' {\n\t\ts = s[1:]\n\t}\n\t// Remove any number of leading zeroes\n\tif len(s) \u003e 0 \u0026\u0026 s[0] == '0' {\n\t\tvar i int\n\t\tvar c rune\n\t\tfor i, c = range s {\n\t\t\tif c != '0' {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\ts = s[i:]\n\t}\n\tif len(s) \u003c len(twoPow256Sub1) {\n\t\treturn z.fromDecimal(s)\n\t}\n\tif len(s) == len(twoPow256Sub1) {\n\t\tif s \u003e twoPow256Sub1 {\n\t\t\treturn ErrBig256Range\n\t\t}\n\t\treturn z.fromDecimal(s)\n\t}\n\treturn ErrBig256Range\n}\n\n// FromDecimal is a convenience-constructor to create an Uint from a\n// decimal (base 10) string. Numbers larger than 256 bits are not accepted.\nfunc FromDecimal(decimal string) (*Uint, error) {\n\tvar z Uint\n\tif err := z.SetFromDecimal(decimal); err != nil {\n\t\treturn nil, err\n\t}\n\treturn \u0026z, nil\n}\n\n// MustFromDecimal is a convenience-constructor to create an Uint from a\n// decimal (base 10) string.\n// Returns a new Uint and panics if any error occurred.\nfunc MustFromDecimal(decimal string) *Uint {\n\tvar z Uint\n\tif err := z.SetFromDecimal(decimal); err != nil {\n\t\tpanic(err)\n\t}\n\treturn \u0026z\n}\n\n// multipliers holds the values that are needed for fromDecimal\nvar multipliers = [5]*Uint{\n\tnil, // represents first round, no multiplication needed\n\t{[4]uint64{10000000000000000000, 0, 0, 0}},                                     // 10 ^ 19\n\t{[4]uint64{687399551400673280, 5421010862427522170, 0, 0}},                     // 10 ^ 38\n\t{[4]uint64{5332261958806667264, 17004971331911604867, 2938735877055718769, 0}}, // 10 ^ 57\n\t{[4]uint64{0, 8607968719199866880, 532749306367912313, 1593091911132452277}},   // 10 ^ 76\n}\n\n// fromDecimal is a helper function to only ever be called via SetFromDecimal\n// this function takes a string and chunks it up, calling ParseUint on it up to 5 times\n// these chunks are then multiplied by the proper power of 10, then added together.\nfunc (z *Uint) fromDecimal(bs string) error {\n\t// first clear the input\n\tz.Clear()\n\t// the maximum value of uint64 is 18446744073709551615, which is 20 characters\n\t// one less means that a string of 19 9's is always within the uint64 limit\n\tvar (\n\t\tnum       uint64\n\t\terr       error\n\t\tremaining = len(bs)\n\t)\n\tif remaining == 0 {\n\t\treturn errors.New(\"EOF\")\n\t}\n\t// We proceed in steps of 19 characters (nibbles), from least significant to most significant.\n\t// This means that the first (up to) 19 characters do not need to be multiplied.\n\t// In the second iteration, our slice of 19 characters needs to be multipleied\n\t// by a factor of 10^19. Et cetera.\n\tfor i, mult := range multipliers {\n\t\tif remaining \u003c= 0 {\n\t\t\treturn nil // Done\n\t\t} else if remaining \u003e 19 {\n\t\t\tnum, err = parseUint(bs[remaining-19:remaining], 10, 64)\n\t\t} else {\n\t\t\t// Final round\n\t\t\tnum, err = parseUint(bs, 10, 64)\n\t\t}\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// add that number to our running total\n\t\tif i == 0 {\n\t\t\tz.SetUint64(num)\n\t\t} else {\n\t\t\tbase := NewUint(num)\n\t\t\tz.Add(z, base.Mul(base, mult))\n\t\t}\n\t\t// Chop off another 19 characters\n\t\tif remaining \u003e 19 {\n\t\t\tbs = bs[0 : remaining-19]\n\t\t}\n\t\tremaining -= 19\n\t}\n\treturn nil\n}\n\n// Byte sets z to the value of the byte at position n,\n// with 'z' considered as a big-endian 32-byte integer\n// if 'n' \u003e 32, f is set to 0\n// Example: f = '5', n=31 =\u003e 5\nfunc (z *Uint) Byte(n *Uint) *Uint {\n\t// in z, z.arr[0] is the least significant\n\tif number, overflow := n.Uint64WithOverflow(); !overflow {\n\t\tif number \u003c 32 {\n\t\t\tnumber := z.arr[4-1-number/8]\n\t\t\toffset := (n.arr[0] \u0026 0x7) \u003c\u003c 3 // 8*(n.d % 8)\n\t\t\tz.arr[0] = (number \u0026 (0xff00000000000000 \u003e\u003e offset)) \u003e\u003e (56 - offset)\n\t\t\tz.arr[3], z.arr[2], z.arr[1] = 0, 0, 0\n\t\t\treturn z\n\t\t}\n\t}\n\n\treturn z.Clear()\n}\n\n// BitLen returns the number of bits required to represent z\nfunc (z *Uint) BitLen() int {\n\tswitch {\n\tcase z.arr[3] != 0:\n\t\treturn 192 + bits.Len64(z.arr[3])\n\tcase z.arr[2] != 0:\n\t\treturn 128 + bits.Len64(z.arr[2])\n\tcase z.arr[1] != 0:\n\t\treturn 64 + bits.Len64(z.arr[1])\n\tdefault:\n\t\treturn bits.Len64(z.arr[0])\n\t}\n}\n\n// ByteLen returns the number of bytes required to represent z\nfunc (z *Uint) ByteLen() int {\n\treturn (z.BitLen() + 7) / 8\n}\n\n// Clear sets z to 0\nfunc (z *Uint) Clear() *Uint {\n\tz.arr[3], z.arr[2], z.arr[1], z.arr[0] = 0, 0, 0, 0\n\treturn z\n}\n\nconst (\n\t// hextable  = \"0123456789abcdef\"\n\tbintable  = \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\t\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\n\\v\\f\\r\\x0e\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\n\\v\\f\\r\\x0e\\x0f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"\n\tbadNibble = 0xff\n)\n\n// SetFromHex sets z from the given string, interpreted as a hexadecimal number.\n// OBS! This method is _not_ strictly identical to the (*big.Int).SetString(..., 16) method.\n// Notable differences:\n// - This method _require_ \"0x\" or \"0X\" prefix.\n// - This method does not accept zero-prefixed hex, e.g. \"0x0001\"\n// - This method does not accept underscore input, e.g. \"100_000\",\n// - This method does not accept negative zero as valid, e.g \"-0x0\",\n//   - (this method does not accept any negative input as valid)\nfunc (z *Uint) SetFromHex(hex string) error {\n\treturn z.fromHex(hex)\n}\n\n// fromHex is the internal implementation of parsing a hex-string.\nfunc (z *Uint) fromHex(hex string) error {\n\tif err := checkNumberS(hex); err != nil {\n\t\treturn err\n\t}\n\tif len(hex) \u003e 66 {\n\t\treturn ErrBig256Range\n\t}\n\tz.Clear()\n\tend := len(hex)\n\tfor i := 0; i \u003c 4; i++ {\n\t\tstart := end - 16\n\t\tif start \u003c 2 {\n\t\t\tstart = 2\n\t\t}\n\t\tfor ri := start; ri \u003c end; ri++ {\n\t\t\tnib := bintable[hex[ri]]\n\t\t\tif nib == badNibble {\n\t\t\t\treturn ErrSyntax\n\t\t\t}\n\t\t\tz.arr[i] = z.arr[i] \u003c\u003c 4\n\t\t\tz.arr[i] += uint64(nib)\n\t\t}\n\t\tend = start\n\t}\n\treturn nil\n}\n\n// FromHex is a convenience-constructor to create an Uint from\n// a hexadecimal string. The string is required to be '0x'-prefixed\n// Numbers larger than 256 bits are not accepted.\nfunc FromHex(hex string) (*Uint, error) {\n\tvar z Uint\n\tif err := z.fromHex(hex); err != nil {\n\t\treturn nil, err\n\t}\n\treturn \u0026z, nil\n}\n\n// MustFromHex is a convenience-constructor to create an Uint from\n// a hexadecimal string.\n// Returns a new Uint and panics if any error occurred.\nfunc MustFromHex(hex string) *Uint {\n\tvar z Uint\n\tif err := z.fromHex(hex); err != nil {\n\t\tpanic(err)\n\t}\n\treturn \u0026z\n}\n\n// Clone creates a new Uint identical to z\nfunc (z *Uint) Clone() *Uint {\n\tvar x Uint\n\tx.arr[0] = z.arr[0]\n\tx.arr[1] = z.arr[1]\n\tx.arr[2] = z.arr[2]\n\tx.arr[3] = z.arr[3]\n\n\treturn \u0026x\n}\n"},{"name":"utils.gno","body":"package uint256\n\n// lower(c) is a lower-case letter if and only if\n// c is either that lower-case letter or the equivalent upper-case letter.\n// Instead of writing c == 'x' || c == 'X' one can write lower(c) == 'x'.\n// Note that lower of non-letters can produce other non-letters.\nfunc lower(c byte) byte {\n\treturn c | ('x' - 'X')\n}\n\n// underscoreOK reports whether the underscores in s are allowed.\n// Checking them in this one function lets all the parsers skip over them simply.\n// Underscore must appear only between digits or between a base prefix and a digit.\nfunc underscoreOK(s string) bool {\n\t// saw tracks the last character (class) we saw:\n\t// ^ for beginning of number,\n\t// 0 for a digit or base prefix,\n\t// _ for an underscore,\n\t// ! for none of the above.\n\tsaw := '^'\n\ti := 0\n\n\t// Optional sign.\n\tif len(s) \u003e= 1 \u0026\u0026 (s[0] == '-' || s[0] == '+') {\n\t\ts = s[1:]\n\t}\n\n\t// Optional base prefix.\n\thex := false\n\tif len(s) \u003e= 2 \u0026\u0026 s[0] == '0' \u0026\u0026 (lower(s[1]) == 'b' || lower(s[1]) == 'o' || lower(s[1]) == 'x') {\n\t\ti = 2\n\t\tsaw = '0' // base prefix counts as a digit for \"underscore as digit separator\"\n\t\thex = lower(s[1]) == 'x'\n\t}\n\n\t// Number proper.\n\tfor ; i \u003c len(s); i++ {\n\t\t// Digits are always okay.\n\t\tif '0' \u003c= s[i] \u0026\u0026 s[i] \u003c= '9' || hex \u0026\u0026 'a' \u003c= lower(s[i]) \u0026\u0026 lower(s[i]) \u003c= 'f' {\n\t\t\tsaw = '0'\n\t\t\tcontinue\n\t\t}\n\t\t// Underscore must follow digit.\n\t\tif s[i] == '_' {\n\t\t\tif saw != '0' {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tsaw = '_'\n\t\t\tcontinue\n\t\t}\n\t\t// Underscore must also be followed by digit.\n\t\tif saw == '_' {\n\t\t\treturn false\n\t\t}\n\t\t// Saw non-digit, non-underscore.\n\t\tsaw = '!'\n\t}\n\treturn saw != '_'\n}\n\nfunc checkNumberS(input string) error {\n\tconst fn = \"UnmarshalText\"\n\tl := len(input)\n\tif l == 0 {\n\t\treturn errEmptyString(fn, input)\n\t}\n\tif l \u003c 2 || input[0] != '0' ||\n\t\t(input[1] != 'x' \u0026\u0026 input[1] != 'X') {\n\t\treturn errMissingPrefix(fn, input)\n\t}\n\tif l == 2 {\n\t\treturn errEmptyNumber(fn, input)\n\t}\n\tif len(input) \u003e 3 \u0026\u0026 input[2] == '0' {\n\t\treturn errLeadingZero(fn, input)\n\t}\n\treturn nil\n}\n\n// ParseUint is like ParseUint but for unsigned numbers.\n//\n// A sign prefix is not permitted.\nfunc parseUint(s string, base int, bitSize int) (uint64, error) {\n\tconst fnParseUint = \"ParseUint\"\n\n\tif s == \"\" {\n\t\treturn 0, errSyntax(fnParseUint, s)\n\t}\n\n\tbase0 := base == 0\n\n\ts0 := s\n\tswitch {\n\tcase 2 \u003c= base \u0026\u0026 base \u003c= 36:\n\t\t// valid base; nothing to do\n\n\tcase base == 0:\n\t\t// Look for octal, hex prefix.\n\t\tbase = 10\n\t\tif s[0] == '0' {\n\t\t\tswitch {\n\t\t\tcase len(s) \u003e= 3 \u0026\u0026 lower(s[1]) == 'b':\n\t\t\t\tbase = 2\n\t\t\t\ts = s[2:]\n\t\t\tcase len(s) \u003e= 3 \u0026\u0026 lower(s[1]) == 'o':\n\t\t\t\tbase = 8\n\t\t\t\ts = s[2:]\n\t\t\tcase len(s) \u003e= 3 \u0026\u0026 lower(s[1]) == 'x':\n\t\t\t\tbase = 16\n\t\t\t\ts = s[2:]\n\t\t\tdefault:\n\t\t\t\tbase = 8\n\t\t\t\ts = s[1:]\n\t\t\t}\n\t\t}\n\n\tdefault:\n\t\treturn 0, errInvalidBase(fnParseUint, base)\n\t}\n\n\tif bitSize == 0 {\n\t\tbitSize = uintSize\n\t} else if bitSize \u003c 0 || bitSize \u003e 64 {\n\t\treturn 0, errInvalidBitSize(fnParseUint, bitSize)\n\t}\n\n\t// Cutoff is the smallest number such that cutoff*base \u003e maxUint64.\n\t// Use compile-time constants for common cases.\n\tvar cutoff uint64\n\tswitch base {\n\tcase 10:\n\t\tcutoff = MaxUint64/10 + 1\n\tcase 16:\n\t\tcutoff = MaxUint64/16 + 1\n\tdefault:\n\t\tcutoff = MaxUint64/uint64(base) + 1\n\t}\n\n\tmaxVal := uint64(1)\u003c\u003cuint(bitSize) - 1\n\n\tunderscores := false\n\tvar n uint64\n\tfor _, c := range []byte(s) {\n\t\tvar d byte\n\t\tswitch {\n\t\tcase c == '_' \u0026\u0026 base0:\n\t\t\tunderscores = true\n\t\t\tcontinue\n\t\tcase '0' \u003c= c \u0026\u0026 c \u003c= '9':\n\t\t\td = c - '0'\n\t\tcase 'a' \u003c= lower(c) \u0026\u0026 lower(c) \u003c= 'z':\n\t\t\td = lower(c) - 'a' + 10\n\t\tdefault:\n\t\t\treturn 0, errSyntax(fnParseUint, s0)\n\t\t}\n\n\t\tif d \u003e= byte(base) {\n\t\t\treturn 0, errSyntax(fnParseUint, s0)\n\t\t}\n\n\t\tif n \u003e= cutoff {\n\t\t\t// n*base overflows\n\t\t\treturn maxVal, errRange(fnParseUint, s0)\n\t\t}\n\t\tn *= uint64(base)\n\n\t\tn1 := n + uint64(d)\n\t\tif n1 \u003c n || n1 \u003e maxVal {\n\t\t\t// n+d overflows\n\t\t\treturn maxVal, errRange(fnParseUint, s0)\n\t\t}\n\t\tn = n1\n\t}\n\n\tif underscores \u0026\u0026 !underscoreOK(s0) {\n\t\treturn 0, errSyntax(fnParseUint, s0)\n\t}\n\n\treturn n, nil\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"/gBpcbB1GlRHiKJGBfx/8iVIs7hb6nA9ifjuv5ogB/td6M1gGsrxp5RgUQOeDiteAeFoQuKXBDnkizN3vQqGjA=="}],"memo":""},"blockNum":"147613"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","package":{"name":"int256","path":"gno.land/p/gnoswap/int256","files":[{"name":"LICENSE","body":"MIT License\n\nCopyright (c) 2023 Trịnh Đức Bảo Linh(Kevin)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."},{"name":"README.md","body":"# Fixed size signed 256-bit math library\n\n1. This is a library specialized at replacing the big.Int library for math based on signed 256-bit types.\n2. It uses [uint256](https://github.com/gnolang/gno/tree/master/examples/gno.land/p/gnoswap/uint256) as the underlying type.\n\nported from [mempooler/int256](https://github.com/mempooler/int256)\n"},{"name":"absolute.gno","body":"package int256\n\nimport (\n\t\"gno.land/p/gnoswap/uint256\"\n)\n\n// Abs returns |z|\nfunc (z *Int) Abs() *uint256.Uint {\n\treturn z.abs.Clone()\n}\n\n// AbsGt returns true if |z| \u003e x, where x is a uint256\nfunc (z *Int) AbsGt(x *uint256.Uint) bool {\n\treturn z.abs.Gt(x)\n}\n\n// AbsLt returns true if |z| \u003c x, where x is a uint256\nfunc (z *Int) AbsLt(x *uint256.Uint) bool {\n\treturn z.abs.Lt(x)\n}\n"},{"name":"absolute_test.gno","body":"package int256\n\nimport (\n\t\"testing\"\n\n\t\"gno.land/p/gnoswap/uint256\"\n)\n\nfunc TestAbs(t *testing.T) {\n\ttests := []struct {\n\t\tx, want string\n\t}{\n\t\t{\"0\", \"0\"},\n\t\t{\"1\", \"1\"},\n\t\t{\"-1\", \"1\"},\n\t\t{\"-2\", \"2\"},\n\t\t{\"-115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"115792089237316195423570985008687907853269984665640564039457584007913129639935\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := x.Abs()\n\n\t\tif got.ToString() != tc.want {\n\t\t\tt.Errorf(\"Abs(%s) = %v, want %v\", tc.x, got.ToString(), tc.want)\n\t\t}\n\t}\n}\n\nfunc TestAbsGt(t *testing.T) {\n\ttests := []struct {\n\t\tx, y, want string\n\t}{\n\t\t{\"0\", \"0\", \"false\"},\n\t\t{\"1\", \"0\", \"true\"},\n\t\t{\"-1\", \"0\", \"true\"},\n\t\t{\"-1\", \"1\", \"false\"},\n\t\t{\"-2\", \"1\", \"true\"},\n\t\t{\"-115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"0\", \"true\"},\n\t\t{\"-115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"1\", \"true\"},\n\t\t{\"-115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"false\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := uint256.FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := x.AbsGt(y)\n\n\t\tif got != (tc.want == \"true\") {\n\t\t\tt.Errorf(\"AbsGt(%s, %s) = %v, want %v\", tc.x, tc.y, got, tc.want)\n\t\t}\n\t}\n}\n\nfunc TestAbsLt(t *testing.T) {\n\ttests := []struct {\n\t\tx, y, want string\n\t}{\n\t\t{\"0\", \"0\", \"false\"},\n\t\t{\"1\", \"0\", \"false\"},\n\t\t{\"-1\", \"0\", \"false\"},\n\t\t{\"-1\", \"1\", \"false\"},\n\t\t{\"-2\", \"1\", \"false\"},\n\t\t{\"-5\", \"10\", \"true\"},\n\t\t{\"31330\", \"31337\", \"true\"},\n\t\t{\"-115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"0\", \"false\"},\n\t\t{\"-115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"1\", \"false\"},\n\t\t{\"-115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"false\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := uint256.FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := x.AbsLt(y)\n\n\t\tif got != (tc.want == \"true\") {\n\t\t\tt.Errorf(\"AbsLt(%s, %s) = %v, want %v\", tc.x, tc.y, got, tc.want)\n\t\t}\n\t}\n}\n"},{"name":"arithmetic.gno","body":"package int256\n\nimport (\n\t\"gno.land/p/gnoswap/uint256\"\n)\n\nfunc (z *Int) Add(x, y *Int) *Int {\n\tz.initiateAbs()\n\n\tneg := x.neg\n\n\tif x.neg == y.neg {\n\t\t// x + y == x + y\n\t\t// (-x) + (-y) == -(x + y)\n\t\tz.abs = z.abs.Add(x.abs, y.abs)\n\t} else {\n\t\t// x + (-y) == x - y == -(y - x)\n\t\t// (-x) + y == y - x == -(x - y)\n\t\tif x.abs.Cmp(y.abs) \u003e= 0 {\n\t\t\tz.abs = z.abs.Sub(x.abs, y.abs)\n\t\t} else {\n\t\t\tneg = !neg\n\t\t\tz.abs = z.abs.Sub(y.abs, x.abs)\n\t\t}\n\t}\n\tz.neg = neg // 0 has no sign\n\treturn z\n}\n\n// AddUint256 set z to the sum x + y, where y is a uint256, and returns z\nfunc (z *Int) AddUint256(x *Int, y *uint256.Uint) *Int {\n\tif x.neg {\n\t\tif x.abs.Gt(y) {\n\t\t\tz.abs.Sub(x.abs, y)\n\t\t\tz.neg = true\n\t\t} else {\n\t\t\tz.abs.Sub(y, x.abs)\n\t\t\tz.neg = false\n\t\t}\n\t} else {\n\t\tz.abs.Add(x.abs, y)\n\t\tz.neg = false\n\t}\n\treturn z\n}\n\n// Sets z to the sum x + y, where z and x are uint256s and y is an int256.\nfunc AddDelta(z, x *uint256.Uint, y *Int) {\n\tif y.neg {\n\t\tz.Sub(x, y.abs)\n\t} else {\n\t\tz.Add(x, y.abs)\n\t}\n}\n\n// Sets z to the sum x + y, where z and x are uint256s and y is an int256.\nfunc AddDeltaOverflow(z, x *uint256.Uint, y *Int) bool {\n\tvar overflow bool\n\tif y.neg {\n\t\t_, overflow = z.SubOverflow(x, y.abs)\n\t} else {\n\t\t_, overflow = z.AddOverflow(x, y.abs)\n\t}\n\treturn overflow\n}\n\n// Sub sets z to the difference x-y and returns z.\nfunc (z *Int) Sub(x, y *Int) *Int {\n\tz.initiateAbs()\n\n\tneg := x.neg\n\tif x.neg != y.neg {\n\t\t// x - (-y) == x + y\n\t\t// (-x) - y == -(x + y)\n\t\tz.abs = z.abs.Add(x.abs, y.abs)\n\t} else {\n\t\t// x - y == x - y == -(y - x)\n\t\t// (-x) - (-y) == y - x == -(x - y)\n\t\tif x.abs.Cmp(y.abs) \u003e= 0 {\n\t\t\tz.abs = z.abs.Sub(x.abs, y.abs)\n\t\t} else {\n\t\t\tneg = !neg\n\t\t\tz.abs = z.abs.Sub(y.abs, x.abs)\n\t\t}\n\t}\n\tz.neg = neg // 0 has no sign\n\treturn z\n}\n\n// SubUint256 set z to the difference x - y, where y is a uint256, and returns z\nfunc (z *Int) SubUint256(x *Int, y *uint256.Uint) *Int {\n\tif x.neg {\n\t\tz.abs.Add(x.abs, y)\n\t\tz.neg = true\n\t} else {\n\t\tif x.abs.Lt(y) {\n\t\t\tz.abs.Sub(y, x.abs)\n\t\t\tz.neg = true\n\t\t} else {\n\t\t\tz.abs.Sub(x.abs, y)\n\t\t\tz.neg = false\n\t\t}\n\t}\n\treturn z\n}\n\n// Mul sets z to the product x*y and returns z.\nfunc (z *Int) Mul(x, y *Int) *Int {\n\tz.initiateAbs()\n\n\tz.abs = z.abs.Mul(x.abs, y.abs)\n\tz.neg = x.neg != y.neg // 0 has no sign\n\treturn z\n}\n\n// MulUint256 sets z to the product x*y, where y is a uint256, and returns z\nfunc (z *Int) MulUint256(x *Int, y *uint256.Uint) *Int {\n\tz.abs.Mul(x.abs, y)\n\tif z.abs.IsZero() {\n\t\tz.neg = false\n\t} else {\n\t\tz.neg = x.neg\n\t}\n\treturn z\n}\n\n// Div sets z to the quotient x/y for y != 0 and returns z.\nfunc (z *Int) Div(x, y *Int) *Int {\n\tz.initiateAbs()\n\n\tz.abs.Div(x.abs, y.abs)\n\tif x.neg == y.neg {\n\t\tz.neg = false\n\t} else {\n\t\tz.neg = true\n\t}\n\treturn z\n}\n\n// DivUint256 sets z to the quotient x/y, where y is a uint256, and returns z\n// If y == 0, z is set to 0\nfunc (z *Int) DivUint256(x *Int, y *uint256.Uint) *Int {\n\tz.abs.Div(x.abs, y)\n\tif z.abs.IsZero() {\n\t\tz.neg = false\n\t} else {\n\t\tz.neg = x.neg\n\t}\n\treturn z\n}\n\n// Quo sets z to the quotient x/y for y != 0 and returns z.\n// If y == 0, a division-by-zero run-time panic occurs.\n// OBS: differs from mempooler int256, we need to panic manually if y == 0\n// Quo implements truncated division (like Go); see QuoRem for more details.\nfunc (z *Int) Quo(x, y *Int) *Int {\n\tif y.IsZero() {\n\t\tpanic(\"int256_Quo()__division by zero\")\n\t}\n\n\tz.initiateAbs()\n\n\tz.abs = z.abs.Div(x.abs, y.abs)\n\tz.neg = !(z.abs.IsZero()) \u0026\u0026 x.neg != y.neg // 0 has no sign\n\treturn z\n}\n\n// Rem sets z to the remainder x%y for y != 0 and returns z.\n// If y == 0, a division-by-zero run-time panic occurs.\n// OBS: differs from mempooler int256, we need to panic manually if y == 0\n// Rem implements truncated modulus (like Go); see QuoRem for more details.\nfunc (z *Int) Rem(x, y *Int) *Int {\n\tif y.IsZero() {\n\t\tpanic(\"int256_Rem()__division by zero\")\n\t}\n\n\tz.initiateAbs()\n\n\tz.abs.Mod(x.abs, y.abs)\n\tz.neg = z.abs.Sign() \u003e 0 \u0026\u0026 x.neg // 0 has no sign\n\treturn z\n}\n\n// Mod sets z to the modulus x%y for y != 0 and returns z.\n// If y == 0, z is set to 0 (OBS: differs from the big.Int)\nfunc (z *Int) Mod(x, y *Int) *Int {\n\tif x.neg {\n\t\tz.abs.Div(x.abs, y.abs)\n\t\tz.abs.Add(z.abs, one)\n\t\tz.abs.Mul(z.abs, y.abs)\n\t\tz.abs.Sub(z.abs, x.abs)\n\t\tz.abs.Mod(z.abs, y.abs)\n\t} else {\n\t\tz.abs.Mod(x.abs, y.abs)\n\t}\n\tz.neg = false\n\treturn z\n}\n"},{"name":"arithmetic_test.gno","body":"package int256\n\nimport (\n\t\"testing\"\n\n\t\"gno.land/p/gnoswap/uint256\"\n)\n\nfunc TestAdd(t *testing.T) {\n\ttests := []struct {\n\t\tx, y, want string\n\t}{\n\t\t{\"0\", \"1\", \"1\"},\n\t\t{\"1\", \"0\", \"1\"},\n\t\t{\"1\", \"1\", \"2\"},\n\t\t{\"1\", \"2\", \"3\"},\n\t\t// NEGATIVE\n\t\t{\"-1\", \"1\", \"-0\"}, // TODO: remove negative sign for 0 ??\n\t\t{\"1\", \"-1\", \"0\"},\n\t\t{\"-1\", \"-1\", \"-2\"},\n\t\t{\"-1\", \"-2\", \"-3\"},\n\t\t{\"-1\", \"3\", \"2\"},\n\t\t{\"3\", \"-1\", \"2\"},\n\t\t// OVERFLOW\n\t\t{\"115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"1\", \"0\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\twant, err := FromDecimal(tc.want)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := New()\n\t\tgot.Add(x, y)\n\n\t\tif got.Neq(want) {\n\t\t\tt.Errorf(\"Add(%s, %s) = %v, want %v\", tc.x, tc.y, got.ToString(), want.ToString())\n\t\t}\n\t}\n}\n\nfunc TestAddUint256(t *testing.T) {\n\ttests := []struct {\n\t\tx, y, want string\n\t}{\n\t\t{\"0\", \"1\", \"1\"},\n\t\t{\"1\", \"0\", \"1\"},\n\t\t{\"1\", \"1\", \"2\"},\n\t\t{\"1\", \"2\", \"3\"},\n\t\t{\"-1\", \"1\", \"0\"},\n\t\t{\"-1\", \"3\", \"2\"},\n\t\t{\"-115792089237316195423570985008687907853269984665640564039457584007913129639934\", \"115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"1\"},\n\t\t{\"-115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"115792089237316195423570985008687907853269984665640564039457584007913129639934\", \"-1\"},\n\t\t// OVERFLOW\n\t\t{\"-115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"0\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := uint256.FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\twant, err := FromDecimal(tc.want)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := New()\n\t\tgot.AddUint256(x, y)\n\n\t\tif got.Neq(want) {\n\t\t\tt.Errorf(\"AddUint256(%s, %s) = %v, want %v\", tc.x, tc.y, got.ToString(), want.ToString())\n\t\t}\n\t}\n}\n\nfunc TestAddDelta(t *testing.T) {\n\ttests := []struct {\n\t\tz, x, y, want string\n\t}{\n\t\t{\"0\", \"0\", \"0\", \"0\"},\n\t\t{\"0\", \"0\", \"1\", \"1\"},\n\t\t{\"0\", \"1\", \"0\", \"1\"},\n\t\t{\"0\", \"1\", \"1\", \"2\"},\n\t\t{\"1\", \"2\", \"3\", \"5\"},\n\t\t{\"5\", \"10\", \"-3\", \"7\"},\n\t\t// underflow\n\t\t{\"1\", \"2\", \"-3\", \"115792089237316195423570985008687907853269984665640564039457584007913129639935\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tz, err := uint256.FromDecimal(tc.z)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tx, err := uint256.FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\twant, err := uint256.FromDecimal(tc.want)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tAddDelta(z, x, y)\n\n\t\tif z.Neq(want) {\n\t\t\tt.Errorf(\"AddDelta(%s, %s, %s) = %v, want %v\", tc.z, tc.x, tc.y, z.ToString(), want.ToString())\n\t\t}\n\t}\n}\n\nfunc TestAddDeltaOverflow(t *testing.T) {\n\ttests := []struct {\n\t\tz, x, y string\n\t\twant    bool\n\t}{\n\t\t{\"0\", \"0\", \"0\", false},\n\t\t// underflow\n\t\t{\"1\", \"2\", \"-3\", true},\n\t}\n\n\tfor _, tc := range tests {\n\t\tz, err := uint256.FromDecimal(tc.z)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tx, err := uint256.FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tresult := AddDeltaOverflow(z, x, y)\n\t\tif result != tc.want {\n\t\t\tt.Errorf(\"AddDeltaOverflow(%s, %s, %s) = %v, want %v\", tc.z, tc.x, tc.y, result, tc.want)\n\t\t}\n\t}\n}\n\nfunc TestSub(t *testing.T) {\n\ttests := []struct {\n\t\tx, y, want string\n\t}{\n\t\t{\"1\", \"0\", \"1\"},\n\t\t{\"1\", \"1\", \"0\"},\n\t\t{\"-1\", \"1\", \"-2\"},\n\t\t{\"1\", \"-1\", \"2\"},\n\t\t{\"-1\", \"-1\", \"-0\"},\n\t\t{\"-115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"-115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"-0\"},\n\t\t{\"-115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"0\", \"-115792089237316195423570985008687907853269984665640564039457584007913129639935\"},\n\t\t{x: \"-115792089237316195423570985008687907853269984665640564039457584007913129639935\", y: \"1\", want: \"-0\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\twant, err := FromDecimal(tc.want)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := New()\n\t\tgot.Sub(x, y)\n\n\t\tif got.Neq(want) {\n\t\t\tt.Errorf(\"Sub(%s, %s) = %v, want %v\", tc.x, tc.y, got.ToString(), want.ToString())\n\t\t}\n\t}\n}\n\nfunc TestSubUint256(t *testing.T) {\n\ttests := []struct {\n\t\tx, y, want string\n\t}{\n\t\t{\"0\", \"1\", \"-1\"},\n\t\t{\"1\", \"0\", \"1\"},\n\t\t{\"1\", \"1\", \"0\"},\n\t\t{\"1\", \"2\", \"-1\"},\n\t\t{\"-1\", \"1\", \"-2\"},\n\t\t{\"-1\", \"3\", \"-4\"},\n\t\t// underflow\n\t\t{\"-115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"1\", \"-0\"},\n\t\t{\"-115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"2\", \"-1\"},\n\t\t{\"-115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"3\", \"-2\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := uint256.FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\twant, err := FromDecimal(tc.want)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := New()\n\t\tgot.SubUint256(x, y)\n\n\t\tif got.Neq(want) {\n\t\t\tt.Errorf(\"SubUint256(%s, %s) = %v, want %v\", tc.x, tc.y, got.ToString(), want.ToString())\n\t\t}\n\t}\n}\n\nfunc TestMul(t *testing.T) {\n\ttests := []struct {\n\t\tx, y, want string\n\t}{\n\t\t{\"5\", \"3\", \"15\"},\n\t\t{\"-5\", \"3\", \"-15\"},\n\t\t{\"5\", \"-3\", \"-15\"},\n\t\t{\"0\", \"3\", \"0\"},\n\t\t{\"3\", \"0\", \"0\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\twant, err := FromDecimal(tc.want)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := New()\n\t\tgot.Mul(x, y)\n\n\t\tif got.Neq(want) {\n\t\t\tt.Errorf(\"Mul(%s, %s) = %v, want %v\", tc.x, tc.y, got.ToString(), want.ToString())\n\t\t}\n\t}\n}\n\nfunc TestMulUint256(t *testing.T) {\n\ttests := []struct {\n\t\tx, y, want string\n\t}{\n\t\t{\"0\", \"1\", \"0\"},\n\t\t{\"1\", \"0\", \"0\"},\n\t\t{\"1\", \"1\", \"1\"},\n\t\t{\"1\", \"2\", \"2\"},\n\t\t{\"-1\", \"1\", \"-1\"},\n\t\t{\"-1\", \"3\", \"-3\"},\n\t\t{\"3\", \"4\", \"12\"},\n\t\t{\"-3\", \"4\", \"-12\"},\n\t\t{\"-115792089237316195423570985008687907853269984665640564039457584007913129639934\", \"2\", \"-115792089237316195423570985008687907853269984665640564039457584007913129639932\"},\n\t\t{\"115792089237316195423570985008687907853269984665640564039457584007913129639934\", \"2\", \"115792089237316195423570985008687907853269984665640564039457584007913129639932\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := uint256.FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\twant, err := FromDecimal(tc.want)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := New()\n\t\tgot.MulUint256(x, y)\n\n\t\tif got.Neq(want) {\n\t\t\tt.Errorf(\"MulUint256(%s, %s) = %v, want %v\", tc.x, tc.y, got.ToString(), want.ToString())\n\t\t}\n\t}\n}\n\nfunc TestDiv(t *testing.T) {\n\ttests := []struct {\n\t\tx, y, want string\n\t}{\n\t\t{\"0\", \"1\", \"0\"},\n\t\t{\"0\", \"-1\", \"-0\"},\n\t\t{\"10\", \"0\", \"0\"},\n\t\t{\"10\", \"1\", \"10\"},\n\t\t{\"10\", \"-1\", \"-10\"},\n\t\t{\"-10\", \"0\", \"-0\"},\n\t\t{\"-10\", \"1\", \"-10\"},\n\t\t{\"-10\", \"-1\", \"10\"},\n\t\t{\"10\", \"-3\", \"-3\"},\n\t\t{\"10\", \"3\", \"3\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\twant, err := FromDecimal(tc.want)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := New()\n\t\tgot.Div(x, y)\n\n\t\tif got.Neq(want) {\n\t\t\tt.Errorf(\"Div(%s, %s) = %v, want %v\", tc.x, tc.y, got.ToString(), want.ToString())\n\t\t}\n\t}\n}\n\nfunc TestDivUint256(t *testing.T) {\n\ttests := []struct {\n\t\tx, y, want string\n\t}{\n\t\t{\"0\", \"1\", \"0\"},\n\t\t{\"1\", \"0\", \"0\"},\n\t\t{\"1\", \"1\", \"1\"},\n\t\t{\"1\", \"2\", \"0\"},\n\t\t{\"-1\", \"1\", \"-1\"},\n\t\t{\"-1\", \"3\", \"0\"},\n\t\t{\"4\", \"3\", \"1\"},\n\t\t{\"25\", \"5\", \"5\"},\n\t\t{\"25\", \"4\", \"6\"},\n\t\t{\"-115792089237316195423570985008687907853269984665640564039457584007913129639934\", \"2\", \"-57896044618658097711785492504343953926634992332820282019728792003956564819967\"},\n\t\t{\"115792089237316195423570985008687907853269984665640564039457584007913129639934\", \"2\", \"57896044618658097711785492504343953926634992332820282019728792003956564819967\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := uint256.FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\twant, err := FromDecimal(tc.want)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := New()\n\t\tgot.DivUint256(x, y)\n\n\t\tif got.Neq(want) {\n\t\t\tt.Errorf(\"DivUint256(%s, %s) = %v, want %v\", tc.x, tc.y, got.ToString(), want.ToString())\n\t\t}\n\t}\n}\n\nfunc TestQuo(t *testing.T) {\n\ttests := []struct {\n\t\tx, y, want string\n\t}{\n\t\t{\"0\", \"1\", \"0\"},\n\t\t{\"0\", \"-1\", \"0\"},\n\t\t{\"10\", \"1\", \"10\"},\n\t\t{\"10\", \"-1\", \"-10\"},\n\t\t{\"-10\", \"1\", \"-10\"},\n\t\t{\"-10\", \"-1\", \"10\"},\n\t\t{\"10\", \"-3\", \"-3\"},\n\t\t{\"10\", \"3\", \"3\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\twant, err := FromDecimal(tc.want)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := New()\n\t\tgot.Quo(x, y)\n\n\t\tif got.Neq(want) {\n\t\t\tt.Errorf(\"Quo(%s, %s) = %v, want %v\", tc.x, tc.y, got.ToString(), want.ToString())\n\t\t}\n\t}\n}\n\nfunc TestRem(t *testing.T) {\n\ttests := []struct {\n\t\tx, y, want string\n\t}{\n\t\t{\"0\", \"1\", \"0\"},\n\t\t{\"0\", \"-1\", \"0\"},\n\t\t{\"10\", \"1\", \"0\"},\n\t\t{\"10\", \"-1\", \"0\"},\n\t\t{\"-10\", \"1\", \"0\"},\n\t\t{\"-10\", \"-1\", \"0\"},\n\t\t{\"10\", \"3\", \"1\"},\n\t\t{\"10\", \"-3\", \"1\"},\n\t\t{\"-10\", \"3\", \"-1\"},\n\t\t{\"-10\", \"-3\", \"-1\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\twant, err := FromDecimal(tc.want)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := New()\n\t\tgot.Rem(x, y)\n\n\t\tif got.Neq(want) {\n\t\t\tt.Errorf(\"Rem(%s, %s) = %v, want %v\", tc.x, tc.y, got.ToString(), want.ToString())\n\t\t}\n\t}\n}\n\nfunc TestMod(t *testing.T) {\n\ttests := []struct {\n\t\tx, y, want string\n\t}{\n\t\t{\"0\", \"1\", \"0\"},\n\t\t{\"0\", \"-1\", \"0\"},\n\t\t{\"10\", \"0\", \"0\"},\n\t\t{\"10\", \"1\", \"0\"},\n\t\t{\"10\", \"-1\", \"0\"},\n\t\t{\"-10\", \"0\", \"0\"},\n\t\t{\"-10\", \"1\", \"0\"},\n\t\t{\"-10\", \"-1\", \"0\"},\n\t\t{\"10\", \"3\", \"1\"},\n\t\t{\"10\", \"-3\", \"1\"},\n\t\t{\"-10\", \"3\", \"2\"},\n\t\t{\"-10\", \"-3\", \"2\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\twant, err := FromDecimal(tc.want)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := New()\n\t\tgot.Mod(x, y)\n\n\t\tif got.Neq(want) {\n\t\t\tt.Errorf(\"Mod(%s, %s) = %v, want %v\", tc.x, tc.y, got.ToString(), want.ToString())\n\t\t}\n\t}\n}\n"},{"name":"bitwise.gno","body":"package int256\n\nimport (\n\t\"gno.land/p/gnoswap/uint256\"\n)\n\n// Or sets z = x | y and returns z.\nfunc (z *Int) Or(x, y *Int) *Int {\n\tif x.neg == y.neg {\n\t\tif x.neg {\n\t\t\t// (-x) | (-y) == ^(x-1) | ^(y-1) == ^((x-1) \u0026 (y-1)) == -(((x-1) \u0026 (y-1)) + 1)\n\t\t\tx1 := new(uint256.Uint).Sub(x.abs, one)\n\t\t\ty1 := new(uint256.Uint).Sub(y.abs, one)\n\t\t\tz.abs = z.abs.Add(z.abs.And(x1, y1), one)\n\t\t\tz.neg = true // z cannot be zero if x and y are negative\n\t\t\treturn z\n\t\t}\n\n\t\t// x | y == x | y\n\t\tz.abs = z.abs.Or(x.abs, y.abs)\n\t\tz.neg = false\n\t\treturn z\n\t}\n\n\t// x.neg != y.neg\n\tif x.neg {\n\t\tx, y = y, x // | is symmetric\n\t}\n\n\t// x | (-y) == x | ^(y-1) == ^((y-1) \u0026^ x) == -(^((y-1) \u0026^ x) + 1)\n\ty1 := new(uint256.Uint).Sub(y.abs, one)\n\tz.abs = z.abs.Add(z.abs.AndNot(y1, x.abs), one)\n\tz.neg = true // z cannot be zero if one of x or y is negative\n\n\treturn z\n}\n\n// And sets z = x \u0026 y and returns z.\nfunc (z *Int) And(x, y *Int) *Int {\n\tif x.neg == y.neg {\n\t\tif x.neg {\n\t\t\t// (-x) \u0026 (-y) == ^(x-1) \u0026 ^(y-1) == ^((x-1) | (y-1)) == -(((x-1) | (y-1)) + 1)\n\t\t\tx1 := new(uint256.Uint).Sub(x.abs, one)\n\t\t\ty1 := new(uint256.Uint).Sub(y.abs, one)\n\t\t\tz.abs = z.abs.Add(z.abs.Or(x1, y1), one)\n\t\t\tz.neg = true // z cannot be zero if x and y are negative\n\t\t\treturn z\n\t\t}\n\n\t\t// x \u0026 y == x \u0026 y\n\t\tz.abs = z.abs.And(x.abs, y.abs)\n\t\tz.neg = false\n\t\treturn z\n\t}\n\n\t// x.neg != y.neg\n\t// REF: https://cs.opensource.google/go/go/+/refs/tags/go1.22.1:src/math/big/int.go;l=1192-1202;drc=d57303e65f00b84b528ee682747dbe1fd3316d30\n\tif x.neg {\n\t\tx, y = y, x // \u0026 is symmetric\n\t}\n\n\t// x \u0026 (-y) == x \u0026 ^(y-1) == x \u0026^ (y-1)\n\ty1 := new(uint256.Uint).Sub(y.abs, uint256.One())\n\tz.abs = z.abs.AndNot(x.abs, y1)\n\tz.neg = false\n\treturn z\n}\n\n// Rsh sets z = x \u003e\u003e n and returns z.\n// OBS: Different from original implementation it was using math.Big\nfunc (z *Int) Rsh(x *Int, n uint) *Int {\n\tif !x.neg {\n\t\tz.abs.Rsh(x.abs, n)\n\t\tz.neg = x.neg\n\t\treturn z\n\t}\n\n\t// REF: https://cs.opensource.google/go/go/+/refs/tags/go1.22.1:src/math/big/int.go;l=1118-1126;drc=d57303e65f00b84b528ee682747dbe1fd3316d30\n\tt := NewInt(0).Sub(FromUint256(x.abs), NewInt(1))\n\tt = t.Rsh(t, n)\n\n\t_tmp := t.Add(t, NewInt(1))\n\tz.abs = _tmp.Abs()\n\tz.neg = true\n\n\treturn z\n}\n\n// Lsh sets z = x \u003c\u003c n and returns z.\nfunc (z *Int) Lsh(x *Int, n uint) *Int {\n\tz.abs.Lsh(x.abs, n)\n\tz.neg = x.neg\n\treturn z\n}\n"},{"name":"bitwise_test.gno","body":"package int256\n\nimport (\n\t\"gno.land/p/gnoswap/uint256\"\n)\n\nimport (\n\t\"testing\"\n)\n\nfunc TestOr(t *testing.T) {\n\ttests := []struct {\n\t\tname       string\n\t\tx, y, want Int\n\t}{\n\t\t{\n\t\t\tname: \"all zeroes\",\n\t\t\tx:    Int{abs: \u0026uint256.Uint{arr: [4]uint64{0, 0, 0, 0}}, neg: false},\n\t\t\ty:    Int{abs: \u0026uint256.Uint{arr: [4]uint64{0, 0, 0, 0}}, neg: false},\n\t\t\twant: Int{abs: \u0026uint256.Uint{arr: [4]uint64{0, 0, 0, 0}}, neg: false},\n\t\t},\n\t\t{\n\t\t\tname: \"all ones\",\n\t\t\tx:    Int{abs: \u0026uint256.Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}}, neg: false},\n\t\t\ty:    Int{abs: \u0026uint256.Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}}, neg: false},\n\t\t\twant: Int{abs: \u0026uint256.Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}}, neg: false},\n\t\t},\n\t\t{\n\t\t\tname: \"mixed\",\n\t\t\tx:    Int{abs: \u0026uint256.Uint{arr: [4]uint64{^uint64(0), ^uint64(0), 0, 0}}, neg: false},\n\t\t\ty:    Int{abs: \u0026uint256.Uint{arr: [4]uint64{0, 0, ^uint64(0), ^uint64(0)}}, neg: false},\n\t\t\twant: Int{abs: \u0026uint256.Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}}, neg: false},\n\t\t},\n\t\t{\n\t\t\tname: \"one operand all ones\",\n\t\t\tx:    Int{abs: \u0026uint256.Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}}, neg: false},\n\t\t\ty:    Int{abs: \u0026uint256.Uint{arr: [4]uint64{0x5555555555555555, 0xAAAAAAAAAAAAAAAA, 0xFFFFFFFFFFFFFFFF, 0x0000000000000000}}, neg: false},\n\t\t\twant: Int{abs: \u0026uint256.Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}}, neg: false},\n\t\t},\n\t}\n\n\tfor _, tc := range tests {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tgot := New()\n\t\t\tgot.Or(\u0026tc.x, \u0026tc.y)\n\n\t\t\tif got.Neq(\u0026tc.want) {\n\t\t\t\tt.Errorf(\"Or(%v, %v) = %v, want %v\", tc.x, tc.y, got, tc.want)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestAnd(t *testing.T) {\n\ttests := []struct {\n\t\tname       string\n\t\tx, y, want Int\n\t}{\n\t\t{\n\t\t\tname: \"all zeroes\",\n\t\t\tx:    Int{abs: \u0026uint256.Uint{arr: [4]uint64{0, 0, 0, 0}}, neg: false},\n\t\t\ty:    Int{abs: \u0026uint256.Uint{arr: [4]uint64{0, 0, 0, 0}}, neg: false},\n\t\t\twant: Int{abs: \u0026uint256.Uint{arr: [4]uint64{0, 0, 0, 0}}, neg: false},\n\t\t},\n\t\t{\n\t\t\tname: \"all ones\",\n\t\t\tx:    Int{abs: \u0026uint256.Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}}, neg: false},\n\t\t\ty:    Int{abs: \u0026uint256.Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}}, neg: false},\n\t\t\twant: Int{abs: \u0026uint256.Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}}, neg: false},\n\t\t},\n\t\t{\n\t\t\tname: \"mixed\",\n\t\t\tx:    Int{abs: \u0026uint256.Uint{arr: [4]uint64{0, 0, 0, 0}}, neg: false},\n\t\t\ty:    Int{abs: \u0026uint256.Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}}, neg: false},\n\t\t\twant: Int{abs: \u0026uint256.Uint{arr: [4]uint64{0, 0, 0, 0}}, neg: false},\n\t\t},\n\t\t{\n\t\t\tname: \"mixed 2\",\n\t\t\tx:    Int{abs: \u0026uint256.Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}}, neg: false},\n\t\t\ty:    Int{abs: \u0026uint256.Uint{arr: [4]uint64{0, 0, 0, 0}}, neg: false},\n\t\t\twant: Int{abs: \u0026uint256.Uint{arr: [4]uint64{0, 0, 0, 0}}, neg: false},\n\t\t},\n\t\t{\n\t\t\tname: \"mixed 3\",\n\t\t\tx:    Int{abs: \u0026uint256.Uint{arr: [4]uint64{^uint64(0), ^uint64(0), 0, 0}}, neg: false},\n\t\t\ty:    Int{abs: \u0026uint256.Uint{arr: [4]uint64{0, 0, ^uint64(0), ^uint64(0)}}, neg: false},\n\t\t\twant: Int{abs: \u0026uint256.Uint{arr: [4]uint64{0, 0, 0, 0}}, neg: false},\n\t\t},\n\t\t{\n\t\t\tname: \"one operand zero\",\n\t\t\tx:    Int{abs: \u0026uint256.Uint{arr: [4]uint64{0, 0, 0, 0}}, neg: false},\n\t\t\ty:    Int{abs: \u0026uint256.Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}}, neg: false},\n\t\t\twant: Int{abs: \u0026uint256.Uint{arr: [4]uint64{0, 0, 0, 0}}, neg: false},\n\t\t},\n\t\t{\n\t\t\tname: \"one operand all ones\",\n\t\t\tx:    Int{abs: \u0026uint256.Uint{arr: [4]uint64{^uint64(0), ^uint64(0), ^uint64(0), ^uint64(0)}}, neg: false},\n\t\t\ty:    Int{abs: \u0026uint256.Uint{arr: [4]uint64{0x5555555555555555, 0xAAAAAAAAAAAAAAAA, 0xFFFFFFFFFFFFFFFF, 0x0000000000000000}}, neg: false},\n\t\t\twant: Int{abs: \u0026uint256.Uint{arr: [4]uint64{0x5555555555555555, 0xAAAAAAAAAAAAAAAA, 0xFFFFFFFFFFFFFFFF, 0x0000000000000000}}, neg: false},\n\t\t},\n\t}\n\n\tfor _, tc := range tests {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tgot := New()\n\t\t\tgot.And(\u0026tc.x, \u0026tc.y)\n\n\t\t\tif got.Neq(\u0026tc.want) {\n\t\t\t\tt.Errorf(\"And(%v, %v) = %v, want %v\", tc.x, tc.y, got, tc.want)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestRsh(t *testing.T) {\n\ttests := []struct {\n\t\tx    string\n\t\tn    uint\n\t\twant string\n\t}{\n\t\t{\"1024\", 0, \"1024\"},\n\t\t{\"1024\", 1, \"512\"},\n\t\t{\"1024\", 2, \"256\"},\n\t\t{\"1024\", 10, \"1\"},\n\t\t{\"1024\", 11, \"0\"},\n\t\t{\"18446744073709551615\", 0, \"18446744073709551615\"},\n\t\t{\"18446744073709551615\", 1, \"9223372036854775807\"},\n\t\t{\"18446744073709551615\", 62, \"3\"},\n\t\t{\"18446744073709551615\", 63, \"1\"},\n\t\t{\"18446744073709551615\", 64, \"0\"},\n\t\t{\"115792089237316195423570985008687907853269984665640564039457584007913129639935\", 0, \"115792089237316195423570985008687907853269984665640564039457584007913129639935\"},\n\t\t{\"115792089237316195423570985008687907853269984665640564039457584007913129639935\", 1, \"57896044618658097711785492504343953926634992332820282019728792003956564819967\"},\n\t\t{\"115792089237316195423570985008687907853269984665640564039457584007913129639935\", 128, \"340282366920938463463374607431768211455\"},\n\t\t{\"115792089237316195423570985008687907853269984665640564039457584007913129639935\", 255, \"1\"},\n\t\t{\"115792089237316195423570985008687907853269984665640564039457584007913129639935\", 256, \"0\"},\n\t\t{\"-1024\", 0, \"-1024\"},\n\t\t{\"-1024\", 1, \"-512\"},\n\t\t{\"-1024\", 2, \"-256\"},\n\t\t{\"-1024\", 10, \"-1\"},\n\t\t{\"-1024\", 10, \"-1\"},\n\t\t{\"-9223372036854775808\", 0, \"-9223372036854775808\"},\n\t\t{\"-9223372036854775808\", 1, \"-4611686018427387904\"},\n\t\t{\"-9223372036854775808\", 62, \"-2\"},\n\t\t{\"-9223372036854775808\", 63, \"-1\"},\n\t\t{\"-9223372036854775808\", 64, \"-1\"},\n\t\t{\"-57896044618658097711785492504343953926634992332820282019728792003956564819968\", 0, \"-57896044618658097711785492504343953926634992332820282019728792003956564819968\"},\n\t\t{\"-57896044618658097711785492504343953926634992332820282019728792003956564819968\", 1, \"-28948022309329048855892746252171976963317496166410141009864396001978282409984\"},\n\t\t{\"-57896044618658097711785492504343953926634992332820282019728792003956564819968\", 253, \"-4\"},\n\t\t{\"-57896044618658097711785492504343953926634992332820282019728792003956564819968\", 254, \"-2\"},\n\t\t{\"-57896044618658097711785492504343953926634992332820282019728792003956564819968\", 255, \"-1\"},\n\t\t{\"-57896044618658097711785492504343953926634992332820282019728792003956564819968\", 256, \"-1\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := New()\n\t\tgot.Rsh(x, tc.n)\n\n\t\tif got.ToString() != tc.want {\n\t\t\tt.Errorf(\"Rsh(%s, %d) = %v, want %v\", tc.x, tc.n, got.ToString(), tc.want)\n\t\t}\n\t}\n}\n\nfunc TestLsh(t *testing.T) {\n\ttests := []struct {\n\t\tx    string\n\t\tn    uint\n\t\twant string\n\t}{\n\t\t{\"1\", 0, \"1\"},\n\t\t{\"1\", 1, \"2\"},\n\t\t{\"1\", 2, \"4\"},\n\t\t{\"2\", 0, \"2\"},\n\t\t{\"2\", 1, \"4\"},\n\t\t{\"2\", 2, \"8\"},\n\t\t{\"-2\", 0, \"-2\"},\n\t\t{\"-4\", 0, \"-4\"},\n\t\t{\"-8\", 0, \"-8\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := New()\n\t\tgot.Lsh(x, tc.n)\n\n\t\tif got.ToString() != tc.want {\n\t\t\tt.Errorf(\"Lsh(%s, %d) = %v, want %v\", tc.x, tc.n, got.ToString(), tc.want)\n\t\t}\n\t}\n}\n"},{"name":"cmp.gno","body":"package int256\n\n// Eq returns true if z == x\nfunc (z *Int) Eq(x *Int) bool {\n\treturn (z.neg == x.neg) \u0026\u0026 z.abs.Eq(x.abs)\n}\n\n// Neq returns true if z != x\nfunc (z *Int) Neq(x *Int) bool {\n\treturn !z.Eq(x)\n}\n\n// Cmp compares x and y and returns:\n//\n//\t-1 if x \u003c  y\n//\t 0 if x == y\n//\t+1 if x \u003e  y\nfunc (z *Int) Cmp(x *Int) (r int) {\n\t// x cmp y == x cmp y\n\t// x cmp (-y) == x\n\t// (-x) cmp y == y\n\t// (-x) cmp (-y) == -(x cmp y)\n\tswitch {\n\tcase z == x:\n\t\t// nothing to do\n\tcase z.neg == x.neg:\n\t\tr = z.abs.Cmp(x.abs)\n\t\tif z.neg {\n\t\t\tr = -r\n\t\t}\n\tcase z.neg:\n\t\tr = -1\n\tdefault:\n\t\tr = 1\n\t}\n\treturn\n}\n\n// IsZero returns true if z == 0\nfunc (z *Int) IsZero() bool {\n\treturn z.abs.IsZero()\n}\n\n// IsNeg returns true if z \u003c 0\nfunc (z *Int) IsNeg() bool {\n\treturn z.neg\n}\n\n// Lt returns true if z \u003c x\nfunc (z *Int) Lt(x *Int) bool {\n\tif z.neg {\n\t\tif x.neg {\n\t\t\treturn z.abs.Gt(x.abs)\n\t\t} else {\n\t\t\treturn true\n\t\t}\n\t} else {\n\t\tif x.neg {\n\t\t\treturn false\n\t\t} else {\n\t\t\treturn z.abs.Lt(x.abs)\n\t\t}\n\t}\n}\n\n// Gt returns true if z \u003e x\nfunc (z *Int) Gt(x *Int) bool {\n\tif z.neg {\n\t\tif x.neg {\n\t\t\treturn z.abs.Lt(x.abs)\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t} else {\n\t\tif x.neg {\n\t\t\treturn true\n\t\t} else {\n\t\t\treturn z.abs.Gt(x.abs)\n\t\t}\n\t}\n}\n\n// Clone creates a new Int identical to z\nfunc (z *Int) Clone() *Int {\n\treturn \u0026Int{z.abs.Clone(), z.neg}\n}\n"},{"name":"cmp_test.gno","body":"package int256\n\nimport (\n\t\"testing\"\n)\n\nfunc TestEq(t *testing.T) {\n\ttests := []struct {\n\t\tx, y string\n\t\twant bool\n\t}{\n\t\t{\"0\", \"0\", true},\n\t\t{\"0\", \"1\", false},\n\t\t{\"1\", \"0\", false},\n\t\t{\"-1\", \"0\", false},\n\t\t{\"0\", \"-1\", false},\n\t\t{\"1\", \"1\", true},\n\t\t{\"-1\", \"-1\", true},\n\t\t{\"115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"-115792089237316195423570985008687907853269984665640564039457584007913129639935\", false},\n\t\t{\"-115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"-115792089237316195423570985008687907853269984665640564039457584007913129639935\", true},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := x.Eq(y)\n\t\tif got != tc.want {\n\t\t\tt.Errorf(\"Eq(%s, %s) = %v, want %v\", tc.x, tc.y, got, tc.want)\n\t\t}\n\t}\n}\n\nfunc TestNeq(t *testing.T) {\n\ttests := []struct {\n\t\tx, y string\n\t\twant bool\n\t}{\n\t\t{\"0\", \"0\", false},\n\t\t{\"0\", \"1\", true},\n\t\t{\"1\", \"0\", true},\n\t\t{\"-1\", \"0\", true},\n\t\t{\"0\", \"-1\", true},\n\t\t{\"1\", \"1\", false},\n\t\t{\"-1\", \"-1\", false},\n\t\t{\"115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"-115792089237316195423570985008687907853269984665640564039457584007913129639935\", true},\n\t\t{\"-115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"-115792089237316195423570985008687907853269984665640564039457584007913129639935\", false},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := x.Neq(y)\n\t\tif got != tc.want {\n\t\t\tt.Errorf(\"Neq(%s, %s) = %v, want %v\", tc.x, tc.y, got, tc.want)\n\t\t}\n\t}\n}\n\nfunc TestCmp(t *testing.T) {\n\ttests := []struct {\n\t\tx, y string\n\t\twant int\n\t}{\n\t\t{\"0\", \"0\", 0},\n\t\t{\"0\", \"1\", -1},\n\t\t{\"1\", \"0\", 1},\n\t\t{\"-1\", \"0\", -1},\n\t\t{\"0\", \"-1\", 1},\n\t\t{\"1\", \"1\", 0},\n\t\t{\"115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"-115792089237316195423570985008687907853269984665640564039457584007913129639935\", 1},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := x.Cmp(y)\n\t\tif got != tc.want {\n\t\t\tt.Errorf(\"Cmp(%s, %s) = %v, want %v\", tc.x, tc.y, got, tc.want)\n\t\t}\n\t}\n}\n\nfunc TestIsZero(t *testing.T) {\n\ttests := []struct {\n\t\tx    string\n\t\twant bool\n\t}{\n\t\t{\"0\", true},\n\t\t{\"-0\", true},\n\t\t{\"1\", false},\n\t\t{\"-1\", false},\n\t\t{\"10\", false},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := x.IsZero()\n\t\tif got != tc.want {\n\t\t\tt.Errorf(\"IsZero(%s) = %v, want %v\", tc.x, got, tc.want)\n\t\t}\n\t}\n}\n\nfunc TestIsNeg(t *testing.T) {\n\ttests := []struct {\n\t\tx    string\n\t\twant bool\n\t}{\n\t\t{\"0\", false},\n\t\t{\"-0\", true}, // TODO: should this be false?\n\t\t{\"1\", false},\n\t\t{\"-1\", true},\n\t\t{\"10\", false},\n\t\t{\"-10\", true},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := x.IsNeg()\n\t\tif got != tc.want {\n\t\t\tt.Errorf(\"IsNeg(%s) = %v, want %v\", tc.x, got, tc.want)\n\t\t}\n\t}\n}\n\nfunc TestLt(t *testing.T) {\n\ttests := []struct {\n\t\tx, y string\n\t\twant bool\n\t}{\n\t\t{\"0\", \"0\", false},\n\t\t{\"0\", \"1\", true},\n\t\t{\"1\", \"0\", false},\n\t\t{\"-1\", \"0\", true},\n\t\t{\"0\", \"-1\", false},\n\t\t{\"1\", \"1\", false},\n\t\t{\"-1\", \"-1\", false},\n\t\t{\"115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"-115792089237316195423570985008687907853269984665640564039457584007913129639935\", false},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := x.Lt(y)\n\t\tif got != tc.want {\n\t\t\tt.Errorf(\"Lt(%s, %s) = %v, want %v\", tc.x, tc.y, got, tc.want)\n\t\t}\n\t}\n}\n\nfunc TestGt(t *testing.T) {\n\ttests := []struct {\n\t\tx, y string\n\t\twant bool\n\t}{\n\t\t{\"0\", \"0\", false},\n\t\t{\"0\", \"1\", false},\n\t\t{\"1\", \"0\", true},\n\t\t{\"-1\", \"0\", false},\n\t\t{\"0\", \"-1\", true},\n\t\t{\"1\", \"1\", false},\n\t\t{\"-1\", \"-1\", false},\n\t\t{\"115792089237316195423570985008687907853269984665640564039457584007913129639935\", \"-115792089237316195423570985008687907853269984665640564039457584007913129639935\", true},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty, err := FromDecimal(tc.y)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgot := x.Gt(y)\n\t\tif got != tc.want {\n\t\t\tt.Errorf(\"Gt(%s, %s) = %v, want %v\", tc.x, tc.y, got, tc.want)\n\t\t}\n\t}\n}\n\nfunc TestClone(t *testing.T) {\n\ttests := []struct {\n\t\tx string\n\t}{\n\t\t{\"0\"},\n\t\t{\"-0\"},\n\t\t{\"1\"},\n\t\t{\"-1\"},\n\t\t{\"10\"},\n\t\t{\"-10\"},\n\t\t{\"115792089237316195423570985008687907853269984665640564039457584007913129639935\"},\n\t\t{\"-115792089237316195423570985008687907853269984665640564039457584007913129639935\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tx, err := FromDecimal(tc.x)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\tcontinue\n\t\t}\n\n\t\ty := x.Clone()\n\n\t\tif x.Cmp(y) != 0 {\n\t\t\tt.Errorf(\"Clone(%s) = %v, want %v\", tc.x, y, x)\n\t\t}\n\t}\n}\n"},{"name":"conversion.gno","body":"package int256\n\nimport (\n\t\"gno.land/p/gnoswap/uint256\"\n)\n\n// SetInt64 sets z to x and returns z.\nfunc (z *Int) SetInt64(x int64) *Int {\n\tz.initiateAbs()\n\n\tneg := false\n\tif x \u003c 0 {\n\t\tneg = true\n\t\tx = -x\n\t}\n\tif z.abs == nil {\n\t\tpanic(\"int256_SetInt64()__abs is nil\")\n\t}\n\tz.abs = z.abs.SetUint64(uint64(x))\n\tz.neg = neg\n\treturn z\n}\n\n// SetUint64 sets z to x and returns z.\nfunc (z *Int) SetUint64(x uint64) *Int {\n\tz.initiateAbs()\n\n\tif z.abs == nil {\n\t\tpanic(\"int256_SetUint64()__abs is nil\")\n\t}\n\tz.abs = z.abs.SetUint64(x)\n\tz.neg = false\n\treturn z\n}\n\n// Uint64 returns the lower 64-bits of z\nfunc (z *Int) Uint64() uint64 {\n\treturn z.abs.Uint64()\n}\n\n// Int64 returns the lower 64-bits of z\nfunc (z *Int) Int64() int64 {\n\t_abs := z.abs.Clone()\n\n\tif z.neg {\n\t\treturn -int64(_abs.Uint64())\n\t}\n\treturn int64(_abs.Uint64())\n}\n\n// Neg sets z to -x and returns z.)\nfunc (z *Int) Neg(x *Int) *Int {\n\tz.abs.Set(x.abs)\n\tif z.abs.IsZero() {\n\t\tz.neg = false\n\t} else {\n\t\tz.neg = !x.neg\n\t}\n\treturn z\n}\n\n// Set sets z to x and returns z.\nfunc (z *Int) Set(x *Int) *Int {\n\tz.abs.Set(x.abs)\n\tz.neg = x.neg\n\treturn z\n}\n\n// SetFromUint256 converts a uint256.Uint to Int and sets the value to z.\nfunc (z *Int) SetUint256(x *uint256.Uint) *Int {\n\tz.abs.Set(x)\n\tz.neg = false\n\treturn z\n}\n\n// OBS, differs from original mempooler int256\n// ToString returns the decimal representation of z.\nfunc (z *Int) ToString() string {\n\tif z == nil {\n\t\tpanic(\"int256: nil pointer to ToString()\")\n\t}\n\n\tt := z.abs.Dec()\n\tif z.neg {\n\t\treturn \"-\" + t\n\t}\n\treturn t\n}\n"},{"name":"conversion_test.gno","body":"package int256\n\nimport (\n\t\"testing\"\n\n\t\"gno.land/p/gnoswap/uint256\"\n)\n\nfunc TestSetInt64(t *testing.T) {\n\ttests := []struct {\n\t\tx    int64\n\t\twant string\n\t}{\n\t\t{0, \"0\"},\n\t\t{1, \"1\"},\n\t\t{-1, \"-1\"},\n\t\t{9223372036854775807, \"9223372036854775807\"},\n\t\t{-9223372036854775808, \"-9223372036854775808\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tvar z Int\n\t\tz.SetInt64(tc.x)\n\n\t\tgot := z.ToString()\n\t\tif got != tc.want {\n\t\t\tt.Errorf(\"SetInt64(%d) = %s, want %s\", tc.x, got, tc.want)\n\t\t}\n\t}\n}\n\nfunc TestSetUint64(t *testing.T) {\n\ttests := []struct {\n\t\tx    uint64\n\t\twant string\n\t}{\n\t\t{0, \"0\"},\n\t\t{1, \"1\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tvar z Int\n\t\tz.SetUint64(tc.x)\n\n\t\tgot := z.ToString()\n\t\tif got != tc.want {\n\t\t\tt.Errorf(\"SetUint64(%d) = %s, want %s\", tc.x, got, tc.want)\n\t\t}\n\t}\n}\n\nfunc TestUint64(t *testing.T) {\n\ttests := []struct {\n\t\tx    string\n\t\twant uint64\n\t}{\n\t\t{\"0\", 0},\n\t\t{\"1\", 1},\n\t\t{\"9223372036854775807\", 9223372036854775807},\n\t\t{\"9223372036854775808\", 9223372036854775808},\n\t\t{\"18446744073709551615\", 18446744073709551615},\n\t\t{\"18446744073709551616\", 0},\n\t\t{\"18446744073709551617\", 1},\n\t\t{\"-1\", 1},\n\t\t{\"-18446744073709551615\", 18446744073709551615},\n\t\t{\"-18446744073709551616\", 0},\n\t\t{\"-18446744073709551617\", 1},\n\t}\n\n\tfor _, tc := range tests {\n\t\tz := MustFromDecimal(tc.x)\n\n\t\tgot := z.Uint64()\n\t\tif got != tc.want {\n\t\t\tt.Errorf(\"Uint64(%s) = %d, want %d\", tc.x, got, tc.want)\n\t\t}\n\t}\n}\n\nfunc TestInt64(t *testing.T) {\n\ttests := []struct {\n\t\tx    string\n\t\twant int64\n\t}{\n\t\t{\"0\", 0},\n\t\t{\"1\", 1},\n\t\t{\"9223372036854775807\", 9223372036854775807},\n\t\t{\"18446744073709551616\", 0},\n\t\t{\"18446744073709551617\", 1},\n\t\t{\"-1\", -1},\n\t\t{\"-9223372036854775808\", -9223372036854775808},\n\t}\n\n\tfor _, tc := range tests {\n\t\tz := MustFromDecimal(tc.x)\n\n\t\tgot := z.Int64()\n\t\tif got != tc.want {\n\t\t\tt.Errorf(\"Uint64(%s) = %d, want %d\", tc.x, got, tc.want)\n\t\t}\n\t}\n}\n\nfunc TestNeg(t *testing.T) {\n\ttests := []struct {\n\t\tx    string\n\t\twant string\n\t}{\n\t\t{\"0\", \"0\"},\n\t\t{\"1\", \"-1\"},\n\t\t{\"-1\", \"1\"},\n\t\t{\"9223372036854775807\", \"-9223372036854775807\"},\n\t\t{\"-18446744073709551615\", \"18446744073709551615\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tz := MustFromDecimal(tc.x)\n\t\tz.Neg(z)\n\n\t\tgot := z.ToString()\n\t\tif got != tc.want {\n\t\t\tt.Errorf(\"Neg(%s) = %s, want %s\", tc.x, got, tc.want)\n\t\t}\n\t}\n}\n\nfunc TestSet(t *testing.T) {\n\ttests := []struct {\n\t\tx    string\n\t\twant string\n\t}{\n\t\t{\"0\", \"0\"},\n\t\t{\"1\", \"1\"},\n\t\t{\"-1\", \"-1\"},\n\t\t{\"9223372036854775807\", \"9223372036854775807\"},\n\t\t{\"-18446744073709551615\", \"-18446744073709551615\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tz := MustFromDecimal(tc.x)\n\t\tz.Set(z)\n\n\t\tgot := z.ToString()\n\t\tif got != tc.want {\n\t\t\tt.Errorf(\"Set(%s) = %s, want %s\", tc.x, got, tc.want)\n\t\t}\n\t}\n}\n\nfunc TestSetUint256(t *testing.T) {\n\ttests := []struct {\n\t\tx    string\n\t\twant string\n\t}{\n\t\t{\"0\", \"0\"},\n\t\t{\"1\", \"1\"},\n\t\t{\"9223372036854775807\", \"9223372036854775807\"},\n\t\t{\"18446744073709551615\", \"18446744073709551615\"},\n\t}\n\n\tfor _, tc := range tests {\n\t\tgot := New()\n\n\t\tz := uint256.MustFromDecimal(tc.x)\n\t\tgot.SetUint256(z)\n\n\t\tif got.ToString() != tc.want {\n\t\t\tt.Errorf(\"SetUint256(%s) = %s, want %s\", tc.x, got.ToString(), tc.want)\n\t\t}\n\t}\n}\n"},{"name":"gno.mod","body":"module gno.land/p/gnoswap/int256\n\nrequire gno.land/p/gnoswap/uint256 v0.0.0-latest\n"},{"name":"int256.gno","body":"// This package provides a 256-bit signed integer type, Int, and associated functions.\npackage int256\n\nimport (\n\t\"gno.land/p/gnoswap/uint256\"\n)\n\nvar one = uint256.NewUint(1)\n\ntype Int struct {\n\tabs *uint256.Uint\n\tneg bool\n}\n\n// Zero returns a new Int set to 0.\nfunc Zero() *Int {\n\treturn NewInt(0)\n}\n\n// One returns a new Int set to 1.\nfunc One() *Int {\n\treturn NewInt(1)\n}\n\n// Sign returns:\n//\n//\t-1 if x \u003c  0\n//\t 0 if x == 0\n//\t+1 if x \u003e  0\nfunc (z *Int) Sign() int {\n\tz.initiateAbs()\n\n\tif z.abs.IsZero() {\n\t\treturn 0\n\t}\n\tif z.neg {\n\t\treturn -1\n\t}\n\treturn 1\n}\n\n// New returns a new Int set to 0.\nfunc New() *Int {\n\treturn \u0026Int{\n\t\tabs: new(uint256.Uint),\n\t}\n}\n\n// NewInt allocates and returns a new Int set to x.\nfunc NewInt(x int64) *Int {\n\treturn New().SetInt64(x)\n}\n\n// FromDecimal returns a new Int from a decimal string.\n// Returns a new Int and an error if the string is not a valid decimal.\nfunc FromDecimal(s string) (*Int, error) {\n\treturn new(Int).SetString(s)\n}\n\n// MustFromDecimal returns a new Int from a decimal string.\n// Panics if the string is not a valid decimal.\nfunc MustFromDecimal(s string) *Int {\n\tz, err := FromDecimal(s)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn z\n}\n\n// SetString sets s to the value of z and returns z and a boolean indicating success.\nfunc (z *Int) SetString(s string) (*Int, error) {\n\tneg := false\n\t// Remove max one leading +\n\tif len(s) \u003e 0 \u0026\u0026 s[0] == '+' {\n\t\tneg = false\n\t\ts = s[1:]\n\t}\n\n\tif len(s) \u003e 0 \u0026\u0026 s[0] == '-' {\n\t\tneg = true\n\t\ts = s[1:]\n\t}\n\tvar (\n\t\tabs *uint256.Uint\n\t\terr error\n\t)\n\tabs, err = uint256.FromDecimal(s)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn \u0026Int{\n\t\tabs,\n\t\tneg,\n\t}, nil\n}\n\n// FromUint256 is a convenience-constructor from uint256.Uint.\n// Returns a new Int and whether overflow occurred.\n// OBS: If u is `nil`, this method returns `nil, false`\nfunc FromUint256(x *uint256.Uint) *Int {\n\tif x == nil {\n\t\treturn nil\n\t}\n\tz := Zero()\n\n\tz.SetUint256(x)\n\treturn z\n}\n\n// OBS, differs from original mempooler int256\n// NilToZero sets z to 0 and return it if it's nil, otherwise it returns z\nfunc (z *Int) NilToZero() *Int {\n\tif z == nil {\n\t\treturn NewInt(0)\n\t}\n\treturn z\n}\n\n// initiateAbs sets default value for `z` or `z.abs` value if is nil\n// OBS: differs from mempooler int256. It checks not only `z.abs` but also `z`\nfunc (z *Int) initiateAbs() {\n\tif z == nil || z.abs == nil {\n\t\tz.abs = new(uint256.Uint)\n\t}\n}\n"},{"name":"int256_test.gno","body":"// ported from github.com/mempooler/int256\npackage int256\n\nimport (\n\t\"testing\"\n)\n\nfunc TestSign(t *testing.T) {\n\ttests := []struct {\n\t\tx    string\n\t\twant int\n\t}{\n\t\t{\"0\", 0},\n\t\t{\"1\", 1},\n\t\t{\"-1\", -1},\n\t}\n\n\tfor _, tc := range tests {\n\t\tz := MustFromDecimal(tc.x)\n\t\tgot := z.Sign()\n\t\tif got != tc.want {\n\t\t\tt.Errorf(\"Sign(%s) = %d, want %d\", tc.x, got, tc.want)\n\t\t}\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"DoveVz8MnXzzZ/hLM2pZxYHS/aISJD35b4uyi/AIqX0LoBrAHAYLCLgS9JEaZ3/+4xP1az1+1IiwPgXOd0q1uQ=="}],"memo":""},"blockNum":"147615"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","package":{"name":"consts","path":"gno.land/r/gnoswap/consts","files":[{"name":"consts.gno","body":"package consts\n\nimport (\n\t\"std\"\n)\n\n// GNOSWAP SERVICE\nconst (\n\tGNOSWAP_ADMIN std.Address = \"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c\" // GSA\n\tDEV_OPS       std.Address = \"g1mjvd83nnjee3z2g7683er55me9f09688pd4mj9\" // DevOps\n\n\tTOKEN_REGISTER std.Address = \"g1er355fkjksqpdtwmhf5penwa82p0rhqxkkyhk5\"\n\n\tBLOCK_GENERATION_INTERVAL int64 = 2 // 2 seconds\n)\n\n// WRAP \u0026 UNWRAP\nconst (\n\tGNOT           string = \"gnot\"\n\tWRAPPED_WUGNOT string = \"gno.land/r/demo/wugnot\"\n\n\tUGNOT_MINT_DEPOSIT_TO_WRAP uint64 = 1000 // defined in gno.land/r/demo/wugnot\n)\n\n// CONTRACT PATH \u0026 ADDRESS\nconst (\n\tPOOL_PATH string      = \"gno.land/r/gnoswap/pool\"\n\tPOOL_ADDR std.Address = \"g1dexaf6aqkkyr9yfy9d5up69lsn7ra80af34g5v\"\n\n\tPOSITION_PATH string      = \"gno.land/r/gnoswap/position\"\n\tPOSITION_ADDR std.Address = \"g1y3uyaa63sjxvah2cx3c2usavwvx97kl8m2v7ye\"\n\n\tROUTER_PATH string      = \"gno.land/r/gnoswap/router\"\n\tROUTER_ADDR std.Address = \"g1vc883gshu5z7ytk5cdynhc8c2dh67pdp4cszkp\"\n\n\tSTAKER_PATH string      = \"gno.land/r/gnoswap/staker\"\n\tSTAKER_ADDR std.Address = \"g1q6d4ns7zkr492rgl0pcgf5ajaf2dlz0nnptky3\"\n\n\tGOV_PATH string      = \"gno.land/r/gnoswap/gov\"\n\tGOV_ADDR std.Address = \"g1egdt2l7xjcrm6qjwyd3g60z6e9cnr75pmcuasc\"\n\n\tGNS_PATH string      = \"gno.land/r/gnoswap/gns\"\n\tGNS_ADDR std.Address = \"g13ffa5r3mqfxu3s7ejl02scq9536wt6c2t789dm\"\n\n\tGNFT_PATH string      = \"gno.land/r/gnoswap/gnft\"\n\tGNFT_ADDR std.Address = \"g1mclfz2dn4lnez0lcjwgz67hh72rdafjmufvfmw\"\n\n\tWUGNOT_PATH string      = \"gno.land/r/demo/wugnot\"\n\tWUGNOT_ADDR std.Address = \"g1pf6dv9fjk3rn0m4jjcne306ga4he3mzmupfjl6\"\n\n\tEMISSION_PATH string      = \"gno.land/r/gnoswap/emission\"\n\tEMISSION_ADDR std.Address = \"g177jkk4xx79uledh9xedqkq4ht4ef9t6amxwjeq\"\n\n\tPROTOCOL_FEE_PATH string      = \"gno.land/r/gnoswap/protocol_fee\"\n\tPROTOCOL_FEE_ADDR std.Address = \"g1r340tuven27z8wq50u8d20eqrsj470082682tp\"\n\n\tCOMMUNITY_POOL_PATH string      = \"gno.land/r/gnoswap/community_pool\"\n\tCOMMUNITY_POOL_ADDR std.Address = \"g13lpjmjhl2du7whed3wxe4n5508txxja6ezxeg7\"\n\n\tX_GNS_PATH string      = \"gno.land/r/gnoswap/x_gns\"\n\tX_GNS_ADDR std.Address = \"g1gea2eevsk8r5qfu683kajv5nnkpscvpxuchr4q\"\n)\n\n// NUMBER\nconst (\n\t// calculated by https://mathiasbynens.be/demo/integer-range\n\tMAX_UINT8 string = \"255\"\n\tUINT8_MAX uint8  = 255\n\n\tMAX_UINT16 string = \"65535\"\n\tUINT16_MAX uint16 = 65535\n\n\tMAX_UINT32 string = \"4294967295\"\n\tUINT32_MAX uint32 = 4294967295\n\n\tMAX_UINT64 string = \"18446744073709551615\"\n\tUINT64_MAX uint64 = 18446744073709551615\n\n\tMAX_UINT128 string = \"340282366920938463463374607431768211455\"\n\n\tMAX_UINT160 string = \"1461501637330902918203684832716283019655932542975\"\n\n\tMAX_UINT256 string = \"115792089237316195423570985008687907853269984665640564039457584007913129639935\"\n\n\t// Tick Related\n\tMIN_TICK int32 = -887272\n\tMAX_TICK int32 = 887272\n\n\tMIN_SQRT_RATIO string = \"4295128739\"                                        // same as TickMathGetSqrtRatioAtTick(MIN_TICK)\n\tMAX_SQRT_RATIO string = \"1461446703485210103287273052203988822378723970342\" // same as TickMathGetSqrtRatioAtTick(MAX_TICK)\n\n\tMIN_PRICE string = \"4295128740\"                                        // MIN_SQRT_RATIO + 1\n\tMAX_PRICE string = \"1461446703485210103287273052203988822378723970341\" // MAX_SQRT_RATIO - 1\n\n\t// ETC\n\tQ64  string = \"18446744073709551616\"                    // 2 ** 64\n\tQ96  string = \"79228162514264337593543950336\"           // 2 ** 96\n\tQ128 string = \"340282366920938463463374607431768211456\" // 2 ** 128\n\n)\n\n// ETCs\nconst (\n\t// REF: https://github.com/gnolang/gno/pull/2401#discussion_r1648064219\n\tZERO_ADDRESS std.Address = \"g100000000000000000000000000000000dnmcnx\"\n)\n"},{"name":"gno.mod","body":"module gno.land/r/gnoswap/consts\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"FZvVXYlzGQ5M2KTBtU6OObs69Q0mMIZ1ocxejVPu0t5gBGebeGWSHwrB5I2EpP7VwKWSt1qAWcC6OJZ+7LfkMQ=="}],"memo":""},"blockNum":"147617"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","package":{"name":"common","path":"gno.land/r/gnoswap/common","files":[{"name":"allow_non_gnoswap_contracts.gno","body":"package common\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/gnoswap/consts\"\n)\n\nvar (\n\tlimitCaller bool = true\n)\n\nfunc GetLimitCaller() bool {\n\treturn limitCaller\n}\n\nfunc SetLimitCaller(v bool) {\n\tMustCallFromAdmin()\n\tlimitCaller = v\n}\n\nfunc MustCallFromAdmin() {\n\tcaller := std.GetOrigCaller()\n\tif caller != consts.GNOSWAP_ADMIN {\n\t\tpanic(\"must be called by admin\")\n\t}\n}\n\nfunc DisallowCallFromUser() {\n\tprevRealmPath := std.PrevRealm().PkgPath()\n\tif prevRealmPath == \"\" {\n\t\tpanic(\"must be called by realm, not user\")\n\t}\n}\n\nfunc AllowCallFromOnly(allowPath string) {\n\tif !limitCaller {\n\t\tprevPath := std.PrevRealm().PkgPath()\n\n\t\tif prevPath != allowPath {\n\t\t\tpanic(\"caller is not allowed to call this function\")\n\t\t}\n\t}\n}\n"},{"name":"gno.mod","body":"module gno.land/r/gnoswap/common\n\nrequire (\n\tgno.land/p/gnoswap/int256 v0.0.0-latest\n\tgno.land/p/gnoswap/uint256 v0.0.0-latest\n\tgno.land/r/gnoswap/consts v0.0.0-latest\n)\n"},{"name":"liquidity_amounts.gno","body":"package common\n\nimport (\n\t\"gno.land/r/gnoswap/consts\"\n\n\ti256 \"gno.land/p/gnoswap/int256\"\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\n// toAscendingOrder checkes if the first value is greater than\n// the second then swaps two values.\nfunc toAscendingOrder(a, b *u256.Uint) (*u256.Uint, *u256.Uint) {\n\tif a.Gt(b) {\n\t\treturn b, a\n\t}\n\n\treturn a, b\n}\n\n// computeLiquidityForAmount0 calculates liquidity for a given amount of token 0.\nfunc computeLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0 *u256.Uint) *u256.Uint {\n\tsqrtRatioAX96, sqrtRatioBX96 = toAscendingOrder(sqrtRatioAX96, sqrtRatioBX96)\n\n\tintermediate := u256.MulDiv(sqrtRatioAX96, sqrtRatioBX96, u256.MustFromDecimal(consts.Q96))\n\n\tdiff := new(u256.Uint).Sub(sqrtRatioBX96, sqrtRatioAX96)\n\n\tres := u256.MulDiv(amount0, intermediate, diff)\n\treturn res\n}\n\n// computeLiquidityForAmount1 calculates liquidity for a given amount of token 1.\nfunc computeLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1 *u256.Uint) *u256.Uint {\n\tsqrtRatioAX96, sqrtRatioBX96 = toAscendingOrder(sqrtRatioAX96, sqrtRatioBX96)\n\n\tdiff := new(u256.Uint).Sub(sqrtRatioBX96, sqrtRatioAX96)\n\n\tres := u256.MulDiv(amount1, u256.MustFromDecimal(consts.Q96), diff)\n\treturn res\n}\n\n// GetLiquidityForAmounts calculates the liquidity for given amounts od token 0 and token 1.\nfunc GetLiquidityForAmounts(sqrtRatioX96, sqrtRatioAX96, sqrtRatioBX96, amount0, amount1 *u256.Uint) *u256.Uint {\n\tsqrtRatioAX96, sqrtRatioBX96 = toAscendingOrder(sqrtRatioAX96, sqrtRatioBX96)\n\tvar liquidity *u256.Uint\n\n\tif sqrtRatioX96.Lte(sqrtRatioAX96) {\n\t\tliquidity = computeLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0)\n\t} else if sqrtRatioX96.Lt(sqrtRatioBX96) {\n\t\tliquidity0 := computeLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0)\n\t\tliquidity1 := computeLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1)\n\n\t\tif liquidity0.Lt(liquidity1) {\n\t\t\tliquidity = liquidity0\n\t\t} else {\n\t\t\tliquidity = liquidity1\n\t\t}\n\n\t} else {\n\t\tliquidity = computeLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1)\n\t}\n\n\treturn liquidity\n}\n\n// computeAmount0ForLiquidity calculates the amount of token0 for a given liquidity.\nfunc computeAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity *u256.Uint) *u256.Uint {\n\tsqrtRatioAX96, sqrtRatioBX96 = toAscendingOrder(sqrtRatioAX96, sqrtRatioBX96)\n\n\tval1 := new(u256.Uint).Lsh(liquidity, 96)\n\tval2 := new(u256.Uint).Sub(sqrtRatioBX96, sqrtRatioAX96)\n\n\tres := u256.MulDiv(val1, val2, sqrtRatioBX96)\n\n\tres = res.Div(res, sqrtRatioAX96)\n\n\treturn res\n}\n\n// computeAmount1ForLiquidity calculates the amount of token1 for a given liquidity.\nfunc computeAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity *u256.Uint) *u256.Uint {\n\tsqrtRatioAX96, sqrtRatioBX96 = toAscendingOrder(sqrtRatioAX96, sqrtRatioBX96)\n\n\tval2 := new(u256.Uint).Sub(sqrtRatioBX96, sqrtRatioAX96)\n\n\tres := u256.MulDiv(liquidity, val2, u256.MustFromDecimal(consts.Q96))\n\treturn res\n}\n\n// GetAmountsForLiquidity calculates the amounts of token0 and token1 for a given liquidity.\n// FROM [POOL] position_modify.gno\nfunc GetAmountsForLiquidity(sqrtRatioX96, sqrtRatioAX96, sqrtRatioBX96 *u256.Uint, liquidity *i256.Int) (string, string) {\n\tvar amount0, amount1 *i256.Int\n\n\tif !(liquidity.IsZero()) {\n\t\tif sqrtRatioX96.Lt(sqrtRatioAX96) { // currentTick \u003c tickLower\n\t\t\t_amount0Str := SqrtPriceMathGetAmount0DeltaStr(\n\t\t\t\tsqrtRatioAX96,\n\t\t\t\tsqrtRatioBX96,\n\t\t\t\tliquidity,\n\t\t\t)\n\t\t\tamount0 = i256.MustFromDecimal(_amount0Str)\n\n\t\t} else if sqrtRatioX96.Lt(sqrtRatioBX96) { // currentTick \u003c tickUpper\n\t\t\t_amount0Str := SqrtPriceMathGetAmount0DeltaStr(\n\t\t\t\tsqrtRatioX96,\n\t\t\t\tsqrtRatioBX96,\n\t\t\t\tliquidity,\n\t\t\t)\n\t\t\tamount0 = i256.MustFromDecimal(_amount0Str)\n\n\t\t\t_amount1Str := SqrtPriceMathGetAmount1DeltaStr(\n\t\t\t\tsqrtRatioAX96,\n\t\t\t\tsqrtRatioX96,\n\t\t\t\tliquidity,\n\t\t\t)\n\t\t\tamount1 = i256.MustFromDecimal(_amount1Str)\n\n\t\t} else {\n\t\t\t_amount1Str := SqrtPriceMathGetAmount1DeltaStr(\n\t\t\t\tsqrtRatioAX96,\n\t\t\t\tsqrtRatioBX96,\n\t\t\t\tliquidity,\n\t\t\t)\n\t\t\tamount1 = i256.MustFromDecimal(_amount1Str)\n\t\t}\n\n\t}\n\n\t// if position is out of range, one of amount0 or amount1 can be nil\n\t// \u003e handle as 0\n\tamount0 = amount0.NilToZero()\n\tamount1 = amount1.NilToZero()\n\n\treturn amount0.ToString(), amount1.ToString()\n}\n"},{"name":"sqrt_price_math.gno","body":"package common\n\nimport (\n\ti256 \"gno.land/p/gnoswap/int256\"\n\tu256 \"gno.land/p/gnoswap/uint256\"\n\n\t\"gno.land/r/gnoswap/consts\"\n)\n\nfunc sqrtPriceMathGetNextSqrtPriceFromAmount0RoundingUp(\n\tsqrtPX96 *u256.Uint, // uint160\n\tliquidity *u256.Uint, // uint128\n\tamount *u256.Uint, // uint256\n\tadd bool,\n) *u256.Uint { // uint160\n\tif amount.IsZero() {\n\t\treturn sqrtPX96\n\t}\n\n\tnumerator1 := new(u256.Uint).Lsh(liquidity, 96)\n\tproduct := new(u256.Uint).Mul(amount, sqrtPX96)\n\n\tif add {\n\t\tif new(u256.Uint).Div(product, amount).Eq(sqrtPX96) {\n\t\t\tdenominator := new(u256.Uint).Add(numerator1, product)\n\n\t\t\tif denominator.Gte(numerator1) {\n\t\t\t\treturn u256.MulDivRoundingUp(numerator1, sqrtPX96, denominator)\n\t\t\t}\n\t\t}\n\n\t\tdiv := new(u256.Uint).Div(numerator1, sqrtPX96)\n\t\tadd := new(u256.Uint).Add(div, amount)\n\t\treturn u256.DivRoundingUp(numerator1, add)\n\t} else {\n\t\tcond1 := new(u256.Uint).Div(product, amount).Eq(sqrtPX96)\n\t\tcond2 := numerator1.Gt(product)\n\n\t\tif !(cond1 \u0026\u0026 cond2) {\n\t\t\tpanic(\"common_sqrt price math #1\")\n\t\t}\n\n\t\tdenominator := new(u256.Uint).Sub(numerator1, product)\n\t\treturn u256.MulDivRoundingUp(numerator1, sqrtPX96, denominator)\n\t}\n}\n\nfunc sqrtPriceMathGetNextSqrtPriceFromAmount1RoundingDown(\n\tsqrtPX96 *u256.Uint, // uint160\n\tliquidity *u256.Uint, // uint1288\n\tamount *u256.Uint, // uint256\n\tadd bool,\n) *u256.Uint { // uint160\n\tquotient := u256.Zero()\n\n\tif add {\n\t\tif amount.Lte(u256.MustFromDecimal(consts.MAX_UINT160)) {\n\t\t\tvalue1 := new(u256.Uint).Lsh(amount, 96)\n\t\t\tquotient = new(u256.Uint).Div(value1, liquidity)\n\t\t} else {\n\t\t\tquotient = u256.MulDiv(amount, u256.MustFromDecimal(consts.Q96), liquidity)\n\t\t}\n\n\t\treturn new(u256.Uint).Add(sqrtPX96, quotient)\n\t} else {\n\t\tif amount.Lte(u256.MustFromDecimal(consts.MAX_UINT160)) {\n\t\t\tvalue1 := new(u256.Uint).Lsh(amount, 96)\n\t\t\tquotient = u256.DivRoundingUp(value1, liquidity)\n\t\t} else {\n\t\t\tquotient = u256.MulDivRoundingUp(amount, u256.MustFromDecimal(consts.Q96), liquidity)\n\t\t}\n\n\t\tif !(sqrtPX96.Gt(quotient)) {\n\t\t\tpanic(\"common_sqrt price math #2\")\n\t\t}\n\n\t\treturn new(u256.Uint).Sub(sqrtPX96, quotient)\n\t}\n}\n\nfunc sqrtPriceMathGetNextSqrtPriceFromInput(\n\tsqrtPX96 *u256.Uint, // uint160\n\tliquidity *u256.Uint, // uint128\n\tamountIn *u256.Uint, // uint256\n\tzeroForOne bool, // bool\n) *u256.Uint { // uint160\n\tif zeroForOne {\n\t\treturn sqrtPriceMathGetNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\n\t}\n\treturn sqrtPriceMathGetNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true)\n}\n\nfunc sqrtPriceMathGetNextSqrtPriceFromOutput(\n\tsqrtPX96 *u256.Uint, // uint160\n\tliquidity *u256.Uint, // uint128\n\tamountOut *u256.Uint, // uint256\n\tzeroForOne bool, // bool\n) *u256.Uint { // uint160\n\tif zeroForOne {\n\t\treturn sqrtPriceMathGetNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\n\t}\n\n\treturn sqrtPriceMathGetNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false)\n}\n\nfunc sqrtPriceMathGetAmount0DeltaHelper(\n\tsqrtRatioAX96 *u256.Uint, // uint160\n\tsqrtRatioBX96 *u256.Uint, // uint160\n\tliquidity *u256.Uint, // uint160\n\troundUp bool,\n) *u256.Uint { // uint256\n\tif sqrtRatioAX96.Gt(sqrtRatioBX96) {\n\t\tsqrtRatioAX96, sqrtRatioBX96 = sqrtRatioBX96, sqrtRatioAX96\n\t}\n\n\tnumerator1 := new(u256.Uint).Lsh(liquidity, 96)\n\tnumerator2 := new(u256.Uint).Sub(sqrtRatioBX96, sqrtRatioAX96)\n\n\tif !(sqrtRatioAX96.Gt(u256.Zero())) {\n\t\tpanic(\"common_sqrt price math #3\")\n\t}\n\n\tif roundUp {\n\t\tvalue1 := u256.MulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96)\n\t\treturn u256.DivRoundingUp(value1, sqrtRatioAX96)\n\t} else {\n\t\tvalue1 := u256.MulDiv(numerator1, numerator2, sqrtRatioBX96)\n\t\treturn new(u256.Uint).Div(value1, sqrtRatioAX96)\n\t}\n}\n\nfunc sqrtPriceMathGetAmount1DeltaHelper(\n\tsqrtRatioAX96 *u256.Uint, // uint160\n\tsqrtRatioBX96 *u256.Uint, // uint160\n\tliquidity *u256.Uint, // uint160\n\troundUp bool,\n) *u256.Uint { // uint256\n\tif sqrtRatioAX96.Gt(sqrtRatioBX96) {\n\t\tsqrtRatioAX96, sqrtRatioBX96 = sqrtRatioBX96, sqrtRatioAX96\n\t}\n\n\tif roundUp {\n\t\tdiff := new(u256.Uint).Sub(sqrtRatioBX96, sqrtRatioAX96)\n\t\treturn u256.MulDivRoundingUp(liquidity, diff, u256.MustFromDecimal(consts.Q96))\n\t} else {\n\t\tdiff := new(u256.Uint).Sub(sqrtRatioBX96, sqrtRatioAX96)\n\t\treturn u256.MulDiv(liquidity, diff, u256.MustFromDecimal(consts.Q96))\n\t}\n}\n\nfunc SqrtPriceMathGetAmount0DeltaStr(\n\tsqrtRatioAX96 *u256.Uint, // uint160\n\tsqrtRatioBX96 *u256.Uint, // uint160\n\tliquidity *i256.Int, // int128\n) string { // int256\n\tif liquidity.IsNeg() {\n\t\tu := sqrtPriceMathGetAmount0DeltaHelper(sqrtRatioAX96, sqrtRatioBX96, liquidity.Abs(), false)\n\t\ti := i256.FromUint256(u)\n\t\treturn i256.Zero().Neg(i).ToString()\n\t}\n\n\tu := sqrtPriceMathGetAmount0DeltaHelper(sqrtRatioAX96, sqrtRatioBX96, liquidity.Abs(), true)\n\treturn i256.FromUint256(u).ToString()\n}\n\nfunc SqrtPriceMathGetAmount1DeltaStr(\n\tsqrtRatioAX96 *u256.Uint, // uint160\n\tsqrtRatioBX96 *u256.Uint, // uint160\n\tliquidity *i256.Int, // int128\n) string { // int256\n\tif liquidity.IsNeg() {\n\t\tu := sqrtPriceMathGetAmount1DeltaHelper(sqrtRatioAX96, sqrtRatioBX96, liquidity.Abs(), false)\n\t\ti := i256.FromUint256(u)\n\t\treturn i256.Zero().Neg(i).ToString()\n\t}\n\n\tu := sqrtPriceMathGetAmount1DeltaHelper(sqrtRatioAX96, sqrtRatioBX96, liquidity.Abs(), true)\n\treturn i256.FromUint256(u).ToString()\n}\n"},{"name":"tick_math.gno","body":"package common\n\nimport (\n\ti256 \"gno.land/p/gnoswap/int256\"\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\nvar tickRatioMap = map[int32]*u256.Uint{\n\t0x1:     u256.MustFromDecimal(\"340265354078544963557816517032075149313\"), // 0xfffcb933bd6fad37aa2d162d1a594001,\n\t0x2:     u256.MustFromDecimal(\"340248342086729790484326174814286782778\"), // 0xfff97272373d413259a46990580e213a,\n\t0x4:     u256.MustFromDecimal(\"340214320654664324051920982716015181260\"), // 0xfff2e50f5f656932ef12357cf3c7fdcc,\n\t0x8:     u256.MustFromDecimal(\"340146287995602323631171512101879684304\"), // 0xffe5caca7e10e4e61c3624eaa0941cd0,\n\t0x10:    u256.MustFromDecimal(\"340010263488231146823593991679159461444\"), // 0xffcb9843d60f6159c9db58835c926644,\n\t0x20:    u256.MustFromDecimal(\"339738377640345403697157401104375502016\"), // 0xff973b41fa98c081472e6896dfb254c0,\n\t0x40:    u256.MustFromDecimal(\"339195258003219555707034227454543997025\"), // 0xff2ea16466c96a3843ec78b326b52861,\n\t0x80:    u256.MustFromDecimal(\"338111622100601834656805679988414885971\"), // 0xfe5dee046a99a2a811c461f1969c3053,\n\t0x100:   u256.MustFromDecimal(\"335954724994790223023589805789778977700\"), // 0xfcbe86c7900a88aedcffc83b479aa3a4,\n\t0x200:   u256.MustFromDecimal(\"331682121138379247127172139078559817300\"), // 0xf987a7253ac413176f2b074cf7815e54,\n\t0x400:   u256.MustFromDecimal(\"323299236684853023288211250268160618739\"), // 0xf3392b0822b70005940c7a398e4b70f3,\n\t0x800:   u256.MustFromDecimal(\"307163716377032989948697243942600083929\"), // 0xe7159475a2c29b7443b29c7fa6e889d9,\n\t0x1000:  u256.MustFromDecimal(\"277268403626896220162999269216087595045\"), // 0xd097f3bdfd2022b8845ad8f792aa5825,\n\t0x2000:  u256.MustFromDecimal(\"225923453940442621947126027127485391333\"), // 0xa9f746462d870fdf8a65dc1f90e061e5,\n\t0x4000:  u256.MustFromDecimal(\"149997214084966997727330242082538205943\"), // 0x70d869a156d2a1b890bb3df62baf32f7,\n\t0x8000:  u256.MustFromDecimal(\"66119101136024775622716233608466517926\"),  // 0x31be135f97d08fd981231505542fcfa6,\n\t0x10000: u256.MustFromDecimal(\"12847376061809297530290974190478138313\"),  // 0x9aa508b5b7a84e1c677de54f3e99bc9,\n\t0x20000: u256.MustFromDecimal(\"485053260817066172746253684029974020\"),    // 0x5d6af8dedb81196699c329225ee604,\n\t0x40000: u256.MustFromDecimal(\"691415978906521570653435304214168\"),       // 0x2216e584f5fa1ea926041bedfe98,\n\t0x80000: u256.MustFromDecimal(\"1404880482679654955896180642\"),            // 0x48a170391f7dc42444e8fa2,\n}\n\nvar binaryLogConsts = [8]*u256.Uint{\n\tu256.MustFromDecimal(\"0\"),                                       // 0x0,\n\tu256.MustFromDecimal(\"3\"),                                       // 0x3,\n\tu256.MustFromDecimal(\"15\"),                                      // 0xF,\n\tu256.MustFromDecimal(\"255\"),                                     // 0xFF,\n\tu256.MustFromDecimal(\"65535\"),                                   // 0xFFFF,\n\tu256.MustFromDecimal(\"4294967295\"),                              // 0xFFFFFFFF,\n\tu256.MustFromDecimal(\"18446744073709551615\"),                    // 0xFFFFFFFFFFFFFFFF,\n\tu256.MustFromDecimal(\"340282366920938463463374607431768211455\"), // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,\n}\n\nvar (\n\tshift1By32Left = u256.MustFromDecimal(\"4294967296\") // (1 \u003c\u003c 32)\n)\n\nfunc TickMathGetSqrtRatioAtTick(tick int32) *u256.Uint { // uint160 sqrtPriceX96\n\tabsTick := abs(tick)\n\tratio := u256.MustFromDecimal(\"340282366920938463463374607431768211456\") // consts.Q128\n\n\tfor mask, value := range tickRatioMap {\n\t\tif absTick\u0026mask != 0 {\n\t\t\t// ratio = (ratio * value) \u003e\u003e 128\n\t\t\tratio = ratio.Mul(ratio, value)\n\t\t\tratio = ratio.Rsh(ratio, 128)\n\t\t}\n\t}\n\n\tif tick \u003e 0 {\n\t\t_maxUint256 := u256.MustFromDecimal(\"115792089237316195423570985008687907853269984665640564039457584007913129639935\") // consts.MAX_UINT256\n\t\t_tmp := new(u256.Uint).Div(_maxUint256, ratio)\n\t\tratio = _tmp.Clone()\n\t}\n\n\tshifted := ratio.Rsh(ratio, 32).Clone()\n\n\tremainder := ratio.Mod(ratio, shift1By32Left)\n\n\tif new(u256.Uint).Add(shifted.Clone(), remainder.Clone()).IsZero() {\n\t\treturn shifted\n\t}\n\n\treturn new(u256.Uint).Add(shifted, u256.One())\n}\n\nfunc TickMathGetTickAtSqrtRatio(sqrtPriceX96 *u256.Uint) int32 {\n\n\tratio := new(u256.Uint).Lsh(sqrtPriceX96, 32)\n\n\tmsb, adjustedRatio := findMSB(ratio)\n\tadjustedRatio = adjustRatio(ratio, msb)\n\n\tlog2 := calculateLog2(msb, adjustedRatio)\n\ttick := getTickValue(log2, sqrtPriceX96)\n\n\treturn tick\n}\n\n// findMSB computes the MSB (most significant bit) of the given ratio.\nfunc findMSB(ratio *u256.Uint) (*u256.Uint, *u256.Uint) {\n\tmsb := u256.Zero()\n\n\tfor i := 7; i \u003e= 1; i-- {\n\t\tf := new(u256.Uint).Lsh(gt(ratio, binaryLogConsts[i]), uint(i))\n\t\tmsb = new(u256.Uint).Or(msb, f)\n\t\tratio = new(u256.Uint).Rsh(ratio, uint(f.Uint64()))\n\t}\n\n\t// handle the remaining bits\n\t{\n\t\tf := gt(ratio, u256.One()) // 0x1\n\t\t// msb = msb | f\n\t\tmsb = new(u256.Uint).Or(msb, f)\n\t}\n\n\treturn msb, ratio\n}\n\n// adjustRatio adjusts the given ratio based on the MSB found.\n//\n// This adjustment ensures that the ratio falls within the specific range.\nfunc adjustRatio(ratio, msb *u256.Uint) *u256.Uint {\n\tif msb.Gte(u256.NewUint(128)) {\n\t\treturn new(u256.Uint).Rsh(ratio, uint(msb.Uint64()-127))\n\t}\n\n\treturn new(u256.Uint).Lsh(ratio, uint(127-msb.Uint64()))\n}\n\n// calculateLog2 calculates the binary logarith, of the adjusted ratio using a fixed-point arithmetic.\n//\n// This function iteratively squares the ratio and adjusts the result to compute the log base 2, which will determine the tick value.\nfunc calculateLog2(msb, ratio *u256.Uint) *i256.Int {\n\t_msb := i256.FromUint256(msb)\n\t_128 := i256.NewInt(128)\n\n\tlog_2 := i256.Zero().Sub(_msb, _128)\n\tlog_2 = log_2.Lsh(log_2, 64)\n\n\tfor i := 63; i \u003e= 51; i-- {\n\t\tratio = new(u256.Uint).Mul(ratio, ratio)\n\t\tratio = ratio.Rsh(ratio, 127)\n\n\t\tf := i256.FromUint256(new(u256.Uint).Rsh(ratio, 128))\n\n\t\t// log_2 = log_2 | (f \u003c\u003c i)\n\t\tlog_2 = i256.Zero().Or(log_2, i256.Zero().Lsh(f, uint(i)))\n\n\t\t// ratio = ratio \u003e\u003e uint64(f)\n\t\tratio = ratio.Rsh(ratio, uint(f.Uint64()))\n\t}\n\n\t// handle the remaining bits\n\t{\n\t\t// ratio = ratio * ratio \u003e\u003e 127\n\t\tratio = new(u256.Uint).Mul(ratio, ratio)\n\t\tratio = new(u256.Uint).Rsh(ratio, 127)\n\n\t\tf := i256.FromUint256(new(u256.Uint).Rsh(ratio, 128))\n\n\t\tlog_2 = i256.Zero().Or(log_2, i256.Zero().Lsh(f, 50))\n\t}\n\n\treturn log_2\n}\n\n// getTickValue determines the tick value corresponding to a given sqrtPriveX96.\n//\n// It calculates the upper and lower bounds for each tick, and selects the appropriate tock value\n// based on the given sqrtPriceX96.\nfunc getTickValue(log2 *i256.Int, sqrtPriceX96 *u256.Uint) int32 {\n\t// ref: https://github.com/Uniswap/v3-core/issues/500\n\t// 2^64 / log2 (√1.0001) = 255738958999603826347141\n\tlog_sqrt10001 := i256.Zero().Mul(log2, i256.MustFromDecimal(\"255738958999603826347141\"))\n\n\t// ref: https://ethereum.stackexchange.com/questions/113844/how-does-uniswap-v3s-logarithm-library-tickmath-sol-work/113912#113912\n\t// 0.010000497 x 2^128 = 3402992956809132418596140100660247210\n\ttickLow256 := i256.Zero().Sub(log_sqrt10001, i256.MustFromDecimal(\"3402992956809132418596140100660247210\"))\n\ttickLow256 = tickLow256.Rsh(tickLow256, 128)\n\ttickLow := int32(tickLow256.Int64())\n\n\t// ref: https://ethereum.stackexchange.com/questions/113844/how-does-uniswap-v3s-logarithm-library-tickmath-sol-work/113912#113912\n\t// 0.856 x 2^128 = 291339464771989622907027621153398088495\n\ttickHi256 := i256.Zero().Add(log_sqrt10001, i256.MustFromDecimal(\"291339464771989622907027621153398088495\"))\n\ttickHi256 = tickHi256.Rsh(tickHi256, 128)\n\ttickHi := int32(tickHi256.Int64())\n\n\tvar tick int32\n\tif tickLow == tickHi {\n\t\ttick = tickLow\n\t} else if TickMathGetSqrtRatioAtTick(tickHi).Lte(sqrtPriceX96) {\n\t\ttick = tickHi\n\t} else {\n\t\ttick = tickLow\n\t}\n\n\treturn tick\n}\n\nfunc gt(x, y *u256.Uint) *u256.Uint {\n\tif x.Gt(y) {\n\t\treturn u256.One()\n\t}\n\n\treturn u256.Zero()\n}\n\nfunc abs(x int32) int32 {\n\tif x \u003c 0 {\n\t\treturn -x\n\t}\n\n\treturn x\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"6aurEYYluNVQDyuLQ+HNeCw7SQwusUnnMol7f8yOcRAoNKYYBtJ5aw8Qzl3qZyXjRNC/PpG66U92A80FqjUxSA=="}],"memo":""},"blockNum":"147619"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","package":{"name":"pool","path":"gno.land/p/gnoswap/pool","files":[{"name":"bit_math.gno","body":"package pool\n\nimport (\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\ntype bitShift struct {\n\tbitPattern *u256.Uint\n\tshift      uint\n}\n\nfunc BitMathMostSignificantBit(x *u256.Uint) uint8 {\n\tshifts := []bitShift{\n\t\t{u256.MustFromDecimal(Q128), 128}, // 2^128\n\t\t{u256.MustFromDecimal(Q64), 64},   // 2^64\n\t\t{u256.NewUint(0x100000000), 32},\n\t\t{u256.NewUint(0x10000), 16},\n\t\t{u256.NewUint(0x100), 8},\n\t\t{u256.NewUint(0x10), 4},\n\t\t{u256.NewUint(0x4), 2},\n\t\t{u256.NewUint(0x2), 1},\n\t}\n\n\tr := uint8(0)\n\tfor _, s := range shifts {\n\t\tif x.Gte(s.bitPattern) {\n\t\t\tx = new(u256.Uint).Rsh(x, s.shift)\n\t\t\tr += uint8(s.shift)\n\t\t}\n\t}\n\n\treturn r\n}\n\nfunc BitMathLeastSignificantBit(x *u256.Uint) uint8 {\n\tshifts := []bitShift{\n\t\t{u256.MustFromDecimal(MAX_UINT128), 128},\n\t\t{u256.MustFromDecimal(MAX_UINT64), 64},\n\t\t{u256.MustFromDecimal(MAX_UINT32), 32},\n\t\t{u256.MustFromDecimal(MAX_UINT16), 16},\n\t\t{u256.MustFromDecimal(MAX_UINT8), 8},\n\t\t{u256.NewUint(0xf), 4},\n\t\t{u256.NewUint(0x3), 2},\n\t\t{u256.NewUint(0x1), 1},\n\t}\n\n\tr := uint8(255)\n\tfor _, s := range shifts {\n\t\tif new(u256.Uint).And(x, s.bitPattern).Gt(u256.Zero()) {\n\t\t\tr -= uint8(s.shift)\n\t\t} else {\n\t\t\tx = new(u256.Uint).Rsh(x, s.shift)\n\t\t}\n\t}\n\n\treturn r\n}\n"},{"name":"consts.gno","body":"package pool\n\nconst (\n\tMAX_UINT8   string = \"255\"\n\tMAX_UINT16  string = \"65535\"\n\tMAX_UINT32  string = \"4294967295\"\n\tMAX_UINT64  string = \"18446744073709551615\"\n\tMAX_UINT128 string = \"340282366920938463463374607431768211455\"\n\tMAX_UINT160 string = \"1461501637330902918203684832716283019655932542975\"\n\tMAX_UINT256 string = \"115792089237316195423570985008687907853269984665640564039457584007913129639935\"\n\n\tQ64  string = \"18446744073709551616\"                    // 2 ** 64\n\tQ96  string = \"79228162514264337593543950336\"           // 2 ** 96\n\tQ128 string = \"340282366920938463463374607431768211456\" // 2 ** 128\n)\n"},{"name":"gno.mod","body":"module gno.land/p/gnoswap/pool\n\nrequire (\n\tgno.land/p/gnoswap/int256 v0.0.0-latest\n\tgno.land/p/gnoswap/uint256 v0.0.0-latest\n)\n"},{"name":"sqrt_price_math.gno","body":"package pool\n\nimport (\n\ti256 \"gno.land/p/gnoswap/int256\"\n\tu256 \"gno.land/p/gnoswap/uint256\"\n\n\t\"gno.land/r/gnoswap/consts\"\n)\n\nfunc sqrtPriceMathGetNextSqrtPriceFromAmount0RoundingUp(\n\tsqrtPX96 *u256.Uint, // uint160\n\tliquidity *u256.Uint, // uint128\n\tamount *u256.Uint, // uint256\n\tadd bool,\n) *u256.Uint { // uint160\n\tif amount.IsZero() {\n\t\treturn sqrtPX96\n\t}\n\n\tnumerator1 := new(u256.Uint).Lsh(liquidity, 96)\n\tproduct := new(u256.Uint).Mul(amount, sqrtPX96)\n\n\tif add {\n\t\tif new(u256.Uint).Div(product, amount).Eq(sqrtPX96) {\n\t\t\tdenominator := new(u256.Uint).Add(numerator1, product)\n\n\t\t\tif denominator.Gte(numerator1) {\n\t\t\t\treturn u256.MulDivRoundingUp(numerator1, sqrtPX96, denominator)\n\t\t\t}\n\t\t}\n\n\t\tdiv := new(u256.Uint).Div(numerator1, sqrtPX96)\n\t\tadd := new(u256.Uint).Add(div, amount)\n\t\treturn u256.DivRoundingUp(numerator1, add)\n\t} else {\n\t\tcond1 := new(u256.Uint).Div(product, amount).Eq(sqrtPX96)\n\t\tcond2 := numerator1.Gt(product)\n\n\t\tif !(cond1 \u0026\u0026 cond2) {\n\t\t\tpanic(\"pool_sqrt price math #1\")\n\t\t}\n\n\t\tdenominator := new(u256.Uint).Sub(numerator1, product)\n\t\treturn u256.MulDivRoundingUp(numerator1, sqrtPX96, denominator)\n\t}\n}\n\nfunc sqrtPriceMathGetNextSqrtPriceFromAmount1RoundingDown(\n\tsqrtPX96 *u256.Uint, // uint160\n\tliquidity *u256.Uint, // uint1288\n\tamount *u256.Uint, // uint256\n\tadd bool,\n) *u256.Uint { // uint160\n\tquotient := u256.Zero()\n\n\tif add {\n\t\tif amount.Lte(u256.MustFromDecimal(MAX_UINT160)) {\n\t\t\tvalue1 := new(u256.Uint).Lsh(amount, 96)\n\t\t\tquotient = new(u256.Uint).Div(value1, liquidity)\n\t\t} else {\n\t\t\tquotient = u256.MulDiv(amount, u256.MustFromDecimal(consts.Q96), liquidity)\n\t\t}\n\n\t\treturn new(u256.Uint).Add(sqrtPX96, quotient)\n\t} else {\n\t\tif amount.Lte(u256.MustFromDecimal(MAX_UINT160)) {\n\t\t\tvalue1 := new(u256.Uint).Lsh(amount, 96)\n\t\t\tquotient = u256.DivRoundingUp(value1, liquidity)\n\t\t} else {\n\t\t\tquotient = u256.MulDivRoundingUp(amount, u256.MustFromDecimal(consts.Q96), liquidity)\n\t\t}\n\n\t\tif !(sqrtPX96.Gt(quotient)) {\n\t\t\tpanic(\"pool_sqrt price math #2\")\n\t\t}\n\n\t\treturn new(u256.Uint).Sub(sqrtPX96, quotient)\n\t}\n}\n\nfunc sqrtPriceMathGetNextSqrtPriceFromInput(\n\tsqrtPX96 *u256.Uint, // uint160\n\tliquidity *u256.Uint, // uint128\n\tamountIn *u256.Uint, // uint256\n\tzeroForOne bool, // bool\n) *u256.Uint { // uint160\n\tif zeroForOne {\n\t\treturn sqrtPriceMathGetNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\n\t}\n\treturn sqrtPriceMathGetNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true)\n}\n\nfunc sqrtPriceMathGetNextSqrtPriceFromOutput(\n\tsqrtPX96 *u256.Uint, // uint160\n\tliquidity *u256.Uint, // uint128\n\tamountOut *u256.Uint, // uint256\n\tzeroForOne bool, // bool\n) *u256.Uint { // uint160\n\tif zeroForOne {\n\t\treturn sqrtPriceMathGetNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\n\t}\n\n\treturn sqrtPriceMathGetNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false)\n}\n\nfunc sqrtPriceMathGetAmount0DeltaHelper(\n\tsqrtRatioAX96 *u256.Uint, // uint160\n\tsqrtRatioBX96 *u256.Uint, // uint160\n\tliquidity *u256.Uint, // uint160\n\troundUp bool,\n) *u256.Uint { // uint256\n\tif sqrtRatioAX96.Gt(sqrtRatioBX96) {\n\t\tsqrtRatioAX96, sqrtRatioBX96 = sqrtRatioBX96, sqrtRatioAX96\n\t}\n\n\tnumerator1 := new(u256.Uint).Lsh(liquidity, 96)\n\tnumerator2 := new(u256.Uint).Sub(sqrtRatioBX96, sqrtRatioAX96)\n\n\tif !(sqrtRatioAX96.Gt(u256.Zero())) {\n\t\tpanic(\"pool_sqrt price math #3\")\n\t}\n\n\tif roundUp {\n\t\tvalue1 := u256.MulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96)\n\t\treturn u256.DivRoundingUp(value1, sqrtRatioAX96)\n\t} else {\n\t\tvalue1 := u256.MulDiv(numerator1, numerator2, sqrtRatioBX96)\n\t\treturn new(u256.Uint).Div(value1, sqrtRatioAX96)\n\t}\n}\n\nfunc sqrtPriceMathGetAmount1DeltaHelper(\n\tsqrtRatioAX96 *u256.Uint, // uint160\n\tsqrtRatioBX96 *u256.Uint, // uint160\n\tliquidity *u256.Uint, // uint160\n\troundUp bool,\n) *u256.Uint { // uint256\n\tif sqrtRatioAX96.Gt(sqrtRatioBX96) {\n\t\tsqrtRatioAX96, sqrtRatioBX96 = sqrtRatioBX96, sqrtRatioAX96\n\t}\n\n\tif roundUp {\n\t\tdiff := new(u256.Uint).Sub(sqrtRatioBX96, sqrtRatioAX96)\n\t\treturn u256.MulDivRoundingUp(liquidity, diff, u256.MustFromDecimal(consts.Q96))\n\t} else {\n\t\tdiff := new(u256.Uint).Sub(sqrtRatioBX96, sqrtRatioAX96)\n\t\treturn u256.MulDiv(liquidity, diff, u256.MustFromDecimal(consts.Q96))\n\t}\n}\n\nfunc SqrtPriceMathGetAmount0DeltaStr(\n\tsqrtRatioAX96 *u256.Uint, // uint160\n\tsqrtRatioBX96 *u256.Uint, // uint160\n\tliquidity *i256.Int, // int128\n) string { // int256\n\tif liquidity.IsNeg() {\n\t\tu := sqrtPriceMathGetAmount0DeltaHelper(sqrtRatioAX96, sqrtRatioBX96, liquidity.Abs(), false)\n\t\ti := i256.FromUint256(u)\n\t\treturn i256.Zero().Neg(i).ToString()\n\t}\n\n\tu := sqrtPriceMathGetAmount0DeltaHelper(sqrtRatioAX96, sqrtRatioBX96, liquidity.Abs(), true)\n\treturn i256.FromUint256(u).ToString()\n}\n\nfunc SqrtPriceMathGetAmount1DeltaStr(\n\tsqrtRatioAX96 *u256.Uint, // uint160\n\tsqrtRatioBX96 *u256.Uint, // uint160\n\tliquidity *i256.Int, // int128\n) string { // int256\n\tif liquidity.IsNeg() {\n\t\tu := sqrtPriceMathGetAmount1DeltaHelper(sqrtRatioAX96, sqrtRatioBX96, liquidity.Abs(), false)\n\t\ti := i256.FromUint256(u)\n\t\treturn i256.Zero().Neg(i).ToString()\n\t}\n\n\tu := sqrtPriceMathGetAmount1DeltaHelper(sqrtRatioAX96, sqrtRatioBX96, liquidity.Abs(), true)\n\treturn i256.FromUint256(u).ToString()\n}\n"},{"name":"swap_math.gno","body":"package pool\n\nimport (\n\ti256 \"gno.land/p/gnoswap/int256\"\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\nfunc SwapMathComputeSwapStepStr(\n\tsqrtRatioCurrentX96 *u256.Uint, // uint160\n\tsqrtRatioTargetX96 *u256.Uint, // uint160\n\tliquidity *u256.Uint, // uint128\n\tamountRemaining *i256.Int, // int256\n\tfeePips uint64,\n) (string, string, string, string) { // (sqrtRatioNextX96, amountIn, amountOut, feeAmount *u256.Uint)\n\tisToken1Expensive := sqrtRatioCurrentX96.Gte(sqrtRatioTargetX96)\n\n\t// POSTIVIE == EXACT_IN =\u003e Estimated AmountOut\n\t// NEGATIVE == EXACT_OUT =\u003e Estimated AmountIn\n\texactIn := !(amountRemaining.IsNeg()) // amountRemaining \u003e= 0\n\n\tsqrtRatioNextX96 := u256.Zero()\n\tamountIn := u256.Zero()\n\tamountOut := u256.Zero()\n\tfeeAmount := u256.Zero()\n\n\tif exactIn {\n\t\tamountRemainingLessFee := u256.MulDiv(amountRemaining.Abs(), u256.NewUint(1000000-feePips), u256.NewUint(1000000))\n\n\t\tif isToken1Expensive {\n\t\t\tamountIn = sqrtPriceMathGetAmount0DeltaHelper(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\n\t\t} else {\n\t\t\tamountIn = sqrtPriceMathGetAmount1DeltaHelper(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true)\n\t\t}\n\n\t\tif amountRemainingLessFee.Gte(amountIn) {\n\t\t\tsqrtRatioNextX96 = sqrtRatioTargetX96\n\t\t} else {\n\t\t\tsqrtRatioNextX96 = sqrtPriceMathGetNextSqrtPriceFromInput(\n\t\t\t\tsqrtRatioCurrentX96,\n\t\t\t\tliquidity,\n\t\t\t\tamountRemainingLessFee,\n\t\t\t\tisToken1Expensive,\n\t\t\t)\n\t\t}\n\n\t} else {\n\t\tif isToken1Expensive {\n\t\t\tamountOut = sqrtPriceMathGetAmount1DeltaHelper(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\n\t\t} else {\n\t\t\tamountOut = sqrtPriceMathGetAmount0DeltaHelper(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false)\n\t\t}\n\n\t\tif amountRemaining.Abs().Gte(amountOut) {\n\t\t\tsqrtRatioNextX96 = sqrtRatioTargetX96\n\t\t} else {\n\t\t\tsqrtRatioNextX96 = sqrtPriceMathGetNextSqrtPriceFromOutput(\n\t\t\t\tsqrtRatioCurrentX96,\n\t\t\t\tliquidity,\n\t\t\t\tamountRemaining.Abs(),\n\t\t\t\tisToken1Expensive,\n\t\t\t)\n\t\t}\n\t}\n\n\tmax := sqrtRatioTargetX96.Eq(sqrtRatioNextX96)\n\n\tif isToken1Expensive {\n\t\tif max \u0026\u0026 exactIn {\n\t\t\tamountIn = amountIn\n\t\t} else {\n\t\t\tamountIn = sqrtPriceMathGetAmount0DeltaHelper(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true)\n\t\t}\n\n\t\tif max \u0026\u0026 !exactIn {\n\t\t\tamountOut = amountOut\n\t\t} else {\n\t\t\tamountOut = sqrtPriceMathGetAmount1DeltaHelper(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false)\n\t\t}\n\t} else {\n\t\tif max \u0026\u0026 exactIn {\n\t\t\tamountIn = amountIn\n\t\t} else {\n\t\t\tamountIn = sqrtPriceMathGetAmount1DeltaHelper(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true)\n\t\t}\n\n\t\tif max \u0026\u0026 !exactIn {\n\t\t\tamountOut = amountOut\n\t\t} else {\n\t\t\tamountOut = sqrtPriceMathGetAmount0DeltaHelper(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false)\n\t\t}\n\t}\n\n\tif !exactIn \u0026\u0026 amountOut.Gt(amountRemaining.Abs()) {\n\t\tamountOut = amountRemaining.Abs()\n\t}\n\n\tif exactIn \u0026\u0026 !(sqrtRatioNextX96.Eq(sqrtRatioTargetX96)) {\n\t\tfeeAmount = new(u256.Uint).Sub(amountRemaining.Abs(), amountIn)\n\t} else {\n\t\tfeeAmount = u256.MulDivRoundingUp(amountIn, u256.NewUint(feePips), new(u256.Uint).Sub(u256.NewUint(1000000), u256.NewUint(feePips)))\n\t}\n\n\treturn sqrtRatioNextX96.ToString(), amountIn.ToString(), amountOut.ToString(), feeAmount.ToString()\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"gwbavfrhtkxkpDueLwFs+yI9w4TfzphgO7mJ9dCwLD49KBYxIs4AZYWquH/FdALIuZnAZGrf+5Dh6B+wPo2WNQ=="}],"memo":""},"blockNum":"147621"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","package":{"name":"gns","path":"gno.land/r/gnoswap/gns","files":[{"name":"gno.mod","body":"module gno.land/r/gnoswap/gns\n\nrequire (\n\tgno.land/p/demo/grc/grc20 v0.0.0-latest\n\tgno.land/p/demo/ownable v0.0.0-latest\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/uassert v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n\tgno.land/p/demo/users v0.0.0-latest\n\tgno.land/r/demo/users v0.0.0-latest\n)"},{"name":"gns.gno","body":"package gns\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n\tpusers \"gno.land/p/demo/users\"\n\n\t\"gno.land/r/demo/users\"\n\n\t\"gno.land/r/gnoswap/consts\"\n)\n\nconst MAXIMUM_SUPPLY = uint64(1_000_000_000_000_000) // 1B\n\nvar (\n\tbanker *grc20.Banker\n\tadmin  *ownable.Ownable\n\ttoken  grc20.Token\n)\n\nvar (\n\tdeployedHeight   int64\n\tdeployedAt       time.Time\n\tlastMintedHeight int64\n\tamountToEmission uint64\n)\n\nfunc init() {\n\tadmin = ownable.NewWithAddress(\"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c\") // GNOSWAP_ADMIN\n\tbanker = grc20.NewBanker(\"Gnoswap\", \"GNS\", 6)\n\n\tbanker.Mint(admin.Owner(), 100_000_000_000_000) // 100_000_000 GNS ≈ 0.1B\n\ttoken = banker.Token()\n\n\tamountToEmission = MAXIMUM_SUPPLY - uint64(100_000_000_000_000)\n\n\theight := std.GetHeight()\n\tdeployedHeight = height\n\tdeployedAt = time.Now()\n\tlastMintedHeight = 0\n}\n\nfunc TotalSupply() uint64 { return token.TotalSupply() }\n\nfunc BalanceOf(owner pusers.AddressOrName) uint64 {\n\townerAddr := users.Resolve(owner)\n\treturn token.BalanceOf(ownerAddr)\n}\n\nfunc Allowance(owner, spender pusers.AddressOrName) uint64 {\n\townerAddr := users.Resolve(owner)\n\tspenderAddr := users.Resolve(spender)\n\treturn token.Allowance(ownerAddr, spenderAddr)\n}\n\nfunc Transfer(to pusers.AddressOrName, amount uint64) {\n\ttoAddr := users.Resolve(to)\n\tcheckErr(token.Transfer(toAddr, amount))\n}\n\nfunc Approve(spender pusers.AddressOrName, amount uint64) {\n\tspenderAddr := users.Resolve(spender)\n\tcheckErr(token.Approve(spenderAddr, amount))\n}\n\nfunc TransferFrom(from, to pusers.AddressOrName, amount uint64) {\n\tfromAddr := users.Resolve(from)\n\ttoAddr := users.Resolve(to)\n\tcheckErr(token.TransferFrom(fromAddr, toAddr, amount))\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn banker.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := pusers.AddressOrName(parts[1])\n\t\townerAddr := users.Resolve(owner)\n\t\tbalance := banker.BalanceOf(ownerAddr)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\n// Mint\nfunc Mint(address pusers.AddressOrName) {\n\t// only emission contract can call Mint\n\tcaller := std.PrevRealm().Addr()\n\tif caller != consts.EMISSION_ADDR {\n\t\tpanic(\"only emission contract can call Mint\")\n\t}\n\n\t// calculate gns emission amount for every block, and send by single call\n\t// for this case, we assume that inside of block range gnoswap state hasn't changed.\n\tnowHeight := std.GetHeight()\n\tamountToMint := uint64(0)\n\tfor i := lastMintedHeight + 1; i \u003c= nowHeight; i++ {\n\t\tamount := getAmountByHeight(i)\n\t\tamountToMint += amount\n\t}\n\terr := banker.Mint(users.Resolve(address), amountToMint)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\tlastMintedHeight = nowHeight\n}\n\nfunc GetLastMintedHeight() int64 {\n\treturn lastMintedHeight\n}\n\nfunc checkErr(err error) {\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n}\n"},{"name":"halving.gno","body":"package gns\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\n/*\n\tNOTE: assume block will be created every 2 second\n\t2 second = 1 block\n\t1 minute = 30 block\n\t1 hour = 1800 block\n\t1 day = 43200 block\n\t(365 days) 1 year = 15768000 block\n\n\t2 year = +31536000 block\n\t4 year = +63072000 block\n\t6 year = +94608000 block\n\t8 year = +126144000 block\n\t12 year = +189216000 block\n*/\n\ntype halvingTierAmountType map[int64]int64     // map[tier]mintAmount\nvar halvingTierAmount = halvingTierAmountType{ // u amount per year\n\t1:  18_750_000_000_000 * 12, // 225_000_000_000_000\n\t2:  18_750_000_000_000 * 12, // 225_000_000_000_000\n\t3:  9_375_000_000_000 * 12,  // 112_500_000_000_000\n\t4:  9_375_000_000_000 * 12,  // 112_500_000_000_000\n\t5:  4_687_500_000_000 * 12,  // 56_250_000_000_000\n\t6:  4_687_500_000_000 * 12,  // 56_250_000_000_000\n\t7:  2_343_750_000_000 * 12,  // 28_125_000_000_000\n\t8:  2_343_750_000_000 * 12,  // 28_125_000_000_000\n\t9:  1_171_875_000_000 * 12,  // 14_062_500_000_000\n\t10: 1_171_875_000_000 * 12,  // 14_062_500_000_000\n\t11: 1_171_875_000_000 * 12,  // 14_062_500_000_000\n\t12: 1_171_875_000_000 * 12,  // 14_062_500_000_000\n}\n\ntype halvingTierBlockType map[int64]int64 // map[block[tier]mintAmount\nvar halvingTierBlock = make(halvingTierBlockType, 5)\n\nfunc init() {\n\t// init 12 years halving tier block\n\theight := std.GetHeight()\n\tfor i := int64(1); i \u003c 13; i++ {\n\t\thalvingTierBlock[i] = height + 15768000*i\n\t}\n}\n\nfunc SetHalvingTierBlock(tier int64, block int64) {\n\t// admin or governance only\n\tcaller := std.PrevRealm().Addr()\n\n\tif caller != consts.GNOSWAP_ADMIN \u0026\u0026 caller != consts.GOV_ADDR {\n\t\tpanic(\n\t\t\tufmt.Sprintf(\n\t\t\t\t\"only admin(%s) or governance(%s) can set halving tier block, called from %s\",\n\t\t\t\tconsts.GNOSWAP_ADMIN,\n\t\t\t\tconsts.GOV_ADDR,\n\t\t\t\tcaller,\n\t\t\t),\n\t\t)\n\t}\n\n\t// cannot set non exist tier\n\tif tier \u003c 1 || tier \u003e 12 {\n\t\tpanic(ufmt.Sprintf(\"invalid tier %d\", tier))\n\t}\n\n\t// cannot set block less than current block\n\tif block \u003c std.GetHeight() {\n\t\tpanic(ufmt.Sprintf(\"cannot set block less than current block %d\", std.GetHeight()))\n\t}\n\n\thalvingTierBlock[tier] = block\n}\n\nfunc getAmountByHeight(height int64) uint64 {\n\thalvingTier := getHalvingTierByBlock(height)\n\thalvingAmountYear := halvingTierAmount[halvingTier] // amount per year\n\thalvingAmountDay := halvingAmountYear / 365\n\thalvingAmountBlock := halvingAmountDay / 43200 // 1 day = 43200 block\n\n\treturn uint64(halvingAmountBlock)\n}\n\nfunc getHalvingTierByBlock(height int64) int64 {\n\t// determine which halving tier block is in\n\tfor tier, block := range halvingTierBlock {\n\t\tif height \u003c= block {\n\t\t\treturn tier\n\t\t}\n\t}\n\n\treturn 0\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"waJXksGAPWISX2kqfoakOyZX1pKWWCXaouX44PnL1mEFVChdhnlqRsbUWzEpU/VoQ6bnc38cvftta/966E3K6Q=="}],"memo":""},"blockNum":"147631"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","package":{"name":"emission","path":"gno.land/r/gnoswap/emission","files":[{"name":"__TEST_0_INIT_VARIABLE_AND_HELPER_test.gno","body":"package emission\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/r/gnoswap/consts\"\n)\n\nvar (\n\tgsa std.Address = consts.GNOSWAP_ADMIN\n)\n\n// Realms to mock frames\nvar (\n\tgsaRealm = std.NewUserRealm(gsa)\n\n\tgovRealm = std.NewCodeRealm(consts.GOV_PATH)\n)\n\n/* HELPER */\nfunc shouldEQ(t *testing.T, got, expected interface{}) {\n\tif got != expected {\n\t\tt.Errorf(\"got %v, expected %v\", got, expected)\n\t}\n}\n\nfunc shouldNEQ(t *testing.T, got, expected interface{}) {\n\tif got == expected {\n\t\tt.Errorf(\"got %v, didn't expected %v\", got, expected)\n\t}\n}\n\nfunc shouldPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"expected panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc shouldPanicWithMsg(t *testing.T, f func(), msg string) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t} else {\n\t\t\tif r != msg {\n\t\t\t\tt.Errorf(\"excepted panic(%v), got(%v)\", msg, r)\n\t\t\t}\n\t\t}\n\t}()\n\tf()\n}\n"},{"name":"distribution.gno","body":"package emission\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\t\"gno.land/r/gnoswap/gns\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\n// emissionTarget represents different targets for token emission.\ntype emissionTarget int\n\n// distributionPctMap maps emission targets to their respective distribution percentages.\ntype distributionPctMap map[emissionTarget]uint64\n\nconst (\n\tLIQUIDITY_STAKING emissionTarget = iota + 1\n\tDEVOPS\n\tCOMMUNITY_POOL\n\tXGNS\n)\n\n// distributionPct defines the distribution percentages.\nvar distributionPct distributionPctMap = distributionPctMap{\n\tLIQUIDITY_STAKING: 7500, // 75%\n\tDEVOPS:            2000, // 20%\n\tCOMMUNITY_POOL:    500,  // 5%\n\tXGNS:              0,    // 0%\n}\n\n// GetDistributionPct returns the distribution percentage for the given target.\nfunc GetDistributionPct(target emissionTarget) uint64 {\n\treturn distributionPct[target]\n}\n\n// ChangeDistributionPct01 changes the distribution percentage for the given single target.\nfunc ChangeDistributionPct01(target01 emissionTarget, pct01 uint64) {\n\tchangeDistributionPct(target01, pct01)\n\n\tcheckSumDistributionPct()\n}\n\n// ChangeDistributionPct02 changes the distribution percentage for the given two targets.\nfunc ChangeDistributionPct02(\n\ttarget01 emissionTarget, pct01 uint64,\n\ttarget02 emissionTarget, pct02 uint64,\n) {\n\tchangeDistributionPct(target01, pct01)\n\tchangeDistributionPct(target02, pct02)\n\n\tcheckSumDistributionPct()\n}\n\n// ChangeDistributionPct03 changes the distribution percentage for the given three targets.\nfunc ChangeDistributionPct03(\n\ttarget01 emissionTarget, pct01 uint64,\n\ttarget02 emissionTarget, pct02 uint64,\n\ttarget03 emissionTarget, pct03 uint64,\n) {\n\tchangeDistributionPct(target01, pct01)\n\tchangeDistributionPct(target02, pct02)\n\tchangeDistributionPct(target03, pct03)\n\n\tcheckSumDistributionPct()\n}\n\n// ChangeDistributionPct04 changes the distribution percentage for the given four targets.\nfunc ChangeDistributionPct04(\n\ttarget01 emissionTarget, pct01 uint64,\n\ttarget02 emissionTarget, pct02 uint64,\n\ttarget03 emissionTarget, pct03 uint64,\n\ttarget04 emissionTarget, pct04 uint64,\n) {\n\tchangeDistributionPct(target01, pct01)\n\tchangeDistributionPct(target02, pct02)\n\tchangeDistributionPct(target03, pct03)\n\tchangeDistributionPct(target04, pct04)\n\n\tcheckSumDistributionPct()\n}\n\n// distributeToTarget distributes the specified amount to different targets based on their percentages.\nfunc distributeToTarget(amount uint64) {\n\ttotalSent := uint64(0)\n\tfor target, pct := range distributionPct {\n\t\tdistAmount := calculateAmount(amount, pct)\n\t\ttotalSent += distAmount\n\n\t\ttransferToTarget(target, distAmount)\n\t}\n\n\t// `amount-totalSent` can be left due to rounding\n\t// it will be distributed next time\n}\n\n// calculateAmount calculates the amount based on the given percentage in basis points.\nfunc calculateAmount(amount, bptPct uint64) uint64 {\n\treturn amount * bptPct / 10000\n}\n\n// transferToTarget transfers the specified amount to the given addresses.\nfunc transferToTarget(target emissionTarget, amount uint64) {\n\tswitch target {\n\tcase LIQUIDITY_STAKING:\n\t\t// transfer to staker contract\n\t\tgns.Transfer(a2u(consts.STAKER_ADDR), amount)\n\tcase DEVOPS:\n\t\t// transfer to devops\n\t\tgns.Transfer(a2u(consts.DEV_OPS), amount)\n\tcase COMMUNITY_POOL:\n\t\tgns.Transfer(a2u(consts.COMMUNITY_POOL_ADDR), amount)\n\tcase XGNS:\n\t\tgns.Transfer(a2u(consts.X_GNS_ADDR), amount)\n\tdefault:\n\t\tpanic(\"invalid target\")\n\t}\n}\n\n// changeDistributionPct changes the distribution percentage for the given target.\nfunc changeDistributionPct(target emissionTarget, pct uint64) {\n\t// only admin or governance can change\n\tcaller := std.PrevRealm().Addr()\n\tif caller != consts.GNOSWAP_ADMIN \u0026\u0026 caller != consts.GOV_ADDR {\n\t\tpanic(\"only admin or governance can change distribution percentages\")\n\t}\n\n\t// cannot add new target\n\tif target != LIQUIDITY_STAKING \u0026\u0026 target != DEVOPS \u0026\u0026 target != COMMUNITY_POOL \u0026\u0026 target != XGNS {\n\t\tpanic(\"invalid target\")\n\t}\n\n\t// Maximum pct for a single target is 10000 basis points (100%)\n\tif pct \u003e 10000 {\n\t\tpanic(\"percentage too high\")\n\t}\n\n\tdistributionPct[target] = pct\n}\n\n// checkSumDistributionPct ensures the sum of all distribution percentages is 100%\nfunc checkSumDistributionPct() {\n\tsum := uint64(0)\n\tfor _, pct := range distributionPct {\n\t\tsum += pct\n\t}\n\n\tif sum != 10000 {\n\t\tpanic(ufmt.Sprintf(\"sum of all pct should be 100%% (10000 bps), got %d\\n\", sum))\n\t}\n}\n"},{"name":"emission.gno","body":"package emission\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/gnoswap/consts\"\n)\n\n// lastExecutedHeight is a flag to prevent multiple calling MintAndDistributeGns in the same block height\nvar lastExecutedHeight int64\n\n// lastStakerGnsBalance is history of staker GNS balance\nvar lastStakerGnsBalance uint64\n\n// MintAndDistributeGns mints GNS and distributes to target\nfunc MintAndDistributeGns() {\n\tlastStakerGnsBalance = gnsBalance(consts.STAKER_ADDR)\n\n\theight := std.GetHeight()\n\tif lastExecutedHeight \u003e= height {\n\t\t// do not panic here, we don't want to panic entire transaction that calls this function\n\t\treturn\n\t}\n\n\tmintGns()\n\n\temissionGnsBalance := gnsBalance(emissionAddr)\n\tdistributeToTarget(emissionGnsBalance)\n\n\t// TODO: REMOVE AFTER EMISSION QA\n\tprintln(\"EM_emissionGnsBalance:\", emissionGnsBalance)\n\n\tlastExecutedHeight = height\n}\n\nfunc GetLastExecutedHeight() int64 {\n\treturn lastExecutedHeight\n}\n\nfunc GetLastStakerGnsBalance() uint64 {\n\treturn lastStakerGnsBalance\n}\n"},{"name":"mint_gns.gno","body":"package emission\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\t\"gno.land/r/gnoswap/gns\"\n)\n\nvar emissionAddr std.Address = consts.EMISSION_ADDR\n\n// mintGns mints GNS to emission address\nfunc mintGns() {\n\tgns.Mint(a2u(emissionAddr))\n}\n"},{"name":"utils.gno","body":"package emission\n\nimport (\n\t\"std\"\n\n\tpusers \"gno.land/p/demo/users\"\n\t\"gno.land/r/gnoswap/gns\"\n)\n\nfunc a2u(addr std.Address) pusers.AddressOrName {\n\treturn pusers.AddressOrName(addr)\n}\n\nfunc gnsBalance(addr std.Address) uint64 {\n\ta2u := pusers.AddressOrName(addr)\n\n\treturn gns.BalanceOf(a2u)\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"DOIkxKCaLkckLMtdyonYsj+MCjYZNMpGzSydTnxnJJxQTknvXXBDvbEe7hBK1qRVL0akS9sMDdEbdJMo3CxH7A=="}],"memo":""},"blockNum":"147633"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","package":{"name":"pool","path":"gno.land/r/gnoswap/pool","files":[{"name":"_GET_no_receiver.gno","body":"package pool\n\nimport (\n\t\"gno.land/p/demo/ufmt\"\n)\n\nfunc PoolGetSlot0Tick(poolPath string) int32 {\n\tpool, exist := pools[poolPath]\n\tif !exist {\n\t\tpanic(ufmt.Sprintf(\"[POOL] _GET_no_receiver.gno__PoolGetSlot0Tick() || pool(%s) does not exist\", poolPath))\n\t}\n\n\treturn pool.slot0.tick\n}\n"},{"name":"_GET_receiver.gno","body":"package pool\n\nimport (\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\n// PoolGetPoolList returns a list of all pool paths\nfunc PoolGetPoolList() []string {\n\tpoolPaths := []string{}\n\tfor poolPath, _ := range pools {\n\t\tpoolPaths = append(poolPaths, poolPath)\n\t}\n\n\treturn poolPaths\n}\n\nfunc (pool *Pool) PoolGetSlot0() Slot0 {\n\treturn pool.slot0\n}\n\nfunc (pool *Pool) PoolGetSlot0SqrtPriceX96() *u256.Uint {\n\treturn pool.slot0.sqrtPriceX96\n}\n\nfunc (pool *Pool) PoolGetSlot0Tick() int32 {\n\treturn pool.slot0.tick\n}\n\nfunc (pool *Pool) PoolGetPositionFeeGrowthInside0LastX128(key string) *u256.Uint {\n\tposition, exist := pool.positions[key]\n\tif !exist {\n\t\treturn u256.Zero()\n\t}\n\n\treturn position.feeGrowthInside0LastX128\n}\n\nfunc (pool *Pool) PoolGetPositionFeeGrowthInside1LastX128(key string) *u256.Uint {\n\tposition, exist := pool.positions[key]\n\tif !exist {\n\t\treturn u256.Zero()\n\t}\n\n\treturn position.feeGrowthInside1LastX128\n}\n\nfunc (pool *Pool) PoolGetTickFeeGrowthOutside0X128(x int32) *u256.Uint {\n\ttick, exist := pool.ticks[x]\n\tif !exist {\n\t\treturn u256.Zero()\n\t}\n\n\treturn tick.feeGrowthOutside0X128\n}\n\nfunc (pool *Pool) PoolGetTickFeeGrowthOutside1X128(x int32) *u256.Uint {\n\ttick, exist := pool.ticks[x]\n\tif !exist {\n\t\treturn u256.Zero()\n\t}\n\n\treturn tick.feeGrowthOutside1X128\n}\n\nfunc (pool *Pool) PoolGetToken0Path() string {\n\treturn pool.token0Path\n}\n\nfunc (pool *Pool) PoolGetToken1Path() string {\n\treturn pool.token1Path\n}\n\nfunc (pool *Pool) PoolGetFee() uint32 {\n\treturn pool.fee\n}\n\nfunc (pool *Pool) PoolGetFeeGrowthGlobal0X128() *u256.Uint {\n\treturn pool.feeGrowthGlobal0X128\n}\n\nfunc (pool *Pool) PoolGetFeeGrowthGlobal1X128() *u256.Uint {\n\treturn pool.feeGrowthGlobal1X128\n}\n\nfunc (pool *Pool) PoolGetLiquidity() *u256.Uint {\n\treturn pool.liquidity\n}\n"},{"name":"_RPC_api.gno","body":"package pool\n\nimport (\n\tb64 \"encoding/base64\"\n\n\t\"gno.land/p/demo/json\"\n\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\ntype RpcPool struct {\n\tPoolPath string `json:\"poolPath\"`\n\n\tToken0Path string `json:\"token0Path\"`\n\tToken1Path string `json:\"token1Path\"`\n\n\tToken0Balance string `json:\"token0Balance\"`\n\tToken1Balance string `json:\"token1Balance\"`\n\n\tFee uint32 `json:\"fee\"`\n\n\tTickSpacing int32 `json:\"tickSpacing\"`\n\n\tMaxLiquidityPerTick string `json:\"maxLiquidityPerTick\"`\n\n\tSlot0SqrtPriceX96 string `json:\"sqrtPriceX96\"`\n\tSlot0Tick         int32  `json:\"tick\"`\n\tSlot0FeeProtocol  uint8  `json:\"feeProtocol\"`\n\tSlot0Unlocked     bool   `json:\"unlocked\"`\n\n\tFeeGrowthGlobal0X128 string `json:\"feeGrowthGlobal0X128\"`\n\tFeeGrowthGlobal1X128 string `json:\"feeGrowthGlobal1X128\"`\n\n\tToken0ProtocolFee string `json:\"token0ProtocolFee\"`\n\tToken1ProtocolFee string `json:\"token1ProtocolFee\"`\n\n\tLiquidity string `json:\"liquidity\"`\n\n\tTicks RpcTicks `json:\"ticks\"`\n\n\tTickBitmaps RpcTickBitmaps `json:\"tickBitmaps\"`\n\n\tPositions []RpcPosition `json:\"positions\"`\n}\n\ntype RpcTickBitmaps map[int16]string // tick(wordPos) =\u003e bitmap(tickWord ^ mask)\n\ntype RpcTicks map[int32]RpcTickInfo // tick =\u003e RpcTickInfo\n\ntype RpcTickInfo struct {\n\tLiquidityGross string `json:\"liquidityGross\"`\n\tLiquidityNet   string `json:\"liquidityNet\"`\n\n\tFeeGrowthOutside0X128 string `json:\"feeGrowthOutside0X128\"`\n\tFeeGrowthOutside1X128 string `json:\"feeGrowthOutside1X128\"`\n\n\tTickCumulativeOutside int64 `json:\"tickCumulativeOutside\"`\n\n\tSecondsPerLiquidityOutsideX string `json:\"secondsPerLiquidityOutsideX\"`\n\tSecondsOutside              uint32 `json:\"secondsOutside\"`\n\n\tInitialized bool `json:\"initialized\"`\n}\n\ntype RpcPosition struct {\n\tOwner string `json:\"owner\"`\n\n\tTickLower int32 `json:\"tickLower\"`\n\tTickUpper int32 `json:\"tickUpper\"`\n\n\tLiquidity string `json:\"liquidity\"`\n\n\tToken0Owed string `json:\"token0Owed\"`\n\tToken1Owed string `json:\"token1Owed\"`\n}\n\nfunc ApiGetPools() string {\n\trpcPools := []RpcPool{}\n\tfor poolPath, _ := range pools {\n\t\trpcPool := rpcMakePool(poolPath)\n\t\trpcPools = append(rpcPools, rpcPool)\n\t}\n\n\t// STAT NODE\n\t_stat := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"height\":    json.NumberNode(\"height\", float64(std.GetHeight())),\n\t\t\"timestamp\": json.NumberNode(\"timestamp\", float64(time.Now().Unix())),\n\t})\n\n\t// RESPONSE (ARRAY) NODE\n\tresponses := json.ArrayNode(\"\", []*json.Node{})\n\tfor _, pool := range rpcPools {\n\t\t_poolNode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"poolPath\":             json.StringNode(\"poolPath\", pool.PoolPath),\n\t\t\t\"token0Path\":           json.StringNode(\"token0Path\", pool.Token0Path),\n\t\t\t\"token1Path\":           json.StringNode(\"token1Path\", pool.Token1Path),\n\t\t\t\"token0Balance\":        json.StringNode(\"token0Balance\", pool.Token0Balance),\n\t\t\t\"token1Balance\":        json.StringNode(\"token1Balance\", pool.Token1Balance),\n\t\t\t\"fee\":                  json.NumberNode(\"fee\", float64(pool.Fee)),\n\t\t\t\"tickSpacing\":          json.NumberNode(\"tickSpacing\", float64(pool.TickSpacing)),\n\t\t\t\"maxLiquidityPerTick\":  json.StringNode(\"maxLiquidityPerTick\", pool.MaxLiquidityPerTick),\n\t\t\t\"sqrtPriceX96\":         json.StringNode(\"sqrtPriceX96\", pool.Slot0SqrtPriceX96),\n\t\t\t\"tick\":                 json.NumberNode(\"tick\", float64(pool.Slot0Tick)),\n\t\t\t\"feeProtocol\":          json.NumberNode(\"feeProtocol\", float64(pool.Slot0FeeProtocol)),\n\t\t\t\"unlocked\":             json.BoolNode(\"unlocked\", pool.Slot0Unlocked),\n\t\t\t\"feeGrowthGlobal0X128\": json.StringNode(\"feeGrowthGlobal0X128\", pool.FeeGrowthGlobal0X128),\n\t\t\t\"feeGrowthGlobal1X128\": json.StringNode(\"feeGrowthGlobal1X128\", pool.FeeGrowthGlobal1X128),\n\t\t\t\"token0ProtocolFee\":    json.StringNode(\"token0ProtocolFee\", pool.Token0ProtocolFee),\n\t\t\t\"token1ProtocolFee\":    json.StringNode(\"token1ProtocolFee\", pool.Token1ProtocolFee),\n\t\t\t\"liquidity\":            json.StringNode(\"liquidity\", pool.Liquidity),\n\t\t\t\"ticks\":                json.ObjectNode(\"ticks\", makeTicksJson(pool.Ticks)),\n\t\t\t\"tickBitmaps\":          json.ObjectNode(\"tickBitmaps\", makeRpcTickBitmapsJson(pool.TickBitmaps)),\n\t\t\t\"positions\":            json.ArrayNode(\"positions\", makeRpcPositionsArray(pool.Positions)),\n\t\t})\n\t\tresponses.AppendArray(_poolNode)\n\t}\n\n\tnode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"stat\":     _stat,\n\t\t\"response\": responses,\n\t})\n\n\tb, err := json.Marshal(node)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[POOL] _RPC_api.gno__ApiGetPools() || %s\", err.Error()))\n\t}\n\n\treturn string(b)\n}\n\nfunc ApiGetPool(poolPath string) string {\n\t_, exist := pools[poolPath]\n\tif !exist {\n\t\treturn \"\"\n\t}\n\trpcPool := rpcMakePool(poolPath)\n\n\t// STAT NODE\n\t_stat := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"height\":    json.NumberNode(\"height\", float64(std.GetHeight())),\n\t\t\"timestamp\": json.NumberNode(\"timestamp\", float64(time.Now().Unix())),\n\t})\n\n\t// RESPONSE NODE\n\tresponseNode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"poolPath\":             json.StringNode(\"poolPath\", rpcPool.PoolPath),\n\t\t\"token0Path\":           json.StringNode(\"token0Path\", rpcPool.Token0Path),\n\t\t\"token1Path\":           json.StringNode(\"token1Path\", rpcPool.Token1Path),\n\t\t\"token0Balance\":        json.StringNode(\"token0Balance\", rpcPool.Token0Balance),\n\t\t\"token1Balance\":        json.StringNode(\"token1Balance\", rpcPool.Token1Balance),\n\t\t\"fee\":                  json.NumberNode(\"fee\", float64(rpcPool.Fee)),\n\t\t\"tickSpacing\":          json.NumberNode(\"tickSpacing\", float64(rpcPool.TickSpacing)),\n\t\t\"maxLiquidityPerTick\":  json.StringNode(\"maxLiquidityPerTick\", rpcPool.MaxLiquidityPerTick),\n\t\t\"sqrtPriceX96\":         json.StringNode(\"sqrtPriceX96\", rpcPool.Slot0SqrtPriceX96),\n\t\t\"tick\":                 json.NumberNode(\"tick\", float64(rpcPool.Slot0Tick)),\n\t\t\"feeProtocol\":          json.NumberNode(\"feeProtocol\", float64(rpcPool.Slot0FeeProtocol)),\n\t\t\"unlocked\":             json.BoolNode(\"unlocked\", rpcPool.Slot0Unlocked),\n\t\t\"feeGrowthGlobal0X128\": json.StringNode(\"feeGrowthGlobal0X128\", rpcPool.FeeGrowthGlobal0X128),\n\t\t\"feeGrowthGlobal1X128\": json.StringNode(\"feeGrowthGlobal1X128\", rpcPool.FeeGrowthGlobal1X128),\n\t\t\"token0ProtocolFee\":    json.StringNode(\"token0ProtocolFee\", rpcPool.Token0ProtocolFee),\n\t\t\"token1ProtocolFee\":    json.StringNode(\"token1ProtocolFee\", rpcPool.Token1ProtocolFee),\n\t\t\"liquidity\":            json.StringNode(\"liquidity\", rpcPool.Liquidity),\n\t\t\"ticks\":                json.ObjectNode(\"ticks\", makeTicksJson(rpcPool.Ticks)),\n\t\t\"tickBitmaps\":          json.ObjectNode(\"tickBitmaps\", makeRpcTickBitmapsJson(rpcPool.TickBitmaps)),\n\t\t\"positions\":            json.ArrayNode(\"positions\", makeRpcPositionsArray(rpcPool.Positions)),\n\t})\n\n\tnode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"stat\":     _stat,\n\t\t\"response\": responseNode,\n\t})\n\n\tb, err := json.Marshal(node)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[POOL] _RPC_api.gno__ApiGetPool(%s) || %s\", poolPath, err.Error()))\n\t}\n\n\treturn string(b)\n}\n\nfunc rpcMakePool(poolPath string) RpcPool {\n\trpcPool := RpcPool{}\n\tpool := GetPoolFromPoolPath(poolPath)\n\n\trpcPool.PoolPath = poolPath\n\n\trpcPool.Token0Path = pool.token0Path\n\trpcPool.Token1Path = pool.token1Path\n\n\trpcPool.Token0Balance = pool.balances.token0.ToString()\n\trpcPool.Token1Balance = pool.balances.token1.ToString()\n\n\trpcPool.Fee = pool.fee\n\n\trpcPool.TickSpacing = pool.tickSpacing\n\n\trpcPool.MaxLiquidityPerTick = pool.maxLiquidityPerTick.ToString()\n\n\trpcPool.Slot0SqrtPriceX96 = pool.slot0.sqrtPriceX96.ToString()\n\trpcPool.Slot0Tick = pool.slot0.tick\n\trpcPool.Slot0FeeProtocol = pool.slot0.feeProtocol\n\trpcPool.Slot0Unlocked = pool.slot0.unlocked\n\n\trpcPool.FeeGrowthGlobal0X128 = pool.feeGrowthGlobal0X128.ToString()\n\trpcPool.FeeGrowthGlobal1X128 = pool.feeGrowthGlobal1X128.ToString()\n\n\trpcPool.Token0ProtocolFee = pool.protocolFees.token0.ToString()\n\trpcPool.Token1ProtocolFee = pool.protocolFees.token1.ToString()\n\n\trpcPool.Liquidity = pool.liquidity.ToString()\n\n\trpcPool.Ticks = RpcTicks{}\n\tfor tick, tickInfo := range pool.ticks {\n\t\trpcPool.Ticks[tick] = RpcTickInfo{\n\t\t\tLiquidityGross:              tickInfo.liquidityGross.ToString(),\n\t\t\tLiquidityNet:                tickInfo.liquidityNet.ToString(),\n\t\t\tFeeGrowthOutside0X128:       tickInfo.feeGrowthOutside0X128.ToString(),\n\t\t\tFeeGrowthOutside1X128:       tickInfo.feeGrowthOutside1X128.ToString(),\n\t\t\tTickCumulativeOutside:       tickInfo.tickCumulativeOutside,\n\t\t\tSecondsPerLiquidityOutsideX: tickInfo.secondsPerLiquidityOutsideX128.ToString(),\n\t\t\tSecondsOutside:              tickInfo.secondsOutside,\n\t\t\tInitialized:                 tickInfo.initialized,\n\t\t}\n\t}\n\n\trpcPool.TickBitmaps = RpcTickBitmaps{}\n\tfor tick, tickBitmap := range pool.tickBitmaps {\n\t\trpcPool.TickBitmaps[tick] = tickBitmap.ToString()\n\t}\n\n\tPositions := pool.positions\n\trpcPositions := []RpcPosition{}\n\tfor posKey, posInfo := range Positions {\n\t\towner, tickLower, tickUpper := posKeyDivide(posKey)\n\n\t\trpcPositions = append(rpcPositions, RpcPosition{\n\t\t\tOwner:      owner,\n\t\t\tTickLower:  tickLower,\n\t\t\tTickUpper:  tickUpper,\n\t\t\tLiquidity:  posInfo.liquidity.ToString(),\n\t\t\tToken0Owed: posInfo.tokensOwed0.ToString(),\n\t\t\tToken1Owed: posInfo.tokensOwed1.ToString(),\n\t\t})\n\t}\n\trpcPool.Positions = rpcPositions\n\n\treturn rpcPool\n}\n\nfunc posKeyDivide(posKey string) (string, int32, int32) {\n\t// base64 decode\n\tkDec, _ := b64.StdEncoding.DecodeString(posKey)\n\tposKey = string(kDec)\n\n\tres := strings.Split(posKey, \"__\")\n\tif len(res) != 3 {\n\t\tpanic(ufmt.Sprintf(\"[POOL] _RPC_api.gno__posKeyDivide() || invalid posKey(%s)\", posKey))\n\t}\n\n\towner, _tickLower, _tickUpper := res[0], res[1], res[2]\n\n\ttickLower, _ := strconv.Atoi(_tickLower)\n\ttickUpper, _ := strconv.Atoi(_tickUpper)\n\n\treturn owner, int32(tickLower), int32(tickUpper)\n}\n\nfunc makeTicksJson(ticks RpcTicks) map[string]*json.Node {\n\tticksJson := map[string]*json.Node{}\n\n\tfor tick, tickInfo := range ticks {\n\t\tticksJson[strconv.Itoa(int(tick))] = json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"liquidityGross\":              json.StringNode(\"liquidityGross\", tickInfo.LiquidityGross),\n\t\t\t\"liquidityNet\":                json.StringNode(\"liquidityNet\", tickInfo.LiquidityNet),\n\t\t\t\"feeGrowthOutside0X128\":       json.StringNode(\"feeGrowthOutside0X128\", tickInfo.FeeGrowthOutside0X128),\n\t\t\t\"feeGrowthOutside1X128\":       json.StringNode(\"feeGrowthOutside1X128\", tickInfo.FeeGrowthOutside1X128),\n\t\t\t\"tickCumulativeOutside\":       json.NumberNode(\"tickCumulativeOutside\", float64(tickInfo.TickCumulativeOutside)),\n\t\t\t\"secondsPerLiquidityOutsideX\": json.StringNode(\"secondsPerLiquidityOutsideX\", tickInfo.SecondsPerLiquidityOutsideX),\n\t\t\t\"secondsOutside\":              json.NumberNode(\"secondsOutside\", float64(tickInfo.SecondsOutside)),\n\t\t\t\"initialized\":                 json.BoolNode(\"initialized\", tickInfo.Initialized),\n\t\t})\n\t}\n\n\treturn ticksJson\n}\n\nfunc makeRpcTickBitmapsJson(tickBitmaps RpcTickBitmaps) map[string]*json.Node {\n\ttickBitmapsJson := map[string]*json.Node{}\n\n\tfor tick, tickBitmap := range tickBitmaps {\n\t\ttickBitmapsJson[strconv.Itoa(int(tick))] = json.StringNode(\"\", tickBitmap)\n\t}\n\n\treturn tickBitmapsJson\n}\n\nfunc makeRpcPositionsArray(positions []RpcPosition) []*json.Node {\n\tpositionsJson := make([]*json.Node, len(positions))\n\n\tfor i, pos := range positions {\n\t\tpositionsJson[i] = json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"owner\":      json.StringNode(\"owner\", pos.Owner),\n\t\t\t\"tickLower\":  json.NumberNode(\"tickLower\", float64(pos.TickLower)),\n\t\t\t\"tickUpper\":  json.NumberNode(\"tickUpper\", float64(pos.TickUpper)),\n\t\t\t\"liquidity\":  json.StringNode(\"liquidity\", pos.Liquidity),\n\t\t\t\"token0Owed\": json.StringNode(\"token0Owed\", pos.Token0Owed),\n\t\t\t\"token1Owed\": json.StringNode(\"token1Owed\", pos.Token1Owed),\n\t\t})\n\t}\n\n\treturn positionsJson\n}\n"},{"name":"_RPC_dry.gno","body":"package pool\n\nimport (\n\t\"gno.land/r/gnoswap/common\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\n\tplp \"gno.land/p/gnoswap/pool\" // pool package\n\n\ti256 \"gno.land/p/gnoswap/int256\"\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\n// DrySwap simulates a swap and returns the amount0, amount1 that would be received and a boolean indicating if the swap is possible\nfunc DrySwap(\n\ttoken0Path string,\n\ttoken1Path string,\n\tfee uint32,\n\tzeroForOne bool,\n\t_amountSpecified string,\n\t_sqrtPriceLimitX96 string,\n) (string, string, bool) {\n\n\tif _amountSpecified == \"0\" {\n\t\treturn \"0\", \"0\", false\n\t}\n\n\tamountSpecified := i256.MustFromDecimal(_amountSpecified)\n\tsqrtPriceLimitX96 := u256.MustFromDecimal(_sqrtPriceLimitX96)\n\n\tpool := GetPool(token0Path, token1Path, fee)\n\tslot0Start := pool.slot0\n\n\tvar feeProtocol uint8\n\tvar feeGrowthGlobalX128 *u256.Uint\n\n\tif zeroForOne {\n\t\tminSqrtRatio := u256.MustFromDecimal(consts.MIN_SQRT_RATIO)\n\n\t\tcond1 := sqrtPriceLimitX96.Lt(slot0Start.sqrtPriceX96)\n\t\tcond2 := sqrtPriceLimitX96.Gt(minSqrtRatio)\n\t\tif !(cond1 \u0026\u0026 cond2) {\n\t\t\treturn \"0\", \"0\", false\n\t\t}\n\n\t\tfeeProtocol = slot0Start.feeProtocol % 16\n\t\tfeeGrowthGlobalX128 = pool.feeGrowthGlobal0X128\n\t} else {\n\t\tmaxSqrtRatio := u256.MustFromDecimal(consts.MAX_SQRT_RATIO)\n\n\t\tcond1 := sqrtPriceLimitX96.Gt(slot0Start.sqrtPriceX96)\n\t\tcond2 := sqrtPriceLimitX96.Lt(maxSqrtRatio)\n\t\tif !(cond1 \u0026\u0026 cond2) {\n\t\t\treturn \"0\", \"0\", false\n\t\t}\n\n\t\tfeeProtocol = slot0Start.feeProtocol / 16\n\t\tfeeGrowthGlobalX128 = pool.feeGrowthGlobal1X128\n\t}\n\n\tpool.slot0.unlocked = false\n\tcache := newSwapCache(feeProtocol, pool.liquidity)\n\tstate := pool.newSwapState(amountSpecified, feeGrowthGlobalX128, cache.liquidityStart) // TODO: feeGrowthGlobalX128.Clone() or NOT\n\n\texactInput := amountSpecified.Gt(i256.Zero())\n\n\t// continue swapping as long as we haven't used the entire input/output and haven't reached the price limit\n\tfor !(state.amountSpecifiedRemaining.IsZero()) \u0026\u0026 !(state.sqrtPriceX96.Eq(sqrtPriceLimitX96)) {\n\t\tvar step StepComputations\n\t\tstep.sqrtPriceStartX96 = state.sqrtPriceX96\n\n\t\tstep.tickNext, step.initialized = pool.tickBitmapNextInitializedTickWithInOneWord(\n\t\t\tstate.tick,\n\t\t\tpool.tickSpacing,\n\t\t\tzeroForOne,\n\t\t)\n\n\t\t// ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\n\t\tif step.tickNext \u003c consts.MIN_TICK {\n\t\t\tstep.tickNext = consts.MIN_TICK\n\t\t} else if step.tickNext \u003e consts.MAX_TICK {\n\t\t\tstep.tickNext = consts.MAX_TICK\n\t\t}\n\n\t\t// get the price for the next tick\n\t\tstep.sqrtPriceNextX96 = common.TickMathGetSqrtRatioAtTick(step.tickNext)\n\n\t\tisLower := step.sqrtPriceNextX96.Lt(sqrtPriceLimitX96)\n\t\tisHigher := step.sqrtPriceNextX96.Gt(sqrtPriceLimitX96)\n\n\t\tvar sqrtRatioTargetX96 *u256.Uint\n\t\tif (zeroForOne \u0026\u0026 isLower) || (!zeroForOne \u0026\u0026 isHigher) {\n\t\t\tsqrtRatioTargetX96 = sqrtPriceLimitX96\n\t\t} else {\n\t\t\tsqrtRatioTargetX96 = step.sqrtPriceNextX96\n\t\t}\n\n\t\t_sqrtPriceX96Str, _amountInStr, _amountOutStr, _feeAmountStr := plp.SwapMathComputeSwapStepStr(\n\t\t\tstate.sqrtPriceX96,\n\t\t\tsqrtRatioTargetX96,\n\t\t\tstate.liquidity,\n\t\t\tstate.amountSpecifiedRemaining,\n\t\t\tuint64(pool.fee),\n\t\t)\n\t\tstate.sqrtPriceX96 = u256.MustFromDecimal(_sqrtPriceX96Str)\n\t\tstep.amountIn = u256.MustFromDecimal(_amountInStr)\n\t\tstep.amountOut = u256.MustFromDecimal(_amountOutStr)\n\t\tstep.feeAmount = u256.MustFromDecimal(_feeAmountStr)\n\n\t\tamountInWithFee := i256.FromUint256(new(u256.Uint).Add(step.amountIn, step.feeAmount))\n\t\tif exactInput {\n\t\t\tstate.amountSpecifiedRemaining = i256.Zero().Sub(state.amountSpecifiedRemaining, amountInWithFee)\n\t\t\tstate.amountCalculated = i256.Zero().Sub(state.amountCalculated, i256.FromUint256(step.amountOut))\n\t\t} else {\n\t\t\tstate.amountSpecifiedRemaining = i256.Zero().Add(state.amountSpecifiedRemaining, i256.FromUint256(step.amountOut))\n\t\t\tstate.amountCalculated = i256.Zero().Add(state.amountCalculated, amountInWithFee)\n\t\t}\n\n\t\t// if the protocol fee is on, calculate how much is owed, decrement feeAmount, and increment protocolFee\n\t\tif cache.feeProtocol \u003e 0 {\n\t\t\tdelta := new(u256.Uint).Div(step.feeAmount, u256.NewUint(uint64(cache.feeProtocol)))\n\t\t\tstep.feeAmount = new(u256.Uint).Sub(step.feeAmount, delta)\n\t\t\tstate.protocolFee = new(u256.Uint).Add(state.protocolFee, delta)\n\t\t}\n\n\t\t// update global fee tracker\n\t\tif state.liquidity.Gt(u256.Zero()) {\n\t\t\t// OBS if `DrySwap()` update its state, next ACTUAL `Swap()` gets affect\n\n\t\t\t// value1 := new(u256.Uint).Mul(step.feeAmount, u256.MustFromDecimal(consts.Q128))\n\t\t\t// value2 := new(u256.Uint).Div(value1, state.liquidity)\n\n\t\t\t// state.feeGrowthGlobalX128 = new(u256.Uint).Add(state.feeGrowthGlobalX128, value2)\n\t\t}\n\n\t\t// shift tick if we reached the next price\n\t\tif state.sqrtPriceX96.Eq(step.sqrtPriceNextX96) {\n\t\t\t// if the tick is initialized, run the tick transition\n\t\t\tif step.initialized {\n\t\t\t\tvar fee0, fee1 *u256.Uint\n\n\t\t\t\t// check for the placeholder value, which we replace with the actual value the first time the swap crosses an initialized tick\n\t\t\t\tif zeroForOne {\n\t\t\t\t\tfee0 = state.feeGrowthGlobalX128\n\t\t\t\t\tfee1 = pool.feeGrowthGlobal1X128\n\t\t\t\t} else {\n\t\t\t\t\tfee0 = pool.feeGrowthGlobal0X128\n\t\t\t\t\tfee1 = state.feeGrowthGlobalX128\n\t\t\t\t}\n\n\t\t\t\tliquidityNet := pool.tickCross(\n\t\t\t\t\tstep.tickNext,\n\t\t\t\t\tfee0,\n\t\t\t\t\tfee1,\n\t\t\t\t)\n\n\t\t\t\t// if we're moving leftward, we interpret liquidityNet as the opposite sign\n\t\t\t\tif zeroForOne {\n\t\t\t\t\tliquidityNet = i256.Zero().Neg(liquidityNet)\n\t\t\t\t}\n\n\t\t\t\tstate.liquidity = liquidityMathAddDelta(state.liquidity, liquidityNet)\n\t\t\t}\n\n\t\t\tif zeroForOne {\n\t\t\t\tstate.tick = step.tickNext - 1\n\t\t\t} else {\n\t\t\t\tstate.tick = step.tickNext\n\t\t\t}\n\t\t} else if !(state.sqrtPriceX96.Eq(step.sqrtPriceStartX96)) {\n\t\t\t// recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\n\t\t\tstate.tick = common.TickMathGetTickAtSqrtRatio(state.sqrtPriceX96)\n\t\t}\n\t}\n\t// END LOOP\n\n\tvar amount0, amount1 *i256.Int\n\tif zeroForOne == exactInput {\n\t\tamount0 = i256.Zero().Sub(amountSpecified, state.amountSpecifiedRemaining)\n\t\tamount1 = state.amountCalculated\n\t} else {\n\t\tamount0 = state.amountCalculated\n\t\tamount1 = i256.Zero().Sub(amountSpecified, state.amountSpecifiedRemaining)\n\t}\n\n\tpool.slot0.unlocked = true\n\n\tif zeroForOne {\n\t\tif pool.balances.token1.Lt(amount1.Abs()) {\n\t\t\t// NOT ENOUGH BALANCE for output token1\n\t\t\treturn \"0\", \"0\", false\n\t\t}\n\t} else {\n\t\tif pool.balances.token0.Lt(amount0.Abs()) {\n\t\t\t// NOT ENOUGH BALANCE for output token0\n\t\t\treturn \"0\", \"0\", false\n\t\t}\n\t}\n\n\t// JUST NOT ENOUGH BALANCE\n\tif amount0.IsZero() || amount1.IsZero() {\n\t\treturn \"0\", \"0\", false\n\t}\n\n\treturn amount0.ToString(), amount1.ToString(), true\n}\n"},{"name":"__TEST_0_INIT_TOKEN_REGISTER_test.gno","body":"package pool\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n\n\t\"gno.land/r/onbloc/foo\"\n\n\t\"gno.land/r/onbloc/bar\"\n\n\t\"gno.land/r/onbloc/baz\"\n\n\t\"gno.land/r/onbloc/qux\"\n\n\t\"gno.land/r/demo/wugnot\"\n\n\t\"gno.land/r/onbloc/obl\"\n\n\t\"gno.land/r/gnoswap/gns\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\n\tpusers \"gno.land/p/demo/users\"\n)\n\ntype FooToken struct{}\n\nfunc (FooToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn foo.Transfer\n}\nfunc (FooToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn foo.TransferFrom\n}\nfunc (FooToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn foo.BalanceOf\n}\nfunc (FooToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn foo.Approve\n}\n\ntype BarToken struct{}\n\nfunc (BarToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn bar.Transfer\n}\nfunc (BarToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn bar.TransferFrom\n}\nfunc (BarToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn bar.BalanceOf\n}\nfunc (BarToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn bar.Approve\n}\n\ntype BazToken struct{}\n\nfunc (BazToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn baz.Transfer\n}\nfunc (BazToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn baz.TransferFrom\n}\nfunc (BazToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn baz.BalanceOf\n}\nfunc (BazToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn baz.Approve\n}\n\ntype QuxToken struct{}\n\nfunc (QuxToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn qux.Transfer\n}\nfunc (QuxToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn qux.TransferFrom\n}\nfunc (QuxToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn qux.BalanceOf\n}\nfunc (QuxToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn qux.Approve\n}\n\ntype WugnotToken struct{}\n\nfunc (WugnotToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn wugnot.Transfer\n}\nfunc (WugnotToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn wugnot.TransferFrom\n}\nfunc (WugnotToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn wugnot.BalanceOf\n}\nfunc (WugnotToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn wugnot.Approve\n}\n\ntype OBLToken struct{}\n\nfunc (OBLToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn obl.Transfer\n}\nfunc (OBLToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn obl.TransferFrom\n}\nfunc (OBLToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn obl.BalanceOf\n}\nfunc (OBLToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn obl.Approve\n}\n\ntype GNSToken struct{}\n\nfunc (GNSToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn gns.Transfer\n}\n\nfunc (GNSToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn gns.TransferFrom\n}\n\nfunc (GNSToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn gns.BalanceOf\n}\n\nfunc (GNSToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn gns.Approve\n}\n\nfunc init() {\n\tstd.TestSetOrigCaller(consts.TOKEN_REGISTER)\n\n\tRegisterGRC20Interface(\"gno.land/r/onbloc/bar\", BarToken{})\n\tRegisterGRC20Interface(\"gno.land/r/onbloc/foo\", FooToken{})\n\tRegisterGRC20Interface(\"gno.land/r/onbloc/baz\", BazToken{})\n\tRegisterGRC20Interface(\"gno.land/r/onbloc/qux\", QuxToken{})\n\tRegisterGRC20Interface(\"gno.land/r/demo/wugnot\", WugnotToken{})\n\tRegisterGRC20Interface(\"gno.land/r/onbloc/obl\", OBLToken{})\n\tRegisterGRC20Interface(\"gno.land/r/gnoswap/gns\", GNSToken{})\n}\n\nfunc TestGetRegisteredTokens(t *testing.T) {\n\tshouldEQ(t, len(GetRegisteredTokens()), 7)\n}\n\nfunc TestRegisterGRC20Interface(t *testing.T) {\n\tshouldPanic(t,\n\t\tfunc() {\n\t\t\tRegisterGRC20Interface(\"gno.land/r/onbloc/bar\", BarToken{})\n\t\t},\n\t)\n}\n\nfunc TestUnregisterGRC20Interface(t *testing.T) {\n\tdummy := testutils.TestAddress(\"dummy\")\n\tstd.TestSetOrigCaller(dummy)\n\n\tshouldPanic(t,\n\t\tfunc() {\n\t\t\tUnregisterGRC20Interface(\"gno.land/r/onbloc/bar\")\n\t\t},\n\t)\n\n\tshouldEQ(t, len(GetRegisteredTokens()), 7)\n\n\tstd.TestSetOrigCaller(consts.TOKEN_REGISTER)\n\tUnregisterGRC20Interface(\"gno.land/r/onbloc/bar\")\n\tshouldEQ(t, len(GetRegisteredTokens()), 6)\n\n\t// re-register to avoid panic in other tests\n\tRegisterGRC20Interface(\"gno.land/r/onbloc/bar\", BarToken{})\n\n\tstd.TestSetOrigCaller(gsa)\n}\n"},{"name":"__TEST_0_INIT_VARIABLE_AND_HELPER_test.gno","body":"package pool\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/r/gnoswap/consts\"\n)\n\nvar (\n\tgsa std.Address = consts.GNOSWAP_ADMIN\n\n\tfooPath string = \"gno.land/r/onbloc/foo\"\n\tbarPath string = \"gno.land/r/onbloc/bar\"\n\tbazPath string = \"gno.land/r/onbloc/baz\"\n\tquxPath string = \"gno.land/r/onbloc/qux\"\n\n\toblPath string = \"gno.land/r/onbloc/obl\"\n\t// wugnotPath string = \"gno.land/r/demo/wugnot\" // from consts\n\t// gnsPath string = \"gno.land/r/gnoswap/gns\" // from consts\n\n\tfee100  uint32 = 100\n\tfee500  uint32 = 500\n\tfee3000 uint32 = 3000\n\n\tmaxApprove uint64 = 18446744073709551615\n)\n\n// Realms to mock frames\nvar (\n\tgsaRealm = std.NewUserRealm(gsa)\n\tposRealm = std.NewCodeRealm(consts.POSITION_PATH)\n\trouRealm = std.NewCodeRealm(consts.ROUTER_PATH)\n)\n\n/* HELPER */\nfunc shouldEQ(t *testing.T, got, expected interface{}) {\n\tif got != expected {\n\t\tt.Errorf(\"got %v, expected %v\", got, expected)\n\t}\n}\n\nfunc shouldNEQ(t *testing.T, got, expected interface{}) {\n\tif got == expected {\n\t\tt.Errorf(\"got %v, didn't expected %v\", got, expected)\n\t}\n}\n\nfunc shouldPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"expected panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc shouldPanicWithMsg(t *testing.T, f func(), msg string) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t} else {\n\t\t\tif r != msg {\n\t\t\t\tt.Errorf(\"excepted panic(%v), got(%v)\", msg, r)\n\t\t\t}\n\t\t}\n\t}()\n\tf()\n}\n\nfunc ugnotBalanceOf(addr std.Address) uint64 {\n\ttestBanker := std.GetBanker(std.BankerTypeRealmIssue)\n\n\tcoins := testBanker.GetCoins(addr)\n\tif len(coins) == 0 {\n\t\treturn 0\n\t}\n\n\treturn uint64(coins.AmountOf(\"ugnot\"))\n}\n"},{"name":"emergency_halt.gno","body":"package pool\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/gnoswap/consts\"\n)\n\nvar (\n\t// flagHalt is set to true when the emergency halt proposal is passed\n\t// when this flag is set to true, all public functions in this package will panic\n\tflagHalt bool\n)\n\nfunc init() {\n\tflagHalt = false\n}\n\nfunc assertCalledByGovRealm() {\n\tif std.PrevRealm().PkgPath() != consts.GOV_PATH {\n\t\tpanic(ufmt.Sprintf(\"[POOL] emergency_halt.gno__assertCalledByGovRealm() || only gov(%s) can call, but called from(%s)\", consts.GOV_PATH, std.PrevRealm().PkgPath()))\n\t}\n}\n\nfunc halt() {\n\tassertCalledByGovRealm()\n\tflagHalt = true\n}\n\nfunc assertNotHalt() {\n\tif flagHalt {\n\t\tpanic(\"[POOL] emergency_halt.gno__assertNotHalt() || emergency halt\")\n\t}\n}\n"},{"name":"gno.mod","body":"module gno.land/r/gnoswap/pool\n\nrequire (\n\tgno.land/p/gnoswap/int256 v0.0.0-latest\n\tgno.land/p/gnoswap/pool v0.0.0-latest\n\tgno.land/p/gnoswap/uint256 v0.0.0-latest\n\tgno.land/p/demo/json v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n\tgno.land/p/demo/users v0.0.0-latest\n\tgno.land/r/gnoswap/gns v0.0.0-latest\n\tgno.land/r/gnoswap/gov v0.0.0-latest\n\tgno.land/r/gnoswap/common v0.0.0-latest\n\tgno.land/r/gnoswap/consts v0.0.0-latest\n)\n"},{"name":"liquidity_math.gno","body":"package pool\n\nimport (\n\ti256 \"gno.land/p/gnoswap/int256\"\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\nfunc liquidityMathAddDelta(x *u256.Uint, y *i256.Int) *u256.Uint {\n\tif y.Lt(i256.Zero()) {\n\t\tz := new(u256.Uint).Sub(x, y.Abs())\n\n\t\tif !(z.Lt(x)) {\n\t\t\tpanic(\"LS\")\n\t\t}\n\t\treturn z // z \u003c x\n\t} else {\n\t\tz := new(u256.Uint).Add(x, y.Abs())\n\n\t\tif !(z.Gte(x)) {\n\t\t\tpanic(\"LA\")\n\t\t}\n\t\treturn z // z \u003e= x\n\t}\n}\n"},{"name":"pool.gno","body":"package pool\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/ufmt\"\n\n\tplp \"gno.land/p/gnoswap/pool\"\n\n\t\"gno.land/r/gnoswap/common\"\n\t\"gno.land/r/gnoswap/consts\"\n\n\ti256 \"gno.land/p/gnoswap/int256\"\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\n// Mint creates a new position and mints liquidity tokens then return amount0, amount1 in string\n//\n// Panics if any of the following conditions are met:\n// - The caller is user\n// - Caller does not have enough token0 or token1\nfunc Mint(\n\ttoken0Path string,\n\ttoken1Path string,\n\tfee uint32,\n\trecipient string,\n\ttickLower int32,\n\ttickUpper int32,\n\t_liquidityAmount string, // uint128\n) (string, string) { // uint256 x2\n\tcommon.DisallowCallFromUser()\n\tcommon.AllowCallFromOnly(consts.POSITION_PATH)\n\n\tliquidityAmount := u256.MustFromDecimal(_liquidityAmount)\n\n\tpool := GetPool(token0Path, token1Path, fee)\n\t_, amount0, amount1 := pool.modifyPosition( // int256 x2\n\t\tModifyPositionParams{\n\t\t\tstd.Address(recipient),            // owner\n\t\t\ttickLower,                         // tickLower\n\t\t\ttickUpper,                         // tickUpper\n\t\t\ti256.FromUint256(liquidityAmount), // liquidityDelta\n\t\t},\n\t)\n\n\tif amount0.Gt(i256.Zero()) {\n\t\tpool.transferFromAndVerify(std.GetOrigCaller(), consts.POOL_ADDR, pool.token0Path, amount0, true)\n\t}\n\n\tif amount1.Gt(i256.Zero()) {\n\t\tpool.transferFromAndVerify(std.GetOrigCaller(), consts.POOL_ADDR, pool.token1Path, amount1, false)\n\t}\n\n\t/*\n\t\tstd.Emit(\n\t\t\t\"GNOSWAP\",\n\t\t\t\"m_callType\", callType(),\n\t\t\t\"m_origCaller\", origCaller(),\n\t\t\t\"m_prevRealm\", prevRealm(),\n\t\t\t\"p_poolPath\", GetPoolPath(token0Path, token1Path, fee),\n\t\t\t\"p_tickLower\", int32ToStr(tickLower),\n\t\t\t\"p_tickUpper\", int32ToStr(tickUpper),\n\t\t\t\"p_liquidityAmount\", _liquidityAmount,\n\t\t\t\"amount0\", amount0.ToString(),\n\t\t\t\"amount1\", amount1.ToString(),\n\t\t)\n\t*/\n\n\treturn amount0.ToString(), amount1.ToString()\n}\n\n// Burn removes liquidity from the caller and account tokens owed for the liquidity to the position\n// If liquidity of 0 is burned, it recalculates fees owed to a position\n//\n// Panics if any of the following conditions are met:\n// - The caller is not the position contract\nfunc Burn(\n\ttoken0Path string,\n\ttoken1Path string,\n\tfee uint32,\n\ttickLower int32,\n\ttickUpper int32,\n\t_liquidityAmount string, // uint128\n) (string, string) { // uint256 x2\n\tcommon.DisallowCallFromUser()\n\tcommon.AllowCallFromOnly(consts.POSITION_PATH)\n\n\tliquidityAmount := u256.MustFromDecimal(_liquidityAmount)\n\n\tpool := GetPool(token0Path, token1Path, fee)\n\n\tposition, amount0Int, amount1Int := pool.modifyPosition( // in256 x2\n\t\tModifyPositionParams{\n\t\t\tstd.PrevRealm().Addr(), // msg.sender\n\t\t\ttickLower,\n\t\t\ttickUpper,\n\t\t\ti256.Zero().Neg(i256.FromUint256(liquidityAmount)),\n\t\t},\n\t)\n\n\tamount0 := amount0Int.Abs()\n\tamount1 := amount1Int.Abs()\n\n\tif amount0.Gt(u256.Zero()) || amount1.Gt(u256.Zero()) {\n\t\tposition.tokensOwed0 = new(u256.Uint).Add(position.tokensOwed0, amount0)\n\t\tposition.tokensOwed1 = new(u256.Uint).Add(position.tokensOwed1, amount1)\n\t}\n\n\tpositionKey := positionGetKey(std.PrevRealm().Addr(), tickLower, tickUpper)\n\tpool.positions[positionKey] = position\n\n\t/*\n\t\tstd.Emit(\n\t\t\t\"GNOSWAP\",\n\t\t\t\"m_callType\", callType(),\n\t\t\t\"m_origCaller\", origCaller(),\n\t\t\t\"m_prevRealm\", prevRealm(),\n\t\t\t\"p_poolPath\", GetPoolPath(token0Path, token1Path, fee),\n\t\t\t\"p_tickLower\", int32ToStr(tickLower),\n\t\t\t\"p_tickUpper\", int32ToStr(tickUpper),\n\t\t\t\"p_liquidityAmount\", _liquidityAmount,\n\t\t\t\"amount0\", amount0.ToString(),\n\t\t\t\"amount1\", amount1.ToString(),\n\t\t)\n\t*/\n\n\t// actual token transfer happens in Collect()\n\treturn amount0.ToString(), amount1.ToString()\n}\n\n// Collect collects tokens owed to a position\n//\n// Panics if any of the following conditions are met:\n// - The caller is not the position contract\n// - The position does not exist\nfunc Collect(\n\ttoken0Path string,\n\ttoken1Path string,\n\tfee uint32,\n\t_recipient string,\n\ttickLower int32,\n\ttickUpper int32,\n\t_amount0Requested string, // uint128\n\t_amount1Requested string, // uint128\n) (string, string) { // uint128 x2\n\tcommon.DisallowCallFromUser()\n\tcommon.AllowCallFromOnly(consts.POSITION_PATH)\n\n\tamount0Requested := u256.MustFromDecimal(_amount0Requested)\n\tamount1Requested := u256.MustFromDecimal(_amount1Requested)\n\n\trecipient := std.Address(_recipient)\n\n\tpool := GetPool(token0Path, token1Path, fee)\n\n\tpositionKey := positionGetKey(std.PrevRealm().Addr(), tickLower, tickUpper)\n\tposition, exist := pool.positions[positionKey]\n\tif !exist {\n\t\tpanic(ufmt.Sprintf(\"[POOL] pool.gno__Collect() || positionKey(%s) does not exist\", positionKey))\n\t}\n\n\t// Smallest of three: amount0Requested, position.tokensOwed0, pool.balances.token0\n\tamount0 := u256Min(amount0Requested, position.tokensOwed0)\n\tamount0 = u256Min(amount0, pool.balances.token0)\n\n\t// Update state first then transfer\n\tposition.tokensOwed0 = new(u256.Uint).Sub(position.tokensOwed0, amount0)\n\tpool.balances.token0 = new(u256.Uint).Sub(pool.balances.token0, amount0)\n\ttransferByRegisterCall(pool.token0Path, recipient, amount0.Uint64())\n\n\t// Smallest of three: amount0Requested, position.tokensOwed0, pool.balances.token0\n\tamount1 := u256Min(amount1Requested, position.tokensOwed1)\n\tamount1 = u256Min(amount1, pool.balances.token1)\n\n\t// Update state first then transfer\n\tposition.tokensOwed1 = new(u256.Uint).Sub(position.tokensOwed1, amount1)\n\tpool.balances.token1 = new(u256.Uint).Sub(pool.balances.token1, amount1)\n\ttransferByRegisterCall(pool.token1Path, recipient, amount1.Uint64())\n\n\tpool.positions[positionKey] = position\n\n\t/*\n\t\tstd.Emit(\n\t\t\t\"GNOSWAP\",\n\t\t\t\"m_callType\", callType(),\n\t\t\t\"m_origCaller\", origCaller(),\n\t\t\t\"m_prevRealm\", prevRealm(),\n\t\t\t\"p_poolPath\", GetPoolPath(token0Path, token1Path, fee),\n\t\t\t\"p_tickLower\", int32ToStr(tickLower),\n\t\t\t\"p_tickUpper\", int32ToStr(tickUpper),\n\t\t\t\"p_recipient\", _recipient,\n\t\t\t\"amount0\", amount0.ToString(),\n\t\t\t\"amount1\", amount1.ToString(),\n\t\t)\n\t*/\n\n\treturn amount0.ToString(), amount1.ToString()\n}\n\n// Swap swaps token0 for token1, or token1 for token0\n//\n// Panics if any of the following conditions are met:\n// - The caller is not the router contract\n// - Target pool is being used by another transaction\n// - The amountSpecified is 0\n// - The SqrtPriceLimit is not within the range\nfunc Swap(\n\ttoken0Path string,\n\ttoken1Path string,\n\tfee uint32,\n\t_recipient string,\n\tzeroForOne bool,\n\t_amountSpecified string, // int256\n\t_sqrtPriceLimitX96 string, // uint160\n\t_payer string, // router\n) (string, string) { // int256 x2\n\tcommon.DisallowCallFromUser()\n\tcommon.AllowCallFromOnly(consts.ROUTER_PATH)\n\n\tif _amountSpecified == \"0\" {\n\t\tpanic(\"[POOL] pool.gno__Swap() || _amountSpecified == 0\")\n\t}\n\n\tamountSpecified := i256.MustFromDecimal(_amountSpecified)\n\tsqrtPriceLimitX96 := u256.MustFromDecimal(_sqrtPriceLimitX96)\n\n\trecipient := std.Address(_recipient)\n\tpayer := std.Address(_payer)\n\n\tpool := GetPool(token0Path, token1Path, fee)\n\tslot0Start := pool.slot0\n\n\tif !(slot0Start.unlocked) {\n\t\tpanic(\"[POOL] pool.gno__Swap() || slot0Start.unlocked must be unlocked(true)\")\n\t}\n\n\tvar feeProtocol uint8\n\tvar feeGrowthGlobalX128 *u256.Uint\n\n\tif zeroForOne {\n\t\tminSqrtRatio := u256.MustFromDecimal(consts.MIN_SQRT_RATIO)\n\n\t\tcond1 := sqrtPriceLimitX96.Lt(slot0Start.sqrtPriceX96)\n\t\tcond2 := sqrtPriceLimitX96.Gt(minSqrtRatio)\n\t\tif !(cond1 \u0026\u0026 cond2) {\n\t\t\tpanic(ufmt.Sprintf(\"[POOL] pool.gno__Swap() || sqrtPriceLimitX96(%s) \u003c slot0Start.sqrtPriceX96(%s) \u0026\u0026 sqrtPriceLimitX96(%s) \u003e consts.MIN_SQRT_RATIO(%s)\", sqrtPriceLimitX96.ToString(), slot0Start.sqrtPriceX96.ToString(), sqrtPriceLimitX96.ToString(), consts.MIN_SQRT_RATIO))\n\t\t}\n\t\tfeeProtocol = slot0Start.feeProtocol % 16\n\t\tfeeGrowthGlobalX128 = pool.feeGrowthGlobal0X128\n\n\t} else {\n\t\tmaxSqrtRatio := u256.MustFromDecimal(consts.MAX_SQRT_RATIO)\n\n\t\tcond1 := sqrtPriceLimitX96.Gt(slot0Start.sqrtPriceX96)\n\t\tcond2 := sqrtPriceLimitX96.Lt(maxSqrtRatio)\n\t\tif !(cond1 \u0026\u0026 cond2) {\n\t\t\tpanic(ufmt.Sprintf(\"[POOL] pool.gno__Swap() || sqrtPriceLimitX96(%s) \u003e slot0Start.sqrtPriceX96(%s) \u0026\u0026 sqrtPriceLimitX96(%s) \u003c consts.MAX_SQRT_RATIO(%s)\", sqrtPriceLimitX96.ToString(), slot0Start.sqrtPriceX96.ToString(), sqrtPriceLimitX96.ToString(), consts.MAX_SQRT_RATIO))\n\t\t}\n\n\t\tfeeProtocol = slot0Start.feeProtocol / 16\n\t\tfeeGrowthGlobalX128 = pool.feeGrowthGlobal1X128\n\t}\n\n\tpool.slot0.unlocked = false\n\tcache := newSwapCache(feeProtocol, pool.liquidity)\n\tstate := pool.newSwapState(amountSpecified, feeGrowthGlobalX128, cache.liquidityStart)\n\n\texactInput := amountSpecified.Gt(i256.Zero())\n\n\t// continue swapping as long as we haven't used the entire input/output and haven't reached the price limit\n\tswapFee := u256.Zero()\n\tfor !(state.amountSpecifiedRemaining.IsZero()) \u0026\u0026 !(state.sqrtPriceX96.Eq(sqrtPriceLimitX96)) {\n\t\tvar step StepComputations\n\t\tstep.sqrtPriceStartX96 = state.sqrtPriceX96\n\n\t\tstep.tickNext, step.initialized = pool.tickBitmapNextInitializedTickWithInOneWord(\n\t\t\tstate.tick,\n\t\t\tpool.tickSpacing,\n\t\t\tzeroForOne,\n\t\t)\n\n\t\t// ensure that we do not overshoot the min/max tick, as the tick bitmap is not aware of these bounds\n\t\tif step.tickNext \u003c consts.MIN_TICK {\n\t\t\tstep.tickNext = consts.MIN_TICK\n\t\t} else if step.tickNext \u003e consts.MAX_TICK {\n\t\t\tstep.tickNext = consts.MAX_TICK\n\t\t}\n\n\t\t// get the price for the next tick\n\t\tstep.sqrtPriceNextX96 = common.TickMathGetSqrtRatioAtTick(step.tickNext)\n\n\t\tisLower := step.sqrtPriceNextX96.Lt(sqrtPriceLimitX96)\n\t\tisHigher := step.sqrtPriceNextX96.Gt(sqrtPriceLimitX96)\n\n\t\tvar sqrtRatioTargetX96 *u256.Uint\n\t\tif (zeroForOne \u0026\u0026 isLower) || (!zeroForOne \u0026\u0026 isHigher) {\n\t\t\tsqrtRatioTargetX96 = sqrtPriceLimitX96\n\t\t} else {\n\t\t\tsqrtRatioTargetX96 = step.sqrtPriceNextX96\n\t\t}\n\n\t\t_sqrtPriceX96Str, _amountInStr, _amountOutStr, _feeAmountStr := plp.SwapMathComputeSwapStepStr(\n\t\t\tstate.sqrtPriceX96,\n\t\t\tsqrtRatioTargetX96,\n\t\t\tstate.liquidity,\n\t\t\tstate.amountSpecifiedRemaining,\n\t\t\tuint64(pool.fee),\n\t\t)\n\t\tstate.sqrtPriceX96 = u256.MustFromDecimal(_sqrtPriceX96Str)\n\t\tstep.amountIn = u256.MustFromDecimal(_amountInStr)\n\t\tstep.amountOut = u256.MustFromDecimal(_amountOutStr)\n\t\tstep.feeAmount = u256.MustFromDecimal(_feeAmountStr)\n\n\t\tamountInWithFee := i256.FromUint256(new(u256.Uint).Add(step.amountIn, step.feeAmount))\n\t\tif exactInput {\n\t\t\tstate.amountSpecifiedRemaining = i256.Zero().Sub(state.amountSpecifiedRemaining, amountInWithFee)\n\t\t\tstate.amountCalculated = i256.Zero().Sub(state.amountCalculated, i256.FromUint256(step.amountOut))\n\t\t} else {\n\t\t\tstate.amountSpecifiedRemaining = i256.Zero().Add(state.amountSpecifiedRemaining, i256.FromUint256(step.amountOut))\n\t\t\tstate.amountCalculated = i256.Zero().Add(state.amountCalculated, amountInWithFee)\n\t\t}\n\n\t\t// if the protocol fee is on, calculate how much is owed, decrement feeAmount, and increment protocolFee\n\t\tif cache.feeProtocol \u003e 0 {\n\t\t\tdelta := new(u256.Uint).Div(step.feeAmount, u256.NewUint(uint64(cache.feeProtocol)))\n\t\t\tstep.feeAmount = new(u256.Uint).Sub(step.feeAmount, delta)\n\t\t\tstate.protocolFee = new(u256.Uint).Add(state.protocolFee, delta)\n\t\t}\n\n\t\t// update global fee tracker\n\t\tif state.liquidity.Gt(u256.Zero()) {\n\t\t\tupdate := u256.MulDiv(step.feeAmount, u256.MustFromDecimal(consts.Q128), state.liquidity)\n\t\t\tstate.feeGrowthGlobalX128 = new(u256.Uint).Add(state.feeGrowthGlobalX128, update)\n\t\t}\n\t\tswapFee = new(u256.Uint).Add(swapFee, step.feeAmount)\n\n\t\t// shift tick if we reached the next price\n\t\tif state.sqrtPriceX96.Eq(step.sqrtPriceNextX96) {\n\t\t\t// if the tick is initialized, run the tick transition\n\t\t\tif step.initialized {\n\t\t\t\tvar fee0, fee1 *u256.Uint\n\n\t\t\t\t// check for the placeholder value, which we replace with the actual value the first time the swap crosses an initialized tick\n\t\t\t\tif zeroForOne {\n\t\t\t\t\tfee0 = state.feeGrowthGlobalX128\n\t\t\t\t\tfee1 = pool.feeGrowthGlobal1X128\n\t\t\t\t} else {\n\t\t\t\t\tfee0 = pool.feeGrowthGlobal0X128\n\t\t\t\t\tfee1 = state.feeGrowthGlobalX128\n\t\t\t\t}\n\n\t\t\t\tliquidityNet := pool.tickCross(\n\t\t\t\t\tstep.tickNext,\n\t\t\t\t\tfee0,\n\t\t\t\t\tfee1,\n\t\t\t\t)\n\n\t\t\t\t// if we're moving leftward, we interpret liquidityNet as the opposite sign\n\t\t\t\tif zeroForOne {\n\t\t\t\t\tliquidityNet = i256.Zero().Neg(liquidityNet)\n\t\t\t\t}\n\n\t\t\t\tstate.liquidity = liquidityMathAddDelta(state.liquidity, liquidityNet)\n\t\t\t}\n\n\t\t\tif zeroForOne {\n\t\t\t\tstate.tick = step.tickNext - 1\n\t\t\t} else {\n\t\t\t\tstate.tick = step.tickNext\n\t\t\t}\n\t\t} else if !(state.sqrtPriceX96.Eq(step.sqrtPriceStartX96)) {\n\t\t\t// recompute unless we're on a lower tick boundary (i.e. already transitioned ticks), and haven't moved\n\t\t\tstate.tick = common.TickMathGetTickAtSqrtRatio(state.sqrtPriceX96)\n\t\t}\n\t}\n\t// END LOOP\n\n\t// update pool sqrtPrice\n\tpool.slot0.sqrtPriceX96 = state.sqrtPriceX96\n\n\t// update tick if it changed\n\tif state.tick != slot0Start.tick {\n\t\tpool.slot0.tick = state.tick\n\t}\n\n\t// update liquidity if it changed\n\tif !(cache.liquidityStart.Eq(state.liquidity)) {\n\t\tpool.liquidity = state.liquidity\n\t}\n\n\t// update fee growth global and, if necessary, protocol fees\n\t// overflow is acceptable, protocol has to withdraw before it hits MAX_UINT256 fees\n\tif zeroForOne {\n\t\tpool.feeGrowthGlobal0X128 = state.feeGrowthGlobalX128\n\t\tif state.protocolFee.Gt(u256.Zero()) {\n\t\t\tpool.protocolFees.token0 = new(u256.Uint).Add(pool.protocolFees.token0, state.protocolFee)\n\t\t}\n\t} else {\n\t\tpool.feeGrowthGlobal1X128 = state.feeGrowthGlobalX128\n\t\tif state.protocolFee.Gt(u256.Zero()) {\n\t\t\tpool.protocolFees.token1 = new(u256.Uint).Add(pool.protocolFees.token1, state.protocolFee)\n\t\t}\n\t}\n\n\tvar amount0, amount1 *i256.Int\n\tif zeroForOne == exactInput {\n\t\tamount0 = i256.Zero().Sub(amountSpecified, state.amountSpecifiedRemaining)\n\t\tamount1 = state.amountCalculated\n\t} else {\n\t\tamount0 = state.amountCalculated\n\t\tamount1 = i256.Zero().Sub(amountSpecified, state.amountSpecifiedRemaining)\n\t}\n\n\t// actual swap\n\tif zeroForOne {\n\t\t// payer \u003e POOL\n\t\tpool.transferFromAndVerify(payer, consts.POOL_ADDR, pool.token0Path, amount0, true)\n\n\t\t// POOL \u003e recipient\n\t\tpool.transferAndVerify(recipient, pool.token1Path, amount1, false)\n\n\t} else {\n\t\t// payer \u003e POOL\n\t\tpool.transferFromAndVerify(payer, consts.POOL_ADDR, pool.token1Path, amount1, false)\n\n\t\t// POOL \u003e recipient\n\t\tpool.transferAndVerify(recipient, pool.token0Path, amount0, true)\n\n\t}\n\n\tstd.Emit(\n\t\t\"GNOSWAP\",\n\t\t\"m_callType\", callType(),\n\t\t\"m_origCaller\", origCaller(),\n\t\t\"m_prevRealm\", prevRealm(),\n\t\t\"p_poolPath\", GetPoolPath(token0Path, token1Path, fee),\n\t\t\"p_zeroForOne\", boolToStr(zeroForOne),\n\t\t\"p_amountSpecified\", _amountSpecified,\n\t\t\"p_sqrtPriceLimitX96\", _sqrtPriceLimitX96,\n\t\t\"p_payer\", _payer,\n\t\t\"p_recipient\", _recipient,\n\t\t\"amount0\", amount0.ToString(),\n\t\t\"amount1\", amount1.ToString(),\n\t\t\"protocol_fee0\", pool.protocolFees.token0.ToString(),\n\t\t\"protocol_fee1\", pool.protocolFees.token1.ToString(),\n\t\t\"swap_fee\", swapFee.ToString(),\n\t)\n\n\tpool.slot0.unlocked = true\n\treturn amount0.ToString(), amount1.ToString()\n}\n\n// SetFeeProtocol sets the denominator of the protocol fee\n//\n// Panics if any of the following conditions are met:\n// - The caller is not an admin\n// - The feeProtocol0 or feeProtocol1 is not in the range of 0 or 4-10\nfunc SetFeeProtocol(\n\tfeeProtocol0 uint8,\n\tfeeProtocol1 uint8,\n) {\n\tcaller := std.PrevRealm().Addr()\n\tif caller != consts.GNOSWAP_ADMIN \u0026\u0026 caller != consts.GOV_ADDR {\n\t\tpanic(\n\t\t\tufmt.Sprintf(\n\t\t\t\t\"[POOL] pool.gno__SetFeeProtocol() || only admin(%s) or governance(%s) can set fee protocol, called from %s\",\n\t\t\t\tconsts.GNOSWAP_ADMIN,\n\t\t\t\tconsts.GOV_ADDR,\n\t\t\t\tcaller,\n\t\t\t),\n\t\t)\n\t}\n\n\tfee0Cond := feeProtocol0 == 0 || (feeProtocol0 \u003e= 4 \u0026\u0026 feeProtocol0 \u003c= 10)\n\tfee1Cond := feeProtocol1 == 0 || (feeProtocol1 \u003e= 4 \u0026\u0026 feeProtocol1 \u003c= 10)\n\tif !(fee0Cond \u0026\u0026 fee1Cond) {\n\t\tpanic(ufmt.Sprintf(\"[POOL] pool.gno__SetFeeProtocol() || expected (feeProtocol0(%d) == 0 || (feeProtocol0(%d) \u003e= 4 \u0026\u0026 feeProtocol0(%d) \u003c= 10)) \u0026\u0026 (feeProtocol1(%d) == 0 || (feeProtocol1(%d) \u003e= 4 \u0026\u0026 feeProtocol1(%d) \u003c= 10))\", feeProtocol0, feeProtocol0, feeProtocol0, feeProtocol1, feeProtocol1, feeProtocol1))\n\t}\n\n\tnewFee := feeProtocol0 + (feeProtocol1 \u003c\u003c 4) // ( \u003c\u003c 4 ) = ( * 16 )\n\n\t// iterate all pool\n\tfor _, pool := range pools {\n\t\tpool.slot0.feeProtocol = newFee\n\t}\n\n\tstd.Emit(\n\t\t\"GNOSWAP\",\n\t\t\"m_callType\", callType(),\n\t\t\"m_origCaller\", origCaller(),\n\t\t\"m_prevRealm\", prevRealm(),\n\t\t\"p_feeProtocol0\", uint8ToStr(feeProtocol0),\n\t\t\"p_feeProtocol1\", uint8ToStr(feeProtocol1),\n\t\t\"newFee\", uint8ToStr(newFee),\n\t)\n}\n\n// CollectProtocol collects protocol fees from the pool\n//\n// Panics if any of the following conditions are met:\n// - The caller is not an admin\n// - The recipient is the zero address\n// - The amount0Requested or amount1Requested is greater than the protocol fees\nfunc CollectProtocol(\n\ttoken0Path string,\n\ttoken1Path string,\n\tfee uint32,\n\t_recipient string,\n\t_amount0Requested string, // uint128\n\t_amount1Requested string, // uint128\n) (string, string) { // uint128 x2\n\tcaller := std.PrevRealm().Addr()\n\tif caller != consts.GNOSWAP_ADMIN \u0026\u0026 caller != consts.GOV_ADDR {\n\t\tpanic(\n\t\t\tufmt.Sprintf(\n\t\t\t\t\"[POOL] pool.gno__CollectFeeProtocol() || only admin(%s) or governance(%s) can collect fee protocol, called from %s\",\n\t\t\t\tconsts.GNOSWAP_ADMIN,\n\t\t\t\tconsts.GOV_ADDR,\n\t\t\t\tcaller,\n\t\t\t),\n\t\t)\n\t}\n\n\trecipient := std.Address(_recipient)\n\n\tamount0Requested := u256.MustFromDecimal(_amount0Requested)\n\tamount1Requested := u256.MustFromDecimal(_amount1Requested)\n\n\tpool := GetPool(token0Path, token1Path, fee)\n\n\tamount0 := u256Min(amount0Requested, pool.protocolFees.token0)\n\tamount1 := u256Min(amount1Requested, pool.protocolFees.token1)\n\n\tamount0, amount1 = pool.saveProtocolFees(amount0, amount1)\n\tuAmount0 := amount0.Uint64()\n\tuAmount1 := amount1.Uint64()\n\n\tok := transferByRegisterCall(pool.token0Path, recipient, uAmount0)\n\tif !ok {\n\t\tpanic(ufmt.Sprintf(\"[POOL] pool.gno__CollectProtocol() || transferByRegisterCall(pool.token0Path(%s), recipient(%s), uAmount0)(%d) failed\", pool.token0Path, recipient.String(), uAmount0))\n\t}\n\n\tok = transferByRegisterCall(pool.token1Path, recipient, uAmount1)\n\tif !ok {\n\t\tpanic(ufmt.Sprintf(\"[POOL] pool.gno__CollectProtocol() || transferByRegisterCall(pool.token1Path(%s), recipient(%s), uAmount1)(%d) failed\", pool.token1Path, recipient.String(), uAmount1))\n\t}\n\n\tstd.Emit(\n\t\t\"GNOSWAP\",\n\t\t\"m_callType\", callType(),\n\t\t\"m_origCaller\", origCaller(),\n\t\t\"m_prevRealm\", prevRealm(),\n\t\t\"p_poolPath\", GetPoolPath(token0Path, token1Path, fee),\n\t\t\"p_recipient\", _recipient,\n\t\t\"amount0\", amount0.ToString(),\n\t\t\"amount1\", amount1.ToString(),\n\t)\n\n\treturn amount0.ToString(), amount1.ToString()\n}\n\nfunc (pool *Pool) saveProtocolFees(amount0, amount1 *u256.Uint) (*u256.Uint, *u256.Uint) {\n\tcond01 := amount0.Gt(u256.Zero())\n\tcond02 := amount0.Eq(pool.protocolFees.token0)\n\tif cond01 \u0026\u0026 cond02 {\n\t\tamount0 = new(u256.Uint).Sub(amount0, u256.One())\n\t}\n\n\tcond11 := amount1.Gt(u256.Zero())\n\tcond12 := amount1.Eq(pool.protocolFees.token1)\n\tif cond11 \u0026\u0026 cond12 {\n\t\tamount1 = new(u256.Uint).Sub(amount1, u256.One())\n\t}\n\n\tpool.protocolFees.token0 = new(u256.Uint).Sub(pool.protocolFees.token0, amount0)\n\tpool.protocolFees.token1 = new(u256.Uint).Sub(pool.protocolFees.token1, amount1)\n\n\t// return rest fee\n\treturn amount0, amount1\n}\n\nfunc (pool *Pool) transferAndVerify(\n\tto std.Address,\n\ttokenPath string,\n\tamount *i256.Int,\n\tisToken0 bool,\n) {\n\tif amount.IsZero() {\n\t\treturn\n\t}\n\n\t// must be negative to send token from pool to user\n\t// as point of view from pool, it is negative\n\tif !amount.IsNeg() {\n\t\tpanic(ufmt.Sprintf(\"[POOL] pool.transferAndVerify() || amount(%s) must be negative\", amount.ToString())) // TODO: panic or just pass\n\t}\n\n\t// check pool.balances\n\tif isToken0 {\n\t\tif pool.balances.token0.Lt(amount.Abs()) {\n\t\t\tpanic(ufmt.Sprintf(\"[POOL] pool.transferAndVerify() || pool.balances.token0(%s) \u003e= amount.Abs(%s)\", pool.balances.token0.ToString(), amount.Abs().ToString()))\n\t\t}\n\t} else {\n\t\tif pool.balances.token1.Lt(amount.Abs()) {\n\t\t\tpanic(ufmt.Sprintf(\"[POOL] pool.transferAndVerify() || pool.balances.token1(%s) \u003e= amount.Abs(%s)\", pool.balances.token1.ToString(), amount.Abs().ToString()))\n\t\t}\n\t}\n\n\tamountUint64 := checkAmountRange(amount)\n\n\t// try sending\n\t// will panic if following conditions are met:\n\t// - POOL does not have enough balance\n\t// - token is not registered\n\tok := transferByRegisterCall(tokenPath, to, amountUint64)\n\tif !ok {\n\t\tpanic(ufmt.Sprintf(\"[POOL] pool.transferAndVerify() || transferByRegisterCall(tokenPath(%s), to(%s), amountUint64(%d)) failed\", tokenPath, to.String(), amountUint64))\n\t}\n\n\t// update pool.balances\n\tvar overflow bool\n\tif isToken0 {\n\t\tpool.balances.token0, overflow = new(u256.Uint).SubOverflow(pool.balances.token0, amount.Abs())\n\t\tif overflow {\n\t\t\tpanic(ufmt.Sprintf(\"[POOL] pool.transferAndVerify() || cannot decrease, pool.balances.token0(%s) - amount(%s)\", pool.balances.token0.ToString(), amount.Abs().ToString()))\n\t\t}\n\t} else {\n\t\tpool.balances.token1, overflow = new(u256.Uint).SubOverflow(pool.balances.token1, amount.Abs())\n\t\tif pool.balances.token1.Lt(u256.Zero()) {\n\t\t\tpanic(ufmt.Sprintf(\"[POOL] pool.transferAndVerify() || cannot decrease, pool.balances.token1(%s) - amount(%s)\", pool.balances.token1.ToString(), amount.Abs().ToString()))\n\t\t}\n\t}\n}\n\nfunc (pool *Pool) transferFromAndVerify(\n\tfrom, to std.Address,\n\ttokenPath string,\n\tamount *i256.Int,\n\tisToken0 bool,\n) {\n\tamountUint64 := checkAmountRange(amount)\n\n\t// try sending\n\t// will panic if following conditions are met:\n\t// - POOL does not have enough approved amount\n\t// - from does not have enough balance\n\t// - token is not registered\n\tok := transferFromByRegisterCall(tokenPath, from, to, amountUint64)\n\tif !ok {\n\t\tpanic(ufmt.Sprintf(\"[POOL] pool.transferFromAndVerify() || transferFromByRegisterCall(tokenPath(%s), from(%s), to(%s), amountUint64(%d)) failed\", tokenPath, from.String(), to.String(), amountUint64))\n\t}\n\n\t// update pool.balances\n\tif isToken0 {\n\t\tpool.balances.token0 = new(u256.Uint).Add(pool.balances.token0, amount.Abs())\n\t} else {\n\t\tpool.balances.token1 = new(u256.Uint).Add(pool.balances.token1, amount.Abs())\n\t}\n}\n\nfunc checkAmountRange(amount *i256.Int) uint64 {\n\t// check amount is in uint64 range\n\tamountAbs := amount.Abs()\n\tamountUint64, overflow := amountAbs.Uint64WithOverflow()\n\tif overflow {\n\t\tpanic(ufmt.Sprintf(\"[POOL] pool.checkAmount() || amountAbs(%s) overflows uint64 range\", amountAbs.ToString()))\n\t}\n\n\treturn amountUint64\n}\n"},{"name":"pool_manager.gno","body":"package pool\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/ufmt\"\n\n\t\"gno.land/r/gnoswap/common\"\n\t\"gno.land/r/gnoswap/consts\"\n\ten \"gno.land/r/gnoswap/emission\"\n\n\t\"gno.land/r/gnoswap/gns\"\n\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\nvar (\n\tfeeAmountTickSpacing map[uint32]int32 = make(map[uint32]int32) // maps fee to tickSpacing || map[feeAmount]tick_spacing\n\tpools                map[string]*Pool = make(map[string]*Pool) // maps poolPath to pool || map[poolPath]*Pool\n)\n\nfunc init() {\n\tfeeAmountTickSpacing[100] = 1     // 0.01%\n\tfeeAmountTickSpacing[500] = 10    // 0.05%\n\tfeeAmountTickSpacing[3000] = 60   // 0.3%\n\tfeeAmountTickSpacing[10000] = 200 // 1%\n}\n\n// CreatePool creates a new concentrated liquidity pool with the given token0Path, token1Path, fee, and sqrtPriceX96\n// Each pool is identified by the poolPath, which is a combination of token0Path, token1Path, and fee\n// It validates the contract initialization, pool existence, and token0Path and token1Path\n// If validation passes, it calls newPool()\n//\n// Panics if any of the following conditions are met:\n// - The pool already exists\n// - Both token0Path and token1Path are the same\nfunc CreatePool(\n\ttoken0Path string,\n\ttoken1Path string,\n\tfee uint32,\n\t_sqrtPriceX96 string, // uint256\n) {\n\ten.MintAndDistributeGns()\n\n\tif token0Path == token1Path {\n\t\tpanic(ufmt.Sprintf(\"[POOl] pool_manager.gno__CreatePool() || expected token0Path(%s) != token1Path(%s)\", token0Path, token1Path))\n\t}\n\n\tif token0Path == consts.GNOT {\n\t\ttoken0Path = consts.WRAPPED_WUGNOT\n\t} else if token1Path == consts.GNOT {\n\t\ttoken1Path = consts.WRAPPED_WUGNOT\n\t}\n\n\tsqrtPriceX96 := u256.MustFromDecimal(_sqrtPriceX96)\n\n\tif token1Path \u003c token0Path {\n\t\ttoken0Path, token1Path = token1Path, token0Path\n\t\ttick := -(common.TickMathGetTickAtSqrtRatio(sqrtPriceX96))\n\t\tsqrtPriceX96 = common.TickMathGetSqrtRatioAtTick(tick)\n\t}\n\n\t// check tickSpacing for fee\n\ttickSpacing := feeAmountTickSpacing[fee]\n\t// calculate poolPath\n\tpoolPath := GetPoolPath(token0Path, token1Path, fee)\n\n\t// check whether the pool already exist\n\tpool, exist := pools[poolPath]\n\tif exist {\n\t\tpanic(ufmt.Sprintf(\"[POOl] pool_manager.gno__CreatePool() || expected poolPath(%s) not to exist\", poolPath))\n\t}\n\n\tif !exist {\n\t\tgns.TransferFrom(a2u(std.GetOrigCaller()), a2u(consts.PROTOCOL_FEE_ADDR), poolCreationFee)\n\n\t\tpool = newPool(token0Path, token1Path, fee, tickSpacing, sqrtPriceX96)\n\t\tpools[poolPath] = pool\n\n\t\tstd.Emit(\n\t\t\t\"GNOSWAP\",\n\t\t\t\"m_callType\", callType(),\n\t\t\t\"m_origCaller\", origCaller(),\n\t\t\t\"m_prevRealm\", prevRealm(),\n\t\t\t\"p_poolPath\", poolPath,\n\t\t)\n\t}\n}\n\n// DoesPoolPathExist reports whether the pool exists with the given poolPath\nfunc DoesPoolPathExist(poolPath string) bool {\n\t_, exist := pools[poolPath]\n\treturn exist\n}\n\n// GetPool returns the pool with the given token0Path, token1Path, and fee\n//\n// Panics if any of the following conditions are met:\n// - The pool does not exist\nfunc GetPool(token0Path, token1Path string, fee uint32) *Pool {\n\tpoolPath := GetPoolPath(token0Path, token1Path, fee)\n\tpool, exist := pools[poolPath]\n\tif !exist {\n\t\tpanic(ufmt.Sprintf(\"[POOL] pool_manager.gno__GetPool() || expected poolPath(%s) to exist\", poolPath))\n\t}\n\n\treturn pool\n}\n\n// GetPoolFromPoolPath returns the pool with the given poolPath\n//\n// Panics if any of the following conditions are met:\n// - The pool does not exist\nfunc GetPoolFromPoolPath(poolPath string) *Pool {\n\tpool, exist := pools[poolPath]\n\tif !exist {\n\t\tpanic(ufmt.Sprintf(\"[POOL] pool_manager.gno__GetPoolFromPoolPath() || expected poolPath(%s) to exist\", poolPath))\n\t}\n\n\treturn pool\n}\n\n// GetPoolPath generates a poolPath from the given token0Path, token1Path, and fee\n// If token0Path comes first in alphabetical order, it returns token0Path:token1Path:fee\n// Otherwise, it returns token1Path:token0Path:fee\nfunc GetPoolPath(token0Path, token1Path string, fee uint32) string {\n\tif token0Path \u003c token1Path {\n\t\treturn token0Path + \":\" + token1Path + \":\" + strconv.Itoa(int(fee))\n\t} else {\n\t\treturn token1Path + \":\" + token0Path + \":\" + strconv.Itoa(int(fee))\n\t}\n}\n\nfunc newPool(\n\ttoken0Path string,\n\ttoken1Path string,\n\tfee uint32,\n\ttickSpacing int32,\n\tsqrtPriceX96 *u256.Uint,\n) *Pool {\n\tmaxLiquidityPerTick := tickTickSpacingToMaxLiquidityPerTick(tickSpacing)\n\ttick := common.TickMathGetTickAtSqrtRatio(sqrtPriceX96)\n\n\tslot0 := Slot0{\n\t\tsqrtPriceX96: sqrtPriceX96,\n\t\ttick:         tick,\n\t\tfeeProtocol:  0,\n\t\tunlocked:     true,\n\t}\n\n\tbalances := Balances{\n\t\ttoken0: u256.Zero(),\n\t\ttoken1: u256.Zero(),\n\t}\n\n\tprotocolFees := ProtocolFees{\n\t\ttoken0: u256.Zero(),\n\t\ttoken1: u256.Zero(),\n\t}\n\n\treturn \u0026Pool{\n\t\ttoken0Path:           token0Path,\n\t\ttoken1Path:           token1Path,\n\t\tbalances:             balances,\n\t\tfee:                  fee,\n\t\ttickSpacing:          tickSpacing,\n\t\tmaxLiquidityPerTick:  maxLiquidityPerTick,\n\t\tslot0:                slot0,\n\t\tfeeGrowthGlobal0X128: u256.Zero(),\n\t\tfeeGrowthGlobal1X128: u256.Zero(),\n\t\tprotocolFees:         protocolFees,\n\t\tliquidity:            u256.Zero(),\n\t\tticks:                Ticks{},\n\t\ttickBitmaps:          TickBitmaps{},\n\t\tpositions:            Positions{},\n\t}\n}\n"},{"name":"position.gno","body":"package pool\n\nimport (\n\t\"encoding/base64\"\n\t\"std\"\n\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/gnoswap/consts\"\n\n\ti256 \"gno.land/p/gnoswap/int256\"\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\nfunc positionGetKey(\n\towner std.Address,\n\ttickLower int32,\n\ttickUpper int32,\n) string {\n\tpositionKey := ufmt.Sprintf(\"%s__%d__%d\", owner.String(), tickLower, tickUpper)\n\n\tencoded := base64.StdEncoding.EncodeToString([]byte(positionKey))\n\treturn encoded\n}\n\nfunc (pool *Pool) positionUpdateWithKey(\n\tpositionKey string,\n\tliquidityDelta *i256.Int, // int128\n\tfeeGrowthInside0X128 *u256.Uint, // uint256\n\tfeeGrowthInside1X128 *u256.Uint, // uint256\n) PositionInfo {\n\t// PARAM INIT\n\tliquidityDelta = liquidityDelta.NilToZero()\n\tfeeGrowthInside0X128 = feeGrowthInside0X128.NilToZero()\n\tfeeGrowthInside1X128 = feeGrowthInside1X128.NilToZero()\n\n\tpositionToUpdate := pool.positions[positionKey]\n\tpositionAfterUpdate := positionUpdate(positionToUpdate, liquidityDelta, feeGrowthInside0X128, feeGrowthInside1X128)\n\tpool.positions[positionKey] = positionAfterUpdate\n\n\treturn positionAfterUpdate\n}\n\nfunc positionUpdate(\n\tself PositionInfo,\n\tliquidityDelta *i256.Int, // int128\n\tfeeGrowthInside0X128 *u256.Uint, // uint256\n\tfeeGrowthInside1X128 *u256.Uint, // uint256\n) PositionInfo {\n\tself.init()\n\n\tvar liquidityNext *u256.Uint\n\tif liquidityDelta.IsZero() {\n\t\tliquidityNext = self.liquidity\n\t} else {\n\t\tliquidityNext = liquidityMathAddDelta(self.liquidity, liquidityDelta)\n\t}\n\n\ttokensOwed0 := u256.Zero()\n\t{\n\t\tdiff := new(u256.Uint).Sub(feeGrowthInside0X128, self.feeGrowthInside0LastX128)\n\t\ttokensOwed0 = u256.MulDiv(diff, self.liquidity, u256.MustFromDecimal(consts.Q128))\n\t}\n\n\ttokensOwed1 := u256.Zero()\n\t{\n\t\tdiff := new(u256.Uint).Sub(feeGrowthInside1X128, self.feeGrowthInside1LastX128)\n\t\ttokensOwed1 = u256.MulDiv(diff, self.liquidity, u256.MustFromDecimal(consts.Q128))\n\t}\n\n\tif !(liquidityDelta.IsZero()) {\n\t\tself.liquidity = liquidityNext\n\t}\n\n\tself.feeGrowthInside0LastX128 = feeGrowthInside0X128\n\tself.feeGrowthInside1LastX128 = feeGrowthInside1X128\n\tif tokensOwed0.Gt(u256.Zero()) || tokensOwed1.Gt(u256.Zero()) {\n\t\tself.tokensOwed0 = self.tokensOwed0.Add(self.tokensOwed0, tokensOwed0)\n\t\tself.tokensOwed1 = self.tokensOwed1.Add(self.tokensOwed1, tokensOwed1)\n\t}\n\n\treturn self\n}\n"},{"name":"position_modify.gno","body":"package pool\n\nimport (\n\t\"gno.land/r/gnoswap/common\"\n\n\ti256 \"gno.land/p/gnoswap/int256\"\n\n\tplp \"gno.land/p/gnoswap/pool\" // pool package\n)\n\nfunc (pool *Pool) modifyPosition(params ModifyPositionParams) (PositionInfo, *i256.Int, *i256.Int) {\n\tposition := pool.updatePosition(\n\t\tparams.owner,\n\t\tparams.tickLower,\n\t\tparams.tickUpper,\n\t\tparams.liquidityDelta,\n\t\tpool.slot0.tick,\n\t)\n\n\tvar amount0, amount1 *i256.Int\n\n\tif !(params.liquidityDelta.IsZero()) {\n\t\tif pool.slot0.tick \u003c params.tickLower {\n\t\t\t_amount0Str := plp.SqrtPriceMathGetAmount0DeltaStr(\n\t\t\t\tcommon.TickMathGetSqrtRatioAtTick(params.tickLower),\n\t\t\t\tcommon.TickMathGetSqrtRatioAtTick(params.tickUpper),\n\t\t\t\tparams.liquidityDelta,\n\t\t\t)\n\t\t\tamount0 = i256.MustFromDecimal(_amount0Str)\n\t\t} else if pool.slot0.tick \u003c params.tickUpper {\n\t\t\tliquidityBefore := pool.liquidity\n\n\t\t\t_amount0Str := plp.SqrtPriceMathGetAmount0DeltaStr(\n\t\t\t\tpool.slot0.sqrtPriceX96,\n\t\t\t\tcommon.TickMathGetSqrtRatioAtTick(params.tickUpper),\n\t\t\t\tparams.liquidityDelta,\n\t\t\t)\n\t\t\tamount0 = i256.MustFromDecimal(_amount0Str)\n\n\t\t\t_amount1Str := plp.SqrtPriceMathGetAmount1DeltaStr(\n\t\t\t\tcommon.TickMathGetSqrtRatioAtTick(params.tickLower),\n\t\t\t\tpool.slot0.sqrtPriceX96,\n\t\t\t\tparams.liquidityDelta,\n\t\t\t)\n\t\t\tamount1 = i256.MustFromDecimal(_amount1Str)\n\n\t\t\tpool.liquidity = liquidityMathAddDelta(liquidityBefore, params.liquidityDelta)\n\n\t\t} else {\n\t\t\t_amount1Str := plp.SqrtPriceMathGetAmount1DeltaStr(\n\t\t\t\tcommon.TickMathGetSqrtRatioAtTick(params.tickLower),\n\t\t\t\tcommon.TickMathGetSqrtRatioAtTick(params.tickUpper),\n\t\t\t\tparams.liquidityDelta,\n\t\t\t)\n\t\t\tamount1 = i256.MustFromDecimal(_amount1Str)\n\t\t}\n\t}\n\n\t// if position is out of range, one of amount0 or amount1 can be nil\n\t// \u003e handle as 0\n\tamount0 = amount0.NilToZero()\n\tamount1 = amount1.NilToZero()\n\n\treturn position, amount0, amount1\n}\n"},{"name":"position_update.gno","body":"package pool\n\nimport (\n\t\"std\"\n\n\ti256 \"gno.land/p/gnoswap/int256\"\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\nfunc (pool *Pool) updatePosition(\n\towner std.Address,\n\ttickLower int32,\n\ttickUpper int32,\n\tliquidityDelta *i256.Int, // int128\n\ttick int32,\n) PositionInfo {\n\t_feeGrowthGlobal0X128 := u256.MustFromDecimal(pool.feeGrowthGlobal0X128.ToString())\n\t_feeGrowthGlobal1X128 := u256.MustFromDecimal(pool.feeGrowthGlobal1X128.ToString())\n\n\tvar flippedLower, flippedUpper bool\n\tif !(liquidityDelta.IsZero()) {\n\t\tflippedLower = pool.tickUpdate(\n\t\t\ttickLower,\n\t\t\ttick,\n\t\t\tliquidityDelta,\n\t\t\t_feeGrowthGlobal0X128,\n\t\t\t_feeGrowthGlobal1X128,\n\t\t\tfalse,\n\t\t\tpool.maxLiquidityPerTick,\n\t\t)\n\n\t\tflippedUpper = pool.tickUpdate(\n\t\t\ttickUpper,\n\t\t\ttick,\n\t\t\tliquidityDelta,\n\t\t\t_feeGrowthGlobal0X128,\n\t\t\t_feeGrowthGlobal1X128,\n\t\t\ttrue,\n\t\t\tpool.maxLiquidityPerTick,\n\t\t)\n\n\t\tif flippedLower {\n\t\t\tpool.tickBitmapFlipTick(tickLower, pool.tickSpacing)\n\t\t}\n\n\t\tif flippedUpper {\n\t\t\tpool.tickBitmapFlipTick(tickUpper, pool.tickSpacing)\n\t\t}\n\t}\n\n\tfeeGrowthInside0X128, feeGrowthInside1X128 := pool.tickGetFeeGrowthInside(\n\t\ttickLower,\n\t\ttickUpper,\n\t\ttick,\n\t\t_feeGrowthGlobal0X128,\n\t\t_feeGrowthGlobal1X128,\n\t)\n\n\tpositionKey := positionGetKey(owner, tickLower, tickUpper)\n\n\tposition := pool.positionUpdateWithKey(\n\t\tpositionKey,\n\t\tliquidityDelta,\n\t\tu256.MustFromDecimal(feeGrowthInside0X128.ToString()),\n\t\tu256.MustFromDecimal(feeGrowthInside1X128.ToString()),\n\t)\n\n\tif liquidityDelta.IsNeg() {\n\t\tif flippedLower {\n\t\t\tdelete(pool.ticks, tickLower)\n\t\t}\n\n\t\tif flippedUpper {\n\t\t\tdelete(pool.ticks, tickUpper)\n\t\t}\n\t}\n\n\treturn position\n}\n"},{"name":"protocol_fee_pool_creation.gno","body":"package pool\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\n// poolCreationFee is the fee that is charged when a user creates a pool\nvar (\n\tpoolCreationFee = uint64(100_000_000) // 100_GNS\n)\n\n// GetPoolCreationFee returns the poolCreationFee\nfunc GetPoolCreationFee() uint64 {\n\treturn poolCreationFee\n}\n\n// SetPoolCreationFee sets the poolCreationFee\n//\n// Panics if any of the following conditions are met:\n// - caller is not the admin\nfunc SetPoolCreationFee(fee uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif caller != consts.GNOSWAP_ADMIN \u0026\u0026 caller != consts.GOV_ADDR {\n\t\tpanic(\n\t\t\tufmt.Sprintf(\n\t\t\t\t\"[POOL] protocol_fee_pool_creation.gno__SetPoolCreationFee() || only admin(%s) or governance(%s) can set pool creation fee, called from %s\",\n\t\t\t\tconsts.GNOSWAP_ADMIN,\n\t\t\t\tconsts.GOV_ADDR,\n\t\t\t\tcaller,\n\t\t\t),\n\t\t)\n\t}\n\n\tpoolCreationFee = fee\n\n\tstd.Emit(\n\t\t\"GNOSWAP\",\n\t\t\"m_callType\", callType(),\n\t\t\"m_origCaller\", origCaller(),\n\t\t\"m_prevRealm\", prevRealm(),\n\t\t\"p_fee\", uint64ToStr(fee),\n\t)\n}\n"},{"name":"protocol_fee_withdrawal.gno","body":"package pool\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\n\t\"gno.land/p/demo/ufmt\"\n\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\n// withdrawalFee is the fee that is charged when a user withdraws their collected fees\nvar (\n\twithdrawalFee = uint64(100) // 1%\n)\n\n// HandleWithdrawalFee withdraws the fee from the user and returns the amount after the fee\n//\n// Panics if any of the following conditions are met:\n// - caller is not the position contract\n// - caller does not have enough balance to give the fee\nfunc HandleWithdrawalFee(\n\ttokenId uint64,\n\ttoken0Path string,\n\t_amount0 string, // uint256\n\ttoken1Path string,\n\t_amount1 string, // uint256\n) (string, string) { // uint256 x2\n\t// only position contract can call this function\n\tif std.PrevRealm().PkgPath() != consts.POSITION_PATH {\n\t\tpanic(ufmt.Sprintf(\"[POOL] withdrawal_fee.gno__HandleWithdrawFee() || expected std.PrevRealm().PkgPath()(%s), got %s\", consts.POSITION_PATH, std.PrevRealm().PkgPath()))\n\t}\n\n\tamount0 := u256.MustFromDecimal(_amount0)\n\tamount1 := u256.MustFromDecimal(_amount1)\n\n\tif withdrawalFee == 0 {\n\t\treturn _amount0, _amount1\n\t}\n\n\tfeeAmount0 := new(u256.Uint).Mul(amount0, u256.NewUint(withdrawalFee))\n\tfeeAmount0 = new(u256.Uint).Div(feeAmount0, u256.NewUint(10000))\n\n\tfeeAmount1 := new(u256.Uint).Mul(amount1, u256.NewUint(withdrawalFee))\n\tfeeAmount1 = new(u256.Uint).Div(feeAmount1, u256.NewUint(10000))\n\n\tok := transferFromByRegisterCall(token0Path, std.GetOrigCaller(), consts.PROTOCOL_FEE_ADDR, feeAmount0.Uint64())\n\tif !ok {\n\t\tpanic(ufmt.Sprintf(\"[POOL] withdrawal_fee.gno__HandleWithdrawFee() || expected transferFromByRegisterCall(%s, %s, %s, %s) == true\", token0Path, std.GetOrigCaller(), consts.PROTOCOL_FEE_ADDR, feeAmount0))\n\t}\n\n\tok = transferFromByRegisterCall(token1Path, std.GetOrigCaller(), consts.PROTOCOL_FEE_ADDR, feeAmount1.Uint64())\n\tif !ok {\n\t\tpanic(ufmt.Sprintf(\"[POOL] withdrawal_fee.gno__HandleWithdrawFee() || expected transferFromByRegisterCall(%s, %s, %s, %s) == true\", token1Path, std.GetOrigCaller(), consts.PROTOCOL_FEE_ADDR, feeAmount1))\n\t}\n\n\tafterAmount0 := new(u256.Uint).Sub(amount0, feeAmount0)\n\tafterAmount1 := new(u256.Uint).Sub(amount1, feeAmount1)\n\n\tstd.Emit(\n\t\t\"GNOSWAP\",\n\t\t\"m_callType\", callType(),\n\t\t\"m_origCaller\", origCaller(),\n\t\t\"m_prevRealm\", prevRealm(),\n\t\t\"p_tokenId\", uint64ToStr(tokenId),\n\t\t\"p_token0Path\", token0Path,\n\t\t\"p_token1Path\", token1Path,\n\t\t\"fee0Amount\", feeAmount0.ToString(),\n\t\t\"fee1Amount\", feeAmount1.ToString(),\n\t)\n\n\treturn afterAmount0.ToString(), afterAmount1.ToString()\n}\n\n// GetWithdrawalFee returns the withdrawal fee\nfunc GetWithdrawalFee() uint64 {\n\treturn withdrawalFee\n}\n\n// SetWithdrawalFee sets the withdrawal fee\n//\n// Panics if any of the following conditions are met:\n// - caller is not the admin\nfunc SetWithdrawalFee(fee uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif caller != consts.GNOSWAP_ADMIN \u0026\u0026 caller != consts.GOV_ADDR {\n\t\tpanic(\n\t\t\tufmt.Sprintf(\n\t\t\t\t\"[POOL] protocol_fee_withdrawal.gno__SetWithdrawalFee() || only admin(%s) or governance(%s) can set withdrawal fee, called from %s\",\n\t\t\t\tconsts.GNOSWAP_ADMIN,\n\t\t\t\tconsts.GOV_ADDR,\n\t\t\t\tcaller,\n\t\t\t),\n\t\t)\n\t}\n\n\t// 10000 (bps) = 100%\n\tif fee \u003e 10000 {\n\t\tpanic(ufmt.Sprintf(\"[POOL] withdrawal_fee.gno__SetWithdrawalFee() || fee(%d) must be in range 0 ~ 10000\", fee))\n\t}\n\n\twithdrawalFee = fee\n\n\tstd.Emit(\n\t\t\"GNOSWAP\",\n\t\t\"m_callType\", callType(),\n\t\t\"m_origCaller\", origCaller(),\n\t\t\"m_prevRealm\", prevRealm(),\n\t\t\"p_fee\", uint64ToStr(fee),\n\t)\n}\n"},{"name":"tick.gno","body":"package pool\n\nimport (\n\t\"gno.land/r/gnoswap/consts\"\n\n\ti256 \"gno.land/p/gnoswap/int256\"\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\nfunc tickTickSpacingToMaxLiquidityPerTick(tickSpacing int32) *u256.Uint {\n\tminTick := (consts.MIN_TICK / tickSpacing) * tickSpacing\n\tmaxTick := (consts.MAX_TICK / tickSpacing) * tickSpacing\n\tnumTicks := uint64((maxTick-minTick)/tickSpacing) + 1\n\n\t_maxUint128 := u256.MustFromDecimal(consts.MAX_UINT128)\n\treturn new(u256.Uint).Div(_maxUint128, u256.NewUint(numTicks))\n}\n\nfunc (pool *Pool) tickGetFeeGrowthInside(\n\ttickLower int32,\n\ttickUpper int32,\n\ttickCurrent int32,\n\tfeeGrowthGlobal0X128 *u256.Uint, // uint256\n\tfeeGrowthGlobal1X128 *u256.Uint, // uint256\n) (*u256.Uint, *u256.Uint) { // uint256\n\tlower := pool.ticks[tickLower]\n\tlower.init()\n\n\tupper := pool.ticks[tickUpper]\n\tupper.init()\n\n\tvar feeGrowthBelow0X128, feeGrowthBelow1X128 *u256.Uint\n\tif tickCurrent \u003e= tickLower {\n\t\tfeeGrowthBelow0X128 = lower.feeGrowthOutside0X128\n\t\tfeeGrowthBelow1X128 = lower.feeGrowthOutside1X128\n\t} else {\n\t\tfeeGrowthBelow0X128 = new(u256.Uint).Sub(feeGrowthGlobal0X128, lower.feeGrowthOutside0X128)\n\t\tfeeGrowthBelow1X128 = new(u256.Uint).Sub(feeGrowthGlobal1X128, lower.feeGrowthOutside1X128)\n\t}\n\n\tvar feeGrowthAbove0X128, feeGrowthAbove1X128 *u256.Uint\n\tif tickCurrent \u003c tickUpper {\n\t\tfeeGrowthAbove0X128 = upper.feeGrowthOutside0X128\n\t\tfeeGrowthAbove1X128 = upper.feeGrowthOutside1X128\n\t} else {\n\t\tfeeGrowthAbove0X128 = new(u256.Uint).Sub(feeGrowthGlobal0X128, upper.feeGrowthOutside0X128)\n\t\tfeeGrowthAbove1X128 = new(u256.Uint).Sub(feeGrowthGlobal1X128, upper.feeGrowthOutside1X128)\n\t}\n\n\tfeeGrowthInside0X128 := new(u256.Uint).Sub(new(u256.Uint).Sub(feeGrowthGlobal0X128, feeGrowthBelow0X128), feeGrowthAbove0X128)\n\tfeeGrowthInside1X128 := new(u256.Uint).Sub(new(u256.Uint).Sub(feeGrowthGlobal1X128, feeGrowthBelow1X128), feeGrowthAbove1X128)\n\n\treturn feeGrowthInside0X128, feeGrowthInside1X128\n}\n\nfunc (pool *Pool) tickUpdate(\n\ttick int32,\n\ttickCurrent int32,\n\tliquidityDelta *i256.Int, // int128\n\tfeeGrowthGlobal0X128 *u256.Uint, // uint256\n\tfeeGrowthGlobal1X128 *u256.Uint, // uint256\n\tupper bool,\n\tmaxLiquidity *u256.Uint, // uint256\n) (flipped bool) {\n\t// PARAM INIT\n\tliquidityDelta = liquidityDelta.NilToZero()\n\tfeeGrowthGlobal0X128 = feeGrowthGlobal0X128.NilToZero()\n\tfeeGrowthGlobal1X128 = feeGrowthGlobal1X128.NilToZero()\n\n\tinfo := pool.ticks[tick]\n\tinfo.init()\n\n\tliquidityGrossBefore := info.liquidityGross\n\tliquidityGrossAfter := liquidityMathAddDelta(liquidityGrossBefore, liquidityDelta)\n\n\tif !(liquidityGrossAfter.Lte(maxLiquidity)) {\n\t\tpanic(\"tick panic #1\")\n\t}\n\n\tflipped = (liquidityGrossAfter.IsZero()) != (liquidityGrossBefore.IsZero())\n\n\tif liquidityGrossBefore.IsZero() {\n\t\tif tick \u003c= tickCurrent {\n\t\t\tinfo.feeGrowthOutside0X128 = feeGrowthGlobal0X128\n\t\t\tinfo.feeGrowthOutside1X128 = feeGrowthGlobal1X128\n\t\t}\n\n\t\tinfo.initialized = true\n\t}\n\n\tinfo.liquidityGross = liquidityGrossAfter\n\n\tif upper {\n\t\tinfo.liquidityNet = i256.Zero().Sub(info.liquidityNet, liquidityDelta)\n\t} else {\n\t\tinfo.liquidityNet = i256.Zero().Add(info.liquidityNet, liquidityDelta)\n\t}\n\n\tpool.ticks[tick] = info\n\n\treturn flipped\n}\n\nfunc (pool *Pool) tickCross(\n\ttick int32,\n\tfeeGrowthGlobal0X128 *u256.Uint, // uint256\n\tfeeGrowthGlobal1X128 *u256.Uint, // uint256\n) *i256.Int {\n\tinfo := pool.ticks[tick]\n\tinfo.init()\n\n\tinfo.feeGrowthOutside0X128 = new(u256.Uint).Sub(feeGrowthGlobal0X128, info.feeGrowthOutside0X128)\n\tinfo.feeGrowthOutside1X128 = new(u256.Uint).Sub(feeGrowthGlobal1X128, info.feeGrowthOutside1X128)\n\n\tpool.ticks[tick] = info\n\n\tliquidityNet := info.liquidityNet\n\treturn liquidityNet\n}\n"},{"name":"tick_bitmap.gno","body":"package pool\n\nimport (\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/gnoswap/consts\"\n\n\tplp \"gno.land/p/gnoswap/pool\"\n\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\nfunc tickBitmapPosition(tick int32) (int16, uint8) {\n\twordPos := int16(tick \u003e\u003e 8) // tick / 256\n\tbitPos := uint8(tick % 256)\n\n\treturn wordPos, bitPos\n}\n\nfunc (pool *Pool) tickBitmapFlipTick(\n\ttick int32,\n\ttickSpacing int32,\n) {\n\tif tick%tickSpacing != 0 {\n\t\tpanic(ufmt.Sprintf(\"[POOL] tick_bitmap.gno__tickBitmapFlipTick() || tick(%d) MOD tickSpacing(%d) != 0(%d)\", tick, tickSpacing, tick%tickSpacing))\n\t}\n\n\twordPos, bitPos := tickBitmapPosition(tick / tickSpacing)\n\n\t// 1 \u003c\u003c bitPos\n\tmask := new(u256.Uint).Lsh(u256.NewUint(1), uint(bitPos))\n\n\tpool.tickBitmaps[wordPos] = pool.tickBitmaps[wordPos].NilToZero()\n\tpool.tickBitmaps[wordPos] = new(u256.Uint).Xor(pool.tickBitmaps[wordPos], mask)\n}\n\nfunc (pool *Pool) tickBitmapNextInitializedTickWithInOneWord(\n\ttick int32,\n\ttickSpacing int32,\n\tlte bool,\n) (int32, bool) {\n\tcompress := tick / tickSpacing\n\tif tick \u003c 0 \u0026\u0026 tick%tickSpacing != 0 {\n\t\tcompress--\n\t}\n\n\tif lte {\n\t\twordPos, bitPos := tickBitmapPosition(compress)\n\n\t\t// mask := (1 \u003c\u003c bitPos) - 1 + (1 \u003c\u003c bitPos)\n\t\tshift1LeftByBitPos := new(u256.Uint).Lsh(u256.NewUint(1), uint(bitPos))\n\n\t\tmask := shift1LeftByBitPos.Clone()\n\t\tmask = new(u256.Uint).Sub(mask, u256.NewUint(1))\n\t\tmask = new(u256.Uint).Add(mask, shift1LeftByBitPos.Clone())\n\n\t\tpool.tickBitmaps[wordPos] = pool.tickBitmaps[wordPos].NilToZero()\n\t\tmasked := new(u256.Uint).And(pool.tickBitmaps[wordPos], mask)\n\n\t\tinitialized := !(masked.IsZero())\n\n\t\tif initialized {\n\t\t\tnext := (compress - int32(bitPos-plp.BitMathMostSignificantBit(masked))) * tickSpacing\n\t\t\treturn next, initialized\n\t\t}\n\n\t\tnext := (compress - int32(bitPos)) * tickSpacing\n\t\treturn next, initialized\n\t}\n\n\twordPos, bitPos := tickBitmapPosition(compress + 1)\n\n\tshift1LeftByBitPos := new(u256.Uint).Lsh(u256.NewUint(1), uint(bitPos))\n\t_mask := shift1LeftByBitPos.Clone()\n\t_mask = new(u256.Uint).Sub(_mask, u256.NewUint(1))\n\tmask := bitwiseNotForUint256BitmapIndexing(_mask)\n\n\tpool.tickBitmaps[wordPos] = pool.tickBitmaps[wordPos].NilToZero()\n\tmasked := new(u256.Uint).And(pool.tickBitmaps[wordPos], mask)\n\n\tinitialized := !(masked.IsZero())\n\tif initialized {\n\t\tnext := (compress + 1 + int32(plp.BitMathLeastSignificantBit(masked)-bitPos)) * tickSpacing\n\t\treturn next, initialized\n\t} else {\n\t\tnext := (compress + 1 + int32(255-bitPos)) * tickSpacing\n\n\t\treturn next, initialized\n\t}\n}\n\nfunc bitwiseNotForUint256BitmapIndexing(x *u256.Uint) *u256.Uint {\n\t// REF: https://stackoverflow.com/a/77071037\n\n\t// Create a mask with all bits set to 1\n\tmask := u256.MustFromDecimal(consts.MAX_UINT256)\n\tmask = new(u256.Uint).Sub(mask, u256.NewUint(1))\n\n\t// XOR with mask to perform bitwise NOT\n\t// result := x ^ mask\n\n\tresult := new(u256.Uint).Xor(x, mask)\n\treturn result\n}\n"},{"name":"token_register.gno","body":"package pool\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/ufmt\"\n\n\tpusers \"gno.land/p/demo/users\"\n\n\t\"gno.land/r/gnoswap/consts\"\n)\n\n// GRC20Interface is the interface for GRC20 tokens\n// It is used to interact with the GRC20 tokens without importing but by registering each tokens function\ntype GRC20Interface interface {\n\tTransfer() func(to pusers.AddressOrName, amount uint64)\n\tTransferFrom() func(from, to pusers.AddressOrName, amount uint64)\n\tBalanceOf() func(owner pusers.AddressOrName) uint64\n\tApprove() func(spender pusers.AddressOrName, amount uint64)\n}\n\nvar (\n\tregistered = make(map[string]GRC20Interface)\n\tlocked     = false // mutex\n)\n\n// GetRegisteredTokens returns a list of all registered tokens\nfunc GetRegisteredTokens() []string {\n\ttokens := make([]string, 0, len(registered))\n\tfor k := range registered {\n\t\ttokens = append(tokens, k)\n\t}\n\treturn tokens\n}\n\n// RegisterGRC20Interface registers a GRC20 token interface\n//\n// Panics if any of the following conditions are met:\n// - caller is not the admin\n// - token already registered\nfunc RegisterGRC20Interface(pkgPath string, igrc20 GRC20Interface) {\n\tcaller := std.GetOrigCaller()\n\tif caller != consts.TOKEN_REGISTER {\n\t\tpanic(ufmt.Sprintf(\"[POOL] token_register.gno__RegisterGRC20Interface() || unauthorized address(%s) to register\", caller.String()))\n\t}\n\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif found {\n\t\tpanic(ufmt.Sprintf(\"[POOL] token_register.gno__RegisterGRC20Interface() || pkgPath(%s) already registered\", pkgPath))\n\t}\n\n\tregistered[pkgPath] = igrc20\n}\n\n// UnregisterGRC20Interface unregisters a GRC20 token interface\n//\n// Panics if any of the following conditions are met:\nfunc UnregisterGRC20Interface(pkgPath string) {\n\t// only admin can unregister\n\tcaller := std.GetOrigCaller()\n\tif caller != consts.TOKEN_REGISTER {\n\t\tpanic(ufmt.Sprintf(\"[POOL] token_register.gno__UnregisterGRC20Interface() || unauthorized address(%s) to unregister\", caller.String()))\n\t}\n\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif found {\n\t\tdelete(registered, pkgPath)\n\t}\n}\n\nfunc transferByRegisterCall(pkgPath string, to std.Address, amount uint64) bool {\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif !found {\n\t\tpanic(ufmt.Sprintf(\"[POOL] token_register.gno__transferByRegisterCall() || pkgPath(%s) not found\", pkgPath))\n\t}\n\n\tif !locked {\n\t\tlocked = true\n\t\tregistered[pkgPath].Transfer()(pusers.AddressOrName(to), amount)\n\n\t\tdefer func() {\n\t\t\tlocked = false\n\t\t}()\n\t} else {\n\t\tpanic(\"[POOl] token_register.gno__transferByRegisterCall() || expected locked to be false\")\n\t}\n\n\treturn true\n}\n\nfunc transferFromByRegisterCall(pkgPath string, from, to std.Address, amount uint64) bool {\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif !found {\n\t\tpanic(ufmt.Sprintf(\"[POOL] token_register.gno__transferFromByRegisterCall() || pkgPath(%s) not found\", pkgPath))\n\t}\n\n\tif !locked {\n\t\tlocked = true\n\t\tregistered[pkgPath].TransferFrom()(pusers.AddressOrName(from), pusers.AddressOrName(to), amount)\n\n\t\tdefer func() {\n\t\t\tlocked = false\n\t\t}()\n\t} else {\n\t\tpanic(\"[POOl] token_register.gno__transferFromByRegisterCall() || expected locked to be false\")\n\t}\n\treturn true\n}\n\nfunc balanceOfByRegisterCall(pkgPath string, owner std.Address) uint64 {\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif !found {\n\t\tpanic(ufmt.Sprintf(\"[POOL] token_register.gno__balanceOfByRegisterCall() || pkgPath(%s) not found\", pkgPath))\n\t}\n\n\tbalance := registered[pkgPath].BalanceOf()(pusers.AddressOrName(owner))\n\treturn balance\n}\n\nfunc approveByRegisterCall(pkgPath string, spender std.Address, amount uint64) bool {\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif !found {\n\t\tpanic(ufmt.Sprintf(\"[POOL] token_register.gno__approveByRegisterCall() || pkgPath(%s) not found\", pkgPath))\n\t}\n\n\tregistered[pkgPath].Approve()(pusers.AddressOrName(spender), amount)\n\n\treturn true\n}\n\nfunc handleNative(pkgPath string) string {\n\tif pkgPath == consts.GNOT {\n\t\treturn consts.WRAPPED_WUGNOT\n\t}\n\n\treturn pkgPath\n}\n"},{"name":"type.gno","body":"package pool\n\nimport (\n\t\"std\"\n\n\ti256 \"gno.land/p/gnoswap/int256\"\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\ntype Slot0 struct {\n\tsqrtPriceX96 *u256.Uint // current price of the pool as a sqrt(token1/token0) Q96 value\n\ttick         int32      // current tick of the pool, i.e according to the last tick transition that was run\n\tfeeProtocol  uint8      // protocol fee for both tokens of the pool\n\tunlocked     bool       // whether the pool is currently locked to reentrancy\n}\n\ntype Balances struct {\n\t// current balance of the pool in token0/token1\n\ttoken0 *u256.Uint\n\ttoken1 *u256.Uint\n}\n\ntype ProtocolFees struct {\n\t// current protocol fees of the pool in token0/token1\n\ttoken0 *u256.Uint\n\ttoken1 *u256.Uint\n}\n\ntype ModifyPositionParams struct {\n\towner std.Address // address that owns the position\n\n\t// the tick range of the position, bounds are included\n\ttickLower int32\n\ttickUpper int32\n\n\tliquidityDelta *i256.Int // any change in liquidity\n}\n\ntype SwapCache struct {\n\tfeeProtocol    uint8      // protocol fee for the input token\n\tliquidityStart *u256.Uint // liquidity at the beginning of the swap\n}\n\nfunc newSwapCache(\n\tfeeProtocol uint8,\n\tliquidityStart *u256.Uint,\n) SwapCache {\n\treturn SwapCache{\n\t\tfeeProtocol:    feeProtocol,\n\t\tliquidityStart: liquidityStart,\n\t}\n}\n\ntype SwapState struct {\n\tamountSpecifiedRemaining *i256.Int  // amount remaining to be swapped in/out of the input/output token\n\tamountCalculated         *i256.Int  // amount already swapped out/in of the output/input token\n\tsqrtPriceX96             *u256.Uint // current sqrt(price)\n\ttick                     int32      // tick associated with the current sqrt(price)\n\tfeeGrowthGlobalX128      *u256.Uint // global fee growth of the input token\n\tprotocolFee              *u256.Uint // amount of input token paid as protocol fee\n\tliquidity                *u256.Uint // current liquidity in range\n}\n\nfunc (pool *Pool) newSwapState(\n\tamountSpecifiedRemaining *i256.Int,\n\tfeeGrowthGlobalX128 *u256.Uint,\n\tliquidity *u256.Uint,\n) SwapState {\n\tslot0 := pool.slot0\n\n\treturn SwapState{\n\t\tamountSpecifiedRemaining: amountSpecifiedRemaining,\n\t\tamountCalculated:         i256.Zero(),\n\t\tsqrtPriceX96:             slot0.sqrtPriceX96,\n\t\ttick:                     slot0.tick,\n\t\tfeeGrowthGlobalX128:      feeGrowthGlobalX128,\n\t\tprotocolFee:              u256.Zero(),\n\t\tliquidity:                liquidity,\n\t}\n}\n\ntype StepComputations struct {\n\tsqrtPriceStartX96 *u256.Uint // price at the beginning of the step\n\ttickNext          int32      // next tick to swap to from the current tick in the swap direction\n\tinitialized       bool       // whether tickNext is initialized\n\tsqrtPriceNextX96  *u256.Uint // sqrt(price) for the next tick (token1/token0) Q96\n\tamountIn          *u256.Uint // how much being swapped in this step\n\tamountOut         *u256.Uint // how much is being swapped out in this step\n\tfeeAmount         *u256.Uint // how much fee is being paid in this step\n}\n\ntype PositionInfo struct {\n\tliquidity *u256.Uint // amount of liquidity owned by this position\n\n\t// fee growth per unit of liquidity as of the last update to liquidity or fees owed\n\tfeeGrowthInside0LastX128 *u256.Uint\n\tfeeGrowthInside1LastX128 *u256.Uint\n\n\t// fees owed to the position owner in token0/token1\n\ttokensOwed0 *u256.Uint\n\ttokensOwed1 *u256.Uint\n}\n\nfunc (p *PositionInfo) init() {\n\tp.liquidity = p.liquidity.NilToZero()\n\tp.feeGrowthInside0LastX128 = p.feeGrowthInside0LastX128.NilToZero()\n\tp.feeGrowthInside1LastX128 = p.feeGrowthInside1LastX128.NilToZero()\n\tp.tokensOwed0 = p.tokensOwed0.NilToZero()\n\tp.tokensOwed1 = p.tokensOwed1.NilToZero()\n}\n\ntype TickInfo struct {\n\tliquidityGross *u256.Uint // total position liquidity that references this tick\n\tliquidityNet   *i256.Int  // amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left)\n\n\t// fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\n\t// only has relative meaning, not absolute — the value depends on when the tick is initialized\n\tfeeGrowthOutside0X128 *u256.Uint\n\tfeeGrowthOutside1X128 *u256.Uint\n\n\ttickCumulativeOutside int64 // cumulative tick value on the other side of the tick\n\n\t// the seconds per unit of liquidity on the _other_ side of this tick (relative to the current tick)\n\t// only has relative meaning, not absolute — the value depends on when the tick is initialized\n\tsecondsPerLiquidityOutsideX128 *u256.Uint\n\n\t// the seconds spent on the other side of the tick (relative to the current tick)\n\t// only has relative meaning, not absolute — the value depends on when the tick is initialized\n\tsecondsOutside uint32\n\n\tinitialized bool // whether the tick is initialized\n}\n\nfunc (t *TickInfo) init() {\n\tt.liquidityGross = t.liquidityGross.NilToZero()\n\tt.liquidityNet = t.liquidityNet.NilToZero()\n\tt.feeGrowthOutside0X128 = t.feeGrowthOutside0X128.NilToZero()\n\tt.feeGrowthOutside1X128 = t.feeGrowthOutside1X128.NilToZero()\n\tt.secondsPerLiquidityOutsideX128 = t.secondsPerLiquidityOutsideX128.NilToZero()\n}\n\ntype Ticks map[int32]TickInfo          // tick =\u003e TickInfo\ntype TickBitmaps map[int16]*u256.Uint  // tick(wordPos) =\u003e bitmap(tickWord ^ mask)\ntype Positions map[string]PositionInfo // positionKey =\u003e PositionInfo\n\n// type Pool describes a single Pool's state\n// A pool is identificed with a unique key (token0, token1, fee), where token0 \u003c token1\ntype Pool struct {\n\t// token0/token1 path of the pool\n\ttoken0Path string\n\ttoken1Path string\n\n\tbalances Balances // balances of the pool\n\n\tfee uint32 // fee tier of the pool\n\n\ttickSpacing int32 // spacing between ticks\n\n\tmaxLiquidityPerTick *u256.Uint // the maximum amount of liquidity that can be added per tick\n\n\tslot0 Slot0\n\n\tfeeGrowthGlobal0X128 *u256.Uint // uint256\n\tfeeGrowthGlobal1X128 *u256.Uint // uint256\n\n\tprotocolFees ProtocolFees\n\n\tliquidity *u256.Uint // total amount of liquidity in the pool\n\n\tticks Ticks // maps tick index to tick\n\n\ttickBitmaps TickBitmaps // maps tick index to tick bitmap\n\n\tpositions Positions // maps the key (caller, lower tick, upper tick) to a unique position\n}\n"},{"name":"utils.gno","body":"package pool\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\tpusers \"gno.land/p/demo/users\"\n\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\nfunc a2u(addr std.Address) pusers.AddressOrName {\n\treturn pusers.AddressOrName(addr)\n}\n\nfunc u256Min(num1, num2 *u256.Uint) *u256.Uint {\n\tif num1.Lt(num2) {\n\t\treturn num1\n\t}\n\n\treturn num2\n}\n\nfunc uint8ToStr(i uint8) string {\n\treturn strconv.FormatInt(int64(i), 10)\n}\n\nfunc int32ToStr(i int32) string {\n\treturn strconv.FormatInt(int64(i), 10)\n}\n\nfunc uint64ToStr(i uint64) string {\n\treturn strconv.FormatInt(int64(i), 10)\n}\n\nfunc boolToStr(b bool) string {\n\tif b {\n\t\treturn \"true\"\n\t}\n\n\treturn \"false\"\n}\n\nfunc origCaller() string {\n\treturn std.GetOrigCaller().String()\n}\n\nfunc prevRealm() string {\n\treturn std.PrevRealm().PkgPath()\n}\n\nfunc callType() string {\n\tif prevRealm() == \"\" {\n\t\treturn \"DIRECT\"\n\t}\n\n\treturn \"INDIRECT\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"gKHJOvEsl4G32r4wB/SMVo9KkT3ymp5UB0q6tMeIInVU45jrsvhsTAgS5ozF9UPX8NLnY17zk1FIWTfymkJBLA=="}],"memo":""},"blockNum":"147635"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","package":{"name":"position","path":"gno.land/r/gnoswap/position","files":[{"name":"_GET_no_receiver.gno.gno","body":"package position\n\nimport (\n\t\"std\"\n\n\tu256 \"gno.land/p/gnoswap/uint256\"\n\n\tpl \"gno.land/r/gnoswap/pool\"\n)\n\n// type Position\nfunc PositionGetPosition(tokenId uint64) Position {\n\treturn positions[tokenId]\n}\n\nfunc PositionGetPositionNonce(tokenId uint64) *u256.Uint {\n\treturn positions[tokenId].nonce\n}\n\nfunc PositionGetPositionOperator(tokenId uint64) std.Address {\n\treturn positions[tokenId].operator\n}\n\nfunc PositionGetPositionPoolKey(tokenId uint64) string {\n\treturn positions[tokenId].poolKey\n}\n\nfunc PositionGetPositionTickLower(tokenId uint64) int32 {\n\treturn positions[tokenId].tickLower\n}\n\nfunc PositionGetPositionTickUpper(tokenId uint64) int32 {\n\treturn positions[tokenId].tickUpper\n}\n\nfunc PositionGetPositionLiquidity(tokenId uint64) *u256.Uint {\n\treturn positions[tokenId].liquidity\n}\n\nfunc PositionGetPositionFeeGrowthInside0LastX128(tokenId uint64) *u256.Uint {\n\treturn positions[tokenId].feeGrowthInside0LastX128\n}\n\nfunc PositionGetPositionFeeGrowthInside1LastX128(tokenId uint64) *u256.Uint {\n\treturn positions[tokenId].feeGrowthInside1LastX128\n}\n\nfunc PositionGetPositionTokensOwed0(tokenId uint64) *u256.Uint {\n\treturn positions[tokenId].tokensOwed0\n}\n\nfunc PositionGetPositionTokensOwed1(tokenId uint64) *u256.Uint {\n\treturn positions[tokenId].tokensOwed1\n}\n\nfunc PositionIsInRange(tokenId uint64) bool {\n\tposition := positions[tokenId]\n\tpoolPath := position.poolKey\n\tpoolCurrentTick := pl.PoolGetSlot0Tick(poolPath)\n\n\tif position.tickLower \u003c= poolCurrentTick \u0026\u0026 poolCurrentTick \u003c= position.tickUpper {\n\t\treturn true\n\t}\n\n\treturn false\n}\n"},{"name":"_GET_no_receiver_string.gno","body":"package position\n\n// type Position\nfunc PositionGetPositionNonceStr(tokenId uint64) string {\n\treturn positions[tokenId].nonce.ToString()\n}\n\nfunc PositionGetPositionLiquidityStr(tokenId uint64) string {\n\treturn positions[tokenId].liquidity.ToString()\n}\n\nfunc PositionGetPositionFeeGrowthInside0LastX128Str(tokenId uint64) string {\n\treturn positions[tokenId].feeGrowthInside0LastX128.ToString()\n}\n\nfunc PositionGetPositionFeeGrowthInside1LastX128Str(tokenId uint64) string {\n\treturn positions[tokenId].feeGrowthInside1LastX128.ToString()\n}\n\nfunc PositionGetPositionTokensOwed0Str(tokenId uint64) string {\n\treturn positions[tokenId].tokensOwed0.ToString()\n}\n\nfunc PositionGetPositionTokensOwed1Str(tokenId uint64) string {\n\treturn positions[tokenId].tokensOwed1.ToString()\n}\n"},{"name":"_RPC_api.gno","body":"package position\n\nimport (\n\t\"std\"\n\t\"time\"\n\n\t\"gno.land/p/demo/json\"\n\t\"gno.land/p/demo/ufmt\"\n\n\t\"gno.land/r/gnoswap/common\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\n\tpl \"gno.land/r/gnoswap/pool\"\n\n\ti256 \"gno.land/p/gnoswap/int256\"\n)\n\ntype RpcPosition struct {\n\tLpTokenId                uint64 `json:\"lpTokenId\"`\n\tBurned                   bool   `json:\"burned\"`\n\tOperator                 string `json:\"operator\"`\n\tPoolKey                  string `json:\"poolKey\"`\n\tTickLower                int32  `json:\"tickLower\"`\n\tTickUpper                int32  `json:\"tickUpper\"`\n\tLiquidity                string `json:\"liquidity\"`\n\tFeeGrowthInside0LastX128 string `json:\"feeGrowthInside0LastX128\"`\n\tFeeGrowthInside1LastX128 string `json:\"feeGrowthInside1LastX128\"`\n\tTokensOwed0              string `json:\"token0Owed\"`\n\tTokensOwed1              string `json:\"token1Owed\"`\n\n\tToken0Balance string `json:\"token0Balance\"`\n\tToken1Balance string `json:\"token1Balance\"`\n\tFeeUnclaimed0 string `json:\"fee0Unclaimed\"`\n\tFeeUnclaimed1 string `json:\"fee1Unclaimed\"`\n}\n\ntype RpcUnclaimedFee struct {\n\tLpTokenId uint64 `json:\"lpTokenId\"`\n\tFee0      string `json:\"fee0\"`\n\tFee1      string `json:\"fee1\"`\n}\n\ntype ResponseQueryBase struct {\n\tHeight    int64 `json:\"height\"`\n\tTimestamp int64 `json:\"timestamp\"`\n}\n\ntype ResponseApiGetPositions struct {\n\tStat     ResponseQueryBase `json:\"stat\"`\n\tResponse []RpcPosition     `json:\"response\"`\n}\n\nfunc ApiGetPositions() string {\n\trpcPositions := []RpcPosition{}\n\tfor lpTokenId, _ := range positions {\n\t\trpcPosition := rpcMakePosition(lpTokenId)\n\t\trpcPositions = append(rpcPositions, rpcPosition)\n\t}\n\n\tr := ResponseApiGetPositions{\n\t\tStat: ResponseQueryBase{\n\t\t\tHeight:    std.GetHeight(),\n\t\t\tTimestamp: time.Now().Unix(),\n\t\t},\n\t\tResponse: rpcPositions,\n\t}\n\n\t// STAT NODE\n\t_stat := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"height\":    json.NumberNode(\"height\", float64(std.GetHeight())),\n\t\t\"timestamp\": json.NumberNode(\"timestamp\", float64(time.Now().Unix())),\n\t})\n\n\t// RESPONSE (ARRAY) NODE\n\tresponses := json.ArrayNode(\"\", []*json.Node{})\n\tfor _, position := range r.Response {\n\t\t_positionNode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"lpTokenId\":                json.NumberNode(\"lpTokenId\", float64(position.LpTokenId)),\n\t\t\t\"burned\":                   json.BoolNode(\"burned\", position.Burned),\n\t\t\t\"operator\":                 json.StringNode(\"operator\", position.Operator),\n\t\t\t\"poolKey\":                  json.StringNode(\"poolKey\", position.PoolKey),\n\t\t\t\"tickLower\":                json.NumberNode(\"tickLower\", float64(position.TickLower)),\n\t\t\t\"tickUpper\":                json.NumberNode(\"tickUpper\", float64(position.TickUpper)),\n\t\t\t\"liquidity\":                json.StringNode(\"liquidity\", position.Liquidity),\n\t\t\t\"feeGrowthInside0LastX128\": json.StringNode(\"feeGrowthInside0LastX128\", position.FeeGrowthInside0LastX128),\n\t\t\t\"feeGrowthInside1LastX128\": json.StringNode(\"feeGrowthInside1LastX128\", position.FeeGrowthInside1LastX128),\n\t\t\t\"token0Owed\":               json.StringNode(\"token0Owed\", position.TokensOwed0),\n\t\t\t\"token1Owed\":               json.StringNode(\"token1Owed\", position.TokensOwed1),\n\t\t\t\"token0Balance\":            json.StringNode(\"token0Balance\", position.Token0Balance),\n\t\t\t\"token1Balance\":            json.StringNode(\"token1Balance\", position.Token1Balance),\n\t\t\t\"fee0Unclaimed\":            json.StringNode(\"fee0Unclaimed\", position.FeeUnclaimed0),\n\t\t\t\"fee1Unclaimed\":            json.StringNode(\"fee1Unclaimed\", position.FeeUnclaimed1),\n\t\t})\n\t\tresponses.AppendArray(_positionNode)\n\t}\n\n\tnode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"stat\":     _stat,\n\t\t\"response\": responses,\n\t})\n\n\tb, err := json.Marshal(node)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[POSITION] _RPC_api.gno__ApiGetPositions() || error marshalling json: %s\", err.Error()))\n\t}\n\n\treturn string(b)\n}\n\nfunc ApiGetPosition(lpTokenId uint64) string {\n\trpcPositions := []RpcPosition{}\n\n\t_, ok := positions[lpTokenId]\n\tif ok {\n\t\trpcPosition := rpcMakePosition(lpTokenId)\n\t\trpcPositions = append(rpcPositions, rpcPosition)\n\t}\n\n\tr := ResponseApiGetPositions{\n\t\tStat: ResponseQueryBase{\n\t\t\tHeight:    std.GetHeight(),\n\t\t\tTimestamp: time.Now().Unix(),\n\t\t},\n\t\tResponse: rpcPositions,\n\t}\n\n\t// STAT NODE\n\t_stat := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"height\":    json.NumberNode(\"height\", float64(std.GetHeight())),\n\t\t\"timestamp\": json.NumberNode(\"timestamp\", float64(time.Now().Unix())),\n\t})\n\n\t// RESPONSE (ARRAY) NODE\n\tresponses := json.ArrayNode(\"\", []*json.Node{})\n\tfor _, position := range r.Response {\n\t\t_positionNode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"lpTokenId\":                json.NumberNode(\"lpTokenId\", float64(position.LpTokenId)),\n\t\t\t\"burned\":                   json.BoolNode(\"burned\", position.Burned),\n\t\t\t\"operator\":                 json.StringNode(\"operator\", position.Operator),\n\t\t\t\"poolKey\":                  json.StringNode(\"poolKey\", position.PoolKey),\n\t\t\t\"tickLower\":                json.NumberNode(\"tickLower\", float64(position.TickLower)),\n\t\t\t\"tickUpper\":                json.NumberNode(\"tickUpper\", float64(position.TickUpper)),\n\t\t\t\"liquidity\":                json.StringNode(\"liquidity\", position.Liquidity),\n\t\t\t\"feeGrowthInside0LastX128\": json.StringNode(\"feeGrowthInside0LastX128\", position.FeeGrowthInside0LastX128),\n\t\t\t\"feeGrowthInside1LastX128\": json.StringNode(\"feeGrowthInside1LastX128\", position.FeeGrowthInside1LastX128),\n\t\t\t\"token0Owed\":               json.StringNode(\"token0Owed\", position.TokensOwed0),\n\t\t\t\"token1Owed\":               json.StringNode(\"token1Owed\", position.TokensOwed1),\n\t\t\t\"token0Balance\":            json.StringNode(\"token0Balance\", position.Token0Balance),\n\t\t\t\"token1Balance\":            json.StringNode(\"token1Balance\", position.Token1Balance),\n\t\t\t\"fee0Unclaimed\":            json.StringNode(\"fee0Unclaimed\", position.FeeUnclaimed0),\n\t\t\t\"fee1Unclaimed\":            json.StringNode(\"fee1Unclaimed\", position.FeeUnclaimed1),\n\t\t})\n\t\tresponses.AppendArray(_positionNode)\n\t}\n\n\tnode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"stat\":     _stat,\n\t\t\"response\": responses,\n\t})\n\n\tb, err := json.Marshal(node)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[POSITION] _RPC_api.gno__ApiGetPositions() || error marshalling json: %s\", err.Error()))\n\t}\n\n\treturn string(b)\n}\n\nfunc ApiGetPositionsByPoolPath(poolPath string) string {\n\trpcPositions := []RpcPosition{}\n\tfor lpTokenId, position := range positions {\n\n\t\tif position.poolKey != poolPath {\n\t\t\tcontinue\n\t\t}\n\n\t\trpcPosition := rpcMakePosition(lpTokenId)\n\t\trpcPositions = append(rpcPositions, rpcPosition)\n\t}\n\n\tr := ResponseApiGetPositions{\n\t\tStat: ResponseQueryBase{\n\t\t\tHeight:    std.GetHeight(),\n\t\t\tTimestamp: time.Now().Unix(),\n\t\t},\n\t\tResponse: rpcPositions,\n\t}\n\n\t// STAT NODE\n\t_stat := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"height\":    json.NumberNode(\"height\", float64(std.GetHeight())),\n\t\t\"timestamp\": json.NumberNode(\"timestamp\", float64(time.Now().Unix())),\n\t})\n\n\t// RESPONSE (ARRAY) NODE\n\tresponses := json.ArrayNode(\"\", []*json.Node{})\n\tfor _, position := range r.Response {\n\t\t_positionNode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"lpTokenId\":                json.NumberNode(\"lpTokenId\", float64(position.LpTokenId)),\n\t\t\t\"burned\":                   json.BoolNode(\"burned\", position.Burned),\n\t\t\t\"operator\":                 json.StringNode(\"operator\", position.Operator),\n\t\t\t\"poolKey\":                  json.StringNode(\"poolKey\", position.PoolKey),\n\t\t\t\"tickLower\":                json.NumberNode(\"tickLower\", float64(position.TickLower)),\n\t\t\t\"tickUpper\":                json.NumberNode(\"tickUpper\", float64(position.TickUpper)),\n\t\t\t\"liquidity\":                json.StringNode(\"liquidity\", position.Liquidity),\n\t\t\t\"feeGrowthInside0LastX128\": json.StringNode(\"feeGrowthInside0LastX128\", position.FeeGrowthInside0LastX128),\n\t\t\t\"feeGrowthInside1LastX128\": json.StringNode(\"feeGrowthInside1LastX128\", position.FeeGrowthInside1LastX128),\n\t\t\t\"token0Owed\":               json.StringNode(\"token0Owed\", position.TokensOwed0),\n\t\t\t\"token1Owed\":               json.StringNode(\"token1Owed\", position.TokensOwed1),\n\t\t\t\"token0Balance\":            json.StringNode(\"token0Balance\", position.Token0Balance),\n\t\t\t\"token1Balance\":            json.StringNode(\"token1Balance\", position.Token1Balance),\n\t\t\t\"fee0Unclaimed\":            json.StringNode(\"fee0Unclaimed\", position.FeeUnclaimed0),\n\t\t\t\"fee1Unclaimed\":            json.StringNode(\"fee1Unclaimed\", position.FeeUnclaimed1),\n\t\t})\n\t\tresponses.AppendArray(_positionNode)\n\t}\n\n\tnode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"stat\":     _stat,\n\t\t\"response\": responses,\n\t})\n\n\tb, err := json.Marshal(node)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[POSITION] _RPC_api.gno__ApiGetPositions() || error marshalling json: %s\", err.Error()))\n\t}\n\n\treturn string(b)\n}\n\nfunc ApiGetPositionsByAddress(address string) string {\n\trpcPositions := []RpcPosition{}\n\tfor lpTokenId, position := range positions {\n\n\t\tif position.operator.String() != address {\n\t\t\tcontinue\n\t\t}\n\n\t\trpcPosition := rpcMakePosition(lpTokenId)\n\t\trpcPositions = append(rpcPositions, rpcPosition)\n\t}\n\n\tr := ResponseApiGetPositions{\n\t\tStat: ResponseQueryBase{\n\t\t\tHeight:    std.GetHeight(),\n\t\t\tTimestamp: time.Now().Unix(),\n\t\t},\n\t\tResponse: rpcPositions,\n\t}\n\n\t// STAT NODE\n\t_stat := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"height\":    json.NumberNode(\"height\", float64(std.GetHeight())),\n\t\t\"timestamp\": json.NumberNode(\"timestamp\", float64(time.Now().Unix())),\n\t})\n\n\t// RESPONSE (ARRAY) NODE\n\tresponses := json.ArrayNode(\"\", []*json.Node{})\n\tfor _, position := range r.Response {\n\t\t_positionNode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"lpTokenId\":                json.NumberNode(\"lpTokenId\", float64(position.LpTokenId)),\n\t\t\t\"burned\":                   json.BoolNode(\"burned\", position.Burned),\n\t\t\t\"operator\":                 json.StringNode(\"operator\", position.Operator),\n\t\t\t\"poolKey\":                  json.StringNode(\"poolKey\", position.PoolKey),\n\t\t\t\"tickLower\":                json.NumberNode(\"tickLower\", float64(position.TickLower)),\n\t\t\t\"tickUpper\":                json.NumberNode(\"tickUpper\", float64(position.TickUpper)),\n\t\t\t\"liquidity\":                json.StringNode(\"liquidity\", position.Liquidity),\n\t\t\t\"feeGrowthInside0LastX128\": json.StringNode(\"feeGrowthInside0LastX128\", position.FeeGrowthInside0LastX128),\n\t\t\t\"feeGrowthInside1LastX128\": json.StringNode(\"feeGrowthInside1LastX128\", position.FeeGrowthInside1LastX128),\n\t\t\t\"token0Owed\":               json.StringNode(\"token0Owed\", position.TokensOwed0),\n\t\t\t\"token1Owed\":               json.StringNode(\"token1Owed\", position.TokensOwed1),\n\t\t\t\"token0Balance\":            json.StringNode(\"token0Balance\", position.Token0Balance),\n\t\t\t\"token1Balance\":            json.StringNode(\"token1Balance\", position.Token1Balance),\n\t\t\t\"fee0Unclaimed\":            json.StringNode(\"fee0Unclaimed\", position.FeeUnclaimed0),\n\t\t\t\"fee1Unclaimed\":            json.StringNode(\"fee1Unclaimed\", position.FeeUnclaimed1),\n\t\t})\n\t\tresponses.AppendArray(_positionNode)\n\t}\n\n\tnode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"stat\":     _stat,\n\t\t\"response\": responses,\n\t})\n\n\tb, err := json.Marshal(node)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[POSITION] _RPC_api.gno__ApiGetPositions() || error marshalling json: %s\", err.Error()))\n\t}\n\n\treturn string(b)\n}\n\nfunc ApiGetPositionsUnclaimedFee() string {\n\trpcUnclaimedFee := []RpcUnclaimedFee{}\n\tfor lpTokenId, _ := range positions {\n\t\tunclaimedFee0, unclaimedFee1 := unclaimedFee(lpTokenId)\n\t\trpcUnclaimedFee = append(rpcUnclaimedFee, RpcUnclaimedFee{\n\t\t\tLpTokenId: lpTokenId,\n\t\t\tFee0:      unclaimedFee0.ToString(),\n\t\t\tFee1:      unclaimedFee1.ToString(),\n\t\t})\n\t}\n\n\t// STAT NODE\n\t_stat := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"height\":    json.NumberNode(\"height\", float64(std.GetHeight())),\n\t\t\"timestamp\": json.NumberNode(\"timestamp\", float64(time.Now().Unix())),\n\t})\n\n\t// RESPONSE (ARRAY) NODE\n\tresponses := json.ArrayNode(\"\", []*json.Node{})\n\tfor _, unclaimedFee := range rpcUnclaimedFee {\n\t\t_unclaimedFeeNode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"lpTokenId\": json.NumberNode(\"lpTokenId\", float64(unclaimedFee.LpTokenId)),\n\t\t\t\"fee0\":      json.StringNode(\"fee0\", unclaimedFee.Fee0),\n\t\t\t\"fee1\":      json.StringNode(\"fee1\", unclaimedFee.Fee1),\n\t\t})\n\t\tresponses.AppendArray(_unclaimedFeeNode)\n\t}\n\n\tnode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"stat\":     _stat,\n\t\t\"response\": responses,\n\t})\n\n\tb, err := json.Marshal(node)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[POSITION] _RPC_api.gno__ApiGetPositionsUnClaimedFee() || error marshalling json: %s\", err.Error()))\n\t}\n\n\treturn string(b)\n}\n\nfunc ApiGetPositionUnclaimedFeeByLpTokenId(lpTokenId uint64) string {\n\trpcUnclaimedFee := []RpcUnclaimedFee{}\n\n\tunclaimedFee0, unclaimedFee1 := unclaimedFee(lpTokenId)\n\trpcUnclaimedFee = append(rpcUnclaimedFee, RpcUnclaimedFee{\n\t\tLpTokenId: lpTokenId,\n\t\tFee0:      unclaimedFee0.ToString(),\n\t\tFee1:      unclaimedFee1.ToString(),\n\t})\n\n\t// STAT NODE\n\t_stat := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"height\":    json.NumberNode(\"height\", float64(std.GetHeight())),\n\t\t\"timestamp\": json.NumberNode(\"timestamp\", float64(time.Now().Unix())),\n\t})\n\n\t// RESPONSE (ARRAY) NODE\n\tresponses := json.ArrayNode(\"\", []*json.Node{})\n\tfor _, unclaimedFee := range rpcUnclaimedFee {\n\t\t_unclaimedFeeNode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"lpTokenId\": json.NumberNode(\"lpTokenId\", float64(unclaimedFee.LpTokenId)),\n\t\t\t\"fee0\":      json.StringNode(\"fee0\", unclaimedFee.Fee0),\n\t\t\t\"fee1\":      json.StringNode(\"fee1\", unclaimedFee.Fee1),\n\t\t})\n\t\tresponses.AppendArray(_unclaimedFeeNode)\n\t}\n\n\tnode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"stat\":     _stat,\n\t\t\"response\": responses,\n\t})\n\n\tb, err := json.Marshal(node)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[POSITION] _RPC_api.gno__ApiGetPositionUnclaimedFeeByLpTokenId() || error marshalling json: %s\", err.Error()))\n\t}\n\n\treturn string(b)\n}\n\nfunc rpcMakePosition(lpTokenId uint64) RpcPosition {\n\tposition, exist := positions[lpTokenId]\n\tif !exist {\n\t\tpanic(ufmt.Sprintf(\"[POSITION] getter_api.gno__rpcMakePosition() || position not found for lpTokenId(%d)\", lpTokenId))\n\t}\n\n\tburned := isBurned(lpTokenId)\n\n\tpool := pl.GetPoolFromPoolPath(position.poolKey)\n\tcurrentX96 := pool.PoolGetSlot0SqrtPriceX96()\n\tlowerX96 := common.TickMathGetSqrtRatioAtTick(position.tickLower)\n\tupperX96 := common.TickMathGetSqrtRatioAtTick(position.tickUpper)\n\n\ttoken0Balance, token1Balance := common.GetAmountsForLiquidity(\n\t\tcurrentX96,\n\t\tlowerX96,\n\t\tupperX96,\n\t\ti256.FromUint256(position.liquidity),\n\t)\n\n\tunclaimedFee0 := i256.Zero()\n\tunclaimedFee1 := i256.Zero()\n\tif !burned {\n\t\tunclaimedFee0, unclaimedFee1 = unclaimedFee(lpTokenId)\n\t}\n\n\treturn RpcPosition{\n\t\tLpTokenId:                lpTokenId,\n\t\tBurned:                   burned,\n\t\tOperator:                 position.operator.String(),\n\t\tPoolKey:                  position.poolKey,\n\t\tTickLower:                position.tickLower,\n\t\tTickUpper:                position.tickUpper,\n\t\tLiquidity:                position.liquidity.ToString(),\n\t\tFeeGrowthInside0LastX128: position.feeGrowthInside0LastX128.ToString(),\n\t\tFeeGrowthInside1LastX128: position.feeGrowthInside1LastX128.ToString(),\n\t\tTokensOwed0:              position.tokensOwed0.ToString(),\n\t\tTokensOwed1:              position.tokensOwed1.ToString(),\n\t\tToken0Balance:            token0Balance,\n\t\tToken1Balance:            token1Balance,\n\t\tFeeUnclaimed0:            unclaimedFee0.ToString(),\n\t\tFeeUnclaimed1:            unclaimedFee1.ToString(),\n\t}\n}\n\nfunc unclaimedFee(tokenId uint64) (*i256.Int, *i256.Int) {\n\t// ref: https://blog.uniswap.org/uniswap-v3-math-primer-2#calculating-uncollected-fees\n\n\t_liquidity := positions[tokenId].liquidity // u256\n\tliquidity := i256.FromUint256(_liquidity)  // i256\n\n\ttickLower := positions[tokenId].tickLower\n\ttickUpper := positions[tokenId].tickUpper\n\n\tpoolKey := positions[tokenId].poolKey\n\tpool := pl.GetPoolFromPoolPath(poolKey)\n\n\tcurrentTick := pool.PoolGetSlot0Tick()\n\n\t_feeGrowthGlobal0X128 := pool.PoolGetFeeGrowthGlobal0X128()     // u256\n\tfeeGrowthGlobal0X128 := i256.FromUint256(_feeGrowthGlobal0X128) // i256\n\n\t_feeGrowthGlobal1X128 := pool.PoolGetFeeGrowthGlobal1X128()     // u256\n\tfeeGrowthGlobal1X128 := i256.FromUint256(_feeGrowthGlobal1X128) // i256\n\n\t_tickUpperFeeGrowthOutside0X128 := pool.PoolGetTickFeeGrowthOutside0X128(tickUpper) // u256\n\ttickUpperFeeGrowthOutside0X128 := i256.FromUint256(_tickUpperFeeGrowthOutside0X128) // i256\n\n\t_tickUpperFeeGrowthOutside1X128 := pool.PoolGetTickFeeGrowthOutside1X128(tickUpper) // u256\n\ttickUpperFeeGrowthOutside1X128 := i256.FromUint256(_tickUpperFeeGrowthOutside1X128) // i256\n\n\t_tickLowerFeeGrowthOutside0X128 := pool.PoolGetTickFeeGrowthOutside0X128(tickLower) // u256\n\ttickLowerFeeGrowthOutside0X128 := i256.FromUint256(_tickLowerFeeGrowthOutside0X128) // i256\n\n\t_tickLowerFeeGrowthOutside1X128 := pool.PoolGetTickFeeGrowthOutside1X128(tickLower) // u256\n\ttickLowerFeeGrowthOutside1X128 := i256.FromUint256(_tickLowerFeeGrowthOutside1X128) // i256\n\n\t_feeGrowthInside0LastX128 := positions[tokenId].feeGrowthInside0LastX128 // u256\n\tfeeGrowthInside0LastX128 := i256.FromUint256(_feeGrowthInside0LastX128)  // i256\n\n\t_feeGrowthInside1LastX128 := positions[tokenId].feeGrowthInside1LastX128 // u256\n\tfeeGrowthInside1LastX128 := i256.FromUint256(_feeGrowthInside1LastX128)  // i256\n\n\tvar tickLowerFeeGrowthBelow0, tickLowerFeeGrowthBelow1, tickUpperFeeGrowthAbove0, tickUpperFeeGrowthAbove1 *i256.Int\n\n\tif currentTick \u003e= tickUpper {\n\t\ttickUpperFeeGrowthAbove0 = subIn256(feeGrowthGlobal0X128, tickUpperFeeGrowthOutside0X128)\n\t\ttickUpperFeeGrowthAbove1 = subIn256(feeGrowthGlobal1X128, tickUpperFeeGrowthOutside1X128)\n\t} else {\n\t\ttickUpperFeeGrowthAbove0 = tickUpperFeeGrowthOutside0X128\n\t\ttickUpperFeeGrowthAbove1 = tickUpperFeeGrowthOutside1X128\n\t}\n\n\tif currentTick \u003e= tickLower {\n\t\ttickLowerFeeGrowthBelow0 = tickLowerFeeGrowthOutside0X128\n\t\ttickLowerFeeGrowthBelow1 = tickLowerFeeGrowthOutside1X128\n\t} else {\n\t\ttickLowerFeeGrowthBelow0 = subIn256(feeGrowthGlobal0X128, tickLowerFeeGrowthOutside0X128)\n\t\ttickLowerFeeGrowthBelow1 = subIn256(feeGrowthGlobal1X128, tickLowerFeeGrowthOutside1X128)\n\t}\n\n\tfeeGrowthInside0X128 := subIn256(feeGrowthGlobal0X128, tickLowerFeeGrowthBelow0)\n\tfeeGrowthInside0X128 = subIn256(feeGrowthInside0X128, tickUpperFeeGrowthAbove0)\n\n\tfeeGrowthInside1X128 := subIn256(feeGrowthGlobal1X128, tickLowerFeeGrowthBelow1)\n\tfeeGrowthInside1X128 = subIn256(feeGrowthInside1X128, tickUpperFeeGrowthAbove1)\n\n\tvalue01 := subIn256(feeGrowthInside0X128, feeGrowthInside0LastX128)\n\tvalue02 := i256.Zero().Mul(liquidity, value01)\n\tunclaimedFee0 := i256.Zero().Div(value02, i256.MustFromDecimal(consts.Q128))\n\n\tvalue11 := subIn256(feeGrowthInside1X128, feeGrowthInside1LastX128)\n\tvalue12 := i256.Zero().Mul(liquidity, value11)\n\tunclaimedFee1 := i256.Zero().Div(value12, i256.MustFromDecimal(consts.Q128))\n\n\treturn unclaimedFee0, unclaimedFee1\n}\n\nfunc subIn256(x, y *i256.Int) *i256.Int {\n\tvalue := i256.Zero()\n\tdiff := value.Sub(x, y)\n\n\tif diff.IsNeg() {\n\t\tq256 := i256.MustFromDecimal(consts.MAX_UINT256)\n\t\treturn diff.Add(diff, q256)\n\t}\n\n\treturn diff\n}\n\nfunc isBurned(tokenId uint64) bool {\n\treturn positions[tokenId].burned\n}\n"},{"name":"_RPC_dry.gno","body":"package position\n\nimport (\n\t\"gno.land/r/gnoswap/common\"\n\n\ti256 \"gno.land/p/gnoswap/int256\"\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\n// DryMint simulates a mint and returns the amount0, amount1 that would be minted\nfunc DryMint(\n\ttickCurrent int32,\n\ttickLower int32,\n\ttickUpper int32,\n\t_amount0Desired string,\n\t_amount1Desired string,\n) (string, string) {\n\t// FROM: position__liquidity_management.gno\n\tsqrtRatioX96 := common.TickMathGetSqrtRatioAtTick(tickCurrent)\n\tsqrtLowerX96 := common.TickMathGetSqrtRatioAtTick(tickLower)\n\tsqrtUpperX96 := common.TickMathGetSqrtRatioAtTick(tickUpper)\n\n\tamount0Desired := u256.MustFromDecimal(_amount0Desired)\n\tamount1Desired := u256.MustFromDecimal(_amount1Desired)\n\n\tliquidity := common.GetLiquidityForAmounts(\n\t\tsqrtRatioX96,\n\t\tsqrtLowerX96,\n\t\tsqrtUpperX96,\n\t\tamount0Desired,\n\t\tamount1Desired,\n\t)\n\ti256Liquidity := i256.FromUint256(liquidity)\n\n\t// FROM: pool__position_modify.gno\n\tvar amount0, amount1 *i256.Int\n\tif !(liquidity.IsZero()) { // != 0\n\t\tif tickCurrent \u003c tickLower {\n\t\t\tamount0Str := common.SqrtPriceMathGetAmount0DeltaStr(\n\t\t\t\tsqrtLowerX96,\n\t\t\t\tsqrtUpperX96,\n\t\t\t\ti256Liquidity,\n\t\t\t)\n\t\t\tamount0 = i256.MustFromDecimal(amount0Str)\n\t\t} else if tickCurrent \u003c tickUpper {\n\t\t\tamount0Str := common.SqrtPriceMathGetAmount0DeltaStr(\n\t\t\t\tsqrtRatioX96,\n\t\t\t\tsqrtUpperX96,\n\t\t\t\ti256Liquidity,\n\t\t\t)\n\t\t\tamount0 = i256.MustFromDecimal(amount0Str)\n\n\t\t\tamount1Str := common.SqrtPriceMathGetAmount1DeltaStr(\n\t\t\t\tsqrtLowerX96,\n\t\t\t\tsqrtRatioX96,\n\t\t\t\ti256Liquidity,\n\t\t\t)\n\t\t\tamount1 = i256.MustFromDecimal(amount1Str)\n\t\t} else {\n\t\t\tamount1Str := common.SqrtPriceMathGetAmount1DeltaStr(\n\t\t\t\tsqrtLowerX96,\n\t\t\t\tsqrtUpperX96,\n\t\t\t\ti256Liquidity,\n\t\t\t)\n\t\t\tamount1 = i256.MustFromDecimal(amount1Str)\n\t\t}\n\t}\n\tamount0 = amount0.NilToZero()\n\tamount1 = amount1.NilToZero()\n\n\treturn amount0.ToString(), amount1.ToString()\n}\n"},{"name":"__TEST_0_INIT_TOKEN_REGISTER_test.gno","body":"package position\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/onbloc/foo\"\n\n\t\"gno.land/r/onbloc/bar\"\n\n\t\"gno.land/r/onbloc/baz\"\n\n\t\"gno.land/r/onbloc/qux\"\n\n\t\"gno.land/r/demo/wugnot\"\n\n\t\"gno.land/r/onbloc/obl\"\n\n\t\"gno.land/r/gnoswap/gns\"\n\n\t\"gno.land/r/onbloc/usdc\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\n\tpusers \"gno.land/p/demo/users\"\n\n\tpl \"gno.land/r/gnoswap/pool\"\n)\n\ntype FooToken struct{}\n\nfunc (FooToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn foo.Transfer\n}\nfunc (FooToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn foo.TransferFrom\n}\nfunc (FooToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn foo.BalanceOf\n}\nfunc (FooToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn foo.Approve\n}\n\ntype BarToken struct{}\n\nfunc (BarToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn bar.Transfer\n}\nfunc (BarToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn bar.TransferFrom\n}\nfunc (BarToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn bar.BalanceOf\n}\nfunc (BarToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn bar.Approve\n}\n\ntype BazToken struct{}\n\nfunc (BazToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn baz.Transfer\n}\nfunc (BazToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn baz.TransferFrom\n}\nfunc (BazToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn baz.BalanceOf\n}\nfunc (BazToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn baz.Approve\n}\n\ntype QuxToken struct{}\n\nfunc (QuxToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn qux.Transfer\n}\nfunc (QuxToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn qux.TransferFrom\n}\nfunc (QuxToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn qux.BalanceOf\n}\nfunc (QuxToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn qux.Approve\n}\n\ntype WugnotToken struct{}\n\nfunc (WugnotToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn wugnot.Transfer\n}\nfunc (WugnotToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn wugnot.TransferFrom\n}\nfunc (WugnotToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn wugnot.BalanceOf\n}\nfunc (WugnotToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn wugnot.Approve\n}\n\ntype OBLToken struct{}\n\nfunc (OBLToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn obl.Transfer\n}\nfunc (OBLToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn obl.TransferFrom\n}\nfunc (OBLToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn obl.BalanceOf\n}\nfunc (OBLToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn obl.Approve\n}\n\ntype GNSToken struct{}\n\nfunc (GNSToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn gns.Transfer\n}\n\nfunc (GNSToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn gns.TransferFrom\n}\n\nfunc (GNSToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn gns.BalanceOf\n}\n\nfunc (GNSToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn gns.Approve\n}\n\ntype USDCToken struct{}\n\nfunc (USDCToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn usdc.Transfer\n}\n\nfunc (USDCToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn usdc.TransferFrom\n}\n\nfunc (USDCToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn usdc.BalanceOf\n}\n\nfunc (USDCToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn usdc.Approve\n}\n\nfunc init() {\n\tstd.TestSetOrigCaller(consts.TOKEN_REGISTER)\n\n\tpl.RegisterGRC20Interface(\"gno.land/r/onbloc/bar\", BarToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/onbloc/foo\", FooToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/onbloc/baz\", BazToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/onbloc/qux\", QuxToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/demo/wugnot\", WugnotToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/onbloc/obl\", OBLToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/gnoswap/gns\", GNSToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/onbloc/usdc\", USDCToken{})\n}\n"},{"name":"__TEST_0_INIT_VARS_HELPERS_test.gno","body":"package position\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\n\t\"gno.land/r/gnoswap/gnft\"\n\n\tpl \"gno.land/r/gnoswap/pool\"\n)\n\nvar (\n\tgsa   std.Address = consts.GNOSWAP_ADMIN\n\ttest1 std.Address = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\n\tfooPath string = \"gno.land/r/onbloc/foo\"\n\tbarPath string = \"gno.land/r/onbloc/bar\"\n\tbazPath string = \"gno.land/r/onbloc/baz\"\n\tquxPath string = \"gno.land/r/onbloc/qux\"\n\n\toblPath string = \"gno.land/r/onbloc/obl\"\n\t// wugnotPath string = \"gno.land/r/demo/wugnot\" // from consts\n\t// gnsPath string = \"gno.land/r/gnoswap/gns\" // from consts\n\n\tfee100  uint32 = 100\n\tfee500  uint32 = 500\n\tfee3000 uint32 = 3000\n\n\tmax_timeout int64 = 9999999999\n)\n\n// Realms to mock frames\nvar (\n\tgsaRealm = std.NewUserRealm(gsa)\n\tposRealm = std.NewCodeRealm(consts.POSITION_PATH)\n\trouRealm = std.NewCodeRealm(consts.ROUTER_PATH)\n\tstkRealm = std.NewCodeRealm(consts.STAKER_PATH)\n)\n\n/* HELPER */\nfunc shouldEQ(t *testing.T, got, expected interface{}) {\n\tif got != expected {\n\t\tt.Errorf(\"got %v, expected %v\", got, expected)\n\t}\n}\n\nfunc shouldNEQ(t *testing.T, got, expected interface{}) {\n\tif got == expected {\n\t\tt.Errorf(\"got %v, didn't expected %v\", got, expected)\n\t}\n}\n\nfunc shouldPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"expected panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc shouldPanicWithMsg(t *testing.T, f func(), msg string) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t} else {\n\t\t\tif r != msg {\n\t\t\t\tt.Errorf(\"excepted panic(%v), got(%v)\", msg, r)\n\t\t\t}\n\t\t}\n\t}()\n\tf()\n}\n\nfunc ugnotBalanceOf(addr std.Address) uint64 {\n\ttestBanker := std.GetBanker(std.BankerTypeRealmIssue)\n\n\tcoins := testBanker.GetCoins(addr)\n\tif len(coins) == 0 {\n\t\treturn 0\n\t}\n\n\treturn uint64(coins.AmountOf(\"ugnot\"))\n}\n\nfunc isOwner(t *testing.T, tokenId uint64, addr std.Address) bool {\n\towner := gnft.OwnerOf(tid(tokenId))\n\n\tif owner == addr {\n\t\treturn true\n\t}\n\n\tt.Errorf(\"expected owner %v, got %v\", addr, owner)\n\treturn false\n}\n\nfunc getPoolFromLpTokenId(lpTokenId uint64) *pl.Pool {\n\tposition := positions[lpTokenId]\n\n\treturn pl.GetPoolFromPoolPath(position.poolKey)\n}\n"},{"name":"gno.mod","body":"module gno.land/r/gnoswap/position\n\nrequire (\n\tgno.land/p/gnoswap/int256 v0.0.0-latest\n\tgno.land/p/gnoswap/uint256 v0.0.0-latest\n\tgno.land/p/demo/grc/grc721 v0.0.0-latest\n\tgno.land/p/demo/json v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n\tgno.land/p/demo/users v0.0.0-latest\n\tgno.land/r/gnoswap/gnft v0.0.0-latest\n\tgno.land/r/gnoswap/pool v0.0.0-latest\n\tgno.land/r/demo/wugnot v0.0.0-latest\n\tgno.land/r/gnoswap/common v0.0.0-latest\n\tgno.land/r/gnoswap/consts v0.0.0-latest\n)\n"},{"name":"gno_helper.gno","body":"package position\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/gnoswap/consts\"\n)\n\nfunc GetOrigPkgAddr() std.Address {\n\treturn consts.POSITION_ADDR\n}\n"},{"name":"helper.gno","body":"package position\n\nimport (\n\t\"strconv\"\n\n\t\"gno.land/p/demo/grc/grc721\"\n)\n\nfunc getNextId() uint64 {\n\treturn nextId\n}\n\nfunc tid(tokenId interface{}) grc721.TokenID {\n\tif tokenId == nil {\n\t\tpanic(\"[POSITION] test_helper.gno__tid() || tokenId is nil\")\n\t}\n\n\tswitch tokenId.(type) {\n\tcase string:\n\t\treturn grc721.TokenID(tokenId.(string))\n\tcase int:\n\t\treturn grc721.TokenID(strconv.Itoa(tokenId.(int)))\n\tcase uint64:\n\t\treturn grc721.TokenID(strconv.Itoa(int(tokenId.(uint64))))\n\tcase grc721.TokenID:\n\t\treturn tokenId.(grc721.TokenID)\n\tdefault:\n\t\tpanic(\"[POSITION] utils.gno__tid() || unsupported tokenId type\")\n\t}\n}\n"},{"name":"liquidity_management.gno","body":"package position\n\nimport (\n\t\"gno.land/r/gnoswap/common\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\n\tpl \"gno.land/r/gnoswap/pool\"\n\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\nfunc addLiquidity(params AddLiquidityParams) (*u256.Uint, *u256.Uint, *u256.Uint) { // uint128, uint256, uint256\n\tpool := pl.GetPoolFromPoolPath(params.poolKey)\n\n\tsqrtPriceX96 := pool.PoolGetSlot0SqrtPriceX96()\n\tsqrtRatioAX96 := common.TickMathGetSqrtRatioAtTick(params.tickLower)\n\tsqrtRatioBX96 := common.TickMathGetSqrtRatioAtTick(params.tickUpper)\n\n\tliquidity := common.GetLiquidityForAmounts(\n\t\tsqrtPriceX96,\n\t\tsqrtRatioAX96,\n\t\tsqrtRatioBX96,\n\t\tparams.amount0Desired,\n\t\tparams.amount1Desired,\n\t)\n\n\tpToken0, pToken1, pFee := poolKeyDivide(params.poolKey)\n\tamount0, amount1 := pl.Mint( // string(uint256), string(uint256)\n\t\tpToken0,                       // token0Path string\n\t\tpToken1,                       // token1Path string\n\t\tpFee,                          // fee uint16\n\t\tconsts.POSITION_ADDR.String(), // recipient std.Address\n\t\tparams.tickLower,              // tickLower int32\n\t\tparams.tickUpper,              // tickUpper int32\n\t\tliquidity.ToString(),          // _liquidityAmount string(uint128)\n\t)\n\n\tamount0Uint := u256.MustFromDecimal(amount0)\n\tamount1Uint := u256.MustFromDecimal(amount1)\n\n\tamount0Cond := amount0Uint.Gte(params.amount0Min)\n\tamount1Cond := amount1Uint.Gte(params.amount1Min)\n\n\tif !(amount0Cond \u0026\u0026 amount1Cond) {\n\t\tpanic(\"[POSITION] liquidity_management.gno__addLiquidity() || LM_Price Slippage Check\")\n\t}\n\n\treturn liquidity, amount0Uint, amount1Uint\n}\n"},{"name":"nft_helper.gno","body":"package position\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/gnoswap/consts\"\n\n\t\"gno.land/r/gnoswap/gnft\"\n)\n\nfunc exists(tokenId uint64) bool {\n\t// non exist tokenId will panic\n\t// use defer to catch the panic\n\tdefer func() {\n\t\tif err := recover(); err != nil {\n\t\t\tpanic(ufmt.Sprintf(\"[POSITION] nft_helper.gno__exists() || tokenId(%s) doesn't exist\", tokenId))\n\t\t}\n\t}()\n\n\t// exists method in grc721 is private\n\t// we don't have much choice but to use ownerOf\n\towner := gnft.OwnerOf(tid(tokenId))\n\tif owner == consts.ZERO_ADDRESS {\n\t\tpanic(ufmt.Sprintf(\"[POSITION] nft_helper.gno__exists() || tokenId(%s) doesn't exist__ZeroAddressOwner\", tokenId))\n\t\treturn false\n\t}\n\n\treturn true\n}\n\n// Error handling isn't necessary here\nfunc isApprovedOrOwner(addr std.Address, tokenId uint64) bool {\n\ttid := tid(tokenId)\n\n\t// check whether token exists\n\tif !exists(tokenId) {\n\t\tpanic(ufmt.Sprintf(\"[POSITION] nft_helper.gno__isApprovedOrOwner() || tokenId(%s) doesn't exist\", tokenId))\n\t}\n\n\t// check owner first\n\towner := gnft.OwnerOf(tid)\n\tif addr == owner {\n\t\treturn true\n\t}\n\n\t// if not owner, check whether approved in position contract\n\tposition, exist := positions[tokenId]\n\tif exist {\n\t\tif addr == position.operator {\n\t\t\treturn true\n\t\t}\n\t}\n\n\t// if not owner, check whether approved in actual grc721 contract\n\toperator, ok := gnft.GetApproved(tid)\n\tif ok \u0026\u0026 addr == operator {\n\t\treturn true\n\t}\n\n\treturn false\n}\n"},{"name":"position.gno","body":"package position\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/wugnot\"\n\t\"gno.land/r/gnoswap/gnft\"\n\n\tu256 \"gno.land/p/gnoswap/uint256\"\n\n\t\"gno.land/r/gnoswap/common\"\n\t\"gno.land/r/gnoswap/consts\"\n\n\ten \"gno.land/r/gnoswap/emission\"\n\tpl \"gno.land/r/gnoswap/pool\"\n)\n\nvar (\n\tpositions map[uint64]Position = make(map[uint64]Position) // tokenId -\u003e Position\n\tnextId    uint64              = 1                         // lp token id\n)\n\n// Mint creates a new position and mints liquidity tokens then return minted info\n//\n// Panics if any of the following conditions are met:\n// - caller is not user or staker\nfunc Mint(\n\ttoken0 string,\n\ttoken1 string,\n\tfee uint32,\n\ttickLower int32,\n\ttickUpper int32,\n\t_amount0Desired string, // *u256.Uint\n\t_amount1Desired string, // *u256.Uint\n\t_amount0Min string, // *u256.Uint\n\t_amount1Min string, // *u256.Uint\n\tdeadline int64,\n\tmintTo string,\n) (uint64, string, string, string) { // tokenId, liquidity, amount0, amount1 ( *u256.Uint x3 )\n\ten.MintAndDistributeGns()\n\n\tif common.GetLimitCaller() {\n\t\t// only user or staker can call\n\t\tisUserCalled := std.IsOriginCall()\n\t\tisStakerCalled := std.PrevRealm().Addr() == consts.STAKER_ADDR\n\t\tif !(isUserCalled || isStakerCalled) {\n\t\t\tpanic(\"POSITION] position.gno__Mint() || only user or staker can call\")\n\t\t}\n\t}\n\n\t// check if native ugnot is being minted\n\ttoken0IsNative := false\n\ttoken1IsNative := false\n\tif token0 == consts.GNOT {\n\t\ttoken0 = consts.WRAPPED_WUGNOT\n\t\ttoken0IsNative = true\n\t} else if token1 == consts.GNOT {\n\t\ttoken1 = consts.WRAPPED_WUGNOT\n\t\ttoken1IsNative = true\n\t}\n\tuserWugnotBalance := wugnot.BalanceOf(a2u(std.GetOrigCaller()))\n\n\tif token1 \u003c token0 {\n\t\ttoken0, token1 = token1, token0\n\t\t_amount0Desired, _amount1Desired = _amount1Desired, _amount0Desired\n\t\t_amount0Min, _amount1Min = _amount1Min, _amount0Min\n\t\ttickLower, tickUpper = -tickUpper, -tickLower\n\t\ttoken0IsNative, token1IsNative = token1IsNative, token0IsNative\n\t}\n\n\tamount0Desired := u256.MustFromDecimal(_amount0Desired)\n\tamount1Desired := u256.MustFromDecimal(_amount1Desired)\n\tamount0Min := u256.MustFromDecimal(_amount0Min)\n\tamount1Min := u256.MustFromDecimal(_amount1Min)\n\n\t// one of token amount can be 0 if position is out of range\n\t// check this condition by using DryMint()\n\tpoolPath := ufmt.Sprintf(\"%s:%s:%d\", token0, token1, fee)\n\n\tif token0IsNative || token1IsNative {\n\t\t// SEND GNOT: position -\u003e wugnot\n\t\toldUserWugnotBalance := wugnot.BalanceOf(a2u(std.GetOrigCaller()))\n\n\t\tsent := std.GetOrigSend()\n\t\tugnotSent := uint64(sent.AmountOf(\"ugnot\"))\n\t\tif ugnotSent \u003e 0 {\n\t\t\twrap(ugnotSent)\n\n\t\t\tnewUserWugnotBalance := wugnot.BalanceOf(a2u(std.GetOrigCaller()))\n\t\t\tif (newUserWugnotBalance - oldUserWugnotBalance) != ugnotSent {\n\t\t\t\tpanic(ufmt.Sprintf(\"[POSITION] position.gno__Mint() || wugnot sent(%d) != wugnot received(%d)\", ugnotSent, newUserWugnotBalance-oldUserWugnotBalance))\n\t\t\t}\n\t\t} else {\n\t\t\t// no ugnot sent\n\t\t\t// can be happen depending on current position range\n\t\t}\n\t}\n\n\tmintParams := MintParams{\n\t\ttoken0:         token0,\n\t\ttoken1:         token1,\n\t\tfee:            fee,\n\t\ttickLower:      tickLower,\n\t\ttickUpper:      tickUpper,\n\t\tamount0Desired: amount0Desired,\n\t\tamount1Desired: amount1Desired,\n\t\tamount0Min:     amount0Min,\n\t\tamount1Min:     amount1Min,\n\t\tdeadline:       deadline,\n\t\tmintTo:         std.Address(mintTo),\n\t}\n\n\ttokenId, liquidity, amount0, amount1 := mint(mintParams)\n\n\tif token0IsNative || token1IsNative {\n\t\t// if this is larger than before mint, unwrap rest\n\t\tuserWugnotAfterMint := wugnot.BalanceOf(a2u(std.GetOrigCaller()))\n\t\tleftOver := userWugnotAfterMint - userWugnotBalance\n\t\tif leftOver \u003e 0 {\n\t\t\tunwrap(leftOver)\n\t\t}\n\t}\n\n\tstd.Emit(\n\t\t\"GNOSWAP\",\n\t\t\"m_callType\", callType(),\n\t\t\"m_origCaller\", origCaller(),\n\t\t\"m_prevRealm\", prevRealm(),\n\t\t\"p_tickLower\", int32ToStr(tickLower),\n\t\t\"p_tickUpper\", int32ToStr(tickUpper),\n\t\t\"poolPath\", poolPath,\n\t\t\"tokenId\", uint64ToStr(tokenId),\n\t\t\"liquidity\", liquidity.ToString(),\n\t\t\"amount0\", amount0.ToString(),\n\t\t\"amount1\", amount1.ToString(),\n\t)\n\n\treturn tokenId, liquidity.ToString(), amount0.ToString(), amount1.ToString()\n}\n\nfunc mint(params MintParams) (uint64, *u256.Uint, *u256.Uint, *u256.Uint) {\n\tcheckDeadline(params.deadline)\n\n\tpool := pl.GetPool(params.token0, params.token1, params.fee)\n\n\tliquidity, amount0, amount1 := addLiquidity(\n\t\tAddLiquidityParams{\n\t\t\tpoolKey:        pl.GetPoolPath(params.token0, params.token1, params.fee),\n\t\t\ttickLower:      params.tickLower,\n\t\t\ttickUpper:      params.tickUpper,\n\t\t\tamount0Desired: params.amount0Desired,\n\t\t\tamount1Desired: params.amount1Desired,\n\t\t\tamount0Min:     params.amount0Min,\n\t\t\tamount1Min:     params.amount1Min,\n\t\t},\n\t)\n\n\ttokenId := nextId\n\tgnft.Mint(a2u(params.mintTo), tid(tokenId)) // owner, tokenId\n\tnextId++\n\n\tpositionKey := positionKeyCompute(GetOrigPkgAddr(), params.tickLower, params.tickUpper)\n\t_feeGrowthInside0LastX128, _feeGrowthInside1LastX128 := pool.PoolGetPositionFeeGrowthInside0LastX128(positionKey), pool.PoolGetPositionFeeGrowthInside1LastX128(positionKey)\n\tfeeGrowthInside0LastX128 := u256.MustFromDecimal(_feeGrowthInside0LastX128.ToString())\n\tfeeGrowthInside1LastX128 := u256.MustFromDecimal(_feeGrowthInside1LastX128.ToString())\n\n\tposition := Position{\n\t\tnonce:                    u256.Zero(),\n\t\toperator:                 std.GetOrigCaller(),\n\t\tpoolKey:                  pl.GetPoolPath(params.token0, params.token1, params.fee),\n\t\ttickLower:                params.tickLower,\n\t\ttickUpper:                params.tickUpper,\n\t\tliquidity:                liquidity,\n\t\tfeeGrowthInside0LastX128: feeGrowthInside0LastX128,\n\t\tfeeGrowthInside1LastX128: feeGrowthInside1LastX128,\n\t\ttokensOwed0:              u256.Zero(),\n\t\ttokensOwed1:              u256.Zero(),\n\t\tburned:                   false,\n\t}\n\tpositions[tokenId] = position\n\n\treturn tokenId, liquidity, amount0, amount1\n}\n\n// IncreaseLiquidity increases liquidity of the existing position\n//\n// Panics if any of the following conditions are met:\n// - position doesn't exist\n// - caller is not owner of the position\n// - deadline is passed\nfunc IncreaseLiquidity(\n\ttokenId uint64,\n\t_amount0Desired string, // uint256\n\t_amount1Desired string, // uint256\n\t_amount0Min string, // uint256\n\t_amount1Min string, // uint256\n\tdeadline int64,\n) (uint64, string, string, string, string) { // tokenId, liquidity, amount0, amount1, poolPath\n\ten.MintAndDistributeGns()\n\n\tamount0Desired := u256.MustFromDecimal(_amount0Desired)\n\tamount1Desired := u256.MustFromDecimal(_amount1Desired)\n\tamount0Min := u256.MustFromDecimal(_amount0Min)\n\tamount1Min := u256.MustFromDecimal(_amount1Min)\n\n\tincreaseLiquidityParams := IncreaseLiquidityParams{\n\t\ttokenId:        tokenId,\n\t\tamount0Desired: amount0Desired,\n\t\tamount1Desired: amount1Desired,\n\t\tamount0Min:     amount0Min,\n\t\tamount1Min:     amount1Min,\n\t\tdeadline:       deadline,\n\t}\n\n\t// wrap if target pool has wugnot\n\tposition := positions[tokenId]\n\tpToken0, pToken1, _ := poolKeyDivide(position.poolKey)\n\n\tisToken0Wugnot := pToken0 == consts.WRAPPED_WUGNOT\n\tisToken1Wugnot := pToken1 == consts.WRAPPED_WUGNOT\n\n\tuserOldWugnotBalance := wugnot.BalanceOf(a2u(std.GetOrigCaller())) // before wrap, user's origin wugnot balance\n\tif isToken0Wugnot || isToken1Wugnot {\n\t\tsent := std.GetOrigSend()\n\t\tugnotSent := uint64(sent.AmountOf(\"ugnot\"))\n\t\twrap(ugnotSent)\n\t}\n\n\t// INCREASE\n\t_, liquidity, amount0, amount1, poolPath := increaseLiquidity(increaseLiquidityParams)\n\n\t// unwrap left\n\tif isToken0Wugnot || isToken1Wugnot {\n\t\tuserNewWugnotBalance := wugnot.BalanceOf(a2u(std.GetOrigCaller()))\n\n\t\tleftOver := userNewWugnotBalance - userOldWugnotBalance\n\t\tunwrap(leftOver)\n\t}\n\n\tstd.Emit(\n\t\t\"GNOSWAP\",\n\t\t\"m_callType\", callType(),\n\t\t\"m_origCaller\", origCaller(),\n\t\t\"m_prevRealm\", prevRealm(),\n\t\t\"p_tokenId\", uint64ToStr(tokenId),\n\t\t\"poolPath\", poolPath,\n\t\t\"liquidity\", liquidity.ToString(),\n\t\t\"amount0\", amount0.ToString(),\n\t\t\"amount1\", amount1.ToString(),\n\t)\n\n\treturn tokenId, liquidity.ToString(), amount0.ToString(), amount1.ToString(), poolPath\n}\n\nfunc increaseLiquidity(params IncreaseLiquidityParams) (uint64, *u256.Uint, *u256.Uint, *u256.Uint, string) {\n\t// verify tokenId exists\n\tif !exists(params.tokenId) {\n\t\tpanic(ufmt.Sprintf(\"[POSITION] position.gno__increaseLiquidity() || tokenId(%d) doesn't exist\", params.tokenId))\n\t}\n\n\t// MUST BE OWNER TO INCREASE LIQUIDITY\n\t// can not be approved address \u003e staked position can't be modified\n\towner := gnft.OwnerOf(tid(params.tokenId))\n\tif owner != std.GetOrigCaller() {\n\t\tpanic(ufmt.Sprintf(\"[POSITION] position.gno__increaseLiquidity() || only owner can increase liquidity__owner(%s) == std.GetOrigCaller(%s)\", owner, std.GetOrigCaller()))\n\t}\n\n\tcheckDeadline(params.deadline)\n\n\tposition := positions[params.tokenId]\n\tliquidity, amount0, amount1 := addLiquidity(\n\t\tAddLiquidityParams{\n\t\t\tpoolKey:        position.poolKey,\n\t\t\ttickLower:      position.tickLower,\n\t\t\ttickUpper:      position.tickUpper,\n\t\t\tamount0Desired: params.amount0Desired,\n\t\t\tamount1Desired: params.amount1Desired,\n\t\t\tamount0Min:     params.amount0Min,\n\t\t\tamount1Min:     params.amount1Min,\n\t\t},\n\t)\n\n\tpool := pl.GetPoolFromPoolPath(position.poolKey)\n\tpositionKey := positionKeyCompute(GetOrigPkgAddr(), position.tickLower, position.tickUpper)\n\t_feeGrowthInside0LastX128, _feeGrowthInside1LastX128 := pool.PoolGetPositionFeeGrowthInside0LastX128(positionKey), pool.PoolGetPositionFeeGrowthInside1LastX128(positionKey)\n\tfeeGrowthInside0LastX128 := u256.MustFromDecimal(_feeGrowthInside0LastX128.ToString())\n\tfeeGrowthInside1LastX128 := u256.MustFromDecimal(_feeGrowthInside1LastX128.ToString())\n\n\t{\n\t\tdiff := new(u256.Uint).Sub(feeGrowthInside0LastX128, position.feeGrowthInside0LastX128)\n\t\tmulDiv := u256.MulDiv(diff, position.liquidity, u256.MustFromDecimal(consts.Q128))\n\n\t\tposition.tokensOwed0 = new(u256.Uint).Add(position.tokensOwed0, mulDiv)\n\t}\n\n\t{\n\t\tdiff := new(u256.Uint).Sub(feeGrowthInside1LastX128, position.feeGrowthInside1LastX128)\n\t\tmulDiv := u256.MulDiv(diff, position.liquidity, u256.MustFromDecimal(consts.Q128))\n\n\t\tposition.tokensOwed1 = new(u256.Uint).Add(position.tokensOwed1, mulDiv)\n\t}\n\n\tposition.feeGrowthInside0LastX128 = feeGrowthInside0LastX128\n\tposition.feeGrowthInside1LastX128 = feeGrowthInside1LastX128\n\tposition.liquidity = new(u256.Uint).Add(position.liquidity, liquidity)\n\tposition.burned = false\n\n\tpositions[params.tokenId] = position\n\n\treturn params.tokenId, liquidity, amount0, amount1, position.poolKey\n}\n\n// DecreaseLiquidity decreases liquidity of the existing position\n//\n// Panics if any of the following conditions are met:\n// - position doesn't exist\n// - caller is not owner of the position\n// - liquidityRatio is not in range 1 ~ 100\n// - deadline is passed\nfunc DecreaseLiquidity(\n\ttokenId uint64,\n\tliquidityRatio uint64,\n\t_amount0Min string, // uint256\n\t_amount1Min string, // uint256\n\tdeadline int64,\n\tunwrapResult bool,\n) (uint64, string, string, string, string, string, string) { // tokenId, liquidity, fee0, fee1, amount0, amount1, poolPath\n\ten.MintAndDistributeGns()\n\n\tisNormalRange := liquidityRatio \u003e= 1 \u0026\u0026 liquidityRatio \u003c= 100\n\tif !isNormalRange {\n\t\tpanic(ufmt.Sprintf(\"[POSITION] position.gno__decreaseLiquidity() || liquidityRatio(%d) should be in range 1 ~ 100\", liquidityRatio))\n\t}\n\n\tamount0Min := u256.MustFromDecimal(_amount0Min)\n\tamount1Min := u256.MustFromDecimal(_amount1Min)\n\tdecreaseLiquidityParams := DecreaseLiquidityParams{\n\t\ttokenId:        tokenId,\n\t\tliquidityRatio: liquidityRatio,\n\t\tamount0Min:     amount0Min,\n\t\tamount1Min:     amount1Min,\n\t\tdeadline:       deadline,\n\t\tunwrapResult:   unwrapResult,\n\t}\n\n\ttokenId, liquidity, fee0, fee1, amount0, amount1, poolPath := decreaseLiquidity(decreaseLiquidityParams)\n\n\tstd.Emit(\n\t\t\"GNOSWAP\",\n\t\t\"m_callType\", callType(),\n\t\t\"m_origCaller\", origCaller(),\n\t\t\"m_prevRealm\", prevRealm(),\n\t\t\"p_tokenId\", uint64ToStr(tokenId),\n\t\t\"p_liquidityRatio\", uint64ToStr(liquidityRatio),\n\t\t\"poolPath\", poolPath,\n\t\t\"liquidity\", liquidity.ToString(),\n\t\t\"fee0\", fee0.ToString(),\n\t\t\"fee1\", fee1.ToString(),\n\t\t\"amount0\", amount0.ToString(),\n\t\t\"amount1\", amount1.ToString(),\n\t)\n\n\treturn tokenId, liquidity.ToString(), fee0.ToString(), fee1.ToString(), amount0.ToString(), amount1.ToString(), poolPath\n}\n\nfunc decreaseLiquidity(params DecreaseLiquidityParams) (uint64, *u256.Uint, *u256.Uint, *u256.Uint, *u256.Uint, *u256.Uint, string) {\n\tuserOldWugnotBalance := wugnot.BalanceOf(a2u(std.GetOrigCaller())) // before unwrap\n\n\t// verify tokenId\n\tif !exists(params.tokenId) {\n\t\tpanic(ufmt.Sprintf(\"[POSITION] position.gno__decreaseLiquidity() || tokenId(%d) doesn't exist\", params.tokenId))\n\t}\n\n\t// MUST BE OWNER TO DECREASE LIQUIDITY ( can not be approved address )\n\towner := gnft.OwnerOf(tid(params.tokenId))\n\tif owner != std.GetOrigCaller() {\n\t\tpanic(ufmt.Sprintf(\"[POSITION] position.gno__decreaseLiquidity() || only owner can decrease liquidity__owner(%s) == std.GetOrigCaller(%s)\", owner, std.GetOrigCaller()))\n\t}\n\n\tcheckDeadline(params.deadline)\n\n\t// BEFORE DECREASE LIQUIDITY, COLLECT FEE FIRST\n\t_, fee0Str, fee1Str, _ := CollectFee(params.tokenId)\n\tfee0 := u256.MustFromDecimal(fee0Str)\n\tfee1 := u256.MustFromDecimal(fee1Str)\n\n\tposition := positions[params.tokenId]\n\n\tpositionLiquidity := position.liquidity\n\tliquidityToRemove := new(u256.Uint).Mul(positionLiquidity, u256.NewUint(params.liquidityRatio))\n\tliquidityToRemove = new(u256.Uint).Div(liquidityToRemove, u256.NewUint(100))\n\n\tif positionLiquidity.Lt(liquidityToRemove) || params.liquidityRatio == 100 {\n\t\tliquidityToRemove = positionLiquidity\n\t}\n\n\tpToken0, pToken1, pFee := poolKeyDivide(position.poolKey)\n\tpool := pl.GetPoolFromPoolPath(position.poolKey)\n\n\t// BURN HERE\n\t_burnedAmount0, _burnedAmount1 := pl.Burn(pToken0, pToken1, pFee, position.tickLower, position.tickUpper, liquidityToRemove.ToString())\n\n\tburnedAmount0 := u256.MustFromDecimal(_burnedAmount0)\n\tburnedAmount1 := u256.MustFromDecimal(_burnedAmount1)\n\n\tcond0 := burnedAmount0.Gte(params.amount0Min)\n\tcond1 := burnedAmount1.Gte(params.amount1Min)\n\tif !(cond0 \u0026\u0026 cond1) {\n\t\tpanic(ufmt.Sprintf(\"[POSITION] position.gno__decreaseLiquidity() || burnedAmount0(%s) \u003e= amount0Min(%s) \u0026\u0026 burnedAmount1(%s) \u003e= amount1Min(%s)\", burnedAmount0.ToString(), params.amount0Min.ToString(), burnedAmount1.ToString(), params.amount1Min.ToString()))\n\t}\n\n\tpositionKey := positionKeyCompute(GetOrigPkgAddr(), position.tickLower, position.tickUpper)\n\t_feeGrowthInside0LastX128, _feeGrowthInside1LastX128 := pool.PoolGetPositionFeeGrowthInside0LastX128(positionKey), pool.PoolGetPositionFeeGrowthInside1LastX128(positionKey)\n\tfeeGrowthInside0LastX128 := u256.MustFromDecimal(_feeGrowthInside0LastX128.ToString())\n\tfeeGrowthInside1LastX128 := u256.MustFromDecimal(_feeGrowthInside1LastX128.ToString())\n\n\t{\n\t\tdiff := new(u256.Uint).Sub(feeGrowthInside0LastX128, position.feeGrowthInside0LastX128)\n\t\tmulDiv := u256.MulDiv(diff, position.liquidity, u256.MustFromDecimal(consts.Q128))\n\t\tadd := new(u256.Uint).Add(burnedAmount0, mulDiv)\n\n\t\tposition.tokensOwed0 = new(u256.Uint).Add(position.tokensOwed0, add)\n\t}\n\n\t{\n\t\tdiff := new(u256.Uint).Sub(feeGrowthInside1LastX128, position.feeGrowthInside1LastX128)\n\t\tmulDiv := u256.MulDiv(diff, position.liquidity, u256.MustFromDecimal(consts.Q128))\n\t\tadd := new(u256.Uint).Add(burnedAmount1, mulDiv)\n\n\t\tposition.tokensOwed1 = new(u256.Uint).Add(position.tokensOwed1, add)\n\t}\n\n\tposition.feeGrowthInside0LastX128 = feeGrowthInside0LastX128\n\tposition.feeGrowthInside1LastX128 = feeGrowthInside1LastX128\n\tposition.liquidity = new(u256.Uint).Sub(positionLiquidity, liquidityToRemove)\n\tpositions[params.tokenId] = position\n\n\t// GIVE BACK TO USER\n\t_amount0, _amount1 := pl.Collect(\n\t\tpToken0,\n\t\tpToken1,\n\t\tpFee,\n\t\tstd.GetOrigCaller().String(),\n\t\tposition.tickLower,\n\t\tposition.tickUpper,\n\t\t_burnedAmount0,\n\t\t_burnedAmount1,\n\t)\n\n\tamount0 := u256.MustFromDecimal(_amount0)\n\tamount1 := u256.MustFromDecimal(_amount1)\n\n\tposition.tokensOwed0 = new(u256.Uint).Sub(position.tokensOwed0, amount0)\n\tposition.tokensOwed1 = new(u256.Uint).Sub(position.tokensOwed1, amount1)\n\tpositions[params.tokenId] = position\n\n\tif position.isClear() {\n\t\t// burnNFT(params.tokenId) // actual burn\n\t\tburnPosition(params.tokenId) // just update flag\n\t}\n\n\t// NO UNWRAP\n\tif !params.unwrapResult {\n\t\treturn params.tokenId, liquidityToRemove, fee0, fee1, amount0, amount1, position.poolKey\n\t}\n\n\tif (pToken0 == consts.WRAPPED_WUGNOT || pToken1 == consts.WRAPPED_WUGNOT) \u0026\u0026 params.unwrapResult {\n\t\tuserNewWugnotBalance := wugnot.BalanceOf(a2u(std.GetOrigCaller()))\n\n\t\tleftOver := userNewWugnotBalance - userOldWugnotBalance\n\t\tunwrap(leftOver)\n\t}\n\n\treturn params.tokenId, liquidityToRemove, fee0, fee1, amount0, amount1, position.poolKey\n}\n\nfunc Reposition(\n\ttokenId uint64,\n\ttickLower int32,\n\ttickUpper int32,\n\t_amount0Desired string, // uint256\n\t_amount1Desired string, // uint256\n) (uint64, string, int32, int32, string, string) { // tokenId, liquidity, tickLower, tickUpper, amount0, amount1\n\ten.MintAndDistributeGns()\n\n\t// verify tokenId exists\n\tif !exists(tokenId) {\n\t\tpanic(ufmt.Sprintf(\"[POSITION] position.gno__Reposition() || tokenId(%d) doesn't exist\", tokenId))\n\t}\n\n\t// MUST BE OWNER TO REPOSITION\n\t// can not be approved address \u003e staked position can't be modified\n\towner := gnft.OwnerOf(tid(tokenId))\n\tif owner != std.GetOrigCaller() {\n\t\tpanic(ufmt.Sprintf(\"[POSITION] position.gno__Reposition() || only owner can reposition__owner(%s) == std.GetOrigCaller(%s)\", owner, std.GetOrigCaller()))\n\t}\n\n\t// position should be burned to reposition\n\tposition := positions[tokenId]\n\toldTickLower := position.tickLower\n\toldTickUpper := position.tickUpper\n\n\tif !(position.isClear()) {\n\t\tpanic(ufmt.Sprintf(\"[POSITION] position.gno__Reposition() || position(tokenId:%d) isn't clear(liquidity:%d, tokensOwed0:%d, tokensOwed1:%d)\", tokenId, position.liquidity, position.tokensOwed0, position.tokensOwed1))\n\t}\n\n\ttoken0, token1, _ := poolKeyDivide(position.poolKey)\n\t// check if gnot pool\n\ttoken0IsNative := false\n\ttoken1IsNative := false\n\tif token0 == consts.WRAPPED_WUGNOT {\n\t\ttoken0IsNative = true\n\t} else if token1 == consts.WRAPPED_WUGNOT {\n\t\ttoken1IsNative = true\n\t}\n\n\tugnotSent := uint64(0)\n\tif token0IsNative || token1IsNative {\n\t\t// WRAP IT\n\t\tsent := std.GetOrigSend()\n\t\tugnotSent = uint64(sent.AmountOf(\"ugnot\"))\n\n\t\twrap(ugnotSent)\n\t}\n\n\tliquidity, amount0, amount1 := addLiquidity(\n\t\tAddLiquidityParams{\n\t\t\tpoolKey:        position.poolKey,\n\t\t\ttickLower:      tickLower,\n\t\t\ttickUpper:      tickUpper,\n\t\t\tamount0Desired: u256.MustFromDecimal(_amount0Desired),\n\t\t\tamount1Desired: u256.MustFromDecimal(_amount1Desired),\n\t\t\tamount0Min:     u256.Zero(),\n\t\t\tamount1Min:     u256.Zero(),\n\t\t},\n\t)\n\n\tpool := pl.GetPoolFromPoolPath(position.poolKey)\n\tpositionKey := positionKeyCompute(GetOrigPkgAddr(), tickLower, tickUpper)\n\t_feeGrowthInside0LastX128, _feeGrowthInside1LastX128 := pool.PoolGetPositionFeeGrowthInside0LastX128(positionKey), pool.PoolGetPositionFeeGrowthInside1LastX128(positionKey)\n\tfeeGrowthInside0LastX128 := u256.MustFromDecimal(_feeGrowthInside0LastX128.ToString())\n\tfeeGrowthInside1LastX128 := u256.MustFromDecimal(_feeGrowthInside1LastX128.ToString())\n\n\tposition.tickLower = tickLower\n\tposition.tickUpper = tickUpper\n\tposition.liquidity = liquidity\n\tposition.feeGrowthInside0LastX128 = feeGrowthInside0LastX128\n\tposition.feeGrowthInside1LastX128 = feeGrowthInside1LastX128\n\tposition.tokensOwed0 = u256.Zero()\n\tposition.tokensOwed1 = u256.Zero()\n\tposition.burned = false\n\n\tpositions[tokenId] = position\n\n\tstd.Emit(\n\t\t\"GNOSWAP\",\n\t\t\"m_callType\", callType(),\n\t\t\"m_origCaller\", origCaller(),\n\t\t\"m_prevRealm\", prevRealm(),\n\t\t\"p_tickLower\", int32ToStr(tickLower),\n\t\t\"p_tickUpper\", int32ToStr(tickUpper),\n\t\t\"p_tokenId\", uint64ToStr(tokenId),\n\t\t\"poolPath\", position.poolKey,\n\t\t\"liquidity\", liquidity.ToString(),\n\t\t\"amount0\", amount0.ToString(),\n\t\t\"amount1\", amount1.ToString(),\n\t\t\"old_tickLower\", int32ToStr(oldTickLower),\n\t\t\"old_tickUpper\", int32ToStr(oldTickUpper),\n\t)\n\n\treturn tokenId, liquidity.ToString(), tickLower, tickUpper, amount0.ToString(), amount1.ToString()\n}\n\n// CollectFee collects swap fee from the position\n//\n// Panics if any of the following conditions are met:\n// - position doesn't exist\n// - caller is not owner or approved\nfunc CollectFee(tokenId uint64) (uint64, string, string, string) { // tokenId, tokensOwed0, tokensOwed1, poolPath\n\ten.MintAndDistributeGns()\n\n\t// verify tokenId\n\tif !exists(tokenId) {\n\t\tpanic(ufmt.Sprintf(\"[POSITION] position.gno__CollectFee() || tokenId(%d) doesn't exist\", tokenId))\n\t}\n\n\t// verify owner or approved\n\tisAuthorizedForToken(tokenId)\n\n\t// verify position\n\tposition, exist := positions[tokenId]\n\tif !exist {\n\t\tpanic(ufmt.Sprintf(\"[POSITION] position.gno__CollectFee() || position(tokenId:%d) doesn't exist\", tokenId))\n\t}\n\n\ttoken0, token1, fee := poolKeyDivide(position.poolKey)\n\n\tpl.Burn(\n\t\ttoken0,\n\t\ttoken1,\n\t\tfee,\n\t\tposition.tickLower,\n\t\tposition.tickUpper,\n\t\t\"0\", // burn '0' liquidity to collect fee\n\t)\n\n\ttokensOwed0, tokensOwed1 := position.tokensOwed0, position.tokensOwed1\n\n\tpositionKey := positionKeyCompute(GetOrigPkgAddr(), position.tickLower, position.tickUpper)\n\tpool := pl.GetPoolFromPoolPath(position.poolKey)\n\t_feeGrowthInside0LastX128, _feeGrowthInside1LastX128 := pool.PoolGetPositionFeeGrowthInside0LastX128(positionKey), pool.PoolGetPositionFeeGrowthInside1LastX128(positionKey)\n\tfeeGrowthInside0LastX128 := u256.MustFromDecimal(_feeGrowthInside0LastX128.ToString())\n\tfeeGrowthInside1LastX128 := u256.MustFromDecimal(_feeGrowthInside1LastX128.ToString())\n\n\t{\n\t\tdiff := new(u256.Uint).Sub(feeGrowthInside0LastX128, position.feeGrowthInside0LastX128)\n\t\tmulDiv := u256.MulDiv(diff, position.liquidity, u256.MustFromDecimal(consts.Q128))\n\n\t\ttokensOwed0 = new(u256.Uint).Add(tokensOwed0, mulDiv)\n\t}\n\n\t{\n\t\tdiff := new(u256.Uint).Sub(feeGrowthInside1LastX128, position.feeGrowthInside1LastX128)\n\t\tmulDiv := u256.MulDiv(diff, position.liquidity, u256.MustFromDecimal(consts.Q128))\n\n\t\ttokensOwed1 = new(u256.Uint).Add(tokensOwed1, mulDiv)\n\t}\n\n\tposition.feeGrowthInside0LastX128 = feeGrowthInside0LastX128\n\tposition.feeGrowthInside1LastX128 = feeGrowthInside1LastX128\n\n\t// check user wugnot amount\n\t// need this value to unwrap fee\n\tuserWugnot := wugnot.BalanceOf(a2u(std.GetOrigCaller()))\n\n\tamount0, amount1 := pl.Collect(\n\t\ttoken0,\n\t\ttoken1,\n\t\tfee,\n\t\tstd.GetOrigCaller().String(),\n\t\tposition.tickLower,\n\t\tposition.tickUpper,\n\t\tconsts.MAX_UINT64,\n\t\tconsts.MAX_UINT64,\n\t)\n\n\tpositions[tokenId] = position\n\n\t// handle withdrawal fee\n\twithoutFee0, withoutFee1 := pl.HandleWithdrawalFee(tokenId, token0, amount0, token1, amount1)\n\n\tstd.Emit(\n\t\t\"GNOSWAP\",\n\t\t\"m_callType\", callType(),\n\t\t\"m_origCaller\", origCaller(),\n\t\t\"m_prevRealm\", prevRealm(),\n\t\t\"p_tokenId\", uint64ToStr(tokenId),\n\t\t\"fee0\", withoutFee0,\n\t\t\"fee1\", withoutFee1,\n\t\t\"poolPath\", position.poolKey,\n\t)\n\n\t// UNWRAP\n\tpToken0, pToken1, _ := poolKeyDivide(position.poolKey)\n\tif pToken0 == consts.WUGNOT_PATH || pToken1 == consts.WUGNOT_PATH {\n\t\tuserNewWugnot := wugnot.BalanceOf(a2u(std.GetOrigCaller()))\n\t\tunwrapAmount := userNewWugnot - userWugnot\n\n\t\tif unwrapAmount \u003e 0 {\n\t\t\tunwrap(unwrapAmount)\n\t\t}\n\t}\n\n\treturn tokenId, withoutFee0, withoutFee1, position.poolKey\n}\n\nfunc burnNFT(tokenId uint64) {\n\tisAuthorizedForToken(tokenId)\n\n\tposition := positions[tokenId]\n\n\tif !(position.isClear()) {\n\t\tpanic(ufmt.Sprintf(\"[POSITION] position.gno__burnNFT() || position(tokenId:%d) isn't clear(liquidity:%d, tokensOwed0:%d, tokensOwed1:%d)\", tokenId, position.liquidity, position.tokensOwed0, position.tokensOwed1))\n\t}\n\tdelete(positions, tokenId)\n\tgnft.Burn(tid(tokenId))\n}\n\nfunc burnPosition(tokenId uint64) {\n\tposition := positions[tokenId]\n\tif !(position.isClear()) {\n\t\tpanic(ufmt.Sprintf(\"[POSITION] position.gno__burnPosition() || position(tokenId:%d) isn't clear(liquidity:%d, tokensOwed0:%d, tokensOwed1:%d)\", tokenId, position.liquidity, position.tokensOwed0, position.tokensOwed1))\n\t}\n\n\tposition.burned = true\n\tpositions[tokenId] = position\n}\n\nfunc isAuthorizedForToken(tokenId uint64) {\n\tif !(isApprovedOrOwner(std.PrevRealm().Addr(), tokenId)) {\n\t\tpanic(ufmt.Sprintf(\"[POSITION] position.gno__isAuthorizedForToken() || caller(%s) is not approved or owner of tokenId(%d)\", std.PrevRealm().Addr(), tokenId))\n\t}\n}\n"},{"name":"position_key.gno","body":"package position\n\nimport (\n\t\"encoding/base64\"\n\t\"std\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nfunc positionKeyCompute(\n\towner std.Address,\n\ttickLower int32,\n\ttickUpper int32,\n) string {\n\tkey := ufmt.Sprintf(\"%s__%d__%d\", owner.String(), tickLower, tickUpper)\n\n\tencoded := base64.StdEncoding.EncodeToString([]byte(key))\n\treturn encoded\n}\n"},{"name":"type.gno","body":"package position\n\nimport (\n\t\"std\"\n\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\ntype Position struct {\n\tnonce *u256.Uint // nonce for permits\n\n\toperator std.Address // address that is approved for spending this token\n\n\tpoolKey string // poolPath of the pool which this has lp token\n\n\t// the tick range of the position, bounds are included\n\ttickLower int32\n\ttickUpper int32\n\n\tliquidity *u256.Uint // liquidity of the position\n\n\t// fee growth of the aggregate position as of the last action on the individual position\n\tfeeGrowthInside0LastX128 *u256.Uint\n\tfeeGrowthInside1LastX128 *u256.Uint\n\n\t// how many uncollected tokens are owed to the position, as of the last computation\n\ttokensOwed0 *u256.Uint\n\ttokensOwed1 *u256.Uint\n\n\tburned bool // whether the position has been burned(≈ actuall we don't burn lp token even its empty, just update flag)\n}\n\n// isClear reports whether the position is empty\nfunc (p Position) isClear() bool {\n\treturn p.liquidity.IsZero() \u0026\u0026 p.tokensOwed0.IsZero() \u0026\u0026 p.tokensOwed1.IsZero()\n}\n\ntype MintParams struct {\n\ttoken0         string      // token0 path for a specific pool\n\ttoken1         string      // token1 path for a specific pool\n\tfee            uint32      // fee for a specific pool\n\ttickLower      int32       // lower end of the tick range for the position\n\ttickUpper      int32       // upper end of the tick range for the position\n\tamount0Desired *u256.Uint  // desired amount of token0 to be minted\n\tamount1Desired *u256.Uint  // desired amount of token1 to be minted\n\tamount0Min     *u256.Uint  // minimum amount of token0 to be minted\n\tamount1Min     *u256.Uint  // minimum amount of token1 to be minted\n\tdeadline       int64       // time by which the transaction must be included to effect the change\n\tmintTo         std.Address // address to mint lpToken\n}\n\ntype AddLiquidityParams struct {\n\tpoolKey        string     // poolPath of the pool which has the position\n\ttickLower      int32      // lower end of the tick range for the position\n\ttickUpper      int32      // upper end of the tick range for the position\n\tamount0Desired *u256.Uint // desired amount of token0 to be minted\n\tamount1Desired *u256.Uint // desired amount of token1 to be minted\n\tamount0Min     *u256.Uint // minimum amount of token0 to be minted\n\tamount1Min     *u256.Uint // minimum amount of token1 to be minted\n}\n\ntype IncreaseLiquidityParams struct {\n\ttokenId        uint64     // tokenId of the position to increase liquidity\n\tamount0Desired *u256.Uint // desired amount of token0 to be minted\n\tamount1Desired *u256.Uint // desired amount of token1 to be minted\n\tamount0Min     *u256.Uint // minimum amount of token0 to be minted\n\tamount1Min     *u256.Uint // minimum amount of token1 to be minted\n\tdeadline       int64      // time by which the transaction must be included to effect the change\n}\n\ntype DecreaseLiquidityParams struct {\n\ttokenId        uint64     // tokenId of the position to decrease liquidity\n\tliquidityRatio uint64     // percent of liquidity to decrease, i.e '25' ≈ remove 25% of liquidity\n\tamount0Min     *u256.Uint // minimum amount of token0 to be minted\n\tamount1Min     *u256.Uint // minimum amount of token1 to be minted\n\tdeadline       int64      // time by which the transaction must be included to effect the change\n\tunwrapResult   bool       // whether to unwrap the token if it's wrapped native token\n}\n"},{"name":"utils.gno","body":"package position\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n\n\tpusers \"gno.land/p/demo/users\"\n)\n\nfunc checkDeadline(deadline int64) {\n\tif time.Now().Unix() \u003e deadline {\n\t\tpanic(ufmt.Sprintf(\"[POSITION] utils.gno__checkDeadline() || transaction too old__time.Now().Unix()(%d) \u003c= deadline(%d)\", time.Now().Unix(), deadline))\n\t}\n}\n\nfunc a2u(addr std.Address) pusers.AddressOrName {\n\treturn pusers.AddressOrName(addr)\n}\n\nfunc poolKeyDivide(poolKey string) (string, string, uint32) {\n\tres := strings.Split(poolKey, \":\")\n\tif len(res) != 3 {\n\t\tpanic(ufmt.Sprintf(\"[POSITION] utils.gno__poolKeyDivide() || invalid poolKey(%s)\", poolKey))\n\t}\n\n\tpToken0, pToken1, pFeeStr := res[0], res[1], res[2]\n\n\tpFee, _ := strconv.Atoi(pFeeStr)\n\treturn pToken0, pToken1, uint32(pFee)\n}\n\nfunc int32ToStr(i int32) string {\n\treturn strconv.FormatInt(int64(i), 10)\n}\n\nfunc uint64ToStr(i uint64) string {\n\treturn strconv.FormatInt(int64(i), 10)\n}\n\nfunc origCaller() string {\n\treturn std.GetOrigCaller().String()\n}\n\nfunc prevRealm() string {\n\treturn std.PrevRealm().PkgPath()\n}\n\nfunc callType() string {\n\tif prevRealm() == \"\" {\n\t\treturn \"DIRECT\"\n\t}\n\n\treturn \"INDIRECT\"\n}\n"},{"name":"wrap_unwrap.gno","body":"package position\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/demo/wugnot\"\n\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/gnoswap/consts\"\n)\n\nfunc wrap(ugnotAmount uint64) {\n\tif ugnotAmount == 0 {\n\t\treturn\n\t}\n\n\tif ugnotAmount \u003c consts.UGNOT_MINT_DEPOSIT_TO_WRAP {\n\t\tpanic(ufmt.Sprintf(\"Deposit below minimum: %d/%d ugnot.\", ugnotAmount, consts.UGNOT_MINT_DEPOSIT_TO_WRAP))\n\t}\n\n\t// WRAP IT\n\twugnotAddr := std.DerivePkgAddr(consts.WRAPPED_WUGNOT)\n\tbanker := std.GetBanker(std.BankerTypeRealmSend)\n\n\tbanker.SendCoins(consts.POSITION_ADDR, wugnotAddr, std.Coins{{\"ugnot\", int64(ugnotAmount)}})\n\twugnot.Deposit() // POSITION HAS WUGNOT\n\n\t// SEND WUGNOT: POSITION -\u003e USER\n\twugnot.Transfer(a2u(std.GetOrigCaller()), ugnotAmount)\n}\n\nfunc unwrap(wugnotAmount uint64) {\n\tif wugnotAmount == 0 {\n\t\treturn\n\t}\n\n\t// SEND WUGNOT: USER -\u003e POSITION\n\twugnot.TransferFrom(a2u(std.GetOrigCaller()), a2u(consts.POSITION_ADDR), wugnotAmount)\n\n\t// UNWRAP IT\n\twugnot.Withdraw(wugnotAmount)\n\n\t// SEND GNOT: POSITION -\u003e USER\n\tbanker := std.GetBanker(std.BankerTypeRealmSend)\n\tbanker.SendCoins(consts.POSITION_ADDR, std.GetOrigCaller(), std.Coins{{\"ugnot\", int64(wugnotAmount)}})\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"cXNKBQ/iaCTm12gVIOKGjrqonnW+ld5pOIaL92kX/q8eQKIvuuarL3x3PrsUHWnQnZD5YYYRnJ0hUkgyq9LcKQ=="}],"memo":""},"blockNum":"147637"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","package":{"name":"router","path":"gno.land/r/gnoswap/router","files":[{"name":"__TEST_0_INIT_TOKEN_REGISTER_test.gno","body":"package router\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/onbloc/foo\"\n\n\t\"gno.land/r/onbloc/bar\"\n\n\t\"gno.land/r/onbloc/baz\"\n\n\t\"gno.land/r/onbloc/qux\"\n\n\t\"gno.land/r/demo/wugnot\"\n\n\t\"gno.land/r/onbloc/obl\"\n\n\t\"gno.land/r/gnoswap/gns\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\n\tpusers \"gno.land/p/demo/users\"\n\n\tpl \"gno.land/r/gnoswap/pool\"\n)\n\ntype FooToken struct{}\n\nfunc (FooToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn foo.Transfer\n}\nfunc (FooToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn foo.TransferFrom\n}\nfunc (FooToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn foo.BalanceOf\n}\nfunc (FooToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn foo.Approve\n}\n\ntype BarToken struct{}\n\nfunc (BarToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn bar.Transfer\n}\nfunc (BarToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn bar.TransferFrom\n}\nfunc (BarToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn bar.BalanceOf\n}\nfunc (BarToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn bar.Approve\n}\n\ntype BazToken struct{}\n\nfunc (BazToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn baz.Transfer\n}\nfunc (BazToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn baz.TransferFrom\n}\nfunc (BazToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn baz.BalanceOf\n}\nfunc (BazToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn baz.Approve\n}\n\ntype QuxToken struct{}\n\nfunc (QuxToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn qux.Transfer\n}\nfunc (QuxToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn qux.TransferFrom\n}\nfunc (QuxToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn qux.BalanceOf\n}\nfunc (QuxToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn qux.Approve\n}\n\ntype WugnotToken struct{}\n\nfunc (WugnotToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn wugnot.Transfer\n}\nfunc (WugnotToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn wugnot.TransferFrom\n}\nfunc (WugnotToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn wugnot.BalanceOf\n}\nfunc (WugnotToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn wugnot.Approve\n}\n\ntype OBLToken struct{}\n\nfunc (OBLToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn obl.Transfer\n}\nfunc (OBLToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn obl.TransferFrom\n}\nfunc (OBLToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn obl.BalanceOf\n}\nfunc (OBLToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn obl.Approve\n}\n\ntype GNSToken struct{}\n\nfunc (GNSToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn gns.Transfer\n}\n\nfunc (GNSToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn gns.TransferFrom\n}\n\nfunc (GNSToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn gns.BalanceOf\n}\n\nfunc (GNSToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn gns.Approve\n}\n\nfunc init() {\n\tstd.TestSetOrigCaller(consts.TOKEN_REGISTER)\n\n\t// POOL\n\tpl.RegisterGRC20Interface(\"gno.land/r/onbloc/bar\", BarToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/onbloc/foo\", FooToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/onbloc/baz\", BazToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/onbloc/qux\", QuxToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/demo/wugnot\", WugnotToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/onbloc/obl\", OBLToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/gnoswap/gns\", GNSToken{})\n\n\t// ROUTER\n\tRegisterGRC20Interface(\"gno.land/r/onbloc/bar\", BarToken{})\n\tRegisterGRC20Interface(\"gno.land/r/onbloc/foo\", FooToken{})\n\tRegisterGRC20Interface(\"gno.land/r/onbloc/baz\", BazToken{})\n\tRegisterGRC20Interface(\"gno.land/r/onbloc/qux\", QuxToken{})\n\tRegisterGRC20Interface(\"gno.land/r/demo/wugnot\", WugnotToken{})\n\tRegisterGRC20Interface(\"gno.land/r/onbloc/obl\", OBLToken{})\n\tRegisterGRC20Interface(\"gno.land/r/gnoswap/gns\", GNSToken{})\n\n\tstd.TestSetOrigCaller(gsa)\n}\n"},{"name":"__TEST_0_INIT_VARS_HELPERS_test.gno","body":"package router\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tpusers \"gno.land/p/demo/users\"\n\n\t\"gno.land/r/demo/wugnot\"\n\n\t\"gno.land/r/gnoswap/consts\"\n)\n\nvar (\n\tgsa   std.Address = consts.GNOSWAP_ADMIN\n\tfcr   std.Address = consts.COMMUNITY_POOL_ADDR\n\ttest1 std.Address = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\n\tfooPath string = \"gno.land/r/onbloc/foo\"\n\tbarPath string = \"gno.land/r/onbloc/bar\"\n\tbazPath string = \"gno.land/r/onbloc/baz\"\n\tquxPath string = \"gno.land/r/onbloc/qux\"\n\n\toblPath string = \"gno.land/r/onbloc/obl\"\n\t// wugnotPath string = \"gno.land/r/demo/wugnot\" // from consts\n\t// gnsPath string = \"gno.land/r/gnoswap/gns\" // from consts\n\n\tfee100  uint32 = 100\n\tfee500  uint32 = 500\n\tfee3000 uint32 = 3000\n\n\tmax_timeout int64 = 9999999999\n)\n\n// Realms to mock frames\nvar (\n\tgsaRealm = std.NewUserRealm(gsa)\n\tposRealm = std.NewCodeRealm(consts.POSITION_PATH)\n\trouRealm = std.NewCodeRealm(consts.ROUTER_PATH)\n\tstkRealm = std.NewCodeRealm(consts.STAKER_PATH)\n)\n\n/* HELPER */\nfunc shouldEQ(t *testing.T, got, expected interface{}) {\n\tif got != expected {\n\t\tt.Errorf(\"got %v, expected %v\", got, expected)\n\t}\n}\n\nfunc shouldNEQ(t *testing.T, got, expected interface{}) {\n\tif got == expected {\n\t\tt.Errorf(\"got %v, didn't expected %v\", got, expected)\n\t}\n}\n\nfunc shouldPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"expected panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc shouldPanicWithMsg(t *testing.T, f func(), msg string) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t} else {\n\t\t\tif r != msg {\n\t\t\t\tt.Errorf(\"excepted panic(%v), got(%v)\", msg, r)\n\t\t\t}\n\t\t}\n\t}()\n\tf()\n}\n\nfunc ugnotBalanceOf(addr std.Address) uint64 {\n\ttestBanker := std.GetBanker(std.BankerTypeRealmIssue)\n\n\tcoins := testBanker.GetCoins(addr)\n\tif len(coins) == 0 {\n\t\treturn 0\n\t}\n\n\treturn uint64(coins.AmountOf(\"ugnot\"))\n}\n\nfunc wugnotBalanceOf(addr std.Address) uint64 {\n\taddrToUser := pusers.AddressOrName(addr)\n\treturn wugnot.BalanceOf(addrToUser)\n}\n\nfunc printFeeBalance() {\n\tugnotBal := ugnotBalanceOf(fcr)\n\twugnotBal := wugnotBalanceOf(fcr)\n\n\tprintln(\"FEE BALANCE\")\n\tprintln(\"\u003e ugnot:\\t\", ugnotBal)\n\tprintln(\"\u003e wugnot:\\t\", wugnotBal)\n\tprintln()\n}\n"},{"name":"comptue_routes.gno","body":"package router\n\nimport (\n\t\"sort\"\n\n\tpl \"gno.land/r/gnoswap/pool\"\n\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\n// PoolWithMeta is a struct that contains poolPath, token0Path, token1Path, fee, tokenPair, and liquidity\n// It's used to store the pool information and sort the pools by liquidity\ntype PoolWithMeta struct {\n\tpoolPath   string\n\ttoken0Path string\n\ttoken1Path string\n\tfee        int\n\ttokenPair  string\n\tliquidity  *u256.Uint\n}\ntype ByLiquidity []PoolWithMeta\n\nfunc (p ByLiquidity) Len() int           { return len(p) }\nfunc (p ByLiquidity) Swap(i, j int)      { p[i], p[j] = p[j], p[i] }\nfunc (p ByLiquidity) Less(i, j int) bool { return p[i].liquidity.Gt(p[j].liquidity) }\n\n// BuildRoute is a struct that contains route, tokenIn, and tokenOut\n// It's used to store the route information\ntype BuildRoute struct {\n\troute    []PoolWithMeta\n\ttokenIn  string\n\ttokenOut string\n}\n\nfunc computeAllRoutes(\n\tinputTokenPath string,\n\toutputTokenPath string,\n\tmaxHops int,\n\tpools []PoolWithMeta,\n) []BuildRoute {\n\n\troutes := _computeAllRoutes(\n\t\tinputTokenPath,\n\t\toutputTokenPath,\n\t\t[]BuildRoute{},\n\t\tpools,\n\t\tmaxHops,\n\t)\n\n\treturn routes\n}\n\nfunc _computeAllRoutes(\n\tinputTokenPath string,\n\toutputTokenPath string,\n\tbuildRoute []BuildRoute, // BuildRoute\n\tpools []PoolWithMeta,\n\tmaxHops int,\n) []BuildRoute {\n\tpoolUsed := make([]bool, len(pools))\n\n\troutes := []BuildRoute{}\n\n\ttokenVisited := make(map[string]bool, 0)\n\ttokenVisited[inputTokenPath] = true\n\n\tcomputeRoutes(\n\t\tinputTokenPath,\n\t\toutputTokenPath,\n\t\t[]PoolWithMeta{}, // currentRoute\n\t\tpoolUsed,\n\t\ttokenVisited, // tokenVisited\n\t\t\"\",           // _previousTokenOut\n\t\t//\n\t\tmaxHops,\n\t\tpools,\n\t\t//\n\t\t\u0026routes,\n\t)\n\n\treturn routes\n}\n\nfunc computeRoutes(\n\tinputTokenPath string,\n\toutputTokenPath string,\n\tcurrentRoute []PoolWithMeta,\n\tpoolsUsed []bool,\n\ttokenVisited map[string]bool,\n\t_previousTokenOut string,\n\tmaxHops int,\n\tpools []PoolWithMeta,\n\troutes *[]BuildRoute,\n) *[]BuildRoute {\n\n\trouteLen := len(currentRoute)\n\n\tif routeLen \u003e maxHops {\n\t\treturn routes\n\t}\n\n\tif (routeLen \u003e 0) \u0026\u0026 (currentRoute[routeLen-1].hasToken(outputTokenPath)) {\n\t\tbuildRoute := BuildRoute{}\n\t\tbuildRoute.route = append([]PoolWithMeta{}, currentRoute...)\n\t\tbuildRoute.tokenIn = inputTokenPath\n\t\tbuildRoute.tokenOut = outputTokenPath\n\t\t*routes = append(*routes, buildRoute)\n\t\treturn routes\n\t}\n\n\tfor i, pool := range pools {\n\t\tif poolsUsed[i] {\n\t\t\tcontinue\n\t\t}\n\n\t\tcurPool := pool\n\n\t\tvar previousTokenOut string\n\t\tif _previousTokenOut == \"\" { // first iteration\n\t\t\tpreviousTokenOut = inputTokenPath\n\t\t} else {\n\t\t\tpreviousTokenOut = _previousTokenOut\n\t\t}\n\n\t\tif !curPool.hasToken(previousTokenOut) {\n\t\t\tcontinue\n\t\t}\n\n\t\tvar currentTokenOut string\n\t\tif curPool.token0Path == previousTokenOut {\n\t\t\tcurrentTokenOut = curPool.token1Path\n\t\t} else {\n\t\t\tcurrentTokenOut = curPool.token0Path\n\t\t}\n\n\t\tif tokenVisited[currentTokenOut] {\n\t\t\tcontinue\n\t\t}\n\n\t\ttokenVisited[currentTokenOut] = true\n\t\tcurrentRoute = append(currentRoute, curPool)\n\t\tpoolsUsed[i] = true\n\n\t\tcomputeRoutes(\n\t\t\tinputTokenPath,\n\t\t\toutputTokenPath,\n\t\t\tcurrentRoute,\n\t\t\tpoolsUsed,\n\t\t\ttokenVisited,\n\t\t\tcurrentTokenOut,\n\t\t\t//\n\t\t\tmaxHops,\n\t\t\tpools,\n\t\t\t//\n\t\t\troutes,\n\t\t)\n\n\t\tpoolsUsed[i] = false\n\t\tcurrentRoute = currentRoute[:len(currentRoute)-1]\n\n\t\tdelete(tokenVisited, currentTokenOut)\n\t}\n\n\treturn routes\n}\n\nfunc (pool PoolWithMeta) hasToken(token string) bool {\n\treturn pool.token0Path == token || pool.token1Path == token\n}\n\nfunc findCandidatePools() []PoolWithMeta {\n\tpoolList := pl.PoolGetPoolList()\n\n\tpoolWithMetas := []PoolWithMeta{}\n\tfor _, poolPath := range poolList {\n\t\ttoken0Path, token1Path, pFee := poolPathWithFeeDivide(poolPath)\n\n\t\tpool := pl.GetPoolFromPoolPath(poolPath)\n\t\tliquidity := pool.PoolGetLiquidity()\n\t\tpoolWithMetas = append(poolWithMetas, PoolWithMeta{\n\t\t\tpoolPath,\n\t\t\ttoken0Path,\n\t\t\ttoken1Path,\n\t\t\tpFee,\n\t\t\ttoken0Path + \":\" + token1Path,\n\t\t\tliquidity,\n\t\t})\n\t}\n\n\tgroupedPools := groupPoolsByTokenPair(poolWithMetas)\n\ttop2ByGroup := selectTop2ByGroup(groupedPools)\n\n\tcandidatePools := []PoolWithMeta{}\n\tfor _, pools := range top2ByGroup {\n\t\tcandidatePools = append(candidatePools, pools...)\n\t}\n\n\treturn candidatePools\n}\n\n// group pools by tokenPair\nfunc groupPoolsByTokenPair(pools []PoolWithMeta) map[string][]PoolWithMeta {\n\tgroupedPools := make(map[string][]PoolWithMeta)\n\n\tfor _, pool := range pools {\n\t\tgroupedPools[pool.tokenPair] = append(groupedPools[pool.tokenPair], pool)\n\t}\n\n\treturn groupedPools\n}\n\n// select the top 2 liquidity values per each group\nfunc selectTop2ByGroup(groupedPools map[string][]PoolWithMeta) map[string][]PoolWithMeta {\n\ttop2ByGroup := make(map[string][]PoolWithMeta)\n\n\tfor tokenPair, pools := range groupedPools {\n\t\t// Use sort.Sort with ByLiquidity interface\n\t\tsort.Sort(ByLiquidity(pools))\n\n\t\t// Select the top 2 liquidity values\n\t\ttop2 := pools[:min(2, len(pools))]\n\t\ttop2ByGroup[tokenPair] = top2\n\t}\n\n\treturn top2ByGroup\n}\n"},{"name":"gno.mod","body":"module gno.land/r/gnoswap/router\n\nrequire (\n\tgno.land/p/gnoswap/int256 v0.0.0-latest\n\tgno.land/p/gnoswap/uint256 v0.0.0-latest\n\tgno.land/p/demo/json v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n\tgno.land/p/demo/users v0.0.0-latest\n\tgno.land/r/gnoswap/pool v0.0.0-latest\n\tgno.land/r/demo/wugnot v0.0.0-latest\n\tgno.land/r/gnoswap/common v0.0.0-latest\n\tgno.land/r/gnoswap/consts v0.0.0-latest\n)\n"},{"name":"gno_helper.gno","body":"package router\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/gnoswap/consts\"\n)\n\nfunc GetOrigPkgAddr() std.Address {\n\treturn consts.ROUTER_ADDR\n}\n"},{"name":"protocol_fee_swap.gno","body":"package router\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\n\t\"gno.land/p/demo/ufmt\"\n\n\tu256 \"gno.land/p/gnoswap/uint256\"\n\n\t\"gno.land/r/demo/wugnot\"\n)\n\nvar (\n\tswapFee = uint64(15) // 0.15%\n)\n\nfunc handleSwapFee(\n\toutputToken string,\n\tamount *u256.Uint,\n\tisDry bool,\n) *u256.Uint {\n\tif swapFee \u003c= 0 {\n\t\treturn amount\n\t}\n\n\tfeeAmount := new(u256.Uint).Mul(amount, u256.NewUint(swapFee))\n\tfeeAmount.Div(feeAmount, u256.NewUint(10000))\n\tfeeAmountUint64 := feeAmount.Uint64()\n\n\tif !isDry {\n\t\tif outputToken == consts.GNOT { // unwrap if coin\n\t\t\t// wugnot: buyer \u003e router\n\t\t\ttransferFromByRegisterCall(outputToken, std.GetOrigCaller(), consts.ROUTER_ADDR, feeAmountUint64)\n\n\t\t\t// ugnot: wugnot \u003e router\n\t\t\twugnot.Withdraw(feeAmountUint64)\n\n\t\t\t// ugnot: router \u003e feeCollector\n\t\t\tbanker := std.GetBanker(std.BankerTypeRealmSend)\n\t\t\tbanker.SendCoins(consts.ROUTER_ADDR, consts.COMMUNITY_POOL_ADDR, std.Coins{{\"ugnot\", int64(feeAmountUint64)}})\n\t\t} else { // just transfer if grc20\n\t\t\tok := transferFromByRegisterCall(outputToken, std.GetOrigCaller(), consts.COMMUNITY_POOL_ADDR, feeAmountUint64)\n\t\t\tif !ok {\n\t\t\t\tpanic(ufmt.Sprintf(\"[ROUTER] protocol_fee_swap.gno__handleSwapFee() || expected transferFromByRegisterCall(%s, %s, %s, %d) == true\", outputToken, std.GetOrigCaller(), consts.COMMUNITY_POOL_ADDR, feeAmountUint64))\n\t\t\t}\n\t\t}\n\t}\n\n\ttoUserAfterProtocol := new(u256.Uint).Sub(amount, feeAmount)\n\treturn toUserAfterProtocol\n}\n\nfunc GetSwapFee() uint64 {\n\treturn swapFee\n}\n\nfunc SetSwapFee(fee uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif caller != consts.GNOSWAP_ADMIN \u0026\u0026 caller != consts.GOV_ADDR {\n\t\tpanic(\n\t\t\tufmt.Sprintf(\n\t\t\t\t\"[ROUTER] protocol_fee_swap.gno__SetSwapFee() || only admin(%s) or governance(%s) can set swap fee, called from %s\",\n\t\t\t\tconsts.GNOSWAP_ADMIN,\n\t\t\t\tconsts.GOV_ADDR,\n\t\t\t\tcaller,\n\t\t\t),\n\t\t)\n\t}\n\n\t// 10000 (bps) = 100%\n\tif fee \u003e 10000 {\n\t\tpanic(ufmt.Sprintf(\"[ROUTER] protocol_fee_swap.gno__SetSwapFee() || fee(%d) must be in range 0 ~ 10000\", fee))\n\t}\n\n\tswapFee = fee\n\n\tstd.Emit(\n\t\t\"GNOSWAP\",\n\t\t\"m_callType\", callType(),\n\t\t\"m_origCaller\", origCaller(),\n\t\t\"m_prevRealm\", prevRealm(),\n\t\t\"p_fee\", uint64ToStr(fee),\n\t)\n}\n"},{"name":"router.gno","body":"package router\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n\n\t\"gno.land/r/gnoswap/common\"\n\t\"gno.land/r/gnoswap/consts\"\n\n\ti256 \"gno.land/p/gnoswap/int256\"\n\tu256 \"gno.land/p/gnoswap/uint256\"\n\n\t\"gno.land/r/demo/wugnot\"\n\n\ten \"gno.land/r/gnoswap/emission\"\n)\n\n// SwapRoute swaps the input token to the output token and returns the result amount\n// If swapType is EXACT_IN, it returns the amount of output token ≈ amount of user to receive\n// If swapType is EXACT_OUT, it returns the amount of input token ≈ amount of user to pay\n//\n// Panics if any of the following conditions are met:\n// - amountSpecified is zero or is not numeric\n// - swapType is not EXACT_IN or EXACT_OUT\n// - length of route and quotes are not the same\n// - length of routes is not 1 ~ 7\n// - sum of quotes is not 100\n// - number of hops is not 1 ~ 3\n// - too many token spend or too few token received\nfunc SwapRoute(\n\tinputToken string,\n\toutputToken string,\n\t_amountSpecified string, // int256\n\tswapType string,\n\tstrRouteArr string, // []string\n\tquoteArr string, // []int\n\t_tokenAmountLimit string, // uint256\n) (string, string) { // tokneIn, tokenOut\n\ten.MintAndDistributeGns()\n\n\tif common.GetLimitCaller() {\n\t\tisUserCalled := std.PrevRealm().PkgPath() == \"\"\n\t\tif !isUserCalled {\n\t\t\tpanic(\"[ROUTER] router.gno__SwapRoute() || only user can call this function\")\n\t\t}\n\t}\n\n\tamountSpecified := i256.MustFromDecimal(_amountSpecified)\n\tif amountSpecified.IsZero() {\n\t\tpanic(\"[ROUTER] router.gno__SwapRoute() || amountSpecified == 0\")\n\t}\n\tif amountSpecified.IsNeg() {\n\t\tpanic(\"[ROUTER] router.gno__SwapRoute() || amountSpecified \u003c 0\")\n\t}\n\n\ttokenAmountLimit := u256.MustFromDecimal(_tokenAmountLimit)\n\n\tswitch swapType {\n\tcase \"EXACT_IN\":\n\t\t// do nothing\n\tcase \"EXACT_OUT\":\n\t\tamountSpecified = i256.Zero().Neg(amountSpecified)\n\tdefault:\n\t\tpanic(\"[ROUTER] router.gno__SwapRoute() || unknown swapType\")\n\t}\n\n\t// check route length ( should be 1 ~ 7 )\n\troutes := strings.Split(strRouteArr, \",\")\n\tisValidRouteLength := (1 \u003c= len(routes)) \u0026\u0026 (len(routes) \u003c= 7)\n\tif !isValidRouteLength {\n\t\tpanic(ufmt.Sprintf(\"[ROUTER] router.gno__SwapRoute() || len(routes) should be 1 ~ 7 (len(routes)[%d])\", len(routes)))\n\t}\n\n\t// check if routes length and quotes length are same\n\tquotes := strings.Split(quoteArr, \",\")\n\tif len(routes) != len(quotes) {\n\t\tpanic(ufmt.Sprintf(\"[ROUTER] router.gno__SwapRoute() || len(routes[%d]) != len(quotes[%d])\", len(routes), len(quotes)))\n\t}\n\n\t// check if quotes are up to 100%\n\tquotesSum := int64(0)\n\tfor _, quote := range quotes {\n\t\tintQuote, _ := strconv.Atoi(quote)\n\t\tquotesSum += int64(intQuote)\n\t}\n\tif quotesSum != 100 {\n\t\tpanic(ufmt.Sprintf(\"[ROUTER] router.gno__SwapRoute() || quotesSum != 100 (quotesSum)[%d]\", quotesSum))\n\t}\n\n\t// if input is gnot, wrap it\n\tuserOldWugnotBalance := uint64(0)\n\tif inputToken == consts.GNOT {\n\t\tsent := std.GetOrigSend()\n\t\tugnotSentByUser := uint64(sent.AmountOf(\"ugnot\"))\n\n\t\twrap(ugnotSentByUser)\n\t\tuserOldWugnotBalance = wugnot.BalanceOf(a2u(std.GetOrigCaller()))\n\t} else if outputToken == consts.GNOT { // if output is gnot unwrap later (save user's current wugnot balance)\n\t\tuserOldWugnotBalance = wugnot.BalanceOf(a2u(std.GetOrigCaller()))\n\t}\n\n\tresultAmountIn := u256.Zero()\n\tresultAmountOut := u256.Zero()\n\n\tfor i, route := range routes {\n\t\tnumHops := strings.Count(route, \"*POOL*\") + 1\n\t\tquote, _ := strconv.Atoi(quotes[i])\n\n\t\tif numHops \u003c 1 || numHops \u003e 3 {\n\t\t\tpanic(ufmt.Sprintf(\"[ROUTER] router.gno__SwapRoute() || numHops should be 1 ~ 3 (numHops)[%d]\", numHops))\n\t\t}\n\n\t\ttoSwap := i256.Zero().Mul(amountSpecified, i256.NewInt(int64(quote)))\n\t\ttoSwap = toSwap.Div(toSwap, i256.NewInt(100))\n\n\t\tif numHops == 1 { // SINGLE\n\t\t\tamountIn, amountOut := handleSingleSwap(route, toSwap, false)\n\t\t\tresultAmountIn = new(u256.Uint).Add(resultAmountIn, amountIn)\n\t\t\tresultAmountOut = new(u256.Uint).Add(resultAmountOut, amountOut)\n\t\t} else if numHops == 2 || numHops == 3 { // MULTI\n\t\t\tamountIn, amountOut := handleMultiSwap(swapType, route, numHops, toSwap, false)\n\t\t\tresultAmountIn = new(u256.Uint).Add(resultAmountIn, amountIn)\n\t\t\tresultAmountOut = new(u256.Uint).Add(resultAmountOut, amountOut)\n\t\t} else {\n\t\t\tpanic(\"[ROUTER] router.gno__SwapRoute() || numHops should be 1 ~ 3\")\n\t\t}\n\t}\n\n\t// PROTOCOL FEE (router swap fee)\n\tafterFee := handleSwapFee(outputToken, resultAmountOut, false)\n\n\t// UNWRAP IF NECESSARY\n\t// if input was gnot, refund left over wugnot\n\tif inputToken == consts.GNOT {\n\t\tuserNewWugnotBalance := wugnot.BalanceOf(a2u(std.GetOrigCaller()))\n\t\tunwrap(userNewWugnotBalance)\n\t} else if outputToken == consts.GNOT { // if output was gnot, unwrap result\n\t\tuserNewWugnotBalance := wugnot.BalanceOf(a2u(std.GetOrigCaller()))\n\t\tuserRecvWugnot := uint64(userNewWugnotBalance - userOldWugnotBalance) // received wugnot\n\t\tunwrap(userRecvWugnot)\n\t}\n\n\tif swapType == \"EXACT_IN\" {\n\t\tif !(tokenAmountLimit.Lte(afterFee)) {\n\t\t\tpanic(ufmt.Sprintf(\"[ROUTER] router.gno__SwapRoute() || too few received for user (expected minimum received:%s, actual received:%s)\", _tokenAmountLimit, afterFee.ToString()))\n\t\t}\n\t} else { // EXACT_OUT\n\t\tif !(resultAmountIn.Lte(tokenAmountLimit)) {\n\t\t\tpanic(ufmt.Sprintf(\"[ROUTER] router.gno__SwapRoute() || too much spend for user (expected maximum spend:%s, actual spend:%s)\", _tokenAmountLimit, resultAmountIn.ToString()))\n\t\t}\n\t}\n\n\tintAmountOut := i256.FromUint256(afterFee)\n\n\tstd.Emit(\n\t\t\"GNOSWAP\",\n\t\t\"m_callType\", callType(),\n\t\t\"m_origCaller\", origCaller(),\n\t\t\"m_prevRealm\", prevRealm(),\n\t\t\"p_input\", inputToken,\n\t\t\"p_output\", outputToken,\n\t\t\"p_swapType\", swapType,\n\t\t\"p_amountSpecified\", _amountSpecified,\n\t\t\"p_route\", strRouteArr,\n\t\t\"p_quote\", quoteArr,\n\t\t\"amountIn\", resultAmountIn.ToString(),\n\t\t\"amountOut\", i256.Zero().Neg(intAmountOut).ToString(),\n\t\t\"amountOutWithoutFee\", resultAmountOut.ToString(),\n\t)\n\n\treturn resultAmountIn.ToString(), i256.Zero().Neg(intAmountOut).ToString()\n}\n\nfunc handleSingleSwap(route string, amountSpecified *i256.Int, isDry bool) (*u256.Uint, *u256.Uint) {\n\tinput, output, fee := getDataForSinglePath(route)\n\tsingleParams := SingleSwapParams{\n\t\ttokenIn:         input,\n\t\ttokenOut:        output,\n\t\tfee:             fee,\n\t\tamountSpecified: amountSpecified,\n\t}\n\n\tif isDry {\n\t\treturn singleSwapDry(singleParams)\n\t}\n\treturn singleSwap(singleParams)\n}\n\nfunc handleMultiSwap(swapType string, route string, numHops int, amountSpecified *i256.Int, isDry bool) (*u256.Uint, *u256.Uint) {\n\tswitch swapType {\n\tcase \"EXACT_IN\":\n\t\tinput, output, fee := getDataForMultiPath(route, 0) // first data\n\t\tswapParams := SwapParams{\n\t\t\ttokenIn:         input,\n\t\t\ttokenOut:        output,\n\t\t\tfee:             fee,\n\t\t\trecipient:       std.GetOrigCaller(),\n\t\t\tamountSpecified: amountSpecified,\n\t\t}\n\n\t\tif isDry {\n\t\t\treturn multiSwapDry(swapParams, 0, numHops, route) // iterate here\n\t\t}\n\t\treturn multiSwap(swapParams, 0, numHops, route) // iterate here\n\n\tcase \"EXACT_OUT\":\n\t\tinput, output, fee := getDataForMultiPath(route, numHops-1) // last data\n\t\tswapParams := SwapParams{\n\t\t\ttokenIn:         input,\n\t\t\ttokenOut:        output,\n\t\t\tfee:             fee,\n\t\t\trecipient:       std.GetOrigCaller(),\n\t\t\tamountSpecified: amountSpecified,\n\t\t}\n\n\t\tif isDry {\n\t\t\treturn multiSwapNegativeDry(swapParams, numHops-1, route) // iterate here\n\t\t}\n\t\treturn multiSwapNegative(swapParams, numHops-1, route) // iterate here\n\n\tdefault:\n\t\tpanic(\"[ROUTER] router.gno__handleMultiSwap() || unknown swapType\")\n\t}\n}\n"},{"name":"router_dry.gno","body":"package router\n\nimport (\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n\n\ti256 \"gno.land/p/gnoswap/int256\"\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\n// DrySwapRoute simulates the swap route and returns the result amount\n// If swapType is EXACT_IN, it returns the amount of output token ≈ amount of user to receive\n// If swapType is EXACT_OUT, it returns the amount of input token ≈ amount of user to pay\n// If swap it not possible, it returns -1\n//\n// Panics if any of the following conditions are met:\n// - amountSpecified is zero or is not numeric\n// - swapType is not EXACT_IN or EXACT_OUT\n// - length of route and quotes are not the same\n// - length of routes is not 1 ~ 7\n// - sum of quotes is not 100\n// - number of hops is not 1 ~ 3\nfunc DrySwapRoute(\n\tinputToken string,\n\toutputToken string,\n\t_amountSpecified string, // int256\n\tswapType string,\n\tstrRouteArr string, // []string\n\tquoteArr string, // []int\n) string { // uint256\n\tamountSpecified, err := i256.FromDecimal(_amountSpecified)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[ROUTER] router_dry.gno__SwapRoute() || i256.FromDecimal(_amountSpecified(%s) failed\", _amountSpecified))\n\t}\n\tif amountSpecified.IsZero() {\n\t\tpanic(\"[ROUTER] router_dry.gno__SwapRoute() || amountSpecified == 0\")\n\t}\n\tif amountSpecified.IsNeg() {\n\t\tpanic(\"[ROUTER] router.gno__SwapRoute() || amountSpecified \u003c 0\")\n\t}\n\n\tswitch swapType {\n\tcase \"EXACT_IN\":\n\t\tamountSpecified = amountSpecified\n\tcase \"EXACT_OUT\":\n\t\tamountSpecified = i256.Zero().Neg(amountSpecified)\n\tdefault:\n\t\tpanic(\"[ROUTER] router_dry.gno__DrySwapRoute() || unknown swapType\")\n\t}\n\n\t// check route length ( should be 1 ~ 7 )\n\troutes := strings.Split(strRouteArr, \",\")\n\tisValidRouteLength := (1 \u003c= len(routes)) \u0026\u0026 (len(routes) \u003c= 7)\n\tif !isValidRouteLength {\n\t\tpanic(ufmt.Sprintf(\"[ROUTER] router_dry.gno__DrySwapRoute() || len(routes) should be 1 ~ 7 (len(routes)[%d])\", len(routes)))\n\t}\n\n\t// check if routes length and quotes length are same\n\tquotes := strings.Split(quoteArr, \",\")\n\tif len(routes) != len(quotes) {\n\t\tpanic(ufmt.Sprintf(\"[ROUTER] router_dry.gno__DrySwapRoute() || len(routes[%d]) != len(quotes[%d])\", len(routes), len(quotes)))\n\t}\n\n\t// check if quotes are up to 100%\n\tquotesSum := int64(0)\n\tfor _, quote := range quotes {\n\t\tintQuote, _ := strconv.Atoi(quote)\n\t\tquotesSum += int64(intQuote)\n\t}\n\tif quotesSum != 100 {\n\t\tpanic(ufmt.Sprintf(\"[ROUTER] router_dry.gno__DrySwapRoute() || quotesSum != 100 (quotesSum)[%d]\", quotesSum))\n\t}\n\n\tresultAmountIn := u256.Zero()\n\tresultAmountOut := u256.Zero()\n\n\tfor i, route := range routes {\n\t\tnumHops := strings.Count(route, \"*POOL*\") + 1\n\t\tquote, _ := strconv.Atoi(quotes[i])\n\n\t\tif numHops \u003c 1 || numHops \u003e 3 {\n\t\t\tpanic(ufmt.Sprintf(\"[ROUTER] router_dry.gno__DrySwapRoute() || numHops should be 1 ~ 3 (numHops)[%d]\", numHops))\n\t\t}\n\n\t\ttoSwap := i256.Zero().Mul(amountSpecified, i256.NewInt(int64(quote)))\n\t\ttoSwap = toSwap.Div(toSwap, i256.NewInt(100))\n\n\t\tif numHops == 1 { // SINGLE\n\t\t\tamountIn, amountOut := handleSingleSwap(route, toSwap, true)\n\t\t\tresultAmountIn = new(u256.Uint).Add(resultAmountIn, amountIn)\n\t\t\tresultAmountOut = new(u256.Uint).Add(resultAmountOut, amountOut)\n\t\t} else if 2 \u003c= numHops \u0026\u0026 numHops \u003c= 3 { // MULTI\n\t\t\tamountIn, amountOut := handleMultiSwap(swapType, route, numHops, toSwap, true)\n\t\t\tresultAmountIn = new(u256.Uint).Add(resultAmountIn, amountIn)\n\t\t\tresultAmountOut = new(u256.Uint).Add(resultAmountOut, amountOut)\n\t\t} else {\n\t\t\tpanic(\"[ROUTER] router_dry.gno__DrySwapRoute() || numHops should be 1 ~ 3\")\n\t\t}\n\t}\n\n\t// PROTOCOL FEE\n\t// DrySwap should return raw resultAmountOut( ≈ with protocol fee )\n\tif swapType == \"EXACT_IN\" {\n\t\tif !(i256.FromUint256(resultAmountIn).Eq(amountSpecified)) {\n\t\t\treturn \"-1\" // if pool doesn't have enough output token amount to swap against input token amount\n\t\t}\n\t\treturn resultAmountOut.ToString()\n\t}\n\n\tif swapType == \"EXACT_OUT\" {\n\t\tif i256.FromUint256(resultAmountOut).Lt(amountSpecified) { // if pool doesn't have enough user wanted amount of output token\n\t\t\treturn \"-1\"\n\t\t}\n\t\treturn resultAmountIn.ToString()\n\t}\n\n\tpanic(\"[ROUTER] router_dry.gno__DrySwapRoute() || unknown swapType\")\n}\n"},{"name":"swap_inner.gno","body":"package router\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/ufmt\"\n\n\tpl \"gno.land/r/gnoswap/pool\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\n\ti256 \"gno.land/p/gnoswap/int256\"\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\nfunc _swap(\n\tamountSpecified *i256.Int,\n\trecipient std.Address,\n\tsqrtPriceLimitX96 *u256.Uint,\n\tdata SwapCallbackData,\n) (*u256.Uint, *u256.Uint) { // poolRecv, poolOut\n\t// prepare\n\tzeroForOne := data.tokenIn \u003c data.tokenOut\n\n\tif sqrtPriceLimitX96.IsZero() {\n\t\tif zeroForOne {\n\t\t\tsqrtPriceLimitX96 = u256.MustFromDecimal(consts.MIN_PRICE)\n\t\t} else {\n\t\t\tsqrtPriceLimitX96 = u256.MustFromDecimal(consts.MAX_PRICE)\n\t\t}\n\t}\n\n\t// ROUTER approves POOL as spender\n\tapproveByRegisterCall(data.tokenIn, consts.POOL_ADDR, consts.UINT64_MAX)\n\tapproveByRegisterCall(data.tokenOut, consts.POOL_ADDR, consts.UINT64_MAX)\n\n\tamount0Str, amount1Str := pl.Swap( // int256, int256\n\t\tdata.tokenIn,\n\t\tdata.tokenOut,\n\t\tdata.fee,\n\n\t\trecipient.String(),\n\t\tzeroForOne,\n\t\tamountSpecified.ToString(),\n\t\tsqrtPriceLimitX96.ToString(),\n\n\t\tdata.payer.String(),\n\t)\n\tamount0, err := i256.FromDecimal(amount0Str)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[ROUTER] router.gno__Swap() || i256.FromDecimal(amount0Str(%s) failed\", amount0Str))\n\t}\n\tamount1, err := i256.FromDecimal(amount1Str)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[ROUTER] router.gno__Swap() || i256.FromDecimal(amount1Str(%s) failed\", amount1Str))\n\t}\n\n\tpoolRecv := i256Max(amount0, amount1)\n\tpoolOut := i256Min(amount0, amount1)\n\n\treturn poolRecv.Abs(), poolOut.Abs()\n}\n\nfunc _swapDry(\n\tamountSpecified *i256.Int,\n\tsqrtPriceLimitX96 *u256.Uint,\n\tdata SwapCallbackData,\n) (*u256.Uint, *u256.Uint) { // poolRecv, poolOut\n\tzeroForOne := data.tokenIn \u003c data.tokenOut\n\n\tif sqrtPriceLimitX96.IsZero() {\n\t\tif zeroForOne {\n\t\t\tsqrtPriceLimitX96 = u256.MustFromDecimal(consts.MIN_PRICE)\n\t\t} else {\n\t\t\tsqrtPriceLimitX96 = u256.MustFromDecimal(consts.MAX_PRICE)\n\t\t}\n\t}\n\n\t// check possible\n\tamount0Str, amount1Str, ok := pl.DrySwap(\n\t\tdata.tokenIn,\n\t\tdata.tokenOut,\n\t\tdata.fee,\n\n\t\tzeroForOne,\n\t\tamountSpecified.ToString(),\n\t\tsqrtPriceLimitX96.ToString(),\n\t)\n\tif !ok {\n\t\treturn u256.Zero(), u256.Zero()\n\t}\n\n\tamount0, err := i256.FromDecimal(amount0Str)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[ROUTER] router.gno__Swap() || i256.FromDecimal(amount0Str(%s) failed\", amount0Str))\n\t}\n\tamount1, err := i256.FromDecimal(amount1Str)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[ROUTER] router.gno__Swap() || i256.FromDecimal(amount1Str(%s) failed\", amount1Str))\n\t}\n\n\tpoolRecv := i256Max(amount0, amount1)\n\tpoolOut := i256Min(amount0, amount1)\n\n\treturn poolRecv.Abs(), poolOut.Abs()\n}\n\nfunc i256Min(x, y *i256.Int) *i256.Int {\n\tif x.Lt(y) {\n\t\treturn x\n\t}\n\treturn y\n}\n\nfunc i256Max(x, y *i256.Int) *i256.Int {\n\tif x.Gt(y) {\n\t\treturn x\n\t}\n\treturn y\n}\n"},{"name":"swap_multi.gno","body":"package router\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\n\ti256 \"gno.land/p/gnoswap/int256\"\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\nfunc multiSwap(params SwapParams, currentPoolIndex, numPools int, swapPath string) (*u256.Uint, *u256.Uint) { // firstAmountIn, lastAmountOut\n\tfirstAmountIn := u256.Zero()\n\n\tpayer := std.GetOrigCaller() // user\n\n\tfor {\n\t\tvar recipient std.Address\n\t\tcurrentPoolIndex++\n\n\t\tif currentPoolIndex \u003c numPools {\n\t\t\trecipient = consts.ROUTER_ADDR\n\t\t} else {\n\t\t\trecipient = params.recipient // user ~= std.GetOrigCaller()\n\t\t}\n\n\t\tamountIn, amountOut := _swap(\n\t\t\tparams.amountSpecified,\n\t\t\trecipient,\n\t\t\tu256.Zero(),\n\t\t\tSwapCallbackData{\n\t\t\t\tparams.tokenIn,\n\t\t\t\tparams.tokenOut,\n\t\t\t\tparams.fee,\n\t\t\t\tpayer,\n\t\t\t},\n\t\t)\n\n\t\tif currentPoolIndex == 1 {\n\t\t\tfirstAmountIn = amountIn\n\t\t}\n\n\t\tif currentPoolIndex \u003c numPools {\n\t\t\tpayer = consts.ROUTER_ADDR\n\n\t\t\tnextInput, nextOutput, nextFee := getDataForMultiPath(swapPath, currentPoolIndex)\n\t\t\tparams.tokenIn = nextInput\n\t\t\tparams.tokenOut = nextOutput\n\t\t\tparams.fee = nextFee\n\n\t\t\tparams.amountSpecified = i256.FromUint256(amountOut)\n\n\t\t} else {\n\t\t\treturn firstAmountIn, amountOut\n\t\t}\n\t}\n}\n\nfunc multiSwapNegative(params SwapParams, numPools int, swapPath string) (*u256.Uint, *u256.Uint) { // firstAmountIn, lastAmountOut\n\tfirstAmountIn := u256.Zero()\n\n\tswapInfo := []SingleSwapParams{}\n\tcurrentPoolIndex := numPools\n\n\t// CALCULATE BACKWARD INFO\n\tfor {\n\t\tamountIn, _ := singleSwapDry(\n\t\t\tSingleSwapParams{\n\t\t\t\ttokenIn:         params.tokenIn,\n\t\t\t\ttokenOut:        params.tokenOut,\n\t\t\t\tfee:             params.fee,\n\t\t\t\tamountSpecified: params.amountSpecified,\n\t\t\t},\n\t\t)\n\n\t\tthisSwap := SingleSwapParams{\n\t\t\ttokenIn:         params.tokenIn,\n\t\t\ttokenOut:        params.tokenOut,\n\t\t\tfee:             params.fee,\n\t\t\tamountSpecified: params.amountSpecified,\n\t\t}\n\t\tswapInfo = append(swapInfo, thisSwap)\n\n\t\tif currentPoolIndex == 0 {\n\t\t\tbreak\n\t\t} else {\n\t\t\tcurrentPoolIndex--\n\t\t\tnextInput, nextOutput, nextFee := getDataForMultiPath(swapPath, currentPoolIndex)\n\t\t\tparams.tokenIn = nextInput\n\t\t\tparams.tokenOut = nextOutput\n\t\t\tparams.fee = nextFee\n\n\t\t\t_intAmountIn := i256.FromUint256(amountIn)\n\t\t\tparams.amountSpecified = i256.Zero().Neg(_intAmountIn)\n\t\t}\n\t}\n\n\t// PROCESS FORWARD INFO\n\tcurrentPoolIndex = len(swapInfo)\n\tpayer := std.GetOrigCaller() // first payer ~= user\n\tfor {\n\t\tvar recipient std.Address\n\t\tcurrentPoolIndex--\n\t\tif currentPoolIndex == 0 {\n\t\t\trecipient = std.GetOrigCaller() // params.recipient // user ~= std.GetOrigCaller()\n\t\t} else {\n\t\t\trecipient = consts.ROUTER_ADDR\n\t\t}\n\n\t\tamountIn, amountOut := _swap(\n\t\t\tswapInfo[currentPoolIndex].amountSpecified,\n\t\t\trecipient,\n\t\t\tu256.Zero(),\n\t\t\tSwapCallbackData{\n\t\t\t\tswapInfo[currentPoolIndex].tokenIn,\n\t\t\t\tswapInfo[currentPoolIndex].tokenOut,\n\t\t\t\tswapInfo[currentPoolIndex].fee,\n\t\t\t\tpayer,\n\t\t\t},\n\t\t)\n\n\t\t// save route's first hop's amountIn to check whether crossed limit or not\n\t\tif currentPoolIndex == len(swapInfo)-1 {\n\t\t\tfirstAmountIn = amountIn\n\t\t}\n\n\t\tif currentPoolIndex == 0 {\n\t\t\treturn firstAmountIn, amountOut\n\t\t} else {\n\t\t\tpayer = consts.ROUTER_ADDR\n\t\t\tswapInfo[currentPoolIndex-1].amountSpecified = i256.FromUint256(amountOut)\n\t\t}\n\t}\n}\n\nfunc multiSwapDry(params SwapParams, currentPoolIndex, numPool int, swapPath string) (*u256.Uint, *u256.Uint) { // firstAmountIn, lastAmountOut\n\tfirstAmountIn := u256.Zero()\n\n\tpayer := std.GetOrigCaller() // user\n\n\tfor {\n\t\tcurrentPoolIndex++\n\n\t\tamountIn, amountOut := _swapDry(\n\t\t\tparams.amountSpecified,\n\t\t\tu256.Zero(),\n\t\t\tSwapCallbackData{\n\t\t\t\tparams.tokenIn,\n\t\t\t\tparams.tokenOut,\n\t\t\t\tparams.fee,\n\t\t\t\tpayer,\n\t\t\t},\n\t\t)\n\n\t\tif currentPoolIndex == 1 {\n\t\t\tfirstAmountIn = amountIn\n\t\t}\n\n\t\tif currentPoolIndex \u003c numPool {\n\t\t\tpayer = consts.ROUTER_ADDR\n\n\t\t\tnextInput, nextOutput, nextFee := getDataForMultiPath(swapPath, currentPoolIndex)\n\t\t\tparams.tokenIn = nextInput\n\t\t\tparams.tokenOut = nextOutput\n\t\t\tparams.fee = nextFee\n\n\t\t\tparams.amountSpecified = i256.FromUint256(amountOut)\n\t\t} else {\n\t\t\treturn firstAmountIn, amountOut\n\t\t}\n\t}\n\n}\n\nfunc multiSwapNegativeDry(params SwapParams, currentPoolIndex int, swapPath string) (*u256.Uint, *u256.Uint) { // firstAmountIn, lastAmountOut\n\tfirstAmountIn := u256.Zero()\n\tpayer := consts.ROUTER_ADDR\n\n\tfor {\n\t\tamountIn, amountOut := _swapDry(\n\t\t\tparams.amountSpecified,\n\t\t\tu256.Zero(),\n\t\t\tSwapCallbackData{\n\t\t\t\tparams.tokenIn,\n\t\t\t\tparams.tokenOut,\n\t\t\t\tparams.fee,\n\t\t\t\tpayer,\n\t\t\t},\n\t\t)\n\n\t\tif currentPoolIndex == 0 {\n\t\t\t// save for return\n\t\t\tfirstAmountIn = amountIn\n\t\t}\n\n\t\tcurrentPoolIndex--\n\n\t\tif currentPoolIndex != -1 {\n\t\t\tnextInput, nextOutput, nextFee := getDataForMultiPath(swapPath, currentPoolIndex)\n\t\t\tparams.tokenIn = nextInput\n\t\t\tparams.tokenOut = nextOutput\n\t\t\tparams.fee = nextFee\n\n\t\t\t_intAmountIn := i256.FromUint256(amountIn)\n\t\t\tparams.amountSpecified = i256.Zero().Neg(_intAmountIn)\n\t\t} else {\n\t\t\treturn firstAmountIn, amountOut\n\t\t}\n\t}\n}\n"},{"name":"swap_single.gno","body":"package router\n\nimport (\n\t\"std\"\n\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\nfunc singleSwap(params SingleSwapParams) (*u256.Uint, *u256.Uint) { // amountIn, amountOut\n\tamountIn, amountOut := _swap(\n\t\tparams.amountSpecified,\n\t\tstd.GetOrigCaller(), // if single swap =\u003e user will recieve\n\t\tu256.Zero(),         // sqrtPriceLimitX96\n\t\tSwapCallbackData{\n\t\t\tparams.tokenIn,\n\t\t\tparams.tokenOut,\n\t\t\tparams.fee,\n\t\t\tstd.PrevRealm().Addr(), // payer ==\u003e msg.sender,\n\t\t},\n\t)\n\n\treturn amountIn, amountOut\n}\n\nfunc singleSwapDry(params SingleSwapParams) (*u256.Uint, *u256.Uint) { // amountIn, amountOut\n\tamountIn, amountOut := _swapDry(\n\t\tparams.amountSpecified,\n\t\tu256.Zero(), // sqrtPriceLimitX96\n\t\tSwapCallbackData{\n\t\t\tparams.tokenIn,\n\t\t\tparams.tokenOut,\n\t\t\tparams.fee,\n\t\t\tstd.PrevRealm().Addr(), // payer ==\u003e msg.sender,\n\t\t},\n\t)\n\n\treturn amountIn, amountOut\n}\n"},{"name":"token_register.gno","body":"package router\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/ufmt\"\n\n\tpusers \"gno.land/p/demo/users\"\n\n\t\"gno.land/r/gnoswap/consts\"\n)\n\ntype GRC20Interface interface {\n\tTransfer() func(to pusers.AddressOrName, amount uint64)\n\tTransferFrom() func(from, to pusers.AddressOrName, amount uint64)\n\tBalanceOf() func(owner pusers.AddressOrName) uint64\n\tApprove() func(spender pusers.AddressOrName, amount uint64)\n}\n\nvar (\n\tregistered = make(map[string]GRC20Interface)\n\tlocked     = false // mutex\n)\n\nfunc GetRegisteredTokens() []string {\n\ttokens := make([]string, 0, len(registered))\n\tfor k := range registered {\n\t\ttokens = append(tokens, k)\n\t}\n\treturn tokens\n}\n\nfunc RegisterGRC20Interface(pkgPath string, igrc20 GRC20Interface) {\n\tcaller := std.GetOrigCaller()\n\tif caller != consts.TOKEN_REGISTER {\n\t\tpanic(ufmt.Sprintf(\"[ROUTER] token_register.gno__RegisterGRC20Interface() || unauthorized address(%s) to register\", caller.String()))\n\t}\n\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif found {\n\t\tpanic(ufmt.Sprintf(\"[ROUTER] router_register.gno__RegisterGRC20Interface() || pkgPath(%s) already registered\", pkgPath))\n\t}\n\n\tregistered[pkgPath] = igrc20\n}\n\nfunc UnregisterGRC20Interface(pkgPath string) {\n\tcaller := std.GetOrigCaller()\n\tif caller != consts.TOKEN_REGISTER {\n\t\tpanic(ufmt.Sprintf(\"[ROUTER] token_register.gno__UnregisterGRC20Interface() || unauthorized address(%s) to unregister\", caller.String()))\n\t}\n\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif found {\n\t\tdelete(registered, pkgPath)\n\t}\n}\n\nfunc transferByRegisterCall(pkgPath string, to std.Address, amount uint64) bool {\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif !found {\n\t\tpanic(ufmt.Sprintf(\"[ROUTER] router_register.gno__transferByRegisterCall() || pkgPath(%s) not found\", pkgPath))\n\t}\n\n\tif !locked {\n\t\tlocked = true\n\t\tregistered[pkgPath].Transfer()(pusers.AddressOrName(to), amount)\n\n\t\tdefer func() {\n\t\t\tlocked = false\n\t\t}()\n\t} else {\n\t\tpanic(\"[POOl] router_register.gno__transferByRegisterCall() || expected locked to be false\")\n\t}\n\treturn true\n}\n\nfunc transferFromByRegisterCall(pkgPath string, from, to std.Address, amount uint64) bool {\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif !found {\n\t\tpanic(ufmt.Sprintf(\"[ROUTER] router_register.gno__transferFromByRegisterCall() || pkgPath(%s) not found\", pkgPath))\n\t}\n\n\tif !locked {\n\t\tlocked = true\n\t\tregistered[pkgPath].TransferFrom()(pusers.AddressOrName(from), pusers.AddressOrName(to), amount)\n\n\t\tdefer func() {\n\t\t\tlocked = false\n\t\t}()\n\t} else {\n\t\tpanic(\"[POOl] router_register.gno__transferFromByRegisterCall() || expected locked to be false\")\n\t}\n\treturn true\n}\n\nfunc balanceOfByRegisterCall(pkgPath string, owner std.Address) uint64 {\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif !found {\n\t\tpanic(ufmt.Sprintf(\"[ROUTER] router_register.gno__balanceOfByRegisterCall() || pkgPath(%s) not found\", pkgPath))\n\t}\n\n\tbalance := registered[pkgPath].BalanceOf()(pusers.AddressOrName(owner))\n\treturn balance\n}\n\nfunc approveByRegisterCall(pkgPath string, spender std.Address, amount uint64) bool {\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif !found {\n\t\tpanic(ufmt.Sprintf(\"[ROUTER] router_register.gno__approveByRegisterCall() || pkgPath(%s) not found\", pkgPath))\n\t}\n\n\tregistered[pkgPath].Approve()(pusers.AddressOrName(spender), amount)\n\n\treturn true\n}\n\nfunc handleNative(pkgPath string) string {\n\tif pkgPath == consts.GNOT {\n\t\treturn consts.WRAPPED_WUGNOT\n\t}\n\n\treturn pkgPath\n}\n"},{"name":"type.gno","body":"package router\n\nimport (\n\t\"std\"\n\n\ti256 \"gno.land/p/gnoswap/int256\"\n)\n\n// SWAP TYPE\ntype SwapType string\n\nconst (\n\tExactIn  SwapType = \"EXACT_IN\"\n\tExactOut SwapType = \"EXACT_OUT\"\n)\n\n// SINGLE SWAP\ntype SingleSwapParams struct {\n\ttokenIn  string // token to spend\n\ttokenOut string // token to receive\n\tfee      uint32 // fee of the pool used to swap\n\n\t// if positive, it's the amount of tokenIn to spend\n\t// if negative, it's the wanted amount of tokenOut to receive\n\tamountSpecified *i256.Int\n}\n\n// MUTLI SWAP\ntype SwapParams struct {\n\ttokenIn   string      // token to spend\n\ttokenOut  string      // token to receive\n\tfee       uint32      // fee of the pool used to swap\n\trecipient std.Address // address to receive the token\n\n\t// if positive, it's the amount of tokenIn to spend\n\t// if negative, it's the wanted amount of tokenOut to receive\n\tamountSpecified *i256.Int\n}\n\n// SWAP DATA\ntype SwapCallbackData struct {\n\ttokenIn  string // token to spend\n\ttokenOut string // token to receive\n\tfee      uint32 // fee of the pool used to swap\n\n\tpayer std.Address // address to spend the token\n}\n"},{"name":"utils.gno","body":"package router\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\tpusers \"gno.land/p/demo/users\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nfunc poolPathWithFeeDivide(poolPath string) (string, string, int) {\n\tpoolPathSplit := strings.Split(poolPath, \":\")\n\tif len(poolPathSplit) != 3 {\n\t\tpanic(ufmt.Sprintf(\"[ROUTER] _RPC_api.gno__poolPathWithFeeDivide() || len(poolPathSplit) != 3, poolPath: %s\", poolPath))\n\t}\n\n\tfeeInt, err := strconv.Atoi(poolPathSplit[2])\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[ROUTER] _RPC_api.gno__poolPathWithFeeDivide() || cannot convert fee(%s) to int\", poolPathSplit[2]))\n\t}\n\n\treturn poolPathSplit[0], poolPathSplit[1], feeInt\n}\n\nfunc getDataForSinglePath(poolPath string) (string, string, uint32) {\n\tdatas := strings.Split(poolPath, \":\")\n\tif len(datas) != 3 {\n\t\tpanic(ufmt.Sprintf(\"[ROUTER] _util.gno__getDataForSinglePath() || len(datas) != 3 (poolPath:%s)\", poolPath))\n\t}\n\n\ttoken0 := datas[0]\n\ttoken1 := datas[1]\n\tfee, _ := strconv.Atoi(datas[2])\n\n\treturn token0, token1, uint32(fee)\n}\n\nfunc getDataForMultiPath(possiblePath string, poolIdx int) (string, string, uint32) {\n\tpools := strings.Split(possiblePath, \"*POOL*\")\n\n\tvar token0, token1 string\n\tvar fee uint32\n\n\tswitch poolIdx {\n\tcase 0:\n\t\ttoken0, token1, fee = getDataForSinglePath(pools[0])\n\tcase 1:\n\t\ttoken0, token1, fee = getDataForSinglePath(pools[1])\n\tcase 2:\n\t\ttoken0, token1, fee = getDataForSinglePath(pools[2])\n\tdefault:\n\t\treturn \"\", \"\", uint32(0)\n\t}\n\n\treturn token0, token1, fee\n}\n\nfunc isStringInStringArr(arr []string, str string) bool {\n\tfor _, a := range arr {\n\t\tif a == str {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc removeStringFromStringArr(arr []string, str string) []string {\n\tfor i, a := range arr {\n\t\tif a == str {\n\t\t\treturn append(arr[:i], arr[i+1:]...)\n\t\t}\n\t}\n\treturn arr\n}\n\nfunc a2u(addr std.Address) pusers.AddressOrName {\n\treturn pusers.AddressOrName(addr)\n}\n\nfunc min(a, b int) int {\n\tif a \u003c b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc origCaller() string {\n\treturn std.GetOrigCaller().String()\n}\n\nfunc prevRealm() string {\n\treturn std.PrevRealm().PkgPath()\n}\n\nfunc callType() string {\n\tif prevRealm() == \"\" {\n\t\treturn \"DIRECT\"\n\t}\n\n\treturn \"INDIRECT\"\n}\n\nfunc uint64ToStr(i uint64) string {\n\treturn strconv.FormatInt(int64(i), 10)\n}\n"},{"name":"wrap_unwrap.gno","body":"package router\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/demo/wugnot\"\n\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/gnoswap/consts\"\n)\n\nfunc wrap(ugnotAmount uint64) {\n\tif ugnotAmount \u003c= 0 {\n\t\tpanic(ufmt.Sprintf(\"cannot wrap 0 ugnot\"))\n\t}\n\n\tif ugnotAmount \u003c consts.UGNOT_MINT_DEPOSIT_TO_WRAP {\n\t\tpanic(ufmt.Sprintf(\"Deposit below minimum: %d/%d ugnot.\", ugnotAmount, consts.UGNOT_MINT_DEPOSIT_TO_WRAP))\n\t}\n\n\t// WRAP IT\n\twugnotAddr := std.DerivePkgAddr(consts.WRAPPED_WUGNOT)\n\tbanker := std.GetBanker(std.BankerTypeRealmSend)\n\tbanker.SendCoins(consts.ROUTER_ADDR, wugnotAddr, std.Coins{{\"ugnot\", int64(ugnotAmount)}})\n\twugnot.Deposit() // ROUTER HAS WUGNOT\n\n\t// SEND WUGNOT: ROUTER -\u003e USER\n\twugnot.Transfer(a2u(std.GetOrigCaller()), ugnotAmount)\n}\n\nfunc unwrap(wugnotAmount uint64) {\n\tif wugnotAmount == 0 {\n\t\treturn\n\t}\n\n\t// SEND WUGNOT: USER -\u003e ROUTER\n\twugnot.TransferFrom(a2u(std.GetOrigCaller()), a2u(consts.ROUTER_ADDR), wugnotAmount)\n\n\t// UNWRAP IT\n\twugnot.Withdraw(wugnotAmount)\n\n\t// SEND GNOT: ROUTER -\u003e USER\n\tbanker := std.GetBanker(std.BankerTypeRealmSend)\n\tbanker.SendCoins(consts.ROUTER_ADDR, std.GetOrigCaller(), std.Coins{{\"ugnot\", int64(wugnotAmount)}})\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"quT2CaegjWOK1nMsPGGmpIQ5sT2OtJRkrLJQ+R8ycwNRYRhswekWUsexC4XlJ055lA9Rfx2Ca8or2MWPLZL6hw=="}],"memo":""},"blockNum":"147639"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","package":{"name":"staker","path":"gno.land/r/gnoswap/staker","files":[{"name":"_GET_no_receiver.gno","body":"package staker\n\nimport (\n\t\"std\"\n\t\"time\"\n\n\t\"gno.land/p/demo/json\"\n\t\"gno.land/p/demo/ufmt\"\n\n\tu256 \"gno.land/p/gnoswap/uint256\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\t\"gno.land/r/gnoswap/gns\"\n\n\ten \"gno.land/r/gnoswap/emission\"\n)\n\n// Incentive\nfunc StakerPoolIncentives(poolPath string) []string {\n\tincentives, exist := poolIncentives[poolPath]\n\tif !exist {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _GET_no_receiver__StakerPoolIncentives() || poolPath(%s) incentives does not exist\", poolPath))\n\t}\n\n\treturn incentives\n}\n\nfunc StakerIncentiveTargetPoolPath(incentiveId string) string {\n\tincentive, exist := incentives[incentiveId]\n\tif !exist {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _GET_no_receiver__StakerIncentiveTargetPoolPath() || incentiveId(%s) incentive does not exist\", incentiveId))\n\t}\n\n\treturn incentive.targetPoolPath\n}\n\nfunc StakerIncentiveRewardToken(incentiveId string) string {\n\tincentive, exist := incentives[incentiveId]\n\tif !exist {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _GET_no_receiver__StakerIncentiveRewardToken() || incentiveId(%s) incentive does not exist\", incentiveId))\n\t}\n\n\treturn incentive.rewardToken\n}\n\n// UINT\nfunc StakerIncentiveRewardAmount(incentiveId string) *u256.Uint {\n\tincentive, exist := incentives[incentiveId]\n\tif !exist {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _GET_no_receiver__StakerIncentiveRewardAmount() || incentiveId(%s) incentive does not exist\", incentiveId))\n\t}\n\n\treturn incentive.rewardAmount\n}\n\n// STR\nfunc StakerIncentiveRewardAmountStr(incentiveId string) string {\n\tincentive, exist := incentives[incentiveId]\n\tif !exist {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _GET_no_receiver__StakerIncentiveRewardAmount() || incentiveId(%s) incentive does not exist\", incentiveId))\n\t}\n\n\treturn incentive.rewardAmount.ToString()\n}\n\nfunc StakerIncentiveStartTimestamp(incentiveId string) int64 {\n\tincentive, exist := incentives[incentiveId]\n\tif !exist {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _GET_no_receiver__StakerIncentiveStartTimestamp() || incentiveId(%s) incentive does not exist\", incentiveId))\n\t}\n\n\treturn incentive.startTimestamp\n}\n\nfunc StakerIncentiveEndTimestamp(incentiveId string) int64 {\n\tincentive, exist := incentives[incentiveId]\n\tif !exist {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _GET_no_receiver__StakerIncentiveEndTimestamp() || incentiveId(%s) incentive does not exist\", incentiveId))\n\t}\n\n\treturn incentive.endTimestamp\n}\n\nfunc StakerIncentiveRefundee(incentiveId string) std.Address {\n\tincentive, exist := incentives[incentiveId]\n\tif !exist {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _GET_no_receiver__StakerIncentiveRefundee() || incentiveId(%s) incentive does not exist\", incentiveId))\n\t}\n\n\treturn incentive.refundee\n}\n\n// Deposit\nfunc StakerDepositOwner(lpTokenId uint64) std.Address {\n\tdeposit, exist := deposits[lpTokenId]\n\tif !exist {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _GET_no_receiver__StakerDepositOwner() || tokenId(%d) deposit does not exist\", lpTokenId))\n\t}\n\n\treturn deposit.owner\n}\n\nfunc StakerDepositNumberOfStakes(lpTokenId uint64) uint64 {\n\tdeposit, exist := deposits[lpTokenId]\n\tif !exist {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _GET_no_receiver__StakerDepositNumberOfStakes() || tokenId(%d) deposit does not exist\", lpTokenId))\n\t}\n\n\treturn deposit.numberOfStakes\n}\n\nfunc StakerDepositStakeTimestamp(lpTokenId uint64) int64 {\n\tdeposit, exist := deposits[lpTokenId]\n\tif !exist {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _GET_no_receiver__StakerDepositStakeTimestamp() || tokenId(%d) deposit does not exist\", lpTokenId))\n\t}\n\n\treturn deposit.stakeTimestamp\n}\n\nfunc StakerDepositTargetPoolPath(lpTokenId uint64) string {\n\tdeposit, exist := deposits[lpTokenId]\n\tif !exist {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _GET_no_receiver__StakerDepositTargetPoolPath() || tokenId(%d) deposit does not exist\", lpTokenId))\n\t}\n\n\treturn deposit.targetPoolPath\n}\n\n// PoolTier\nfunc StakerPoolTier(poolPath string) uint64 {\n\tinternal, exist := poolTiers[poolPath]\n\tif !exist {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _GET_no_receiver__StakerPoolTier() || poolPath(%s) poolTier does not exist\", poolPath))\n\t}\n\n\treturn internal.tier\n}\n\n// DEBUG\ntype currentInfo struct {\n\theight           int64\n\ttime             int64\n\tgnsStaker        uint64\n\tgnsDevOps        uint64\n\tgnsCommunityPool uint64\n\tgnsXGNS          uint64\n\tgnsProtocolFee   uint64\n\tgnsGSA           uint64\n}\n\nfunc getCurrentInfo() currentInfo {\n\treturn currentInfo{\n\t\theight:           std.GetHeight(),\n\t\ttime:             time.Now().Unix(),\n\t\tgnsStaker:        gns.BalanceOf(a2u(consts.STAKER_ADDR)),\n\t\tgnsDevOps:        gns.BalanceOf(a2u(consts.DEV_OPS)),\n\t\tgnsCommunityPool: gns.BalanceOf(a2u(consts.COMMUNITY_POOL_ADDR)),\n\t\tgnsXGNS:          gns.BalanceOf(a2u(consts.X_GNS_ADDR)),\n\t\tgnsProtocolFee:   gns.BalanceOf(a2u(consts.PROTOCOL_FEE_ADDR)),\n\t\tgnsGSA:           gns.BalanceOf(a2u(consts.GNOSWAP_ADMIN)),\n\t}\n}\n\nfunc printInfo(prev currentInfo) currentInfo {\n\tcurr := getCurrentInfo()\n\n\tprintln(\"***********************\")\n\tprintln(\"\u003e height:\", curr.height)\n\tprintln(\"\u003e height inc by:\", curr.height-prev.height)\n\tprintln(\"\u003e time:\", curr.time)\n\tprintln(\"\u003e time inc by:\", curr.time-prev.time)\n\tprintln()\n\tprintln(\"GNS BALANCE CHANGE\")\n\tprintln(\"\u003e staker_bal\\t\\t\", curr.gnsStaker)\n\tprintln(\"\u003e staker_chg\\t\\t\", int64(curr.gnsStaker-prev.gnsStaker))\n\tprintln(\"\u003e dev ops\\t\\t\", curr.gnsDevOps)\n\tprintln(\"\u003e dev ops_chg\\t\\t\", int(curr.gnsDevOps-prev.gnsDevOps))\n\tprintln(\"\u003e community pool_bal\\t\", curr.gnsCommunityPool)\n\tprintln(\"\u003e community pool_chg\\t\", int(curr.gnsCommunityPool-prev.gnsCommunityPool))\n\tprintln(\"\u003e x_gns_bal\\t\\t\", curr.gnsXGNS)\n\tprintln(\"\u003e x_gns_chg\\t\\t\", int(curr.gnsXGNS-prev.gnsXGNS))\n\tprintln(\"\u003e protocol fee_bal\\t\", curr.gnsProtocolFee)\n\tprintln(\"\u003e protocol fee_chg\\t\", int(curr.gnsProtocolFee-prev.gnsProtocolFee))\n\tprintln(\"\u003e GSA_bal\\t\\t\", curr.gnsGSA)\n\tprintln(\"\u003e GSA_chg\\t\\t\", int(curr.gnsGSA-prev.gnsGSA))\n\tprintln()\n\tprintln(\"GNS POSITION\")\n\tfor k, v := range positionGns {\n\t\tprintln(\"\u003e tokenId:\", k, \"amount:\", v)\n\t}\n\n\tprintln()\n\n\treturn curr\n}\n\ntype ApiEmissionDebugInfo struct {\n\tHeight           int64                  `json:\"height\"`\n\tTime             int64                  `json:\"time\"`\n\tGnsStaker        uint64                 `json:\"gnsStaker\"`\n\tGnsDevOps        uint64                 `json:\"gnsDevOps\"`\n\tGnsCommunityPool uint64                 `json:\"gnsCommunityPool\"`\n\tGnsXGNS          uint64                 `json:\"gnsXGNS\"`\n\tGnsProtocolFee   uint64                 `json:\"gnsProtocolFee\"`\n\tGnsGSA           uint64                 `json:\"gnsGSA\"`\n\tPool             []ApiEmissionDebugPool `json:\"pool\"`\n}\n\ntype ApiEmissionDebugPool struct {\n\tPoolPath          string                     `json:\"poolPath\"`\n\tTier              uint64                     `json:\"tier\"`\n\tNumPoolInSameTier uint64                     `json:\"numPoolInSameTier\"`\n\tPoolReward        uint64                     `json:\"poolReward\"`\n\tPosition          []ApiEmissionDebugPosition `json:\"position\"`\n}\n\ntype ApiEmissionDebugPosition struct {\n\tLpTokenId       uint64 `json:\"lpTokenId\"`\n\tStakedHeight    int64  `json:\"stakedHeight\"`\n\tStakedTimestamp int64  `json:\"stakedTimestamp\"`\n\tStakedDuration  int64  `json:\"stakedDuration\"`\n\tFullAmount      uint64 `json:\"fullAmount\"`\n\tRatio           uint64 `json:\"ratio\"`\n\tRatioAmount     uint64 `json:\"ratioAmount\"`\n}\n\nfunc GetPrintInfo() string {\n\ten.MintAndDistributeGns()\n\tCalcPoolPosition()\n\n\temissionDebug := ApiEmissionDebugInfo{}\n\temissionDebug.Height = std.GetHeight()\n\temissionDebug.Time = time.Now().Unix()\n\temissionDebug.GnsStaker = gns.BalanceOf(a2u(consts.STAKER_ADDR))\n\temissionDebug.GnsDevOps = gns.BalanceOf(a2u(consts.DEV_OPS))\n\temissionDebug.GnsCommunityPool = gns.BalanceOf(a2u(consts.COMMUNITY_POOL_ADDR))\n\temissionDebug.GnsXGNS = gns.BalanceOf(a2u(consts.X_GNS_ADDR))\n\temissionDebug.GnsProtocolFee = gns.BalanceOf(a2u(consts.PROTOCOL_FEE_ADDR))\n\temissionDebug.GnsGSA = gns.BalanceOf(a2u(consts.GNOSWAP_ADMIN))\n\n\tfor poolPath, internal := range poolTiers {\n\t\ttier := internal.tier\n\t\tpool := ApiEmissionDebugPool{}\n\t\tpool.PoolPath = poolPath\n\t\tpool.Tier = tier\n\n\t\tnumTier1, numTier2, numTier3 := getNumPoolTiers()\n\t\tif tier == 1 {\n\t\t\tpool.NumPoolInSameTier = numTier1\n\t\t} else if tier == 2 {\n\t\t\tpool.NumPoolInSameTier = numTier2\n\t\t} else if tier == 3 {\n\t\t\tpool.NumPoolInSameTier = numTier3\n\t\t}\n\n\t\tpool.PoolReward = poolGns[poolPath]\n\n\t\tfor lpTokenId, deposit := range deposits {\n\t\t\tif deposit.targetPoolPath == poolPath {\n\t\t\t\tposition := ApiEmissionDebugPosition{}\n\t\t\t\tposition.LpTokenId = lpTokenId\n\t\t\t\tposition.StakedHeight = deposit.stakeHeight\n\t\t\t\tposition.StakedTimestamp = deposit.stakeTimestamp\n\t\t\t\tposition.StakedDuration = emissionDebug.Height - deposit.stakeHeight\n\n\t\t\t\tposition.FullAmount = positionGns[lpTokenId]\n\t\t\t\tposition.Ratio = getRewardRatio(position.StakedDuration)\n\t\t\t\tposition.RatioAmount = (position.FullAmount * position.Ratio) / 100\n\n\t\t\t\tpool.Position = append(pool.Position, position)\n\t\t\t}\n\t\t}\n\n\t\temissionDebug.Pool = append(emissionDebug.Pool, pool)\n\t}\n\n\tnode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"height\": json.NumberNode(\"\", float64(emissionDebug.Height)),\n\t\t\"time\":   json.NumberNode(\"\", float64(emissionDebug.Time)),\n\t\t\"gns\": json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"staker\":        json.NumberNode(\"\", float64(emissionDebug.GnsStaker)),\n\t\t\t\"devOps\":        json.NumberNode(\"\", float64(emissionDebug.GnsDevOps)),\n\t\t\t\"communityPool\": json.NumberNode(\"\", float64(emissionDebug.GnsCommunityPool)),\n\t\t\t\"xGNS\":          json.NumberNode(\"\", float64(emissionDebug.GnsXGNS)),\n\t\t\t\"protocolFee\":   json.NumberNode(\"\", float64(emissionDebug.GnsProtocolFee)),\n\t\t\t\"GnoswapAdmin\":  json.NumberNode(\"\", float64(emissionDebug.GnsGSA)),\n\t\t}),\n\t\t\"pool\": json.ArrayNode(\"\", makePoolsNode(emissionDebug.Pool)),\n\t})\n\n\tb, err := json.Marshal(node)\n\tif err != nil {\n\t\treturn \"JSON MARSHAL ERROR\"\n\t}\n\n\treturn string(b)\n}\n\nfunc makePoolsNode(emissionPool []ApiEmissionDebugPool) []*json.Node {\n\tpools := make([]*json.Node, 0)\n\n\tfor poolPath, internal := range poolTiers {\n\t\tnumTier1, numTier2, numTier3 := getNumPoolTiers()\n\t\tnumPoolSameTier := uint64(0)\n\t\ttier := internal.tier\n\t\tif tier == 1 {\n\t\t\tnumPoolSameTier = numTier1\n\t\t} else if tier == 2 {\n\t\t\tnumPoolSameTier = numTier2\n\t\t} else if tier == 3 {\n\t\t\tnumPoolSameTier = numTier3\n\t\t}\n\n\t\tpools = append(pools, json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"poolPath\":        json.StringNode(\"poolPath\", poolPath),\n\t\t\t\"startTimestamp\":  json.NumberNode(\"startTimestamp\", float64(internal.startTimestamp)),\n\t\t\t\"tier\":            json.NumberNode(\"tier\", float64(tier)),\n\t\t\t\"numPoolSameTier\": json.NumberNode(\"numPoolSameTier\", float64(numPoolSameTier)),\n\t\t\t\"poolReward\":      json.NumberNode(\"poolReward\", float64(poolGns[poolPath])),\n\t\t\t\"position\":        json.ArrayNode(\"\", makePositionsNode(poolPath)),\n\t\t}))\n\t}\n\n\treturn pools\n}\n\nfunc makePositionsNode(poolPath string) []*json.Node {\n\tpositions := make([]*json.Node, 0)\n\n\tfor lpTokenId, deposit := range deposits {\n\t\tif deposit.targetPoolPath == poolPath {\n\t\t\tstakedDuration := std.GetHeight() - deposit.stakeHeight\n\t\t\tfullAmount := positionGns[lpTokenId]\n\t\t\tratio := getRewardRatio(stakedDuration)\n\t\t\tratioAmount := (fullAmount * ratio) / 100\n\n\t\t\tpositions = append(positions, json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\t\"lpTokenId\":       json.NumberNode(\"lpTokenId\", float64(lpTokenId)),\n\t\t\t\t\"stakedHeight\":    json.NumberNode(\"stakedHeight\", float64(deposit.stakeHeight)),\n\t\t\t\t\"stakedTimestamp\": json.NumberNode(\"stakedTimestamp\", float64(deposit.stakeTimestamp)),\n\t\t\t\t\"stakedDuration\":  json.NumberNode(\"stakedDuration\", float64(stakedDuration)),\n\t\t\t\t\"fullAmount\":      json.NumberNode(\"fullAmount\", float64(fullAmount)),\n\t\t\t\t\"ratio\":           json.NumberNode(\"ratio\", float64(ratio)),\n\t\t\t\t\"ratioAmount\":     json.NumberNode(\"ratioAmount\", float64(ratioAmount)),\n\t\t\t}))\n\t\t}\n\t}\n\n\treturn positions\n}\n"},{"name":"_RPC_api_incentive.gno","body":"package staker\n\nimport (\n\t\"std\"\n\t\"time\"\n\n\t\"gno.land/p/demo/json\"\n\t\"gno.land/p/demo/ufmt\"\n\n\tpl \"gno.land/r/gnoswap/pool\"\n\n\tu256 \"gno.land/p/gnoswap/uint256\"\n\t\"gno.land/r/gnoswap/consts\"\n)\n\ntype RewardToken struct {\n\tPoolPath         string   `json:\"poolPath\"`\n\tRewardsTokenList []string `json:\"rewardsTokenList\"`\n}\n\ntype ApiExternalIncentive struct {\n\tPoolPath       string `json:\"poolPath\"`\n\tRewardToken    string `json:\"rewardToken\"`\n\tRewardAmount   string `json:\"rewardAmount\"`\n\tRewardLeft     string `json:\"rewardLeft\"`\n\tStartTimestamp int64  `json:\"startTimestamp\"`\n\tEndTimestamp   int64  `json:\"endTimestamp\"`\n\tActive         bool   `json:\"active\"`\n\tRefundee       string `json:\"refundee\"`\n}\n\ntype ApiInternalIncentive struct {\n\tPoolPath       string `json:\"poolPath\"`\n\tTier           uint64 `json:\"tier\"`\n\tStartTimestamp int64  `json:\"startTimestamp\"`\n\tRewardPerBlock string `json:\"rewardPerBlock\"`\n}\n\nfunc ApiGetRewardTokens() string {\n\tCalcPoolPosition()\n\n\trewardTokens := []RewardToken{}\n\n\tpoolList := pl.PoolGetPoolList()\n\tfor _, poolPath := range poolList {\n\t\tthisPoolRewardTokens := []string{}\n\n\t\t// HANDLE INTERNAL\n\t\t_, ok := poolTiers[poolPath]\n\t\tif ok {\n\t\t\tthisPoolRewardTokens = append(thisPoolRewardTokens, consts.GNS_PATH)\n\t\t}\n\n\t\t// HANDLE EXTERNAL\n\t\tfor _, incentiveId := range poolIncentives[poolPath] {\n\t\t\tthisPoolRewardTokens = append(thisPoolRewardTokens, incentives[incentiveId].rewardToken)\n\t\t}\n\n\t\trewardTokens = append(rewardTokens, RewardToken{\n\t\t\tPoolPath:         poolPath,\n\t\t\tRewardsTokenList: thisPoolRewardTokens,\n\t\t})\n\t}\n\n\t// STAT NODE\n\t_stat := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"height\":    json.NumberNode(\"height\", float64(std.GetHeight())),\n\t\t\"timestamp\": json.NumberNode(\"timestamp\", float64(time.Now().Unix())),\n\t})\n\n\t// RESPONSE (ARRAY) NODE\n\tresponses := json.ArrayNode(\"\", []*json.Node{})\n\tfor _, rewardToken := range rewardTokens {\n\t\t_rewardTokenNode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"poolPath\": json.StringNode(\"poolPath\", rewardToken.PoolPath),\n\t\t\t\"tokens\":   json.ArrayNode(\"tokens\", makeRewardTokensArray(rewardToken.RewardsTokenList)),\n\t\t})\n\t\tresponses.AppendArray(_rewardTokenNode)\n\t}\n\n\tnode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"stat\":     _stat,\n\t\t\"response\": responses,\n\t})\n\n\tb, err := json.Marshal(node)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _RPC_api_stake.gno__ApiGetRewardTokens() || json marshal error: %s\", err.Error()))\n\t}\n\n\treturn string(b)\n}\n\nfunc ApiGetRewardTokensByPoolPath(targetPoolPath string) string {\n\tCalcPoolPosition()\n\n\trewardTokens := []RewardToken{}\n\n\tpoolList := pl.PoolGetPoolList()\n\tfor _, poolPath := range poolList {\n\t\tif poolPath != targetPoolPath {\n\t\t\tcontinue\n\t\t}\n\n\t\tthisPoolRewardTokens := []string{}\n\n\t\t// HANDLE INTERNAL\n\t\t_, ok := poolTiers[poolPath]\n\t\tif ok {\n\t\t\tthisPoolRewardTokens = append(thisPoolRewardTokens, consts.GNS_PATH)\n\t\t}\n\n\t\t// HANDLE EXTERNAL\n\t\tfor _, incentiveId := range poolIncentives[poolPath] {\n\t\t\tthisPoolRewardTokens = append(thisPoolRewardTokens, incentives[incentiveId].rewardToken)\n\t\t}\n\n\t\trewardTokens = append(rewardTokens, RewardToken{\n\t\t\tPoolPath:         poolPath,\n\t\t\tRewardsTokenList: thisPoolRewardTokens,\n\t\t})\n\t}\n\n\t// STAT NODE\n\t_stat := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"height\":    json.NumberNode(\"height\", float64(std.GetHeight())),\n\t\t\"timestamp\": json.NumberNode(\"timestamp\", float64(time.Now().Unix())),\n\t})\n\n\t// RESPONSE (ARRAY) NODE\n\tresponses := json.ArrayNode(\"\", []*json.Node{})\n\tfor _, rewardToken := range rewardTokens {\n\t\t_rewardTokenNode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"poolPath\": json.StringNode(\"poolPath\", rewardToken.PoolPath),\n\t\t\t\"tokens\":   json.ArrayNode(\"tokens\", makeRewardTokensArray(rewardToken.RewardsTokenList)),\n\t\t})\n\t\tresponses.AppendArray(_rewardTokenNode)\n\t}\n\n\tnode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"stat\":     _stat,\n\t\t\"response\": responses,\n\t})\n\n\tb, err := json.Marshal(node)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _RPC_api_stake.gno__ApiGetRewardTokensByPoolPath() || json marshal error: %s\", err.Error()))\n\t}\n\n\treturn string(b)\n}\n\nfunc ApiGetExternalIncentives() string {\n\tCalcPoolPosition()\n\n\tapiExternalIncentives := []ApiExternalIncentive{}\n\n\tfor _, incentive := range incentives {\n\t\tapiExternalIncentives = append(apiExternalIncentives, ApiExternalIncentive{\n\t\t\tPoolPath:       incentive.targetPoolPath,\n\t\t\tRewardToken:    incentive.rewardToken,\n\t\t\tRewardAmount:   incentive.rewardAmount.ToString(),\n\t\t\tRewardLeft:     incentive.rewardLeft.ToString(),\n\t\t\tStartTimestamp: incentive.startTimestamp,\n\t\t\tEndTimestamp:   incentive.endTimestamp,\n\t\t\tRefundee:       incentive.refundee.String(),\n\t\t})\n\t}\n\n\t// STAT NODE\n\t_stat := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"height\":    json.NumberNode(\"height\", float64(std.GetHeight())),\n\t\t\"timestamp\": json.NumberNode(\"timestamp\", float64(time.Now().Unix())),\n\t})\n\n\t// RESPONSE (ARRAY) NODE\n\tresponses := json.ArrayNode(\"\", []*json.Node{})\n\tfor _, incentive := range apiExternalIncentives {\n\t\tactive := false\n\t\tif time.Now().Unix() \u003e= incentive.StartTimestamp \u0026\u0026 time.Now().Unix() \u003c= incentive.EndTimestamp {\n\t\t\tactive = true\n\t\t}\n\n\t\t_incentiveNode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"poolPath\":       json.StringNode(\"poolPath\", incentive.PoolPath),\n\t\t\t\"rewardToken\":    json.StringNode(\"rewardToken\", incentive.RewardToken),\n\t\t\t\"rewardAmount\":   json.StringNode(\"rewardAmount\", incentive.RewardAmount),\n\t\t\t\"rewardLeft\":     json.StringNode(\"rewardLeft\", incentive.RewardLeft),\n\t\t\t\"startTimestamp\": json.NumberNode(\"startTimestamp\", float64(incentive.StartTimestamp)),\n\t\t\t\"endTimestamp\":   json.NumberNode(\"endTimestamp\", float64(incentive.EndTimestamp)),\n\t\t\t\"active\":         json.BoolNode(\"active\", active),\n\t\t\t\"refundee\":       json.StringNode(\"refundee\", incentive.Refundee),\n\t\t})\n\t\tresponses.AppendArray(_incentiveNode)\n\t}\n\n\t// RETURN\n\tnode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"stat\":     _stat,\n\t\t\"response\": responses,\n\t})\n\n\tb, err := json.Marshal(node)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _RPC_api_stake.gno__ApiGetExternalIncentives() || json marshal error: %s\", err.Error()))\n\t}\n\n\treturn string(b)\n}\n\nfunc ApiGetExternalIncentivesByPoolPath(targetPoolPath string) string {\n\tCalcPoolPosition()\n\n\tapiExternalIncentives := []ApiExternalIncentive{}\n\n\tfor _, incentive := range incentives {\n\t\tif incentive.targetPoolPath != targetPoolPath {\n\t\t\tcontinue\n\t\t}\n\n\t\tapiExternalIncentives = append(apiExternalIncentives, ApiExternalIncentive{\n\t\t\tPoolPath:       incentive.targetPoolPath,\n\t\t\tRewardToken:    incentive.rewardToken,\n\t\t\tRewardAmount:   incentive.rewardAmount.ToString(),\n\t\t\tRewardLeft:     incentive.rewardLeft.ToString(),\n\t\t\tStartTimestamp: incentive.startTimestamp,\n\t\t\tEndTimestamp:   incentive.endTimestamp,\n\t\t\tRefundee:       incentive.refundee.String(),\n\t\t})\n\t}\n\n\t// STAT NODE\n\t_stat := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"height\":    json.NumberNode(\"height\", float64(std.GetHeight())),\n\t\t\"timestamp\": json.NumberNode(\"timestamp\", float64(time.Now().Unix())),\n\t})\n\n\t// RESPONSE (ARRAY) NODE\n\tresponses := json.ArrayNode(\"\", []*json.Node{})\n\tfor _, incentive := range apiExternalIncentives {\n\t\tactive := false\n\t\tif time.Now().Unix() \u003e= incentive.StartTimestamp \u0026\u0026 time.Now().Unix() \u003c= incentive.EndTimestamp {\n\t\t\tactive = true\n\t\t}\n\n\t\t_incentiveNode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"poolPath\":       json.StringNode(\"poolPath\", incentive.PoolPath),\n\t\t\t\"rewardToken\":    json.StringNode(\"rewardToken\", incentive.RewardToken),\n\t\t\t\"rewardAmount\":   json.StringNode(\"rewardAmount\", incentive.RewardAmount),\n\t\t\t\"rewardLeft\":     json.StringNode(\"rewardLeft\", incentive.RewardLeft),\n\t\t\t\"startTimestamp\": json.NumberNode(\"startTimestamp\", float64(incentive.StartTimestamp)),\n\t\t\t\"endTimestamp\":   json.NumberNode(\"endTimestamp\", float64(incentive.EndTimestamp)),\n\t\t\t\"active\":         json.BoolNode(\"active\", active),\n\t\t\t\"refundee\":       json.StringNode(\"refundee\", incentive.Refundee),\n\t\t})\n\t\tresponses.AppendArray(_incentiveNode)\n\t}\n\n\t// RETURN\n\tnode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"stat\":     _stat,\n\t\t\"response\": responses,\n\t})\n\n\tb, err := json.Marshal(node)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _RPC_api_stake.gno__ApiGetExternalIncentivesByPoolPath() || json marshal error: %s\", err.Error()))\n\t}\n\n\treturn string(b)\n}\n\nfunc ApiGetExternalIncentivesByRewardTokenPath(rewardTokenPath string) string {\n\tCalcPoolPosition()\n\n\tapiExternalIncentives := []ApiExternalIncentive{}\n\n\tfor _, incentive := range incentives {\n\t\tif incentive.rewardToken != rewardTokenPath {\n\t\t\tcontinue\n\t\t}\n\n\t\tapiExternalIncentives = append(apiExternalIncentives, ApiExternalIncentive{\n\t\t\tPoolPath:       incentive.targetPoolPath,\n\t\t\tRewardToken:    incentive.rewardToken,\n\t\t\tRewardAmount:   incentive.rewardAmount.ToString(),\n\t\t\tRewardLeft:     incentive.rewardLeft.ToString(),\n\t\t\tStartTimestamp: incentive.startTimestamp,\n\t\t\tEndTimestamp:   incentive.endTimestamp,\n\t\t\tRefundee:       incentive.refundee.String(),\n\t\t})\n\t}\n\n\t// STAT NODE\n\t_stat := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"height\":    json.NumberNode(\"height\", float64(std.GetHeight())),\n\t\t\"timestamp\": json.NumberNode(\"timestamp\", float64(time.Now().Unix())),\n\t})\n\n\t// RESPONSE (ARRAY) NODE\n\tresponses := json.ArrayNode(\"\", []*json.Node{})\n\tfor _, incentive := range apiExternalIncentives {\n\t\tactive := false\n\t\tif time.Now().Unix() \u003e= incentive.StartTimestamp \u0026\u0026 time.Now().Unix() \u003c= incentive.EndTimestamp {\n\t\t\tactive = true\n\t\t}\n\n\t\t_incentiveNode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"poolPath\":       json.StringNode(\"poolPath\", incentive.PoolPath),\n\t\t\t\"rewardToken\":    json.StringNode(\"rewardToken\", incentive.RewardToken),\n\t\t\t\"rewardAmount\":   json.StringNode(\"rewardAmount\", incentive.RewardAmount),\n\t\t\t\"rewardLeft\":     json.StringNode(\"rewardLeft\", incentive.RewardLeft),\n\t\t\t\"startTimestamp\": json.NumberNode(\"startTimestamp\", float64(incentive.StartTimestamp)),\n\t\t\t\"endTimestamp\":   json.NumberNode(\"endTimestamp\", float64(incentive.EndTimestamp)),\n\t\t\t\"active\":         json.BoolNode(\"active\", active),\n\t\t\t\"refundee\":       json.StringNode(\"refundee\", incentive.Refundee),\n\t\t})\n\t\tresponses.AppendArray(_incentiveNode)\n\t}\n\n\t// RETURN\n\tnode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"stat\":     _stat,\n\t\t\"response\": responses,\n\t})\n\n\tb, err := json.Marshal(node)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _RPC_api_stake.gno__ApiGetExternalIncentivesByRewardTokenPath() || json marshal error: %s\", err.Error()))\n\t}\n\n\treturn string(b)\n}\n\nfunc ApiGetInternalIncentives() string {\n\tCalcPoolPosition()\n\n\tapiInternalIncentives := []ApiInternalIncentive{}\n\n\tfor poolPath, internal := range poolTiers {\n\t\tapiInternalIncentives = append(apiInternalIncentives, ApiInternalIncentive{\n\t\t\tPoolPath:       poolPath,\n\t\t\tTier:           internal.tier,\n\t\t\tStartTimestamp: internal.startTimestamp,\n\t\t\tRewardPerBlock: calculateInternalRewardPerBlockByPoolPath(poolPath),\n\t\t})\n\t}\n\n\t// STAT NODE\n\t_stat := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"height\":    json.NumberNode(\"height\", float64(std.GetHeight())),\n\t\t\"timestamp\": json.NumberNode(\"timestamp\", float64(time.Now().Unix())),\n\t})\n\n\t// RESPONSE (ARRAY) NODE\n\tresponses := json.ArrayNode(\"\", []*json.Node{})\n\tfor _, incentive := range apiInternalIncentives {\n\t\t_incentiveNode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"poolPath\":       json.StringNode(\"poolPath\", incentive.PoolPath),\n\t\t\t\"rewardToken\":    json.StringNode(\"rewardToken\", consts.GNS_PATH),\n\t\t\t\"tier\":           json.NumberNode(\"tier\", float64(incentive.Tier)),\n\t\t\t\"startTimestamp\": json.NumberNode(\"startTimestamp\", float64(incentive.StartTimestamp)),\n\t\t\t\"rewardPerBlock\": json.StringNode(\"rewardPerBlock\", incentive.RewardPerBlock),\n\t\t\t\"accuGns\":        json.NumberNode(\"accuGns\", float64(poolAccuGns[incentive.PoolPath])),\n\t\t})\n\t\tresponses.AppendArray(_incentiveNode)\n\t}\n\n\t// RETURN\n\tnode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"stat\":     _stat,\n\t\t\"response\": responses,\n\t})\n\n\tb, err := json.Marshal(node)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _RPC_api_stake.gno__ApiGetInternalIncentives() || json marshal error: %s\", err.Error()))\n\t}\n\n\treturn string(b)\n}\n\nfunc ApiGetInternalIncentivesByPoolPath(targetPoolPath string) string {\n\tCalcPoolPosition()\n\n\tapiInternalIncentives := []ApiInternalIncentive{}\n\n\tfor poolPath, internal := range poolTiers {\n\t\tif poolPath != targetPoolPath {\n\t\t\tcontinue\n\t\t}\n\n\t\tapiInternalIncentives = append(apiInternalIncentives, ApiInternalIncentive{\n\t\t\tPoolPath:       poolPath,\n\t\t\tTier:           internal.tier,\n\t\t\tStartTimestamp: internal.startTimestamp,\n\t\t\tRewardPerBlock: calculateInternalRewardPerBlockByPoolPath(poolPath),\n\t\t})\n\t}\n\n\t// STAT NODE\n\t_stat := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"height\":    json.NumberNode(\"height\", float64(std.GetHeight())),\n\t\t\"timestamp\": json.NumberNode(\"timestamp\", float64(time.Now().Unix())),\n\t})\n\n\t// RESPONSE (ARRAY) NODE\n\tresponses := json.ArrayNode(\"\", []*json.Node{})\n\tfor _, incentive := range apiInternalIncentives {\n\t\t_incentiveNode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"poolPath\":       json.StringNode(\"poolPath\", incentive.PoolPath),\n\t\t\t\"rewardToken\":    json.StringNode(\"rewardToken\", consts.GNS_PATH),\n\t\t\t\"tier\":           json.NumberNode(\"tier\", float64(incentive.Tier)),\n\t\t\t\"startTimestamp\": json.NumberNode(\"startTimestamp\", float64(incentive.StartTimestamp)),\n\t\t\t\"rewardPerBlock\": json.StringNode(\"rewardPerBlock\", incentive.RewardPerBlock),\n\t\t\t\"accuGns\":        json.NumberNode(\"accuGns\", float64(poolAccuGns[targetPoolPath])),\n\t\t})\n\t\tresponses.AppendArray(_incentiveNode)\n\t}\n\n\t// RETURN\n\tnode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"stat\":     _stat,\n\t\t\"response\": responses,\n\t})\n\n\tb, err := json.Marshal(node)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _RPC_api_stake.gno__ApiGetInternalIncentivesByPoolPath() || json marshal error: %s\", err.Error()))\n\t}\n\n\treturn string(b)\n}\n\nfunc ApiGetInternalIncentivesByTiers(targetTier uint64) string {\n\tCalcPoolPosition()\n\n\tapiInternalIncentives := []ApiInternalIncentive{}\n\n\tfor poolPath, internal := range poolTiers {\n\t\tif internal.tier != targetTier {\n\t\t\tcontinue\n\t\t}\n\n\t\tapiInternalIncentives = append(apiInternalIncentives, ApiInternalIncentive{\n\t\t\tPoolPath:       poolPath,\n\t\t\tTier:           internal.tier,\n\t\t\tStartTimestamp: internal.startTimestamp,\n\t\t\tRewardPerBlock: calculateInternalRewardPerBlockByPoolPath(poolPath),\n\t\t})\n\t}\n\n\t// STAT NODE\n\t_stat := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"height\":    json.NumberNode(\"height\", float64(std.GetHeight())),\n\t\t\"timestamp\": json.NumberNode(\"timestamp\", float64(time.Now().Unix())),\n\t})\n\n\t// RESPONSE (ARRAY) NODE\n\tresponses := json.ArrayNode(\"\", []*json.Node{})\n\tfor _, incentive := range apiInternalIncentives {\n\t\t_incentiveNode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"poolPath\":       json.StringNode(\"poolPath\", incentive.PoolPath),\n\t\t\t\"rewardToken\":    json.StringNode(\"rewardToken\", consts.GNS_PATH),\n\t\t\t\"tier\":           json.NumberNode(\"tier\", float64(incentive.Tier)),\n\t\t\t\"startTimestamp\": json.NumberNode(\"startTimestamp\", float64(incentive.StartTimestamp)),\n\t\t\t\"rewardPerBlock\": json.StringNode(\"rewardPerBlock\", incentive.RewardPerBlock),\n\t\t\t\"accuGns\":        json.NumberNode(\"accuGns\", float64(poolAccuGns[incentive.PoolPath])),\n\t\t})\n\t\tresponses.AppendArray(_incentiveNode)\n\t}\n\n\t// RETURN\n\tnode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"stat\":     _stat,\n\t\t\"response\": responses,\n\t})\n\n\tb, err := json.Marshal(node)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _RPC_api_stake.gno__ApiGetInternalIncentivesByTiers() || json marshal error: %s\", err.Error()))\n\t}\n\n\treturn string(b)\n}\n\nfunc makeRewardTokensArray(rewardsTokenList []string) []*json.Node {\n\trewardsTokenArray := make([]*json.Node, len(rewardsTokenList))\n\tfor i, rewardToken := range rewardsTokenList {\n\t\trewardsTokenArray[i] = json.StringNode(\"\", rewardToken)\n\t}\n\treturn rewardsTokenArray\n}\n\nfunc calculateInternalRewardPerBlockByPoolPath(poolPath string) string {\n\t_, ok := poolTiers[poolPath]\n\tif !ok {\n\t\treturn \"0\"\n\t}\n\n\tblockRewardInit := 10_000\n\tblockRewardLeft := blockRewardInit / 10\n\tblockReward := blockRewardInit + blockRewardLeft\n\n\t_tier, poolRatioX96 := getPoolTierAndRatio(poolPath)\n\tif _tier == uint64(0) { // pool doesn't have internal reward\n\t\treturn \"0\"\n\t}\n\n\t_q96 := u256.MustFromDecimal(consts.Q96)\n\tpoolRewardPerBlockX96 := new(u256.Uint).Mul(u256.NewUint(uint64(blockReward)), poolRatioX96)\n\tpoolRewardPerBlock := new(u256.Uint).Div(poolRewardPerBlockX96, _q96)\n\tpoolRewardPerBlock = new(u256.Uint).Div(poolRewardPerBlock, u256.NewUint(100))\n\n\treturn poolRewardPerBlock.ToString()\n}\n"},{"name":"_RPC_api_stake.gno","body":"package staker\n\nimport (\n\t\"std\"\n\t\"time\"\n\n\t\"gno.land/p/demo/json\"\n\t\"gno.land/p/demo/ufmt\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\n\ten \"gno.land/r/gnoswap/emission\"\n)\n\ntype LpTokenReward struct {\n\tLpTokenId uint64   `json:\"lpTokenId\"`\n\tAddress   string   `json:\"address\"`\n\tRewards   []Reward `json:\"rewards\"`\n}\n\ntype Reward struct {\n\tIncentiveType     string `json:\"incentiveType\"`\n\tTargetPoolPath    string `json:\"targetPoolPath\"`\n\tRewardTokenPath   string `json:\"rewardTokenPath\"`\n\tRewardTokenAmount uint64 `json:\"rewardTokenAmount\"`\n\tStakeTimestamp    int64  `json:\"stakeTimestamp\"`\n\tStakeHeight       int64  `json:\"stakeHeight\"`\n\tIncentiveStart    int64  `json:\"incentiveStart\"`\n}\n\ntype Stake struct {\n\tTokenId        uint64      `json:\"tokenId\"`\n\tOwner          std.Address `json:\"owner\"`\n\tNumberOfStakes uint64      `json:\"numberOfStakes\"`\n\tStakeTimestamp int64       `json:\"stakeTimestamp\"`\n\tStakeHeight    int64       `json:\"stakeHeight\"`\n\tTargetPoolPath string      `json:\"targetPoolPath\"`\n}\n\ntype ResponseQueryBase struct {\n\tHeight    int64 `json:\"height\"`\n\tTimestamp int64 `json:\"timestamp\"`\n}\n\ntype ResponseApiGetRewards struct {\n\tStat     ResponseQueryBase `json:\"stat\"`\n\tResponse []LpTokenReward   `json:\"response\"`\n}\n\ntype ResponseApiGetRewardByLpTokenId struct {\n\tStat     ResponseQueryBase `json:\"stat\"`\n\tResponse LpTokenReward     `json:\"response\"`\n}\n\ntype ResponseApiGetStakes struct {\n\tStat     ResponseQueryBase `json:\"stat\"`\n\tResponse []Stake           `json:\"response\"`\n}\n\nfunc ApiGetRewards() string {\n\ten.MintAndDistributeGns()\n\tCalcPoolPosition()\n\n\tlpTokenRewards := []LpTokenReward{}\n\n\tfor tokenId, deposit := range deposits {\n\t\trewards := []Reward{}\n\n\t\t// get internal gns reward\n\t\tinternalGNS := rewardMathComputeInternalRewardAmount(tokenId)\n\t\tif internalGNS \u003e 0 {\n\t\t\trewards = append(rewards, Reward{\n\t\t\t\tIncentiveType:     \"INTERNAL\",\n\t\t\t\tTargetPoolPath:    deposit.targetPoolPath,\n\t\t\t\tRewardTokenPath:   consts.GNS_PATH,\n\t\t\t\tRewardTokenAmount: internalGNS,\n\t\t\t\tStakeTimestamp:    deposit.stakeTimestamp,\n\t\t\t\tStakeHeight:       deposit.stakeHeight,\n\t\t\t\tIncentiveStart:    deposit.stakeTimestamp,\n\t\t\t})\n\t\t}\n\n\t\t// find all external reward list for poolPath which lpTokenId is staked\n\t\tfor _, incentiveId := range poolIncentives[deposit.targetPoolPath] {\n\t\t\tincentive := incentives[incentiveId]\n\n\t\t\tstakedOrCreatedAt := max(deposit.stakeTimestamp, incentive.startTimestamp)\n\t\t\tnow := time.Now().Unix()\n\t\t\tif now \u003c stakedOrCreatedAt {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tduration := now - stakedOrCreatedAt\n\t\t\tdurationRatio := getRewardRatio(duration)\n\n\t\t\texternalReward := rewardMathComputeExternalRewardAmount(tokenId, incentiveId, durationRatio)\n\t\t\tif externalReward \u003e= 0 {\n\t\t\t\trewards = append(rewards, Reward{\n\t\t\t\t\tIncentiveType:     \"EXTERNAL\",\n\t\t\t\t\tTargetPoolPath:    deposit.targetPoolPath,\n\t\t\t\t\tRewardTokenPath:   incentives[incentiveId].rewardToken,\n\t\t\t\t\tRewardTokenAmount: externalReward,\n\t\t\t\t\tStakeTimestamp:    deposit.stakeTimestamp,\n\t\t\t\t\tStakeHeight:       deposit.stakeHeight,\n\t\t\t\t\tIncentiveStart:    incentive.startTimestamp,\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\tif len(rewards) \u003e 0 {\n\t\t\tlpTokenReward := LpTokenReward{\n\t\t\t\tLpTokenId: tokenId,\n\t\t\t\tAddress:   deposit.owner.String(),\n\t\t\t\tRewards:   rewards,\n\t\t\t}\n\t\t\tlpTokenRewards = append(lpTokenRewards, lpTokenReward)\n\t\t}\n\t}\n\n\tqb := ResponseQueryBase{\n\t\tHeight:    std.GetHeight(),\n\t\tTimestamp: time.Now().Unix(),\n\t}\n\n\tr := ResponseApiGetRewards{\n\t\tStat:     qb,\n\t\tResponse: lpTokenRewards,\n\t}\n\n\t// STAT NODE\n\t_stat := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"height\":    json.NumberNode(\"height\", float64(std.GetHeight())),\n\t\t\"timestamp\": json.NumberNode(\"timestamp\", float64(time.Now().Unix())),\n\t})\n\n\t// RESPONSE (ARRAY) NODE\n\tresponses := json.ArrayNode(\"\", []*json.Node{})\n\tfor _, reward := range r.Response {\n\t\t_rewardNode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"lpTokenId\": json.NumberNode(\"lpTokenId\", float64(reward.LpTokenId)),\n\t\t\t\"address\":   json.StringNode(\"address\", reward.Address),\n\t\t\t\"rewards\":   json.ArrayNode(\"rewards\", makeRewardsArray(reward.Rewards)),\n\t\t})\n\t\tresponses.AppendArray(_rewardNode)\n\t}\n\n\tnode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"stat\":     _stat,\n\t\t\"response\": responses,\n\t})\n\n\tb, err := json.Marshal(node)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _RPC_api_stake.gno__ApiGetRewards() || json marshal error: %s\", err.Error()))\n\t}\n\n\treturn string(b)\n}\n\nfunc ApiGetRewardsByLpTokenId(targetLpTokenId uint64) string {\n\ten.MintAndDistributeGns()\n\tCalcPoolPosition()\n\n\tlpTokenRewards := []LpTokenReward{}\n\n\tfor tokenId, deposit := range deposits {\n\t\tif tokenId != targetLpTokenId {\n\t\t\tcontinue\n\t\t}\n\n\t\trewards := []Reward{}\n\n\t\t// get internal gns reward\n\t\tinternalGNS := rewardMathComputeInternalRewardAmount(tokenId)\n\t\tif internalGNS \u003e 0 {\n\t\t\trewards = append(rewards, Reward{\n\t\t\t\tIncentiveType:     \"INTERNAL\",\n\t\t\t\tTargetPoolPath:    deposit.targetPoolPath,\n\t\t\t\tRewardTokenPath:   consts.GNS_PATH,\n\t\t\t\tRewardTokenAmount: internalGNS,\n\t\t\t\tStakeTimestamp:    deposit.stakeTimestamp,\n\t\t\t\tStakeHeight:       deposit.stakeHeight,\n\t\t\t\tIncentiveStart:    deposit.stakeTimestamp,\n\t\t\t})\n\t\t}\n\n\t\t// find all external reward list for poolPath which lpTokenId is staked\n\t\tfor _, incentiveId := range poolIncentives[deposit.targetPoolPath] {\n\t\t\tincentive := incentives[incentiveId]\n\n\t\t\tstakedOrCreatedAt := max(deposit.stakeTimestamp, incentive.startTimestamp)\n\t\t\tnow := time.Now().Unix()\n\t\t\tif now \u003c stakedOrCreatedAt {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tduration := now - stakedOrCreatedAt\n\t\t\tdurationRatio := getRewardRatio(duration)\n\n\t\t\texternalReward := rewardMathComputeExternalRewardAmount(tokenId, incentiveId, durationRatio)\n\t\t\tif externalReward \u003e 0 {\n\t\t\t\trewards = append(rewards, Reward{\n\t\t\t\t\tIncentiveType:     \"EXTERNAL\",\n\t\t\t\t\tTargetPoolPath:    deposit.targetPoolPath,\n\t\t\t\t\tRewardTokenPath:   incentives[incentiveId].rewardToken,\n\t\t\t\t\tRewardTokenAmount: externalReward,\n\t\t\t\t\tStakeTimestamp:    deposit.stakeTimestamp,\n\t\t\t\t\tStakeHeight:       deposit.stakeHeight,\n\t\t\t\t\tIncentiveStart:    incentive.startTimestamp,\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\tlpTokenReward := LpTokenReward{\n\t\t\tLpTokenId: tokenId,\n\t\t\tAddress:   deposit.owner.String(),\n\t\t\tRewards:   rewards,\n\t\t}\n\t\tlpTokenRewards = append(lpTokenRewards, lpTokenReward)\n\t}\n\n\tqb := ResponseQueryBase{\n\t\tHeight:    std.GetHeight(),\n\t\tTimestamp: time.Now().Unix(),\n\t}\n\n\tr := ResponseApiGetRewards{\n\t\tStat:     qb,\n\t\tResponse: lpTokenRewards,\n\t}\n\n\t// STAT NODE\n\t_stat := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"height\":    json.NumberNode(\"height\", float64(std.GetHeight())),\n\t\t\"timestamp\": json.NumberNode(\"timestamp\", float64(time.Now().Unix())),\n\t})\n\n\t// RESPONSE (ARRAY) NODE\n\tresponses := json.ArrayNode(\"\", []*json.Node{})\n\tfor _, reward := range r.Response {\n\t\t_rewardNode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"lpTokenId\": json.NumberNode(\"lpTokenId\", float64(reward.LpTokenId)),\n\t\t\t\"address\":   json.StringNode(\"address\", reward.Address),\n\t\t\t\"rewards\":   json.ArrayNode(\"rewards\", makeRewardsArray(reward.Rewards)),\n\t\t})\n\t\tresponses.AppendArray(_rewardNode)\n\t}\n\n\tnode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"stat\":     _stat,\n\t\t\"response\": responses,\n\t})\n\n\tb, err := json.Marshal(node)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _RPC_api_stake.gno__ApiGetRewards() || json marshal error: %s\", err.Error()))\n\t}\n\n\treturn string(b)\n}\n\nfunc ApiGetRewardsByAddress(targetAddress string) string {\n\ten.MintAndDistributeGns()\n\tCalcPoolPosition()\n\n\tlpTokenRewards := []LpTokenReward{}\n\n\tfor tokenId, deposit := range deposits {\n\t\tif deposit.owner.String() != targetAddress {\n\t\t\tcontinue\n\t\t}\n\n\t\trewards := []Reward{}\n\n\t\t// get internal gns reward\n\t\tinternalGNS := rewardMathComputeInternalRewardAmount(tokenId)\n\t\tif internalGNS \u003e 0 {\n\t\t\trewards = append(rewards, Reward{\n\t\t\t\tIncentiveType:     \"INTERNAL\",\n\t\t\t\tTargetPoolPath:    deposit.targetPoolPath,\n\t\t\t\tRewardTokenPath:   consts.GNS_PATH,\n\t\t\t\tRewardTokenAmount: internalGNS,\n\t\t\t\tStakeTimestamp:    deposit.stakeTimestamp,\n\t\t\t\tStakeHeight:       deposit.stakeHeight,\n\t\t\t\tIncentiveStart:    deposit.stakeTimestamp,\n\t\t\t})\n\t\t}\n\n\t\t// find all external reward list for poolPath which lpTokenId is staked\n\t\tfor _, incentiveId := range poolIncentives[deposit.targetPoolPath] {\n\t\t\tincentive := incentives[incentiveId]\n\n\t\t\tstakedOrCreatedAt := max(deposit.stakeTimestamp, incentive.startTimestamp)\n\t\t\tnow := time.Now().Unix()\n\t\t\tif now \u003c stakedOrCreatedAt {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tduration := now - stakedOrCreatedAt\n\t\t\tdurationRatio := getRewardRatio(duration)\n\n\t\t\texternalReward := rewardMathComputeExternalRewardAmount(tokenId, incentiveId, durationRatio)\n\n\t\t\trewards = append(rewards, Reward{\n\t\t\t\tIncentiveType:     \"EXTERNAL\",\n\t\t\t\tTargetPoolPath:    deposit.targetPoolPath,\n\t\t\t\tRewardTokenPath:   incentives[incentiveId].rewardToken,\n\t\t\t\tRewardTokenAmount: externalReward,\n\t\t\t\tStakeTimestamp:    deposit.stakeTimestamp,\n\t\t\t\tStakeHeight:       deposit.stakeHeight,\n\t\t\t\tIncentiveStart:    incentive.startTimestamp,\n\t\t\t})\n\t\t}\n\t\tlpTokenReward := LpTokenReward{\n\t\t\tLpTokenId: tokenId,\n\t\t\tAddress:   deposit.owner.String(),\n\t\t\tRewards:   rewards,\n\t\t}\n\t\tlpTokenRewards = append(lpTokenRewards, lpTokenReward)\n\t}\n\n\tqb := ResponseQueryBase{\n\t\tHeight:    std.GetHeight(),\n\t\tTimestamp: time.Now().Unix(),\n\t}\n\n\tr := ResponseApiGetRewards{\n\t\tStat:     qb,\n\t\tResponse: lpTokenRewards,\n\t}\n\n\t// STAT NODE\n\t_stat := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"height\":    json.NumberNode(\"height\", float64(std.GetHeight())),\n\t\t\"timestamp\": json.NumberNode(\"timestamp\", float64(time.Now().Unix())),\n\t})\n\n\t// RESPONSE (ARRAY) NODE\n\tresponses := json.ArrayNode(\"\", []*json.Node{})\n\tfor _, reward := range r.Response {\n\t\t_rewardNode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"lpTokenId\": json.NumberNode(\"lpTokenId\", float64(reward.LpTokenId)),\n\t\t\t\"address\":   json.StringNode(\"address\", reward.Address),\n\t\t\t\"rewards\":   json.ArrayNode(\"rewards\", makeRewardsArray(reward.Rewards)),\n\t\t})\n\t\tresponses.AppendArray(_rewardNode)\n\t}\n\n\tnode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"stat\":     _stat,\n\t\t\"response\": responses,\n\t})\n\n\tb, err := json.Marshal(node)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _RPC_api_stake.gno__ApiGetRewards() || json marshal error: %s\", err.Error()))\n\t}\n\n\treturn string(b)\n}\n\nfunc ApiGetStakes() string {\n\ten.MintAndDistributeGns()\n\tCalcPoolPosition()\n\n\tstakes := []Stake{}\n\tfor tokenId, deposit := range deposits {\n\t\tstakes = append(stakes, Stake{\n\t\t\tTokenId:        tokenId,\n\t\t\tOwner:          deposit.owner,\n\t\t\tNumberOfStakes: deposit.numberOfStakes,\n\t\t\tStakeTimestamp: deposit.stakeTimestamp,\n\t\t\tTargetPoolPath: deposit.targetPoolPath,\n\t\t})\n\t}\n\n\tqb := ResponseQueryBase{\n\t\tHeight:    std.GetHeight(),\n\t\tTimestamp: time.Now().Unix(),\n\t}\n\n\tr := ResponseApiGetStakes{\n\t\tStat:     qb,\n\t\tResponse: stakes,\n\t}\n\n\t// STAT NODE\n\t_stat := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"height\":    json.NumberNode(\"height\", float64(std.GetHeight())),\n\t\t\"timestamp\": json.NumberNode(\"timestamp\", float64(time.Now().Unix())),\n\t})\n\n\t// RESPONSE (ARRAY) NODE\n\tresponses := json.ArrayNode(\"\", []*json.Node{})\n\tfor _, stake := range r.Response {\n\t\t_stakeNode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"tokenId\":        json.NumberNode(\"tokenId\", float64(stake.TokenId)),\n\t\t\t\"owner\":          json.StringNode(\"owner\", stake.Owner.String()),\n\t\t\t\"numberOfStakes\": json.NumberNode(\"numberOfStakes\", float64(stake.NumberOfStakes)),\n\t\t\t\"stakeTimestamp\": json.NumberNode(\"stakeTimestamp\", float64(stake.StakeTimestamp)),\n\t\t\t\"targetPoolPath\": json.StringNode(\"targetPoolPath\", stake.TargetPoolPath),\n\t\t})\n\t\tresponses.AppendArray(_stakeNode)\n\t}\n\n\tnode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"stat\":     _stat,\n\t\t\"response\": responses,\n\t})\n\n\tb, err := json.Marshal(node)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _RPC_api_stake.gno__ApiGetStakes() || json marshal error: %s\", err.Error()))\n\t}\n\n\treturn string(b)\n}\n\nfunc ApiGetStakesByLpTokenId(targetLpTokenId uint64) string {\n\ten.MintAndDistributeGns()\n\tCalcPoolPosition()\n\n\tstakes := []Stake{}\n\n\tfor tokenId, deposit := range deposits {\n\t\tif tokenId != targetLpTokenId {\n\t\t\tcontinue\n\t\t}\n\n\t\tstakes = append(stakes, Stake{\n\t\t\tTokenId:        tokenId,\n\t\t\tOwner:          deposit.owner,\n\t\t\tNumberOfStakes: deposit.numberOfStakes,\n\t\t\tStakeTimestamp: deposit.stakeTimestamp,\n\t\t\tTargetPoolPath: deposit.targetPoolPath,\n\t\t})\n\t}\n\n\tqb := ResponseQueryBase{\n\t\tHeight:    std.GetHeight(),\n\t\tTimestamp: time.Now().Unix(),\n\t}\n\n\tr := ResponseApiGetStakes{\n\t\tStat:     qb,\n\t\tResponse: stakes,\n\t}\n\n\t// STAT NODE\n\t_stat := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"height\":    json.NumberNode(\"height\", float64(std.GetHeight())),\n\t\t\"timestamp\": json.NumberNode(\"timestamp\", float64(time.Now().Unix())),\n\t})\n\n\t// RESPONSE (ARRAY) NODE\n\tresponses := json.ArrayNode(\"\", []*json.Node{})\n\tfor _, stake := range r.Response {\n\t\t_stakeNode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"tokenId\":        json.NumberNode(\"tokenId\", float64(stake.TokenId)),\n\t\t\t\"owner\":          json.StringNode(\"owner\", stake.Owner.String()),\n\t\t\t\"numberOfStakes\": json.NumberNode(\"numberOfStakes\", float64(stake.NumberOfStakes)),\n\t\t\t\"stakeTimestamp\": json.NumberNode(\"stakeTimestamp\", float64(stake.StakeTimestamp)),\n\t\t\t\"targetPoolPath\": json.StringNode(\"targetPoolPath\", stake.TargetPoolPath),\n\t\t})\n\t\tresponses.AppendArray(_stakeNode)\n\t}\n\n\tnode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"stat\":     _stat,\n\t\t\"response\": responses,\n\t})\n\n\tb, err := json.Marshal(node)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _RPC_api_stake.gno__ApiGetStakes() || json marshal error: %s\", err.Error()))\n\t}\n\n\treturn string(b)\n}\n\nfunc ApiGetStakesByAddress(targetAddress string) string {\n\ten.MintAndDistributeGns()\n\tCalcPoolPosition()\n\n\tstakes := []Stake{}\n\n\tfor tokenId, deposit := range deposits {\n\t\tif deposit.owner.String() != targetAddress {\n\t\t\tcontinue\n\t\t}\n\n\t\tstakes = append(stakes, Stake{\n\t\t\tTokenId:        tokenId,\n\t\t\tOwner:          deposit.owner,\n\t\t\tNumberOfStakes: deposit.numberOfStakes,\n\t\t\tStakeTimestamp: deposit.stakeTimestamp,\n\t\t\tTargetPoolPath: deposit.targetPoolPath,\n\t\t})\n\t}\n\n\tqb := ResponseQueryBase{\n\t\tHeight:    std.GetHeight(),\n\t\tTimestamp: time.Now().Unix(),\n\t}\n\n\tr := ResponseApiGetStakes{\n\t\tStat:     qb,\n\t\tResponse: stakes,\n\t}\n\n\t// STAT NODE\n\t_stat := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"height\":    json.NumberNode(\"height\", float64(std.GetHeight())),\n\t\t\"timestamp\": json.NumberNode(\"timestamp\", float64(time.Now().Unix())),\n\t})\n\n\t// RESPONSE (ARRAY) NODE\n\tresponses := json.ArrayNode(\"\", []*json.Node{})\n\tfor _, stake := range r.Response {\n\t\t_stakeNode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"tokenId\":        json.NumberNode(\"tokenId\", float64(stake.TokenId)),\n\t\t\t\"owner\":          json.StringNode(\"owner\", stake.Owner.String()),\n\t\t\t\"numberOfStakes\": json.NumberNode(\"numberOfStakes\", float64(stake.NumberOfStakes)),\n\t\t\t\"stakeTimestamp\": json.NumberNode(\"stakeTimestamp\", float64(stake.StakeTimestamp)),\n\t\t\t\"targetPoolPath\": json.StringNode(\"targetPoolPath\", stake.TargetPoolPath),\n\t\t})\n\t\tresponses.AppendArray(_stakeNode)\n\t}\n\n\tnode := json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\"stat\":     _stat,\n\t\t\"response\": responses,\n\t})\n\n\tb, err := json.Marshal(node)\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] _RPC_api_stake.gno__ApiGetStakes() || json marshal error: %s\", err.Error()))\n\t}\n\n\treturn string(b)\n}\n\n// for off chain to check if lpTokenId is staked via RPC\nfunc IsStaked(tokenId uint64) bool {\n\t_, exist := deposits[tokenId]\n\treturn exist\n}\n\nfunc makeRewardsArray(rewards []Reward) []*json.Node {\n\trewardsArray := make([]*json.Node, len(rewards))\n\n\tfor i, reward := range rewards {\n\t\trewardsArray[i] = json.ObjectNode(\"\", map[string]*json.Node{\n\t\t\t\"incentiveType\":     json.StringNode(\"incentiveType\", reward.IncentiveType),\n\t\t\t\"targetPoolPath\":    json.StringNode(\"targetPoolPath\", reward.TargetPoolPath),\n\t\t\t\"rewardTokenPath\":   json.StringNode(\"rewardTokenPath\", reward.RewardTokenPath),\n\t\t\t\"rewardTokenAmount\": json.NumberNode(\"rewardTokenAmount\", float64(reward.RewardTokenAmount)),\n\t\t\t\"stakeTimestamp\":    json.NumberNode(\"stakeTimestamp\", float64(reward.StakeTimestamp)),\n\t\t\t\"stakeHeight\":       json.NumberNode(\"stakeHeight\", float64(reward.StakeHeight)),\n\t\t\t\"incentiveStart\":    json.NumberNode(\"incentiveStart\", float64(reward.IncentiveStart)),\n\t\t})\n\t}\n\treturn rewardsArray\n}\n"},{"name":"__TEST_0_INIT_TOKEN_REGISTER_test.gno","body":"package staker\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/onbloc/foo\"\n\n\t\"gno.land/r/onbloc/bar\"\n\n\t\"gno.land/r/onbloc/baz\"\n\n\t\"gno.land/r/onbloc/qux\"\n\n\t\"gno.land/r/demo/wugnot\"\n\n\t\"gno.land/r/onbloc/obl\"\n\n\t\"gno.land/r/gnoswap/gns\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\n\tpusers \"gno.land/p/demo/users\"\n\n\tpl \"gno.land/r/gnoswap/pool\"\n)\n\ntype FooToken struct{}\n\nfunc (FooToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn foo.Transfer\n}\nfunc (FooToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn foo.TransferFrom\n}\nfunc (FooToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn foo.BalanceOf\n}\nfunc (FooToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn foo.Approve\n}\n\ntype BarToken struct{}\n\nfunc (BarToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn bar.Transfer\n}\nfunc (BarToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn bar.TransferFrom\n}\nfunc (BarToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn bar.BalanceOf\n}\nfunc (BarToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn bar.Approve\n}\n\ntype BazToken struct{}\n\nfunc (BazToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn baz.Transfer\n}\nfunc (BazToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn baz.TransferFrom\n}\nfunc (BazToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn baz.BalanceOf\n}\nfunc (BazToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn baz.Approve\n}\n\ntype QuxToken struct{}\n\nfunc (QuxToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn qux.Transfer\n}\nfunc (QuxToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn qux.TransferFrom\n}\nfunc (QuxToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn qux.BalanceOf\n}\nfunc (QuxToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn qux.Approve\n}\n\ntype WugnotToken struct{}\n\nfunc (WugnotToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn wugnot.Transfer\n}\nfunc (WugnotToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn wugnot.TransferFrom\n}\nfunc (WugnotToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn wugnot.BalanceOf\n}\nfunc (WugnotToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn wugnot.Approve\n}\n\ntype OBLToken struct{}\n\nfunc (OBLToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn obl.Transfer\n}\nfunc (OBLToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn obl.TransferFrom\n}\nfunc (OBLToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn obl.BalanceOf\n}\nfunc (OBLToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn obl.Approve\n}\n\ntype GNSToken struct{}\n\nfunc (GNSToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn gns.Transfer\n}\n\nfunc (GNSToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn gns.TransferFrom\n}\n\nfunc (GNSToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn gns.BalanceOf\n}\n\nfunc (GNSToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn gns.Approve\n}\n\nfunc init() {\n\tstd.TestSetOrigCaller(consts.TOKEN_REGISTER)\n\n\t// POOL\n\tpl.RegisterGRC20Interface(\"gno.land/r/onbloc/bar\", BarToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/onbloc/foo\", FooToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/onbloc/baz\", BazToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/onbloc/qux\", QuxToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/demo/wugnot\", WugnotToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/onbloc/obl\", OBLToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/gnoswap/gns\", GNSToken{})\n\n\t// STAKER\n\tRegisterGRC20Interface(\"gno.land/r/onbloc/bar\", BarToken{})\n\tRegisterGRC20Interface(\"gno.land/r/onbloc/foo\", FooToken{})\n\tRegisterGRC20Interface(\"gno.land/r/onbloc/baz\", BazToken{})\n\tRegisterGRC20Interface(\"gno.land/r/onbloc/qux\", QuxToken{})\n\tRegisterGRC20Interface(\"gno.land/r/demo/wugnot\", WugnotToken{})\n\tRegisterGRC20Interface(\"gno.land/r/onbloc/obl\", OBLToken{})\n\tRegisterGRC20Interface(\"gno.land/r/gnoswap/gns\", GNSToken{})\n\n\tstd.TestSetOrigCaller(consts.GNOSWAP_ADMIN)\n}\n"},{"name":"__TEST_0_INIT_VARIABLE_AND_HELPER_test.gno","body":"package staker\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/r/gnoswap/consts\"\n)\n\nvar (\n\tgsa std.Address = consts.GNOSWAP_ADMIN\n\n\tfooPath string = \"gno.land/r/onbloc/foo\"\n\tbarPath string = \"gno.land/r/onbloc/bar\"\n\tbazPath string = \"gno.land/r/onbloc/baz\"\n\tquxPath string = \"gno.land/r/onbloc/qux\"\n\n\toblPath string = \"gno.land/r/onbloc/obl\"\n\t// wugnotPath string = \"gno.land/r/demo/wugnot\" // from consts\n\t// gnsPath string = \"gno.land/r/gnoswap/gns\" // from consts\n\n\tfee100  uint32 = 100\n\tfee500  uint32 = 500\n\tfee3000 uint32 = 3000\n\n\tmax_timeout int64 = 9999999999\n)\n\n// Realms to mock frames\nvar (\n\tgsaRealm = std.NewUserRealm(gsa)\n\n\tposRealm = std.NewCodeRealm(consts.POSITION_PATH)\n\trouRealm = std.NewCodeRealm(consts.ROUTER_PATH)\n\tstkRealm = std.NewCodeRealm(consts.STAKER_PATH)\n)\n\n/* HELPER */\nfunc ugnotBalanceOf(addr std.Address) uint64 {\n\ttestBanker := std.GetBanker(std.BankerTypeRealmIssue)\n\n\tcoins := testBanker.GetCoins(addr)\n\tif len(coins) == 0 {\n\t\treturn 0\n\t}\n\n\treturn uint64(coins.AmountOf(\"ugnot\"))\n}\n\nfunc shouldEQ(t *testing.T, got, expected interface{}) {\n\tif got != expected {\n\t\tt.Errorf(\"got %v, expected %v\", got, expected)\n\t}\n}\n\nfunc shouldNEQ(t *testing.T, got, expected interface{}) {\n\tif got == expected {\n\t\tt.Errorf(\"got %v, didn't expected %v\", got, expected)\n\t}\n}\n\nfunc shouldPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"expected panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc shouldPanicWithMsg(t *testing.T, f func(), msg string) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t} else {\n\t\t\tif r != msg {\n\t\t\t\tt.Errorf(\"excepted panic(%v), got(%v)\", msg, r)\n\t\t\t}\n\t\t}\n\t}()\n\tf()\n}\n"},{"name":"calculate_pool_position_reward.gno","body":"package staker\n\nimport (\n\t\"std\"\n\t\"time\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\n// poolPath -\u003e gnsAmount [accu]\nvar poolGns map[string]uint64 = make(map[string]uint64)\n\n// poolPath -\u003e gnsAmount [current block]\nvar poolTmpGns map[string]uint64 = make(map[string]uint64)\n\n// poolPath -\u003e accumulatedGns\nvar poolAccuGns map[string]uint64 = make(map[string]uint64)\n\n// tokenId -\u003e gnsAmount\nvar positionGns map[uint64]uint64 = make(map[uint64]uint64)\n\ntype externalRewards struct {\n\tincentiveId        string\n\tpoolPath           string\n\ttokenPath          string\n\ttokenAmount        uint64\n\ttokenAmountClaimed uint64\n}\n\n// tokenId -\u003e []externalRewards\nvar positionExternal map[uint64][]externalRewards = make(map[uint64][]externalRewards)\n\nfunc CalcPoolPosition() {\n\theight := std.GetHeight()\n\tif height \u003c= lastCalculatedHeight {\n\t\treturn\n\t}\n\n\t// calculate pool\n\tstakerGnsBalance := gnsBalance(consts.STAKER_ADDR)\n\tmintedGnsAmount := stakerGnsBalance - lastGnsBalance\n\n\tlastGnsBalance = stakerGnsBalance\n\n\ttier1Amount, tier2Amount, tier3Amount := getTiersAmount(mintedGnsAmount)\n\ttier1Num, tier2Num, tier3Num := getNumPoolTiers()\n\n\tfor poolPath, internal := range poolTiers {\n\t\ttier := internal.tier\n\t\ttierAmount := uint64(0)\n\t\tif tier == 1 {\n\t\t\ttierAmount = tier1Amount / tier1Num\n\t\t} else if tier == 2 {\n\t\t\ttierAmount = tier2Amount / tier2Num\n\t\t} else if tier == 3 {\n\t\t\ttierAmount = tier3Amount / tier3Num\n\t\t}\n\t\tpoolGns[poolPath] += tierAmount\n\t\tpoolAccuGns[poolPath] += tierAmount\n\n\t\tpoolTmpGns[poolPath] = tierAmount\n\t}\n\n\tfor tokenId, deposit := range deposits {\n\t\tpoolPath := deposit.targetPoolPath\n\t\tpoolTmpAmount := poolTmpGns[poolPath]\n\n\t\t// calculate position gns rewards\n\t\tliqRatioX96 := getMyLiquidityRatio(poolPath, tokenId)\n\t\tliqRatioX96x100 := u256.Zero()\n\t\tliqRatioX96x100 = u256.Zero().Mul(liqRatioX96, u256.NewUint(100))\n\t\tliqRatiox100 := u256.Zero().Div(liqRatioX96x100, u256.MustFromDecimal(consts.Q96))\n\t\tliqRatio := liqRatiox100.Uint64()\n\n\t\tpositionAmount := poolTmpAmount * liqRatio / 100\n\t\tpositionGns[tokenId] += positionAmount\n\n\t\t// calculate position external rewards\n\t\tincentiveIds := poolIncentives[poolPath]\n\t\tfor _, incentiveId := range incentiveIds {\n\t\t\tincentive := incentives[incentiveId]\n\n\t\t\tstartTimestamp := incentive.startTimestamp\n\t\t\tendTimestamp := incentive.endTimestamp\n\t\t\tnow := time.Now().Unix()\n\n\t\t\t// if inactive incentive, do not calculate\n\t\t\tif !(startTimestamp \u003c= now \u0026\u0026 now \u003c= endTimestamp) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\trewardToken := incentive.rewardToken\n\t\t\trewardAmount := incentive.rewardAmount\n\t\t\trewardLeft := incentive.rewardLeft\n\n\t\t\tincentiveDuration := endTimestamp - startTimestamp\n\t\t\tincentiveBlock := incentiveDuration / consts.BLOCK_GENERATION_INTERVAL\n\t\t\trewardPerBlock256 := new(u256.Uint).Div(rewardAmount, u256.NewUint(uint64(incentiveBlock)))\n\t\t\trewardPerBlock := rewardPerBlock256.Uint64()\n\n\t\t\t// how many blocks passed since the start of the incentive\n\t\t\tblocksPassed := (now - startTimestamp) / consts.BLOCK_GENERATION_INTERVAL\n\n\t\t\tliqRatioX96 := getMyLiquidityRatio(poolPath, tokenId)\n\t\t\tliqRatioX96x100 := u256.Zero()\n\t\t\tliqRatioX96x100 = u256.Zero().Mul(liqRatioX96, u256.NewUint(100))\n\t\t\tliqRatiox100 := u256.Zero().Div(liqRatioX96x100, u256.MustFromDecimal(consts.Q96))\n\t\t\tliqRatio := liqRatiox100.Uint64()\n\n\t\t\tpositionAmount := (rewardPerBlock * uint64(blocksPassed)) * liqRatio / 100\n\t\t\tif positionAmount \u003e rewardLeft.Uint64() {\n\t\t\t\tpositionAmount = rewardLeft.Uint64()\n\t\t\t}\n\n\t\t\tif len(positionExternal[tokenId]) == 0 {\n\t\t\t\tpositionExternal[tokenId] = append(positionExternal[tokenId], externalRewards{\n\t\t\t\t\tincentiveId:        incentiveId,\n\t\t\t\t\tpoolPath:           poolPath,\n\t\t\t\t\ttokenPath:          rewardToken,\n\t\t\t\t\ttokenAmount:        positionAmount,\n\t\t\t\t\ttokenAmountClaimed: 0,\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tfor i, external := range positionExternal[tokenId] {\n\t\t\t\t\tif external.incentiveId == incentiveId {\n\t\t\t\t\t\texternal.tokenAmount = (positionAmount - external.tokenAmountClaimed)\n\t\t\t\t\t\tpositionExternal[tokenId][i] = external\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\t// update flag\n\tlastCalculatedHeight = height\n\n\t// clear tmp poolGns\n\t// clear(poolTmpGns) // gno doesn't support `clear` keyword yet\n\tpoolTmpGns = make(map[string]uint64)\n}\n"},{"name":"external_token_list.gno","body":"package staker\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/gnoswap/consts\"\n)\n\nvar defaultAllowed = []string{consts.GNS_PATH, consts.WUGNOT_PATH, consts.GNOT}\nvar allowedTokens = []string{}\n\nfunc init() {\n\tallowedTokens = defaultAllowed\n}\n\nfunc AddToken(tokenPath string) {\n\tcaller := std.PrevRealm().Addr()\n\tif caller != consts.GNOSWAP_ADMIN {\n\t\tpanic(\"only admin can add token\")\n\t}\n\n\t// if exist just return\n\tfor _, t := range allowedTokens {\n\t\tif t == tokenPath {\n\t\t\treturn\n\t\t}\n\t}\n\n\tallowedTokens = append(allowedTokens, tokenPath)\n}\n\nfunc RemoveToken(tokenPath string) {\n\tcaller := std.PrevRealm().Addr()\n\tif caller != consts.GNOSWAP_ADMIN {\n\t\tpanic(\"only admin can remove token\")\n\t}\n\n\t// if default token, can not remove\n\tisDefault := contains(defaultAllowed, tokenPath)\n\tif isDefault {\n\t\tpanic(\"can not remove default token\")\n\t}\n\n\tfor i, t := range allowedTokens {\n\t\tif t == tokenPath {\n\t\t\tallowedTokens = append(allowedTokens[:i], allowedTokens[i+1:]...)\n\t\t\treturn\n\t\t}\n\t}\n}\n"},{"name":"gno.mod","body":"module gno.land/r/gnoswap/staker\n\nrequire (\n\tgno.land/p/gnoswap/uint256 v0.0.0-latest\n\tgno.land/p/demo/grc/grc721 v0.0.0-latest\n\tgno.land/p/demo/json v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n\tgno.land/p/demo/users v0.0.0-latest\n\tgno.land/r/gnoswap/gnft v0.0.0-latest\n\tgno.land/r/gnoswap/gns v0.0.0-latest\n\tgno.land/r/gnoswap/gov v0.0.0-latest\n\tgno.land/r/gnoswap/pool v0.0.0-latest\n\tgno.land/r/gnoswap/position v0.0.0-latest\n\tgno.land/r/gnoswap/common v0.0.0-latest\n\tgno.land/r/gnoswap/consts v0.0.0-latest\n)\n"},{"name":"gno_helper.gno","body":"package staker\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/gnoswap/consts\"\n)\n\nfunc GetOrigPkgAddr() std.Address {\n\treturn consts.STAKER_ADDR\n}\n"},{"name":"incentive_id.gno","body":"package staker\n\nimport (\n\t\"encoding/base64\"\n\n\t\"std\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nfunc incentiveIdCompute(caller std.Address, targetPoolPath, rewardToken string) string {\n\tkey := ufmt.Sprintf(\"%s:%s:%s\", caller.String(), targetPoolPath, rewardToken)\n\n\tencoded := base64.StdEncoding.EncodeToString([]byte(key))\n\treturn encoded\n}\n"},{"name":"manage_pool_tiers.gno","body":"package staker\n\nimport (\n\t\"std\"\n\t\"time\"\n\n\tpl \"gno.land/r/gnoswap/pool\"\n\n\t\"gno.land/p/demo/ufmt\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\n\ten \"gno.land/r/gnoswap/emission\"\n)\n\n// GetPoolWithTiers returns list of pools with their tiers\nfunc GetPoolWithTiers() map[string]InternalTier {\n\treturn poolTiers\n}\n\n// SetPoolTier sets the tier of the pool\n//\n// Panics if any of the following conditions are met:\n// - caller is not admin\n// - pool does not exist\n// - pool exists in poolTiers\n// - tier is not valid\nfunc SetPoolTier(pool string, tier uint64) {\n\ten.MintAndDistributeGns()\n\tCalcPoolPosition()\n\n\t// panic if pool does not exist\n\tif !(pl.DoesPoolPathExist(pool)) {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] manage_pool_tiers.gno__SetPoolTier() || pool(%s) does not exist\"))\n\t}\n\n\t// panic if pool exists in poolTiers\n\t_, exist := poolTiers[pool]\n\tif exist {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] manage_pool_tiers.gno__SetPoolTier() || pool(%s) already exists in poolTiers\", pool))\n\t}\n\n\tcaller := std.PrevRealm().Addr()\n\tif caller != consts.GNOSWAP_ADMIN \u0026\u0026 caller != consts.GOV_ADDR {\n\t\tpanic(\n\t\t\tufmt.Sprintf(\n\t\t\t\t\"[STAKER] manage_pool_tiers.gno__SetPoolTier() || only admin(%s) or governance(%s) can set additional pool with tier, called from %s\",\n\t\t\t\tconsts.GNOSWAP_ADMIN,\n\t\t\t\tconsts.GOV_ADDR,\n\t\t\t\tcaller,\n\t\t\t),\n\t\t)\n\t}\n\n\t// check if tier is valid\n\tvalidTier(tier)\n\n\tpoolTiers[pool] = InternalTier{\n\t\ttier:           tier,\n\t\tstartTimestamp: time.Now().Unix(),\n\t}\n\n\tstd.Emit(\n\t\t\"GNOSWAP\",\n\t\t\"m_callType\", callType(),\n\t\t\"m_origCaller\", origCaller(),\n\t\t\"m_prevRealm\", prevRealm(),\n\t\t\"p_poolPath\", pool,\n\t\t\"p_tier\", uint64ToStr(tier),\n\t)\n}\n\n// ChangePoolTier changes the tier of the pool\n//\n// Panics if any of the following conditions are met:\n// - caller is not admin\n// - pool does not exist in poolTiers\n// - tier is not valid\n// - pool is default pool\nfunc ChangePoolTier(pool string, tier uint64) {\n\ten.MintAndDistributeGns()\n\tCalcPoolPosition()\n\n\t// panic if pool does not exist in poolTiers\n\tinternal, exist := poolTiers[pool]\n\tif !exist {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] manage_pool_tiers.gno__ChangePoolTier() || pool(%s) does not exist in poolTiers\"))\n\t}\n\n\t// check if tier is valid\n\tvalidTier(tier)\n\n\t// CAN'T CHANGE TIER OF THIS GNS:GNOT 0.3%\n\tif pool == MUST_EXISTS_IN_TIER_1 {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] manage_pool_tiers.gno__ChangePoolTier() || Cannot change tier of this pool(%s)\"))\n\t}\n\n\tcaller := std.PrevRealm().Addr()\n\tif caller != consts.GNOSWAP_ADMIN \u0026\u0026 caller != consts.GOV_ADDR {\n\t\tpanic(\n\t\t\tufmt.Sprintf(\n\t\t\t\t\"[STAKER] manage_pool_tiers.gno__ChangePoolTier() || only admin(%s) or governance(%s) can change existing pool with tier, called from %s\",\n\t\t\t\tconsts.GNOSWAP_ADMIN,\n\t\t\t\tconsts.GOV_ADDR,\n\t\t\t\tcaller,\n\t\t\t),\n\t\t)\n\t}\n\n\tstd.Emit(\n\t\t\"GNOSWAP\",\n\t\t\"m_callType\", callType(),\n\t\t\"m_origCaller\", origCaller(),\n\t\t\"m_prevRealm\", prevRealm(),\n\t\t\"p_poolPath\", pool,\n\t\t\"p_tier\", uint64ToStr(tier),\n\t)\n\n\tinternal.tier = tier\n\tpoolTiers[pool] = internal\n}\n\n// RemovePoolTier removes the pool from poolTiers\n//\n// Panics if any of the following conditions are met:\n// - caller is not admin\n// - pool is default pool\nfunc RemovePoolTier(pool string) {\n\ten.MintAndDistributeGns()\n\tCalcPoolPosition()\n\n\tif pool == MUST_EXISTS_IN_TIER_1 {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] manage_pool_tiers.gno__RemovePoolTier() || Cannot change tier of this pool\"))\n\t}\n\n\tcaller := std.PrevRealm().Addr()\n\tif caller != consts.GNOSWAP_ADMIN \u0026\u0026 caller != consts.GOV_ADDR {\n\t\tpanic(\n\t\t\tufmt.Sprintf(\n\t\t\t\t\"[STAKER] manage_pool_tiers.gno__RemovePoolTier() || only admin(%s) or governance(%s) can remove existing pool with tier, called from %s\",\n\t\t\t\tconsts.GNOSWAP_ADMIN,\n\t\t\t\tconsts.GOV_ADDR,\n\t\t\t\tcaller,\n\t\t\t),\n\t\t)\n\t}\n\n\tdelete(poolTiers, pool)\n\n\tstd.Emit(\n\t\t\"GNOSWAP\",\n\t\t\"m_callType\", callType(),\n\t\t\"m_origCaller\", origCaller(),\n\t\t\"m_prevRealm\", prevRealm(),\n\t\t\"p_poolPath\", pool,\n\t)\n}\n\nfunc validTier(tier uint64) {\n\tif tier \u003c 1 || tier \u003e 3 {\n\t\tpanic(ufmt.Sprintf(\"tier(%d) is not valid\", tier))\n\t}\n}\n"},{"name":"mint_stake.gno","body":"package staker\n\nimport (\n\t\"std\"\n\n\tpn \"gno.land/r/gnoswap/position\"\n\n\t\"gno.land/p/demo/ufmt\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\n\t\"gno.land/r/gnoswap/gnft\"\n\n\t\"gno.land/p/demo/grc/grc721\"\n\n\ten \"gno.land/r/gnoswap/emission\"\n)\n\n// MintAndStake mints and stakes the LP token\n// If minting is successful, it mints LP token to staker not user\nfunc MintAndStake(\n\ttoken0 string,\n\ttoken1 string,\n\tfee uint32,\n\ttickLower int32,\n\ttickUpper int32,\n\tamount0Desired string, // *u256.Uint\n\tamount1Desired string, // *u256.Uint\n\tamount0Min string, // *u256.Uint\n\tamount1Min string, // *u256.Uint\n\tdeadline int64,\n) (uint64, string, string, string, string) { // tokenId, liquidity, amount0, amount1, poolPath ( *u256.Uint x3)\n\ten.MintAndDistributeGns()\n\tCalcPoolPosition()\n\n\t// if one click native\n\tif token0 == consts.GNOT || token1 == consts.GNOT {\n\t\t// check sent ugnot\n\t\tsent := std.GetOrigSend()\n\t\tugnotSent := uint64(sent.AmountOf(\"ugnot\"))\n\n\t\t// not enough ugnot sent\n\t\tif ugnotSent \u003c consts.UGNOT_MINT_DEPOSIT_TO_WRAP {\n\t\t\tpanic(ufmt.Sprintf(\"[STAKER] mint_stake.gno__MintAndStake() || too less(%d) ugnot sent (minimum:%d)\", ugnotSent, consts.UGNOT_MINT_DEPOSIT_TO_WRAP))\n\t\t}\n\n\t\t// send it over to position to wrap\n\t\tbanker := std.GetBanker(std.BankerTypeRealmSend)\n\t\tbanker.SendCoins(consts.STAKER_ADDR, consts.POSITION_ADDR, std.Coins{{\"ugnot\", int64(ugnotSent)}})\n\t}\n\n\ttokenId, liquidity, amount0, amount1 := pn.Mint(\n\t\ttoken0,\n\t\ttoken1,\n\t\tfee,\n\t\ttickLower,\n\t\ttickUpper,\n\t\tamount0Desired,\n\t\tamount1Desired,\n\t\tamount0Min,\n\t\tamount1Min,\n\t\tdeadline,\n\t\tconsts.STAKER_ADDR.String(),\n\t)\n\n\t// at this point staker has minted token\n\ttoTid := grc721.TokenID(ufmt.Sprintf(\"%d\", tokenId))\n\tgnft.SetTokenURI(toTid)\n\n\tpoolPath, _, _ := StakeToken(tokenId) // poolPath, stakedAmount0, stakedAmount1\n\n\t/*\n\t\tstd.Emit(\n\t\t\t\"GNOSWAP\",\n\t\t\t\"m_callType\", callType(),\n\t\t\t\"m_origCaller\", origCaller(),\n\t\t\t\"m_prevRealm\", prevRealm(),\n\t\t\t\"p_tickLower\", int32ToStr(tickLower),\n\t\t\t\"p_tickUpper\", int32ToStr(tickUpper),\n\t\t\t\"poolPath\", poolPath,\n\t\t\t\"tokenId\", uint64ToStr(tokenId),\n\t\t\t\"liquidity\", liquidity,\n\t\t\t\"amount0\", amount0,\n\t\t\t\"amount1\", amount1,\n\t\t)\n\t*/\n\n\treturn tokenId, liquidity, amount0, amount1, poolPath\n}\n"},{"name":"protocol_fee_unstaking.gno","body":"package staker\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\n\t\"gno.land/p/demo/ufmt\"\n\n\tu256 \"gno.land/p/gnoswap/uint256\"\n\n\t\"gno.land/r/gnoswap/gns\"\n)\n\nvar (\n\tunstakingFee = uint64(100) // 1%\n)\n\nfunc handleUnstakingFee(\n\ttokenPath string,\n\tamount uint64,\n\tinternal bool,\n) uint64 {\n\tif unstakingFee == 0 {\n\t\treturn amount\n\t}\n\n\tfeeAmount := amount * unstakingFee / 10000\n\tif feeAmount == 0 {\n\t\treturn amount\n\t}\n\n\tif internal {\n\t\t// staker contract has fee\n\t\tgns.Transfer(a2u(consts.PROTOCOL_FEE_ADDR), feeAmount)\n\t} else {\n\t\t// external contract has fee\n\t\tok := transferByRegisterCall(tokenPath, consts.PROTOCOL_FEE_ADDR, feeAmount)\n\t\tif !ok {\n\t\t\tpanic(ufmt.Sprintf(\"[STAKER] reward_fee.gno__handleUnstakingFee() || expected transferByRegisterCall(%s, %s, %s) == true\", tokenPath, consts.PROTOCOL_FEE_ADDR, u256.NewUint(feeAmount).ToString()))\n\t\t}\n\t}\n\n\tstd.Emit(\n\t\t\"GNOSWAP\",\n\t\t\"m_callType\", \"INDIRECT\",\n\t\t\"m_origCaller\", origCaller(),\n\t\t\"m_prevRealm\", prevRealm(),\n\t\t\"p_tokenPath\", tokenPath,\n\t\t\"p_internal\", boolToStr(internal),\n\t\t\"feeAmount\", uint64ToStr(feeAmount),\n\t)\n\n\treturn amount - feeAmount\n}\n\nfunc GetUnstakingFee() uint64 {\n\treturn unstakingFee\n}\n\nfunc SetUnstakingFee(fee uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif caller != consts.GNOSWAP_ADMIN \u0026\u0026 caller != consts.GOV_ADDR {\n\t\tpanic(\n\t\t\tufmt.Sprintf(\n\t\t\t\t\"[STAKER] protocol_fee_unstaking.gno__SetUnstakingFee() || only admin(%s) or governance(%s) can set unstaking fee, called from %s\",\n\t\t\t\tconsts.GNOSWAP_ADMIN,\n\t\t\t\tconsts.GOV_ADDR,\n\t\t\t\tcaller,\n\t\t\t),\n\t\t)\n\t}\n\n\t// 10000 (bps) = 100%\n\tif fee \u003e 10000 {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] reward_fee.gno__SetUnstakingFee() || fee(%d) must be in range 0 ~ 10000\", fee))\n\t}\n\n\tunstakingFee = fee\n\n\tstd.Emit(\n\t\t\"GNOSWAP\",\n\t\t\"m_callType\", callType(),\n\t\t\"m_origCaller\", origCaller(),\n\t\t\"m_prevRealm\", prevRealm(),\n\t\t\"p_fee\", uint64ToStr(fee),\n\t)\n}\n"},{"name":"reward_math.gno","body":"package staker\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/ufmt\"\n\n\tu256 \"gno.land/p/gnoswap/uint256\"\n\t\"gno.land/r/gnoswap/consts\"\n\n\tpos \"gno.land/r/gnoswap/position\"\n\n\t\"gno.land/r/gnoswap/gns\"\n)\n\nfunc rewardMathComputeInternalRewardAmount(tokenId uint64) uint64 {\n\tdeposit := deposits[tokenId]\n\n\t// using block\n\tstakeHeight := deposit.stakeHeight\n\tcurrentHeight := std.GetHeight()\n\tstakedDuration := currentHeight - stakeHeight\n\tdurationRatio := getRewardRatio(stakedDuration)\n\n\t// 100% amount\n\tgnsFullAmount := positionGns[tokenId]\n\tif gnsFullAmount == 0 {\n\t\treturn 0\n\t}\n\n\tgnsAmountToGive := (gnsFullAmount * durationRatio) / 100\n\n\t//  transfer to protocol_fee contract\n\t_gnsAmountLeft := gnsFullAmount - gnsAmountToGive\n\t_stakerGns := gnsBalance(consts.STAKER_ADDR)\n\ttoFee := min(_gnsAmountLeft, _stakerGns)\n\tgns.Transfer(a2u(consts.PROTOCOL_FEE_ADDR), toFee)\n\n\tpoolGns[deposit.targetPoolPath] -= gnsFullAmount\n\treturn gnsAmountToGive\n}\n\nfunc rewardMathComputeExternalRewardAmount(tokenId uint64, incentiveId string, durationRatio uint64) uint64 {\n\texternals := positionExternal[tokenId]\n\tfor _, external := range externals {\n\t\tif external.incentiveId == incentiveId {\n\t\t\ttokenAmount := external.tokenAmount\n\n\t\t\tif tokenAmount == 0 {\n\t\t\t\treturn 0\n\t\t\t}\n\n\t\t\tamountToGive := (tokenAmount * durationRatio) / 100\n\t\t\treturn amountToGive\n\t\t}\n\t}\n\n\treturn 0\n}\n\nfunc getPoolTotalStakedLiquidity(poolPath string) *u256.Uint {\n\tpoolStakedLiquidity := u256.Zero()\n\t// get all staked liquidity\n\tfor tokenId, deposit := range deposits { // key is tokenId // used in this range loop only\n\t\tif deposit.targetPoolPath == poolPath {\n\t\t\tisInRange := pos.PositionIsInRange(tokenId)\n\t\t\tif isInRange == false {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\ttokenLiquidity := pos.PositionGetPositionLiquidity(tokenId)\n\t\t\tpoolStakedLiquidity = new(u256.Uint).Add(poolStakedLiquidity, tokenLiquidity)\n\t\t}\n\t}\n\n\treturn poolStakedLiquidity\n}\n\nfunc getMyLiquidityRatio(poolPath string, tokenId uint64) *u256.Uint {\n\t_q96 := u256.MustFromDecimal(consts.Q96)\n\n\tpoolStakedLiquidity := getPoolTotalStakedLiquidity(poolPath)\n\n\t// my(current tokenId) liquidity\n\tmyLiquidity := pos.PositionGetPositionLiquidity(tokenId)\n\n\tisInRange := pos.PositionIsInRange(tokenId)\n\tif isInRange == false {\n\t\treturn u256.Zero()\n\t}\n\n\t// my liquidity ratio\n\tmyLiquidityX96 := new(u256.Uint).Mul(myLiquidity, _q96)\n\tmyLiquidityX96X100 := new(u256.Uint).Mul(myLiquidityX96, u256.NewUint(100))\n\n\tpoolStakedLiquidityX96 := new(u256.Uint).Mul(poolStakedLiquidity, _q96)\n\n\tmyLiquidityRatio := new(u256.Uint).Div(myLiquidityX96X100, poolStakedLiquidityX96) // this value needs to be divided by 100\n\tmyLiquidityRatio = new(u256.Uint).Mul(myLiquidityRatio, _q96)                      // so first mul consts.Q96\n\tmyLiquidityRatioX96 := new(u256.Uint).Div(myLiquidityRatio, u256.NewUint(100))     // then divided by 100\n\n\treturn myLiquidityRatioX96\n}\n\n// get current pool tier and reward ratio\nfunc getPoolTierAndRatio(poolPath string) (uint64, *u256.Uint) {\n\t_q96 := u256.MustFromDecimal(consts.Q96)\n\n\t// current pool's tier\n\tinternal, ok := poolTiers[poolPath]\n\tif !ok {\n\t\treturn 0, u256.Zero()\n\t}\n\ttier := internal.tier\n\n\t// that tiers ratio\n\tratio := getTierRatio(tier)\n\tratioX96 := new(u256.Uint).Mul(u256.NewUint(ratio), _q96) // first consts.Q96\n\n\t// finally current pools ratio\n\tnumTier1, numTier2, numTier3 := getNumPoolTiers()\n\n\tvar weight *u256.Uint\n\tswitch tier {\n\tcase 1:\n\t\tweight = new(u256.Uint).Div(ratioX96, u256.NewUint(numTier1))\n\tcase 2:\n\t\tweight = new(u256.Uint).Div(ratioX96, u256.NewUint(numTier2))\n\tcase 3:\n\t\tweight = new(u256.Uint).Div(ratioX96, u256.NewUint(numTier3))\n\tdefault:\n\t\tpanic(ufmt.Sprintf(\"[STAKER] reward_math.gno__getPoolTierAndRatio() || invalid tier(%d)\", tier))\n\t}\n\n\treturn tier, weight\n}\n\n// get number of pools for each tier\nfunc getNumPoolTiers() (uint64, uint64, uint64) {\n\tvar tier1, tier2, tier3 uint64\n\n\tfor _, v := range poolTiers {\n\t\tswitch v.tier {\n\t\tcase 1:\n\t\t\ttier1++\n\t\tcase 2:\n\t\t\ttier2++\n\t\tcase 3:\n\t\t\ttier3++\n\t\tdefault:\n\t\t\tpanic(ufmt.Sprintf(\"[STAKER] reward_math.gno__getNumPoolTiers() || invalid tier(%d)\", v))\n\t\t}\n\t}\n\n\treturn tier1, tier2, tier3\n}\n\n// get reward ratio by staking duration height\nfunc getRewardRatio(height int64) uint64 {\n\tswitch {\n\tcase height \u003e= warmUp[100]:\n\t\treturn 100\n\tcase height \u003e= warmUp[70]:\n\t\treturn 70\n\tcase height \u003e= warmUp[50]:\n\t\treturn 50\n\tcase height \u003e= warmUp[30]:\n\t\treturn 30\n\tdefault:\n\t\treturn 0\n\t}\n}\n\nfunc getTierRatio(tier uint64) uint64 {\n\tif tier \u003c 1 || tier \u003e 3 {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] reward_math.gno__getTierRatio() || tier(%d) must be 1 ~ 3\", tier))\n\t}\n\n\tratio1, ratio2, ratio3 := listTierRatio()\n\tswitch tier {\n\tcase 1:\n\t\treturn ratio1 // default 50\n\tcase 2:\n\t\treturn ratio2 // default 30\n\tcase 3:\n\t\treturn ratio3 // default 20\n\tdefault:\n\t\tpanic(\"[STAKER] reward_math.gno__getTierRatio() || invalid ratio\")\n\t}\n}\n\n// return all ratio for each tier\nfunc listTierRatio() (uint64, uint64, uint64) {\n\t// basic\n\t// tier1 50%\n\t// tier2 30%\n\t// tier3 20%\n\n\t// since `float` type has determinisim issue, we use `int` instead\n\t// so instead of return 50%, we return 50\n\t// we'll divide by 100 later\n\n\tnumTier1, numTier2, numTier3 := getNumPoolTiers()\n\tif numTier1 \u003c= 0 {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] reward_math.gno__listTierRatio() || at least 1 numTier1 need(%d), [numTier2:(%d), numTier3:(%d)]\", numTier1, numTier2, numTier3))\n\t}\n\n\tif numTier2 == 0 \u0026\u0026 numTier3 == 0 { // only tier 1 exists\n\t\treturn 100, 0, 0\n\t} else if numTier2 == 0 \u0026\u0026 numTier3 \u003e= 1 { // tier 1 and 3 exists ( tier2 ratio goes to tier1 )\n\t\treturn 80, 0, 20\n\t} else if numTier2 \u003e= 1 \u0026\u0026 numTier3 == 0 { // tier 1 and 2 exists ( tier3 ratio goes to tier1 )\n\t\treturn 70, 30, 0\n\t} else if numTier2 \u003e= 1 \u0026\u0026 numTier3 \u003e= 1 { // all tiers exists\n\t\treturn 50, 30, 20\n\t} else {\n\t\tpanic(\"[STAKER] reward_math.gno__listTierRatio() || invalid tier ratio\")\n\t}\n}\n\nfunc getTiersAmount(amount uint64) (uint64, uint64, uint64) {\n\ttier1Ratio, tier2Ratio, tier3Ratio := listTierRatio()\n\n\ttier1Amount := (amount * tier1Ratio) / 100\n\ttier2Amount := (amount * tier2Ratio) / 100\n\ttier3Amount := (amount * tier3Ratio) / 100\n\n\treturn tier1Amount, tier2Amount, tier3Amount\n}\n"},{"name":"staker.gno","body":"package staker\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n\n\t\"gno.land/r/gnoswap/common\"\n\t\"gno.land/r/gnoswap/consts\"\n\n\t\"gno.land/r/gnoswap/gnft\"\n\t\"gno.land/r/gnoswap/gns\"\n\n\ten \"gno.land/r/gnoswap/emission\"\n\tpl \"gno.land/r/gnoswap/pool\"\n\tpn \"gno.land/r/gnoswap/position\"\n\n\ti256 \"gno.land/p/gnoswap/int256\"\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\nvar (\n\tpoolIncentives map[string][]string          = make(map[string][]string)          // poolPath =\u003e []incentiveId\n\tincentives     map[string]ExternalIncentive = make(map[string]ExternalIncentive) // incentiveId =\u003e ExternalIncentive\n\n\tdeposits  map[uint64]Deposit      = make(map[uint64]Deposit)      // tokenId =\u003e Deposit\n\tpoolTiers map[string]InternalTier = make(map[string]InternalTier) // poolPath -\u003e InternalTier\n\n\tlastCalculatedHeight int64\n\tlastGnsBalance       uint64\n\n\t// reward amount can be left due to warm up period\n\t// keep track of this amount\n\tleftGnsBalance      uint64\n\tleftExternalBalance map[string]uint64 = make(map[string]uint64) // tokenPath =\u003e amount\n)\n\nconst (\n\tTIMESTAMP_90DAYS  = 7776000\n\tTIMESTAMP_180DAYS = 15552000\n\tTIMESTAMP_365DAYS = 31536000\n\n\tMAX_UNIX_EPOCH_TIME = 253402300799 // 9999-12-31 23:59:59\n\n\tMUST_EXISTS_IN_TIER_1 = \"gno.land/r/demo/wugnot:gno.land/r/gnoswap/gns:3000\"\n)\n\nfunc init() {\n\t// init pool tiers\n\t// tier 1\n\t// ONLY GNOT:GNS 0.3%\n\tpoolTiers[MUST_EXISTS_IN_TIER_1] = InternalTier{\n\t\ttier:           1,\n\t\tstartTimestamp: time.Now().Unix(),\n\t}\n}\n\n// StakeToken stakes the lp token to the staker contract\n//\n// Panics if any of the following conditions are met:\n// - tokenId already staked\n// - tokenId has no liquidity\n// - tokenId is not owned by the caller or staker\nfunc StakeToken(tokenId uint64) (string, string, string) { // poolPath, token0Amount, token1Amount\n\ten.MintAndDistributeGns()\n\tCalcPoolPosition()\n\n\t// check whether tokenId already staked or not\n\t_, exist := deposits[tokenId]\n\tif exist {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] staker.gno__StakeToken() || tokenId(%d) already staked\", tokenId))\n\t}\n\n\t// if caller is owner\n\tcallerIsOwner := gnft.OwnerOf(tid(tokenId)) == std.GetOrigCaller()\n\t// stakerIsOwner\n\tstakerIsOwner := gnft.OwnerOf(tid(tokenId)) == GetOrigPkgAddr()\n\n\tif !(callerIsOwner || stakerIsOwner) {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] staker.gno__StakeToken() || Neither Caller(%s) or Staker(%s) is not owner of tokenId(%d)\", std.GetOrigCaller(), GetOrigPkgAddr(), tokenId))\n\t}\n\n\t// check pool path from tokenid\n\tpoolPath := pn.PositionGetPositionPoolKey(tokenId)\n\n\t// check tokenId has liquidity or not\n\tliquidity := pn.PositionGetPositionLiquidity(tokenId) // *u256.Uint\n\tif liquidity.Lte(u256.Zero()) {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] staker.gno__StakeToken() || tokenId(%d) has no liquidity\", tokenId))\n\t}\n\n\t// staked status\n\tdeposit := deposits[tokenId]\n\tdeposit.owner = std.GetOrigCaller() // NOT ACTUAL OWNER, MUST BE USER ALWAYS\n\tdeposit.numberOfStakes++\n\tdeposit.stakeTimestamp = time.Now().Unix()\n\tdeposit.stakeHeight = std.GetHeight()\n\tdeposit.targetPoolPath = poolPath\n\tdeposits[tokenId] = deposit\n\n\tif callerIsOwner { // if caller is owner, transfer NFT ownership to staker contract\n\t\ttransferDeposit(tokenId, GetOrigPkgAddr())\n\t} else if stakerIsOwner { // if staker is owner, approve NFT to caller (≈one click staking)\n\t\tgnft.Approve(a2u(std.GetOrigCaller()), tid(tokenId))\n\t}\n\n\ttoken0Amount, token1Amount := getTokenPairBalanceFromPosition(tokenId)\n\n\tstd.Emit(\n\t\t\"GNOSWAP\",\n\t\t\"m_callType\", callType(),\n\t\t\"m_origCaller\", origCaller(),\n\t\t\"m_prevRealm\", prevRealm(),\n\t\t\"p_tokenId\", uint64ToStr(tokenId),\n\t\t\"poolPath\", poolPath,\n\t\t\"amount0\", token0Amount,\n\t\t\"amount1\", token1Amount,\n\t)\n\n\treturn poolPath, token0Amount, token1Amount\n}\n\n// CollectReward collects staked reward from tokenId\n//\n// Panics if any of the following conditions are met:\n// - token is not staked\n// - caller is not owner of lp token\nfunc CollectReward(tokenId uint64) string { // poolPath\n\ten.MintAndDistributeGns()\n\tCalcPoolPosition()\n\n\tdeposit, exist := deposits[tokenId]\n\tif !exist {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] staker.gno__CollectReward() || tokenId(%d) not staked\", tokenId))\n\t}\n\n\tif std.PrevRealm().Addr() != deposit.owner {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] staker.gno__CollectReward() || only owner(%s) can collect reward from tokenId(%d), std.PrevRealm().Addr()(%s)\", deposit.owner, tokenId, std.PrevRealm().Addr()))\n\t}\n\n\tpoolPath := deposits[tokenId].targetPoolPath\n\n\tfor k, external := range positionExternal[tokenId] {\n\t\tincentive := incentives[external.incentiveId]\n\n\t\tstakedOrCreatedAt := max(deposit.stakeTimestamp, incentive.startTimestamp)\n\t\tnow := time.Now().Unix()\n\t\tif now \u003c stakedOrCreatedAt {\n\t\t\tcontinue\n\t\t}\n\n\t\t// external reward\n\t\tduration := now - stakedOrCreatedAt/consts.BLOCK_GENERATION_INTERVAL\n\t\tdurationRatio := getRewardRatio(duration)\n\n\t\tpoolPath := external.poolPath\n\t\ttokenPath := external.tokenPath\n\t\ttokenAmount := external.tokenAmount\n\n\t\tif tokenAmount == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tamountToGive := (tokenAmount * durationRatio) / 100\n\t\tamountLeft := tokenAmount - amountToGive\n\n\t\tleftExternalBalance[tokenPath] += amountLeft\n\n\t\ttoUser := handleUnstakingFee(tokenPath, amountToGive, false)\n\t\ttransferByRegisterCall(tokenPath, deposit.owner, toUser)\n\t\tif tokenPath == consts.WUGNOT_PATH { // unwrap if wugnot\n\t\t\tunwrap(toUser)\n\t\t}\n\n\t\tincentive.rewardLeft = new(u256.Uint).Sub(incentive.rewardLeft, u256.NewUint(tokenAmount))\n\t\tincentives[external.incentiveId] = incentive\n\n\t\texternal.tokenAmountClaimed += tokenAmount\n\t\texternal.tokenAmount = 0\n\t\tpositionExternal[tokenId][k] = external\n\n\t\tstd.Emit(\n\t\t\t\"GNOSWAP\",\n\t\t\t\"m_callType\", callType(),\n\t\t\t\"m_origCaller\", origCaller(),\n\t\t\t\"m_prevRealm\", prevRealm(),\n\t\t\t\"p_tokenId\", uint64ToStr(tokenId),\n\t\t\t\"poolPath\", poolPath,\n\t\t\t\"rewardToken\", tokenPath,\n\t\t\t\"recipient\", deposit.owner.String(),\n\t\t\t\"amount\", uint64ToStr(toUser),\n\t\t)\n\t}\n\n\t// INTERNAL gns emission\n\ttoGive := rewardMathComputeInternalRewardAmount(tokenId)\n\tif toGive == 0 {\n\t\treturn poolPath\n\t}\n\n\ttoUser := handleUnstakingFee(consts.GNS_PATH, toGive, true)\n\tgns.Transfer(a2u(deposit.owner), toUser)\n\n\tpositionGns[tokenId] = 0\n\n\t// emit internal reward tokens\n\tstd.Emit(\n\t\t\"GNOSWAP\",\n\t\t\"m_callType\", callType(),\n\t\t\"m_origCaller\", origCaller(),\n\t\t\"m_prevRealm\", prevRealm(),\n\t\t\"p_tokenId\", uint64ToStr(tokenId),\n\t\t\"poolPath\", poolPath,\n\t\t\"rewardToken\", consts.GNS_PATH,\n\t\t\"recipient\", deposit.owner.String(),\n\t\t\"amount\", uint64ToStr(toUser),\n\t)\n\n\tlastGnsBalance = gnsBalance(consts.STAKER_ADDR)\n\treturn poolPath\n}\n\n// UnstakeToken unstakes the lp token from the staker and collects all reward from tokenId\n//\n// Panics if any of the following conditions are met:\n// - token is not staked\nfunc UnstakeToken(tokenId uint64) (string, string, string) { // poolPath, token0Amount, token1Amount\n\ten.MintAndDistributeGns()\n\tCalcPoolPosition()\n\n\t// unstaked status\n\tdeposit, exist := deposits[tokenId]\n\tif !exist {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] staker.gno__UnstakeToken() || tokenId(%d) not staked\", tokenId))\n\t}\n\t// Claim All Rewards\n\tCollectReward(tokenId)\n\tdelete(positionGns, tokenId)\n\tdelete(deposits, tokenId)\n\n\t// transfer NFT ownership to origin owner\n\tgnft.TransferFrom(a2u(GetOrigPkgAddr()), a2u(deposit.owner), tid(tokenId))\n\n\tpoolPath := pn.PositionGetPositionPoolKey(tokenId)\n\ttoken0Amount, token1Amount := getTokenPairBalanceFromPosition(tokenId)\n\n\tstd.Emit(\n\t\t\"GNOSWAP\",\n\t\t\"m_callType\", callType(),\n\t\t\"m_origCaller\", origCaller(),\n\t\t\"m_prevRealm\", prevRealm(),\n\t\t\"p_tokenId\", uint64ToStr(tokenId),\n\t\t\"poolPath\", poolPath,\n\t\t\"from\", GetOrigPkgAddr().String(),\n\t\t\"to\", deposit.owner.String(),\n\t\t\"amount0\", token0Amount,\n\t\t\"amount1\", token1Amount,\n\t)\n\n\treturn poolPath, token0Amount, token1Amount\n}\n\n// CreateExternalIncentive creates an external incentive for the targetPoolPath\n//\n// Panics if any of the following conditions are met:\n// - startTimestamp is not in the future\n// - externalDuration is not 90, 180, or 365 days\n// - user doesn't have enough balance to provide as reward\nfunc CreateExternalIncentive(\n\ttargetPoolPath string,\n\trewardToken string, // token path should be registered\n\t_rewardAmount string,\n\tstartTimestamp int64,\n\tendTimestamp int64,\n) {\n\tif common.GetLimitCaller() {\n\t\tisUserCalled := std.PrevRealm().PkgPath() == \"\"\n\t\tif !isUserCalled {\n\t\t\tpanic(\"[STAKER] staker.gno__CreateExternalIncentive() || only user can call this function\")\n\t\t}\n\t}\n\n\t// check token can be used as reward\n\tisAllowedForExternalReward(targetPoolPath, rewardToken)\n\n\trewardAmount := u256.MustFromDecimal(_rewardAmount)\n\n\t// native ugnot check\n\tif rewardToken == consts.GNOT {\n\t\tsent := std.GetOrigSend()\n\t\tugnotSent := uint64(sent.AmountOf(\"ugnot\"))\n\n\t\tif ugnotSent != rewardAmount.Uint64() {\n\t\t\tpanic(ufmt.Sprintf(\"[STAKER] staker.gno__CreateExternalIncentive() || user(%s) sent ugnot(%d) amount not equal to rewardAmount(%d)\", std.GetOrigCaller(), ugnotSent, rewardAmount.Uint64()))\n\t\t}\n\n\t\twrap(ugnotSent)\n\n\t\trewardToken = consts.WUGNOT_PATH\n\t}\n\n\t// must be in seconds format, not milliseconds\n\t// must be at least +1 day midnight\n\t// must be midnight of the day\n\tcheckStartTime(startTimestamp)\n\n\t// endTimestamp cannot be later than 253402300799 (9999-12-31 23:59:59)\n\tif endTimestamp \u003e= MAX_UNIX_EPOCH_TIME {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] staker.gno__CreateExternalIncentive() || endTimestamp(%d) cannot be later than 253402300799 (9999-12-31 23:59:59)\", endTimestamp))\n\t}\n\n\texternalDuration := uint64(endTimestamp - startTimestamp)\n\tif !(externalDuration == TIMESTAMP_90DAYS || externalDuration == TIMESTAMP_180DAYS || externalDuration == TIMESTAMP_365DAYS) {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] staker.gno__CreateExternalIncentive() || externalDuration(%d) must be 90, 180, 365 days)\", externalDuration))\n\t}\n\n\tfromBalanceBefore := balanceOfByRegisterCall(rewardToken, std.GetOrigCaller())\n\n\tif fromBalanceBefore \u003c rewardAmount.Uint64() {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] staker.gno__CreateExternalIncentive() || user(%s) doesn't have enough amount balance(%d) to create incentive(%d)\", std.GetOrigCaller(), fromBalanceBefore, rewardAmount.Uint64()))\n\t}\n\n\tpoolRewardBalanceBefore := balanceOfByRegisterCall(rewardToken, GetOrigPkgAddr())\n\n\tincentiveId := incentiveIdCompute(std.GetOrigCaller(), targetPoolPath, rewardToken)\n\n\t// if same incentiveId exists =\u003e increase rewardTokenAmount\n\tfor _, v := range poolIncentives[targetPoolPath] {\n\t\tif v == incentiveId {\n\t\t\ttransferFromByRegisterCall(rewardToken, std.GetOrigCaller(), GetOrigPkgAddr(), rewardAmount.Uint64())\n\n\t\t\tincentive, ok := incentives[v]\n\t\t\tif !ok {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tincentive.rewardAmount = new(u256.Uint).Add(incentive.rewardAmount, rewardAmount)\n\t\t\tincentive.rewardLeft = new(u256.Uint).Add(incentive.rewardLeft, rewardAmount)\n\t\t\tincentives[v] = incentive\n\n\t\t\tstd.Emit(\n\t\t\t\t\"GNOSWAP\",\n\t\t\t\t\"m_callType\", callType(),\n\t\t\t\t\"m_origCaller\", origCaller(),\n\t\t\t\t\"m_prevRealm\", prevRealm(),\n\t\t\t\t\"p_poolPath\", targetPoolPath,\n\t\t\t\t\"p_rewardToken\", rewardToken,\n\t\t\t\t\"p_rewardAmount\", incentive.rewardAmount.ToString(),\n\t\t\t\t\"p_startTimestamp\", int64ToStr(startTimestamp),\n\t\t\t\t\"p_endTimestamp\", int64ToStr(endTimestamp),\n\t\t\t)\n\n\t\t\treturn\n\t\t}\n\t}\n\n\ttransferFromByRegisterCall(rewardToken, std.GetOrigCaller(), GetOrigPkgAddr(), rewardAmount.Uint64())\n\n\tpoolRewardBalanceAfter := balanceOfByRegisterCall(rewardToken, GetOrigPkgAddr())\n\tif !(poolRewardBalanceAfter-poolRewardBalanceBefore == rewardAmount.Uint64()) {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] staker.gno__CreateExternalIncentive() || pool reward balance not updated correctly(before:%d, added:%d, final:%d)\", poolRewardBalanceBefore, rewardAmount.Uint64(), poolRewardBalanceAfter))\n\t}\n\n\tincentives[incentiveId] = ExternalIncentive{\n\t\ttargetPoolPath: targetPoolPath,\n\t\trewardToken:    rewardToken,\n\t\trewardAmount:   rewardAmount,\n\t\trewardLeft:     rewardAmount,\n\t\tstartTimestamp: startTimestamp,\n\t\tendTimestamp:   endTimestamp,\n\t\trefundee:       std.GetOrigCaller(),\n\t}\n\n\tpoolIncentives[targetPoolPath] = append(poolIncentives[targetPoolPath], incentiveId)\n\n\tstd.Emit(\n\t\t\"GNOSWAP\",\n\t\t\"m_callType\", callType(),\n\t\t\"m_origCaller\", origCaller(),\n\t\t\"m_prevRealm\", prevRealm(),\n\t\t\"p_poolPath\", targetPoolPath,\n\t\t\"p_rewardToken\", rewardToken,\n\t\t\"p_rewardAmount\", _rewardAmount,\n\t\t\"p_startTimestamp\", int64ToStr(startTimestamp),\n\t\t\"p_endTimestamp\", int64ToStr(endTimestamp),\n\t)\n}\n\n// EndExternalIncentive ends the external incentive\n// Only refundee or admin can end incentive\n//\n// Panics if any of the following conditions are met:\n// - incentive expiration time is not over\n// - reward token amount is not enough to refund\nfunc EndExternalIncentive(_refundee, targetPoolPath, rewardToken string) {\n\trefundee := std.Address(_refundee)\n\n\tincentiveId := incentiveIdCompute(refundee, targetPoolPath, rewardToken)\n\n\tincentive, exist := incentives[incentiveId]\n\tif !exist {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] staker.gno__EndExternalIncentive() || cannot end non existent incentive(%s)\", incentiveId))\n\t}\n\n\tif time.Now().Unix() \u003c incentive.endTimestamp {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] staker.gno__EndExternalIncentive() || cannot end incentive before endTimestamp(%d), current(%d)\", incentive.endTimestamp, time.Now().Unix()))\n\t}\n\n\t// when incentive end time is over\n\t// admin or refundee can end incentive ( left amount will be refunded )\n\tcaller := std.PrevRealm().Addr()\n\tif caller != consts.GNOSWAP_ADMIN \u0026\u0026 caller != refundee {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] staker.gno__EndExternalIncentive() || only refundee(%s) or admin(%s) can end incentive\", refundee, consts.GNOSWAP_ADMIN))\n\t}\n\n\t// refundee can end incentive with refund\n\trefund := incentive.rewardLeft\n\trefundUint64 := refund.Uint64()\n\n\tpoolLeftExternalRewardAmount := balanceOfByRegisterCall(incentive.rewardToken, GetOrigPkgAddr())\n\n\tif poolLeftExternalRewardAmount \u003c refundUint64 {\n\t\trefundUint64 = poolLeftExternalRewardAmount\n\t}\n\n\ttransferByRegisterCall(incentive.rewardToken, incentive.refundee, refundUint64)\n\t// unwrap if wugnot\n\tif incentive.rewardToken == consts.WUGNOT_PATH {\n\t\tunwrap(refundUint64)\n\t}\n\n\tdelete(incentives, incentiveId)\n\tfor i, v := range poolIncentives[targetPoolPath] {\n\t\tif v == incentiveId {\n\t\t\tpoolIncentives[targetPoolPath] = append(poolIncentives[targetPoolPath][:i], poolIncentives[targetPoolPath][i+1:]...)\n\t\t}\n\t}\n\n\tstd.Emit(\n\t\t\"GNOSWAP\",\n\t\t\"m_callType\", callType(),\n\t\t\"m_origCaller\", origCaller(),\n\t\t\"m_prevRealm\", prevRealm(),\n\t\t\"p_poolPath\", targetPoolPath,\n\t\t\"p_rewardToken\", rewardToken,\n\t\t\"p_refundee\", _refundee,\n\t\t\"end_by\", incentive.refundee.String(),\n\t\t\"refund_amount\", refund.ToString(),\n\t)\n}\n\n// TransferLeftGnsEmission transfers left gns emission to fee address\n// Only admin or gov can transfer left gns emission\nfunc TransferLeftGnsEmission() {\n\tcaller := std.PrevRealm().Addr()\n\tif caller != consts.GNOSWAP_ADMIN \u0026\u0026 caller != consts.GOV_ADDR {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] staker.gno__TransfeLeftGnsEmission() || only admin(%s) or gov(%s) can transfer left gns emission\", consts.GNOSWAP_ADMIN, consts.GOV_ADDR))\n\t}\n\n\tstakerGns := gnsBalance(consts.STAKER_ADDR)\n\tif stakerGns \u003c leftGnsBalance {\n\t\tleftGnsBalance = stakerGns\n\t}\n\n\tgns.Transfer(a2u(consts.PROTOCOL_FEE_ADDR), leftGnsBalance)\n\tleftGnsBalance = 0\n}\n\nfunc checkStartTime(startTimestamp int64) {\n\t// must be in seconds format, not milliseconds\n\t// REF: https://stackoverflow.com/a/23982005\n\tnumStr := strconv.Itoa(int(startTimestamp))\n\tif len(numStr) \u003e= 13 {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] staker.gno__checkStartTime() || startTimestamp(%d) must be in seconds format, not milliseconds\", startTimestamp))\n\t}\n\n\t// must be at least +1 day midnight\n\ttomorrowMidnight := time.Now().AddDate(0, 0, 1).Truncate(24 * time.Hour).Unix()\n\tif startTimestamp \u003c tomorrowMidnight {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] staker.gno__checkStartTime() || startTimestamp(%d) must be at least +1 day midnight(%d)\", startTimestamp, tomorrowMidnight))\n\t}\n\n\t// must be midnight of the day\n\tstartTime := time.Unix(startTimestamp, 0)\n\thour, minute, second := startTime.Hour(), startTime.Minute(), startTime.Second()\n\n\tisMidnight := hour == 0 \u0026\u0026 minute == 0 \u0026\u0026 second == 0\n\tif !isMidnight {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] staker.gno__checkStartTime() || startTime(%d = %s) must be midnight of the day\", startTimestamp, startTime.String()))\n\t}\n}\n\nfunc transferDeposit(tokenId uint64, to std.Address) {\n\towner := gnft.OwnerOf(tid(tokenId))\n\tif std.GetOrigCaller() == to {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] staker.gno__transferDeposit() || only owner(%s) can transfer tokenId(%d), std.GetOrigCaller()(%s)\", owner, tokenId, std.GetOrigCaller()))\n\t}\n\n\t// transfer NFT ownership\n\tgnft.TransferFrom(a2u(owner), a2u(to), tid(tokenId))\n}\n\nfunc getTokenPairBalanceFromPosition(tokenId uint64) (string, string) {\n\tpoolKey := pn.PositionGetPositionPoolKey(tokenId)\n\n\tpool := pl.GetPoolFromPoolPath(poolKey)\n\tcurrentX96 := pool.PoolGetSlot0SqrtPriceX96()\n\tlowerX96 := common.TickMathGetSqrtRatioAtTick(pn.PositionGetPositionTickLower(tokenId))\n\tupperX96 := common.TickMathGetSqrtRatioAtTick(pn.PositionGetPositionTickUpper(tokenId))\n\n\ttoken0Balance, token1Balance := common.GetAmountsForLiquidity(\n\t\tcurrentX96,\n\t\tlowerX96,\n\t\tupperX96,\n\t\ti256.FromUint256(pn.PositionGetPositionLiquidity(tokenId)),\n\t)\n\n\tif token0Balance == \"\" {\n\t\ttoken0Balance = \"0\"\n\t}\n\tif token1Balance == \"\" {\n\t\ttoken1Balance = \"0\"\n\t}\n\n\treturn token0Balance, token1Balance\n}\n\nfunc gnsBalance(addr std.Address) uint64 {\n\treturn gns.BalanceOf(a2u(addr))\n}\n\nfunc isAllowedForExternalReward(poolPath, tokenPath string) {\n\ttoken0, token1, _ := poolPathDivide(poolPath)\n\n\tif tokenPath == token0 || tokenPath == token1 {\n\t\treturn\n\t}\n\n\tallowed := contains(allowedTokens, tokenPath)\n\tif allowed {\n\t\treturn\n\t}\n\n\tpanic(ufmt.Sprintf(\"[STAKER] staker.gno__isAllowedForExternalReward() || tokenPath(%s) is not allowed for external reward for poolPath(%s)\", tokenPath, poolPath))\n}\n"},{"name":"token_register.gno","body":"package staker\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/ufmt\"\n\tpusers \"gno.land/p/demo/users\"\n\n\t\"gno.land/r/gnoswap/consts\"\n)\n\ntype GRC20Interface interface {\n\tTransfer() func(to pusers.AddressOrName, amount uint64)\n\tTransferFrom() func(from, to pusers.AddressOrName, amount uint64)\n\tBalanceOf() func(owner pusers.AddressOrName) uint64\n\tApprove() func(spender pusers.AddressOrName, amount uint64)\n}\n\nvar (\n\tregistered = make(map[string]GRC20Interface)\n\tlocked     = false // mutex\n)\n\nfunc GetRegisteredTokens() []string {\n\ttokens := make([]string, 0, len(registered))\n\tfor k := range registered {\n\t\ttokens = append(tokens, k)\n\t}\n\treturn tokens\n}\n\nfunc RegisterGRC20Interface(pkgPath string, igrc20 GRC20Interface) {\n\tcaller := std.GetOrigCaller()\n\tif caller != consts.TOKEN_REGISTER {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] staker_register.gno__RegisterGRC20Interface() || unauthorized address(%s) to register\", caller.String()))\n\t}\n\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif found {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] staker_register.gno__RegisterGRC20Interface() || pkgPath(%s) already registered\", pkgPath))\n\t}\n\n\tregistered[pkgPath] = igrc20\n}\n\nfunc UnregisterGRC20Interface(pkgPath string) {\n\t// only admin can unregister\n\tcaller := std.GetOrigCaller()\n\tif caller != consts.TOKEN_REGISTER {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] staker_register.gno__UnregisterGRC20Interface() || unauthorized address(%s) to unregister\", caller.String()))\n\t}\n\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif found {\n\t\tdelete(registered, pkgPath)\n\t}\n}\n\nfunc transferByRegisterCall(pkgPath string, to std.Address, amount uint64) bool {\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif !found {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] staker_register.gno__transferByRegisterCall() || pkgPath(%s) not found\", pkgPath))\n\t}\n\n\tif !locked {\n\t\tlocked = true\n\t\tregistered[pkgPath].Transfer()(pusers.AddressOrName(to), amount)\n\n\t\tdefer func() {\n\t\t\tlocked = false\n\t\t}()\n\t} else {\n\t\tpanic(\"[POOl] staker_register.gno__transferByRegisterCall() || expected locked to be false\")\n\t}\n\treturn true\n}\n\nfunc transferFromByRegisterCall(pkgPath string, from, to std.Address, amount uint64) bool {\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif !found {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] staker_register.gno__transferFromByRegisterCall() || pkgPath(%s) not found\", pkgPath))\n\t}\n\n\tif !locked {\n\t\tlocked = true\n\t\tregistered[pkgPath].TransferFrom()(pusers.AddressOrName(from), pusers.AddressOrName(to), amount)\n\n\t\tdefer func() {\n\t\t\tlocked = false\n\t\t}()\n\t} else {\n\t\tpanic(\"[POOl] staker_register.gno__transferFromByRegisterCall() || expected locked to be false\")\n\t}\n\treturn true\n}\n\nfunc balanceOfByRegisterCall(pkgPath string, owner std.Address) uint64 {\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif !found {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] staker_register.gno__balanceOfByRegisterCall() || pkgPath(%s) not found\", pkgPath))\n\t}\n\n\tbalance := registered[pkgPath].BalanceOf()(pusers.AddressOrName(owner))\n\treturn balance\n}\n\nfunc approveByRegisterCall(pkgPath string, spender std.Address, amount uint64) bool {\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif !found {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] staker_register.gno__approveByRegisterCall() || pkgPath(%s) not found\", pkgPath))\n\t}\n\n\tregistered[pkgPath].Approve()(pusers.AddressOrName(spender), amount)\n\n\treturn true\n}\n\nfunc handleNative(pkgPath string) string {\n\tif pkgPath == consts.GNOT {\n\t\treturn consts.WRAPPED_WUGNOT\n\t}\n\n\treturn pkgPath\n}\n"},{"name":"type.gno","body":"package staker\n\nimport (\n\t\"std\"\n\n\tu256 \"gno.land/p/gnoswap/uint256\"\n)\n\ntype InternalTier struct {\n\ttier           uint64\n\tstartTimestamp int64\n}\n\ntype ExternalIncentive struct {\n\ttargetPoolPath string\n\trewardToken    string\n\trewardAmount   *u256.Uint\n\trewardLeft     *u256.Uint\n\tstartTimestamp int64\n\tendTimestamp   int64\n\trefundee       std.Address\n}\n\ntype Deposit struct {\n\towner          std.Address\n\tnumberOfStakes uint64\n\tstakeTimestamp int64\n\tstakeHeight    int64\n\ttargetPoolPath string\n}\n\ntype StakingRewards struct {\n\tTier1 uint8\n\tTier2 uint8\n\tTier3 uint8\n\tTier4 uint8\n}\n"},{"name":"utils.gno","body":"package staker\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc721\"\n\t\"gno.land/p/demo/ufmt\"\n\n\tpusers \"gno.land/p/demo/users\"\n)\n\nfunc poolPathAlign(poolPath string) string {\n\tres := strings.Split(poolPath, \":\")\n\tif len(res) != 3 {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] utils.gno__poolPathAlign() || invalid poolPath(%s)\", poolPath))\n\t}\n\n\tpToken0, pToken1, fee := res[0], res[1], res[2]\n\n\tif pToken0 \u003c pToken1 {\n\t\treturn ufmt.Sprintf(\"%s:%s:%s\", pToken0, pToken1, fee)\n\t}\n\n\treturn ufmt.Sprintf(\"%s:%s:%s\", pToken1, pToken0, fee)\n}\n\nfunc poolPathDivide(poolPath string) (string, string, string) {\n\tres := strings.Split(poolPath, \":\")\n\tif len(res) != 3 {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] utils.gno__poolPathDivide() || invalid poolPath(%s)\", poolPath))\n\t}\n\n\tpToken0, pToken1, fee := res[0], res[1], res[2]\n\treturn pToken0, pToken1, fee\n}\n\nfunc a2u(addr std.Address) pusers.AddressOrName {\n\treturn pusers.AddressOrName(addr)\n}\n\nfunc tid(tokenId interface{}) grc721.TokenID {\n\tif tokenId == nil {\n\t\tpanic(\"[STAKER] utils.gno__tid() || tokenId is nil\")\n\t}\n\n\tswitch tokenId.(type) {\n\tcase string:\n\t\treturn grc721.TokenID(tokenId.(string))\n\tcase int:\n\t\treturn grc721.TokenID(strconv.Itoa(tokenId.(int)))\n\tcase uint64:\n\t\treturn grc721.TokenID(strconv.Itoa(int(tokenId.(uint64))))\n\tcase grc721.TokenID:\n\t\treturn tokenId.(grc721.TokenID)\n\tdefault:\n\t\tpanic(\"[STAKER] utils.gno__tid() || unsupported tokenId type\")\n\t}\n}\n\nfunc max(x, y int64) int64 {\n\tif x \u003e y {\n\t\treturn x\n\t}\n\treturn y\n}\n\nfunc min(x, y uint64) uint64 {\n\tif x \u003c y {\n\t\treturn x\n\t}\n\treturn y\n}\n\nfunc uint8ToStr(i uint8) string {\n\treturn strconv.FormatInt(int64(i), 10)\n}\n\nfunc int32ToStr(i int32) string {\n\treturn strconv.FormatInt(int64(i), 10)\n}\n\nfunc int64ToStr(i int64) string {\n\treturn strconv.FormatInt(i, 10)\n}\n\nfunc uint64ToStr(i uint64) string {\n\treturn strconv.FormatInt(int64(i), 10)\n}\n\nfunc strToUint64(s string) uint64 {\n\ti, err := strconv.Atoi(s)\n\n\tif err != nil {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] utils.gno__strToUint64() || failed to convert string(%s) to uint64\", s))\n\t}\n\n\treturn uint64(i)\n}\n\nfunc boolToStr(b bool) string {\n\tif b {\n\t\treturn \"true\"\n\t}\n\n\treturn \"false\"\n}\n\nfunc origCaller() string {\n\treturn std.GetOrigCaller().String()\n}\n\nfunc prevRealm() string {\n\treturn std.PrevRealm().PkgPath()\n}\n\nfunc callType() string {\n\tif prevRealm() == \"\" {\n\t\treturn \"DIRECT\"\n\t}\n\n\treturn \"INDIRECT\"\n}\n\nfunc contains(slice []string, item string) bool {\n\tfor _, element := range slice {\n\t\tif element == item {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n"},{"name":"warm_up.gno","body":"package staker\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar warmUp = make(map[int64]int64) // map[percent]block\n\nfunc init() {\n\t// warmUp[100] = 1296001 // 30d ~\n\t// warmUp[70] = 432001   // 10d ~ 30d\n\t// warmUp[50] = 216001   // 5d ~ 10d\n\t// warmUp[30] = 1        // ~ 5d\n\n\twarmUp[100] = 901 // 30m ~\n\twarmUp[70] = 301  // 10m ~ 30m\n\twarmUp[50] = 151  // 5m ~ 10m\n\twarmUp[30] = 1    // ~ 5m\n}\n\nfunc GetWarmUp(percent int64) int64 {\n\tvalue, exist := warmUp[percent]\n\tif !exist {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] reward_math_warm_up.gno__GetWarmUp() || percent(%d) must be 30, 50, 70, 100\", percent))\n\t}\n\n\treturn value\n}\n\nfunc SetWarmUp(percent int64, block int64) {\n\tif _, exist := warmUp[percent]; !exist {\n\t\tpanic(ufmt.Sprintf(\"[STAKER] reward_math_warm_up.gno__SetWarmUp() || percent(%d) must be 30, 50, 70, 100\", percent))\n\t}\n\n\tcaller := std.PrevRealm().Addr()\n\tif caller != consts.GNOSWAP_ADMIN \u0026\u0026 caller != consts.GOV_ADDR {\n\t\tpanic(\n\t\t\tufmt.Sprintf(\n\t\t\t\t\"[STAKER] reward_math_warm_up.gno__SetWarmUp() || only admin(%s) or governance(%s) can set warm up period, called from %s\",\n\t\t\t\tconsts.GNOSWAP_ADMIN,\n\t\t\t\tconsts.GOV_ADDR,\n\t\t\t\tcaller,\n\t\t\t),\n\t\t)\n\t}\n\n\twarmUp[percent] = block\n}\n"},{"name":"wrap_unwrap.gno","body":"package staker\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/demo/wugnot\"\n\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/gnoswap/consts\"\n)\n\nfunc wrap(ugnotAmount uint64) {\n\tif ugnotAmount \u003c= 0 {\n\t\tpanic(ufmt.Sprintf(\"cannot wrap 0 ugnot\"))\n\t}\n\n\tif ugnotAmount \u003c consts.UGNOT_MINT_DEPOSIT_TO_WRAP {\n\t\tpanic(ufmt.Sprintf(\"Deposit below minimum: %d/%d ugnot.\", ugnotAmount, consts.UGNOT_MINT_DEPOSIT_TO_WRAP))\n\t}\n\n\t// WRAP IT\n\twugnotAddr := std.DerivePkgAddr(consts.WRAPPED_WUGNOT)\n\tbanker := std.GetBanker(std.BankerTypeRealmSend)\n\tbanker.SendCoins(consts.STAKER_ADDR, wugnotAddr, std.Coins{{\"ugnot\", int64(ugnotAmount)}})\n\twugnot.Deposit() // STAKER HAS WUGNOT\n\n\t// SEND WUGNOT: STAKER -\u003e USER\n\twugnot.Transfer(a2u(std.GetOrigCaller()), ugnotAmount)\n}\n\nfunc unwrap(wugnotAmount uint64) {\n\tif wugnotAmount == 0 {\n\t\treturn\n\t}\n\n\t// SEND WUGNOT: USER -\u003e STAKER\n\twugnot.TransferFrom(a2u(std.GetOrigCaller()), a2u(consts.STAKER_ADDR), wugnotAmount)\n\n\t// UNWRAP IT\n\twugnot.Withdraw(wugnotAmount)\n\n\t// SEND GNOT: STAKER -\u003e USER\n\tbanker := std.GetBanker(std.BankerTypeRealmSend)\n\tbanker.SendCoins(consts.STAKER_ADDR, std.GetOrigCaller(), std.Coins{{\"ugnot\", int64(wugnotAmount)}})\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"ycqIhG0Ujmyst+BNRTwBJ9SoEr76HN0jFh4xz3zWXakKwJCHko4a85EesHZ+mqt1lteXGhFO+MrlL5WndJGDOg=="}],"memo":""},"blockNum":"147642"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","package":{"name":"community_pool","path":"gno.land/r/gnoswap/community_pool","files":[{"name":"__TEST_community_pool_test.gno","body":"package community_pool\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\n\t\"gno.land/r/gnoswap/gns\"\n)\n\nfunc TestTransferGnsNoPermission(t *testing.T) {\n\tdummy := testutils.TestAddress(\"dummy\")\n\tdummyRealm := std.NewUserRealm(dummy)\n\n\tstd.TestSetRealm(dummyRealm)\n\tshouldPanicWithMsg(\n\t\tt,\n\t\tfunc() {\n\t\t\tTransferGns(dummy, 1000)\n\t\t},\n\t\t\"[COMMUNITY_POOL] community_pool.gno__TransferGns() || only admin(g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c) or governance(g1egdt2l7xjcrm6qjwyd3g60z6e9cnr75pmcuasc) can set transfer gns, called from g1v36k6mteta047h6lta047h6lta047h6lz7gmv8\",\n\t)\n}\n\nfunc TestTransferGns(t *testing.T) {\n\tgsaRealm := std.NewUserRealm(consts.GNOSWAP_ADMIN)\n\tstd.TestSetOrigCaller(consts.GNOSWAP_ADMIN)\n\tstd.TestSetRealm(gsaRealm)\n\n\tgns.Transfer(a2u(consts.COMMUNITY_POOL_ADDR), 1000)\n\tshouldEQ(t, gns.BalanceOf(a2u(consts.COMMUNITY_POOL_ADDR)), 1000)\n\n\tsendTarget := testutils.TestAddress(\"sendTarget\")\n\tTransferGns(sendTarget, 900)\n\tshouldEQ(t, gns.BalanceOf(a2u(consts.COMMUNITY_POOL_ADDR)), 100)\n\tshouldEQ(t, gns.BalanceOf(a2u(sendTarget)), 900)\n}\n\nfunc shouldPanicWithMsg(t *testing.T, f func(), msg string) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t} else {\n\t\t\tif r != msg {\n\t\t\t\tt.Errorf(\"excepted panic(%v), got(%v)\", msg, r)\n\t\t\t}\n\t\t}\n\t}()\n\tf()\n}\n\nfunc shouldEQ(t *testing.T, got, expected interface{}) {\n\tif got != expected {\n\t\tt.Errorf(\"got %v, expected %v\", got, expected)\n\t}\n}\n"},{"name":"community_pool.gno","body":"package community_pool\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/ufmt\"\n\tpusers \"gno.land/p/demo/users\"\n\n\t\"gno.land/r/gnoswap/consts\"\n)\n\nfunc TransferToken(pkgPath string, to std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif caller != consts.GNOSWAP_ADMIN \u0026\u0026 caller != consts.GOV_ADDR {\n\t\tpanic(\n\t\t\tufmt.Sprintf(\n\t\t\t\t\"only admin(%s) or governance(%s) can transfer community pool's balance, called from %s\",\n\t\t\t\tconsts.GNOSWAP_ADMIN,\n\t\t\t\tconsts.GOV_ADDR,\n\t\t\t\tcaller,\n\t\t\t),\n\t\t)\n\t}\n\n\t_, found := registered[pkgPath]\n\tif !found {\n\t\tpanic(ufmt.Sprintf(\"[COMMUNITY_POOL] community_pool.gno__TransferToken() || pkgPath(%s) not registered\", pkgPath))\n\t}\n\n\tregistered[pkgPath].Transfer()(a2u(to), amount)\n}\n\nfunc a2u(addr std.Address) pusers.AddressOrName {\n\treturn pusers.AddressOrName(addr)\n}\n"},{"name":"token_register.gno","body":"package community_pool\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/ufmt\"\n\tpusers \"gno.land/p/demo/users\"\n\n\t\"gno.land/r/gnoswap/consts\"\n)\n\ntype GRC20Interface interface {\n\tTransfer() func(to pusers.AddressOrName, amount uint64)\n\tTransferFrom() func(from, to pusers.AddressOrName, amount uint64)\n\tBalanceOf() func(owner pusers.AddressOrName) uint64\n\tApprove() func(spender pusers.AddressOrName, amount uint64)\n}\n\nvar (\n\tregistered = make(map[string]GRC20Interface)\n\tlocked     = false // mutex\n)\n\nfunc GetRegisteredTokens() []string {\n\ttokens := make([]string, 0, len(registered))\n\tfor k := range registered {\n\t\ttokens = append(tokens, k)\n\t}\n\treturn tokens\n}\n\nfunc RegisterGRC20Interface(pkgPath string, igrc20 GRC20Interface) {\n\tcaller := std.GetOrigCaller()\n\tif caller != consts.TOKEN_REGISTER {\n\t\tpanic(ufmt.Sprintf(\"[COMMUNITY_POOL] token_register.gno__RegisterGRC20Interface() || unauthorized address(%s) to register\", caller.String()))\n\t}\n\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif found {\n\t\tpanic(ufmt.Sprintf(\"[COMMUNITY_POOL] token_register.gno__RegisterGRC20Interface() || pkgPath(%s) already registered\", pkgPath))\n\t}\n\n\tregistered[pkgPath] = igrc20\n}\n\nfunc UnregisterGRC20Interface(pkgPath string) {\n\t// only admin can unregister\n\tcaller := std.GetOrigCaller()\n\tif caller != consts.TOKEN_REGISTER {\n\t\tpanic(ufmt.Sprintf(\"[COMMUNITY_POOL] token_register.gno__UnregisterGRC20Interface() || unauthorized address(%s) to unregister\", caller.String()))\n\t}\n\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif found {\n\t\tdelete(registered, pkgPath)\n\t}\n}\n\nfunc transferByRegisterCall(pkgPath string, to std.Address, amount uint64) bool {\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif !found {\n\t\tpanic(ufmt.Sprintf(\"[COMMUNITY_POOL] token_register.gno__transferByRegisterCall() || pkgPath(%s) not found\", pkgPath))\n\t}\n\n\tif !locked {\n\t\tlocked = true\n\t\tregistered[pkgPath].Transfer()(pusers.AddressOrName(to), amount)\n\n\t\tdefer func() {\n\t\t\tlocked = false\n\t\t}()\n\t} else {\n\t\tpanic(\"[COMMUNITY_POOL] token_register.gno__transferByRegisterCall() || expected locked to be false\")\n\t}\n\treturn true\n}\n\nfunc transferFromByRegisterCall(pkgPath string, from, to std.Address, amount uint64) bool {\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif !found {\n\t\tpanic(ufmt.Sprintf(\"[COMMUNITY_POOL] token_register.gno__transferFromByRegisterCall() || pkgPath(%s) not found\", pkgPath))\n\t}\n\n\tif !locked {\n\t\tlocked = true\n\t\tregistered[pkgPath].TransferFrom()(pusers.AddressOrName(from), pusers.AddressOrName(to), amount)\n\n\t\tdefer func() {\n\t\t\tlocked = false\n\t\t}()\n\t} else {\n\t\tpanic(\"[POOl] token_register.gno__transferFromByRegisterCall() || expected locked to be false\")\n\t}\n\treturn true\n}\n\nfunc balanceOfByRegisterCall(pkgPath string, owner std.Address) uint64 {\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif !found {\n\t\tpanic(ufmt.Sprintf(\"[COMMUNITY_POOL] token_register.gno__balanceOfByRegisterCall() || pkgPath(%s) not found\", pkgPath))\n\t}\n\n\tbalance := registered[pkgPath].BalanceOf()(pusers.AddressOrName(owner))\n\treturn balance\n}\n\nfunc approveByRegisterCall(pkgPath string, spender std.Address, amount uint64) bool {\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif !found {\n\t\tpanic(ufmt.Sprintf(\"[COMMUNITY_POOL] token_register.gno__approveByRegisterCall() || pkgPath(%s) not found\", pkgPath))\n\t}\n\n\tregistered[pkgPath].Approve()(pusers.AddressOrName(spender), amount)\n\n\treturn true\n}\n\nfunc handleNative(pkgPath string) string {\n\tif pkgPath == consts.GNOT {\n\t\treturn consts.WRAPPED_WUGNOT\n\t}\n\n\treturn pkgPath\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"LYs7EiTTi+n8a3VM5eIugsrMj1YSXoPfqgvX2PC8SYUlFN0dSeCytgdbAs+20xoFsHNLTOvv4f6TWhfKyxpFaw=="}],"memo":""},"blockNum":"147644"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","package":{"name":"protocol_fee","path":"gno.land/r/gnoswap/protocol_fee","files":[{"name":"__TEST_0_INIT_TOKEN_REGISTER_test.gno","body":"package protocol_fee\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/onbloc/foo\"\n\n\t\"gno.land/r/onbloc/bar\"\n\n\t\"gno.land/r/onbloc/baz\"\n\n\t\"gno.land/r/onbloc/qux\"\n\n\t\"gno.land/r/demo/wugnot\"\n\n\t\"gno.land/r/onbloc/obl\"\n\n\t\"gno.land/r/gnoswap/gns\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\n\tpusers \"gno.land/p/demo/users\"\n)\n\ntype FooToken struct{}\n\nfunc (FooToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn foo.Transfer\n}\nfunc (FooToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn foo.TransferFrom\n}\nfunc (FooToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn foo.BalanceOf\n}\nfunc (FooToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn foo.Approve\n}\n\ntype BarToken struct{}\n\nfunc (BarToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn bar.Transfer\n}\nfunc (BarToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn bar.TransferFrom\n}\nfunc (BarToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn bar.BalanceOf\n}\nfunc (BarToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn bar.Approve\n}\n\ntype BazToken struct{}\n\nfunc (BazToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn baz.Transfer\n}\nfunc (BazToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn baz.TransferFrom\n}\nfunc (BazToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn baz.BalanceOf\n}\nfunc (BazToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn baz.Approve\n}\n\ntype QuxToken struct{}\n\nfunc (QuxToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn qux.Transfer\n}\nfunc (QuxToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn qux.TransferFrom\n}\nfunc (QuxToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn qux.BalanceOf\n}\nfunc (QuxToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn qux.Approve\n}\n\ntype WugnotToken struct{}\n\nfunc (WugnotToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn wugnot.Transfer\n}\nfunc (WugnotToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn wugnot.TransferFrom\n}\nfunc (WugnotToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn wugnot.BalanceOf\n}\nfunc (WugnotToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn wugnot.Approve\n}\n\ntype OBLToken struct{}\n\nfunc (OBLToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn obl.Transfer\n}\nfunc (OBLToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn obl.TransferFrom\n}\nfunc (OBLToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn obl.BalanceOf\n}\nfunc (OBLToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn obl.Approve\n}\n\ntype GNSToken struct{}\n\nfunc (GNSToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn gns.Transfer\n}\n\nfunc (GNSToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn gns.TransferFrom\n}\n\nfunc (GNSToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn gns.BalanceOf\n}\n\nfunc (GNSToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn gns.Approve\n}\n\nfunc init() {\n\tstd.TestSetOrigCaller(consts.TOKEN_REGISTER)\n\n\t// PROTOCOL_FEE\n\tRegisterGRC20Interface(\"gno.land/r/onbloc/bar\", BarToken{})\n\tRegisterGRC20Interface(\"gno.land/r/onbloc/foo\", FooToken{})\n\tRegisterGRC20Interface(\"gno.land/r/onbloc/baz\", BazToken{})\n\tRegisterGRC20Interface(\"gno.land/r/onbloc/qux\", QuxToken{})\n\tRegisterGRC20Interface(\"gno.land/r/demo/wugnot\", WugnotToken{})\n\tRegisterGRC20Interface(\"gno.land/r/onbloc/obl\", OBLToken{})\n\tRegisterGRC20Interface(\"gno.land/r/gnoswap/gns\", GNSToken{})\n}\n"},{"name":"__TEST_0_INIT_VARIABLE_AND_HELPER_test.gno","body":"package protocol_fee\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/r/gnoswap/consts\"\n)\n\nvar (\n\tgsa std.Address = consts.GNOSWAP_ADMIN\n\n\tfooPath string = \"gno.land/r/onbloc/foo\"\n\tbarPath string = \"gno.land/r/onbloc/bar\"\n\tbazPath string = \"gno.land/r/onbloc/baz\"\n\tquxPath string = \"gno.land/r/onbloc/qux\"\n\n\toblPath string = \"gno.land/r/onbloc/obl\"\n\t// wugnotPath string = \"gno.land/r/demo/wugnot\" // from consts\n\t// gnsPath string = \"gno.land/r/gnoswap/gns\" // from consts\n\n\tfee100  uint32 = 100\n\tfee500  uint32 = 500\n\tfee3000 uint32 = 3000\n\n\tmax_timeout int64 = 9999999999\n)\n\n// Realms to mock frames\nvar (\n\tgsaRealm = std.NewUserRealm(gsa)\n\n\tposRealm = std.NewCodeRealm(consts.POSITION_PATH)\n\trouRealm = std.NewCodeRealm(consts.ROUTER_PATH)\n\tstkRealm = std.NewCodeRealm(consts.STAKER_PATH)\n)\n\n/* HELPER */\nfunc ugnotBalanceOf(addr std.Address) uint64 {\n\ttestBanker := std.GetBanker(std.BankerTypeRealmIssue)\n\n\tcoins := testBanker.GetCoins(addr)\n\tif len(coins) == 0 {\n\t\treturn 0\n\t}\n\n\treturn uint64(coins.AmountOf(\"ugnot\"))\n}\n\nfunc shouldEQ(t *testing.T, got, expected interface{}) {\n\tif got != expected {\n\t\tt.Errorf(\"got %v, expected %v\", got, expected)\n\t}\n}\n\nfunc shouldNEQ(t *testing.T, got, expected interface{}) {\n\tif got == expected {\n\t\tt.Errorf(\"got %v, didn't expected %v\", got, expected)\n\t}\n}\n\nfunc shouldPanic(t *testing.T, f func()) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"expected panic\")\n\t\t}\n\t}()\n\tf()\n}\n\nfunc shouldPanicWithMsg(t *testing.T, f func(), msg string) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t} else {\n\t\t\tif r != msg {\n\t\t\t\tt.Errorf(\"excepted panic(%v), got(%v)\", msg, r)\n\t\t\t}\n\t\t}\n\t}()\n\tf()\n}\n"},{"name":"protocol_fee.gno","body":"package protocol_fee\n\nimport (\n\t\"std\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar xGnsPctBps uint64 = 5000 // 50%\n\nfunc DistributeProtocolFee() {\n\tcaller := std.PrevRealm().Addr()\n\tif caller != consts.GNOSWAP_ADMIN \u0026\u0026 caller != consts.GOV_ADDR {\n\t\tpanic(\n\t\t\tufmt.Sprintf(\n\t\t\t\t\"only admin(%s) or governance(%s) can distribute protocol fee, called from %s\",\n\t\t\t\tconsts.GNOSWAP_ADMIN,\n\t\t\t\tconsts.GOV_ADDR,\n\t\t\t\tcaller,\n\t\t\t),\n\t\t)\n\t}\n\n\ttokens := GetRegisteredTokens()\n\tfor _, token := range tokens {\n\t\t// default distribute protocol fee percent\n\t\t// xGNS 50%\n\t\t// devOps 50%\n\t\t// ...\n\n\t\tbalance := balanceOfByRegisterCall(token, consts.PROTOCOL_FEE_ADDR)\n\t\tif balance \u003e 0 {\n\t\t\ttoDevOps := balance * 5000 / 10000\n\t\t\ttoXGns := balance - toDevOps\n\n\t\t\ttransferByRegisterCall(token, consts.DEV_OPS, toDevOps)\n\t\t\ttransferByRegisterCall(token, consts.X_GNS_ADDR, toXGns)\n\t\t}\n\t}\n}\n\nfunc ChagneXGnsDistributePercent(fee uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif caller != consts.GNOSWAP_ADMIN \u0026\u0026 caller != consts.GOV_ADDR {\n\t\tpanic(\n\t\t\tufmt.Sprintf(\n\t\t\t\t\"only admin(%s) or governance(%s) can change protocol fee distribution percent, called from %s\",\n\t\t\t\tconsts.GNOSWAP_ADMIN,\n\t\t\t\tconsts.GOV_ADDR,\n\t\t\t\tcaller,\n\t\t\t),\n\t\t)\n\t}\n\n\tif fee \u003e 10000 {\n\t\tpanic(\"fee should be less than 10000\")\n\t}\n\n\txGnsPctBps = fee\n}\n\nfunc GetXGnsDistributePercent() uint64 {\n\treturn xGnsPctBps\n}\n"},{"name":"protocol_fee_test.gno","body":"package protocol_fee\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/r/onbloc/bar\"\n\t\"gno.land/r/onbloc/qux\"\n\n\tpusers \"gno.land/p/demo/users\"\n\n\t\"gno.land/r/gnoswap/consts\"\n\n\t\"gno.land/p/demo/testutils\"\n)\n\nfunc TestDistributeProtocolFee(t *testing.T) {\n\t// admin \u003e protocol_fee\n\t// send qux, bar for testing\n\tstd.TestSetRealm(gsaRealm)\n\tbar.Transfer(a2u(consts.PROTOCOL_FEE_ADDR), 1000)\n\tqux.Transfer(a2u(consts.PROTOCOL_FEE_ADDR), 1000)\n\n\tshouldEQ(t, bar.BalanceOf(a2u(consts.PROTOCOL_FEE_ADDR)), 1000)\n\tshouldEQ(t, bar.BalanceOf(a2u(consts.DEV_OPS)), 0)\n\tshouldEQ(t, bar.BalanceOf(a2u(consts.X_GNS_ADDR)), 0)\n\n\tshouldEQ(t, qux.BalanceOf(a2u(consts.PROTOCOL_FEE_ADDR)), 1000)\n\tshouldEQ(t, qux.BalanceOf(a2u(consts.DEV_OPS)), 0)\n\tshouldEQ(t, qux.BalanceOf(a2u(consts.X_GNS_ADDR)), 0)\n\n\tDistributeProtocolFee()\n\n\tshouldEQ(t, bar.BalanceOf(a2u(consts.PROTOCOL_FEE_ADDR)), 0)\n\tshouldEQ(t, bar.BalanceOf(a2u(consts.DEV_OPS)), 500)\n\tshouldEQ(t, bar.BalanceOf(a2u(consts.X_GNS_ADDR)), 500)\n\n\tshouldEQ(t, qux.BalanceOf(a2u(consts.PROTOCOL_FEE_ADDR)), 0)\n\tshouldEQ(t, qux.BalanceOf(a2u(consts.DEV_OPS)), 500)\n\tshouldEQ(t, qux.BalanceOf(a2u(consts.X_GNS_ADDR)), 500)\n}\n\nfunc TestDistributeProtocolFeeNoPermission(t *testing.T) {\n\tdummy := testutils.TestAddress(\"dummy\")\n\tdummyRealm := std.NewUserRealm(dummy)\n\tstd.TestSetRealm(dummyRealm)\n\n\tshouldPanicWithMsg(\n\t\tt,\n\t\tfunc() {\n\t\t\tDistributeProtocolFee()\n\t\t},\n\t\t\"only admin(g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c) or governance(g1egdt2l7xjcrm6qjwyd3g60z6e9cnr75pmcuasc) can distribute protocol fee, called from g1v36k6mteta047h6lta047h6lta047h6lz7gmv8\",\n\t)\n}\n\nfunc TestChagneXGnsDistributePercentNoPermission(t *testing.T) {\n\tdummy := testutils.TestAddress(\"dummy\")\n\tdummyRealm := std.NewUserRealm(dummy)\n\tstd.TestSetRealm(dummyRealm)\n\n\tshouldPanicWithMsg(\n\t\tt,\n\t\tfunc() {\n\t\t\tChagneXGnsDistributePercent(123)\n\t\t},\n\t\t\"only admin(g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c) or governance(g1egdt2l7xjcrm6qjwyd3g60z6e9cnr75pmcuasc) can change protocol fee distribution percent, called from g1v36k6mteta047h6lta047h6lta047h6lz7gmv8\",\n\t)\n}\n\nfunc TestChagneXGnsDistributePercentInvalidFee(t *testing.T) {\n\tstd.TestSetRealm(gsaRealm)\n\n\tshouldPanicWithMsg(\n\t\tt,\n\t\tfunc() {\n\t\t\tChagneXGnsDistributePercent(100001)\n\t\t},\n\t\t\"fee should be less than 10000\",\n\t)\n}\n\nfunc TestChagneXGnsDistributePercent(t *testing.T) {\n\tstd.TestSetRealm(gsaRealm)\n\n\tshouldEQ(t, GetXGnsDistributePercent(), 5000)\n\n\tChagneXGnsDistributePercent(123)\n\n\tshouldEQ(t, GetXGnsDistributePercent(), 123)\n}\n\nfunc a2u(addr std.Address) pusers.AddressOrName {\n\treturn pusers.AddressOrName(addr)\n}\n\nfunc shouldPanicWithMsg(t *testing.T, f func(), msg string) {\n\tdefer func() {\n\t\tif r := recover(); r == nil {\n\t\t\tt.Errorf(\"The code did not panic\")\n\t\t} else {\n\t\t\tif r != msg {\n\t\t\t\tt.Errorf(\"excepted panic(%v), got(%v)\", msg, r)\n\t\t\t}\n\t\t}\n\t}()\n\tf()\n}\n"},{"name":"token_register.gno","body":"package protocol_fee\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/ufmt\"\n\tpusers \"gno.land/p/demo/users\"\n\n\t\"gno.land/r/gnoswap/consts\"\n)\n\ntype GRC20Interface interface {\n\tTransfer() func(to pusers.AddressOrName, amount uint64)\n\tTransferFrom() func(from, to pusers.AddressOrName, amount uint64)\n\tBalanceOf() func(owner pusers.AddressOrName) uint64\n\tApprove() func(spender pusers.AddressOrName, amount uint64)\n}\n\nvar (\n\tregistered = make(map[string]GRC20Interface)\n\tlocked     = false // mutex\n)\n\nfunc GetRegisteredTokens() []string {\n\ttokens := make([]string, 0, len(registered))\n\tfor k := range registered {\n\t\ttokens = append(tokens, k)\n\t}\n\treturn tokens\n}\n\nfunc RegisterGRC20Interface(pkgPath string, igrc20 GRC20Interface) {\n\tcaller := std.GetOrigCaller()\n\tif caller != consts.TOKEN_REGISTER {\n\t\tpanic(ufmt.Sprintf(\"[PROTOCOL_FEE] token_register.gno__RegisterGRC20Interface() || unauthorized address(%s) to register\", caller.String()))\n\t}\n\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif found {\n\t\tpanic(ufmt.Sprintf(\"[PROTOCOL_FEE] token_register.gno__RegisterGRC20Interface() || pkgPath(%s) already registered\", pkgPath))\n\t}\n\n\tregistered[pkgPath] = igrc20\n}\n\nfunc UnregisterGRC20Interface(pkgPath string) {\n\t// only admin can unregister\n\tcaller := std.GetOrigCaller()\n\tif caller != consts.TOKEN_REGISTER {\n\t\tpanic(ufmt.Sprintf(\"[PROTOCOL_FEE] token_register.gno__UnregisterGRC20Interface() || unauthorized address(%s) to unregister\", caller.String()))\n\t}\n\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif found {\n\t\tdelete(registered, pkgPath)\n\t}\n}\n\nfunc transferByRegisterCall(pkgPath string, to std.Address, amount uint64) bool {\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif !found {\n\t\tpanic(ufmt.Sprintf(\"[PROTOCOL_FEE] token_register.gno__transferByRegisterCall() || pkgPath(%s) not found\", pkgPath))\n\t}\n\n\tif !locked {\n\t\tlocked = true\n\t\tregistered[pkgPath].Transfer()(pusers.AddressOrName(to), amount)\n\n\t\tdefer func() {\n\t\t\tlocked = false\n\t\t}()\n\t} else {\n\t\tpanic(\"[PROTOCOL_FEE] token_register.gno__transferByRegisterCall() || expected locked to be false\")\n\t}\n\treturn true\n}\n\nfunc transferFromByRegisterCall(pkgPath string, from, to std.Address, amount uint64) bool {\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif !found {\n\t\tpanic(ufmt.Sprintf(\"[PROTOCOL_FEE] token_register.gno__transferFromByRegisterCall() || pkgPath(%s) not found\", pkgPath))\n\t}\n\n\tif !locked {\n\t\tlocked = true\n\t\tregistered[pkgPath].TransferFrom()(pusers.AddressOrName(from), pusers.AddressOrName(to), amount)\n\n\t\tdefer func() {\n\t\t\tlocked = false\n\t\t}()\n\t} else {\n\t\tpanic(\"[POOl] token_register.gno__transferFromByRegisterCall() || expected locked to be false\")\n\t}\n\treturn true\n}\n\nfunc balanceOfByRegisterCall(pkgPath string, owner std.Address) uint64 {\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif !found {\n\t\tpanic(ufmt.Sprintf(\"[PROTOCOL_FEE] token_register.gno__balanceOfByRegisterCall() || pkgPath(%s) not found\", pkgPath))\n\t}\n\n\tbalance := registered[pkgPath].BalanceOf()(pusers.AddressOrName(owner))\n\treturn balance\n}\n\nfunc approveByRegisterCall(pkgPath string, spender std.Address, amount uint64) bool {\n\tpkgPath = handleNative(pkgPath)\n\n\t_, found := registered[pkgPath]\n\tif !found {\n\t\tpanic(ufmt.Sprintf(\"[PROTOCOL_FEE] token_register.gno__approveByRegisterCall() || pkgPath(%s) not found\", pkgPath))\n\t}\n\n\tregistered[pkgPath].Approve()(pusers.AddressOrName(spender), amount)\n\n\treturn true\n}\n\nfunc handleNative(pkgPath string) string {\n\tif pkgPath == consts.GNOT {\n\t\treturn consts.WRAPPED_WUGNOT\n\t}\n\n\treturn pkgPath\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"412FNFecHKAVcfu/47eqDePiOlH46PhQva7SS1D9Gtt8jay6gMyBs+50H/DtLnw4jVnz27sfiE09YuzANSbFQw=="}],"memo":""},"blockNum":"147646"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1er355fkjksqpdtwmhf5penwa82p0rhqxkkyhk5","package":{"name":"register_gnodev","path":"gno.land/r/g1er355fkjksqpdtwmhf5penwa82p0rhqxkkyhk5/register_gnodev","files":[{"name":"gno.mod","body":"module gno.land/r/dmeo/register_gnodev\n\nrequire (\n\tgno.land/p/demo/users v0.0.0-latest\n\t\n\tgno.land/r/onbloc/bar v0.0.0-latest\n\tgno.land/r/onbloc/baz v0.0.0-latest\n\tgno.land/r/onbloc/foo v0.0.0-latest\n\tobl.land/r/onbloc/obl v0.0.0-latest\n\t\n\tgno.land/r/onbloc/qux v0.0.0-latest\n\tgno.land/r/onbloc/usdc v0.0.0-latest\n\n\tgno.land/r/gnoswap/pool v0.0.0-latest\n\tgno.land/r/gnoswap/gns v0.0.0-latest\n\n\tgno.land/r/demo/wugnot v0.0.0-latest\n\tgno.land/r/demo/foo20 v0.0.0-latest\n)\n"},{"name":"register_gnodev.gno","body":"package register_gnodev\n\nimport (\n\tpusers \"gno.land/p/demo/users\"\n\n\t\"gno.land/r/demo/foo20\"\n\t\"gno.land/r/demo/wugnot\"\n\n\t\"gno.land/r/gnoswap/gns\"\n\n\t\"gno.land/r/onbloc/bar\"\n\t\"gno.land/r/onbloc/baz\"\n\t\"gno.land/r/onbloc/foo\"\n\t\"gno.land/r/onbloc/obl\"\n\t\"gno.land/r/onbloc/qux\"\n\t\"gno.land/r/onbloc/usdc\"\n\n\tcp \"gno.land/r/gnoswap/community_pool\"\n\tpl \"gno.land/r/gnoswap/pool\"\n\tpf \"gno.land/r/gnoswap/protocol_fee\"\n\trr \"gno.land/r/gnoswap/router\"\n\tsr \"gno.land/r/gnoswap/staker\"\n)\n\ntype FooToken struct{}\n\nfunc (FooToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn foo.Transfer\n}\nfunc (FooToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn foo.TransferFrom\n}\nfunc (FooToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn foo.BalanceOf\n}\nfunc (FooToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn foo.Approve\n}\n\ntype BarToken struct{}\n\nfunc (BarToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn bar.Transfer\n}\nfunc (BarToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn bar.TransferFrom\n}\nfunc (BarToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn bar.BalanceOf\n}\nfunc (BarToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn bar.Approve\n}\n\ntype BazToken struct{}\n\nfunc (BazToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn baz.Transfer\n}\nfunc (BazToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn baz.TransferFrom\n}\nfunc (BazToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn baz.BalanceOf\n}\nfunc (BazToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn baz.Approve\n}\n\ntype QuxToken struct{}\n\nfunc (QuxToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn qux.Transfer\n}\nfunc (QuxToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn qux.TransferFrom\n}\nfunc (QuxToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn qux.BalanceOf\n}\nfunc (QuxToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn qux.Approve\n}\n\ntype GnsToken struct{}\n\nfunc (GnsToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn gns.Transfer\n}\nfunc (GnsToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn gns.TransferFrom\n}\nfunc (GnsToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn gns.BalanceOf\n}\nfunc (GnsToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn gns.Approve\n}\n\ntype OblToken struct{}\n\nfunc (OblToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn obl.Transfer\n}\nfunc (OblToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn obl.TransferFrom\n}\nfunc (OblToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn obl.BalanceOf\n}\nfunc (OblToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn obl.Approve\n}\n\ntype Foo20Token struct{}\n\nfunc (Foo20Token) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn foo20.Transfer\n}\nfunc (Foo20Token) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn foo20.TransferFrom\n}\nfunc (Foo20Token) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn foo20.BalanceOf\n}\nfunc (Foo20Token) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn foo20.Approve\n}\n\ntype WugnotToken struct{}\n\nfunc (WugnotToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn wugnot.Transfer\n}\nfunc (WugnotToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn wugnot.TransferFrom\n}\nfunc (WugnotToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn wugnot.BalanceOf\n}\nfunc (WugnotToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn wugnot.Approve\n}\n\ntype UsdcToken struct{}\n\nfunc (UsdcToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn usdc.Transfer\n}\nfunc (UsdcToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn usdc.TransferFrom\n}\nfunc (UsdcToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn usdc.BalanceOf\n}\nfunc (UsdcToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn usdc.Approve\n}\n\nfunc init() {\n\tpl.RegisterGRC20Interface(\"gno.land/r/onbloc/foo\", FooToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/onbloc/bar\", BarToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/onbloc/baz\", BazToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/onbloc/qux\", QuxToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/gnoswap/gns\", GnsToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/onbloc/obl\", OblToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/demo/foo20\", Foo20Token{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/demo/wugnot\", WugnotToken{})\n\tpl.RegisterGRC20Interface(\"gno.land/r/onbloc/usdc\", UsdcToken{})\n\n\tsr.RegisterGRC20Interface(\"gno.land/r/onbloc/foo\", FooToken{})\n\tsr.RegisterGRC20Interface(\"gno.land/r/onbloc/bar\", BarToken{})\n\tsr.RegisterGRC20Interface(\"gno.land/r/onbloc/baz\", BazToken{})\n\tsr.RegisterGRC20Interface(\"gno.land/r/onbloc/qux\", QuxToken{})\n\tsr.RegisterGRC20Interface(\"gno.land/r/gnoswap/gns\", GnsToken{})\n\tsr.RegisterGRC20Interface(\"gno.land/r/onbloc/obl\", OblToken{})\n\tsr.RegisterGRC20Interface(\"gno.land/r/demo/foo20\", Foo20Token{})\n\tsr.RegisterGRC20Interface(\"gno.land/r/demo/wugnot\", WugnotToken{})\n\tsr.RegisterGRC20Interface(\"gno.land/r/onbloc/usdc\", UsdcToken{})\n\n\trr.RegisterGRC20Interface(\"gno.land/r/onbloc/foo\", FooToken{})\n\trr.RegisterGRC20Interface(\"gno.land/r/onbloc/bar\", BarToken{})\n\trr.RegisterGRC20Interface(\"gno.land/r/onbloc/baz\", BazToken{})\n\trr.RegisterGRC20Interface(\"gno.land/r/onbloc/qux\", QuxToken{})\n\trr.RegisterGRC20Interface(\"gno.land/r/gnoswap/gns\", GnsToken{})\n\trr.RegisterGRC20Interface(\"gno.land/r/onbloc/obl\", OblToken{})\n\trr.RegisterGRC20Interface(\"gno.land/r/demo/foo20\", Foo20Token{})\n\trr.RegisterGRC20Interface(\"gno.land/r/demo/wugnot\", WugnotToken{})\n\trr.RegisterGRC20Interface(\"gno.land/r/onbloc/usdc\", UsdcToken{})\n\n\tpf.RegisterGRC20Interface(\"gno.land/r/onbloc/foo\", FooToken{})\n\tpf.RegisterGRC20Interface(\"gno.land/r/onbloc/bar\", BarToken{})\n\tpf.RegisterGRC20Interface(\"gno.land/r/onbloc/baz\", BazToken{})\n\tpf.RegisterGRC20Interface(\"gno.land/r/onbloc/qux\", QuxToken{})\n\tpf.RegisterGRC20Interface(\"gno.land/r/gnoswap/gns\", GnsToken{})\n\tpf.RegisterGRC20Interface(\"gno.land/r/onbloc/obl\", OblToken{})\n\tpf.RegisterGRC20Interface(\"gno.land/r/demo/foo20\", Foo20Token{})\n\tpf.RegisterGRC20Interface(\"gno.land/r/demo/wugnot\", WugnotToken{})\n\tpf.RegisterGRC20Interface(\"gno.land/r/onbloc/usdc\", UsdcToken{})\n\n\tcp.RegisterGRC20Interface(\"gno.land/r/onbloc/foo\", FooToken{})\n\tcp.RegisterGRC20Interface(\"gno.land/r/onbloc/bar\", BarToken{})\n\tcp.RegisterGRC20Interface(\"gno.land/r/onbloc/baz\", BazToken{})\n\tcp.RegisterGRC20Interface(\"gno.land/r/onbloc/qux\", QuxToken{})\n\tcp.RegisterGRC20Interface(\"gno.land/r/gnoswap/gns\", GnsToken{})\n\tcp.RegisterGRC20Interface(\"gno.land/r/onbloc/obl\", OblToken{})\n\tcp.RegisterGRC20Interface(\"gno.land/r/demo/foo20\", Foo20Token{})\n\tcp.RegisterGRC20Interface(\"gno.land/r/demo/wugnot\", WugnotToken{})\n\tcp.RegisterGRC20Interface(\"gno.land/r/onbloc/usdc\", UsdcToken{})\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqmmYKxiRDVAgo6iCd7tRUreVtTLUm3iIw6iCw+knaqF"},"signature":"q2CKsyGK5ERiwNpBBfxyPb9UcOng40FkcnLLJ+OInxpCy1MCw8NNDAedMesvam+S2y7wFJpM1g+urmHoWptlnQ=="}],"memo":""},"blockNum":"147648"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","send":"","pkg_path":"gno.land/r/gnoswap/pool","func":"SetPoolCreationFee","args":["0"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"q+nPPH3cjbIASObaYRCBTpXsgvJ6vryOe5hTg0pTFMcQJLcyC+43RU+K/QsQ7fO+h0qV1g/KvAQcVrLp+TP6eg=="}],"memo":""},"blockNum":"147650"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","send":"","pkg_path":"gno.land/r/gnoswap/pool","func":"CreatePool","args":["gno.land/r/demo/wugnot","gno.land/r/gnoswap/gns","3000","79228162514264337593543950337"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"7tLcvp1Zg3elnNYo2BPRF329WVZd3AKvdJQAW6FX1XxqXrsv/BnfF/RflPmVffPS4GW0cCKuySoLoEjjQ8aUrQ=="}],"memo":""},"blockNum":"147652"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","send":"","pkg_path":"gno.land/r/gnoswap/pool","func":"SetPoolCreationFee","args":["100000000"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"ZAt09m0cYYylxGMDGqannc2PyYoqyhnagZjxYfHQ6eYajOT4u3yWPl6pGy+NRflbsxHHz6jn8f7oAMEZ5xKOuA=="}],"memo":""},"blockNum":"148320"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","send":"","pkg_path":"gno.land/r/gnoswap/gns","func":"Approve","args":["g1dexaf6aqkkyr9yfy9d5up69lsn7ra80af34g5v","18446744073709551615"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"jz7v4m0NSQKYvmSqxjDFsvjhcCIAa7K6SEX7Gm7Gt7Nwr15MHKQJbVlxx0KODSYhPBHIx0R1mHmQvR4jhmyRKg=="}],"memo":""},"blockNum":"148351"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1dexaf6aqkkyr9yfy9d5up69lsn7ra80af34g5v","18446744073709551615"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"D9176ZaKG0VSeqh78lNO0n+WA3jNfLLu1BAu80So7pAzZNnZOvNgT378ggf4XI4GeEeRQ89qvksnmaJJRQ1xIQ=="}],"memo":""},"blockNum":"148353"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1y3uyaa63sjxvah2cx3c2usavwvx97kl8m2v7ye","18446744073709551615"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"XzLD3sGpQfyRN9Hm+QLiawbXXiTDr0Nq4/j/OJJhXjhpk64qcD+wmg1tWMVN4KdnltIPNtSXWpUeC3KDdpvkVA=="}],"memo":""},"blockNum":"148355"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","send":"20000000ugnot","pkg_path":"gno.land/r/gnoswap/position","func":"Mint","args":["gno.land/r/gnoswap/gns","gnot","3000","-49980","49980","20000000","20000000","1","1","9999999999","g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"NtKwJ4oVO+Qfo1+SY6fC1Cl4tNnm44mSXftim1xGJVtUVjPKB4mfJf/go8eAGqSZiwEwUH7IjsNMioIJaDs8Gw=="}],"memo":""},"blockNum":"148357"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","send":"","pkg_path":"gno.land/r/gnoswap/gnft","func":"SetTokenURILast","args":null}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"hbXy6sxj2TRkin5kN9HU63KQ3QW34VsqyPZvScLjlS0MbLVSP7tf9OYgUamigriCMO1RdFCUgVsp+HE7Jp8QTg=="}],"memo":""},"blockNum":"148368"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1er355fkjksqpdtwmhf5penwa82p0rhqxkkyhk5","package":{"name":"token_register","path":"gno.land/r/demo/gns_gnoswap_register","files":[{"name":"register.gno","body":"package token_register\n\nimport (\n\ttoken \"gno.land/r/demo/gns\"\n\n\tpusers \"gno.land/p/demo/users\"\n\n\tpl \"gno.land/r/gnoswap/pool\"\n\trr \"gno.land/r/gnoswap/router\"\n\tsr \"gno.land/r/gnoswap/staker\"\n\tpf \"gno.land/r/gnoswap/protocol_fee\"\n\tcp \"gno.land/r/gnoswap/community_pool\"\n)\n\ntype NewToken struct{}\n\nfunc (NewToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn token.Transfer\n}\n\nfunc (NewToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn token.TransferFrom\n}\n\nfunc (NewToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn token.BalanceOf\n}\n\nfunc (NewToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn token.Approve\n}\n\nfunc init() {\n\tpl.RegisterGRC20Interface(\"gno.land/r/demo/gns\", NewToken{})\n\trr.RegisterGRC20Interface(\"gno.land/r/demo/gns\", NewToken{})\n\tsr.RegisterGRC20Interface(\"gno.land/r/demo/gns\", NewToken{})\n\tpf.RegisterGRC20Interface(\"gno.land/r/demo/gns\", NewToken{})\n\tcp.RegisterGRC20Interface(\"gno.land/r/demo/gns\", NewToken{})\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqmmYKxiRDVAgo6iCd7tRUreVtTLUm3iIw6iCw+knaqF"},"signature":"cV9JcKjR9+DbXbsRvzJx4FRV+8OslmijXdIPQ4xT34RLqtljBcurbpJtgYMETJn98LlUpyH2EJ00+I8uEVBVPA=="}],"memo":""},"blockNum":"148452"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1er355fkjksqpdtwmhf5penwa82p0rhqxkkyhk5","package":{"name":"token_register","path":"gno.land/r/demo/usdc_gnoswap_register","files":[{"name":"register.gno","body":"package token_register\n\nimport (\n\ttoken \"gno.land/r/demo/usdc\"\n\n\tpusers \"gno.land/p/demo/users\"\n\n\tpl \"gno.land/r/gnoswap/pool\"\n\trr \"gno.land/r/gnoswap/router\"\n\tsr \"gno.land/r/gnoswap/staker\"\n\tpf \"gno.land/r/gnoswap/protocol_fee\"\n\tcp \"gno.land/r/gnoswap/community_pool\"\n)\n\ntype NewToken struct{}\n\nfunc (NewToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn token.Transfer\n}\n\nfunc (NewToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn token.TransferFrom\n}\n\nfunc (NewToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn token.BalanceOf\n}\n\nfunc (NewToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn token.Approve\n}\n\nfunc init() {\n\tpl.RegisterGRC20Interface(\"gno.land/r/demo/usdc\", NewToken{})\n\trr.RegisterGRC20Interface(\"gno.land/r/demo/usdc\", NewToken{})\n\tsr.RegisterGRC20Interface(\"gno.land/r/demo/usdc\", NewToken{})\n\tpf.RegisterGRC20Interface(\"gno.land/r/demo/usdc\", NewToken{})\n\tcp.RegisterGRC20Interface(\"gno.land/r/demo/usdc\", NewToken{})\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqmmYKxiRDVAgo6iCd7tRUreVtTLUm3iIw6iCw+knaqF"},"signature":"EyXezHzuPLs9EWBdoUNoYybTE79Q6oyRxT5pu54QMEhXpi11WgCUjMGMVwYfgAE/6N4KqWDrlSBR3vefKawo6w=="}],"memo":""},"blockNum":"148453"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1er355fkjksqpdtwmhf5penwa82p0rhqxkkyhk5","package":{"name":"token_register","path":"gno.land/r/demo/foo_gnoswap_register","files":[{"name":"register.gno","body":"package token_register\n\nimport (\n\ttoken \"gno.land/r/demo/foo\"\n\n\tpusers \"gno.land/p/demo/users\"\n\n\tpl \"gno.land/r/gnoswap/pool\"\n\trr \"gno.land/r/gnoswap/router\"\n\tsr \"gno.land/r/gnoswap/staker\"\n\tpf \"gno.land/r/gnoswap/protocol_fee\"\n\tcp \"gno.land/r/gnoswap/community_pool\"\n)\n\ntype NewToken struct{}\n\nfunc (NewToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn token.Transfer\n}\n\nfunc (NewToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn token.TransferFrom\n}\n\nfunc (NewToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn token.BalanceOf\n}\n\nfunc (NewToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn token.Approve\n}\n\nfunc init() {\n\tpl.RegisterGRC20Interface(\"gno.land/r/demo/foo\", NewToken{})\n\trr.RegisterGRC20Interface(\"gno.land/r/demo/foo\", NewToken{})\n\tsr.RegisterGRC20Interface(\"gno.land/r/demo/foo\", NewToken{})\n\tpf.RegisterGRC20Interface(\"gno.land/r/demo/foo\", NewToken{})\n\tcp.RegisterGRC20Interface(\"gno.land/r/demo/foo\", NewToken{})\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqmmYKxiRDVAgo6iCd7tRUreVtTLUm3iIw6iCw+knaqF"},"signature":"esUNkCw583ZdkkILxBr5JOTO5bj41zmkk4LnchFny7QVGyO9bBGMTXRg21/PDjbEvuF4CuFF6Xyo4waTxf6hpw=="}],"memo":""},"blockNum":"148454"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1er355fkjksqpdtwmhf5penwa82p0rhqxkkyhk5","package":{"name":"token_register","path":"gno.land/r/demo/bar_gnoswap_register","files":[{"name":"register.gno","body":"package token_register\n\nimport (\n\ttoken \"gno.land/r/demo/bar\"\n\n\tpusers \"gno.land/p/demo/users\"\n\n\tpl \"gno.land/r/gnoswap/pool\"\n\trr \"gno.land/r/gnoswap/router\"\n\tsr \"gno.land/r/gnoswap/staker\"\n\tpf \"gno.land/r/gnoswap/protocol_fee\"\n\tcp \"gno.land/r/gnoswap/community_pool\"\n)\n\ntype NewToken struct{}\n\nfunc (NewToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn token.Transfer\n}\n\nfunc (NewToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn token.TransferFrom\n}\n\nfunc (NewToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn token.BalanceOf\n}\n\nfunc (NewToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn token.Approve\n}\n\nfunc init() {\n\tpl.RegisterGRC20Interface(\"gno.land/r/demo/bar\", NewToken{})\n\trr.RegisterGRC20Interface(\"gno.land/r/demo/bar\", NewToken{})\n\tsr.RegisterGRC20Interface(\"gno.land/r/demo/bar\", NewToken{})\n\tpf.RegisterGRC20Interface(\"gno.land/r/demo/bar\", NewToken{})\n\tcp.RegisterGRC20Interface(\"gno.land/r/demo/bar\", NewToken{})\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqmmYKxiRDVAgo6iCd7tRUreVtTLUm3iIw6iCw+knaqF"},"signature":"LJIA9eGh+4r4ugt1zJ6kz5XkJhNyxxWpHDka0VFxaPtcy2S7gF2dozjrnCxQJS4oNAxnkgDPOlgEz/XHe/DbiQ=="}],"memo":""},"blockNum":"148455"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1er355fkjksqpdtwmhf5penwa82p0rhqxkkyhk5","package":{"name":"token_register","path":"gno.land/r/demo/baz_gnoswap_register","files":[{"name":"register.gno","body":"package token_register\n\nimport (\n\ttoken \"gno.land/r/demo/baz\"\n\n\tpusers \"gno.land/p/demo/users\"\n\n\tpl \"gno.land/r/gnoswap/pool\"\n\trr \"gno.land/r/gnoswap/router\"\n\tsr \"gno.land/r/gnoswap/staker\"\n\tpf \"gno.land/r/gnoswap/protocol_fee\"\n\tcp \"gno.land/r/gnoswap/community_pool\"\n)\n\ntype NewToken struct{}\n\nfunc (NewToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn token.Transfer\n}\n\nfunc (NewToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn token.TransferFrom\n}\n\nfunc (NewToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn token.BalanceOf\n}\n\nfunc (NewToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn token.Approve\n}\n\nfunc init() {\n\tpl.RegisterGRC20Interface(\"gno.land/r/demo/baz\", NewToken{})\n\trr.RegisterGRC20Interface(\"gno.land/r/demo/baz\", NewToken{})\n\tsr.RegisterGRC20Interface(\"gno.land/r/demo/baz\", NewToken{})\n\tpf.RegisterGRC20Interface(\"gno.land/r/demo/baz\", NewToken{})\n\tcp.RegisterGRC20Interface(\"gno.land/r/demo/baz\", NewToken{})\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqmmYKxiRDVAgo6iCd7tRUreVtTLUm3iIw6iCw+knaqF"},"signature":"1KkvBA4HSCFJZJFhtvNGz6EV/krXTZ99JcNEUos7kgQmLXbDTGOwTC7oAOML6660VD5UdsbCHxwGHKTBwjGTCQ=="}],"memo":""},"blockNum":"148456"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1er355fkjksqpdtwmhf5penwa82p0rhqxkkyhk5","package":{"name":"token_register","path":"gno.land/r/demo/qux_gnoswap_register","files":[{"name":"register.gno","body":"package token_register\n\nimport (\n\ttoken \"gno.land/r/demo/qux\"\n\n\tpusers \"gno.land/p/demo/users\"\n\n\tpl \"gno.land/r/gnoswap/pool\"\n\trr \"gno.land/r/gnoswap/router\"\n\tsr \"gno.land/r/gnoswap/staker\"\n\tpf \"gno.land/r/gnoswap/protocol_fee\"\n\tcp \"gno.land/r/gnoswap/community_pool\"\n)\n\ntype NewToken struct{}\n\nfunc (NewToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn token.Transfer\n}\n\nfunc (NewToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn token.TransferFrom\n}\n\nfunc (NewToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn token.BalanceOf\n}\n\nfunc (NewToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn token.Approve\n}\n\nfunc init() {\n\tpl.RegisterGRC20Interface(\"gno.land/r/demo/qux\", NewToken{})\n\trr.RegisterGRC20Interface(\"gno.land/r/demo/qux\", NewToken{})\n\tsr.RegisterGRC20Interface(\"gno.land/r/demo/qux\", NewToken{})\n\tpf.RegisterGRC20Interface(\"gno.land/r/demo/qux\", NewToken{})\n\tcp.RegisterGRC20Interface(\"gno.land/r/demo/qux\", NewToken{})\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqmmYKxiRDVAgo6iCd7tRUreVtTLUm3iIw6iCw+knaqF"},"signature":"YKc87l1WvZ1flTD3k+X/KbH5mW7noupvO+QCFXYO9kIPgEQPAxEG7tXXqgonZmYnMbpHrOzpXBBXXmTu5k4NyQ=="}],"memo":""},"blockNum":"148457"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1er355fkjksqpdtwmhf5penwa82p0rhqxkkyhk5","package":{"name":"token_register","path":"gno.land/r/demo/obl_gnoswap_register","files":[{"name":"register.gno","body":"package token_register\n\nimport (\n\ttoken \"gno.land/r/demo/obl\"\n\n\tpusers \"gno.land/p/demo/users\"\n\n\tpl \"gno.land/r/gnoswap/pool\"\n\trr \"gno.land/r/gnoswap/router\"\n\tsr \"gno.land/r/gnoswap/staker\"\n\tpf \"gno.land/r/gnoswap/protocol_fee\"\n\tcp \"gno.land/r/gnoswap/community_pool\"\n)\n\ntype NewToken struct{}\n\nfunc (NewToken) Transfer() func(to pusers.AddressOrName, amount uint64) {\n\treturn token.Transfer\n}\n\nfunc (NewToken) TransferFrom() func(from, to pusers.AddressOrName, amount uint64) {\n\treturn token.TransferFrom\n}\n\nfunc (NewToken) BalanceOf() func(owner pusers.AddressOrName) uint64 {\n\treturn token.BalanceOf\n}\n\nfunc (NewToken) Approve() func(spender pusers.AddressOrName, amount uint64) {\n\treturn token.Approve\n}\n\nfunc init() {\n\tpl.RegisterGRC20Interface(\"gno.land/r/demo/obl\", NewToken{})\n\trr.RegisterGRC20Interface(\"gno.land/r/demo/obl\", NewToken{})\n\tsr.RegisterGRC20Interface(\"gno.land/r/demo/obl\", NewToken{})\n\tpf.RegisterGRC20Interface(\"gno.land/r/demo/obl\", NewToken{})\n\tcp.RegisterGRC20Interface(\"gno.land/r/demo/obl\", NewToken{})\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqmmYKxiRDVAgo6iCd7tRUreVtTLUm3iIw6iCw+knaqF"},"signature":"4C3kpSITUyRpSzbcR0Q0vtJGI/k+Ufo8kLac7azdYFJjO0dzn83007JSelPJLivv/CEcwNg6E1WRuG+9tJm8Fw=="}],"memo":""},"blockNum":"148458"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"nawH/S3e05bICCkhgY6Z6cE1V/XPbNwAId2vzXgybI80H5LMUz5/+Godfxy+NZDmFRP8+QlCrz1KtsLsYf7IGg=="}],"memo":""},"blockNum":"149110"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g18sp3hq6zqfxw88ffgz773gvaqgzjhxy62l9906","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"bEM/6YAFwd1S+VzvkzS8H34FtTVfRBW4BEZDg5Ts/JN4zTq8xkb4a52+hzurHsTwpKhDoNA393q0j4y08do7dg=="}],"memo":""},"blockNum":"149112"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"EVfNJyG06TXl4cJuEnbsz/DTojEQFdVWdVJIqmksW3xAxju7TDer4ORGUn9tFibbNE9mz/Gjh2uQH/WAJ5d9Dw=="}],"memo":""},"blockNum":"149364"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","send":"","pkg_path":"gno.land/r/gnoswap/gns","func":"Approve","args":["g1dexaf6aqkkyr9yfy9d5up69lsn7ra80af34g5v","100000000"]},{"@type":"/vm.m_call","caller":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","send":"","pkg_path":"gno.land/r/gnoswap/pool","func":"CreatePool","args":["gno.land/r/demo/wugnot","gno.land/r/gnoswap/gns","500","79228162514264337593543950336"]},{"@type":"/vm.m_call","caller":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1dexaf6aqkkyr9yfy9d5up69lsn7ra80af34g5v","1000000"]},{"@type":"/vm.m_call","caller":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","send":"","pkg_path":"gno.land/r/gnoswap/gns","func":"Approve","args":["g1dexaf6aqkkyr9yfy9d5up69lsn7ra80af34g5v","999999"]},{"@type":"/vm.m_call","caller":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1y3uyaa63sjxvah2cx3c2usavwvx97kl8m2v7ye","1000000"]},{"@type":"/vm.m_call","caller":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","send":"1000000ugnot","pkg_path":"gno.land/r/gnoswap/position","func":"Mint","args":["gnot","gno.land/r/gnoswap/gns","500","-6930","6930","1000000","999999","995000","994999","7282571140","g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c"]},{"@type":"/vm.m_call","caller":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","send":"","pkg_path":"gno.land/r/gnoswap/gnft","func":"SetTokenURILast","args":null}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"IG6IlubfQBnX/EHW0kKQIcd/9mmnqu1yUay4wWDdTEtFyGl0CKsawOfy3Y3OCbz5PdFHhB8N5h7xMLFKqoftlw=="}],"memo":""},"blockNum":"149400"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1dexaf6aqkkyr9yfy9d5up69lsn7ra80af34g5v","9223372036854775807"]},{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/onbloc/usdc","func":"Approve","args":["g1dexaf6aqkkyr9yfy9d5up69lsn7ra80af34g5v","9223372036854775807"]},{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1y3uyaa63sjxvah2cx3c2usavwvx97kl8m2v7ye","9223372036854775807"]},{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/gnoswap/position","func":"DecreaseLiquidity","args":["21","100","0","0","9999999999","true"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"YO4oy+8M79ApI7TCe+Qxq3ifD/n6r8cyR59ULi4MSSsU+4UnhDMRk29OWMsWiX4Ms6iQeIQYrkrct/iE3nPH1w=="}],"memo":""},"blockNum":"149451"}
