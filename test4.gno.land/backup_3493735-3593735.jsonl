{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/ecodevx/dao/pre1","func":"SubmitDAOLockingProposal","args":["Tutorial Realm locking","This proposal is to lock the Tutorial Realm to test the locking proposal function","council, main, community, tutorials","We want to lock the Test4 tutorial realm "]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7MWSLkjf+z/CYfMh6KVHEaHLDWpnfGBRDqFO81j1FRN"},"signature":"5S0CkyNFt6Saf9pupULJeHe7vilCQ1aKgvwL9h2lG+Y5F/DjdJfG2vFnfrEvaiRH8gplh++AD+TiWHr75AM9NQ=="}],"memo":"Called through gno.studio"},"blockNum":"3496213"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/ecodevx/dao/pre1","func":"SubmitDAOLockingProposal","args":["Tutorial Realm Locking","","council, main, community, tutorials",""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7MWSLkjf+z/CYfMh6KVHEaHLDWpnfGBRDqFO81j1FRN"},"signature":"A7yxz8WhtoBanIY3sHvPQxTeTOQrkzPnc9qk9dbxm2AAnjKM1zqrNbXoMA1C7iCXepF2jSiaJgoDOD1/C9o/pg=="}],"memo":"Called through gno.studio"},"blockNum":"3498027"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/ecodevx/dao/pre1","func":"SubmitDAOLockingProposal","args":["Tutorial Realm Locking","","'tutorials'",""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7MWSLkjf+z/CYfMh6KVHEaHLDWpnfGBRDqFO81j1FRN"},"signature":"AxGvi1wy5ns65MWX+bOUS2rNRIzVwj2f/ybfjjLrhK8xb2TCT7RbgQciNng0Ddw+4VTpxB3ccol8gmjyXjjccw=="}],"memo":"Called through gno.studio"},"blockNum":"3498067"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","package":{"name":"testr","path":"gno.land/r/g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd/testr","files":[{"name":"package.gno","body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8dMlyeZTx7/5c7upbCj/sMsgJdjajg4b8kgHZ+d1mV"},"signature":"X4v+mUmEvEjakztsPboeviPPJlvvgYzlWw7oyb0npFs3mf6kKfWC70QelEqlQ8/fXnPcVAbdjRJy02xSlVZVHQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"3502735"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","package":{"name":"testr","path":"gno.land/r/g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd/testr","files":[{"name":"package.gno","body":"package testr\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8dMlyeZTx7/5c7upbCj/sMsgJdjajg4b8kgHZ+d1mV"},"signature":"ig+BzoDjEFzaIS3Zntw31ftgcoeHtu2A5WL7nkBDkYZlN3Ug2Iy5smgiBEOBkaueX33mmyj3YeWWs2MrX+ponA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"3502739"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","package":{"name":"v1","path":"gno.land/r/g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd/testr/v1","files":[{"name":"package.gno","body":"package v1\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8dMlyeZTx7/5c7upbCj/sMsgJdjajg4b8kgHZ+d1mV"},"signature":"G0tkdrf9Xbis/swLbLzIY6yvJat666BrVmnPfiqnCt0fWOf0esdH5ISe1EVzCcemndCaLUKGgwAg8wcWUe5MLQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"3502746"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","package":{"name":"hello","path":"gno.land/r/g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd/abracadabra/hello","files":[{"name":"package.gno","body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8dMlyeZTx7/5c7upbCj/sMsgJdjajg4b8kgHZ+d1mV"},"signature":"NjrDa+9HhPoyKaJhygoBbrizmAupqS1Whw+ROpc9Hhc6z+z1MHkABSy17hpcHKFbpJ+CtoXlx/up1rIlPQoeyw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"3502809"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","package":{"name":"hello","path":"gno.land/r/g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd/foo/bar/hello","files":[{"name":"package.gno","body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello 123123!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8dMlyeZTx7/5c7upbCj/sMsgJdjajg4b8kgHZ+d1mV"},"signature":"sl7I1WA2WbyAhxzulXx6yrOAYrYHY8arPxETL/IitO89pj6pfNm4SYrpLl7YfAscAKXqD0mFJFzvWz+vgmBFEQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"3502819"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1pec8apnh464pmmnrfum5hx7taxv3xmncnnr70q","send":"","pkg_path":"gno.land/r/flippando/flippando","func":"StartGame","args":["g1pec8apnh464pmmnrfum5hx7taxv3xmncnnr70q","squareGrid","16"]}],"fee":{"gas_wanted":"12000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvWMkQs2JWRwjwshTAXywzD+9QyzJ6q+OjEw0nMmCdBf"},"signature":"uMqp0PodW4SovkR9ZRV1FxUqDoezHA+mJKihUWZytD8djffctENETTKNY2TKFlfatQ5vBp0Viw4SYkG4+z6n9Q=="}],"memo":""},"blockNum":"3506904"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kpptltmd8jmwq5et5udh3ld8qq4ksqm9kj0vs4","package":{"name":"onbloc_test","path":"gno.land/r/g1kpptltmd8jmwq5et5udh3ld8qq4ksqm9kj0vs4/onbloc_test","files":[{"name":"basic_nft.gno","body":"package onbloc_test\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/grc/grc721\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\ntype basicNFT struct {\n\tname              string\n\tsymbol            string\n\towners            avl.Tree // tokenId -\u003e OwnerAddress\n\tbalances          avl.Tree // OwnerAddress -\u003e TokenCount\n\ttokenApprovals    avl.Tree // TokenId -\u003e ApprovedAddress\n\ttokenURIs         avl.Tree // TokenId -\u003e URIs\n\toperatorApprovals avl.Tree // \"OwnerAddress:OperatorAddress\" -\u003e bool\n}\n\n// Returns new basic NFT\nfunc NewBasicNFT(name string, symbol string) *basicNFT {\n\treturn \u0026basicNFT{\n\t\tname:   name,\n\t\tsymbol: symbol,\n\n\t\towners:            avl.Tree{},\n\t\tbalances:          avl.Tree{},\n\t\ttokenApprovals:    avl.Tree{},\n\t\ttokenURIs:         avl.Tree{},\n\t\toperatorApprovals: avl.Tree{},\n\t}\n}\n\nfunc (s *basicNFT) Name() string       { return s.name }\nfunc (s *basicNFT) Symbol() string     { return s.symbol }\nfunc (s *basicNFT) TokenCount() uint64 { return uint64(s.owners.Size()) }\n\n// BalanceOf returns balance of input address\nfunc (s *basicNFT) BalanceOf(addr std.Address) (uint64, error) {\n\tif err := isValidAddress(addr); err != nil {\n\t\treturn 0, err\n\t}\n\n\tbalance, found := s.balances.Get(addr.String())\n\tif !found {\n\t\treturn 0, nil\n\t}\n\n\treturn balance.(uint64), nil\n}\n\n// OwnerOf returns owner of input token id\nfunc (s *basicNFT) OwnerOf(tid grc721.TokenID) (std.Address, error) {\n\towner, found := s.owners.Get(string(tid))\n\tif !found {\n\t\treturn \"\", ErrInvalidTokenId\n\t}\n\n\treturn owner.(std.Address), nil\n}\n\n// TokenURI returns the URI of input token id\nfunc (s *basicNFT) TokenURI(tid grc721.TokenID) (string, error) {\n\turi, found := s.tokenURIs.Get(string(tid))\n\tif !found {\n\t\treturn \"\", ErrInvalidTokenId\n\t}\n\n\treturn uri.(string), nil\n}\n\nfunc (s *basicNFT) SetTokenURI(tid grc721.TokenID, tURI grc721.TokenURI) (bool, error) {\n\t// check for invalid grc721.TokenID\n\tif !s.exists(tid) {\n\t\treturn false, ErrInvalidTokenId\n\t}\n\n\t// check for the right owner\n\towner, err := s.OwnerOf(tid)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\tcaller := std.PrevRealm().Addr()\n\tif caller != owner {\n\t\treturn false, ErrCallerIsNotOwner\n\t}\n\ts.tokenURIs.Set(string(tid), string(tURI))\n\treturn true, nil\n}\n\n// IsApprovedForAll returns true if operator is approved for all by the owner.\n// Otherwise, returns false\nfunc (s *basicNFT) IsApprovedForAll(owner, operator std.Address) bool {\n\tkey := owner.String() + \":\" + operator.String()\n\t_, found := s.operatorApprovals.Get(key)\n\tif !found {\n\t\treturn false\n\t}\n\n\treturn true\n}\n\n// Approve approves the input address for particular token\nfunc (s *basicNFT) Approve(to std.Address, tid grc721.TokenID) error {\n\tif err := isValidAddress(to); err != nil {\n\t\treturn err\n\t}\n\n\towner, err := s.OwnerOf(tid)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif owner == to {\n\t\treturn ErrApprovalToCurrentOwner\n\t}\n\n\tcaller := std.PrevRealm().Addr()\n\tif caller != owner \u0026\u0026 !s.IsApprovedForAll(owner, caller) {\n\t\treturn ErrCallerIsNotOwnerOrApproved\n\t}\n\n\ts.tokenApprovals.Set(string(tid), to.String())\n\n\tstd.Emit(\n\t\tApprovalEvent,\n\t\t\"owner\", owner.String(),\n\t\t\"to\", to.String(),\n\t\t\"tid\", string(tid),\n\t)\n\n\treturn nil\n}\n\n// GetApproved return the approved address for token\nfunc (s *basicNFT) GetApproved(tid grc721.TokenID) (std.Address, error) {\n\taddr, found := s.tokenApprovals.Get(string(tid))\n\tif !found {\n\t\treturn zeroAddress, ErrTokenIdNotHasApproved\n\t}\n\n\treturn std.Address(addr.(string)), nil\n}\n\n// SetApprovalForAll can approve the operator to operate on all tokens\nfunc (s *basicNFT) SetApprovalForAll(operator std.Address, approved bool) error {\n\tif err := isValidAddress(operator); err != nil {\n\t\treturn ErrInvalidAddress\n\t}\n\n\tcaller := std.PrevRealm().Addr()\n\treturn s.setApprovalForAll(caller, operator, approved)\n}\n\n// Safely transfers `tokenId` token from `from` to `to`, checking that\n// contract recipients are aware of the GRC721 protocol to prevent\n// tokens from being forever locked.\nfunc (s *basicNFT) SafeTransferFrom(from, to std.Address, tid grc721.TokenID) error {\n\tcaller := std.PrevRealm().Addr()\n\tif !s.isApprovedOrOwner(caller, tid) {\n\t\treturn ErrCallerIsNotOwnerOrApproved\n\t}\n\n\terr := s.transfer(from, to, tid)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif !s.checkOnGRC721Received(from, to, tid) {\n\t\treturn ErrTransferToNonGRC721Receiver\n\t}\n\n\treturn nil\n}\n\n// Transfers `tokenId` token from `from` to `to`.\nfunc (s *basicNFT) TransferFrom(from, to std.Address, tid grc721.TokenID) error {\n\tcaller := std.PrevRealm().Addr()\n\tif !s.isApprovedOrOwner(caller, tid) {\n\t\treturn ErrCallerIsNotOwnerOrApproved\n\t}\n\n\terr := s.transfer(from, to, tid)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\n// Mints `tokenId` and transfers it to `to`.\nfunc (s *basicNFT) Mint(to std.Address, tid grc721.TokenID) error {\n\treturn s.mint(to, tid)\n}\n\n// Mints `tokenId` and transfers it to `to`. Also checks that\n// contract recipients are using GRC721 protocol\nfunc (s *basicNFT) SafeMint(to std.Address, tid grc721.TokenID) error {\n\terr := s.mint(to, tid)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif !s.checkOnGRC721Received(zeroAddress, to, tid) {\n\t\treturn ErrTransferToNonGRC721Receiver\n\t}\n\n\treturn nil\n}\n\nfunc (s *basicNFT) Burn(tid grc721.TokenID) error {\n\towner, err := s.OwnerOf(tid)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\ts.beforeTokenTransfer(owner, zeroAddress, tid, 1)\n\n\ts.tokenApprovals.Remove(string(tid))\n\tbalance, err := s.BalanceOf(owner)\n\tif err != nil {\n\t\treturn err\n\t}\n\tbalance -= 1\n\ts.balances.Set(owner.String(), balance)\n\ts.owners.Remove(string(tid))\n\n\tstd.Emit(\n\t\tTransferEvent,\n\t\t\"from\", owner.String(),\n\t\t\"to\", zeroAddress.String(),\n\t\t\"tid\", string(tid),\n\t)\n\n\ts.afterTokenTransfer(owner, zeroAddress, tid, 1)\n\n\treturn nil\n}\n\n/* Helper methods */\n\n// Helper for SetApprovalForAll()\nfunc (s *basicNFT) setApprovalForAll(owner, operator std.Address, approved bool) error {\n\tif owner == operator {\n\t\treturn ErrApprovalToCurrentOwner\n\t}\n\n\tkey := owner.String() + \":\" + operator.String()\n\ts.operatorApprovals.Set(key, approved)\n\n\tstd.Emit(\n\t\tApprovalForAllEvent,\n\t\t\"owner\", owner.String(),\n\t\t\"to\", operator.String(),\n\t\t\"approved\", ufmt.Sprintf(\"%t\", approved),\n\t)\n\n\treturn nil\n}\n\n// Helper for TransferFrom() and SafeTransferFrom()\nfunc (s *basicNFT) transfer(from, to std.Address, tid grc721.TokenID) error {\n\tif err := isValidAddress(from); err != nil {\n\t\treturn ErrInvalidAddress\n\t}\n\tif err := isValidAddress(to); err != nil {\n\t\treturn ErrInvalidAddress\n\t}\n\n\tif from == to {\n\t\treturn ErrCannotTransferToSelf\n\t}\n\n\towner, err := s.OwnerOf(tid)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif owner != from {\n\t\treturn ErrTransferFromIncorrectOwner\n\t}\n\n\ts.beforeTokenTransfer(from, to, tid, 1)\n\n\t// Check that tokenId was not transferred by `beforeTokenTransfer`\n\towner, err = s.OwnerOf(tid)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif owner != from {\n\t\treturn ErrTransferFromIncorrectOwner\n\t}\n\n\ts.tokenApprovals.Remove(string(tid))\n\tfromBalance, err := s.BalanceOf(from)\n\tif err != nil {\n\t\treturn err\n\t}\n\ttoBalance, err := s.BalanceOf(to)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfromBalance -= 1\n\ttoBalance += 1\n\ts.balances.Set(from.String(), fromBalance)\n\ts.balances.Set(to.String(), toBalance)\n\ts.owners.Set(string(tid), to)\n\n\tstd.Emit(\n\t\tTransferEvent,\n\t\t\"from\", from.String(),\n\t\t\"to\", to.String(),\n\t\t\"tid\", string(tid),\n\t)\n\n\ts.afterTokenTransfer(from, to, tid, 1)\n\n\treturn nil\n}\n\n// Helper for Mint() and SafeMint()\nfunc (s *basicNFT) mint(to std.Address, tid grc721.TokenID) error {\n\tif err := isValidAddress(to); err != nil {\n\t\treturn err\n\t}\n\n\tif s.exists(tid) {\n\t\treturn ErrTokenIdAlreadyExists\n\t}\n\n\ts.beforeTokenTransfer(zeroAddress, to, tid, 1)\n\n\t// Check that tokenId was not minted by `beforeTokenTransfer`\n\tif s.exists(tid) {\n\t\treturn ErrTokenIdAlreadyExists\n\t}\n\n\ttoBalance, err := s.BalanceOf(to)\n\tif err != nil {\n\t\treturn err\n\t}\n\ttoBalance += 1\n\ts.balances.Set(to.String(), toBalance)\n\ts.owners.Set(string(tid), to)\n\n\tstd.Emit(\n\t\tTransferEvent,\n\t\t\"from\", zeroAddress.String(),\n\t\t\"to\", to.String(),\n\t\t\"tid\", string(tid),\n\t)\n\n\ts.afterTokenTransfer(zeroAddress, to, tid, 1)\n\n\treturn nil\n}\n\nfunc (s *basicNFT) isApprovedOrOwner(addr std.Address, tid grc721.TokenID) bool {\n\towner, found := s.owners.Get(string(tid))\n\tif !found {\n\t\treturn false\n\t}\n\n\tif addr == owner.(std.Address) || s.IsApprovedForAll(owner.(std.Address), addr) {\n\t\treturn true\n\t}\n\n\t_, err := s.GetApproved(tid)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\treturn true\n}\n\n// Checks if token id already exists\nfunc (s *basicNFT) exists(tid grc721.TokenID) bool {\n\t_, found := s.owners.Get(string(tid))\n\treturn found\n}\n\nfunc (s *basicNFT) beforeTokenTransfer(from, to std.Address, firstTokenId grc721.TokenID, batchSize uint64) {\n\t// TODO: Implementation\n}\n\nfunc (s *basicNFT) afterTokenTransfer(from, to std.Address, firstTokenId grc721.TokenID, batchSize uint64) {\n\t// TODO: Implementation\n}\n\nfunc (s *basicNFT) checkOnGRC721Received(from, to std.Address, tid grc721.TokenID) bool {\n\t// TODO: Implementation\n\treturn true\n}\n\nfunc (s *basicNFT) RenderHome() (str string) {\n\tstr += ufmt.Sprintf(\"# %s ($%s)\\n\\n\", s.name, s.symbol)\n\tstr += ufmt.Sprintf(\"* **Total supply**: %d\\n\", s.TokenCount())\n\tstr += ufmt.Sprintf(\"* **Known accounts**: %d\\n\", s.balances.Size())\n\n\treturn\n}\n"},{"name":"errors.gno","body":"package onbloc_test\n\nimport \"errors\"\n\nvar (\n\tErrInvalidTokenId              = errors.New(\"invalid token id\")\n\tErrInvalidAddress              = errors.New(\"invalid address\")\n\tErrTokenIdNotHasApproved       = errors.New(\"token id not approved for anyone\")\n\tErrApprovalToCurrentOwner      = errors.New(\"approval to current owner\")\n\tErrCallerIsNotOwner            = errors.New(\"caller is not token owner\")\n\tErrCallerNotApprovedForAll     = errors.New(\"caller is not approved for all\")\n\tErrCannotTransferToSelf        = errors.New(\"cannot send transfer to self\")\n\tErrTransferFromIncorrectOwner  = errors.New(\"transfer from incorrect owner\")\n\tErrTransferToNonGRC721Receiver = errors.New(\"transfer to non GRC721Receiver implementer\")\n\tErrCallerIsNotOwnerOrApproved  = errors.New(\"caller is not token owner or approved\")\n\tErrTokenIdAlreadyExists        = errors.New(\"token id already exists\")\n\n\t// ERC721Royalty\n\tErrInvalidRoyaltyPercentage     = errors.New(\"invalid royalty percentage\")\n\tErrInvalidRoyaltyPaymentAddress = errors.New(\"invalid royalty paymentAddress\")\n\tErrCannotCalculateRoyaltyAmount = errors.New(\"cannot calculate royalty amount\")\n)\n"},{"name":"grc721_metadata.gno","body":"package onbloc_test\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/grc/grc721\"\n)\n\n// metadataNFT represents an NFT with metadata extensions.\ntype metadataNFT struct {\n\t*basicNFT            // Embedded basicNFT struct for basic NFT functionality\n\textensions *avl.Tree // AVL tree for storing metadata extensions\n}\n\n// NewNFTWithMetadata creates a new basic NFT with metadata extensions.\nfunc NewNFTWithMetadata(name string, symbol string) *metadataNFT {\n\t// Create a new basic NFT\n\tnft := NewBasicNFT(name, symbol)\n\n\t// Return a metadataNFT with basicNFT embedded and an empty AVL tree for extensions\n\treturn \u0026metadataNFT{\n\t\tbasicNFT:   nft,\n\t\textensions: avl.NewTree(),\n\t}\n}\n\n// SetTokenMetadata sets metadata for a given token ID.\nfunc (s *metadataNFT) SetTokenMetadata(tid grc721.TokenID, metadata grc721.Metadata) error {\n\t// Check if the caller is the owner of the token\n\towner, err := s.basicNFT.OwnerOf(tid)\n\tif err != nil {\n\t\treturn err\n\t}\n\tcaller := std.PrevRealm().Addr()\n\tif caller != owner {\n\t\treturn ErrCallerIsNotOwner\n\t}\n\n\t// Set the metadata for the token ID in the extensions AVL tree\n\ts.extensions.Set(string(tid), metadata)\n\treturn nil\n}\n\n// TokenMetadata retrieves metadata for a given token ID.\nfunc (s *metadataNFT) TokenMetadata(tid grc721.TokenID) (grc721.Metadata, error) {\n\t// Retrieve metadata from the extensions AVL tree\n\tmetadata, found := s.extensions.Get(string(tid))\n\tif !found {\n\t\treturn grc721.Metadata{}, ErrInvalidTokenId\n\t}\n\n\treturn metadata.(grc721.Metadata), nil\n}\n\n// mint mints a new token and assigns it to the specified address.\nfunc (s *metadataNFT) mint(to std.Address, tid grc721.TokenID) error {\n\t// Check if the address is valid\n\tif err := isValidAddress(to); err != nil {\n\t\treturn err\n\t}\n\n\t// Check if the token ID already exists\n\tif s.basicNFT.exists(tid) {\n\t\treturn ErrTokenIdAlreadyExists\n\t}\n\n\ts.basicNFT.beforeTokenTransfer(zeroAddress, to, tid, 1)\n\n\t// Check if the token ID was minted by beforeTokenTransfer\n\tif s.basicNFT.exists(tid) {\n\t\treturn ErrTokenIdAlreadyExists\n\t}\n\n\t// Increment balance of the recipient address\n\ttoBalance, err := s.basicNFT.BalanceOf(to)\n\tif err != nil {\n\t\treturn err\n\t}\n\ttoBalance += 1\n\ts.basicNFT.balances.Set(to.String(), toBalance)\n\n\t// Set owner of the token ID to the recipient address\n\ts.basicNFT.owners.Set(string(tid), to)\n\n\ts.basicNFT.Mint(to, tid)\n\n\ts.basicNFT.afterTokenTransfer(zeroAddress, to, tid, 1)\n\n\treturn nil\n}\n"},{"name":"onbloc_test.gno","body":"package onbloc_test\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/grc/grc721\"\n\t\"gno.land/p/demo/json\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n\n\tpusers \"gno.land/p/demo/users\"\n)\n\nvar (\n\tadmin std.Address = \"g1kpptltmd8jmwq5et5udh3ld8qq4ksqm9kj0vs4\"\n\tOnbloc_Test              = NewNFTWithMetadata(\"Onbloc_Test\", \"OBL\")\n)\n\nfunc init() {\n}\n\nfunc mintNFT(owner std.Address, n uint64) {\n\tcount := Onbloc_Test.TokenCount()\n\tfor i := count; i \u003c count+n; i++ {\n\t\ttid := grc721.TokenID(ufmt.Sprintf(\"%d\", i))\n\t\terr := mint(owner, tid)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n}\n\n// Getters\n\nfunc BalanceOf(user pusers.AddressOrName) uint64 {\n\tbalance, err := Onbloc_Test.BalanceOf(users.Resolve(user))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc Name() string {\n\treturn Onbloc_Test.Name()\n}\n\nfunc Symbol() string {\n\treturn Onbloc_Test.Symbol()\n}\n\nfunc TokenURI(tid grc721.TokenID) string {\n\ttokenURI, err := Onbloc_Test.TokenURI(tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn tokenURI\n}\n\nfunc TokenMetadata(tid grc721.TokenID) string {\n\tmetadata, err := Onbloc_Test.TokenMetadata(tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tmetadataNode := json.ObjectNode(\"\", nil)\n\n\tmetadataNode.AppendObject(\"image\", json.StringNode(\"image\", metadata.Image))\n\tmetadataNode.AppendObject(\"imageData\", json.StringNode(\"imageData\", metadata.ImageData))\n\tmetadataNode.AppendObject(\"externalUrl\", json.StringNode(\"externalUrl\", metadata.ExternalURL))\n\tmetadataNode.AppendObject(\"description\", json.StringNode(\"description\", metadata.Description))\n\tmetadataNode.AppendObject(\"name\", json.StringNode(\"name\", metadata.Name))\n\tmetadataNode.AppendObject(\"backgroundColor\", json.StringNode(\"backgroundColor\", metadata.BackgroundColor))\n\tmetadataNode.AppendObject(\"animationUrl\", json.StringNode(\"animationUrl\", metadata.AnimationURL))\n\tmetadataNode.AppendObject(\"youtubeUrl\", json.StringNode(\"youtubeUrl\", metadata.YoutubeURL))\n\n\tattributesNode := json.ArrayNode(\"attributes\", nil)\n\n\tfor _, trait := range metadata.Attributes {\n\t\ttraitNode := json.ObjectNode(\"\", nil)\n\t\ttraitNode.AppendObject(\"displayType\", json.StringNode(\"displayType\", trait.DisplayType))\n\t\ttraitNode.AppendObject(\"traitType\", json.StringNode(\"traitType\", trait.TraitType))\n\t\ttraitNode.AppendObject(\"value\", json.StringNode(\"value\", trait.Value))\n\n\t\tattributesNode.AppendArray(traitNode)\n\t}\n\n\tmetadataNode.AppendObject(\"attributes\", attributesNode)\n\n\tmetadataStr, err := json.Marshal(metadataNode)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn string(metadataStr)\n}\n\nfunc OwnerOf(tid grc721.TokenID) std.Address {\n\towner, err := Onbloc_Test.OwnerOf(tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn owner\n}\n\nfunc IsApprovedForAll(owner, user pusers.AddressOrName) bool {\n\treturn Onbloc_Test.IsApprovedForAll(users.Resolve(owner), users.Resolve(user))\n}\n\nfunc GetApproved(tid grc721.TokenID) std.Address {\n\taddr, err := Onbloc_Test.GetApproved(tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn addr\n}\n\n// Setters\n\nfunc Approve(user pusers.AddressOrName, tid grc721.TokenID) {\n\terr := Onbloc_Test.Approve(users.Resolve(user), tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc SetApprovalForAll(user pusers.AddressOrName, approved bool) {\n\terr := Onbloc_Test.SetApprovalForAll(users.Resolve(user), approved)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc SafeTransferFrom(from, to pusers.AddressOrName, tid grc721.TokenID) {\n\terr := Onbloc_Test.SafeTransferFrom(users.Resolve(from), users.Resolve(to), tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(from, to pusers.AddressOrName, tid grc721.TokenID) {\n\terr := Onbloc_Test.TransferFrom(users.Resolve(from), users.Resolve(to), tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc SetTokenURI(tid grc721.TokenID, tURI grc721.TokenURI) bool {\n\tresult, err := Onbloc_Test.SetTokenURI(tid, tURI)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn result\n}\n\n// Admin\n\nfunc Mint(to pusers.AddressOrName, tid grc721.TokenID) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\terr := mint(users.Resolve(to), tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(tid grc721.TokenID) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\terr := Onbloc_Test.Burn(tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc mint(to std.Address, tid grc721.TokenID) error {\n\terr := Onbloc_Test.Mint(to, tid)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tattributes := []grc721.Trait{}\n\tattributes = append(attributes, grc721.Trait{\n\t\tDisplayType: \"string\",\n\t\tTraitType:   \"Type1\",\n\t\tValue:       \"Alien\",\n\t})\n\tattributes = append(attributes, grc721.Trait{\n\t\tDisplayType: \"string\",\n\t\tTraitType:   \"Type2\",\n\t\tValue:       \"Police Uniform\",\n\t})\n\tattributes = append(attributes, grc721.Trait{\n\t\tDisplayType: \"string\",\n\t\tTraitType:   \"Type3\",\n\t\tValue:       \"Handsome\",\n\t})\n\tattributes = append(attributes, grc721.Trait{\n\t\tDisplayType: \"string\",\n\t\tTraitType:   \"Typ4\",\n\t\tValue:       \"Very extremely red\",\n\t})\n\n\tOnbloc_Test.SetTokenMetadata(tid, grc721.Metadata{\n\t\tName:            \"Onbloc_Test\",\n\t\tDescription:     \"A GnoPunk is a 24x24 pixel, 8-bit-style unique avatar that comes in the form of an NFT. Their creation began as an experiment, conducted by software developers Matt Hall and John Watkinson in 2017.\",\n\t\tAttributes:      attributes,\n\t\tBackgroundColor: \"#FFFF00\",\n\t})\n\n    Onbloc_Test.SetTokenURI(tid, \"https://raw.githubusercontent.com/onbloc/gno-token-resource/refs/heads/main/grc20/images/gno_land_r_onbloc_bar.svg\")\n\n\treturn nil\n}\n\n// Render\n\nfunc Render(path string) string {\n\tswitch {\n\tcase path == \"\":\n\t\treturn Onbloc_Test.RenderHome()\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\n// Util\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"},{"name":"type.gno","body":"package onbloc_test\n\nconst (\n\tTransferEvent       = \"Transfer\"\n\tApprovalEvent       = \"Approval\"\n\tApprovalForAllEvent = \"ApprovalForAll\"\n)\n"},{"name":"utils.gno","body":"package onbloc_test\n\nimport (\n\t\"std\"\n)\n\nvar zeroAddress = std.Address(\"\")\n\nfunc isValidAddress(addr std.Address) error {\n\tif !addr.IsValid() {\n\t\treturn ErrInvalidAddress\n\t}\n\treturn nil\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4GJRb8y0ZvhQ839glrHWmkjazoTOgl611Ns84+4R/Qc"},"signature":"vRAzV+pkDs7bg80SANNk8gTNoqZ84CF2yCeQMJZSzQIHK5UPXpBfcMCNdKdqhgPqs+cRn+oBbz7sGj2BaASZNA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"3509068"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1z6qs6t88rhlafv6qqu5f5xxsax83zczunsc0v0","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"j/ZqrMEtPETElKpkrVe5qBK1phKl7xKWqVwdihiTgxVz7TOGZf7CuxDIpqbzvWTTtdQ1F2ipG4GveKMrHii/xA=="}],"memo":""},"blockNum":"3519936"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1snqxvclhr7cw3rdcvzqm7z026hfnrx69c6ujdh","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"2Z2C+61qGBdsXiP0N1AAfWkv9Ekl3sXIEhFZ02fFuPNz8kQzwcsgnDelXkyIC+rFkLRFgLYBrO42W4/XnSMNxA=="}],"memo":""},"blockNum":"3537154"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1snqxvclhr7cw3rdcvzqm7z026hfnrx69c6ujdh","package":{"name":"eco_test","path":"gno.land/r/g1snqxvclhr7cw3rdcvzqm7z026hfnrx69c6ujdh/eco_test","files":[{"name":"package.gno","body":"package eco_test\n\nfunc Eco(word string) string {\n  return word\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4+v7eppXTMwU9Ld8DCQ0J/bPmg8eaYJ8Nm8mdpcI5OF"},"signature":"8pt8PnOHAnYduqC8nhqTzSAUiSf4loj6IzbxWFgHuAhGUile5Ts1jc9cqDF2h6UeEol5CNhrfIMsJn1jykMIRg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"3537216"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1snqxvclhr7cw3rdcvzqm7z026hfnrx69c6ujdh","send":"","pkg_path":"gno.land/r/g1snqxvclhr7cw3rdcvzqm7z026hfnrx69c6ujdh/eco_test","func":"Eco","args":["hello"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4+v7eppXTMwU9Ld8DCQ0J/bPmg8eaYJ8Nm8mdpcI5OF"},"signature":"634fNkByseC7SNzaRSbLH/MQ1qk4jP168lQLHYcUsMALhGSx9l0+MjnGRpHXoIILOuo10qZyV6C1h4LGojlg/Q=="}],"memo":"Called through gno.studio"},"blockNum":"3537227"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1snqxvclhr7cw3rdcvzqm7z026hfnrx69c6ujdh","send":"","pkg_path":"gno.land/r/g1snqxvclhr7cw3rdcvzqm7z026hfnrx69c6ujdh/eco_test","func":"Eco","args":["CURG 11"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4+v7eppXTMwU9Ld8DCQ0J/bPmg8eaYJ8Nm8mdpcI5OF"},"signature":"iSBOOnhL384vwM9eDAeeiL6+kZiY99MBH5VSUhRzpA9AP/TqGaAoi6TSq4UiKXFz9yRhOeRxcOTf7ndV6M6JQQ=="}],"memo":"Called through gno.studio"},"blockNum":"3537241"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1snqxvclhr7cw3rdcvzqm7z026hfnrx69c6ujdh","send":"","pkg_path":"gno.land/r/g1snqxvclhr7cw3rdcvzqm7z026hfnrx69c6ujdh/eco_test","func":"Eco","args":["ㄹㅇㅋㅋ"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4+v7eppXTMwU9Ld8DCQ0J/bPmg8eaYJ8Nm8mdpcI5OF"},"signature":"zIljL+XD7yDAomPDdPs2H46cTHbxv3d9NPChBFFKtrUju9a+/TiHZw5YEcSyQt7WN4P4F19z/jmQbfRcFUZODQ=="}],"memo":"Called through gno.studio"},"blockNum":"3537420"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1snqxvclhr7cw3rdcvzqm7z026hfnrx69c6ujdh","send":"","pkg_path":"gno.land/r/g1snqxvclhr7cw3rdcvzqm7z026hfnrx69c6ujdh/eco_test","func":"Eco","args":["REAL KK"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4+v7eppXTMwU9Ld8DCQ0J/bPmg8eaYJ8Nm8mdpcI5OF"},"signature":"6agTygXf9aLm6mIs3dwH244stX8jdDEfcTUvVzSedEhSqppV31KpwONh2uNJJRuiIMNzdqnb2FjTPn9r6tmogQ=="}],"memo":"Called through gno.studio"},"blockNum":"3537427"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g10ahumypepd2qcrau7kahv8q78f7jcdns5tn54a","send":"20000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","malek_","github.com"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AidlxNTtkl1dDNCgxrSNVJKYWZdC9yrixvgSAP6U6WYX"},"signature":"GLCg02XR4nIsy7ahZ1/eqUXwr0frbTaPV7CnRTUEMXASTVLA0Lqh3VIN4+VAzY3hDBqWR8S1ouM39L1p/Y4U4w=="}],"memo":"Called through gno.studio"},"blockNum":"3546200"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hrfvdh7jdvnlxpk2y20tp3scj9jqal3zzu7wjz","send":"20000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mouss","https://github.com/mous1985"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7UerjwiIlPJEvsPj92M2g1R3znO3Cfdeo3PBR4fmlQp"},"signature":"kdx8MFrSJ2wsmvycfsUJeb5nDEjieFxvSpYSMRM+q386N0YLgiIPXDmmARlqKZD99R2ujN4Mks48bhZKwtQs3g=="}],"memo":"Called through gno.studio"},"blockNum":"3546226"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1hrfvdh7jdvnlxpk2y20tp3scj9jqal3zzu7wjz","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"fwRPLieUoOg7tZ//+lBY2mL9hYkOM5WqKy9WdzjmykJVT+h1G9ZFhQCkYe1/gF/9E8mkKRMVTvOQSg3LBtyaJw=="}],"memo":""},"blockNum":"3546239"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10ahumypepd2qcrau7kahv8q78f7jcdns5tn54a","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"J83qRz95svDqDgVc/74ASQ8hxbejj+EsaTajVRx9Rk8jK7j/dUpYxH2ti7YBqinP0PC6Z14W3C0nkMGh3eU/kQ=="}],"memo":""},"blockNum":"3546251"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1hrfvdh7jdvnlxpk2y20tp3scj9jqal3zzu7wjz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"C0DUCDjDJS9aF0aHDz/VlDLnDvDRlnjWCYAgQy1kmFFRuaxcHzh3nXolt8c1i61CCkXQScBM8Oe/aK7g3IezUg=="}],"memo":""},"blockNum":"3546254"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hrfvdh7jdvnlxpk2y20tp3scj9jqal3zzu7wjz","send":"","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mouss","https://github.com/mous1985"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7UerjwiIlPJEvsPj92M2g1R3znO3Cfdeo3PBR4fmlQp"},"signature":"cWPHjpBzb8SjHohEuSCqeRr56iwvG1z/egNpbNfmclAYWPkQ4g76C8DKIQVMZ/vMSELMlLd2Dj+y1EWfGBrqkw=="}],"memo":"Called through gno.studio"},"blockNum":"3546271"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hrfvdh7jdvnlxpk2y20tp3scj9jqal3zzu7wjz","send":"20000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mouss","https://github.com/mous1985"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7UerjwiIlPJEvsPj92M2g1R3znO3Cfdeo3PBR4fmlQp"},"signature":"wr8KjUmH8ltW1wzFQ75hOKl6OlSkPENvBH7/q30xjsoB0BO25EoXjM0NcpfYVyHSFqasNycRvgwe1Gp1eUV5qg=="}],"memo":"Called through gno.studio"},"blockNum":"3546280"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hrfvdh7jdvnlxpk2y20tp3scj9jqal3zzu7wjz","send":"20000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","_mouss_","https://github.com/mous1985"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7UerjwiIlPJEvsPj92M2g1R3znO3Cfdeo3PBR4fmlQp"},"signature":"IaPw/ooSFtXB5HQA8Y8LCpirnkAZ096bi6LzNkQyGUZ289gFlisHATaZrEP4zosOxcvQ7V0wEbbwFSkUxksLUA=="}],"memo":"Called through gno.studio"},"blockNum":"3546302"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hrfvdh7jdvnlxpk2y20tp3scj9jqal3zzu7wjz","send":"2000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mouss_888","https://github.com/mous1985"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7UerjwiIlPJEvsPj92M2g1R3znO3Cfdeo3PBR4fmlQp"},"signature":"Msw0tm/0rUClBNmW0hnV0+4oIxXRnZF259zchX2XH5tv1A6JPZjeeB+z36T5VwDTU3PaBXuJn8Ib7QG4yaRXVg=="}],"memo":"Called through gno.studio"},"blockNum":"3546357"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hrfvdh7jdvnlxpk2y20tp3scj9jqal3zzu7wjz","send":"20000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","mouss_888","https://github.com/mous1985"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7UerjwiIlPJEvsPj92M2g1R3znO3Cfdeo3PBR4fmlQp"},"signature":"C1uG4zgvKPEShBdQhGFig5wpYVqOwkf3Fu4eJeUsuVsdtP5hR9u0WYMZdMUWhJk5eDUTM5WblBwQ77I/3u4axw=="}],"memo":"Called through gno.studio"},"blockNum":"3546369"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1hrfvdh7jdvnlxpk2y20tp3scj9jqal3zzu7wjz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"y480cn5pJERd86WT5L+9CwhgFZ8QR38/snrmaGiQFo8oJfXAp5+bOyGGJg0JVwsS/WWQGSTKvXNU0w46+GvZnw=="}],"memo":""},"blockNum":"3546452"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1hrfvdh7jdvnlxpk2y20tp3scj9jqal3zzu7wjz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"JHkQcfaSvKeamN/wuy/ZQfRCTR3+6sAJcTcpZiJzrFsk+Flhm3XCB7UXznIYSWu9D0pi2j3ImZ4P0w9hK7oMdw=="}],"memo":""},"blockNum":"3546465"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1hrfvdh7jdvnlxpk2y20tp3scj9jqal3zzu7wjz","amount":"5000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"DhqrGld2h9Vn0f0AuLlrHZT/U2n4C0lBFINhaQ6qRJIFvxe/l5huMCF1UOAtWvMJw5PgymTZeKpj86DGzhSGFg=="}],"memo":""},"blockNum":"3546473"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1hrfvdh7jdvnlxpk2y20tp3scj9jqal3zzu7wjz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"af7timz+Qbd7NwCQG4JcZtLFYuvs8rn6kqZPgbEEHPhBUO0KkydUFKcSjqeI4jCxYGVA9eLIJwyN3SCPtitJrw=="}],"memo":""},"blockNum":"3546478"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1hrfvdh7jdvnlxpk2y20tp3scj9jqal3zzu7wjz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"eruaUfngb6AiZ04ObufejdBvyW9+jaMWoGWamazJddU65lWudUIXlJVNSA6SctJIGnguExk9ZBUZReiOArldXA=="}],"memo":""},"blockNum":"3546563"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1hrfvdh7jdvnlxpk2y20tp3scj9jqal3zzu7wjz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"EsLr9rhSLH0ml5BFBJwm9AchO+w+gJGy8RiwFm54iOpbJs63Gj8r7PqxMVN0dKyK8VSuXG35uBj6EvaOjRCXPA=="}],"memo":""},"blockNum":"3546619"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","to_address":"g105mv9pq5uqzfm82vj5caef0s2ddxxa88ha3fa4","amount":"111000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"1DVhgbrdJquQuktCL0aOe7aorLMjiBr60w+NuRv4j3cMOR7A2+PJN+O8PU0N1Nnn8xaCtc83Luw5Q7CjjDl+KQ=="}],"memo":""},"blockNum":"3566667"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/teritori/social_feeds","func":"CreatePost","args":["1","0","2","{\"message\":\"testo\",\"files\":[],\"gifs\":[],\"hashtags\":[],\"mentions\":[],\"title\":\"\",\"createdAt\":\"2024-11-17T23:06:43.273Z\"}"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"5oh6Uws1by+kNuFieemoPkMsmTi7D7Z5YEA4TzUQV2RhFMn9xjboPsAf1jI46Y4RqFDU+Z3LsdXwAlWN75fK9A=="}],"memo":""},"blockNum":"3578214"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"","pkg_path":"gno.land/r/teritori/social_feeds","func":"CreatePost","args":["1","74","2","{\"message\":\"test reply\",\"files\":[],\"gifs\":[],\"hashtags\":[],\"mentions\":[],\"title\":\"\",\"createdAt\":\"2024-11-17T23:07:06.525Z\"}"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"L8NErreuO3q+4IXggplpYl/S2DKMddvrRKvJlm1+wfUJpFZd2yyAS9ZblV0NbtXxeWYRd1+7HpOqf8XUSNDZ0g=="}],"memo":""},"blockNum":"3578222"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1cwvup6rhd4cr3757d9c0vyr9f4zqlp320uxlv6","send":"1000000ugnot","pkg_path":"gno.land/r/teritori/social_feeds","func":"TipPost","args":["1","gnotest4-74"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5352e4DP/NhDY2KRavUFiF67BI22HKz+N90hGxe9fxf"},"signature":"PiQop0NE0NpOy2wiRnEEQEgrx2bNHCeCy0cACcq44hE2GuB9wli9udebutfn6q9xPVrwg9ygDECqqsFjnRT8cQ=="}],"memo":""},"blockNum":"3582549"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1cwvup6rhd4cr3757d9c0vyr9f4zqlp320uxlv6","send":"1000000ugnot","pkg_path":"gno.land/r/teritori/social_feeds","func":"TipPost","args":["1","gnotest4-75"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5352e4DP/NhDY2KRavUFiF67BI22HKz+N90hGxe9fxf"},"signature":"Hu9f7vRvKHnKEqq5rzPpkxjUlwFVdpBeQbd2Ad7Iy+BwJwylS1FyVq10vxlKBkTQUhl5vuM/EjkPV7tdEEeZZA=="}],"memo":""},"blockNum":"3582556"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1cwvup6rhd4cr3757d9c0vyr9f4zqlp320uxlv6","send":"1000000ugnot","pkg_path":"gno.land/r/teritori/social_feeds","func":"TipPost","args":["1","gnotest4-74"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5352e4DP/NhDY2KRavUFiF67BI22HKz+N90hGxe9fxf"},"signature":"AuDdcJoEggK6H79MVtW+BhuSRXBPyEbpeXGBQkEjtB9T9j51OPgzImj9fHX+sWHj1xQTkhZfyawzDmrjcqXVHQ=="}],"memo":""},"blockNum":"3582595"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g108cszmcvs4r3k67k7h5zuhm4el3qhlrxzhshtv","send":"42000000ugnot","pkg_path":"gno.land/r/teritori/social_feeds","func":"TipPost","args":["1","gnotest4-73"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArDpFd2owLPsaNRQ2xWL/ELLJVVwo7OoPqIi0OtZJV7/"},"signature":"YnURYhrsHOJTMeAZm4f4usY3R/N2PAK0lLl60374dJ8bxGNkXOCVlo8Z4ceKeuODP/LV+v3Jdy4DhzbSYUzqsQ=="}],"memo":""},"blockNum":"3582627"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1cwvup6rhd4cr3757d9c0vyr9f4zqlp320uxlv6","send":"1000000ugnot","pkg_path":"gno.land/r/teritori/social_feeds","func":"TipPost","args":["1","74"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5352e4DP/NhDY2KRavUFiF67BI22HKz+N90hGxe9fxf"},"signature":"VxTJ3xVSVCYMqKJLukZJ7uCRwJZF8EuIysCcb6TwEBQ2bYUVvUO9RdOjPJCwEpJCH/ySIED4nqJNkgIhOOU2LQ=="}],"memo":""},"blockNum":"3582742"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1cwvup6rhd4cr3757d9c0vyr9f4zqlp320uxlv6","send":"1000000ugnot","pkg_path":"gno.land/r/teritori/social_feeds","func":"TipPost","args":["1","74"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5352e4DP/NhDY2KRavUFiF67BI22HKz+N90hGxe9fxf"},"signature":"lVn0zEGJMCplLZCEd5VvnYZfWwIahOCYWG+QgEil3O0CRJLZWThRizTuX1CxA4+IRyUJYZ39/7stSM1ylnfqpw=="}],"memo":""},"blockNum":"3582849"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16a7etgm9z2r653ucl36rj0l2yqcxgrz2jyegzx","send":"","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gno.land/r/gnoswap/v2/gns","gnot","1000000","EXACT_IN","gno.land/r/gnoswap/v2/gns:gno.land/r/onbloc/bar:3000*POOL*gno.land/r/onbloc/bar:gno.land/r/onbloc/usdc:3000*POOL*gno.land/r/onbloc/usdc:gno.land/r/demo/wugnot:3000","100","11538197"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuKyXEEqOqqnDf1ULdiKaSXs6eMA86UYLYD6t03pteAG"},"signature":"jK2u6PAC1B9VZw8J659BCgezl4EDvTnSizGoY6/HK/R5lWC6D6ac8Vx3kgUqLt60FHRFVeU1Fy7e9K66nwtJ8w=="}],"memo":""},"blockNum":"3586701"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16a7etgm9z2r653ucl36rj0l2yqcxgrz2jyegzx","send":"","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gno.land/r/onbloc/test01","gno.land/r/onbloc/test02","1000000","EXACT_IN","gno.land/r/onbloc/test01:gno.land/r/onbloc/test02:100","100","993404"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuKyXEEqOqqnDf1ULdiKaSXs6eMA86UYLYD6t03pteAG"},"signature":"aAjORS80hlRRrLHNkcZ6rmEsdUKK7sQbob5hGBS/xAFIAoMWkiSD1+gwZJe1HR0tPkhokhcZYse6lQWqkdT29w=="}],"memo":""},"blockNum":"3586739"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16a7etgm9z2r653ucl36rj0l2yqcxgrz2jyegzx","send":"","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gno.land/r/onbloc/test01","gno.land/r/onbloc/test02","1000000","EXACT_IN","gno.land/r/onbloc/test01:gno.land/r/onbloc/test02:100","100","993404"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuKyXEEqOqqnDf1ULdiKaSXs6eMA86UYLYD6t03pteAG"},"signature":"gGxMKytFh/B0McPknmawsePk0ASx1AMnfiQSl8owiSMKCeCe4iRQ75wu5/847+JlDcA8KuMfWy6N1Kt/VnbMuA=="}],"memo":""},"blockNum":"3586773"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16a7etgm9z2r653ucl36rj0l2yqcxgrz2jyegzx","send":"1000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/gnoswap/v2/gns","1000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/onbloc/usdc:3000*POOL*gno.land/r/onbloc/usdc:gno.land/r/gnoswap/v2/gns:10000","100","952515"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuKyXEEqOqqnDf1ULdiKaSXs6eMA86UYLYD6t03pteAG"},"signature":"SaQ0LkmLbp8gJR3FDMbRaoCsGH3kM3iUjPgXpam8wpQuibPTTWu1hJaNq+I1ne59PIkYte2iUXpNOzjul2O8IQ=="}],"memo":""},"blockNum":"3586784"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16a7etgm9z2r653ucl36rj0l2yqcxgrz2jyegzx","send":"1000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/gnoswap/v2/gns","1000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/onbloc/usdc:3000*POOL*gno.land/r/onbloc/usdc:gno.land/r/gnoswap/v2/gns:10000","100","952515"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuKyXEEqOqqnDf1ULdiKaSXs6eMA86UYLYD6t03pteAG"},"signature":"rIh2rptko435sAkWtAU4nFzMIsG/G9ziixZFgIPjBkYAKdBoQdt0jSrTFbAdapQppzLhllIiVHhSklYeylHKzA=="}],"memo":""},"blockNum":"3587191"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"gaclD/r5KoSM3edSyAdoiAjAajtTDWxfWH9qBa9XFgsH9T5HRDWW1qCex0y/xWYL4xzXxvKiA45j996HgYYTzQ=="}],"memo":""},"blockNum":"3589219"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1lv4mqg96hkhyrd04tlnu2w4pq6jufz43cm7maf","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"PX1NpvDJVTS30TTyvHfpaJgERLxjNBuYE2VzNxuhE4pt1etyFQrLf2imIBTRjTl9o/nDg+z0EBV5xNxFu3WsCA=="}],"memo":""},"blockNum":"3590725"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"nKdJEgKL1HEbJ+CRu40nEypSlMapXj3vIUTR/O1Qsa1uXGRvivEuq8csH42ErEluW8Lj+/F8o91btay+eb0Q1A=="}],"memo":""},"blockNum":"3590741"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10905rstxf5tzj0w6gguaa76ma7s32v48v5a76p","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"w77SxBJYFDuNHhvnYxQqtYRSrMmfam50RmLst/ko/4oE73PgMPms0+IKoOvXPGZmqJzirUzge12gQ+Eqbje1+w=="}],"memo":""},"blockNum":"3590757"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g13yufths840y72wvq7gm6pmev49tcl0hs3393wc","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"hGQuREixmEO7Lkj96cZDqEmJbewFxjCxP7kVJjp/jJlfTm1RSCM32eeqln0GJTNlsADnSX2Bv2sW5kQESPiVRQ=="}],"memo":""},"blockNum":"3590768"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1sd2hazs3wgxj0xm2v07dycg27r583vjehxaxhk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Fbdt0h2ynU32QfWPbHtwpGkTiERUGBCaMjvGfEYtpN5w1fagXiJEhE7wGlWQ55MWAa92yadtZ3/YgQLM4zyYKg=="}],"memo":""},"blockNum":"3590784"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g13jwukasz0azz7n4dern3n2t6j33vg5sgs9r2rt","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"3DiZPk4nmUzHD5pUyIUZCSwgyMI1d7doLRcAmSrTFOUqmAieiMNunv7ox1nRmYXsHgNra5woD8Cw5yGw7nJDZw=="}],"memo":""},"blockNum":"3590815"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1lrgp680d82jzu43tzsl6jd20trhy3wc8fg7q6c","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ASI2NQAqvcHVG/l32DHIc44dsFPVFCWYW8d7nFfs6vh6pIL14G9OBD4gyy2jBBwQY6LrDqzfxxh2amjK5O4F8w=="}],"memo":""},"blockNum":"3590827"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g19pvvwvz95attg49l9ru8fen9mpf6wrtpwkasnq","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"7Z5JnGxlD/i8TS+RD0x6yYnRrAir0VTeFa7Mg1lMLKQRGBlUz46Dc8oKAAOhjaYyUE+44QWa7QdzxlcoDyuLwA=="}],"memo":""},"blockNum":"3590842"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ezdqun2d4e0wpn2kgk67q48q5scts2klz5uhyk","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"q/f4Itv/pWRnmMKnbqxYmzvAHtR51CQWJo6KtLDJTUdB/roiW2jF1IDHpKLvOfr+TL/cZa6Obev/MpYMS4LC2w=="}],"memo":""},"blockNum":"3590853"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1jxa6ycu6qnfsa7duzd24pfcu6hqwj0glya7ujy","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"FbD6yjY+iVDoBg0dky3+qCmYsEhhRsLXN5/kD61hmnBb91DLA/7cv/xEulQ5NsI7UPlhHcxDgh9nvler3a/y8A=="}],"memo":""},"blockNum":"3590864"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1vlqtn6pukdxy8t2rvl7e9sqf4vdzac4g4vne2n","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"iZixzHNfu2YwMAU1zzy21zBsfi9qcSqrB5yLiK7xI3h+ae7jr4iw3TE21mTQQ8g6V8gMWB9wt5gBkeZQM3NDRg=="}],"memo":""},"blockNum":"3590875"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g10gpn7rwu4s9s5mcydksr2520z2mqwd3nlg9whm","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ZnPoVA8ZNPO/EgZkb1BITF8MfdQ2sb6Q07ip6olcD1ZKDSXGMTOgqPZLnZLDxl9lBjdWPK+JgQhMGDaj+C+xLA=="}],"memo":""},"blockNum":"3590889"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g13gmezwvvqxkmj4jfc4j7sjgz5xlujdd5vw722n","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"7UZcVLeFM6T42n2BC+kLR9inPI6ZFzkYrdVy3/6uBkJ4K9my4ctFoZtpmAojFR7R/S54pa1J0joBOT0zY+BjlA=="}],"memo":""},"blockNum":"3590899"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1pa0rcdua5v9d4vf09ksnnl7t96nfkf3wp379jm","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"5apTFhoGpAcHC4XeleYOzg5ygGOQkQCvpsERVz86GA5lHEKnhbyhAe/kC6PDW/oAUOrxZRJnGdNUY621KnW2+A=="}],"memo":""},"blockNum":"3590911"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1fgv3xmlegvpzuv57qw793j4cyrkjkyhltkafth","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"/wfNfa1AvGwu6AbqKHBiIJApsJRE+r0rEkBAn4NpXg0oZ00RsNhA3tBkkeiIwT2ryErQ0+y32m5f3GBdc0OPuw=="}],"memo":""},"blockNum":"3590923"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g14wa3fr46wurex7uj8uhka3uqcuql2eztqqkezz","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"/6Oy8BFl/tkt02M6t626lmD6lA3h4yyrmjfW5UdnoW013tlxhTszYEUFVeo06RGzol7xOYcnNLgvkKUfo93ksA=="}],"memo":""},"blockNum":"3590935"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g15vphsnud2cq52qawjshkv2umpwkpwkk7gz7vg3","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"we1hS3VCPH+/Hw33PdplIKByKx4gdLEZLhkcVvgyMNYfg+tOPKp53UGcSbG3ICd8Ve1QFpGJ8cWNsu7yhDUYcQ=="}],"memo":""},"blockNum":"3590946"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g15vphsnud2cq52qawjshkv2umpwkpwkk7gz7vg3","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"5000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6IfZaya11pUgd3A12vbnBjkQdxUSrnM5tfDa+asL/Q7"},"signature":"hAC5Yf5K7X5hP4d7098TUp/AbhqbuQDqm+M9hKHAfXEVmy6UxdULwi2YwCIOKH54qFxtIACWCRVDZ0LABQpXtw=="}],"memo":""},"blockNum":"3591081"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g14wa3fr46wurex7uj8uhka3uqcuql2eztqqkezz","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"5000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au9F0AwBzwRVkuYfGgeOYVaztAfr/PpNNyDuSqasVdbF"},"signature":"RrY+yqdPGIuso5fXIi6DsMhADYTTLNM485vQYrT21t0TwC8xcNtu5YLn4ebr91V1d5avb9nDz2/Q7Ppn6AZLgw=="}],"memo":""},"blockNum":"3591091"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1fgv3xmlegvpzuv57qw793j4cyrkjkyhltkafth","to_address":"g1vjrx0lks65yefnsz4xk92vugda2z25esh8g8q9","amount":"5000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5qbzZf9G30P5GObxNc/hEXtHfeZAte2NTgHts4IsXbz"},"signature":"1u+8XCHvwlFkhtFdholWcKUWJU1DkGEsY0fN53Vwf5MzbZrVAC8DGHAGvyx/ES+3s79ntLCwJnq3NxptZzQ5HQ=="}],"memo":""},"blockNum":"3591100"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1pa0rcdua5v9d4vf09ksnnl7t96nfkf3wp379jm","to_address":"g10905rstxf5tzj0w6gguaa76ma7s32v48v5a76p","amount":"5000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Au3fTcvwXpcXgaFX/EdLaeqpIkn46gAOoBS8vmMehYfc"},"signature":"EG5NXmPqkG+8XR0IS2NGjjS00lh0t5zb/8uDDgstCStOKvBO5H+BjXqQ0t4r5NRGIZQXK5xMYLRcOwqdnyh+Wg=="}],"memo":""},"blockNum":"3591110"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13gmezwvvqxkmj4jfc4j7sjgz5xlujdd5vw722n","to_address":"g10905rstxf5tzj0w6gguaa76ma7s32v48v5a76p","amount":"5000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3vOS4VNerUr0bBahhLZwvUv2z/EL2ldE+r79P0GfA9m"},"signature":"g/SLrITRQUZebRWolojHy2Te6lak6Ng7wkep6CGJzzpNuwVHH7HoqBd5/rInXADwTw96qCSb48cNG4oypJVyEA=="}],"memo":""},"blockNum":"3591118"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g10gpn7rwu4s9s5mcydksr2520z2mqwd3nlg9whm","to_address":"g10905rstxf5tzj0w6gguaa76ma7s32v48v5a76p","amount":"5000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A82gRlIkTRgDYY3feb/T6+4XnJJddjfiZ3YbuEMOalFT"},"signature":"L+e3J3cqi+eypE44nhY3eC3NBs3TQAsUxAOGNFM17utn0GGK8+exOulTK8DyR/vPC0Seg2F6FkS1w/pT5MKNWg=="}],"memo":""},"blockNum":"3591127"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1vlqtn6pukdxy8t2rvl7e9sqf4vdzac4g4vne2n","to_address":"g10905rstxf5tzj0w6gguaa76ma7s32v48v5a76p","amount":"5000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A47YPWPxrwQT7BPIA+Xxha5WpB3ZpGx5k3G/CzgjLBOv"},"signature":"aEMurIdwfyCP8q4BYAlKrrpLevivmaHrP3QapbqA6ScOLBK1Uq8o00ySB2+L9C3V1zh0oCYY8J/9OxjVwNFM+A=="}],"memo":""},"blockNum":"3591137"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jxa6ycu6qnfsa7duzd24pfcu6hqwj0glya7ujy","to_address":"g13yufths840y72wvq7gm6pmev49tcl0hs3393wc","amount":"5000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aixr7TO0hH41jj7GZGEkd5WqElPROqihff6i4jj58G6w"},"signature":"jDbq3uHyKvR4l+47LxJ7kAc2Am26+Vh2S8rgE/Eh1qlWiyxYvsb9He/kKZLy5zvIk19mMWigxeFpOa2kOfZwjQ=="}],"memo":""},"blockNum":"3591151"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ezdqun2d4e0wpn2kgk67q48q5scts2klz5uhyk","to_address":"g13yufths840y72wvq7gm6pmev49tcl0hs3393wc","amount":"5000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyGOaf7ybeHStjUIoFvBUKpv3XufdbiF6hQioBfk2ITO"},"signature":"wldKfQtEXr/I26aBe0RK3mOQ4lIdqAoKYA+AIDgX2HQHM1YZOqj3ql+N1ym/FNOToNtxPomzlLKZmPzrlhz30Q=="}],"memo":""},"blockNum":"3591160"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g19pvvwvz95attg49l9ru8fen9mpf6wrtpwkasnq","to_address":"g13yufths840y72wvq7gm6pmev49tcl0hs3393wc","amount":"5000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqXnZrqqe2A3ieYuOdhm5QnhdYulojimwNmNN/Yl1dFX"},"signature":"vVeUIetBVcCra7OCFPNp7tYxjhkWSSrUeAhz+PEYURomvd4X9dSL8Aa4TAPxaNkTRaO2M5sTy120Q2jJvMSPxQ=="}],"memo":""},"blockNum":"3591166"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1lrgp680d82jzu43tzsl6jd20trhy3wc8fg7q6c","to_address":"g13yufths840y72wvq7gm6pmev49tcl0hs3393wc","amount":"5000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwlZODijIEKzLEZLHf4yI87Cp+zIJD3P3+veQyEU7ZIj"},"signature":"68WOU1IXQ/zvP5qGJcG8FwkVIEn+8LqT5hdW2rsWsY1stHGbwq53N/tHm9hvnZ5o5sINs4N+CP8zUyrx3OILyw=="}],"memo":""},"blockNum":"3591175"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13jwukasz0azz7n4dern3n2t6j33vg5sgs9r2rt","to_address":"g1lv4mqg96hkhyrd04tlnu2w4pq6jufz43cm7maf","amount":"5000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Axs3VwI9Kp0dLHzj6LYXIez61X9vcOG+PGiQnlNGJQIE"},"signature":"eCL6LpheqvNrEvFHmXTKnii1p/dl6FeFcAb+JqOC3VFDf66L5OlKeE9LqSKVMwv05Ak2aDBINAgLn/qcBgNQ6Q=="}],"memo":""},"blockNum":"3591187"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1sd2hazs3wgxj0xm2v07dycg27r583vjehxaxhk","to_address":"g1lv4mqg96hkhyrd04tlnu2w4pq6jufz43cm7maf","amount":"5000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4h6nZZzSQOBWHRqrQr3O6wFzidFm9dMThV43Ev+WEQZ"},"signature":"QQyP6QcPyZx8/+QFtTza/PoKhSymi1QB2R+ejC2vUtBaWnSUjOAckeQ5DgWPKfa6ZZpVGTxIzTJXBzNB7/pIcw=="}],"memo":""},"blockNum":"3591194"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1lv4mqg96hkhyrd04tlnu2w4pq6jufz43cm7maf","to_address":"g1lrgp680d82jzu43tzsl6jd20trhy3wc8fg7q6c","amount":"5000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgVC+4kHA8WF9uYuu2Se7kV0u6bVZ1bnyJBdgmT4ZJnO"},"signature":"qIGZq4ACDqLjkq2funYpBfx1WVTq5FpNVGRVT3SodaEoYqUmRUTK92+o91bJWiG7XG5oh/vdDTACgPtKim9aww=="}],"memo":""},"blockNum":"3591225"}
