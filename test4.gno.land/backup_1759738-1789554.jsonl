{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ngywvql2ql7t8uzl63w60eqcejkwg4rm4lxdw9","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1ngywvql2ql7t8uzl63w60eqcejkwg4rm4lxdw9","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1ngywvql2ql7t8uzl63w60eqcejkwg4rm4lxdw9","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1ngywvql2ql7t8uzl63w60eqcejkwg4rm4lxdw9","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["26"]},{"@type":"/vm.m_call","caller":"g1ngywvql2ql7t8uzl63w60eqcejkwg4rm4lxdw9","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["26","true"]},{"@type":"/vm.m_call","caller":"g1ngywvql2ql7t8uzl63w60eqcejkwg4rm4lxdw9","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1ngywvql2ql7t8uzl63w60eqcejkwg4rm4lxdw9","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1ngywvql2ql7t8uzl63w60eqcejkwg4rm4lxdw9","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["146"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Atgv/+TCwlR+jzjx94p4Ik0IuGET4J/q2q9ciaL4UOQh"},"signature":"CyPWtYLTJe7gUpuEMRrDhUiuzESR46FqCfWXfrx3JtFyPGQiHQnL3EzsSHqKcvAL1LZOg2MolPVhlqFNcV4R8g=="}],"memo":""},"blockNum":"1765404"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ngywvql2ql7t8uzl63w60eqcejkwg4rm4lxdw9","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1ngywvql2ql7t8uzl63w60eqcejkwg4rm4lxdw9","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1ngywvql2ql7t8uzl63w60eqcejkwg4rm4lxdw9","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1ngywvql2ql7t8uzl63w60eqcejkwg4rm4lxdw9","send":"15000000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/onbloc/foo","15000000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/onbloc/usdc:3000*POOL*gno.land/r/onbloc/usdc:gno.land/r/onbloc/obl:3000*POOL*gno.land/r/onbloc/obl:gno.land/r/onbloc/foo:3000,gno.land/r/demo/wugnot:gno.land/r/onbloc/foo:3000","95,5","32594236104"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Atgv/+TCwlR+jzjx94p4Ik0IuGET4J/q2q9ciaL4UOQh"},"signature":"lNqhMch+4UvpyJGtZO1TYvzJQOopa4OrJ/43LHHt8fp073/RS7ErJq4f0sTZ0/ws42M9uHTb5Rk1aLv/WHNxog=="}],"memo":""},"blockNum":"1765439"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ngywvql2ql7t8uzl63w60eqcejkwg4rm4lxdw9","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1ngywvql2ql7t8uzl63w60eqcejkwg4rm4lxdw9","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1ngywvql2ql7t8uzl63w60eqcejkwg4rm4lxdw9","send":"","pkg_path":"gno.land/r/onbloc/obl","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1ngywvql2ql7t8uzl63w60eqcejkwg4rm4lxdw9","send":"15000000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/onbloc/obl","15000000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/onbloc/usdc:3000*POOL*gno.land/r/onbloc/usdc:gno.land/r/onbloc/obl:3000,gno.land/r/demo/wugnot:gno.land/r/onbloc/foo:3000*POOL*gno.land/r/onbloc/foo:gno.land/r/onbloc/obl:3000","95,5","35443665836"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Atgv/+TCwlR+jzjx94p4Ik0IuGET4J/q2q9ciaL4UOQh"},"signature":"hfFAdNO6VrYYvMI8pJlUZ7eMaOZaEtAlUQHsSMlICuoyxDn/sTLu20ZdJKbP4aSyU+CNDU7DHSBUZXFJUW1S3A=="}],"memo":""},"blockNum":"1765477"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fjh9y7ausp27dqsdq0qrcsnmgvwm6829v2au7d","package":{"name":"games","path":"gno.land/r/grepsuzette/pr2554/v4/games","files":[{"name":"games.gno","body":"package games\n\nimport (\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nfunc Render(path string) string {\n\treturn \"#### r/demo/games\\n\\n\" +\n\t\t\"A collection of small games written in the Gno language:\\n\\n\" +\n\t\trenderGames() + \"\\n\\n\"\n}\n\nfunc renderGames() string {\n\tvar b strings.Builder\n\tfor _, o := range []struct {\n\t\ttitle, path string\n\t\tauthors     []string\n\t\tdesc        string\n\t}{\n\t\t{\"shifumi\", \"games/shifumi\", []string{\"mvertes\"}, \"a very simple rock, paper, scissors game\"},\n\t\t{\"tictactoe\", \"games/tictactoe\", []string{\"grepsuzette\", \"moul\"}, \"CPU vs Human tictactoe, no need for a wallet\"},\n\t\t{\"minesweeper\", \"games/minesweeper\", []string{\"grepsuzette\"}, \"a classic productivity tool\"},\n\t} {\n\t\tb.WriteString(ufmt.Sprintf(\n\t\t\t\"* [%s](%s): %s\\n\",\n\t\t\to.title, o.path,\n\t\t\to.desc,\n\t\t\tRenderAuthors(o.authors, \"@\"),\n\t\t))\n\t}\n\treturn b.String()\n}\n\n// [\"a\", \"b\", \"c\"] -\u003e \"a, b and c\"\n// Typical prefix is \"@\": \"a\", \"b\", \"c\" -\u003e \"@a, @b and @c\"\nfunc RenderAuthors(authors []string, optionalPrefix ...string) string {\n\ta := []string{}\n\tprefix := \"\"\n\tif len(optionalPrefix) \u003e 0 {\n\t\tprefix = optionalPrefix[0]\n\t}\n\tfor _, author := range authors {\n\t\ta = append(a, prefix+author)\n\t}\n\tswitch len(a) {\n\tcase 0:\n\t\treturn \"*?*\"\n\tcase 1:\n\t\treturn a[0]\n\tdefault:\n\t\treturn strings.Join(a[0:len(a)-1], \", \") + \" and \" + a[len(a)-1]\n\t}\n}\n"}]},"deposit":"100000ugnot"}],"fee":{"gas_wanted":"100000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1sQrIl4krsBIKtCTfMqWzbkKQDSfmPtMYQA9EvsJqmu"},"signature":"CxsJzPriGirD8TVVmnR+/dSJCe78eK4e8yZ+ZcgDvHQjhH+oCuzwUn56LbqxL1k9l/n3FXQWaZMeeM9j88O0jQ=="}],"memo":""},"blockNum":"1768491"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fjh9y7ausp27dqsdq0qrcsnmgvwm6829v2au7d","package":{"name":"games","path":"gno.land/r/grepsuzette/pr2554/v5/games","files":[{"name":"games.gno","body":"package games\n\nimport (\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nfunc Render(path string) string {\n\treturn \"#### r/demo/games\\n\\n\" +\n\t\t\"A collection of small games written in the Gno language:\\n\\n\" +\n\t\trenderGames() + \"\\n\\n\"\n}\n\nfunc renderGames() string {\n\tvar b strings.Builder\n\tfor _, o := range []struct {\n\t\ttitle, path string\n\t\tauthors     []string\n\t\tdesc        string\n\t}{\n\t\t{\"shifumi\", \"games/shifumi\", []string{\"mvertes\"}, \"a very simple rock, paper, scissors game\"},\n\t\t{\"tictactoe\", \"games/tictactoe\", []string{\"grepsuzette\", \"moul\"}, \"CPU vs Human tictactoe, no need for a wallet\"},\n\t\t{\"minesweeper\", \"games/minesweeper\", []string{\"grepsuzette\"}, \"a classic productivity tool\"},\n\t} {\n\t\tb.WriteString(ufmt.Sprintf(\n\t\t\t\"* [%s](%s): %s - by %s\\n\",\n\t\t\to.title, o.path,\n\t\t\to.desc,\n\t\t\tRenderAuthors(o.authors, \"@\"),\n\t\t))\n\t}\n\treturn b.String()\n}\n\n// [\"a\", \"b\", \"c\"] -\u003e \"a, b and c\"\n// Typical prefix is \"@\": \"a\", \"b\", \"c\" -\u003e \"@a, @b and @c\"\nfunc RenderAuthors(authors []string, optionalPrefix ...string) string {\n\ta := []string{}\n\tprefix := \"\"\n\tif len(optionalPrefix) \u003e 0 {\n\t\tprefix = optionalPrefix[0]\n\t}\n\tfor _, author := range authors {\n\t\ta = append(a, prefix+author)\n\t}\n\tswitch len(a) {\n\tcase 0:\n\t\treturn \"*?*\"\n\tcase 1:\n\t\treturn a[0]\n\tdefault:\n\t\treturn strings.Join(a[0:len(a)-1], \", \") + \" and \" + a[len(a)-1]\n\t}\n}\n"}]},"deposit":"100000ugnot"}],"fee":{"gas_wanted":"100000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1sQrIl4krsBIKtCTfMqWzbkKQDSfmPtMYQA9EvsJqmu"},"signature":"64T/Kg2f4OauTguAwbKFMMrX3ZpmooSgGEH4UHKUS2lPfBBfV5u9+i1kN+OZD1BfXzvTpZ5+ajHIdsOwQuuiLQ=="}],"memo":""},"blockNum":"1768539"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fjh9y7ausp27dqsdq0qrcsnmgvwm6829v2au7d","package":{"name":"tictactoe","path":"gno.land/r/grepsuzette/pr2554/v5/games/tictactoe","files":[{"name":"README.md","body":"# Player VS CPU tic-tac-toe\n\n* Human VS CPU\n* aims to start experimenting with lowtech UI\n* stateless\n* no wallet required\n\nReusing moul's tic-tac-toe logic.\n\n```\n     (\\           Thanks for the wing!\n    (  \\  /(o)\\    Thanks for the wing!  \n    (   \\/  ()/ /)  Raaarch!  *Whistle*\n     (   `;.))'\".) \n      `(/////.-'\n   =====))=))===() \n     ///'       \n    //   PjP/ejm\n   '            \n```\n## Principle\n\n* `path` for Render is like `board=-X---O---\u0026move=a2`\n* no javascript,\n* only gnoweb markdown.\n\n## How the hell did Cap'n Cluck learn to play?\n\nI, Cap'n Cluck, had to learn from the most cunning and crafty of creatures – humans! I observed those barnacle-brained bilge-rats engaged in their most awesome game o' strategies, tic-tac-toe.\n\nThrough earhole-peepin', I picked up the patterns and strategies. I honed me beak on pieces o' eight, developin' a near-nautical sense o' spatial relationships! Aarrr, soon enough, I, Cap'n Cluck, became a veritable menace, matchin' wits with any landlubber brave enough to engage in a spot o' tic-tac-toe!\n\n"},{"name":"render.gno","body":"package tictactoe\n\n// Stateless human VS CPU Tic-tac-toe\n// Markdown + HTML1.0 + gnolang\n// no javascript, no wallet needed.\n\nimport (\n\t\"math/rand\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/grepsuzette/pr2554/v1/ternary\"\n\t\"gno.land/p/grepsuzette/pr2554/v1/tictactoe/tictactoe1p\"\n\t\"gno.land/p/grepsuzette/pr2554/v1/ufmt\"\n)\n\nconst (\n\tcpuAddress   = std.Address(\"gCPU\")\n\thumanAddress = std.Address(\"gHUMAN\")\n\turlParrot    = \"https://raw.githubusercontent.com/grepsuzette/gfx/master/parrot.png\"\n\tstatusWon    = \"Looks like you've won!\"\n\tstatusLost   = \"Sorry mate, you lost!\"\n\tstatusDraw   = \"It's a draw...\"\n)\n\nvar prng *rand.Rand\n\nconst rRoot = \"/r/grepsuzette/pr2554/v3\"\n\nfunc Intn(n int) int {\n\tif prng == nil {\n\t\t// Note: our PRNG is not stateful as calling Render is not going\n\t\t// to modify this stateless realm. We initialize it here when still nil\n\t\t// this creates the randomness we need (seeded from blockchain's height)\n\t\tprng = rand.New(rand.NewPCG(uint64(std.GetHeight()), uint64(9)))\n\t}\n\treturn prng.IntN(n)\n}\n\nfunc Render(path string) string {\n\tgame, x, y, debug := parsePath(path)\n\tif x != -1 \u0026\u0026 y != -1 {\n\t\tgame.Play(humanAddress, x, y)\n\t}\n\tcpuX, cpuY, e := game.PlayCPU()\n\toutput := parrotTalk(*game)\n\toutput += render(*game, cpuX, cpuY)\n\tif debug {\n\t\toutput += ufmt.Sprintf(\n\t\t\t\"--- played x=%d y=%d cpuX=%d cpuY=%d height=%d path=%s turn:%d error:%s\",\n\t\t\tx, y, cpuX, cpuY, std.GetHeight(), path, game.Game.TurnNumber(), e,\n\t\t)\n\t}\n\treturn output\n}\n\n// Lower-case render is simply called by Render.\n// Note the \u003cform\u003e (below) could be a \u003cdiv\u003e. If some day\n// realms can access GET and POST variables, then regular\n// \u003cbutton\u003e can be used. \u003cform\u003e is kept to remember that.\nfunc render(game tictactoe1p.Game, cpuX, cpuY int) string {\n\tstatus, class := statusAndClass(game)\n\trepr := game.ToRepr()\n\toutput := css()\n\toutput += `\u003cform id=\"board\" class=\"` + class + `\"\u003e` + \"\\n\"\n\t// output += \"\\t\" + `\u003cinput type=\"hidden\" name=\"state\" value=\"` + repr + `\"\u003e` + \"\\n\"\n\toutput += `\u003cdiv id=\"left\"\u003e\u003cimg src=\"` + urlParrot + `\" id=\"parrot\" width=\"120\" height=\"120\" align=\"left\" /\u003e\u003c/div\u003e` + \"\\n\"\n\toutput += `\u003cdiv id=\"right\"\u003e`\n\n\tfor y := 2; y \u003e= 0; y-- {\n\t\toutput += \"\\t\"\n\t\tfor x := 0; x \u003c= 2; x++ {\n\t\t\truneAtXY := game.At(x, y)\n\t\t\toccupied := runeAtXY != rune(0)\n\t\t\tif occupied {\n\t\t\t\thighlighted := x == cpuX \u0026\u0026 y == cpuY\n\t\t\t\toutput += button(x, y, ternary.String(runeAtXY == rune(1), \"O\", \"X\"), true, highlighted, repr)\n\t\t\t} else if game.IsOver() {\n\t\t\t\toutput += button(x, y, \"\u0026nbsp;\", true, false, repr)\n\t\t\t} else {\n\t\t\t\t// tile is free, but :hover must show\n\t\t\t\tcpu1st := game.Game.PlayerByIndex(0) == cpuAddress\n\t\t\t\toutput += button(x, y, ternary.String(cpu1st, \"X\", \"O\"), false, false, repr)\n\t\t\t}\n\t\t}\n\t\toutput += \"\u003cbr /\u003e\\n\"\n\t}\n\toutput += \"\u003c/div\u003e\\n\"\n\toutput += \"\u003c/form\u003e\\n\"\n\tif game.IsOver() {\n\t\toutput += ufmt.Sprintf(\n\t\t\t\"\\n%s [ %s | %s ]\\n\",\n\t\t\tstatus,\n\t\t\t\"[New game](\"+rRoot+\"/games/tictactoe)\",\n\t\t\t\"[Back to demo/games](\"+rRoot+\"/games)\",\n\t\t)\n\t} else {\n\t\toutput += \"\\n[Okay country roads, take me home](\" + rRoot + \"/games)\"\n\t}\n\treturn output\n}\n\nfunc button(x, y int, char string, occupied, highlighted bool, repr string) string {\n\treturn ufmt.Sprintf(\n\t\t`\u003ca href=\"`+rRoot+`/games/tictactoe:state=%s\u0026move=%c%d\" class=\"button tile %s %s\"\u003e%s\u003c/a\u003e`,\n\t\trepr,\n\t\trune('a'+x), y+1,\n\t\tternary.String(occupied, \"disabled\", \"\"),\n\t\tternary.String(highlighted, \"highlighted\", \"\"),\n\t\tchar,\n\t)\n}\n\n// return status and class(es).\n// it's empty when the game is not over.\nfunc statusAndClass(game tictactoe1p.Game) (status string, classes string) {\n\tif game.IsOver() {\n\t\tswitch {\n\t\tcase game.Winner() == humanAddress:\n\t\t\tclasses = \"over won\"\n\t\t\tstatus = statusWon\n\t\tcase game.Winner() == cpuAddress:\n\t\t\tclasses = \"over lost\"\n\t\t\tstatus = statusLost\n\t\tdefault:\n\t\t\tclasses = \"over draw\"\n\t\t\tstatus = statusDraw\n\t\t}\n\t}\n\treturn\n}\n\n// Decompose path, into valid game and played coordinates (or -1,-1)\n// The path is like \"state=O--X-----\u0026move=c3\"\n//\n//   - state is empty or 9 characters,\n//     imagine the following but without the \\n: \"-OX\\nO--\\n---\".\n//     O always plays first.\n//\n//   - move coordinate ranges from \"a1\" to \"c3\" but can be empty.\n//\n//   - debug \u0026debug enables printing of a debug line.\nfunc parsePath(path string) (game *tictactoe1p.Game, x, y int, debug bool) {\n\th, e := BreakToMap(path)\n\tif e != nil {\n\t\tpanic(e)\n\t}\n\t// nil: default AI\n\tgame, e = tictactoe1p.GameFromRepr(h[\"state\"], cpuAddress, humanAddress, Intn, nil)\n\tif e != nil {\n\t\tpanic(e)\n\t}\n\t_, debug = h[\"debug\"]\n\tx, y = -1, -1\n\tfor i, xx := range h[\"move\"] {\n\t\tswitch i {\n\t\tcase 0:\n\t\t\tx = int(xx) - int('a')\n\t\tcase 1:\n\t\t\ty = int(xx) - int('1')\n\t\tdefault:\n\t\t\tpanic(\"invalid move: \" + h[\"move\"])\n\t\t}\n\t}\n\treturn game, x, y, debug\n}\n\nfunc parrotTalk(game tictactoe1p.Game) string {\n\tvar a []string\n\tswitch {\n\tcase !game.IsOver():\n\t\ta = []string{\n\t\t\t\"Let's play Tic-tac-toe!\",\n\t\t\t\"Cap'n Cluck, am here and ready to rule the high seas of tic-tac-toe!\",\n\t\t\t\"Aarrr, we'll see who'll be top parrot on this jolly board.\",\n\t\t\t\"The stakes are higher than the mast of a sunken galleon!\",\n\t\t}\n\tcase game.IsDraw():\n\t\ta = []string{\n\t\t\t\"Three cheers for Yers Truly, Cap'n! It's a draw.\",\n\t\t\t\"It's a draw, sailor...\",\n\t\t\t\"This match ends in neither victory nor defeat, but a draw!\",\n\t\t}\n\tcase game.Winner().String() == cpuAddress.String():\n\t\ta = []string{\n\t\t\t\"Alrighty, mateys! Who's the bravest birdy of the seven seas!\",\n\t\t\t\"Avast, ye scallywags, for I won this game\",\n\t\t\t\"Remember, me hearties, even in victory, Cap'n Cluck remains a humble scallywag.\",\n\t\t\t\"Aarrr, parrot power prevails again!\",\n\t\t\t\"Cap'n Cluck claims the prize!\",\n\t\t\t\"The high seas crown me king o' the game!\",\n\t\t}\n\tcase game.Winner().String() != cpuAddress.String():\n\t\ta = []string{\n\t\t\t\"Ye bested a bold parrot on this day!\",\n\t\t\t\"Cap'n Cluck, beaten by a buccaneer? Nay, 'tis unbirdable!\",\n\t\t\t\"Aarrr, this be the day I, Cap'n Cluck, ate me parroted pirate's words! But fear not, for I shall be back!\",\n\t\t\t\"Ye bested this parrot, but amongst feathery fiends, revenge is ripe!\",\n\t\t\t\"Despite this defeat, remember, I, Cap'n Cluck, am not a chicken when it comes to tic-tac-toe!\",\n\t\t}\n\t}\n\ts := a[Intn(len(a))]\n\treturn ufmt.Sprintf(\"\u003cdiv\u003e\u003cb\u003e%s\u003c/b\u003e\u003cbr /\u003e\"+strings.Repeat(\"\u0026nbsp;\", 17)+\"/\u003c/div\u003e\", s)\n}\n\nfunc css() string {\n\treturn `\n\u003cstyle type=\"text/css\"\u003e\n\t/* responsive stuffs */\n\t#board { \n\t\tdisplay: flex; \n\t\tflex-direction: row;\n\t}\n\t#board \u003e #left {\n\t\tflex-shrink: 1;\n\t}\n\t#board \u003e #right {\n\t\tflex-shrink: 0;\n\t\tflex-basis: auto;\n\t\twidth: 9.5em;\n\t}\n\t/* buttons, and parrot */\n\t#board a.tile.button { \n\t  appearance: button;\n\t  box-sizing: border-box;\n\t  margin: 0;\n\t  font-weight: bold;\n\t  display: inline-block;\n\t  background-color: #eee;\n\t  border-color: rgb(227, 227, 227);\n\t  border-style: outset;\n\t  border-width: 1px;\n\t  border-collapse: separate;\n\t  text-decoration: none;\n\t  text-align: center;\n\t  line-height: 3em;\n\t}\n    #board button, #board a.tile.button { \n        width: 3em; height: 3em; \n        margin-right: 2px; margin-bottom: 2px; \n        cursor: pointer; \n        color: initial;\n\t\tborder-radius: 5px;\n    }\n\t#board.won button, #board.won a.tile.button  { box-shadow: aquamarine 1px 1px 12px 6px; }\n\t#board.lost button, #board.lost a.tile.button  { box-shadow: rgb(255, 200, 190) 0px 1px 34px 2px; }\n\t#board.draw button , #board.draw a.tile.button { box-shadow: rgb(200, 200, 200) 0px 1px 30px 8px; }\n\t#board button , #board a.tile.button { color: #888; }\n\t#board button:not([disabled]):hover, #board a.tile.button:not(.disabled):hover { \n        border-style: ridge; \n        box-shadow: inset -10px -10px 15px rgba(255, 255, 255, 0.5), \n                    inset 10px 10px 15px rgba(70, 70, 70, 0.12);\n\t\tborder-radius: 5px;\n    }\n    #board button[disabled], #board a.tile.button.disabled { cursor: default; }\n\t#board button:not([disabled]), #board a.tile.button:not(.disabled) { color: transparent; }\n\t#board button:not([disabled]):hover , #board a.tile.button:not(.disabled):hover { color: #888; text-transform: uppercase; }\n\t#board button.highlighted, #board a.tile.button.highlighted { color: chocolate; }\n    img#parrot {\n        -webkit-transform: scaleX(-1);\n        transform: scaleX(-1);\n        padding-left: 10px; \n\t\tmargin-right: 0.5em;\n    }\n\u003c/style\u003e\n`\n}\n\n// Break down a string of url parameters to map[string]string.\n// E.g. \"foo=a\u0026bar=b\" -\u003e (map[string]string{foo:\"a\", bar:\"b\"}, nil)\nfunc BreakToMap(querystring string) (map[string]string, error) {\n\tm := make(map[string]string)\n\tfor _, s := range strings.Split(querystring, \"\u0026\") {\n\t\tif len(strings.TrimSpace(s)) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tidx := strings.Index(s, \"=\")\n\t\tif idx \u003e -1 {\n\t\t\tm[s[:idx]] = s[idx+1:]\n\t\t} else {\n\t\t\tm[s] = \"\"\n\t\t}\n\t}\n\treturn m, nil\n}\n"}]},"deposit":"100000ugnot"}],"fee":{"gas_wanted":"100000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1sQrIl4krsBIKtCTfMqWzbkKQDSfmPtMYQA9EvsJqmu"},"signature":"vgVKtqsSdbdxETUl75ASwcI56BzrTKxkCrbuOLjcBe0CQEUZWHLADuO74UU11sy+/8SwwhaannYt17eO6pIj3w=="}],"memo":""},"blockNum":"1768560"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fjh9y7ausp27dqsdq0qrcsnmgvwm6829v2au7d","package":{"name":"minesweeper","path":"gno.land/r/grepsuzette/pr2554/v5/games/minesweeper","files":[{"name":"README.md","body":"# Underwater Minesweeper\n\nThe goal of the game is to **uncover all squares that are not mines**.\n\nNumbers indicate how many adjacent mines are to that tile.\n\nNote: In this version, you can't flag squares, you will have to use your memory.\n\nThe little animals 🐠, 🦐, 🦈, 🐳 are protagonists from the ocean but play no part.\n\n## Context\n\nThis demo is part of a series of mini-games for GNO, and may or may not be used for Games of Realm.\n\n- GNO is interpreted by the validators on the gno.land chain\n- no JS\n- no wallet\n- client renders Markdown with HTML and CSS\n\n### Developer opinion: bring querystring!\n\nSince no `\u003cform method=GET\u003e` can be used at the moment, because\nonly realm path is read, not the querystring, \n\n- each button has to be a `\u003ca\u003e` tag (we put some make up using CSS)...\n- ...And the state of the game *has* to be repeated for each tile (each `\u003ca\u003e` contains a state of the game). \n    - If querystring was enabled on gnoweb, with `\u003cform method=GET\u003e` we could just have a **single** `\u003cinput type=hidden name=state value=xxxxxxxxxxxxx\u003e`.\n\n- Not only that:\n  - ** `\u003cform\u003e` could help introduce micro transitory state** on a webpage, without JS:\n  - you could use radio buttons or `\u003cselect\u003e` menu that you style. \n  - imagine a **collective pixel-art** wall,\n  - you could to choose the color of a pixel you want to paint, \n  - then paint it on the pixel-art wall.\n  - as soon as you would click a pixel, it sends you to the realms helper page. \n\n\n"},{"name":"minesweeper.gno","body":"package minesweeper\n\nimport (\n\t\"encoding/hex\"\n\t\"net/url\"\n\t\"strings\"\n)\n\nconst (\n\tWidth  = 8\n\tHeight = 8\n\t// Mines  = 4 They are random, from 4 (easy) to 10 (difficult) !\n)\n\ntype Cell struct {\n\tIsMine        bool\n\tIsRevealed    bool\n\tAdjacentMines int\n}\n\ntype Board struct {\n\tcells [][]Cell // height, width\n\t// todo probably add fields width and height\n}\n\nfunc NewBoard() *Board {\n\tvar cells [][]Cell = make([][]Cell, Height)\n\tfor i := range cells {\n\t\tcells[i] = make([]Cell, Width)\n\t}\n\treturn \u0026Board{\n\t\tcells: cells,\n\t}\n}\n\n// An empty hexstate will create a board and place mines.\n// Otherwise a board is recovered from the state if possible (panic otherwise).\n// input is a hex string where each hex-decoded byte 8 bits is 0b00ZYXXXX\n//\n//\tXXXX: count of adjacent mines (4bits, valid ∈ 0-8),\n//\tY: discovered bit\n//\tZ: isMine bit\nfunc BoardFromRepr(hexstate string) *Board {\n\tstate := stateToBytes(hexstate)\n\tboard := NewBoard()\n\tif len(state) == 0 {\n\t\tboard.placeMines()\n\t} else if len(state) != Width*Height {\n\t\tpanic(\"invalid state length\")\n\t} else {\n\t\tfor i, o := range state {\n\t\t\tboard.cells[i/Width][i%Width] = Cell{\n\t\t\t\tIsMine:        ((o \u0026 0b_0010_0000) \u003e\u003e 5) == 1,\n\t\t\t\tIsRevealed:    ((o \u0026 0b_0001_0000) \u003e\u003e 4) == 1,\n\t\t\t\tAdjacentMines: int(o \u0026 0b_0000_1111),\n\t\t\t}\n\t\t}\n\t}\n\treturn board\n}\n\n// ToHexRepr is the opposite operation of BoardFromRepr\n// it outputs an hexadecimal string\nfunc (b Board) ToHexRepr() string {\n\tvar builder strings.Builder\n\tfor i := 0; i \u003c Width*Height; i++ {\n\t\tcell := b.cells[i/Width][i%Width]\n\t\tvar isMine uint8 = 0\n\t\tvar isRevealed uint8 = 0\n\t\tif cell.IsMine {\n\t\t\tisMine = 1\n\t\t}\n\t\tif cell.IsRevealed {\n\t\t\tisRevealed = 1\n\t\t}\n\t\tbuilder.WriteByte(\n\t\t\t0b_0000_0000 | (isMine \u003c\u003c 5) | (isRevealed \u003c\u003c 4) | (uint8(cell.AdjacentMines)),\n\t\t)\n\t}\n\treturn hex.EncodeToString([]byte(builder.String()))\n}\n\n// show the board as a string,\n// respective of the revealed status of the squares unless `force` is true.\nfunc (b *Board) show(force bool) string {\n\tvar buf strings.Builder\n\tfor y := range b.cells {\n\t\tfor x := range b.cells[y] {\n\t\t\tcell := b.cells[y][x]\n\t\t\tif cell.IsRevealed || force {\n\t\t\t\tif cell.IsMine {\n\t\t\t\t\tbuf.WriteRune('+')\n\t\t\t\t} else if cell.AdjacentMines == 0 {\n\t\t\t\t\tbuf.WriteRune('.')\n\t\t\t\t} else {\n\t\t\t\t\tbuf.WriteRune('0' + int32(cell.AdjacentMines))\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbuf.WriteRune('?')\n\t\t\t}\n\t\t}\n\t\tbuf.WriteRune('\\n')\n\t}\n\treturn buf.String()\n}\n\n// Reveal a square, using some kind of floodfill, and return\n// whether we are still alive after that...\nfunc (b *Board) Reveal(x, y int) bool {\n\tif x \u003c 0 || x \u003e= Width || y \u003c 0 || y \u003e= Height {\n\t\tpanic(\"Invalid input. Enter valid coordinates.\")\n\t}\n\tif b.cells[y][x].IsRevealed || b.cells[y][x].IsMine {\n\t\treturn !b.cells[y][x].IsMine\n\t}\n\tb.cells[y][x].IsRevealed = true\n\tif b.cells[y][x].AdjacentMines == 0 {\n\t\tfor i := -1; i \u003c= 1; i++ {\n\t\t\tfor j := -1; j \u003c= 1; j++ {\n\t\t\t\tif i == 0 \u0026\u0026 j == 0 {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tadjX, adjY := x+j, y+i\n\t\t\t\tif adjX \u003e= 0 \u0026\u0026 adjX \u003c Width \u0026\u0026 adjY \u003e= 0 \u0026\u0026 adjY \u003c Height {\n\t\t\t\t\tb.Reveal(adjX, adjY)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\n\nfunc (b *Board) placeMines() {\n\t// Mines vary between 4 (easy) to 10 (relatively difficult)\n\tmines := 4 + Intn(10-4)\n\tfor i := 0; i \u003c mines; i++ {\n\t\tx, y := Intn(Width), Intn(Height)\n\t\tif b.cells[y][x].IsMine {\n\t\t\ti-- // Retry if mine is already placed\n\t\t\tcontinue\n\t\t}\n\t\tb.cells[y][x].IsMine = true\n\t\tb.updateAdjacentMines(x, y)\n\t}\n}\n\nfunc (b *Board) updateAdjacentMines(x, y int) {\n\tfor i := -1; i \u003c= 1; i++ {\n\t\tfor j := -1; j \u003c= 1; j++ {\n\t\t\tif i == 0 \u0026\u0026 j == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tadjX, adjY := x+j, y+i\n\t\t\tif adjX \u003e= 0 \u0026\u0026 adjX \u003c Width \u0026\u0026 adjY \u003e= 0 \u0026\u0026 adjY \u003c Height {\n\t\t\t\tb.cells[adjY][adjX].AdjacentMines++\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc stateToBytes(urlEncodedHex string) []byte {\n\tdecoded, err := url.QueryUnescape(urlEncodedHex)\n\tif err != nil {\n\t\tpanic(\"Error decoding URL:\" + err.Error())\n\t}\n\tbytes, err := hex.DecodeString(decoded)\n\tif err != nil {\n\t\tpanic(\"Error decoding hex:\" + err.Error())\n\t}\n\treturn bytes\n}\n"},{"name":"minesweeper_test.gno","body":"package minesweeper\n\nimport (\n\t\"testing\"\n\n\t\"gno.land/p/demo/urequire\"\n)\n\nfunc TestBoard(t *testing.T) {\n\t{\n\t\tboard := NewBoard()\n\t\turequire.False(t, board == nil)\n\t\turequire.Equal(t, len(board.cells), Height)\n\t\tfor i := 0; i \u003c Height; i++ {\n\t\t\turequire.Equal(t, len(board.cells[i]), Width)\n\t\t}\n\t}\n\t{\n\t\tvar board *Board\n\t\turequire.NotPanics(t, func() {\n\t\t\tboard = BoardFromRepr(\"\")\n\t\t})\n\t\t// check all squares unrevealed\n\t\t// check some mines were placed\n\t\tfoundMines := false\n\t\tfor i := 0; i \u003c Width*Height; i++ {\n\t\t\turequire.False(t, board.cells[i/Width][i%Width].IsRevealed)\n\t\t\tif board.cells[i/Width][i%Width].IsMine {\n\t\t\t\tfoundMines = true\n\t\t\t}\n\t\t}\n\t\turequire.True(t, foundMines)\n\n\t\t// check BoardFromRepr(hex).ToHexRepr() == hex\n\t\thex := board.ToHexRepr()\n\t\turequire.Equal(t, len(hex), 2*Width*Height, \"len(hex), 2*Width*Height\")\n\t\turequire.Equal(t, hex, BoardFromRepr(hex).ToHexRepr(), \"hex, BoardFromRepr(hex).ToHexRepr()\")\n\t}\n\t{\n\t\turequire.PanicsWithMessage(t, \"invalid state length\", func() {\n\t\t\tBoardFromRepr(\"0FaaBBccDDee\")\n\t\t})\n\t\turequire.PanicsWithMessage(t, \"Error decoding hex:encoding/hex: invalid byte: 120\", func() {\n\t\t\tBoardFromRepr(\"xx\")\n\t\t})\n\t}\n}\n"},{"name":"render.gno","body":"package minesweeper\n\nimport (\n\t\"math/rand\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/p/grepsuzette/pr2554/v1/ternary\"\n)\n\nconst (\n\turlImage              = \"https://upload.wikimedia.org/wikipedia/commons/b/b1/497-octopus.svg\"\n\tattributionAboveImage = \"Vincent Le Moign, CC BY 4.0 \u003chttps://creativecommons.org/licenses/by/4.0\u003e, via Wikimedia Commons\"\n\trRoot                 = \"/r/grepsuzette/pr2554/v4\"\n)\n\nvar prng *rand.Rand\n\nfunc Intn(n int) int {\n\tif prng == nil {\n\t\t// Note: our PRNG is not stateful as calling Render is not going\n\t\t// to modify this stateless realm. We initialize it here when still nil\n\t\t// this creates the randomness we need (seeded from blockchain's height)\n\t\tprng = rand.New(rand.NewPCG(uint64(std.GetHeight()), uint64(9)))\n\t}\n\treturn prng.IntN(n)\n}\n\nfunc Render(path string) string {\n\t// out := \"**Underwater Minesweeper**\\n\\n\"\n\tout := \"\u0026nbsp;\"\n\tout += css()\n\tboard, x, y, _ := parsePath(path)\n\tlost := false\n\tif x != -1 \u0026\u0026 y != -1 {\n\t\tlost = !board.Reveal(x, y)\n\t}\n\twon := !lost \u0026\u0026 didWin(board)\n\n\t// if won {\n\t// \tout += `\u003ccenter\u003e\u003cb\u003eYou are a true underwater hero!\u003c/b\u003e\u003cbr\u003e\u003cbr\u003e\n\n\t// \u003cimg src=\"` + urlImage + `\" width=256 /\u003e\n\n\t// [ [New game](/r/demo/games/minesweeper) | [Back to demo/games](/r/demo/games) ]\u003c/center\u003e\n\t// `\n\t// } else {\n\t// display the minefield as a matrix of buttons\n\tout += header(won, lost)\n\trepr := board.ToHexRepr()\n\tfor j := range board.cells {\n\t\tfor i := range board.cells[j] {\n\t\t\tout += button(i, j, board.cells[j][i], won, lost, repr, x, y)\n\t\t}\n\t\tout += \"\u003cbr /\u003e\"\n\t}\n\tout += footer(won, lost)\n\t// }\n\n\t// if debug {\n\t// \tout += ufmt.Sprintf(\n\t// \t\t\"--- played x=%d y=%d height=%d path=%s error:%s\",\n\t// \t\tx, y, std.GetHeight(), path, \"\",\n\t// \t)\n\t// }\n\treturn out\n}\n\nfunc didWin(board *Board) bool {\n\tmissing := 0\n\tfor j := range board.cells {\n\t\tfor i := range board.cells[j] {\n\t\t\tcell := \u0026board.cells[j][i]\n\t\t\tif !cell.IsMine \u0026\u0026 !cell.IsRevealed {\n\t\t\t\tmissing++\n\t\t\t}\n\t\t}\n\t}\n\treturn missing == 0\n}\n\nfunc button(x, y int, cell Cell, won, lost bool, repr string, playedX, playedY int) string {\n\tvar char string\n\trevealed := cell.IsRevealed || lost || won\n\tclasses := []string{\"btn\"}\n\tif revealed {\n\t\tclasses = append(classes, \"d\")\n\t}\n\tif playedX == x \u0026\u0026 playedY == y \u0026\u0026 cell.IsMine \u0026\u0026 (lost || won) {\n\t\tclasses = append(classes, \"exploded\")\n\t}\n\tswitch {\n\tcase !revealed:\n\t\tchar = \"\u0026nbsp;\"\n\tcase cell.IsMine:\n\t\tchar = ternary.String(lost, \"💣\", \"🌈\")\n\tcase cell.AdjacentMines \u003c= 0:\n\t\tchar = \"\u0026nbsp;\"\n\tcase cell.AdjacentMines \u003e 8:\n\t\tpanic(\"should not happen\")\n\tdefault:\n\t\tclasses = append(classes, \"m\"+strconv.Itoa(cell.AdjacentMines))\n\t\tchar = strconv.Itoa(cell.AdjacentMines)\n\t}\n\t// if ?querystring were allowed, we could then use \u003cbutton\u003e for this.\n\t// return \"\u003cbutton class='...'\u003e\" + char + \"\u003c/button\u003e\"\n\t// instead \u003ca\u003e will be used for now\n\tlink := ternary.String(lost || won, \"#\", ufmt.Sprintf(\n\t\t\"/r/demo/games/minesweeper:state=%s\u0026x=%d\u0026y=%d\",\n\t\trepr, x, y,\n\t))\n\treturn ufmt.Sprintf(\n\t\t`\u003ca href=\"%s\" draggable=\"false\" class=\"%s\"\u003e%s\u003c/a\u003e`,\n\t\tlink, strings.Join(classes, \" \"), char,\n\t)\n}\n\nfunc css() string {\n\treturn `\u003cstyle type=\"text/css\"\u003e\n    form button, form a.btn {\n\t    appearance: button;\n\t    box-sizing: border-box;\n\t\tdisplay: inline-block;\n        margin: 0; \n\t\tpadding: 0;\n        background-color: #ccc;\n        border: 2px outset #eee;\n        height: 32px;\n        width: 32px;\n\t\tline-height: 32px;\n\t\ttext-align: center;\n        cursor: pointer;\n        font-weight: 800;\n\t\ttext-decoration: none;\n\t\tdraggable: none;\n\t\tuser-select: none;\n    }\n    form button.d, form a.btn.d {\n        cursor: default;\n        border-bottom: 1px solid #888;\n        border-left: 1px solid #888;\n        border-right: none;\n        border-top: 2px solid transparent;\n\t\theight: 32px;\n    }\n\tform button:hover, form a.btn:hover {\n        background-color: #ddd;\n    }\n\tform button.d:hover, form a.btn.d:hover {\n        background-color: #ccc;\n    }\n    form button.m1, form a.btn.m1 { color: blue; }\n    form button.m2, form a.btn.m2 { color: green; }\n    form button.m3, form a.btn.m3 { color: red; }\n    form button.m4, form a.btn.m4 { color: navy; }\n    form button.m5, form a.btn.m5 { color: brown; }\n    form button.m6, form a.btn.m6 { color: purple; }\n    form button.m7, form a.btn.m7 { color: cyan; }\n    form button.m8, form a.btn.m8 { color: orange; }\n    form button.exploded, form a.btn.exploded { \n        background-color: #ccc;\n        opacity: 1;\n        animation: \n            0.5s 0.1s backwards ease-in explode,\n            1s 0.6s alternate infinite ease glowing;\n\t}\n    @keyframes explodedisable {\n        from {\n            transform: scale(150);\n            opacity: 0.1;\n        }\n        to {\n        background-color: #ccc;\n            transform: scale(1);\n        }\n    }\n    @keyframes glowing {\n        from {\n        text-shadow:\n            -1px -1px 40px rgba(255,0,0,.1),\n            1px 1px 40px rgba(255,0,0,.1);\n        }\n        to {\n            text-shadow:\n               -1px -1px 8px rgba(255,0,0,.54),\n               1px 1px 8px rgba(255,0,0,.54);\n        }\n    }\n    div#board { \n\t\tdisplay: flex; \n\t\tflex-direction: row;\n\t}\n\t#left {\n\t\tflex-shrink: 1;\n        padding-right: 5px;\n\t}\n\t#right {\n\t\tflex-shrink: 0;\n\t\tflex-basis: auto;\n\t\tborder: 3px double #ccc;\n\t}\n\tdiv#board.lost {\n\t\tanimation: 1s ease-in-out booom;\n\t}\n    @keyframes booom {\n\t\t0% {\n\t\t\ttransform: scale(8) rotateZ(7720deg) translateX(200px);\n\t\t\tfilter: brightness(2.9);\n\t\t}\n\t\t20% { filter: translateX(0); }\n\t\t90% { filter: brightness(1.0); }\n\t\t100% {\n\t\t\ttransform: scale(1) rotate(0deg);\n\t\t}\n\t}\n    .rotated {\n        width: 200px;\n        height: 200px;\n        background-color: lightblue;\n        transform: rotateZ(45deg) rotateX(45deg) rotateY(45deg);\n        perspective: 1000px;\n    }\n\u003c/style\u003e\n`\n}\n\nfunc header(won, lost bool) string {\n\tvar title, legend string\n\tif won {\n\t\ttitle = \"You saved my underwater realm!\"\n\t\t// unlock nft/badge?\n\t\tlegend = `\n\t\t🐠 = hooray!\u003cbr\u003e\n\t\t🦐 = so brave\u003cbr\u003e\n\t\t🦈 = thank you\u003cbr\u003e\n\t\t🐳 = well done\u003cbr\u003e`\n\t} else if !lost {\n\t\ttitle = \"Save me, my underwater realm is threatened by water mines.\"\n\t\tlegend = `\n🐠 = yes\u003cbr\u003e\n🦐 = it's true\u003cbr\u003e\n🦈 = yep\u003cbr\u003e\n🐳 = true that\u003cbr\u003e\n\n[\u003c quit to games](/r/demo/games)`\n\t} else {\n\t\t// Nice try, boomer 🤷\n\t\t// title = \"\u003cb\u003eAyaa!!\u003c/b\u003e 🤯🤯🤯🤯🤯\\n\\n\"\n\t\t// title += \"Alas you hit a mine.\"\n\t\ttitle = \"Alas you hit a mine!\"\n\t\t// legend = `\n\t\t// 🐠 = yes\u003cbr\u003e\n\t\t// 🦐 = it's true\u003cbr\u003e\n\t\t// 🦑 = please\u003cbr\u003e\n\t\t// 🐙 = help\u003cbr\u003e\n\t\t// 🦈 = yep\u003cbr\u003e\n\t\t// 🐳 = true that\u003cbr\u003e`\n\t}\n\n\treturn `\u003cform\u003e\u003cstrong\u003e` + title + `\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;/\u003c/strong\u003e\n\u003cdiv id=\"board\" ` + ternary.String(lost, \"class='lost'\", \"\") + `\u003e\n\u003cdiv id=\"left\"\u003e\n\u003cimg src=\"` + urlImage + `\" width=128 title=\"I was drawn by Vincent Le Moign, CC BY 4.0 via Wikimedia Commons\" /\u003e\u003cbr\u003e` + legend + `\u003c/div\u003e\n\u003cdiv id=\"right\"\u003e\n`\n}\n\nfunc footer(won, lost bool) string {\n\tout := ``\n\n\tif lost || won {\n\t\tout += \"\u003c/div\u003e\\n\u003c/div\u003e\\n\\n[ [New game](/r/demo/games/minesweeper) | \" +\n\t\t\t\"[Back to demo/games](/r/demo/games) ]\\n\\n\"\n\t}\n\tout += `\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/form\u003e\n`\n\treturn out\n\t// [Sorry, I need to go](/r/demo/games)\n}\n\n// Decompose path, into valid game and played coordinates (or -1,-1)\n// The path is like \"state=\u003chexadecimalBytes\u003e\u0026move=c3\"\n//\n//   - state is empty or 9 characters,\n//     imagine the following but without the \\n: \"-OX\\nO--\\n---\".\n//     O always plays first.\n//\n//   - move coordinate ranges from \"a1\" to \"c3\" but can be empty.\n//\n//   - debug \u0026debug enables printing of a debug line.\nfunc parsePath(path string) (game *Board, x, y int, debug bool) {\n\th, e := BreakToMap(path)\n\tif e != nil {\n\t\tpanic(e)\n\t}\n\tgame = BoardFromRepr(h[\"state\"])\n\t_, debug = h[\"debug\"]\n\tx, y = -1, -1\n\tif sx, hasX := h[\"x\"]; hasX {\n\t\tif n, e := strconv.Atoi(sx); e == nil {\n\t\t\tx = n\n\t\t}\n\t}\n\tif sy, hasY := h[\"y\"]; hasY {\n\t\tif n, e := strconv.Atoi(sy); e == nil {\n\t\t\ty = n\n\t\t}\n\t}\n\treturn game, x, y, debug\n}\n\n// Break down a string of url parameters to map[string]string.\n// E.g. \"foo=a\u0026bar=b\" -\u003e (map[string]string{foo:\"a\", bar:\"b\"}, nil)\nfunc BreakToMap(querystring string) (map[string]string, error) {\n\tm := make(map[string]string)\n\tfor _, s := range strings.Split(querystring, \"\u0026\") {\n\t\tif len(strings.TrimSpace(s)) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tidx := strings.Index(s, \"=\")\n\t\tif idx \u003e -1 {\n\t\t\tm[s[:idx]] = s[idx+1:]\n\t\t} else {\n\t\t\tm[s] = \"\"\n\t\t}\n\t}\n\treturn m, nil\n}\n"},{"name":"render_test.gno","body":"package minesweeper\n\nimport (\n\t\"testing\"\n\n\t\"gno.land/p/demo/urequire\"\n)\n\nfunc TestParseEmptyPath(t *testing.T) {\n\t{\n\t\tboard, x, y, debug := parsePath(\"\")\n\t\turequire.True(t, board != nil, \"board was created\")\n\t}\n\t{\n\t\tboard, x, y, debug := parsePath(\"state=21210220010000000303020202010000200100012001000001010001010100000000010101000000000102210201010000012103032102010001010221020220\")\n\t\turequire.True(t, board != nil, \"board was recovered\")\n\t}\n}\n\nfunc TestPlay(t *testing.T) {\n\tnewgame := func() *Board {\n\t\treturn BoardFromRepr(\"21210220010000000303020202010000200100012001000001010001010100000000010101000000000102210201010000012103032102010001010221020220\")\n\t}\n\n\t// ++2+1...  we always play the same game from the start in this test\n\t// 332221..  the mines are indicated by +\n\t// +1.1+1..\n\t// 11.111..\n\t// ..111...\n\t// .12+211.\n\t// .1+33+21\n\t// .112+22+\n\turequire.False(t, newgame().Reveal(0, 0), \"we exploded in the topleft corner\")\n\turequire.False(t, newgame().Reveal(1, 0), \"we exploded in (1,0)\")\n\turequire.True(t, newgame().Reveal(2, 0), \"we survived uncovering (2,0)\")\n\turequire.False(t, newgame().Reveal(3, 0), \"we exploded in (3,0)\")\n\turequire.True(t, newgame().Reveal(4, 0), \"we survived uncovering (4,0)\")\n\turequire.False(t, newgame().Reveal(7, 7), \"we exploded in the bottomright corner\")\n\n\t// let's now play a sequence and test revealing\n\tboard := newgame()\n\turequire.True(t, board.Reveal(7, 0), \"we survived the topright corner\")\n\tnumRevealed := 0\n\tfor i := 0; i \u003c Width*Height; i++ {\n\t\tif board.cells[i/Width][i%Width].IsRevealed {\n\t\t\tnumRevealed++\n\t\t}\n\t}\n\turequire.Equal(t, numRevealed, 25, \"clicking topright corner reveals 25 squares\")\n}\n"}]},"deposit":"100000ugnot"}],"fee":{"gas_wanted":"100000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1sQrIl4krsBIKtCTfMqWzbkKQDSfmPtMYQA9EvsJqmu"},"signature":"1deRQKnvMnd1OQmbQW/ScP/Xrz/LDN/pNrFl2/1iz99XwcavTjc9+NmUFAS/J5hKgv2JOTt88ph+wlMeOlwZ2w=="}],"memo":""},"blockNum":"1768603"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fjh9y7ausp27dqsdq0qrcsnmgvwm6829v2au7d","package":{"name":"games","path":"gno.land/r/grepsuzette/pr2554/v6/games","files":[{"name":"games.gno","body":"package games\n\nimport (\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nfunc Render(path string) string {\n\treturn \"#### r/demo/games\\n\\n\" +\n\t\t\"A collection of small games written in the Gno language:\\n\\n\" +\n\t\trenderGames() + \"\\n\\n\"\n}\n\nfunc renderGames() string {\n\tvar b strings.Builder\n\tfor _, o := range []struct {\n\t\ttitle, path string\n\t\tauthors     []string\n\t\tdesc        string\n\t}{\n\t\t{\"shifumi\", \"games/shifumi\", []string{\"mvertes\"}, \"a very simple rock, paper, scissors game\"},\n\t\t{\"tictactoe\", \"games/tictactoe\", []string{\"grepsuzette\", \"moul\"}, \"CPU vs Human tictactoe, no need for a wallet\"},\n\t\t{\"minesweeper\", \"games/minesweeper\", []string{\"grepsuzette\"}, \"a classic productivity tool\"},\n\t} {\n\t\tb.WriteString(ufmt.Sprintf(\n\t\t\t\"* [%s](%s): %s - by %s\\n\",\n\t\t\to.title, o.path,\n\t\t\to.desc,\n\t\t\tRenderAuthors(o.authors, \"@\"),\n\t\t))\n\t}\n\treturn b.String()\n}\n\n// [\"a\", \"b\", \"c\"] -\u003e \"a, b and c\"\n// Typical prefix is \"@\": \"a\", \"b\", \"c\" -\u003e \"@a, @b and @c\"\nfunc RenderAuthors(authors []string, optionalPrefix ...string) string {\n\ta := []string{}\n\tprefix := \"\"\n\tif len(optionalPrefix) \u003e 0 {\n\t\tprefix = optionalPrefix[0]\n\t}\n\tfor _, author := range authors {\n\t\ta = append(a, prefix+author)\n\t}\n\tswitch len(a) {\n\tcase 0:\n\t\treturn \"*?*\"\n\tcase 1:\n\t\treturn a[0]\n\tdefault:\n\t\treturn strings.Join(a[0:len(a)-1], \", \") + \" and \" + a[len(a)-1]\n\t}\n}\n"}]},"deposit":"100000ugnot"}],"fee":{"gas_wanted":"100000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1sQrIl4krsBIKtCTfMqWzbkKQDSfmPtMYQA9EvsJqmu"},"signature":"mjTqnNxWKTBJ4cfBSJmvTgidwz+y+TxsM8H8qMbPEfMwDgZEoNig3gpYtR1uoEQTh0RExr4MNFXUor7/UG76zQ=="}],"memo":""},"blockNum":"1768754"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fjh9y7ausp27dqsdq0qrcsnmgvwm6829v2au7d","package":{"name":"tictactoe","path":"gno.land/r/grepsuzette/pr2554/v6/games/tictactoe","files":[{"name":"README.md","body":"# Player VS CPU tic-tac-toe\n\n* Human VS CPU\n* aims to start experimenting with lowtech UI\n* stateless\n* no wallet required\n\nReusing moul's tic-tac-toe logic.\n\n```\n     (\\           Thanks for the wing!\n    (  \\  /(o)\\    Thanks for the wing!  \n    (   \\/  ()/ /)  Raaarch!  *Whistle*\n     (   `;.))'\".) \n      `(/////.-'\n   =====))=))===() \n     ///'       \n    //   PjP/ejm\n   '            \n```\n## Principle\n\n* `path` for Render is like `board=-X---O---\u0026move=a2`\n* no javascript,\n* only gnoweb markdown.\n\n## How the hell did Cap'n Cluck learn to play?\n\nI, Cap'n Cluck, had to learn from the most cunning and crafty of creatures – humans! I observed those barnacle-brained bilge-rats engaged in their most awesome game o' strategies, tic-tac-toe.\n\nThrough earhole-peepin', I picked up the patterns and strategies. I honed me beak on pieces o' eight, developin' a near-nautical sense o' spatial relationships! Aarrr, soon enough, I, Cap'n Cluck, became a veritable menace, matchin' wits with any landlubber brave enough to engage in a spot o' tic-tac-toe!\n\n"},{"name":"render.gno","body":"package tictactoe\n\n// Stateless human VS CPU Tic-tac-toe\n// Markdown + HTML1.0 + gnolang\n// no javascript, no wallet needed.\n\nimport (\n\t\"math/rand\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/grepsuzette/pr2554/v1/ternary\"\n\t\"gno.land/p/grepsuzette/pr2554/v1/tictactoe/tictactoe1p\"\n\t\"gno.land/p/grepsuzette/pr2554/v1/ufmt\"\n)\n\nconst (\n\tcpuAddress   = std.Address(\"gCPU\")\n\thumanAddress = std.Address(\"gHUMAN\")\n\turlParrot    = \"https://raw.githubusercontent.com/grepsuzette/gfx/master/parrot.png\"\n\tstatusWon    = \"Looks like you've won!\"\n\tstatusLost   = \"Sorry mate, you lost!\"\n\tstatusDraw   = \"It's a draw...\"\n)\n\nvar prng *rand.Rand\n\nconst rRoot = \"/r/grepsuzette/pr2554/v6\"\n\nfunc Intn(n int) int {\n\tif prng == nil {\n\t\t// Note: our PRNG is not stateful as calling Render is not going\n\t\t// to modify this stateless realm. We initialize it here when still nil\n\t\t// this creates the randomness we need (seeded from blockchain's height)\n\t\tprng = rand.New(rand.NewPCG(uint64(std.GetHeight()), uint64(9)))\n\t}\n\treturn prng.IntN(n)\n}\n\nfunc Render(path string) string {\n\tgame, x, y, debug := parsePath(path)\n\tif x != -1 \u0026\u0026 y != -1 {\n\t\tgame.Play(humanAddress, x, y)\n\t}\n\tcpuX, cpuY, e := game.PlayCPU()\n\toutput := parrotTalk(*game)\n\toutput += render(*game, cpuX, cpuY)\n\tif debug {\n\t\toutput += ufmt.Sprintf(\n\t\t\t\"--- played x=%d y=%d cpuX=%d cpuY=%d height=%d path=%s turn:%d error:%s\",\n\t\t\tx, y, cpuX, cpuY, std.GetHeight(), path, game.Game.TurnNumber(), e,\n\t\t)\n\t}\n\treturn output\n}\n\n// Lower-case render is simply called by Render.\n// Note the \u003cform\u003e (below) could be a \u003cdiv\u003e. If some day\n// realms can access GET and POST variables, then regular\n// \u003cbutton\u003e can be used. \u003cform\u003e is kept to remember that.\nfunc render(game tictactoe1p.Game, cpuX, cpuY int) string {\n\tstatus, class := statusAndClass(game)\n\trepr := game.ToRepr()\n\toutput := css()\n\toutput += `\u003cform id=\"board\" class=\"` + class + `\"\u003e` + \"\\n\"\n\t// output += \"\\t\" + `\u003cinput type=\"hidden\" name=\"state\" value=\"` + repr + `\"\u003e` + \"\\n\"\n\toutput += `\u003cdiv id=\"left\"\u003e\u003cimg src=\"` + urlParrot + `\" id=\"parrot\" width=\"120\" height=\"120\" align=\"left\" /\u003e\u003c/div\u003e` + \"\\n\"\n\toutput += `\u003cdiv id=\"right\"\u003e`\n\n\tfor y := 2; y \u003e= 0; y-- {\n\t\toutput += \"\\t\"\n\t\tfor x := 0; x \u003c= 2; x++ {\n\t\t\truneAtXY := game.At(x, y)\n\t\t\toccupied := runeAtXY != rune(0)\n\t\t\tif occupied {\n\t\t\t\thighlighted := x == cpuX \u0026\u0026 y == cpuY\n\t\t\t\toutput += button(x, y, ternary.String(runeAtXY == rune(1), \"O\", \"X\"), true, highlighted, repr)\n\t\t\t} else if game.IsOver() {\n\t\t\t\toutput += button(x, y, \"\u0026nbsp;\", true, false, repr)\n\t\t\t} else {\n\t\t\t\t// tile is free, but :hover must show\n\t\t\t\tcpu1st := game.Game.PlayerByIndex(0) == cpuAddress\n\t\t\t\toutput += button(x, y, ternary.String(cpu1st, \"X\", \"O\"), false, false, repr)\n\t\t\t}\n\t\t}\n\t\toutput += \"\u003cbr /\u003e\\n\"\n\t}\n\toutput += \"\u003c/div\u003e\\n\"\n\toutput += \"\u003c/form\u003e\\n\"\n\tif game.IsOver() {\n\t\toutput += ufmt.Sprintf(\n\t\t\t\"\\n%s [ %s | %s ]\\n\",\n\t\t\tstatus,\n\t\t\t\"[New game](\"+rRoot+\"/games/tictactoe)\",\n\t\t\t\"[Back to demo/games](\"+rRoot+\"/games)\",\n\t\t)\n\t} else {\n\t\toutput += \"\\n[Okay country roads, take me home](\" + rRoot + \"/games)\"\n\t}\n\treturn output\n}\n\nfunc button(x, y int, char string, occupied, highlighted bool, repr string) string {\n\treturn ufmt.Sprintf(\n\t\t`\u003ca href=\"`+rRoot+`/games/tictactoe:state=%s\u0026move=%c%d\" class=\"button tile %s %s\"\u003e%s\u003c/a\u003e`,\n\t\trepr,\n\t\trune('a'+x), y+1,\n\t\tternary.String(occupied, \"disabled\", \"\"),\n\t\tternary.String(highlighted, \"highlighted\", \"\"),\n\t\tchar,\n\t)\n}\n\n// return status and class(es).\n// it's empty when the game is not over.\nfunc statusAndClass(game tictactoe1p.Game) (status string, classes string) {\n\tif game.IsOver() {\n\t\tswitch {\n\t\tcase game.Winner() == humanAddress:\n\t\t\tclasses = \"over won\"\n\t\t\tstatus = statusWon\n\t\tcase game.Winner() == cpuAddress:\n\t\t\tclasses = \"over lost\"\n\t\t\tstatus = statusLost\n\t\tdefault:\n\t\t\tclasses = \"over draw\"\n\t\t\tstatus = statusDraw\n\t\t}\n\t}\n\treturn\n}\n\n// Decompose path, into valid game and played coordinates (or -1,-1)\n// The path is like \"state=O--X-----\u0026move=c3\"\n//\n//   - state is empty or 9 characters,\n//     imagine the following but without the \\n: \"-OX\\nO--\\n---\".\n//     O always plays first.\n//\n//   - move coordinate ranges from \"a1\" to \"c3\" but can be empty.\n//\n//   - debug \u0026debug enables printing of a debug line.\nfunc parsePath(path string) (game *tictactoe1p.Game, x, y int, debug bool) {\n\th, e := BreakToMap(path)\n\tif e != nil {\n\t\tpanic(e)\n\t}\n\t// nil: default AI\n\tgame, e = tictactoe1p.GameFromRepr(h[\"state\"], cpuAddress, humanAddress, Intn, nil)\n\tif e != nil {\n\t\tpanic(e)\n\t}\n\t_, debug = h[\"debug\"]\n\tx, y = -1, -1\n\tfor i, xx := range h[\"move\"] {\n\t\tswitch i {\n\t\tcase 0:\n\t\t\tx = int(xx) - int('a')\n\t\tcase 1:\n\t\t\ty = int(xx) - int('1')\n\t\tdefault:\n\t\t\tpanic(\"invalid move: \" + h[\"move\"])\n\t\t}\n\t}\n\treturn game, x, y, debug\n}\n\nfunc parrotTalk(game tictactoe1p.Game) string {\n\tvar a []string\n\tswitch {\n\tcase !game.IsOver():\n\t\ta = []string{\n\t\t\t\"Let's play Tic-tac-toe!\",\n\t\t\t\"Cap'n Cluck, am here and ready to rule the high seas of tic-tac-toe!\",\n\t\t\t\"Aarrr, we'll see who'll be top parrot on this jolly board.\",\n\t\t\t\"The stakes are higher than the mast of a sunken galleon!\",\n\t\t}\n\tcase game.IsDraw():\n\t\ta = []string{\n\t\t\t\"Three cheers for Yers Truly, Cap'n! It's a draw.\",\n\t\t\t\"It's a draw, sailor...\",\n\t\t\t\"This match ends in neither victory nor defeat, but a draw!\",\n\t\t}\n\tcase game.Winner().String() == cpuAddress.String():\n\t\ta = []string{\n\t\t\t\"Alrighty, mateys! Who's the bravest birdy of the seven seas!\",\n\t\t\t\"Avast, ye scallywags, for I won this game\",\n\t\t\t\"Remember, me hearties, even in victory, Cap'n Cluck remains a humble scallywag.\",\n\t\t\t\"Aarrr, parrot power prevails again!\",\n\t\t\t\"Cap'n Cluck claims the prize!\",\n\t\t\t\"The high seas crown me king o' the game!\",\n\t\t}\n\tcase game.Winner().String() != cpuAddress.String():\n\t\ta = []string{\n\t\t\t\"Ye bested a bold parrot on this day!\",\n\t\t\t\"Cap'n Cluck, beaten by a buccaneer? Nay, 'tis unbirdable!\",\n\t\t\t\"Aarrr, this be the day I, Cap'n Cluck, ate me parroted pirate's words! But fear not, for I shall be back!\",\n\t\t\t\"Ye bested this parrot, but amongst feathery fiends, revenge is ripe!\",\n\t\t\t\"Despite this defeat, remember, I, Cap'n Cluck, am not a chicken when it comes to tic-tac-toe!\",\n\t\t}\n\t}\n\ts := a[Intn(len(a))]\n\treturn ufmt.Sprintf(\"\u003cdiv\u003e\u003cb\u003e%s\u003c/b\u003e\u003cbr /\u003e\"+strings.Repeat(\"\u0026nbsp;\", 17)+\"/\u003c/div\u003e\", s)\n}\n\nfunc css() string {\n\treturn `\n\u003cstyle type=\"text/css\"\u003e\n\t/* responsive stuffs */\n\t#board { \n\t\tdisplay: flex; \n\t\tflex-direction: row;\n\t}\n\t#board \u003e #left {\n\t\tflex-shrink: 1;\n\t}\n\t#board \u003e #right {\n\t\tflex-shrink: 0;\n\t\tflex-basis: auto;\n\t\twidth: 9.5em;\n\t}\n\t/* buttons, and parrot */\n\t#board a.tile.button { \n\t  appearance: button;\n\t  box-sizing: border-box;\n\t  margin: 0;\n\t  font-weight: bold;\n\t  display: inline-block;\n\t  background-color: #eee;\n\t  border-color: rgb(227, 227, 227);\n\t  border-style: outset;\n\t  border-width: 1px;\n\t  border-collapse: separate;\n\t  text-decoration: none;\n\t  text-align: center;\n\t  line-height: 3em;\n\t}\n    #board button, #board a.tile.button { \n        width: 3em; height: 3em; \n        margin-right: 2px; margin-bottom: 2px; \n        cursor: pointer; \n        color: initial;\n\t\tborder-radius: 5px;\n    }\n\t#board.won button, #board.won a.tile.button  { box-shadow: aquamarine 1px 1px 12px 6px; }\n\t#board.lost button, #board.lost a.tile.button  { box-shadow: rgb(255, 200, 190) 0px 1px 34px 2px; }\n\t#board.draw button , #board.draw a.tile.button { box-shadow: rgb(200, 200, 200) 0px 1px 30px 8px; }\n\t#board button , #board a.tile.button { color: #888; }\n\t#board button:not([disabled]):hover, #board a.tile.button:not(.disabled):hover { \n        border-style: ridge; \n        box-shadow: inset -10px -10px 15px rgba(255, 255, 255, 0.5), \n                    inset 10px 10px 15px rgba(70, 70, 70, 0.12);\n\t\tborder-radius: 5px;\n    }\n    #board button[disabled], #board a.tile.button.disabled { cursor: default; }\n\t#board button:not([disabled]), #board a.tile.button:not(.disabled) { color: transparent; }\n\t#board button:not([disabled]):hover , #board a.tile.button:not(.disabled):hover { color: #888; text-transform: uppercase; }\n\t#board button.highlighted, #board a.tile.button.highlighted { color: chocolate; }\n    img#parrot {\n        -webkit-transform: scaleX(-1);\n        transform: scaleX(-1);\n        padding-left: 10px; \n\t\tmargin-right: 0.5em;\n    }\n\u003c/style\u003e\n`\n}\n\n// Break down a string of url parameters to map[string]string.\n// E.g. \"foo=a\u0026bar=b\" -\u003e (map[string]string{foo:\"a\", bar:\"b\"}, nil)\nfunc BreakToMap(querystring string) (map[string]string, error) {\n\tm := make(map[string]string)\n\tfor _, s := range strings.Split(querystring, \"\u0026\") {\n\t\tif len(strings.TrimSpace(s)) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tidx := strings.Index(s, \"=\")\n\t\tif idx \u003e -1 {\n\t\t\tm[s[:idx]] = s[idx+1:]\n\t\t} else {\n\t\t\tm[s] = \"\"\n\t\t}\n\t}\n\treturn m, nil\n}\n"}]},"deposit":"100000ugnot"}],"fee":{"gas_wanted":"100000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1sQrIl4krsBIKtCTfMqWzbkKQDSfmPtMYQA9EvsJqmu"},"signature":"AFiuKwwpadF1KzIbamwr849uQbMEiRWMtRGeDvtuFpg94yW3KYrsGQZ4YgoTEsDUt1ASJyYXPn6SBdKGKQGABA=="}],"memo":""},"blockNum":"1768772"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fjh9y7ausp27dqsdq0qrcsnmgvwm6829v2au7d","package":{"name":"minesweeper","path":"gno.land/r/grepsuzette/pr2554/v6/games/minesweeper","files":[{"name":"README.md","body":"# Underwater Minesweeper\n\nThe goal of the game is to **uncover all squares that are not mines**.\n\nNumbers indicate how many adjacent mines are to that tile.\n\nNote: In this version, you can't flag squares, you will have to use your memory.\n\nThe little animals 🐠, 🦐, 🦈, 🐳 are protagonists from the ocean but play no part.\n\n## Context\n\nThis demo is part of a series of mini-games for GNO, and may or may not be used for Games of Realm.\n\n- GNO is interpreted by the validators on the gno.land chain\n- no JS\n- no wallet\n- client renders Markdown with HTML and CSS\n\n### Developer opinion: bring querystring!\n\nSince no `\u003cform method=GET\u003e` can be used at the moment, because\nonly realm path is read, not the querystring, \n\n- each button has to be a `\u003ca\u003e` tag (we put some make up using CSS)...\n- ...And the state of the game *has* to be repeated for each tile (each `\u003ca\u003e` contains a state of the game). \n    - If querystring was enabled on gnoweb, with `\u003cform method=GET\u003e` we could just have a **single** `\u003cinput type=hidden name=state value=xxxxxxxxxxxxx\u003e`.\n\n- Not only that:\n  - ** `\u003cform\u003e` could help introduce micro transitory state** on a webpage, without JS:\n  - you could use radio buttons or `\u003cselect\u003e` menu that you style. \n  - imagine a **collective pixel-art** wall,\n  - you could to choose the color of a pixel you want to paint, \n  - then paint it on the pixel-art wall.\n  - as soon as you would click a pixel, it sends you to the realms helper page. \n\n\n"},{"name":"minesweeper.gno","body":"package minesweeper\n\nimport (\n\t\"encoding/hex\"\n\t\"net/url\"\n\t\"strings\"\n)\n\nconst (\n\tWidth  = 8\n\tHeight = 8\n\t// Mines  = 4 They are random, from 4 (easy) to 10 (difficult) !\n)\n\ntype Cell struct {\n\tIsMine        bool\n\tIsRevealed    bool\n\tAdjacentMines int\n}\n\ntype Board struct {\n\tcells [][]Cell // height, width\n\t// todo probably add fields width and height\n}\n\nfunc NewBoard() *Board {\n\tvar cells [][]Cell = make([][]Cell, Height)\n\tfor i := range cells {\n\t\tcells[i] = make([]Cell, Width)\n\t}\n\treturn \u0026Board{\n\t\tcells: cells,\n\t}\n}\n\n// An empty hexstate will create a board and place mines.\n// Otherwise a board is recovered from the state if possible (panic otherwise).\n// input is a hex string where each hex-decoded byte 8 bits is 0b00ZYXXXX\n//\n//\tXXXX: count of adjacent mines (4bits, valid ∈ 0-8),\n//\tY: discovered bit\n//\tZ: isMine bit\nfunc BoardFromRepr(hexstate string) *Board {\n\tstate := stateToBytes(hexstate)\n\tboard := NewBoard()\n\tif len(state) == 0 {\n\t\tboard.placeMines()\n\t} else if len(state) != Width*Height {\n\t\tpanic(\"invalid state length\")\n\t} else {\n\t\tfor i, o := range state {\n\t\t\tboard.cells[i/Width][i%Width] = Cell{\n\t\t\t\tIsMine:        ((o \u0026 0b_0010_0000) \u003e\u003e 5) == 1,\n\t\t\t\tIsRevealed:    ((o \u0026 0b_0001_0000) \u003e\u003e 4) == 1,\n\t\t\t\tAdjacentMines: int(o \u0026 0b_0000_1111),\n\t\t\t}\n\t\t}\n\t}\n\treturn board\n}\n\n// ToHexRepr is the opposite operation of BoardFromRepr\n// it outputs an hexadecimal string\nfunc (b Board) ToHexRepr() string {\n\tvar builder strings.Builder\n\tfor i := 0; i \u003c Width*Height; i++ {\n\t\tcell := b.cells[i/Width][i%Width]\n\t\tvar isMine uint8 = 0\n\t\tvar isRevealed uint8 = 0\n\t\tif cell.IsMine {\n\t\t\tisMine = 1\n\t\t}\n\t\tif cell.IsRevealed {\n\t\t\tisRevealed = 1\n\t\t}\n\t\tbuilder.WriteByte(\n\t\t\t0b_0000_0000 | (isMine \u003c\u003c 5) | (isRevealed \u003c\u003c 4) | (uint8(cell.AdjacentMines)),\n\t\t)\n\t}\n\treturn hex.EncodeToString([]byte(builder.String()))\n}\n\n// show the board as a string,\n// respective of the revealed status of the squares unless `force` is true.\nfunc (b *Board) show(force bool) string {\n\tvar buf strings.Builder\n\tfor y := range b.cells {\n\t\tfor x := range b.cells[y] {\n\t\t\tcell := b.cells[y][x]\n\t\t\tif cell.IsRevealed || force {\n\t\t\t\tif cell.IsMine {\n\t\t\t\t\tbuf.WriteRune('+')\n\t\t\t\t} else if cell.AdjacentMines == 0 {\n\t\t\t\t\tbuf.WriteRune('.')\n\t\t\t\t} else {\n\t\t\t\t\tbuf.WriteRune('0' + int32(cell.AdjacentMines))\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbuf.WriteRune('?')\n\t\t\t}\n\t\t}\n\t\tbuf.WriteRune('\\n')\n\t}\n\treturn buf.String()\n}\n\n// Reveal a square, using some kind of floodfill, and return\n// whether we are still alive after that...\nfunc (b *Board) Reveal(x, y int) bool {\n\tif x \u003c 0 || x \u003e= Width || y \u003c 0 || y \u003e= Height {\n\t\tpanic(\"Invalid input. Enter valid coordinates.\")\n\t}\n\tif b.cells[y][x].IsRevealed || b.cells[y][x].IsMine {\n\t\treturn !b.cells[y][x].IsMine\n\t}\n\tb.cells[y][x].IsRevealed = true\n\tif b.cells[y][x].AdjacentMines == 0 {\n\t\tfor i := -1; i \u003c= 1; i++ {\n\t\t\tfor j := -1; j \u003c= 1; j++ {\n\t\t\t\tif i == 0 \u0026\u0026 j == 0 {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tadjX, adjY := x+j, y+i\n\t\t\t\tif adjX \u003e= 0 \u0026\u0026 adjX \u003c Width \u0026\u0026 adjY \u003e= 0 \u0026\u0026 adjY \u003c Height {\n\t\t\t\t\tb.Reveal(adjX, adjY)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\n\nfunc (b *Board) placeMines() {\n\t// Mines vary between 4 (easy) to 10 (relatively difficult)\n\tmines := 4 + Intn(10-4)\n\tfor i := 0; i \u003c mines; i++ {\n\t\tx, y := Intn(Width), Intn(Height)\n\t\tif b.cells[y][x].IsMine {\n\t\t\ti-- // Retry if mine is already placed\n\t\t\tcontinue\n\t\t}\n\t\tb.cells[y][x].IsMine = true\n\t\tb.updateAdjacentMines(x, y)\n\t}\n}\n\nfunc (b *Board) updateAdjacentMines(x, y int) {\n\tfor i := -1; i \u003c= 1; i++ {\n\t\tfor j := -1; j \u003c= 1; j++ {\n\t\t\tif i == 0 \u0026\u0026 j == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tadjX, adjY := x+j, y+i\n\t\t\tif adjX \u003e= 0 \u0026\u0026 adjX \u003c Width \u0026\u0026 adjY \u003e= 0 \u0026\u0026 adjY \u003c Height {\n\t\t\t\tb.cells[adjY][adjX].AdjacentMines++\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc stateToBytes(urlEncodedHex string) []byte {\n\tdecoded, err := url.QueryUnescape(urlEncodedHex)\n\tif err != nil {\n\t\tpanic(\"Error decoding URL:\" + err.Error())\n\t}\n\tbytes, err := hex.DecodeString(decoded)\n\tif err != nil {\n\t\tpanic(\"Error decoding hex:\" + err.Error())\n\t}\n\treturn bytes\n}\n"},{"name":"minesweeper_test.gno","body":"package minesweeper\n\nimport (\n\t\"testing\"\n\n\t\"gno.land/p/demo/urequire\"\n)\n\nfunc TestBoard(t *testing.T) {\n\t{\n\t\tboard := NewBoard()\n\t\turequire.False(t, board == nil)\n\t\turequire.Equal(t, len(board.cells), Height)\n\t\tfor i := 0; i \u003c Height; i++ {\n\t\t\turequire.Equal(t, len(board.cells[i]), Width)\n\t\t}\n\t}\n\t{\n\t\tvar board *Board\n\t\turequire.NotPanics(t, func() {\n\t\t\tboard = BoardFromRepr(\"\")\n\t\t})\n\t\t// check all squares unrevealed\n\t\t// check some mines were placed\n\t\tfoundMines := false\n\t\tfor i := 0; i \u003c Width*Height; i++ {\n\t\t\turequire.False(t, board.cells[i/Width][i%Width].IsRevealed)\n\t\t\tif board.cells[i/Width][i%Width].IsMine {\n\t\t\t\tfoundMines = true\n\t\t\t}\n\t\t}\n\t\turequire.True(t, foundMines)\n\n\t\t// check BoardFromRepr(hex).ToHexRepr() == hex\n\t\thex := board.ToHexRepr()\n\t\turequire.Equal(t, len(hex), 2*Width*Height, \"len(hex), 2*Width*Height\")\n\t\turequire.Equal(t, hex, BoardFromRepr(hex).ToHexRepr(), \"hex, BoardFromRepr(hex).ToHexRepr()\")\n\t}\n\t{\n\t\turequire.PanicsWithMessage(t, \"invalid state length\", func() {\n\t\t\tBoardFromRepr(\"0FaaBBccDDee\")\n\t\t})\n\t\turequire.PanicsWithMessage(t, \"Error decoding hex:encoding/hex: invalid byte: 120\", func() {\n\t\t\tBoardFromRepr(\"xx\")\n\t\t})\n\t}\n}\n"},{"name":"render.gno","body":"package minesweeper\n\nimport (\n\t\"math/rand\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/p/grepsuzette/pr2554/v1/ternary\"\n)\n\nconst (\n\turlImage              = \"https://upload.wikimedia.org/wikipedia/commons/b/b1/497-octopus.svg\"\n\tattributionAboveImage = \"Vincent Le Moign, CC BY 4.0 \u003chttps://creativecommons.org/licenses/by/4.0\u003e, via Wikimedia Commons\"\n\trRoot                 = \"/r/grepsuzette/pr2554/v6\"\n)\n\nvar prng *rand.Rand\n\nfunc Intn(n int) int {\n\tif prng == nil {\n\t\t// Note: our PRNG is not stateful as calling Render is not going\n\t\t// to modify this stateless realm. We initialize it here when still nil\n\t\t// this creates the randomness we need (seeded from blockchain's height)\n\t\tprng = rand.New(rand.NewPCG(uint64(std.GetHeight()), uint64(9)))\n\t}\n\treturn prng.IntN(n)\n}\n\nfunc Render(path string) string {\n\t// out := \"**Underwater Minesweeper**\\n\\n\"\n\tout := \"\u0026nbsp;\"\n\tout += css()\n\tboard, x, y, _ := parsePath(path)\n\tlost := false\n\tif x != -1 \u0026\u0026 y != -1 {\n\t\tlost = !board.Reveal(x, y)\n\t}\n\twon := !lost \u0026\u0026 didWin(board)\n\n\t// if won {\n\t// \tout += `\u003ccenter\u003e\u003cb\u003eYou are a true underwater hero!\u003c/b\u003e\u003cbr\u003e\u003cbr\u003e\n\n\t// \u003cimg src=\"` + urlImage + `\" width=256 /\u003e\n\n\t// [ [New game](/r/demo/games/minesweeper) | [Back to demo/games](/r/demo/games) ]\u003c/center\u003e\n\t// `\n\t// } else {\n\t// display the minefield as a matrix of buttons\n\tout += header(won, lost)\n\trepr := board.ToHexRepr()\n\tfor j := range board.cells {\n\t\tfor i := range board.cells[j] {\n\t\t\tout += button(i, j, board.cells[j][i], won, lost, repr, x, y)\n\t\t}\n\t\tout += \"\u003cbr /\u003e\"\n\t}\n\tout += footer(won, lost)\n\t// }\n\n\t// if debug {\n\t// \tout += ufmt.Sprintf(\n\t// \t\t\"--- played x=%d y=%d height=%d path=%s error:%s\",\n\t// \t\tx, y, std.GetHeight(), path, \"\",\n\t// \t)\n\t// }\n\treturn out\n}\n\nfunc didWin(board *Board) bool {\n\tmissing := 0\n\tfor j := range board.cells {\n\t\tfor i := range board.cells[j] {\n\t\t\tcell := \u0026board.cells[j][i]\n\t\t\tif !cell.IsMine \u0026\u0026 !cell.IsRevealed {\n\t\t\t\tmissing++\n\t\t\t}\n\t\t}\n\t}\n\treturn missing == 0\n}\n\nfunc button(x, y int, cell Cell, won, lost bool, repr string, playedX, playedY int) string {\n\tvar char string\n\trevealed := cell.IsRevealed || lost || won\n\tclasses := []string{\"btn\"}\n\tif revealed {\n\t\tclasses = append(classes, \"d\")\n\t}\n\tif playedX == x \u0026\u0026 playedY == y \u0026\u0026 cell.IsMine \u0026\u0026 (lost || won) {\n\t\tclasses = append(classes, \"exploded\")\n\t}\n\tswitch {\n\tcase !revealed:\n\t\tchar = \"\u0026nbsp;\"\n\tcase cell.IsMine:\n\t\tchar = ternary.String(lost, \"💣\", \"🌈\")\n\tcase cell.AdjacentMines \u003c= 0:\n\t\tchar = \"\u0026nbsp;\"\n\tcase cell.AdjacentMines \u003e 8:\n\t\tpanic(\"should not happen\")\n\tdefault:\n\t\tclasses = append(classes, \"m\"+strconv.Itoa(cell.AdjacentMines))\n\t\tchar = strconv.Itoa(cell.AdjacentMines)\n\t}\n\t// if ?querystring were allowed, we could then use \u003cbutton\u003e for this.\n\t// return \"\u003cbutton class='...'\u003e\" + char + \"\u003c/button\u003e\"\n\t// instead \u003ca\u003e will be used for now\n\tlink := ternary.String(lost || won, \"#\", ufmt.Sprintf(\n\t\trRoot+\"/games/minesweeper:state=%s\u0026x=%d\u0026y=%d\",\n\t\trepr, x, y,\n\t))\n\treturn ufmt.Sprintf(\n\t\t`\u003ca href=\"%s\" draggable=\"false\" class=\"%s\"\u003e%s\u003c/a\u003e`,\n\t\tlink, strings.Join(classes, \" \"), char,\n\t)\n}\n\nfunc css() string {\n\treturn `\u003cstyle type=\"text/css\"\u003e\n    form button, form a.btn {\n\t    appearance: button;\n\t    box-sizing: border-box;\n\t\tdisplay: inline-block;\n        margin: 0; \n\t\tpadding: 0;\n        background-color: #ccc;\n        border: 2px outset #eee;\n        height: 32px;\n        width: 32px;\n\t\tline-height: 32px;\n\t\ttext-align: center;\n        cursor: pointer;\n        font-weight: 800;\n\t\ttext-decoration: none;\n\t\tdraggable: none;\n\t\tuser-select: none;\n    }\n    form button.d, form a.btn.d {\n        cursor: default;\n        border-bottom: 1px solid #888;\n        border-left: 1px solid #888;\n        border-right: none;\n        border-top: 2px solid transparent;\n\t\theight: 32px;\n    }\n\tform button:hover, form a.btn:hover {\n        background-color: #ddd;\n    }\n\tform button.d:hover, form a.btn.d:hover {\n        background-color: #ccc;\n    }\n    form button.m1, form a.btn.m1 { color: blue; }\n    form button.m2, form a.btn.m2 { color: green; }\n    form button.m3, form a.btn.m3 { color: red; }\n    form button.m4, form a.btn.m4 { color: navy; }\n    form button.m5, form a.btn.m5 { color: brown; }\n    form button.m6, form a.btn.m6 { color: purple; }\n    form button.m7, form a.btn.m7 { color: cyan; }\n    form button.m8, form a.btn.m8 { color: orange; }\n    form button.exploded, form a.btn.exploded { \n        background-color: #ccc;\n        opacity: 1;\n        animation: \n            0.5s 0.1s backwards ease-in explode,\n            1s 0.6s alternate infinite ease glowing;\n\t}\n    @keyframes explodedisable {\n        from {\n            transform: scale(150);\n            opacity: 0.1;\n        }\n        to {\n        background-color: #ccc;\n            transform: scale(1);\n        }\n    }\n    @keyframes glowing {\n        from {\n        text-shadow:\n            -1px -1px 40px rgba(255,0,0,.1),\n            1px 1px 40px rgba(255,0,0,.1);\n        }\n        to {\n            text-shadow:\n               -1px -1px 8px rgba(255,0,0,.54),\n               1px 1px 8px rgba(255,0,0,.54);\n        }\n    }\n    div#board { \n\t\tdisplay: flex; \n\t\tflex-direction: row;\n\t}\n\t#left {\n\t\tflex-shrink: 1;\n        padding-right: 5px;\n\t}\n\t#right {\n\t\tflex-shrink: 0;\n\t\tflex-basis: auto;\n\t\tborder: 3px double #ccc;\n\t}\n\tdiv#board.lost {\n\t\tanimation: 1s ease-in-out booom;\n\t}\n    @keyframes booom {\n\t\t0% {\n\t\t\ttransform: scale(8) rotateZ(7720deg) translateX(200px);\n\t\t\tfilter: brightness(2.9);\n\t\t}\n\t\t20% { filter: translateX(0); }\n\t\t90% { filter: brightness(1.0); }\n\t\t100% {\n\t\t\ttransform: scale(1) rotate(0deg);\n\t\t}\n\t}\n    .rotated {\n        width: 200px;\n        height: 200px;\n        background-color: lightblue;\n        transform: rotateZ(45deg) rotateX(45deg) rotateY(45deg);\n        perspective: 1000px;\n    }\n\u003c/style\u003e\n`\n}\n\nfunc header(won, lost bool) string {\n\tvar title, legend string\n\tif won {\n\t\ttitle = \"You saved my underwater realm!\"\n\t\t// unlock nft/badge?\n\t\tlegend = `\n\t\t🐠 = hooray!\u003cbr\u003e\n\t\t🦐 = so brave\u003cbr\u003e\n\t\t🦈 = thank you\u003cbr\u003e\n\t\t🐳 = well done\u003cbr\u003e`\n\t} else if !lost {\n\t\ttitle = \"Save me, my underwater realm is threatened by water mines.\"\n\t\tlegend = `\n🐠 = yes\u003cbr\u003e\n🦐 = it's true\u003cbr\u003e\n🦈 = yep\u003cbr\u003e\n🐳 = true that\u003cbr\u003e\n\n[\u003c quit to games](` + rRoot + `/games)`\n\t} else {\n\t\t// Nice try, boomer 🤷\n\t\t// title = \"\u003cb\u003eAyaa!!\u003c/b\u003e 🤯🤯🤯🤯🤯\\n\\n\"\n\t\t// title += \"Alas you hit a mine.\"\n\t\ttitle = \"Alas you hit a mine!\"\n\t\t// legend = `\n\t\t// 🐠 = yes\u003cbr\u003e\n\t\t// 🦐 = it's true\u003cbr\u003e\n\t\t// 🦑 = please\u003cbr\u003e\n\t\t// 🐙 = help\u003cbr\u003e\n\t\t// 🦈 = yep\u003cbr\u003e\n\t\t// 🐳 = true that\u003cbr\u003e`\n\t}\n\n\treturn `\u003cform\u003e\u003cstrong\u003e` + title + `\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;/\u003c/strong\u003e\n\u003cdiv id=\"board\" ` + ternary.String(lost, \"class='lost'\", \"\") + `\u003e\n\u003cdiv id=\"left\"\u003e\n\u003cimg src=\"` + urlImage + `\" width=128 title=\"I was drawn by Vincent Le Moign, CC BY 4.0 via Wikimedia Commons\" /\u003e\u003cbr\u003e` + legend + `\u003c/div\u003e\n\u003cdiv id=\"right\"\u003e\n`\n}\n\nfunc footer(won, lost bool) string {\n\tout := ``\n\n\tif lost || won {\n\t\tout += \"\u003c/div\u003e\\n\u003c/div\u003e\\n\\n[ [New game](\" + rRoot + \"/games/minesweeper) | \" +\n\t\t\t\"[Back to demo/games](\" + rRoot + \"/games) ]\\n\\n\"\n\t}\n\tout += `\n\u003c/div\u003e\n\u003c/div\u003e\n\u003c/form\u003e\n`\n\treturn out\n}\n\n// Decompose path, into valid game and played coordinates (or -1,-1)\n// The path is like \"state=\u003chexadecimalBytes\u003e\u0026move=c3\"\n//\n//   - state is empty or 9 characters,\n//     imagine the following but without the \\n: \"-OX\\nO--\\n---\".\n//     O always plays first.\n//\n//   - move coordinate ranges from \"a1\" to \"c3\" but can be empty.\n//\n//   - debug \u0026debug enables printing of a debug line.\nfunc parsePath(path string) (game *Board, x, y int, debug bool) {\n\th, e := BreakToMap(path)\n\tif e != nil {\n\t\tpanic(e)\n\t}\n\tgame = BoardFromRepr(h[\"state\"])\n\t_, debug = h[\"debug\"]\n\tx, y = -1, -1\n\tif sx, hasX := h[\"x\"]; hasX {\n\t\tif n, e := strconv.Atoi(sx); e == nil {\n\t\t\tx = n\n\t\t}\n\t}\n\tif sy, hasY := h[\"y\"]; hasY {\n\t\tif n, e := strconv.Atoi(sy); e == nil {\n\t\t\ty = n\n\t\t}\n\t}\n\treturn game, x, y, debug\n}\n\n// Break down a string of url parameters to map[string]string.\n// E.g. \"foo=a\u0026bar=b\" -\u003e (map[string]string{foo:\"a\", bar:\"b\"}, nil)\nfunc BreakToMap(querystring string) (map[string]string, error) {\n\tm := make(map[string]string)\n\tfor _, s := range strings.Split(querystring, \"\u0026\") {\n\t\tif len(strings.TrimSpace(s)) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tidx := strings.Index(s, \"=\")\n\t\tif idx \u003e -1 {\n\t\t\tm[s[:idx]] = s[idx+1:]\n\t\t} else {\n\t\t\tm[s] = \"\"\n\t\t}\n\t}\n\treturn m, nil\n}\n"},{"name":"render_test.gno","body":"package minesweeper\n\nimport (\n\t\"testing\"\n\n\t\"gno.land/p/demo/urequire\"\n)\n\nfunc TestParseEmptyPath(t *testing.T) {\n\t{\n\t\tboard, x, y, debug := parsePath(\"\")\n\t\turequire.True(t, board != nil, \"board was created\")\n\t}\n\t{\n\t\tboard, x, y, debug := parsePath(\"state=21210220010000000303020202010000200100012001000001010001010100000000010101000000000102210201010000012103032102010001010221020220\")\n\t\turequire.True(t, board != nil, \"board was recovered\")\n\t}\n}\n\nfunc TestPlay(t *testing.T) {\n\tnewgame := func() *Board {\n\t\treturn BoardFromRepr(\"21210220010000000303020202010000200100012001000001010001010100000000010101000000000102210201010000012103032102010001010221020220\")\n\t}\n\n\t// ++2+1...  we always play the same game from the start in this test\n\t// 332221..  the mines are indicated by +\n\t// +1.1+1..\n\t// 11.111..\n\t// ..111...\n\t// .12+211.\n\t// .1+33+21\n\t// .112+22+\n\turequire.False(t, newgame().Reveal(0, 0), \"we exploded in the topleft corner\")\n\turequire.False(t, newgame().Reveal(1, 0), \"we exploded in (1,0)\")\n\turequire.True(t, newgame().Reveal(2, 0), \"we survived uncovering (2,0)\")\n\turequire.False(t, newgame().Reveal(3, 0), \"we exploded in (3,0)\")\n\turequire.True(t, newgame().Reveal(4, 0), \"we survived uncovering (4,0)\")\n\turequire.False(t, newgame().Reveal(7, 7), \"we exploded in the bottomright corner\")\n\n\t// let's now play a sequence and test revealing\n\tboard := newgame()\n\turequire.True(t, board.Reveal(7, 0), \"we survived the topright corner\")\n\tnumRevealed := 0\n\tfor i := 0; i \u003c Width*Height; i++ {\n\t\tif board.cells[i/Width][i%Width].IsRevealed {\n\t\t\tnumRevealed++\n\t\t}\n\t}\n\turequire.Equal(t, numRevealed, 25, \"clicking topright corner reveals 25 squares\")\n}\n"}]},"deposit":"100000ugnot"}],"fee":{"gas_wanted":"100000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1sQrIl4krsBIKtCTfMqWzbkKQDSfmPtMYQA9EvsJqmu"},"signature":"TK4HalWnLhGJZh43VYeWCoKqRp6DG7eEzhGmhNgWIvlKdlKxRH7BbEVKPsHOzXEmlJZkWG9y14Q4YcwvKEtz0g=="}],"memo":""},"blockNum":"1768850"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"YJIo5KeP/7ObTl3gi+ZXxW2TQ1HGIiIQyVKBH6XUlTc4oJfiQ2yaj8kdv7NbmxpS1zJ79TBUG566k0vie824Eg=="}],"memo":""},"blockNum":"1772555"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"+KW76KkM390CqRrz4K9AUCCFIPVnffNT379zu/W+1ThLZ9/TCunANMGmvu51GbqBhYrjEG+6WzddOWb/14p0Ng=="}],"memo":""},"blockNum":"1772564"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"7500000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/gnoswap/v2/gns","7500000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000","100","7504837"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"4dvSFUT+E2lERD2d9PGASDmMU3cVisc/7Da57UyjskUXMz7YK4sRiZI5I++RNTtfbzOHm04GxaIlEsxXtSkVhw=="}],"memo":""},"blockNum":"1773516"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"10000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/onbloc/foo","10000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/onbloc/foo:3000","100","21620831"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"MR+VHvW4pMssp348DfLPbbnoaXAKis1jZ2uZOwkNp2VULN1LsqXS+aPo7rMB2EdKB6j903SpPqdGK2zarvigPw=="}],"memo":""},"blockNum":"1773525"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/obl","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gno.land/r/onbloc/foo","gno.land/r/onbloc/obl","2500000","EXACT_IN","gno.land/r/onbloc/foo:gno.land/r/onbloc/obl:3000","100","2706516"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"xH1fizqPXY06Yl9s1No24vElLNC2DfO6Gbdr8y4h9ug3dLE83isvxHsX8IJw/cfGIAx8lYM1CFcMHbGbtdviqg=="}],"memo":""},"blockNum":"1773533"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/bar","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/bar","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gno.land/r/onbloc/bar","gno.land/r/onbloc/foo","100000000","EXACT_IN","gno.land/r/onbloc/bar:gno.land/r/demo/wugnot:3000*POOL*gno.land/r/demo/wugnot:gno.land/r/onbloc/foo:3000","100","20501312"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"MTEXnrmpsn6S1poaS++1RS3xF+hVL+DFWgnzm1QEUf1gwHiT3zFSqvd9zFUvflduSOgWCJcAOiUzGmeKMJo5mQ=="}],"memo":""},"blockNum":"1773544"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/bar","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gno.land/r/onbloc/foo","gno.land/r/onbloc/bar","5000000","EXACT_IN","gno.land/r/onbloc/foo:gno.land/r/demo/wugnot:3000*POOL*gno.land/r/demo/wugnot:gno.land/r/onbloc/baz:3000*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/bar:3000","100","44344254"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"aFRlCRgTxRA9cD+7X7zm1pIdLatHptCn/vbtt26X/7VrjImRP8ddZbaPyZMwQe2dfVWXffJIx7Yro4xofp1Mew=="}],"memo":""},"blockNum":"1773552"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["65"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["65","true"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["99"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["99","true"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["101"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["101","true"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["126"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["147"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["165"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"fZEzigEmkiWa5SdShVljACpx7NPMMe0jclU0n4Ynsol7Cn9DdqPeitLVRuyZ5AIgxpzpnOEnh5jurnNFwqHEBA=="}],"memo":""},"blockNum":"1773578"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","181"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["181"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"j1W0ywfb0SwYlQjIfrV7JMyi2ipUeYK6F3RuMziqimZ+Ai8qZXPhokdb774Y8wQe26lpspWXb/mk/opGeVn48A=="}],"memo":""},"blockNum":"1773586"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["56"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["134"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["139"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["180"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"OlpVBjDQs0ZsWFI9tcIB9HIWh3aPwNNvydTCyAxjtE4zXm/QSc2jKj+AAiqyErwFiNCcPuK6GM9/mid6DolGwQ=="}],"memo":""},"blockNum":"1773591"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","134"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["134"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"1yw7AsLSfHCF3y5iSILQeJ9rCJUJ6Cs6tE8v677712MJ8j6uWpxWOxQYbr7+HZv7I133tq4r+EYVgrjSXr2zVg=="}],"memo":""},"blockNum":"1773598"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","10000000"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","22497897"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"10000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/position","func":"IncreaseLiquidity","args":["134","10000000","22497897","9950000","22385408","9999999999"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"6jE31bLVFb0LUaEsxtaRKJWO/fdEaZvV+pk2GPZNSW8oSaW1S7m4YWANdhxCbDF7HQC4K6/pGJhGS3dgWUMC9w=="}],"memo":""},"blockNum":"1773607"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14ks20xj4csuyn0jucwdt96rgr6cenht30avkyr","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g14ks20xj4csuyn0jucwdt96rgr6cenht30avkyr","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g14ks20xj4csuyn0jucwdt96rgr6cenht30avkyr","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g14ks20xj4csuyn0jucwdt96rgr6cenht30avkyr","send":"2000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/gnoswap/v2/gns","2000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000","100","2001288"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5AUjFIdvgvvYPCszkBSj4LyyQVI/uczvuxzbg5IRDB3"},"signature":"fYY1gb6/4Jff3KIPNQ1cVf8j7jYwcjk1UaM/2ZfHOP4LK1Xqn0F6GU5g81Pmu5hjbyo8PEFJYeB3mHlDLzBDzA=="}],"memo":""},"blockNum":"1775200"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14ks20xj4csuyn0jucwdt96rgr6cenht30avkyr","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g14ks20xj4csuyn0jucwdt96rgr6cenht30avkyr","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g14ks20xj4csuyn0jucwdt96rgr6cenht30avkyr","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g14ks20xj4csuyn0jucwdt96rgr6cenht30avkyr","send":"2000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/gnoswap/v2/gns","2000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000","100","2001288"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5AUjFIdvgvvYPCszkBSj4LyyQVI/uczvuxzbg5IRDB3"},"signature":"etBtkGChF9YJK/BDmCKisJAWqzIbcJBn6gqzPs2kRFNvAeXvPQKlhXO69GH9g+CUKJyjC/sH66K72rSdEp8Vng=="}],"memo":""},"blockNum":"1775207"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g16spe09atej02lcgxwqfpnk6l2ghqvm56z6hsyv","to_address":"g1vpe4yqlcaxtq5adn343j7e6ng9xqalx2mg57ws","amount":"2000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AytBvtveRsnaHgNxVwvLpAY6gvUnY1U0TbUvlHLra3aJ"},"signature":"izXKPTIja7fk5nV+fbWmvOCWsDOEyqRcDZmD49SSL5Ip8Uq3Fn3VFJ6b9KyILgGl1PY8tskETuNm//xxnsamFw=="}],"memo":""},"blockNum":"1778003"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"L6DPk1OfKveIMizMHxD+Eu5oIdBIbUUI939LJTR4t/xYuJRcEO8R50koFEk+9jcI1siJTXAbTHBXlFqVJQPhew=="}],"memo":""},"blockNum":"1778938"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"A6mRnyMb1kz0ku7kv1A+QCQaQi+MZ823P21O+zOZk7hR4Dn/JOncu7sG+E1MTlTdjnv0Ujkiet9Hp5/wQtEYCQ=="}],"memo":""},"blockNum":"1778943"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/onbloc/obl","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"8000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/onbloc/obl","8000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/onbloc/baz:3000*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/usdc:3000*POOL*gno.land/r/onbloc/usdc:gno.land/r/onbloc/obl:3000","100","18912562"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgBLYKtI5YjFhkkspn0XG82pSc4nulX2VLybSaJsrccb"},"signature":"PNcnbDMkQsRsgDNQMQE1DFH3QwsiIfOieAGL/VrnSIALNmAVAgh7hF8urGo7d9kPBhXtGYZKMIIX2N8UoJGcUQ=="}],"memo":""},"blockNum":"1780064"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"5000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/onbloc/foo","5000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/onbloc/foo:3000","100","10810336"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgBLYKtI5YjFhkkspn0XG82pSc4nulX2VLybSaJsrccb"},"signature":"Kd7C1W6Im7x1qAvEXSElty6bK2XkMqyD5+RRWF8hJJNEoGAI0ckVrIEeTBMpdO3+Nnkf7qce0x0x5dv6N3n/+g=="}],"memo":""},"blockNum":"1780073"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/onbloc/obl","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/onbloc/obl","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gno.land/r/onbloc/obl","gno.land/r/onbloc/foo","10000000","EXACT_IN","gno.land/r/onbloc/obl:gno.land/r/onbloc/foo:3000","100","9062782"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgBLYKtI5YjFhkkspn0XG82pSc4nulX2VLybSaJsrccb"},"signature":"TEJyMOS/Xl1rcblhQZkCMu5j5IsF5xdf1H9kDUOCX5lYSU1isHAZArBXqx3QmbZaJMllOgALjs3rYx7oEUzA4Q=="}],"memo":""},"blockNum":"1780083"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/onbloc/obl","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/onbloc/obl","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/onbloc/baz","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gno.land/r/onbloc/obl","gno.land/r/onbloc/baz","5000000","EXACT_IN","gno.land/r/onbloc/obl:gno.land/r/onbloc/usdc:3000*POOL*gno.land/r/onbloc/usdc:gno.land/r/demo/wugnot:3000*POOL*gno.land/r/demo/wugnot:gno.land/r/onbloc/baz:3000","100","4121286"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgBLYKtI5YjFhkkspn0XG82pSc4nulX2VLybSaJsrccb"},"signature":"f9unpKHbAyvvivJ9NOII44hH8DD10cetT8s9aKZPMcMSmqyIsthGUZgtgRJgo2huiKw7ebU7S7O+J9chHJCwuA=="}],"memo":""},"blockNum":"1780140"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","5267342"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/onbloc/bar","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","50000000"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1vsm68lq9cpn7x507s6gh59anmx86kxfhzyszu2","5267342"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"5267342ugnot","pkg_path":"gno.land/r/gnoswap/v2/position","func":"Mint","args":["gnot","gno.land/r/onbloc/bar","3000","15600","29460","5267342","50000000","5241005","49750000","7282571140","g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"SetTokenURILast","args":null}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgBLYKtI5YjFhkkspn0XG82pSc4nulX2VLybSaJsrccb"},"signature":"xKzucacOQ9HP+7LSEYR3s5pGuS34VbePMl7sK9OGVRJN/Afq3IM2O41E0IIAi38ikS/z1VLxV5sQpC74HJC0gQ=="}],"memo":""},"blockNum":"1780209"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["39"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["136"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["153"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["167"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["179"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgBLYKtI5YjFhkkspn0XG82pSc4nulX2VLybSaJsrccb"},"signature":"1t2c8kBCStkdqokUY0otbSHF9od3VTv2X1WJLmBcSS5cUGhW5hoGJa4HWfL10bsM0cSoXYa8k4wAfI79BNHhTg=="}],"memo":""},"blockNum":"1780328"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","3456089"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","7500000"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1vsm68lq9cpn7x507s6gh59anmx86kxfhzyszu2","3456089"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"3456089ugnot","pkg_path":"gno.land/r/gnoswap/v2/position","func":"Mint","args":["gnot","gno.land/r/onbloc/foo","3000","900","14760","3456089","7500000","3438809","7462500","7282571140","g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"SetTokenURILast","args":null}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgBLYKtI5YjFhkkspn0XG82pSc4nulX2VLybSaJsrccb"},"signature":"V97xW7kMyQvZHP/LU076FSpX9B23KBEuduS1v1pNlvttxAE3ZYbLgJkO5TjpEQxZrEfZ9ju28xf7M4ajIlip0A=="}],"memo":""},"blockNum":"1780340"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","167"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["167"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgBLYKtI5YjFhkkspn0XG82pSc4nulX2VLybSaJsrccb"},"signature":"gvFfBX+1ZO+gKkID5BMINX0kfRoXmUHc7FlibNaBSO0QcRrb4JfHnCt2mQdJ2+qfFzMWlhRpkIVaTBrpQ3fMPw=="}],"memo":""},"blockNum":"1780360"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1j3ggnsjh6rzqpwh970l3wpywnavahvyyzr4mc6","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1j3ggnsjh6rzqpwh970l3wpywnavahvyyzr4mc6","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1j3ggnsjh6rzqpwh970l3wpywnavahvyyzr4mc6","send":"","pkg_path":"gno.land/r/onbloc/obl","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1j3ggnsjh6rzqpwh970l3wpywnavahvyyzr4mc6","send":"1000000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/onbloc/obl","1000000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/onbloc/foo:3000*POOL*gno.land/r/onbloc/foo:gno.land/r/onbloc/obl:3000,gno.land/r/demo/wugnot:gno.land/r/onbloc/baz:3000*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/usdc:3000*POOL*gno.land/r/onbloc/usdc:gno.land/r/onbloc/obl:3000","50,50","2356394660"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax4xjQYCwzwHJacSBlBHm5koaYTr1cDM+Z2bz3Cz38jC"},"signature":"2BOBURb2anMB96e2cbvMUeGzdLvea++Ea7w8I6fSPHB9C4Cm0t3/lxMCLmdO9rLbPldUlRYpjIvVq5W/jWfs/w=="}],"memo":""},"blockNum":"1785069"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1j3ggnsjh6rzqpwh970l3wpywnavahvyyzr4mc6","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1j3ggnsjh6rzqpwh970l3wpywnavahvyyzr4mc6","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1j3ggnsjh6rzqpwh970l3wpywnavahvyyzr4mc6","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1j3ggnsjh6rzqpwh970l3wpywnavahvyyzr4mc6","send":"1931000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/onbloc/foo","1931000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/onbloc/foo:3000","100","4166331005"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax4xjQYCwzwHJacSBlBHm5koaYTr1cDM+Z2bz3Cz38jC"},"signature":"NSuz7R8Ekwcu+T2tgVBeq7+3o9Ov0XAz/I3+D30i0SB0SiV1imExF0Dyc8VwCBU4gtu+R3WeeWTUMeCLk60lpQ=="}],"memo":""},"blockNum":"1785084"}
