{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g19y8hwqwp43ena79yg95nv6nfzhmyn90zcvx0u8","package":{"name":"lemoncoin","path":"gno.land/r/g19y8hwqwp43ena79yg95nv6nfzhmyn90zcvx0u8/lemoncoin","files":[{"name":"lemoncoin.gno","body":"import (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tlemon   *grc20.AdminToken\r\n\tadmin std.Address = \"g19y8hwqwp43ena79yg95nv6nfzhmyn90zcvx0u8\" // TODO: helper to change admin\r\n)\r\n\r\nfunc init() {\r\n\tlemon = grc20.NewAdminToken(\"lemomcoin\", \"lemon\", 4)\r\n\tlemon.Mint(admin, 1000000*100000)                                    // @administrator (1M)\r\n\tlemon.Mint(\"g1h7yteaj4ewnms5az558manaw68fa8ldtt66376\", 100000*100000) // @lemomcoin (100k)\r\n}\r\n\r\n// method proxies as public functions.\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn lemon.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := lemon.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := lemon.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tlemon.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tlemon.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tlemon.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// faucet.\r\n\r\nfunc Faucet() {\r\n\t// FIXME: add limits?\r\n\t// FIXME: add payment in gnot?\r\n\tcaller := std.GetOrigCaller()\r\n\tlemon.Mint(caller, 1000*10000) // 1k\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tlemon.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tlemon.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render le rendu\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn lemon.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := lemon.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n// secure access for admin :)\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9ABK1ikjJNzBdE6cNiD+2r/OW6a7KdUm6Xu0+4H0gdl"},"signature":"uRpmPpToFZjwxlPWp2y/tB8VmL1lIAnGwrxVBLVcJgxffB1FZj/Y9Qgn9yTNbMibI7h3sKh9ATVDaMF1rrBUtg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"439859"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g19y8hwqwp43ena79yg95nv6nfzhmyn90zcvx0u8","package":{"name":"lemoncoin","path":"gno.land/r/g19y8hwqwp43ena79yg95nv6nfzhmyn90zcvx0u8/lemoncoin","files":[{"name":"lemoncoin.gno","body":"import (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tlemon   *grc20.AdminToken\r\n\tadmin std.Address = \"g19y8hwqwp43ena79yg95nv6nfzhmyn90zcvx0u8\" // TODO: helper to change admin\r\n)\r\n\r\nfunc init() {\r\n\tlemon = grc20.NewAdminToken(\"lemomcoin\", \"lemon\", 4)\r\n\tlemon.Mint(admin, 1000000*100000)                                    // @administrator (1M)\r\n\tlemon.Mint(\"g1h7yteaj4ewnms5az558manaw68fa8ldtt66376\", 100000*100000) // @lemomcoin (100k)\r\n}\r\n\r\n// method proxies as public functions.\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn lemon.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := lemon.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := lemon.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tlemon.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tlemon.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tlemon.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// faucet.\r\n\r\nfunc Faucet() {\r\n\t// FIXME: add limits?\r\n\t// FIXME: add payment in gnot?\r\n\tcaller := std.GetOrigCaller()\r\n\tlemon.Mint(caller, 1000*10000) // 1k\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tlemon.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tlemon.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render le rendu\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn lemon.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := lemon.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n// secure access for admin :)\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9ABK1ikjJNzBdE6cNiD+2r/OW6a7KdUm6Xu0+4H0gdl"},"signature":"ycKlbQt9tpwM26p96uXJh2++41A/mUXrp7r6hLeNhelPUC6eayzPxlopMDcYVRhfs/feHw+zRL3IW3HlyPYFmQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"439875"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g14x0es9xv7snu2ludcszkxy32jhkamnq9jh57ly","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"LyFWXG9nlaNd8KhVw9LI520zpy1E8KCp8gt/cHIYGZM3/2pbr6i0qVWKC/UMDPy/fRarZQl0jfZqdA/CBqKBEQ=="}],"memo":""},"blockNum":"440134"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g19y8hwqwp43ena79yg95nv6nfzhmyn90zcvx0u8","package":{"name":"lemoncoin","path":"gno.land/r/g19y8hwqwp43ena79yg95nv6nfzhmyn90zcvx0u8/lemoncoin","files":[{"name":"lemoncoin.gno","body":"import (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tlemon   *grc20.AdminToken\r\n\tadmin std.Address = \"g19y8hwqwp43ena79yg95nv6nfzhmyn90zcvx0u8\" // TODO: helper to change admin\r\n)\r\n\r\nfunc init() {\r\n\tlemon = grc20.NewAdminToken(\"lemomcoin\", \"lemon\", 4)\r\n\tlemon.Mint(admin, 1000000*100000)                                    // @administrator (1M)\r\n\tlemon.Mint(\"g1h7yteaj4ewnms5az558manaw68fa8ldtt66376\", 100000*100000) // @lemomcoin (100k)\r\n}\r\n\r\n// method proxies as public functions.\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn lemon.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := lemon.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := lemon.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tlemon.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tlemon.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tlemon.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// faucet.\r\n\r\nfunc Faucet() {\r\n\t// FIXME: add limits?\r\n\t// FIXME: add payment in gnot?\r\n\tcaller := std.GetOrigCaller()\r\n\tlemon.Mint(caller, 1000*10000) // 1k\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tlemon.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tlemon.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render le rendu\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn lemon.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := lemon.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n// secure access for admin :)\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9ABK1ikjJNzBdE6cNiD+2r/OW6a7KdUm6Xu0+4H0gdl"},"signature":"9xkB+tMjT11PeVGk/WOIgQ9GXATCKPaSSJHIl8cel6F4ac0xmgeAfjnb5Ixcq48cNcWJujJbhsuC/T6wPkMrSA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"440164"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g19y8hwqwp43ena79yg95nv6nfzhmyn90zcvx0u8","package":{"name":"hello","path":"gno.land/r/g19y8hwqwp43ena79yg95nv6nfzhmyn90zcvx0u8/hello","files":[{"name":"package.gno","body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9ABK1ikjJNzBdE6cNiD+2r/OW6a7KdUm6Xu0+4H0gdl"},"signature":"SrEnEEs6k1/MzZaRV+onYP2qo9I5Bnjvd0sbbAOMn5wwGgL2KvSSBHwNkWXyq4EYCWbMJUBXQYq1Bi9p43OX3Q=="}],"memo":"Deployed through play.gno.land"},"blockNum":"440256"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fv90q4fscffxadmtf7d93nvhvkl48g7zxeftng","send":"","pkg_path":"gno.land/r/onbloc/baz","func":"Approve","args":["g1dexaf6aqkkyr9yfy9d5up69lsn7ra80af34g5v","10000000"]},{"@type":"/vm.m_call","caller":"g1fv90q4fscffxadmtf7d93nvhvkl48g7zxeftng","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g1dexaf6aqkkyr9yfy9d5up69lsn7ra80af34g5v","100130055"]},{"@type":"/vm.m_call","caller":"g1fv90q4fscffxadmtf7d93nvhvkl48g7zxeftng","send":"","pkg_path":"gno.land/r/gnoswap/position","func":"Mint","args":["gno.land/r/onbloc/baz","gno.land/r/onbloc/foo","3000","16080","30000","10000000","100130055","9950000","99629405","7282571140","g1fv90q4fscffxadmtf7d93nvhvkl48g7zxeftng"]},{"@type":"/vm.m_call","caller":"g1fv90q4fscffxadmtf7d93nvhvkl48g7zxeftng","send":"","pkg_path":"gno.land/r/gnoswap/gnft","func":"SetTokenURILast","args":null}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ai9E2pMopMO+RCKw2hJMIIEXVjG98gjXWGAcWWyqUaUD"},"signature":"A0RWRate1OQMXw+wiostbIfU7kqkECwqUVo5BmiVlBUS0hsqi6gBLDJkaSod2c5CvyFZgErhGYb9JVNCxtys/A=="}],"memo":""},"blockNum":"442607"}
