{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g162jgpk4740r6a7g53cgz9ahxqtyuekgqchw6w9","send":"","pkg_path":"gno.land/r/varmeta/demo/v1/domain/resolver","func":"Resolve","args":["thinhnx.gno"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqD4AqUY/VAPgrwGhq7e9Px4Pj81GRDZYwRvm+A69599"},"signature":"4H88E+BY1OCcKJEeKgqYjhRtaUsW4ZBtKry5kBSVhbkI5Wb4AP7yJjN/AJ/RMuwQGPtV7nsJJMvXEYzMcyZa4Q=="}],"memo":"Called through gno.studio"},"blockNum":"1444518"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1330dfff36jyy44rgq68y33mzxx9uhrgzyq88wh","send":"100ugnot","pkg_path":"gno.land/r/varmeta/demo/v1/domain/registrar","func":"Register","args":["ngoc.gno","gnot"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhsU4msjmCnK33Q/QPsxJX7LgQYk2CD9tgtpMSntVe1F"},"signature":"Wt7Ea+8apHWSV4+SEqzsec07Fcw8c5c37WukBBf6e+JYPaWn0oAWU90Laxzggy0rBNvQfmVzhk9TcpF6aPRbEw=="}],"memo":""},"blockNum":"1444534"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1330dfff36jyy44rgq68y33mzxx9uhrgzyq88wh","send":"100ugnot","pkg_path":"gno.land/r/varmeta/demo/v1/domain/registrar","func":"Register","args":["ngov.gno","gnot"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhsU4msjmCnK33Q/QPsxJX7LgQYk2CD9tgtpMSntVe1F"},"signature":"vjX2lZ30X/r88BgwiRwT6Y8Xpi8LaYOmvXU08bQJADAE5a5xUGLlwFDnFs82NK3jUpA4o3fF1BPquzKkdkGbxA=="}],"memo":""},"blockNum":"1444540"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1330dfff36jyy44rgq68y33mzxx9uhrgzyq88wh","send":"100ugnot","pkg_path":"gno.land/r/varmeta/demo/v1/domain/registrar","func":"Register","args":["ngoc3.gno","gnot"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhsU4msjmCnK33Q/QPsxJX7LgQYk2CD9tgtpMSntVe1F"},"signature":"zySC00Of+/H1RzDLqoXof/N3jsA8pcnawt7heoORpUJe9qZyyyij+afTNbF8ZNZgLRYqkBymHFhfmtGU16dAxg=="}],"memo":""},"blockNum":"1444608"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1ftdq7qrem28xlqsxm26g04gumdazfryewt7k7f","amount":"5000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"A63nh4lboe7XsIayksWLHfMVDhE8VMz5DG01ByMdGu4UpbIrR1mRttFvAFLT/Mv/hsEX1/46TqfkCdyvUWa2lw=="}],"memo":""},"blockNum":"1445294"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ftdq7qrem28xlqsxm26g04gumdazfryewt7k7f","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1ftdq7qrem28xlqsxm26g04gumdazfryewt7k7f","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1ftdq7qrem28xlqsxm26g04gumdazfryewt7k7f","send":"","pkg_path":"gno.land/r/onbloc/usdc","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1ftdq7qrem28xlqsxm26g04gumdazfryewt7k7f","send":"1869184ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/onbloc/usdc","1869184","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/onbloc/baz:3000*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/usdc:3000","100","1885128"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnOPVjxHvEKRL8tg7M4ZSfpABGnFv5jjZoORVYeRCjbS"},"signature":"lUNluRgbPTh6GAA+DRQNyrd/9t2XuMTj/qnSNjuLKToqoEc9OC3kwzbgRsgtYEryvXOof5tiOHIo6MgAzQnk9w=="}],"memo":""},"blockNum":"1445613"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ftdq7qrem28xlqsxm26g04gumdazfryewt7k7f","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1ftdq7qrem28xlqsxm26g04gumdazfryewt7k7f","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1ftdq7qrem28xlqsxm26g04gumdazfryewt7k7f","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1ftdq7qrem28xlqsxm26g04gumdazfryewt7k7f","send":"1000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/onbloc/foo","1000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/onbloc/usdc:3000*POOL*gno.land/r/onbloc/usdc:gno.land/r/onbloc/obl:3000*POOL*gno.land/r/onbloc/obl:gno.land/r/onbloc/foo:3000","100","2188769"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnOPVjxHvEKRL8tg7M4ZSfpABGnFv5jjZoORVYeRCjbS"},"signature":"GVEl26jH9qL+X5FDXPyECTLTe1rBL4NxBhC14wHO/sUGd5gTbh/vkCBMP0fvnCT9DIBzBbRtoMspDgk+IWW0uA=="}],"memo":""},"blockNum":"1446891"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g18pzv5wz5yh8vfxvuyqqhemkzsszd4kq5src5az","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"ILFIfqUZ2Eb4E7VDd17VadsB5GbzrmSRp4wUX4qa5pcyW0IyKMoRA+oGgcH6M7+C9inY0EdC35bFsxeTUyqmgQ=="}],"memo":""},"blockNum":"1446912"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18pzv5wz5yh8vfxvuyqqhemkzsszd4kq5src5az","send":"100ugnot","pkg_path":"gno.land/r/varmeta/demo/v1/domain/registrar","func":"Register","args":["ngocnguyen.gno","gnot"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvRxJ2Xvji5bIYfOHh413jD/6oNu4SHK/sFByni/zq4k"},"signature":"Y/DumvPhkK/yNECorGnQ02WHVz35YA/PpZLZNfAuE9MOoSzX5t80OAoyjghOyhTQdMhit5OtcPQf1ithtp9eQQ=="}],"memo":""},"blockNum":"1446958"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ejx4xzmgvs5sa0zm52qqyj6dx2jzhvj64t2z5p","to_address":"g18pzv5wz5yh8vfxvuyqqhemkzsszd4kq5src5az","amount":"9000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4/pXSTVaSt9eR1TDs3hRRNTGYuoanyBu9cNYjpTPl+s"},"signature":"fiC3sq310tV8O7qle/NZwCX716ZHsO1apc3rndkn448/Uv2LPmbrq7lTnLy7AP+h88Fss0jSq5E05cvNJ5SVKQ=="}],"memo":""},"blockNum":"1446972"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1e9kpk35mtdp20haeezntjgv5mmhnz9dkhgk4f3","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"5SPfyd/K++IRafXNSJbimcOLn2jZZhFfBUaXqkUE071xd7iT005Gm7zICmMdUXkqmXNZLR76Fg6NkTFjE2eQgg=="}],"memo":""},"blockNum":"1447044"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1e9kpk35mtdp20haeezntjgv5mmhnz9dkhgk4f3","send":"100ugnot","pkg_path":"gno.land/r/varmeta/demo/v1/domain/registrar","func":"Register","args":["ngocthanh.gno","gnot"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Al6yd+N2PZnkbGNPgEwvJDWzjyh6CLAHMppftOaDwPf/"},"signature":"vBMp2+73UsC6D0939KGvsXO8vK4hprRrm1p36DtiyZ12vk9NrDBkva6KSuRxIJAi18SvuiAdDmI08UrnYXUlEw=="}],"memo":""},"blockNum":"1447052"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18pzv5wz5yh8vfxvuyqqhemkzsszd4kq5src5az","to_address":"g1e9kpk35mtdp20haeezntjgv5mmhnz9dkhgk4f3","amount":"18000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvRxJ2Xvji5bIYfOHh413jD/6oNu4SHK/sFByni/zq4k"},"signature":"2TeSEBouxsLVd6EXVqIrLti8OkXzm48HZXOXR0W05iZWmSBpUuq0NysAeHjA+i4QokcY7fsYwdmku5mBgwxd1Q=="}],"memo":""},"blockNum":"1447063"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ftdq7qrem28xlqsxm26g04gumdazfryewt7k7f","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1ftdq7qrem28xlqsxm26g04gumdazfryewt7k7f","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1ftdq7qrem28xlqsxm26g04gumdazfryewt7k7f","send":"","pkg_path":"gno.land/r/onbloc/baz","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1ftdq7qrem28xlqsxm26g04gumdazfryewt7k7f","send":"2000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/onbloc/baz","2000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/onbloc/baz:3000","100","3954617"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnOPVjxHvEKRL8tg7M4ZSfpABGnFv5jjZoORVYeRCjbS"},"signature":"qIWNpEU/l2KIUipj0MWTflu1C5VOkam+dAPwt3UwfcswMwoXAPjUsCdIkjlVY7kyXKfa8l4v9RVWufnkLPlZMg=="}],"memo":""},"blockNum":"1447124"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ftdq7qrem28xlqsxm26g04gumdazfryewt7k7f","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","1000000"]},{"@type":"/vm.m_call","caller":"g1ftdq7qrem28xlqsxm26g04gumdazfryewt7k7f","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","1013183"]},{"@type":"/vm.m_call","caller":"g1ftdq7qrem28xlqsxm26g04gumdazfryewt7k7f","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1vsm68lq9cpn7x507s6gh59anmx86kxfhzyszu2","1000000"]},{"@type":"/vm.m_call","caller":"g1ftdq7qrem28xlqsxm26g04gumdazfryewt7k7f","send":"1000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/position","func":"Mint","args":["gnot","gno.land/r/gnoswap/v2/gns","3000","-6840","7020","1000000","1013183","995000","1008117","7282571140","g1ftdq7qrem28xlqsxm26g04gumdazfryewt7k7f"]},{"@type":"/vm.m_call","caller":"g1ftdq7qrem28xlqsxm26g04gumdazfryewt7k7f","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"SetTokenURILast","args":null}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnOPVjxHvEKRL8tg7M4ZSfpABGnFv5jjZoORVYeRCjbS"},"signature":"ZVUHgB1fr5AeSdG1tXbPqYEg4Vz6WzX6G9N2w/h77+VrcLuCJnUIFQ3cPWOGvALjxYP9Xt0T0yMpIUn1Rsf4pA=="}],"memo":""},"blockNum":"1447264"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ftdq7qrem28xlqsxm26g04gumdazfryewt7k7f","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","78"]},{"@type":"/vm.m_call","caller":"g1ftdq7qrem28xlqsxm26g04gumdazfryewt7k7f","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["78"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnOPVjxHvEKRL8tg7M4ZSfpABGnFv5jjZoORVYeRCjbS"},"signature":"/hcc1jNLCZxXlm9CrBRuhagsAQ0pZteFqNaMsqh6CiRLSBBgKX+GljhBeg21s79eaARtT0FgEF6TFrFQvMErkA=="}],"memo":""},"blockNum":"1448116"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1xdraj62n8kpwukvedmels6h2ppmmpazuwfd4ny","send":"","pkg_path":"gno.land/r/g17ernafy6ctpcz6uepfsq2js8x2vz0wladh5yc3/zentasktic_core","func":"MoveTaskToRealm","args":["14","2"]}],"fee":{"gas_wanted":"8000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Anm6Fnh9HKT7op0Abmsng6nK24zNb2wlCwcn0Fm85yW5"},"signature":"A4zV6FrMQMZ+I9SH3HL1itPTmT/EYL9MhYGZ5h6AvWB6pJxsiQTwC0pKyOPuzoZoDYt7zeBdQm1dFnDKJ0ocWA=="}],"memo":""},"blockNum":"1452771"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1xdraj62n8kpwukvedmels6h2ppmmpazuwfd4ny","send":"","pkg_path":"gno.land/r/g17ernafy6ctpcz6uepfsq2js8x2vz0wladh5yc3/zentasktic_core","func":"AddContextToTask","args":["2","14"]}],"fee":{"gas_wanted":"8000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Anm6Fnh9HKT7op0Abmsng6nK24zNb2wlCwcn0Fm85yW5"},"signature":"4Ig+VJF0JwxkWgpDb8kPC/ricWTDBwNfVksN0uWfMig6WZclyqc+9ilXI4MEKOsVE0hcHgxSXdxFmk7Lqs9txQ=="}],"memo":""},"blockNum":"1452776"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1xdraj62n8kpwukvedmels6h2ppmmpazuwfd4ny","send":"","pkg_path":"gno.land/r/g17ernafy6ctpcz6uepfsq2js8x2vz0wladh5yc3/zentasktic_core","func":"SetTaskDueDate","args":["14","2024-09-12"]}],"fee":{"gas_wanted":"8000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Anm6Fnh9HKT7op0Abmsng6nK24zNb2wlCwcn0Fm85yW5"},"signature":"u9WESMqRkzjezgv8k0zah76qhIVODgdTNG+2u9bRrwNAnFpVp1GFeQfl/qvZzOo4xAf2oCfF6+S9w9ZmE8RNuQ=="}],"memo":""},"blockNum":"1452780"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1xdraj62n8kpwukvedmels6h2ppmmpazuwfd4ny","send":"","pkg_path":"gno.land/r/g17ernafy6ctpcz6uepfsq2js8x2vz0wladh5yc3/zentasktic_core","func":"MoveTaskToRealm","args":["14","3"]}],"fee":{"gas_wanted":"8000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Anm6Fnh9HKT7op0Abmsng6nK24zNb2wlCwcn0Fm85yW5"},"signature":"AhqoDr8zf6Eef+A1dwXj7Y7K9TOagGT2+xOAcfhT/s8nI2IIJ6qdfQl+pbY3FYTHKVK/vdi7BtUOiF0knQ7efQ=="}],"memo":""},"blockNum":"1452796"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/games/diceroller","func":"NewGame","args":["g1naa3adpxkjcup8c9y9a5teg6nt6rytygeydm7a"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"UgX9GBmbsFrqkbKYsllysNf8S0yCp/H+pj8lWRFhPGoQ8jXeS5pSiRCrZ8UOrOoMNlSuXwxlbGi8iiWvuQpgXQ=="}],"memo":""},"blockNum":"1454888"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/games/diceroller","func":"Play","args":["5"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"h6WqESKJ/05xCQjC/6Kx6Lr7YLDLHk9l2c2YitBpnK15TUVpUg+WASoTAetFJSDfVAmPvH3GRymNm/qQkxOkZw=="}],"memo":""},"blockNum":"1454895"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16xjzc2v2w9jjaxx0rq9drk46uf8668lcj6h9js","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g16xjzc2v2w9jjaxx0rq9drk46uf8668lcj6h9js","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g16xjzc2v2w9jjaxx0rq9drk46uf8668lcj6h9js","send":"","pkg_path":"gno.land/r/onbloc/usdc","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g16xjzc2v2w9jjaxx0rq9drk46uf8668lcj6h9js","send":"320000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/onbloc/usdc","320000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/onbloc/baz:3000*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/usdc:3000","100","322724"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkV8iBO1O0beH6awpjq1LfePULXIHW9N7+SyaXXeE9nc"},"signature":"IYXrmZYzxBgiS/SLp0PCbm30YtftEcyejzaUUdxDGhZ/W6aR4b4VIGL2x9sOZ5M0rXHZu+j2mT6wFwNy9NJNYw=="}],"memo":""},"blockNum":"1455021"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16xjzc2v2w9jjaxx0rq9drk46uf8668lcj6h9js","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g16xjzc2v2w9jjaxx0rq9drk46uf8668lcj6h9js","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g16xjzc2v2w9jjaxx0rq9drk46uf8668lcj6h9js","send":"","pkg_path":"gno.land/r/onbloc/baz","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g16xjzc2v2w9jjaxx0rq9drk46uf8668lcj6h9js","send":"300000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/onbloc/baz","300000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/onbloc/baz:3000","100","593191"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkV8iBO1O0beH6awpjq1LfePULXIHW9N7+SyaXXeE9nc"},"signature":"kTyI1WrN8LOQbw7XGaLmfKXLx6ttNq8Vog0X0MGjqvohjE+i/6UfrMO/39jcbQfAt0Cpsmu2bj224tbuHHh0Fw=="}],"memo":""},"blockNum":"1455058"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16xjzc2v2w9jjaxx0rq9drk46uf8668lcj6h9js","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","144"]},{"@type":"/vm.m_call","caller":"g16xjzc2v2w9jjaxx0rq9drk46uf8668lcj6h9js","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["144"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkV8iBO1O0beH6awpjq1LfePULXIHW9N7+SyaXXeE9nc"},"signature":"D4Xn5kQ0Wfk8kdkZXTG5Jh1Z0UTysDmur2gxi6reghltVvuyNC6lAJd1MkRd/7PkTnY/8okhBEy5wpp/tgW7ag=="}],"memo":""},"blockNum":"1455068"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g14750vam747grn0lw24nslvx0tygruvma8e4f7n","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"JqJmKau16DWLxzKXcjBlz1qveq7AHJSHY5asLU91xTFiL6UHxm8+2QmkY7Qr92sbyn5NTkoJT+Xn0Cw/62HekA=="}],"memo":""},"blockNum":"1455279"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","to_address":"g1pf4egmg5zshcmsysd84htvjxsn6t75pdd20r67","amount":"10000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"BX0PWlg/9vRHnniH2wx9clBfP1QZTN74e0tDU1QEWaYu/gHF/4mOT2bSpBLGdOhtxVyzxScMRkP0aV551qn5ig=="}],"memo":""},"blockNum":"1455432"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/games/diceroller","func":"NewGame","args":["g1pf4egmg5zshcmsysd84htvjxsn6t75pdd20r67"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"CkyU7J+ZrqhpUvH9/5zpv4T5v/mwtS+VXVn+vlGU4d06exq5B5owGNjGVYJEBq/DyCihRyLMGiLcs7Qusy4aRw=="}],"memo":""},"blockNum":"1455471"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/games/diceroller","func":"Play","args":["6"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"/Z0sqQ0T8XkDJzCupJEuplDvVSIiiudmABy671y0LBh8/q278p++EnRY+A6BcdFDPtsfiAODeAMlFDayTuTG5A=="}],"memo":""},"blockNum":"1455480"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1pf4egmg5zshcmsysd84htvjxsn6t75pdd20r67","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/games/diceroller","func":"Play","args":["6"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj1KBG+vwcSyYwukTMGJ9A9ZjwCBthDNYkNiuPXLIy2C"},"signature":"kqKGbRkd54eBQ1FpXwusQXmBd+WDs2q1qQBeFKwH5E1sdvOGb5RsyvodtAofoCeFHH2olMgLVNR9NUfaAd76pQ=="}],"memo":""},"blockNum":"1455485"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","to_address":"g1vy86cm8s906zhcluz2jn2s0ptvfkkae7kedcy6","amount":"10000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"61kltFNqQxHv/OUcIIXhrCPbXNaCtrr98m841yXleSFHOeXPwNSYFxcmq+pTkVuKHPuolj1VB7Ftudsr84sh7w=="}],"memo":""},"blockNum":"1455565"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","to_address":"g10a3cepzzwlf0ax3kut2ktq3za6jln6gpzcdnt7","amount":"10000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"4Q5YIkTu1VsFbOOWJFnVw9qtcDRBRzjnaH53ROvW5FBPSsn+wrc1IsR0aZdsNqSXOiXoovh4/HbQiC1NBDdaHw=="}],"memo":""},"blockNum":"1455579"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1vy86cm8s906zhcluz2jn2s0ptvfkkae7kedcy6","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/games/diceroller","func":"NewGame","args":["g10a3cepzzwlf0ax3kut2ktq3za6jln6gpzcdnt7"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1cjywz87hhCwcGCGDy27icHTLo2HlfAsIOhPyhQ11fa"},"signature":"SS1UsqaN5BkmkO+E82My0ivsNFCF2ZT6O80apWpK6j9k0l3s8wN7YJNneUkgSW/XhZuMqXStIYRry4NVh1Mtrg=="}],"memo":""},"blockNum":"1455591"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1vy86cm8s906zhcluz2jn2s0ptvfkkae7kedcy6","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/games/diceroller","func":"Play","args":["7"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1cjywz87hhCwcGCGDy27icHTLo2HlfAsIOhPyhQ11fa"},"signature":"eJXTcASUoUBnk6qAjkJ7MggjFTa6V7OEXUuplQ4idoE0pRND1SwSUtOsAf6fIg1tbxCAz5G+LQ8lW72mmF3CUQ=="}],"memo":""},"blockNum":"1455598"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g10a3cepzzwlf0ax3kut2ktq3za6jln6gpzcdnt7","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/games/diceroller","func":"Play","args":["7"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ai8g0ROvLRfFKd8Dwl0QsQYEMo+BN/u+OZkWSMJWvYCE"},"signature":"GJ99I2ZX7rSGn9yyjYJn5ZrPY5SeX69R4wBVWqdI0SYaGpSRrO0w81XIQY5bkMpFQbsDWJGDR1Tysi9sm7EDdw=="}],"memo":""},"blockNum":"1455600"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1vy86cm8s906zhcluz2jn2s0ptvfkkae7kedcy6","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/games/diceroller","func":"NewGame","args":["g10a3cepzzwlf0ax3kut2ktq3za6jln6gpzcdnt7"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1cjywz87hhCwcGCGDy27icHTLo2HlfAsIOhPyhQ11fa"},"signature":"TchFWN2/I2suKnVWClr7E9bGEFUFoNxq5C6V9lTHKcEl+puerhiy/ZV3b3O0vWa+YP5aSVXv7THurPgjwaA8tw=="}],"memo":""},"blockNum":"1455775"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g10a3cepzzwlf0ax3kut2ktq3za6jln6gpzcdnt7","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/games/diceroller","func":"Play","args":["8"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ai8g0ROvLRfFKd8Dwl0QsQYEMo+BN/u+OZkWSMJWvYCE"},"signature":"vFIcgs9Z2f7dh7zVdLMQ6vftaq/dioCKfcVDRAPAr3Atglp6TTYSFd5i7wPdwoZforlJVW8Smwun16/HIGoFbg=="}],"memo":""},"blockNum":"1455779"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1vy86cm8s906zhcluz2jn2s0ptvfkkae7kedcy6","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/games/diceroller","func":"Play","args":["8"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1cjywz87hhCwcGCGDy27icHTLo2HlfAsIOhPyhQ11fa"},"signature":"GrXoKSbzeHYX0XMiYqsz+qlj176mrnfNDCy9WBDVesBnitYLGLJ00fVFkqRM7VyQg0FC7T9mqu6/x3i9ngWXBA=="}],"memo":""},"blockNum":"1455783"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14ks20xj4csuyn0jucwdt96rgr6cenht30avkyr","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g14ks20xj4csuyn0jucwdt96rgr6cenht30avkyr","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g14ks20xj4csuyn0jucwdt96rgr6cenht30avkyr","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g14ks20xj4csuyn0jucwdt96rgr6cenht30avkyr","send":"2000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/gnoswap/v2/gns","2000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000","100","2001291"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5AUjFIdvgvvYPCszkBSj4LyyQVI/uczvuxzbg5IRDB3"},"signature":"bpjUvMFa0EHb5aO/ZzLio2R1HQaqFmaBddGalkl4gZZxtq8kNeywHydJJuVynxD7gRz4AtFAeGoXcmSmJadsYg=="}],"memo":""},"blockNum":"1457985"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14ks20xj4csuyn0jucwdt96rgr6cenht30avkyr","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g14ks20xj4csuyn0jucwdt96rgr6cenht30avkyr","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g14ks20xj4csuyn0jucwdt96rgr6cenht30avkyr","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g14ks20xj4csuyn0jucwdt96rgr6cenht30avkyr","send":"5000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/gnoswap/v2/gns","5000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000","100","5003228"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5AUjFIdvgvvYPCszkBSj4LyyQVI/uczvuxzbg5IRDB3"},"signature":"qc80DM87F/ODGbz2BA5xW0oFEfU0B61YgNkEDz71Ms8vJk9/59QpvGXniSpm27WJxr/JTKXx00uynFQWOOO+yA=="}],"memo":""},"blockNum":"1457991"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","package":{"name":"diceroller","path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/games/v3/diceroller","files":[{"name":"diceroller.gno","body":"package diceroller\n\nimport (\n\t\"errors\"\n\t\"math/rand\"\n\t\"sort\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/entropy\"\n\t\"gno.land/p/demo/seqid\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\ntype (\n\t// game represents a Dice Roller game between two players\n\tgame struct {\n\t\tplayer1, player2 std.Address\n\t\troll1, roll2     int\n\t}\n\n\t// player holds the information about each player including their stats\n\tplayer struct {\n\t\taddr                        std.Address\n\t\twins, losses, draws, points int\n\t}\n\n\t// leaderBoard is a slice of players, used to sort players by rank\n\tleaderBoard []player\n)\n\nconst (\n\t// Constants to represent game result outcomes\n\tongoing = iota\n\twin\n\tdraw\n\tlose\n)\n\nvar (\n\tgames  avl.Tree // AVL tree for storing game states\n\tgameId seqid.ID // Sequence ID for games\n\n\tplayers avl.Tree // AVL tree for storing player data\n\n\tseed = uint64(entropy.New().Seed())\n\tr    = rand.New(rand.NewPCG(seed, 0xdeadbeef))\n)\n\n// rollDice generates a random dice roll between 1 and 6\nfunc rollDice() int {\n\treturn r.IntN(6) + 1\n}\n\n// NewGame initializes a new game with the provided opponent's address\nfunc NewGame(addr std.Address) int {\n\tif !addr.IsValid() {\n\t\tpanic(\"invalid opponent's address\")\n\t}\n\n\tgames.Set(gameId.Next().String(), \u0026game{\n\t\tplayer1: std.PrevRealm().Addr(),\n\t\tplayer2: addr,\n\t})\n\n\treturn int(gameId)\n}\n\n// Play allows a player to roll the dice and updates the game state accordingly\nfunc Play(idx int) int {\n\tg, err := getGame(idx)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\troll := rollDice() // Random the player's dice roll\n\n\t// Play the game and update the player's roll\n\tif err := g.play(std.PrevRealm().Addr(), roll); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// If both players have rolled, update the results and leaderboard\n\tif g.isFinished() {\n\t\t// If the player is playing against themselves, no points are awarded\n\t\tif g.player1 == g.player2 {\n\t\t\treturn roll\n\t\t}\n\n\t\tplayer1 := getPlayer(g.player1)\n\t\tplayer2 := getPlayer(g.player2)\n\n\t\tif g.roll1 \u003e g.roll2 {\n\t\t\tplayer1.updateStats(win)\n\t\t\tplayer2.updateStats(lose)\n\t\t} else if g.roll2 \u003e g.roll1 {\n\t\t\tplayer2.updateStats(win)\n\t\t\tplayer1.updateStats(lose)\n\t\t} else {\n\t\t\tplayer1.updateStats(draw)\n\t\t\tplayer2.updateStats(draw)\n\t\t}\n\t}\n\n\treturn roll\n}\n\n// play processes a player's roll and updates their score\nfunc (g *game) play(player std.Address, roll int) error {\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\n\tif g.isFinished() {\n\t\treturn errors.New(\"game over\")\n\t}\n\n\tif player == g.player1 \u0026\u0026 g.roll1 == 0 {\n\t\tg.roll1 = roll\n\t\treturn nil\n\t}\n\n\tif player == g.player2 \u0026\u0026 g.roll2 == 0 {\n\t\tg.roll2 = roll\n\t\treturn nil\n\t}\n\n\treturn errors.New(\"already played\")\n}\n\n// isFinished checks if the game has ended\nfunc (g *game) isFinished() bool {\n\treturn g.roll1 != 0 \u0026\u0026 g.roll2 != 0\n}\n\n// checkResult returns the game status as a formatted string\nfunc (g *game) status() string {\n\tif !g.isFinished() {\n\t\treturn resultIcon(ongoing) + \" Game still in progress\"\n\t}\n\n\tif g.roll1 \u003e g.roll2 {\n\t\treturn resultIcon(win) + \" Player1 Wins !\"\n\t} else if g.roll1 \u003c g.roll2 {\n\t\treturn resultIcon(lose) + \"Player2 Wins !\"\n\t} else {\n\t\treturn resultIcon(draw) + \" It's a Draw !\"\n\t}\n}\n\n// Render provides a summary of the current state of games and leader board\nfunc Render(path string) string {\n\tvar sb strings.Builder\n\n\tsb.WriteString(`# 🎲 **Dice Roller Game**\n\nWelcome to Dice Roller! Challenge your friends to a simple yet exciting dice rolling game. Roll the dice and see who gets the highest score !\n\n---\n\n## **How to Play**:\n1. **Create a game**: Challenge an opponent using [NewGame](diceroller?help\u0026__func=NewGame)\n2. **Roll the dice**: Play your turn by rolling a dice using [Play](diceroller?help\u0026__func=Play)\n\n---\n\n## **Scoring Rules**:\n- **Win** 🏆: +3 points\n- **Draw** 🤝: +1 point each\n- **Loss**: No points\n- **Playing against yourself**: No points or stats changes for you\n\n---\n\n## **Recent Games**:\nBelow are the results from the most recent games. Up to 10 recent games are displayed. Games where both players are the same (playing against oneself) are not counted in the leaderboard.\n\n| Game | Player 1 | 🎲 Roll 1 | Player 2 | 🎲 Roll 2 | 🏆 Winner |\n|------|----------|-----------|----------|-----------|-----------|\n`)\n\n\tmaxGames := 10\n\tfor n := int(gameId); n \u003e 0 \u0026\u0026 int(gameId)-n \u003c maxGames; n-- {\n\t\tg, err := getGame(n)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(strconv.Itoa(n) + \" | \" +\n\t\t\t\"\u003cspan title=\\\"\" + string(g.player1) + \"\\\"\u003e\" + shortName(g.player1) + \"\u003c/span\u003e\" + \" | \" + diceIcon(g.roll1) + \" | \" +\n\t\t\t\"\u003cspan title=\\\"\" + string(g.player2) + \"\\\"\u003e\" + shortName(g.player2) + \"\u003c/span\u003e\" + \" | \" + diceIcon(g.roll2) + \" | \" +\n\t\t\tg.status() + \"\\n\")\n\t}\n\n\tsb.WriteString(`\n---\n\n## **Leaderboard**:\nThe top players are ranked by performance. Games played against oneself are not counted in the leaderboard\n\n| Rank | Player                | Wins | Losses | Draws | Points |\n|------|-----------------------|------|--------|-------|--------|\n`)\n\n\tfor i, player := range getLeaderBoard() {\n\t\tsb.WriteString(ufmt.Sprintf(\"| %s   | \u003cspan title=\\\"\"+string(player.addr)+\"\\\"\u003e**%s**\u003c/span\u003e | %d | %d | %d | %d |\\n\",\n\t\t\trankIcon(i+1),\n\t\t\tshortName(player.addr),\n\t\t\tplayer.wins,\n\t\t\tplayer.losses,\n\t\t\tplayer.draws,\n\t\t\tplayer.points,\n\t\t))\n\t}\n\n\tsb.WriteString(\"\\n---\\n**Good luck and have fun !** 🎉\")\n\treturn sb.String()\n}\n\n// shortName returns a shortened name for the given address\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n\n// getGame retrieves the game state by its ID\nfunc getGame(idx int) (*game, error) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\treturn nil, errors.New(\"game not found\")\n\t}\n\treturn v.(*game), nil\n}\n\n// updateResult updates the player's stats and points based on the game outcome\nfunc (p *player) updateStats(result int) {\n\tswitch result {\n\tcase win:\n\t\tp.wins++\n\t\tp.points += 3\n\tcase lose:\n\t\tp.losses++\n\tcase draw:\n\t\tp.draws++\n\t\tp.points++\n\t}\n}\n\n// getPlayer retrieves a player or initializes a new one if they don't exist\nfunc getPlayer(addr std.Address) *player {\n\tv, ok := players.Get(addr.String())\n\tif !ok {\n\t\tplayer := \u0026player{\n\t\t\taddr: addr,\n\t\t}\n\t\tplayers.Set(addr.String(), player)\n\t\treturn player\n\t}\n\n\treturn v.(*player)\n}\n\n// getLeaderBoard generates a leaderboard sorted by points\nfunc getLeaderBoard() leaderBoard {\n\tboard := leaderBoard{}\n\tplayers.Iterate(\"\", \"\", func(key string, value interface{}) bool {\n\t\tplayer := value.(*player)\n\t\tboard = append(board, *player)\n\t\treturn false\n\t})\n\n\tsort.Sort(board)\n\n\treturn board\n}\n\n// Methods for sorting the leaderboard\nfunc (r leaderBoard) Len() int {\n\treturn len(r)\n}\n\nfunc (r leaderBoard) Less(i, j int) bool {\n\treturn r[i].points \u003e r[j].points\n}\n\nfunc (r leaderBoard) Swap(i, j int) {\n\tr[i].points, r[j].points = r[j].points, r[i].points\n}\n"},{"name":"icon.gno","body":"package diceroller\n\nimport (\n\t\"strconv\"\n)\n\n// diceIcon returns an icon of the dice roll\nfunc diceIcon(roll int) string {\n\tswitch roll {\n\tcase 1:\n\t\treturn \"🎲1\"\n\tcase 2:\n\t\treturn \"🎲2\"\n\tcase 3:\n\t\treturn \"🎲3\"\n\tcase 4:\n\t\treturn \"🎲4\"\n\tcase 5:\n\t\treturn \"🎲5\"\n\tcase 6:\n\t\treturn \"🎲6\"\n\tdefault:\n\t\treturn strconv.Itoa(roll)\n\t}\n}\n\n// resultIcon returns the icon representing the result of a game\nfunc resultIcon(result int) string {\n\tswitch result {\n\tcase win:\n\t\treturn \"🏆\"\n\tcase lose:\n\t\treturn \"❌\"\n\tcase draw:\n\t\treturn \"🤝\"\n\tdefault:\n\t\treturn \"🔄\"\n\t}\n}\n\n// rankIcon returns the icon for a player's rank\nfunc rankIcon(rank int) string {\n\tswitch rank {\n\tcase 1:\n\t\treturn \"🥇\"\n\tcase 2:\n\t\treturn \"🥈\"\n\tcase 3:\n\t\treturn \"🥉\"\n\tdefault:\n\t\treturn strconv.Itoa(rank)\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"vBKCFVqNpjD+Kz9CGoOLqdWkwCQswVo6WUvHgq95dzdFVJYmqHNG3hFqNITLWWdgji+lU/A4fOqEP+WC8qnKHw=="}],"memo":""},"blockNum":"1459189"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","package":{"name":"diceroller","path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/games/v3/diceroller","files":[{"name":"diceroller.gno","body":"package diceroller\n\nimport (\n\t\"errors\"\n\t\"math/rand\"\n\t\"sort\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/p/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/entropy\"\n\t\"gno.land/r/demo/users\"\n)\n\ntype (\n\t// game represents a Dice Roller game between two players\n\tgame struct {\n\t\tplayer1, player2 std.Address\n\t\troll1, roll2     int\n\t}\n\n\t// player holds the information about each player including their stats\n\tplayer struct {\n\t\taddr                        std.Address\n\t\twins, losses, draws, points int\n\t}\n\n\t// leaderBoard is a slice of players, used to sort players by rank\n\tleaderBoard []player\n)\n\nconst (\n\t// Constants to represent game result outcomes\n\tongoing = iota\n\twin\n\tdraw\n\tlose\n)\n\nvar (\n\tgames  avl.Tree // AVL tree for storing game states\n\tgameId seqid.ID // Sequence ID for games\n\n\tplayers avl.Tree // AVL tree for storing player data\n\n\tseed = uint64(entropy.New().Seed())\n\tr    = rand.New(rand.NewPCG(seed, 0xdeadbeef))\n)\n\n// rollDice generates a random dice roll between 1 and 6\nfunc rollDice() int {\n\treturn r.IntN(6) + 1\n}\n\n// NewGame initializes a new game with the provided opponent's address\nfunc NewGame(addr std.Address) int {\n\tif !addr.IsValid() {\n\t\tpanic(\"invalid opponent's address\")\n\t}\n\n\tgames.Set(gameId.Next().String(), \u0026game{\n\t\tplayer1: std.PrevRealm().Addr(),\n\t\tplayer2: addr,\n\t})\n\n\treturn int(gameId)\n}\n\n// Play allows a player to roll the dice and updates the game state accordingly\nfunc Play(idx int) int {\n\tg, err := getGame(idx)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\troll := rollDice() // Random the player's dice roll\n\n\t// Play the game and update the player's roll\n\tif err := g.play(std.PrevRealm().Addr(), roll); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// If both players have rolled, update the results and leaderboard\n\tif g.isFinished() {\n\t\t// If the player is playing against themselves, no points are awarded\n\t\tif g.player1 == g.player2 {\n\t\t\treturn roll\n\t\t}\n\n\t\tplayer1 := getPlayer(g.player1)\n\t\tplayer2 := getPlayer(g.player2)\n\n\t\tif g.roll1 \u003e g.roll2 {\n\t\t\tplayer1.updateStats(win)\n\t\t\tplayer2.updateStats(lose)\n\t\t} else if g.roll2 \u003e g.roll1 {\n\t\t\tplayer2.updateStats(win)\n\t\t\tplayer1.updateStats(lose)\n\t\t} else {\n\t\t\tplayer1.updateStats(draw)\n\t\t\tplayer2.updateStats(draw)\n\t\t}\n\t}\n\n\treturn roll\n}\n\n// play processes a player's roll and updates their score\nfunc (g *game) play(player std.Address, roll int) error {\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\n\tif g.isFinished() {\n\t\treturn errors.New(\"game over\")\n\t}\n\n\tif player == g.player1 \u0026\u0026 g.roll1 == 0 {\n\t\tg.roll1 = roll\n\t\treturn nil\n\t}\n\n\tif player == g.player2 \u0026\u0026 g.roll2 == 0 {\n\t\tg.roll2 = roll\n\t\treturn nil\n\t}\n\n\treturn errors.New(\"already played\")\n}\n\n// isFinished checks if the game has ended\nfunc (g *game) isFinished() bool {\n\treturn g.roll1 != 0 \u0026\u0026 g.roll2 != 0\n}\n\n// checkResult returns the game status as a formatted string\nfunc (g *game) status() string {\n\tif !g.isFinished() {\n\t\treturn resultIcon(ongoing) + \" Game still in progress\"\n\t}\n\n\tif g.roll1 \u003e g.roll2 {\n\t\treturn resultIcon(win) + \" Player1 Wins !\"\n\t} else if g.roll1 \u003c g.roll2 {\n\t\treturn resultIcon(lose) + \"Player2 Wins !\"\n\t} else {\n\t\treturn resultIcon(draw) + \" It's a Draw !\"\n\t}\n}\n\n// Render provides a summary of the current state of games and leader board\nfunc Render(path string) string {\n\tvar sb strings.Builder\n\n\tsb.WriteString(`# 🎲 **Dice Roller Game**\n\nWelcome to Dice Roller! Challenge your friends to a simple yet exciting dice rolling game. Roll the dice and see who gets the highest score !\n\n---\n\n## **How to Play**:\n1. **Create a game**: Challenge an opponent using [NewGame](diceroller?help\u0026__func=NewGame)\n2. **Roll the dice**: Play your turn by rolling a dice using [Play](diceroller?help\u0026__func=Play)\n\n---\n\n## **Scoring Rules**:\n- **Win** 🏆: +3 points\n- **Draw** 🤝: +1 point each\n- **Loss**: No points\n- **Playing against yourself**: No points or stats changes for you\n\n---\n\n## **Recent Games**:\nBelow are the results from the most recent games. Up to 10 recent games are displayed. Games where both players are the same (playing against oneself) are not counted in the leaderboard.\n\n| Game | Player 1 | 🎲 Roll 1 | Player 2 | 🎲 Roll 2 | 🏆 Winner |\n|------|----------|-----------|----------|-----------|-----------|\n`)\n\n\tmaxGames := 10\n\tfor n := int(gameId); n \u003e 0 \u0026\u0026 int(gameId)-n \u003c maxGames; n-- {\n\t\tg, err := getGame(n)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(strconv.Itoa(n) + \" | \" +\n\t\t\t\"\u003cspan title=\\\"\" + string(g.player1) + \"\\\"\u003e\" + shortName(g.player1) + \"\u003c/span\u003e\" + \" | \" + diceIcon(g.roll1) + \" | \" +\n\t\t\t\"\u003cspan title=\\\"\" + string(g.player2) + \"\\\"\u003e\" + shortName(g.player2) + \"\u003c/span\u003e\" + \" | \" + diceIcon(g.roll2) + \" | \" +\n\t\t\tg.status() + \"\\n\")\n\t}\n\n\tsb.WriteString(`\n---\n\n## **Leaderboard**:\nThe top players are ranked by performance. Games played against oneself are not counted in the leaderboard\n\n| Rank | Player                | Wins | Losses | Draws | Points |\n|------|-----------------------|------|--------|-------|--------|\n`)\n\n\tfor i, player := range getLeaderBoard() {\n\t\tsb.WriteString(ufmt.Sprintf(\"| %s   | \u003cspan title=\\\"\"+string(player.addr)+\"\\\"\u003e**%s**\u003c/span\u003e | %d | %d | %d | %d |\\n\",\n\t\t\trankIcon(i+1),\n\t\t\tshortName(player.addr),\n\t\t\tplayer.wins,\n\t\t\tplayer.losses,\n\t\t\tplayer.draws,\n\t\t\tplayer.points,\n\t\t))\n\t}\n\n\tsb.WriteString(\"\\n---\\n**Good luck and have fun !** 🎉\")\n\treturn sb.String()\n}\n\n// shortName returns a shortened name for the given address\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n\n// getGame retrieves the game state by its ID\nfunc getGame(idx int) (*game, error) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\treturn nil, errors.New(\"game not found\")\n\t}\n\treturn v.(*game), nil\n}\n\n// updateResult updates the player's stats and points based on the game outcome\nfunc (p *player) updateStats(result int) {\n\tswitch result {\n\tcase win:\n\t\tp.wins++\n\t\tp.points += 3\n\tcase lose:\n\t\tp.losses++\n\tcase draw:\n\t\tp.draws++\n\t\tp.points++\n\t}\n}\n\n// getPlayer retrieves a player or initializes a new one if they don't exist\nfunc getPlayer(addr std.Address) *player {\n\tv, ok := players.Get(addr.String())\n\tif !ok {\n\t\tplayer := \u0026player{\n\t\t\taddr: addr,\n\t\t}\n\t\tplayers.Set(addr.String(), player)\n\t\treturn player\n\t}\n\n\treturn v.(*player)\n}\n\n// getLeaderBoard generates a leaderboard sorted by points\nfunc getLeaderBoard() leaderBoard {\n\tboard := leaderBoard{}\n\tplayers.Iterate(\"\", \"\", func(key string, value interface{}) bool {\n\t\tplayer := value.(*player)\n\t\tboard = append(board, *player)\n\t\treturn false\n\t})\n\n\tsort.Sort(board)\n\n\treturn board\n}\n\n// Methods for sorting the leaderboard\nfunc (r leaderBoard) Len() int {\n\treturn len(r)\n}\n\nfunc (r leaderBoard) Less(i, j int) bool {\n\treturn r[i].points \u003e r[j].points\n}\n\nfunc (r leaderBoard) Swap(i, j int) {\n\tr[i].points, r[j].points = r[j].points, r[i].points\n}\n"},{"name":"icon.gno","body":"package diceroller\n\nimport (\n\t\"strconv\"\n)\n\n// diceIcon returns an icon of the dice roll\nfunc diceIcon(roll int) string {\n\tswitch roll {\n\tcase 1:\n\t\treturn \"🎲1\"\n\tcase 2:\n\t\treturn \"🎲2\"\n\tcase 3:\n\t\treturn \"🎲3\"\n\tcase 4:\n\t\treturn \"🎲4\"\n\tcase 5:\n\t\treturn \"🎲5\"\n\tcase 6:\n\t\treturn \"🎲6\"\n\tdefault:\n\t\treturn strconv.Itoa(roll)\n\t}\n}\n\n// resultIcon returns the icon representing the result of a game\nfunc resultIcon(result int) string {\n\tswitch result {\n\tcase win:\n\t\treturn \"🏆\"\n\tcase lose:\n\t\treturn \"❌\"\n\tcase draw:\n\t\treturn \"🤝\"\n\tdefault:\n\t\treturn \"🔄\"\n\t}\n}\n\n// rankIcon returns the icon for a player's rank\nfunc rankIcon(rank int) string {\n\tswitch rank {\n\tcase 1:\n\t\treturn \"🥇\"\n\tcase 2:\n\t\treturn \"🥈\"\n\tcase 3:\n\t\treturn \"🥉\"\n\tdefault:\n\t\treturn strconv.Itoa(rank)\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"4LzH7MM7h8CUV8Bnb3wzNd7wCylXz1ZAsYxOMTKGMIhKRDGPElZYdpJ03b2ynHIIwlxdom0TnPzvWxkLMeJizQ=="}],"memo":""},"blockNum":"1459201"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","package":{"name":"diceroller","path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/games/diceroller/v1","files":[{"name":"diceroller.gno","body":"package diceroller\n\nimport (\n\t\"errors\"\n\t\"math/rand\"\n\t\"sort\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/p/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/entropy\"\n\t\"gno.land/r/demo/users\"\n)\n\ntype (\n\t// game represents a Dice Roller game between two players\n\tgame struct {\n\t\tplayer1, player2 std.Address\n\t\troll1, roll2     int\n\t}\n\n\t// player holds the information about each player including their stats\n\tplayer struct {\n\t\taddr                        std.Address\n\t\twins, losses, draws, points int\n\t}\n\n\t// leaderBoard is a slice of players, used to sort players by rank\n\tleaderBoard []player\n)\n\nconst (\n\t// Constants to represent game result outcomes\n\tongoing = iota\n\twin\n\tdraw\n\tlose\n)\n\nvar (\n\tgames  avl.Tree // AVL tree for storing game states\n\tgameId seqid.ID // Sequence ID for games\n\n\tplayers avl.Tree // AVL tree for storing player data\n\n\tseed = uint64(entropy.New().Seed())\n\tr    = rand.New(rand.NewPCG(seed, 0xdeadbeef))\n)\n\n// rollDice generates a random dice roll between 1 and 6\nfunc rollDice() int {\n\treturn r.IntN(6) + 1\n}\n\n// NewGame initializes a new game with the provided opponent's address\nfunc NewGame(addr std.Address) int {\n\tif !addr.IsValid() {\n\t\tpanic(\"invalid opponent's address\")\n\t}\n\n\tgames.Set(gameId.Next().String(), \u0026game{\n\t\tplayer1: std.PrevRealm().Addr(),\n\t\tplayer2: addr,\n\t})\n\n\treturn int(gameId)\n}\n\n// Play allows a player to roll the dice and updates the game state accordingly\nfunc Play(idx int) int {\n\tg, err := getGame(idx)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\troll := rollDice() // Random the player's dice roll\n\n\t// Play the game and update the player's roll\n\tif err := g.play(std.PrevRealm().Addr(), roll); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// If both players have rolled, update the results and leaderboard\n\tif g.isFinished() {\n\t\t// If the player is playing against themselves, no points are awarded\n\t\tif g.player1 == g.player2 {\n\t\t\treturn roll\n\t\t}\n\n\t\tplayer1 := getPlayer(g.player1)\n\t\tplayer2 := getPlayer(g.player2)\n\n\t\tif g.roll1 \u003e g.roll2 {\n\t\t\tplayer1.updateStats(win)\n\t\t\tplayer2.updateStats(lose)\n\t\t} else if g.roll2 \u003e g.roll1 {\n\t\t\tplayer2.updateStats(win)\n\t\t\tplayer1.updateStats(lose)\n\t\t} else {\n\t\t\tplayer1.updateStats(draw)\n\t\t\tplayer2.updateStats(draw)\n\t\t}\n\t}\n\n\treturn roll\n}\n\n// play processes a player's roll and updates their score\nfunc (g *game) play(player std.Address, roll int) error {\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\n\tif g.isFinished() {\n\t\treturn errors.New(\"game over\")\n\t}\n\n\tif player == g.player1 \u0026\u0026 g.roll1 == 0 {\n\t\tg.roll1 = roll\n\t\treturn nil\n\t}\n\n\tif player == g.player2 \u0026\u0026 g.roll2 == 0 {\n\t\tg.roll2 = roll\n\t\treturn nil\n\t}\n\n\treturn errors.New(\"already played\")\n}\n\n// isFinished checks if the game has ended\nfunc (g *game) isFinished() bool {\n\treturn g.roll1 != 0 \u0026\u0026 g.roll2 != 0\n}\n\n// checkResult returns the game status as a formatted string\nfunc (g *game) status() string {\n\tif !g.isFinished() {\n\t\treturn resultIcon(ongoing) + \" Game still in progress\"\n\t}\n\n\tif g.roll1 \u003e g.roll2 {\n\t\treturn resultIcon(win) + \" Player1 Wins !\"\n\t} else if g.roll1 \u003c g.roll2 {\n\t\treturn resultIcon(lose) + \"Player2 Wins !\"\n\t} else {\n\t\treturn resultIcon(draw) + \" It's a Draw !\"\n\t}\n}\n\n// Render provides a summary of the current state of games and leader board\nfunc Render(path string) string {\n\tvar sb strings.Builder\n\n\tsb.WriteString(`# 🎲 **Dice Roller Game**\n\nWelcome to Dice Roller! Challenge your friends to a simple yet exciting dice rolling game. Roll the dice and see who gets the highest score !\n\n---\n\n## **How to Play**:\n1. **Create a game**: Challenge an opponent using [NewGame](diceroller?help\u0026__func=NewGame)\n2. **Roll the dice**: Play your turn by rolling a dice using [Play](diceroller?help\u0026__func=Play)\n\n---\n\n## **Scoring Rules**:\n- **Win** 🏆: +3 points\n- **Draw** 🤝: +1 point each\n- **Loss**: No points\n- **Playing against yourself**: No points or stats changes for you\n\n---\n\n## **Recent Games**:\nBelow are the results from the most recent games. Up to 10 recent games are displayed\n\n| Game | Player 1 | 🎲 Roll 1 | Player 2 | 🎲 Roll 2 | 🏆 Winner |\n|------|----------|-----------|----------|-----------|-----------|\n`)\n\n\tmaxGames := 10\n\tfor n := int(gameId); n \u003e 0 \u0026\u0026 int(gameId)-n \u003c maxGames; n-- {\n\t\tg, err := getGame(n)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(strconv.Itoa(n) + \" | \" +\n\t\t\t\"\u003cspan title=\\\"\" + string(g.player1) + \"\\\"\u003e\" + shortName(g.player1) + \"\u003c/span\u003e\" + \" | \" + diceIcon(g.roll1) + \" | \" +\n\t\t\t\"\u003cspan title=\\\"\" + string(g.player2) + \"\\\"\u003e\" + shortName(g.player2) + \"\u003c/span\u003e\" + \" | \" + diceIcon(g.roll2) + \" | \" +\n\t\t\tg.status() + \"\\n\")\n\t}\n\n\tsb.WriteString(`\n---\n\n## **Leaderboard**:\nThe top players are ranked by performance. Games played against oneself are not counted in the leaderboard\n\n| Rank | Player                | Wins | Losses | Draws | Points |\n|------|-----------------------|------|--------|-------|--------|\n`)\n\n\tfor i, player := range getLeaderBoard() {\n\t\tsb.WriteString(ufmt.Sprintf(\"| %s   | \u003cspan title=\\\"\"+string(player.addr)+\"\\\"\u003e**%s**\u003c/span\u003e | %d | %d | %d | %d |\\n\",\n\t\t\trankIcon(i+1),\n\t\t\tshortName(player.addr),\n\t\t\tplayer.wins,\n\t\t\tplayer.losses,\n\t\t\tplayer.draws,\n\t\t\tplayer.points,\n\t\t))\n\t}\n\n\tsb.WriteString(\"\\n---\\n**Good luck and have fun !** 🎉\")\n\treturn sb.String()\n}\n\n// shortName returns a shortened name for the given address\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n\n// getGame retrieves the game state by its ID\nfunc getGame(idx int) (*game, error) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\treturn nil, errors.New(\"game not found\")\n\t}\n\treturn v.(*game), nil\n}\n\n// updateResult updates the player's stats and points based on the game outcome\nfunc (p *player) updateStats(result int) {\n\tswitch result {\n\tcase win:\n\t\tp.wins++\n\t\tp.points += 3\n\tcase lose:\n\t\tp.losses++\n\tcase draw:\n\t\tp.draws++\n\t\tp.points++\n\t}\n}\n\n// getPlayer retrieves a player or initializes a new one if they don't exist\nfunc getPlayer(addr std.Address) *player {\n\tv, ok := players.Get(addr.String())\n\tif !ok {\n\t\tplayer := \u0026player{\n\t\t\taddr: addr,\n\t\t}\n\t\tplayers.Set(addr.String(), player)\n\t\treturn player\n\t}\n\n\treturn v.(*player)\n}\n\n// getLeaderBoard generates a leaderboard sorted by points\nfunc getLeaderBoard() leaderBoard {\n\tboard := leaderBoard{}\n\tplayers.Iterate(\"\", \"\", func(key string, value interface{}) bool {\n\t\tplayer := value.(*player)\n\t\tboard = append(board, *player)\n\t\treturn false\n\t})\n\n\tsort.Sort(board)\n\n\treturn board\n}\n\n// Methods for sorting the leaderboard\nfunc (r leaderBoard) Len() int {\n\treturn len(r)\n}\n\nfunc (r leaderBoard) Less(i, j int) bool {\n\treturn r[i].points \u003e r[j].points\n}\n\nfunc (r leaderBoard) Swap(i, j int) {\n\tr[i].points, r[j].points = r[j].points, r[i].points\n}\n"},{"name":"icon.gno","body":"package diceroller\n\nimport (\n\t\"strconv\"\n)\n\n// diceIcon returns an icon of the dice roll\nfunc diceIcon(roll int) string {\n\tswitch roll {\n\tcase 1:\n\t\treturn \"🎲1\"\n\tcase 2:\n\t\treturn \"🎲2\"\n\tcase 3:\n\t\treturn \"🎲3\"\n\tcase 4:\n\t\treturn \"🎲4\"\n\tcase 5:\n\t\treturn \"🎲5\"\n\tcase 6:\n\t\treturn \"🎲6\"\n\tdefault:\n\t\treturn strconv.Itoa(roll)\n\t}\n}\n\n// resultIcon returns the icon representing the result of a game\nfunc resultIcon(result int) string {\n\tswitch result {\n\tcase win:\n\t\treturn \"🏆\"\n\tcase lose:\n\t\treturn \"❌\"\n\tcase draw:\n\t\treturn \"🤝\"\n\tdefault:\n\t\treturn \"🔄\"\n\t}\n}\n\n// rankIcon returns the icon for a player's rank\nfunc rankIcon(rank int) string {\n\tswitch rank {\n\tcase 1:\n\t\treturn \"🥇\"\n\tcase 2:\n\t\treturn \"🥈\"\n\tcase 3:\n\t\treturn \"🥉\"\n\tdefault:\n\t\treturn strconv.Itoa(rank)\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"8vZ8fLHQmJfeyaO9RhswJ0f4Tulwed1nG7cljYP3G/EwN1DfozViEcddrsqSUA1nFaxvU3XWYPxiJ6dG/oQ3Fg=="}],"memo":""},"blockNum":"1459275"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","package":{"name":"diceroller","path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/diceroller","files":[{"name":"diceroller.gno","body":"package diceroller\n\nimport (\n\t\"errors\"\n\t\"math/rand\"\n\t\"sort\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/p/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/entropy\"\n\t\"gno.land/r/demo/users\"\n)\n\ntype (\n\t// game represents a Dice Roller game between two players\n\tgame struct {\n\t\tplayer1, player2 std.Address\n\t\troll1, roll2     int\n\t}\n\n\t// player holds the information about each player including their stats\n\tplayer struct {\n\t\taddr                        std.Address\n\t\twins, losses, draws, points int\n\t}\n\n\t// leaderBoard is a slice of players, used to sort players by rank\n\tleaderBoard []player\n)\n\nconst (\n\t// Constants to represent game result outcomes\n\tongoing = iota\n\twin\n\tdraw\n\tlose\n)\n\nvar (\n\tgames  avl.Tree // AVL tree for storing game states\n\tgameId seqid.ID // Sequence ID for games\n\n\tplayers avl.Tree // AVL tree for storing player data\n\n\tseed = uint64(entropy.New().Seed())\n\tr    = rand.New(rand.NewPCG(seed, 0xdeadbeef))\n)\n\n// rollDice generates a random dice roll between 1 and 6\nfunc rollDice() int {\n\treturn r.IntN(6) + 1\n}\n\n// NewGame initializes a new game with the provided opponent's address\nfunc NewGame(addr std.Address) int {\n\tif !addr.IsValid() {\n\t\tpanic(\"invalid opponent's address\")\n\t}\n\n\tgames.Set(gameId.Next().String(), \u0026game{\n\t\tplayer1: std.PrevRealm().Addr(),\n\t\tplayer2: addr,\n\t})\n\n\treturn int(gameId)\n}\n\n// Play allows a player to roll the dice and updates the game state accordingly\nfunc Play(idx int) int {\n\tg, err := getGame(idx)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\troll := rollDice() // Random the player's dice roll\n\n\t// Play the game and update the player's roll\n\tif err := g.play(std.PrevRealm().Addr(), roll); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// If both players have rolled, update the results and leaderboard\n\tif g.isFinished() {\n\t\t// If the player is playing against themselves, no points are awarded\n\t\tif g.player1 == g.player2 {\n\t\t\treturn roll\n\t\t}\n\n\t\tplayer1 := getPlayer(g.player1)\n\t\tplayer2 := getPlayer(g.player2)\n\n\t\tif g.roll1 \u003e g.roll2 {\n\t\t\tplayer1.updateStats(win)\n\t\t\tplayer2.updateStats(lose)\n\t\t} else if g.roll2 \u003e g.roll1 {\n\t\t\tplayer2.updateStats(win)\n\t\t\tplayer1.updateStats(lose)\n\t\t} else {\n\t\t\tplayer1.updateStats(draw)\n\t\t\tplayer2.updateStats(draw)\n\t\t}\n\t}\n\n\treturn roll\n}\n\n// play processes a player's roll and updates their score\nfunc (g *game) play(player std.Address, roll int) error {\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\n\tif g.isFinished() {\n\t\treturn errors.New(\"game over\")\n\t}\n\n\tif player == g.player1 \u0026\u0026 g.roll1 == 0 {\n\t\tg.roll1 = roll\n\t\treturn nil\n\t}\n\n\tif player == g.player2 \u0026\u0026 g.roll2 == 0 {\n\t\tg.roll2 = roll\n\t\treturn nil\n\t}\n\n\treturn errors.New(\"already played\")\n}\n\n// isFinished checks if the game has ended\nfunc (g *game) isFinished() bool {\n\treturn g.roll1 != 0 \u0026\u0026 g.roll2 != 0\n}\n\n// checkResult returns the game status as a formatted string\nfunc (g *game) status() string {\n\tif !g.isFinished() {\n\t\treturn resultIcon(ongoing) + \" Game still in progress\"\n\t}\n\n\tif g.roll1 \u003e g.roll2 {\n\t\treturn resultIcon(win) + \" Player1 Wins !\"\n\t} else if g.roll1 \u003c g.roll2 {\n\t\treturn resultIcon(lose) + \"Player2 Wins !\"\n\t} else {\n\t\treturn resultIcon(draw) + \" It's a Draw !\"\n\t}\n}\n\n// Render provides a summary of the current state of games and leader board\nfunc Render(path string) string {\n\tvar sb strings.Builder\n\n\tsb.WriteString(`# 🎲 **Dice Roller Game**\n\nWelcome to Dice Roller! Challenge your friends to a simple yet exciting dice rolling game. Roll the dice and see who gets the highest score !\n\n---\n\n## **How to Play**:\n1. **Create a game**: Challenge an opponent using [NewGame](diceroller?help\u0026__func=NewGame)\n2. **Roll the dice**: Play your turn by rolling a dice using [Play](diceroller?help\u0026__func=Play)\n\n---\n\n## **Scoring Rules**:\n- **Win** 🏆: +3 points\n- **Draw** 🤝: +1 point each\n- **Loss**: No points\n- **Playing against yourself**: No points or stats changes for you\n\n---\n\n## **Recent Games**:\nBelow are the results from the most recent games. Up to 10 recent games are displayed\n\n| Game | Player 1 | 🎲 Roll 1 | Player 2 | 🎲 Roll 2 | 🏆 Winner |\n|------|----------|-----------|----------|-----------|-----------|\n`)\n\n\tmaxGames := 10\n\tfor n := int(gameId); n \u003e 0 \u0026\u0026 int(gameId)-n \u003c maxGames; n-- {\n\t\tg, err := getGame(n)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(strconv.Itoa(n) + \" | \" +\n\t\t\t\"\u003cspan title=\\\"\" + string(g.player1) + \"\\\"\u003e\" + shortName(g.player1) + \"\u003c/span\u003e\" + \" | \" + diceIcon(g.roll1) + \" | \" +\n\t\t\t\"\u003cspan title=\\\"\" + string(g.player2) + \"\\\"\u003e\" + shortName(g.player2) + \"\u003c/span\u003e\" + \" | \" + diceIcon(g.roll2) + \" | \" +\n\t\t\tg.status() + \"\\n\")\n\t}\n\n\tsb.WriteString(`\n---\n\n## **Leaderboard**:\nThe top players are ranked by performance. Games played against oneself are not counted in the leaderboard\n\n| Rank | Player                | Wins | Losses | Draws | Points |\n|------|-----------------------|------|--------|-------|--------|\n`)\n\n\tfor i, player := range getLeaderBoard() {\n\t\tsb.WriteString(ufmt.Sprintf(\"| %s   | \u003cspan title=\\\"\"+string(player.addr)+\"\\\"\u003e**%s**\u003c/span\u003e | %d | %d | %d | %d |\\n\",\n\t\t\trankIcon(i+1),\n\t\t\tshortName(player.addr),\n\t\t\tplayer.wins,\n\t\t\tplayer.losses,\n\t\t\tplayer.draws,\n\t\t\tplayer.points,\n\t\t))\n\t}\n\n\tsb.WriteString(\"\\n---\\n**Good luck and have fun !** 🎉\")\n\treturn sb.String()\n}\n\n// shortName returns a shortened name for the given address\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n\n// getGame retrieves the game state by its ID\nfunc getGame(idx int) (*game, error) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\treturn nil, errors.New(\"game not found\")\n\t}\n\treturn v.(*game), nil\n}\n\n// updateResult updates the player's stats and points based on the game outcome\nfunc (p *player) updateStats(result int) {\n\tswitch result {\n\tcase win:\n\t\tp.wins++\n\t\tp.points += 3\n\tcase lose:\n\t\tp.losses++\n\tcase draw:\n\t\tp.draws++\n\t\tp.points++\n\t}\n}\n\n// getPlayer retrieves a player or initializes a new one if they don't exist\nfunc getPlayer(addr std.Address) *player {\n\tv, ok := players.Get(addr.String())\n\tif !ok {\n\t\tplayer := \u0026player{\n\t\t\taddr: addr,\n\t\t}\n\t\tplayers.Set(addr.String(), player)\n\t\treturn player\n\t}\n\n\treturn v.(*player)\n}\n\n// getLeaderBoard generates a leaderboard sorted by points\nfunc getLeaderBoard() leaderBoard {\n\tboard := leaderBoard{}\n\tplayers.Iterate(\"\", \"\", func(key string, value interface{}) bool {\n\t\tplayer := value.(*player)\n\t\tboard = append(board, *player)\n\t\treturn false\n\t})\n\n\tsort.Sort(board)\n\n\treturn board\n}\n\n// Methods for sorting the leaderboard\nfunc (r leaderBoard) Len() int {\n\treturn len(r)\n}\n\nfunc (r leaderBoard) Less(i, j int) bool {\n\treturn r[i].points \u003e r[j].points\n}\n\nfunc (r leaderBoard) Swap(i, j int) {\n\tr[i].points, r[j].points = r[j].points, r[i].points\n}\n"},{"name":"icon.gno","body":"package diceroller\n\nimport (\n\t\"strconv\"\n)\n\n// diceIcon returns an icon of the dice roll\nfunc diceIcon(roll int) string {\n\tswitch roll {\n\tcase 1:\n\t\treturn \"🎲1\"\n\tcase 2:\n\t\treturn \"🎲2\"\n\tcase 3:\n\t\treturn \"🎲3\"\n\tcase 4:\n\t\treturn \"🎲4\"\n\tcase 5:\n\t\treturn \"🎲5\"\n\tcase 6:\n\t\treturn \"🎲6\"\n\tdefault:\n\t\treturn strconv.Itoa(roll)\n\t}\n}\n\n// resultIcon returns the icon representing the result of a game\nfunc resultIcon(result int) string {\n\tswitch result {\n\tcase win:\n\t\treturn \"🏆\"\n\tcase lose:\n\t\treturn \"❌\"\n\tcase draw:\n\t\treturn \"🤝\"\n\tdefault:\n\t\treturn \"🔄\"\n\t}\n}\n\n// rankIcon returns the icon for a player's rank\nfunc rankIcon(rank int) string {\n\tswitch rank {\n\tcase 1:\n\t\treturn \"🥇\"\n\tcase 2:\n\t\treturn \"🥈\"\n\tcase 3:\n\t\treturn \"🥉\"\n\tdefault:\n\t\treturn strconv.Itoa(rank)\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"KRCmSurc3Bcx/YnVllGyr5BqQW1FbhTl88wccTEMZVk3olSPrDXPNktCE+wc1/63UcsgjGYMpz4DZwr4qVHAdQ=="}],"memo":""},"blockNum":"1459343"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/diceroller","func":"NewGame","args":["g1vy86cm8s906zhcluz2jn2s0ptvfkkae7kedcy6"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"z8gYIi8T/DyI1UW2gDhU9yhTaGRn2q/unRq3lQD39QMenMzAeUcn/6++luTJYhwrmqChUdLjVEBMFsals0jkAg=="}],"memo":""},"blockNum":"1459378"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/diceroller","func":"Play","args":["1"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"YmGjR3Luuwr3JttJUKHV6NNUGYt8aIS84iyeYW64Vk4MEsQ2XtV+ckeWMIZXvGtKTJnx9vpJzbcl2yBYJCumAA=="}],"memo":""},"blockNum":"1459385"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1vy86cm8s906zhcluz2jn2s0ptvfkkae7kedcy6","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/diceroller","func":"Play","args":["1"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1cjywz87hhCwcGCGDy27icHTLo2HlfAsIOhPyhQ11fa"},"signature":"SFDwNX2eVGJcyWTZqCGACAUJIDczO5EwEiKgaPrUo7YuGjUK8B1f/B/lzZCdtjDZ7J6xMSAwfX3g9Q2A10DkDA=="}],"memo":""},"blockNum":"1459388"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/diceroller","func":"NewGame","args":["g10a3cepzzwlf0ax3kut2ktq3za6jln6gpzcdnt7"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"h105bfVHotY97AWWRetLN7LZC7n/gQAD7fZ4AKdXYcM/AZLLI78GVeZx/WW2HE89e0qZ6igwzVA5ykPwfjWTsA=="}],"memo":""},"blockNum":"1459410"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/diceroller","func":"Play","args":["2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"DyefZICm6l7dSd890h0FMsj75Nz5JVfWCyZDYcTuGe44QS28Cbzf+CHlYtHugKtL4z4bmzj+D79ucuU7K9MQAQ=="}],"memo":""},"blockNum":"1459416"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g10a3cepzzwlf0ax3kut2ktq3za6jln6gpzcdnt7","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/diceroller","func":"Play","args":["2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ai8g0ROvLRfFKd8Dwl0QsQYEMo+BN/u+OZkWSMJWvYCE"},"signature":"PaXIyFPcAqg+6DIQCk5RJf0NCA8ikcUBYi+zoWxvzdpTETY5yEDSpXyuSCwCF6Go0saVnyxeKQRdYo/fRUMIQw=="}],"memo":""},"blockNum":"1459419"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","package":{"name":"diceroller","path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v1/diceroller","files":[{"name":"diceroller.gno","body":"package diceroller\n\nimport (\n\t\"errors\"\n\t\"math/rand\"\n\t\"sort\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/p/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/entropy\"\n\t\"gno.land/r/demo/users\"\n)\n\ntype (\n\t// game represents a Dice Roller game between two players\n\tgame struct {\n\t\tplayer1, player2 std.Address\n\t\troll1, roll2     int\n\t}\n\n\t// player holds the information about each player including their stats\n\tplayer struct {\n\t\taddr                        std.Address\n\t\twins, losses, draws, points int\n\t}\n\n\t// leaderBoard is a slice of players, used to sort players by rank\n\tleaderBoard []player\n)\n\nconst (\n\t// Constants to represent game result outcomes\n\tongoing = iota\n\twin\n\tdraw\n\tlose\n)\n\nvar (\n\tgames  avl.Tree // AVL tree for storing game states\n\tgameId seqid.ID // Sequence ID for games\n\n\tplayers avl.Tree // AVL tree for storing player data\n\n\tseed = uint64(entropy.New().Seed())\n\tr    = rand.New(rand.NewPCG(seed, 0xdeadbeef))\n)\n\n// rollDice generates a random dice roll between 1 and 6\nfunc rollDice() int {\n\treturn r.IntN(6) + 1\n}\n\n// NewGame initializes a new game with the provided opponent's address\nfunc NewGame(addr std.Address) int {\n\tif !addr.IsValid() {\n\t\tpanic(\"invalid opponent's address\")\n\t}\n\n\tgames.Set(gameId.Next().String(), \u0026game{\n\t\tplayer1: std.PrevRealm().Addr(),\n\t\tplayer2: addr,\n\t})\n\n\treturn int(gameId)\n}\n\n// Play allows a player to roll the dice and updates the game state accordingly\nfunc Play(idx int) int {\n\tg, err := getGame(idx)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\troll := rollDice() // Random the player's dice roll\n\n\t// Play the game and update the player's roll\n\tif err := g.play(std.PrevRealm().Addr(), roll); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// If both players have rolled, update the results and leaderboard\n\tif g.isFinished() {\n\t\t// If the player is playing against themselves, no points are awarded\n\t\tif g.player1 == g.player2 {\n\t\t\treturn roll\n\t\t}\n\n\t\tplayer1 := getPlayer(g.player1)\n\t\tplayer2 := getPlayer(g.player2)\n\n\t\tif g.roll1 \u003e g.roll2 {\n\t\t\tplayer1.updateStats(win)\n\t\t\tplayer2.updateStats(lose)\n\t\t} else if g.roll2 \u003e g.roll1 {\n\t\t\tplayer2.updateStats(win)\n\t\t\tplayer1.updateStats(lose)\n\t\t} else {\n\t\t\tplayer1.updateStats(draw)\n\t\t\tplayer2.updateStats(draw)\n\t\t}\n\t}\n\n\treturn roll\n}\n\n// play processes a player's roll and updates their score\nfunc (g *game) play(player std.Address, roll int) error {\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\n\tif g.isFinished() {\n\t\treturn errors.New(\"game over\")\n\t}\n\n\tif player == g.player1 \u0026\u0026 g.roll1 == 0 {\n\t\tg.roll1 = roll\n\t\treturn nil\n\t}\n\n\tif player == g.player2 \u0026\u0026 g.roll2 == 0 {\n\t\tg.roll2 = roll\n\t\treturn nil\n\t}\n\n\treturn errors.New(\"already played\")\n}\n\n// isFinished checks if the game has ended\nfunc (g *game) isFinished() bool {\n\treturn g.roll1 != 0 \u0026\u0026 g.roll2 != 0\n}\n\n// checkResult returns the game status as a formatted string\nfunc (g *game) status() string {\n\tif !g.isFinished() {\n\t\treturn resultIcon(ongoing) + \" Game still in progress\"\n\t}\n\n\tif g.roll1 \u003e g.roll2 {\n\t\treturn resultIcon(win) + \" Player1 Wins !\"\n\t} else if g.roll2 \u003c g.roll1 {\n\t\treturn resultIcon(win) + \" Player2 Wins !\"\n\t} else {\n\t\treturn resultIcon(draw) + \" It's a Draw !\"\n\t}\n}\n\n// Render provides a summary of the current state of games and leader board\nfunc Render(path string) string {\n\tvar sb strings.Builder\n\n\tsb.WriteString(`# 🎲 **Dice Roller Game**\n\nWelcome to Dice Roller! Challenge your friends to a simple yet exciting dice rolling game. Roll the dice and see who gets the highest score !\n\n---\n\n## **How to Play**:\n1. **Create a game**: Challenge an opponent using [NewGame](diceroller?help\u0026__func=NewGame)\n2. **Roll the dice**: Play your turn by rolling a dice using [Play](diceroller?help\u0026__func=Play)\n\n---\n\n## **Scoring Rules**:\n- **Win** 🏆: +3 points\n- **Draw** 🤝: +1 point each\n- **Lose** ❌: No points\n- **Playing against yourself**: No points or stats changes for you\n\n---\n\n## **Recent Games**:\nBelow are the results from the most recent games. Up to 10 recent games are displayed\n\n| Game | Player 1 | 🎲 Roll 1 | Player 2 | 🎲 Roll 2 | 🏆 Winner |\n|------|----------|-----------|----------|-----------|-----------|\n`)\n\n\tmaxGames := 10\n\tfor n := int(gameId); n \u003e 0 \u0026\u0026 int(gameId)-n \u003c maxGames; n-- {\n\t\tg, err := getGame(n)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(strconv.Itoa(n) + \" | \" +\n\t\t\t\"\u003cspan title=\\\"\" + string(g.player1) + \"\\\"\u003e\" + shortName(g.player1) + \"\u003c/span\u003e\" + \" | \" + diceIcon(g.roll1) + \" | \" +\n\t\t\t\"\u003cspan title=\\\"\" + string(g.player2) + \"\\\"\u003e\" + shortName(g.player2) + \"\u003c/span\u003e\" + \" | \" + diceIcon(g.roll2) + \" | \" +\n\t\t\tg.status() + \"\\n\")\n\t}\n\n\tsb.WriteString(`\n---\n\n## **Leaderboard**:\nThe top players are ranked by performance. Games played against oneself are not counted in the leaderboard\n\n| Rank | Player                | Wins | Losses | Draws | Points |\n|------|-----------------------|------|--------|-------|--------|\n`)\n\n\tfor i, player := range getLeaderBoard() {\n\t\tsb.WriteString(ufmt.Sprintf(\"| %s   | \u003cspan title=\\\"\"+string(player.addr)+\"\\\"\u003e**%s**\u003c/span\u003e | %d | %d | %d | %d |\\n\",\n\t\t\trankIcon(i+1),\n\t\t\tshortName(player.addr),\n\t\t\tplayer.wins,\n\t\t\tplayer.losses,\n\t\t\tplayer.draws,\n\t\t\tplayer.points,\n\t\t))\n\t}\n\n\tsb.WriteString(\"\\n---\\n**Good luck and have fun !** 🎉\")\n\treturn sb.String()\n}\n\n// shortName returns a shortened name for the given address\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n\n// getGame retrieves the game state by its ID\nfunc getGame(idx int) (*game, error) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\treturn nil, errors.New(\"game not found\")\n\t}\n\treturn v.(*game), nil\n}\n\n// updateResult updates the player's stats and points based on the game outcome\nfunc (p *player) updateStats(result int) {\n\tswitch result {\n\tcase win:\n\t\tp.wins++\n\t\tp.points += 3\n\tcase lose:\n\t\tp.losses++\n\tcase draw:\n\t\tp.draws++\n\t\tp.points++\n\t}\n}\n\n// getPlayer retrieves a player or initializes a new one if they don't exist\nfunc getPlayer(addr std.Address) *player {\n\tv, ok := players.Get(addr.String())\n\tif !ok {\n\t\tplayer := \u0026player{\n\t\t\taddr: addr,\n\t\t}\n\t\tplayers.Set(addr.String(), player)\n\t\treturn player\n\t}\n\n\treturn v.(*player)\n}\n\n// getLeaderBoard generates a leaderboard sorted by points\nfunc getLeaderBoard() leaderBoard {\n\tboard := leaderBoard{}\n\tplayers.Iterate(\"\", \"\", func(key string, value interface{}) bool {\n\t\tplayer := value.(*player)\n\t\tboard = append(board, *player)\n\t\treturn false\n\t})\n\n\tsort.Sort(board)\n\n\treturn board\n}\n\n// Methods for sorting the leaderboard\nfunc (r leaderBoard) Len() int {\n\treturn len(r)\n}\n\nfunc (r leaderBoard) Less(i, j int) bool {\n\treturn r[i].points \u003e r[j].points\n}\n\nfunc (r leaderBoard) Swap(i, j int) {\n\tr[i].points, r[j].points = r[j].points, r[i].points\n}\n"},{"name":"icon.gno","body":"package diceroller\n\nimport (\n\t\"strconv\"\n)\n\n// diceIcon returns an icon of the dice roll\nfunc diceIcon(roll int) string {\n\tswitch roll {\n\tcase 1:\n\t\treturn \"🎲1\"\n\tcase 2:\n\t\treturn \"🎲2\"\n\tcase 3:\n\t\treturn \"🎲3\"\n\tcase 4:\n\t\treturn \"🎲4\"\n\tcase 5:\n\t\treturn \"🎲5\"\n\tcase 6:\n\t\treturn \"🎲6\"\n\tdefault:\n\t\treturn strconv.Itoa(roll)\n\t}\n}\n\n// resultIcon returns the icon representing the result of a game\nfunc resultIcon(result int) string {\n\tswitch result {\n\tcase win:\n\t\treturn \"🏆\"\n\tcase lose:\n\t\treturn \"❌\"\n\tcase draw:\n\t\treturn \"🤝\"\n\tdefault:\n\t\treturn \"🔄\"\n\t}\n}\n\n// rankIcon returns the icon for a player's rank\nfunc rankIcon(rank int) string {\n\tswitch rank {\n\tcase 1:\n\t\treturn \"🥇\"\n\tcase 2:\n\t\treturn \"🥈\"\n\tcase 3:\n\t\treturn \"🥉\"\n\tdefault:\n\t\treturn strconv.Itoa(rank)\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"RtbS508FbcR6WBwU/93LY71I4fb9XJqmfnsPKVD+kI1vB0GVPy8E81hnBP3tDFE8u9wYI57vDRhq6oySCBKcnA=="}],"memo":""},"blockNum":"1459615"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v1/diceroller","func":"NewGame","args":["g1vy86cm8s906zhcluz2jn2s0ptvfkkae7kedcy6"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"ypKge6LpkeZ8a8dQhtcjr+3oPw1atTafn5/Je0l5L2s5uGT1PfDQKEYdMqXT3mOi6iapIVihyYEdM97BIMBD5w=="}],"memo":""},"blockNum":"1459656"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v1/diceroller","func":"NewGame","args":["g10a3cepzzwlf0ax3kut2ktq3za6jln6gpzcdnt7"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"ZjtcjIV47RDoZ5EF1N3hPcJyFZrlrPRoWoBvT2+qLFgXOgOiOH4NAu3elX7evZ7gBoLmbqdP+AyfYVm3YiucKQ=="}],"memo":""},"blockNum":"1459663"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v1/diceroller","func":"Play","args":["1"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"FlUnfbF1OaAMof+lJn/mE7DIDT5gDXLMp21ARNoytRlhGCad3kBHuFvNSZsd36jzdkwsxliz7aQcQdymzBpuwA=="}],"memo":""},"blockNum":"1459707"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1vy86cm8s906zhcluz2jn2s0ptvfkkae7kedcy6","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v1/diceroller","func":"Play","args":["1"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1cjywz87hhCwcGCGDy27icHTLo2HlfAsIOhPyhQ11fa"},"signature":"q7Co8qPqjwLMocKcrCb87swV7M30udIDHIlmXlM0bNJbh5l7IC/eQHW0xdsaeif4xfFOZQjbCHCOr31YBXEtdg=="}],"memo":""},"blockNum":"1459711"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g10a3cepzzwlf0ax3kut2ktq3za6jln6gpzcdnt7","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v1/diceroller","func":"Play","args":["2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ai8g0ROvLRfFKd8Dwl0QsQYEMo+BN/u+OZkWSMJWvYCE"},"signature":"I6vWnZPlcDzBROCYXMA6NAjphxSvnaBRkF7hP2JifYds/kihFD6dQdshyXuZCKvps6zjVMd19K6p3PW3uFifgg=="}],"memo":""},"blockNum":"1459715"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v1/diceroller","func":"Play","args":["2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"axigRU64E9hpX5rOH3UYh7WZPUYhZVEi7ZQn3LVLS/h29o3fd28Og7YqG3kPEtXbRTSNgTnG26m9XqK1TBTfQQ=="}],"memo":""},"blockNum":"1459717"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","package":{"name":"diceroller","path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v2/diceroller","files":[{"name":"diceroller.gno","body":"package diceroller\n\nimport (\n\t\"errors\"\n\t\"math/rand\"\n\t\"sort\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/p/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/entropy\"\n\t\"gno.land/r/demo/users\"\n)\n\ntype (\n\t// game represents a Dice Roller game between two players\n\tgame struct {\n\t\tplayer1, player2 std.Address\n\t\troll1, roll2     int\n\t}\n\n\t// player holds the information about each player including their stats\n\tplayer struct {\n\t\taddr                        std.Address\n\t\twins, losses, draws, points int\n\t}\n\n\t// leaderBoard is a slice of players, used to sort players by rank\n\tleaderBoard []player\n)\n\nconst (\n\t// Constants to represent game result outcomes\n\tongoing = iota\n\twin\n\tdraw\n\tloss\n)\n\nvar (\n\tgames  avl.Tree // AVL tree for storing game states\n\tgameId seqid.ID // Sequence ID for games\n\n\tplayers avl.Tree // AVL tree for storing player data\n\n\tseed = uint64(entropy.New().Seed())\n\tr    = rand.New(rand.NewPCG(seed, 0xdeadbeef))\n)\n\n// rollDice generates a random dice roll between 1 and 6\nfunc rollDice() int {\n\treturn r.IntN(6) + 1\n}\n\n// NewGame initializes a new game with the provided opponent's address\nfunc NewGame(addr std.Address) int {\n\tif !addr.IsValid() {\n\t\tpanic(\"invalid opponent's address\")\n\t}\n\n\tgames.Set(gameId.Next().String(), \u0026game{\n\t\tplayer1: std.PrevRealm().Addr(),\n\t\tplayer2: addr,\n\t})\n\n\treturn int(gameId)\n}\n\n// Play allows a player to roll the dice and updates the game state accordingly\nfunc Play(idx int) int {\n\tg, err := getGame(idx)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\troll := rollDice() // Random the player's dice roll\n\n\t// Play the game and update the player's roll\n\tif err := g.play(std.PrevRealm().Addr(), roll); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// If both players have rolled, update the results and leaderboard\n\tif g.isFinished() {\n\t\t// If the player is playing against themselves, no points are awarded\n\t\tif g.player1 == g.player2 {\n\t\t\treturn roll\n\t\t}\n\n\t\tplayer1 := getPlayer(g.player1)\n\t\tplayer2 := getPlayer(g.player2)\n\n\t\tif g.roll1 \u003e g.roll2 {\n\t\t\tplayer1.updateStats(win)\n\t\t\tplayer2.updateStats(loss)\n\t\t} else if g.roll2 \u003e g.roll1 {\n\t\t\tplayer2.updateStats(win)\n\t\t\tplayer1.updateStats(loss)\n\t\t} else {\n\t\t\tplayer1.updateStats(draw)\n\t\t\tplayer2.updateStats(draw)\n\t\t}\n\t}\n\n\treturn roll\n}\n\n// play processes a player's roll and updates their score\nfunc (g *game) play(player std.Address, roll int) error {\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\n\tif g.isFinished() {\n\t\treturn errors.New(\"game over\")\n\t}\n\n\tif player == g.player1 \u0026\u0026 g.roll1 == 0 {\n\t\tg.roll1 = roll\n\t\treturn nil\n\t}\n\n\tif player == g.player2 \u0026\u0026 g.roll2 == 0 {\n\t\tg.roll2 = roll\n\t\treturn nil\n\t}\n\n\treturn errors.New(\"already played\")\n}\n\n// isFinished checks if the game has ended\nfunc (g *game) isFinished() bool {\n\treturn g.roll1 != 0 \u0026\u0026 g.roll2 != 0\n}\n\n// checkResult returns the game status as a formatted string\nfunc (g *game) status() string {\n\tif !g.isFinished() {\n\t\treturn resultIcon(ongoing) + \" Game still in progress\"\n\t}\n\n\tif g.roll1 \u003e g.roll2 {\n\t\treturn resultIcon(win) + \" Player1 Wins !\"\n\t} else if g.roll2 \u003c g.roll1 {\n\t\treturn resultIcon(win) + \" Player2 Wins !\"\n\t} else {\n\t\treturn resultIcon(draw) + \" It's a Draw !\"\n\t}\n}\n\n// Render provides a summary of the current state of games and leader board\nfunc Render(path string) string {\n\tvar sb strings.Builder\n\n\tsb.WriteString(`# 🎲 **Dice Roller Game**\n\nWelcome to Dice Roller! Challenge your friends to a simple yet exciting dice rolling game. Roll the dice and see who gets the highest score !\n\n---\n\n## **How to Play**:\n1. **Create a game**: Challenge an opponent using [NewGame](diceroller?help\u0026__func=NewGame)\n2. **Roll the dice**: Play your turn by rolling a dice using [Play](diceroller?help\u0026__func=Play)\n\n---\n\n## **Scoring Rules**:\n- **Win** 🏆: +3 points\n- **Draw** 🤝: +1 point each\n- **Lose** ❌: No points\n- **Playing against yourself**: No points or stats changes for you\n\n---\n\n## **Recent Games**:\nBelow are the results from the most recent games. Up to 10 recent games are displayed\n\n| Game | Player 1 | 🎲 Roll 1 | Player 2 | 🎲 Roll 2 | 🏆 Winner |\n|------|----------|-----------|----------|-----------|-----------|\n`)\n\n\tmaxGames := 10\n\tfor n := int(gameId); n \u003e 0 \u0026\u0026 int(gameId)-n \u003c maxGames; n-- {\n\t\tg, err := getGame(n)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(strconv.Itoa(n) + \" | \" +\n\t\t\t\"\u003cspan title=\\\"\" + string(g.player1) + \"\\\"\u003e\" + shortName(g.player1) + \"\u003c/span\u003e\" + \" | \" + diceIcon(g.roll1) + \" | \" +\n\t\t\t\"\u003cspan title=\\\"\" + string(g.player2) + \"\\\"\u003e\" + shortName(g.player2) + \"\u003c/span\u003e\" + \" | \" + diceIcon(g.roll2) + \" | \" +\n\t\t\tg.status() + \"\\n\")\n\t}\n\n\tsb.WriteString(`\n---\n\n## **Leaderboard**:\nThe top players are ranked by performance. Games played against oneself are not counted in the leaderboard\n\n| Rank | Player                | Wins | Losses | Draws | Points |\n|------|-----------------------|------|--------|-------|--------|\n`)\n\n\tfor i, player := range getLeaderBoard() {\n\t\tsb.WriteString(ufmt.Sprintf(\"| %s   | \u003cspan title=\\\"\"+string(player.addr)+\"\\\"\u003e**%s**\u003c/span\u003e | %d | %d | %d | %d |\\n\",\n\t\t\trankIcon(i+1),\n\t\t\tshortName(player.addr),\n\t\t\tplayer.wins,\n\t\t\tplayer.losses,\n\t\t\tplayer.draws,\n\t\t\tplayer.points,\n\t\t))\n\t}\n\n\tsb.WriteString(\"\\n---\\n**Good luck and have fun !** 🎉\")\n\treturn sb.String()\n}\n\n// shortName returns a shortened name for the given address\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n\n// getGame retrieves the game state by its ID\nfunc getGame(idx int) (*game, error) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\treturn nil, errors.New(\"game not found\")\n\t}\n\treturn v.(*game), nil\n}\n\n// updateResult updates the player's stats and points based on the game outcome\nfunc (p *player) updateStats(result int) {\n\tswitch result {\n\tcase win:\n\t\tp.wins++\n\t\tp.points += 3\n\tcase loss:\n\t\tp.losses++\n\tcase draw:\n\t\tp.draws++\n\t\tp.points++\n\t}\n}\n\n// getPlayer retrieves a player or initializes a new one if they don't exist\nfunc getPlayer(addr std.Address) *player {\n\tv, ok := players.Get(addr.String())\n\tif !ok {\n\t\tplayer := \u0026player{\n\t\t\taddr: addr,\n\t\t}\n\t\tplayers.Set(addr.String(), player)\n\t\treturn player\n\t}\n\n\treturn v.(*player)\n}\n\n// getLeaderBoard generates a leaderboard sorted by points\nfunc getLeaderBoard() leaderBoard {\n\tboard := leaderBoard{}\n\tplayers.Iterate(\"\", \"\", func(key string, value interface{}) bool {\n\t\tplayer := value.(*player)\n\t\tboard = append(board, *player)\n\t\treturn false\n\t})\n\n\tsort.Sort(board)\n\n\treturn board\n}\n\n// Methods for sorting the leaderboard\nfunc (r leaderBoard) Len() int {\n\treturn len(r)\n}\n\nfunc (r leaderBoard) Less(i, j int) bool {\n\tif r[i].points != r[j].points {\n\t\treturn r[i].points \u003e r[j].points\n\t}\n\n\tif r[i].wins != r[j].wins {\n\t\treturn r[i].wins \u003e r[j].wins\n\t}\n\n\tif r[i].draws != r[j].draws {\n\t\treturn r[i].draws \u003e r[j].draws\n\t}\n\n\treturn false\n}\n\nfunc (r leaderBoard) Swap(i, j int) {\n\tr[i], r[j] = r[j], r[i]\n}\n"},{"name":"icon.gno","body":"package diceroller\n\nimport (\n\t\"strconv\"\n)\n\n// diceIcon returns an icon of the dice roll\nfunc diceIcon(roll int) string {\n\tswitch roll {\n\tcase 1:\n\t\treturn \"🎲1\"\n\tcase 2:\n\t\treturn \"🎲2\"\n\tcase 3:\n\t\treturn \"🎲3\"\n\tcase 4:\n\t\treturn \"🎲4\"\n\tcase 5:\n\t\treturn \"🎲5\"\n\tcase 6:\n\t\treturn \"🎲6\"\n\tdefault:\n\t\treturn strconv.Itoa(roll)\n\t}\n}\n\n// resultIcon returns the icon representing the result of a game\nfunc resultIcon(result int) string {\n\tswitch result {\n\tcase win:\n\t\treturn \"🏆\"\n\tcase lose:\n\t\treturn \"❌\"\n\tcase draw:\n\t\treturn \"🤝\"\n\tdefault:\n\t\treturn \"🔄\"\n\t}\n}\n\n// rankIcon returns the icon for a player's rank\nfunc rankIcon(rank int) string {\n\tswitch rank {\n\tcase 1:\n\t\treturn \"🥇\"\n\tcase 2:\n\t\treturn \"🥈\"\n\tcase 3:\n\t\treturn \"🥉\"\n\tdefault:\n\t\treturn strconv.Itoa(rank)\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"39Q5AeaHqgf5+9BSa8rhJJVz7//qlmwjJRPWQgvZlRJNOENhIkIt7YM8C3O2Rkl8W0O/H79XxpZIfW+A2tdLfQ=="}],"memo":""},"blockNum":"1459950"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","package":{"name":"diceroller","path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v2/diceroller","files":[{"name":"diceroller.gno","body":"package diceroller\n\nimport (\n\t\"errors\"\n\t\"math/rand\"\n\t\"sort\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/p/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/entropy\"\n\t\"gno.land/r/demo/users\"\n)\n\ntype (\n\t// game represents a Dice Roller game between two players\n\tgame struct {\n\t\tplayer1, player2 std.Address\n\t\troll1, roll2     int\n\t}\n\n\t// player holds the information about each player including their stats\n\tplayer struct {\n\t\taddr                        std.Address\n\t\twins, losses, draws, points int\n\t}\n\n\t// leaderBoard is a slice of players, used to sort players by rank\n\tleaderBoard []player\n)\n\nconst (\n\t// Constants to represent game result outcomes\n\tongoing = iota\n\twin\n\tdraw\n\tloss\n)\n\nvar (\n\tgames  avl.Tree // AVL tree for storing game states\n\tgameId seqid.ID // Sequence ID for games\n\n\tplayers avl.Tree // AVL tree for storing player data\n\n\tseed = uint64(entropy.New().Seed())\n\tr    = rand.New(rand.NewPCG(seed, 0xdeadbeef))\n)\n\n// rollDice generates a random dice roll between 1 and 6\nfunc rollDice() int {\n\treturn r.IntN(6) + 1\n}\n\n// NewGame initializes a new game with the provided opponent's address\nfunc NewGame(addr std.Address) int {\n\tif !addr.IsValid() {\n\t\tpanic(\"invalid opponent's address\")\n\t}\n\n\tgames.Set(gameId.Next().String(), \u0026game{\n\t\tplayer1: std.PrevRealm().Addr(),\n\t\tplayer2: addr,\n\t})\n\n\treturn int(gameId)\n}\n\n// Play allows a player to roll the dice and updates the game state accordingly\nfunc Play(idx int) int {\n\tg, err := getGame(idx)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\troll := rollDice() // Random the player's dice roll\n\n\t// Play the game and update the player's roll\n\tif err := g.play(std.PrevRealm().Addr(), roll); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// If both players have rolled, update the results and leaderboard\n\tif g.isFinished() {\n\t\t// If the player is playing against themselves, no points are awarded\n\t\tif g.player1 == g.player2 {\n\t\t\treturn roll\n\t\t}\n\n\t\tplayer1 := getPlayer(g.player1)\n\t\tplayer2 := getPlayer(g.player2)\n\n\t\tif g.roll1 \u003e g.roll2 {\n\t\t\tplayer1.updateStats(win)\n\t\t\tplayer2.updateStats(loss)\n\t\t} else if g.roll2 \u003e g.roll1 {\n\t\t\tplayer2.updateStats(win)\n\t\t\tplayer1.updateStats(loss)\n\t\t} else {\n\t\t\tplayer1.updateStats(draw)\n\t\t\tplayer2.updateStats(draw)\n\t\t}\n\t}\n\n\treturn roll\n}\n\n// play processes a player's roll and updates their score\nfunc (g *game) play(player std.Address, roll int) error {\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\n\tif g.isFinished() {\n\t\treturn errors.New(\"game over\")\n\t}\n\n\tif player == g.player1 \u0026\u0026 g.roll1 == 0 {\n\t\tg.roll1 = roll\n\t\treturn nil\n\t}\n\n\tif player == g.player2 \u0026\u0026 g.roll2 == 0 {\n\t\tg.roll2 = roll\n\t\treturn nil\n\t}\n\n\treturn errors.New(\"already played\")\n}\n\n// isFinished checks if the game has ended\nfunc (g *game) isFinished() bool {\n\treturn g.roll1 != 0 \u0026\u0026 g.roll2 != 0\n}\n\n// checkResult returns the game status as a formatted string\nfunc (g *game) status() string {\n\tif !g.isFinished() {\n\t\treturn resultIcon(ongoing) + \" Game still in progress\"\n\t}\n\n\tif g.roll1 \u003e g.roll2 {\n\t\treturn resultIcon(win) + \" Player1 Wins !\"\n\t} else if g.roll2 \u003c g.roll1 {\n\t\treturn resultIcon(win) + \" Player2 Wins !\"\n\t} else {\n\t\treturn resultIcon(draw) + \" It's a Draw !\"\n\t}\n}\n\n// Render provides a summary of the current state of games and leader board\nfunc Render(path string) string {\n\tvar sb strings.Builder\n\n\tsb.WriteString(`# 🎲 **Dice Roller Game**\n\nWelcome to Dice Roller! Challenge your friends to a simple yet exciting dice rolling game. Roll the dice and see who gets the highest score !\n\n---\n\n## **How to Play**:\n1. **Create a game**: Challenge an opponent using [NewGame](diceroller?help\u0026__func=NewGame)\n2. **Roll the dice**: Play your turn by rolling a dice using [Play](diceroller?help\u0026__func=Play)\n\n---\n\n## **Scoring Rules**:\n- **Win** 🏆: +3 points\n- **Draw** 🤝: +1 point each\n- **Lose** ❌: No points\n- **Playing against yourself**: No points or stats changes for you\n\n---\n\n## **Recent Games**:\nBelow are the results from the most recent games. Up to 10 recent games are displayed\n\n| Game | Player 1 | 🎲 Roll 1 | Player 2 | 🎲 Roll 2 | 🏆 Winner |\n|------|----------|-----------|----------|-----------|-----------|\n`)\n\n\tmaxGames := 10\n\tfor n := int(gameId); n \u003e 0 \u0026\u0026 int(gameId)-n \u003c maxGames; n-- {\n\t\tg, err := getGame(n)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(strconv.Itoa(n) + \" | \" +\n\t\t\t\"\u003cspan title=\\\"\" + string(g.player1) + \"\\\"\u003e\" + shortName(g.player1) + \"\u003c/span\u003e\" + \" | \" + diceIcon(g.roll1) + \" | \" +\n\t\t\t\"\u003cspan title=\\\"\" + string(g.player2) + \"\\\"\u003e\" + shortName(g.player2) + \"\u003c/span\u003e\" + \" | \" + diceIcon(g.roll2) + \" | \" +\n\t\t\tg.status() + \"\\n\")\n\t}\n\n\tsb.WriteString(`\n---\n\n## **Leaderboard**:\nThe top players are ranked by performance. Games played against oneself are not counted in the leaderboard\n\n| Rank | Player                | Wins | Losses | Draws | Points |\n|------|-----------------------|------|--------|-------|--------|\n`)\n\n\tfor i, player := range getLeaderBoard() {\n\t\tsb.WriteString(ufmt.Sprintf(\"| %s   | \u003cspan title=\\\"\"+string(player.addr)+\"\\\"\u003e**%s**\u003c/span\u003e | %d | %d | %d | %d |\\n\",\n\t\t\trankIcon(i+1),\n\t\t\tshortName(player.addr),\n\t\t\tplayer.wins,\n\t\t\tplayer.losses,\n\t\t\tplayer.draws,\n\t\t\tplayer.points,\n\t\t))\n\t}\n\n\tsb.WriteString(\"\\n---\\n**Good luck and have fun !** 🎉\")\n\treturn sb.String()\n}\n\n// shortName returns a shortened name for the given address\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n\n// getGame retrieves the game state by its ID\nfunc getGame(idx int) (*game, error) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\treturn nil, errors.New(\"game not found\")\n\t}\n\treturn v.(*game), nil\n}\n\n// updateResult updates the player's stats and points based on the game outcome\nfunc (p *player) updateStats(result int) {\n\tswitch result {\n\tcase win:\n\t\tp.wins++\n\t\tp.points += 3\n\tcase loss:\n\t\tp.losses++\n\tcase draw:\n\t\tp.draws++\n\t\tp.points++\n\t}\n}\n\n// getPlayer retrieves a player or initializes a new one if they don't exist\nfunc getPlayer(addr std.Address) *player {\n\tv, ok := players.Get(addr.String())\n\tif !ok {\n\t\tplayer := \u0026player{\n\t\t\taddr: addr,\n\t\t}\n\t\tplayers.Set(addr.String(), player)\n\t\treturn player\n\t}\n\n\treturn v.(*player)\n}\n\n// getLeaderBoard generates a leaderboard sorted by points\nfunc getLeaderBoard() leaderBoard {\n\tboard := leaderBoard{}\n\tplayers.Iterate(\"\", \"\", func(key string, value interface{}) bool {\n\t\tplayer := value.(*player)\n\t\tboard = append(board, *player)\n\t\treturn false\n\t})\n\n\tsort.Sort(board)\n\n\treturn board\n}\n\n// Methods for sorting the leaderboard\nfunc (r leaderBoard) Len() int {\n\treturn len(r)\n}\n\nfunc (r leaderBoard) Less(i, j int) bool {\n\tif r[i].points != r[j].points {\n\t\treturn r[i].points \u003e r[j].points\n\t}\n\n\tif r[i].wins != r[j].wins {\n\t\treturn r[i].wins \u003e r[j].wins\n\t}\n\n\tif r[i].draws != r[j].draws {\n\t\treturn r[i].draws \u003e r[j].draws\n\t}\n\n\treturn false\n}\n\nfunc (r leaderBoard) Swap(i, j int) {\n\tr[i], r[j] = r[j], r[i]\n}\n"},{"name":"icon.gno","body":"package diceroller\n\nimport (\n\t\"strconv\"\n)\n\n// diceIcon returns an icon of the dice roll\nfunc diceIcon(roll int) string {\n\tswitch roll {\n\tcase 1:\n\t\treturn \"🎲1\"\n\tcase 2:\n\t\treturn \"🎲2\"\n\tcase 3:\n\t\treturn \"🎲3\"\n\tcase 4:\n\t\treturn \"🎲4\"\n\tcase 5:\n\t\treturn \"🎲5\"\n\tcase 6:\n\t\treturn \"🎲6\"\n\tdefault:\n\t\treturn strconv.Itoa(roll)\n\t}\n}\n\n// resultIcon returns the icon representing the result of a game\nfunc resultIcon(result int) string {\n\tswitch result {\n\tcase win:\n\t\treturn \"🏆\"\n\tcase loss:\n\t\treturn \"❌\"\n\tcase draw:\n\t\treturn \"🤝\"\n\tdefault:\n\t\treturn \"🔄\"\n\t}\n}\n\n// rankIcon returns the icon for a player's rank\nfunc rankIcon(rank int) string {\n\tswitch rank {\n\tcase 1:\n\t\treturn \"🥇\"\n\tcase 2:\n\t\treturn \"🥈\"\n\tcase 3:\n\t\treturn \"🥉\"\n\tdefault:\n\t\treturn strconv.Itoa(rank)\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"e2ZbhlBHKq2zXv+DgyBw/fDk/Wudx3Wahy59tXBM3Xt3XtubDx1slA1sTC9Bg17S5dv/NDuRPE+XrAwgvb1fEQ=="}],"memo":""},"blockNum":"1459958"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v2/diceroller","func":"NewGame","args":["g1vy86cm8s906zhcluz2jn2s0ptvfkkae7kedcy6"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"7y2X2aoPnsKR4/wc9INt9gmMc0mAJHkTKaG0DrlExJRVtOe9nfn+HSn8DGB3ewOp9/Vm4a/sAb1thH+PeeAFdw=="}],"memo":""},"blockNum":"1459997"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v2/diceroller","func":"NewGame","args":["g10a3cepzzwlf0ax3kut2ktq3za6jln6gpzcdnt7"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"V6GJBXUNVo3HiiS+TuKauA5Cv/H5+m33isJv3p7veGJn5aPHyDSCdG0NrjmwpuwgonCHwansFhDzxCokhoQxUw=="}],"memo":""},"blockNum":"1460009"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v2/diceroller","func":"Play","args":["2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"WrqRm4nisYT2phHNByXiRsXjIJ6hZxyC4HLzKZ4bzY8r5D969g3k5JNqi0kFb7He3NE4Ji6KpGdOdsPfplj6Hg=="}],"memo":""},"blockNum":"1460015"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g10a3cepzzwlf0ax3kut2ktq3za6jln6gpzcdnt7","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v2/diceroller","func":"Play","args":["2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ai8g0ROvLRfFKd8Dwl0QsQYEMo+BN/u+OZkWSMJWvYCE"},"signature":"YMqbrrwFYn8jJNGIS0sebhLlmS2Reo6vdtwAMwVjboB6Bx3dKOhARqd/d4MwCuPcrm6RynytGhkZrvkqXOOusg=="}],"memo":""},"blockNum":"1460018"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1vy86cm8s906zhcluz2jn2s0ptvfkkae7kedcy6","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v2/diceroller","func":"Play","args":["1"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1cjywz87hhCwcGCGDy27icHTLo2HlfAsIOhPyhQ11fa"},"signature":"0n5S2Xvz3WKyL0BzCF09eQgAvJvRZhGMcQmlIuSUUYwI4qZuFcyVH87V6IDNQLjbzuKDLpt8FjIPx1HWfo9Oyw=="}],"memo":""},"blockNum":"1460023"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v2/diceroller","func":"Play","args":["1"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"RdYwntUgeI6SU3zSjthT1kHvS5Qk79Cj5X3niHxVw3A52U3rWkqAHFrhvrUKBtEPnCQlQPD1anMt7KeP0HTdWA=="}],"memo":""},"blockNum":"1460026"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","package":{"name":"diceroller","path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v3/diceroller","files":[{"name":"diceroller.gno","body":"package diceroller\n\nimport (\n\t\"errors\"\n\t\"math/rand\"\n\t\"sort\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/p/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/entropy\"\n\t\"gno.land/r/demo/users\"\n)\n\ntype (\n\t// game represents a Dice Roller game between two players\n\tgame struct {\n\t\tplayer1, player2 std.Address\n\t\troll1, roll2     int\n\t}\n\n\t// player holds the information about each player including their stats\n\tplayer struct {\n\t\taddr                        std.Address\n\t\twins, losses, draws, points int\n\t}\n\n\t// leaderBoard is a slice of players, used to sort players by rank\n\tleaderBoard []player\n)\n\nconst (\n\t// Constants to represent game result outcomes\n\tongoing = iota\n\twin\n\tdraw\n\tloss\n)\n\nvar (\n\tgames  avl.Tree // AVL tree for storing game states\n\tgameId seqid.ID // Sequence ID for games\n\n\tplayers avl.Tree // AVL tree for storing player data\n\n\tseed = uint64(entropy.New().Seed())\n\tr    = rand.New(rand.NewPCG(seed, 0xdeadbeef))\n)\n\n// rollDice generates a random dice roll between 1 and 6\nfunc rollDice() int {\n\treturn r.IntN(6) + 1\n}\n\n// NewGame initializes a new game with the provided opponent's address\nfunc NewGame(addr std.Address) int {\n\tif !addr.IsValid() {\n\t\tpanic(\"invalid opponent's address\")\n\t}\n\n\tgames.Set(gameId.Next().String(), \u0026game{\n\t\tplayer1: std.PrevRealm().Addr(),\n\t\tplayer2: addr,\n\t})\n\n\treturn int(gameId)\n}\n\n// Play allows a player to roll the dice and updates the game state accordingly\nfunc Play(idx int) int {\n\tg, err := getGame(idx)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\troll := rollDice() // Random the player's dice roll\n\n\t// Play the game and update the player's roll\n\tif err := g.play(std.PrevRealm().Addr(), roll); err != nil {\n\t\tpanic(err)\n\t}\n\n\t// If both players have rolled, update the results and leaderboard\n\tif g.isFinished() {\n\t\t// If the player is playing against themselves, no points are awarded\n\t\tif g.player1 == g.player2 {\n\t\t\treturn roll\n\t\t}\n\n\t\tplayer1 := getPlayer(g.player1)\n\t\tplayer2 := getPlayer(g.player2)\n\n\t\tif g.roll1 \u003e g.roll2 {\n\t\t\tplayer1.updateStats(win)\n\t\t\tplayer2.updateStats(loss)\n\t\t} else if g.roll2 \u003e g.roll1 {\n\t\t\tplayer2.updateStats(win)\n\t\t\tplayer1.updateStats(loss)\n\t\t} else {\n\t\t\tplayer1.updateStats(draw)\n\t\t\tplayer2.updateStats(draw)\n\t\t}\n\t}\n\n\treturn roll\n}\n\n// play processes a player's roll and updates their score\nfunc (g *game) play(player std.Address, roll int) error {\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\n\tif g.isFinished() {\n\t\treturn errors.New(\"game over\")\n\t}\n\n\tif player == g.player1 \u0026\u0026 g.roll1 == 0 {\n\t\tg.roll1 = roll\n\t\treturn nil\n\t}\n\n\tif player == g.player2 \u0026\u0026 g.roll2 == 0 {\n\t\tg.roll2 = roll\n\t\treturn nil\n\t}\n\n\treturn errors.New(\"already played\")\n}\n\n// isFinished checks if the game has ended\nfunc (g *game) isFinished() bool {\n\treturn g.roll1 != 0 \u0026\u0026 g.roll2 != 0\n}\n\n// checkResult returns the game status as a formatted string\nfunc (g *game) status() string {\n\tif !g.isFinished() {\n\t\treturn resultIcon(ongoing) + \" Game still in progress\"\n\t}\n\n\tif g.roll1 \u003e g.roll2 {\n\t\treturn resultIcon(win) + \" Player1 Wins !\"\n\t} else if g.roll2 \u003e g.roll1 {\n\t\treturn resultIcon(win) + \" Player2 Wins !\"\n\t} else {\n\t\treturn resultIcon(draw) + \" It's a Draw !\"\n\t}\n}\n\n// Render provides a summary of the current state of games and leader board\nfunc Render(path string) string {\n\tvar sb strings.Builder\n\n\tsb.WriteString(`# 🎲 **Dice Roller Game**\n\nWelcome to Dice Roller! Challenge your friends to a simple yet exciting dice rolling game. Roll the dice and see who gets the highest score !\n\n---\n\n## **How to Play**:\n1. **Create a game**: Challenge an opponent using [NewGame](diceroller?help\u0026__func=NewGame)\n2. **Roll the dice**: Play your turn by rolling a dice using [Play](diceroller?help\u0026__func=Play)\n\n---\n\n## **Scoring Rules**:\n- **Win** 🏆: +3 points\n- **Draw** 🤝: +1 point each\n- **Lose** ❌: No points\n- **Playing against yourself**: No points or stats changes for you\n\n---\n\n## **Recent Games**:\nBelow are the results from the most recent games. Up to 10 recent games are displayed\n\n| Game | Player 1 | 🎲 Roll 1 | Player 2 | 🎲 Roll 2 | 🏆 Winner |\n|------|----------|-----------|----------|-----------|-----------|\n`)\n\n\tmaxGames := 10\n\tfor n := int(gameId); n \u003e 0 \u0026\u0026 int(gameId)-n \u003c maxGames; n-- {\n\t\tg, err := getGame(n)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(strconv.Itoa(n) + \" | \" +\n\t\t\t\"\u003cspan title=\\\"\" + string(g.player1) + \"\\\"\u003e\" + shortName(g.player1) + \"\u003c/span\u003e\" + \" | \" + diceIcon(g.roll1) + \" | \" +\n\t\t\t\"\u003cspan title=\\\"\" + string(g.player2) + \"\\\"\u003e\" + shortName(g.player2) + \"\u003c/span\u003e\" + \" | \" + diceIcon(g.roll2) + \" | \" +\n\t\t\tg.status() + \"\\n\")\n\t}\n\n\tsb.WriteString(`\n---\n\n## **Leaderboard**:\nThe top players are ranked by performance. Games played against oneself are not counted in the leaderboard\n\n| Rank | Player                | Wins | Losses | Draws | Points |\n|------|-----------------------|------|--------|-------|--------|\n`)\n\n\tfor i, player := range getLeaderBoard() {\n\t\tsb.WriteString(ufmt.Sprintf(\"| %s   | \u003cspan title=\\\"\"+string(player.addr)+\"\\\"\u003e**%s**\u003c/span\u003e | %d | %d | %d | %d |\\n\",\n\t\t\trankIcon(i+1),\n\t\t\tshortName(player.addr),\n\t\t\tplayer.wins,\n\t\t\tplayer.losses,\n\t\t\tplayer.draws,\n\t\t\tplayer.points,\n\t\t))\n\t}\n\n\tsb.WriteString(\"\\n---\\n**Good luck and have fun !** 🎉\")\n\treturn sb.String()\n}\n\n// shortName returns a shortened name for the given address\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n\n// getGame retrieves the game state by its ID\nfunc getGame(idx int) (*game, error) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\treturn nil, errors.New(\"game not found\")\n\t}\n\treturn v.(*game), nil\n}\n\n// updateResult updates the player's stats and points based on the game outcome\nfunc (p *player) updateStats(result int) {\n\tswitch result {\n\tcase win:\n\t\tp.wins++\n\t\tp.points += 3\n\tcase loss:\n\t\tp.losses++\n\tcase draw:\n\t\tp.draws++\n\t\tp.points++\n\t}\n}\n\n// getPlayer retrieves a player or initializes a new one if they don't exist\nfunc getPlayer(addr std.Address) *player {\n\tv, ok := players.Get(addr.String())\n\tif !ok {\n\t\tplayer := \u0026player{\n\t\t\taddr: addr,\n\t\t}\n\t\tplayers.Set(addr.String(), player)\n\t\treturn player\n\t}\n\n\treturn v.(*player)\n}\n\n// getLeaderBoard generates a leaderboard sorted by points\nfunc getLeaderBoard() leaderBoard {\n\tboard := leaderBoard{}\n\tplayers.Iterate(\"\", \"\", func(key string, value interface{}) bool {\n\t\tplayer := value.(*player)\n\t\tboard = append(board, *player)\n\t\treturn false\n\t})\n\n\tsort.Sort(board)\n\n\treturn board\n}\n\n// Methods for sorting the leaderboard\nfunc (r leaderBoard) Len() int {\n\treturn len(r)\n}\n\nfunc (r leaderBoard) Less(i, j int) bool {\n\tif r[i].points != r[j].points {\n\t\treturn r[i].points \u003e r[j].points\n\t}\n\n\tif r[i].wins != r[j].wins {\n\t\treturn r[i].wins \u003e r[j].wins\n\t}\n\n\tif r[i].draws != r[j].draws {\n\t\treturn r[i].draws \u003e r[j].draws\n\t}\n\n\treturn false\n}\n\nfunc (r leaderBoard) Swap(i, j int) {\n\tr[i], r[j] = r[j], r[i]\n}\n"},{"name":"icon.gno","body":"package diceroller\n\nimport (\n\t\"strconv\"\n)\n\n// diceIcon returns an icon of the dice roll\nfunc diceIcon(roll int) string {\n\tswitch roll {\n\tcase 1:\n\t\treturn \"🎲1\"\n\tcase 2:\n\t\treturn \"🎲2\"\n\tcase 3:\n\t\treturn \"🎲3\"\n\tcase 4:\n\t\treturn \"🎲4\"\n\tcase 5:\n\t\treturn \"🎲5\"\n\tcase 6:\n\t\treturn \"🎲6\"\n\tdefault:\n\t\treturn strconv.Itoa(roll)\n\t}\n}\n\n// resultIcon returns the icon representing the result of a game\nfunc resultIcon(result int) string {\n\tswitch result {\n\tcase win:\n\t\treturn \"🏆\"\n\tcase loss:\n\t\treturn \"❌\"\n\tcase draw:\n\t\treturn \"🤝\"\n\tdefault:\n\t\treturn \"🔄\"\n\t}\n}\n\n// rankIcon returns the icon for a player's rank\nfunc rankIcon(rank int) string {\n\tswitch rank {\n\tcase 1:\n\t\treturn \"🥇\"\n\tcase 2:\n\t\treturn \"🥈\"\n\tcase 3:\n\t\treturn \"🥉\"\n\tdefault:\n\t\treturn strconv.Itoa(rank)\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"Q6r7kCAGJE7zs4edMJeXD204QJD3l/KCP2hKB1m4Hvsn9vaeyzZ5lhR5QrqfGSOiQF6hmnwCuN+MQbHW1os9EA=="}],"memo":""},"blockNum":"1460073"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v3/diceroller","func":"NewGame","args":["g10a3cepzzwlf0ax3kut2ktq3za6jln6gpzcdnt7"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"2stBnQ0mzqm1faGYOS+WKH9BL1nLMVdzDrByHsQl735WPcHAMUB9KDS8bJM4E/oZ1RDBZo5OG9ZpDAp/b5ajag=="}],"memo":""},"blockNum":"1460087"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v3/diceroller","func":"NewGame","args":["g1vy86cm8s906zhcluz2jn2s0ptvfkkae7kedcy6"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"xduI0x45sHr9IAZGZHi9KVTcWMBUmas7RxMLEkao5hl6nKr+7TDc7VM0Z4DNjlp04ITm53vXjm0K7RfNxcml8g=="}],"memo":""},"blockNum":"1460093"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v3/diceroller","func":"Play","args":["1"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"h/cnp1e7/FuPRX9OISSgCFrg2Nq+knozzRNup77KiHI5v7zFtTxhB/5FjhGp05iULAGPXjYOOH5656NRSrDOCw=="}],"memo":""},"blockNum":"1460099"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g10a3cepzzwlf0ax3kut2ktq3za6jln6gpzcdnt7","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v3/diceroller","func":"Play","args":["1"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ai8g0ROvLRfFKd8Dwl0QsQYEMo+BN/u+OZkWSMJWvYCE"},"signature":"LcDM+YYajAszn5uqcS9xB/P9ugXQ8kl4OF9zcwubN65AZpUvP1oPsZ+yBXP+0idVB+ZdOxV/JPvmbexros5vRw=="}],"memo":""},"blockNum":"1460104"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v3/diceroller","func":"Play","args":["2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"lby2bGyQ2/9IjI1piO27ZbLFAb6y8S7kIn+jAsdHvtAtYxrYiAPSDb9bORDDfY1xV321AS4RvVuD0AyoBdFdEg=="}],"memo":""},"blockNum":"1460108"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1vy86cm8s906zhcluz2jn2s0ptvfkkae7kedcy6","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v3/diceroller","func":"Play","args":["2"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1cjywz87hhCwcGCGDy27icHTLo2HlfAsIOhPyhQ11fa"},"signature":"v6y7MfQVSVGWvxF5zYrTpDxWd42beaj293UoMDEVlBQiSXhKFlQtN+Sg5CwanSRSlYTkgG+BPYsuxCwB1nnBGQ=="}],"memo":""},"blockNum":"1460110"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v3/diceroller","func":"NewGame","args":["g1vy86cm8s906zhcluz2jn2s0ptvfkkae7kedcy6"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"puYYWQ1BaApKK9lj6BWKFOOwKVQhh+O5dcdf4Vq3/UROB8uyOJMRwnZAdXm5cv5LNUmMhpEYNj3h3kkYoye/0A=="}],"memo":""},"blockNum":"1460125"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v3/diceroller","func":"NewGame","args":["g10a3cepzzwlf0ax3kut2ktq3za6jln6gpzcdnt7"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"huJssNjEjbuNU10xcGxjtI81TFIJwSr8QP0fbIIIK8hSxbPqVWuflq0DUdPAinMXwSi/m9gcoAlHE7MwDH3ifw=="}],"memo":""},"blockNum":"1460129"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1vy86cm8s906zhcluz2jn2s0ptvfkkae7kedcy6","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v3/diceroller","func":"Play","args":["3"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1cjywz87hhCwcGCGDy27icHTLo2HlfAsIOhPyhQ11fa"},"signature":"SgOcZofhAXDRd8u0aM6jh560EaeM8UnKLB7NBv55fiBRVGT6YdS1qGV2zoOCdPM+z9YRO6Xx+Lbqczoi/kseZw=="}],"memo":""},"blockNum":"1460136"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v3/diceroller","func":"Play","args":["3"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"S0U2w0uhNiN68cT0JoCVPaJE4rizoNPGbQ1sbOcFLyZnGPg3C4MKCZQPbiinfZUlWulV3A3BiA9VSrRiRG9Iiw=="}],"memo":""},"blockNum":"1460139"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v3/diceroller","func":"Play","args":["4"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"88dSDzHgjHDi62nSGq6W3EjClI7kfMXSd0OVrgiXPQ0j2qhFYmem69yxtGgkdny9pISfiRdkGAFcRCi3htYfSQ=="}],"memo":""},"blockNum":"1460143"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g10a3cepzzwlf0ax3kut2ktq3za6jln6gpzcdnt7","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v3/diceroller","func":"Play","args":["4"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ai8g0ROvLRfFKd8Dwl0QsQYEMo+BN/u+OZkWSMJWvYCE"},"signature":"YgYohCs9iFOuRdI9gv7qCRh+cl8xakolzCF03uqstfYuyTa++s3eUldU7HAqiezZhtgSHstF+i7ZpalFrlUZng=="}],"memo":""},"blockNum":"1460147"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v3/diceroller","func":"NewGame","args":["g10a3cepzzwlf0ax3kut2ktq3za6jln6gpzcdnt7"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A07GwgEh8o++7Ka7JSCX5yC6NLA22rwckYKbx5V47CFl"},"signature":"JxgiclkWQGTYfWoMUBI4SPd8nx9siLhwtL2gEBM4e3gjnYDQNKmPodcnPjCpNyDhEzqDy/4628LypZ35j0JnYQ=="}],"memo":""},"blockNum":"1460157"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g10a3cepzzwlf0ax3kut2ktq3za6jln6gpzcdnt7","send":"","pkg_path":"gno.land/r/g1w6886hdj2tet0seyw6kn8fl92sx06prgd9w9j8/game/v3/diceroller","func":"NewGame","args":["g10a3cepzzwlf0ax3kut2ktq3za6jln6gpzcdnt7"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ai8g0ROvLRfFKd8Dwl0QsQYEMo+BN/u+OZkWSMJWvYCE"},"signature":"jzCvDmMwCQbiTn0WEzC9bR4QhDNtr833gJwQVJ2x205vyTKiB6PajXQPoBdvEVoHPjdut7DsOlqIq492EdgE9w=="}],"memo":""},"blockNum":"1460807"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["86"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["86","true"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["87"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["87","true"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["90"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["90","true"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["91"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["91","true"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["92"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["92","true"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1t+ghsl+0iSQZ51MozHZ1U04/dlLmgN1yDqvcynDdxF"},"signature":"HHmYbHBAuOYMLJFdGXHXB9miD+K6tSaShW5yrekLPXIlS0ZgZgtJaoylN0ciowzIyCuq+51Cdab2d0L/CpAMJQ=="}],"memo":""},"blockNum":"1465471"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"2051250000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/onbloc/foo","2051250000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/onbloc/usdc:3000*POOL*gno.land/r/onbloc/usdc:gno.land/r/onbloc/obl:3000*POOL*gno.land/r/onbloc/obl:gno.land/r/onbloc/foo:3000","100","4486823602"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1t+ghsl+0iSQZ51MozHZ1U04/dlLmgN1yDqvcynDdxF"},"signature":"xOJsvNqzBs1jY5FHSp/MxhzEu5kxBWE1F0FkqxFevYBtRNvyFZLxSy+olqm7Y9PQEyU/nuC4CL78YoPOkslw7Q=="}],"memo":""},"blockNum":"1465485"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gno.land/r/onbloc/foo","gnot","4509370000","EXACT_IN","gno.land/r/onbloc/foo:gno.land/r/demo/wugnot:3000","100","2050967339"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1t+ghsl+0iSQZ51MozHZ1U04/dlLmgN1yDqvcynDdxF"},"signature":"WbT83lMD3sLs7rHnzJMy6BIeXlavou8y4l+Pgz6clxo2RtcJs6ZVic6Rb/fXvhgli2D5mDryWYgdh4TuCx9lFA=="}],"memo":""},"blockNum":"1465491"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"2061270000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/onbloc/foo","2061270000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/onbloc/usdc:3000*POOL*gno.land/r/onbloc/usdc:gno.land/r/onbloc/obl:3000*POOL*gno.land/r/onbloc/obl:gno.land/r/onbloc/foo:3000","100","4502914440"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1t+ghsl+0iSQZ51MozHZ1U04/dlLmgN1yDqvcynDdxF"},"signature":"nGZHLIfiSqfcHapkLczv+jLIZvkPv5uZlftMq9nXvKYAI8gJRpL+pSHEsce1suFKheYsWY+x9u4k5vHhhY40/w=="}],"memo":""},"blockNum":"1465496"}
