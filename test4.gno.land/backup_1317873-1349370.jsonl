{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18djgscernafce2ak57jhz4ep2u4jx0ckykjuz7","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g18djgscernafce2ak57jhz4ep2u4jx0ckykjuz7","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g18djgscernafce2ak57jhz4ep2u4jx0ckykjuz7","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["152"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3AASAYI/kePwcIQeDAbF2PMdQ5siiQpKKT+TUXcIYCS"},"signature":"g0X8fe9sO+UCzXtL/fkp3AZFtTlrPefJFMj6B59IOQJJ+xHnPqnDDZLHev6wwm1bDqBp3i4AWqe+KWtJdXhF7w=="}],"memo":""},"blockNum":"1321590"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18djgscernafce2ak57jhz4ep2u4jx0ckykjuz7","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g18djgscernafce2ak57jhz4ep2u4jx0ckykjuz7","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g18djgscernafce2ak57jhz4ep2u4jx0ckykjuz7","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g18djgscernafce2ak57jhz4ep2u4jx0ckykjuz7","send":"10000000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/gnoswap/v2/gns","10000000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000","100","10009029547"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3AASAYI/kePwcIQeDAbF2PMdQ5siiQpKKT+TUXcIYCS"},"signature":"vFbJUFoWILnYntQArTDz1L/ifJNbQd59fDuhiLlas00671as8hz+7jaI/9vfyAKOskiHT4MA2RbS0OC6Xf/NZA=="}],"memo":""},"blockNum":"1321627"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1kkhrcr7rnay67zsynmrrxmwrlfr7yfsuu669wk","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1kkhrcr7rnay67zsynmrrxmwrlfr7yfsuu669wk","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1kkhrcr7rnay67zsynmrrxmwrlfr7yfsuu669wk","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1kkhrcr7rnay67zsynmrrxmwrlfr7yfsuu669wk","send":"500000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/gnoswap/v2/gns","500000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000","100","500303404"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At0REeqvgrSR/YAi3wOjOOV+87fR/8+0N+eVmwzLfEiq"},"signature":"Fu343EYoHJWmOjPefCaXKtFDo6qNh31nzZZjhWYKo1c3hA7hYcg8ckY3XlFDkQWOF9Ol6TZs4M5G2Kbl+tP+JQ=="}],"memo":""},"blockNum":"1323362"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g162jgpk4740r6a7g53cgz9ahxqtyuekgqchw6w9","package":{"name":"grc721","path":"gno.land/p/varmeta/dns/grc721","files":[{"name":"basic_nft.gno","body":"package grc721\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\ntype basicNFT struct {\n\tname              string\n\tsymbol            string\n\towners            avl.Tree // tokenId -\u003e OwnerAddress\n\tbalances          avl.Tree // OwnerAddress -\u003e TokenCount\n\ttokenApprovals    avl.Tree // TokenId -\u003e ApprovedAddress\n\ttokenURIs         avl.Tree // TokenId -\u003e URIs\n\toperatorApprovals avl.Tree // \"OwnerAddress:OperatorAddress\" -\u003e bool\n}\n\n// Returns new basic NFT\nfunc NewBasicNFT(name string, symbol string) *basicNFT {\n\treturn \u0026basicNFT{\n\t\tname:   name,\n\t\tsymbol: symbol,\n\n\t\towners:            avl.Tree{},\n\t\tbalances:          avl.Tree{},\n\t\ttokenApprovals:    avl.Tree{},\n\t\ttokenURIs:         avl.Tree{},\n\t\toperatorApprovals: avl.Tree{},\n\t}\n}\n\nfunc (s *basicNFT) Name() string       { return s.name }\nfunc (s *basicNFT) Symbol() string     { return s.symbol }\nfunc (s *basicNFT) TokenCount() uint64 { return uint64(s.owners.Size()) }\n\n// BalanceOf returns balance of input address\nfunc (s *basicNFT) BalanceOf(addr std.Address) (uint64, error) {\n\tif err := isValidAddress(addr); err != nil {\n\t\treturn 0, err\n\t}\n\n\tbalance, found := s.balances.Get(addr.String())\n\tif !found {\n\t\treturn 0, nil\n\t}\n\n\treturn balance.(uint64), nil\n}\n\n// OwnerOf returns owner of input token id\nfunc (s *basicNFT) OwnerOf(tid TokenID) (std.Address, error) {\n\towner, found := s.owners.Get(string(tid))\n\tif !found {\n\t\treturn \"\", ErrInvalidTokenId\n\t}\n\n\treturn owner.(std.Address), nil\n}\n\n// TokenURI returns the URI of input token id\nfunc (s *basicNFT) TokenURI(tid TokenID) (string, error) {\n\turi, found := s.tokenURIs.Get(string(tid))\n\tif !found {\n\t\treturn \"\", ErrInvalidTokenId\n\t}\n\n\treturn uri.(string), nil\n}\n\nfunc (s *basicNFT) SetTokenURI(tid TokenID, tURI TokenURI) (bool, error) {\n\t// check for invalid TokenID\n\tif !s.exists(tid) {\n\t\treturn false, ErrInvalidTokenId\n\t}\n\n\t// check for the right owner\n\towner, err := s.OwnerOf(tid)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\tcaller := std.PrevRealm().Addr()\n\tif caller != owner {\n\t\treturn false, ErrCallerIsNotOwner\n\t}\n\ts.tokenURIs.Set(string(tid), string(tURI))\n\treturn true, nil\n}\n\n// IsApprovedForAll returns true if operator is approved for all by the owner.\n// Otherwise, returns false\nfunc (s *basicNFT) IsApprovedForAll(owner, operator std.Address) bool {\n\tkey := owner.String() + \":\" + operator.String()\n\t_, found := s.operatorApprovals.Get(key)\n\tif !found {\n\t\treturn false\n\t}\n\n\treturn true\n}\n\n// Approve approves the input address for particular token\nfunc (s *basicNFT) Approve(to std.Address, tid TokenID) error {\n\tif err := isValidAddress(to); err != nil {\n\t\treturn err\n\t}\n\n\towner, err := s.OwnerOf(tid)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif owner == to {\n\t\treturn ErrApprovalToCurrentOwner\n\t}\n\n\tcaller := std.PrevRealm().Addr()\n\tif caller != owner \u0026\u0026 !s.IsApprovedForAll(owner, caller) {\n\t\treturn ErrCallerIsNotOwnerOrApproved\n\t}\n\n\ts.tokenApprovals.Set(string(tid), to.String())\n\tevent := ApprovalEvent{owner, to, tid}\n\temit(\u0026event)\n\n\treturn nil\n}\n\n// GetApproved return the approved address for token\nfunc (s *basicNFT) GetApproved(tid TokenID) (std.Address, error) {\n\taddr, found := s.tokenApprovals.Get(string(tid))\n\tif !found {\n\t\treturn zeroAddress, ErrTokenIdNotHasApproved\n\t}\n\n\treturn std.Address(addr.(string)), nil\n}\n\n// SetApprovalForAll can approve the operator to operate on all tokens\nfunc (s *basicNFT) SetApprovalForAll(operator std.Address, approved bool) error {\n\tif err := isValidAddress(operator); err != nil {\n\t\treturn ErrInvalidAddress\n\t}\n\n\tcaller := std.PrevRealm().Addr()\n\treturn s.setApprovalForAll(caller, operator, approved)\n}\n\n// Safely transfers `tokenId` token from `from` to `to`, checking that\n// contract recipients are aware of the GRC721 protocol to prevent\n// tokens from being forever locked.\nfunc (s *basicNFT) SafeTransferFrom(from, to std.Address, tid TokenID) error {\n\tcaller := std.PrevRealm().Addr()\n\tif !s.isApprovedOrOwner(caller, tid) {\n\t\treturn ErrCallerIsNotOwnerOrApproved\n\t}\n\n\terr := s.transfer(from, to, tid)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif !s.checkOnGRC721Received(from, to, tid) {\n\t\treturn ErrTransferToNonGRC721Receiver\n\t}\n\n\treturn nil\n}\n\n// Transfers `tokenId` token from `from` to `to`.\nfunc (s *basicNFT) TransferFrom(from, to std.Address, tid TokenID) error {\n\tcaller := std.PrevRealm().Addr()\n\tif !s.isApprovedOrOwner(caller, tid) {\n\t\treturn ErrCallerIsNotOwnerOrApproved\n\t}\n\n\terr := s.transfer(from, to, tid)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\n// Mints `tokenId` and transfers it to `to`.\nfunc (s *basicNFT) Mint(to std.Address, tid TokenID) error {\n\treturn s.mint(to, tid)\n}\n\n// Mints `tokenId` and transfers it to `to`. Also checks that\n// contract recipients are using GRC721 protocol\nfunc (s *basicNFT) SafeMint(to std.Address, tid TokenID) error {\n\terr := s.mint(to, tid)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif !s.checkOnGRC721Received(zeroAddress, to, tid) {\n\t\treturn ErrTransferToNonGRC721Receiver\n\t}\n\n\treturn nil\n}\n\nfunc (s *basicNFT) Burn(tid TokenID) error {\n\towner, err := s.OwnerOf(tid)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\ts.beforeTokenTransfer(owner, zeroAddress, tid, 1)\n\n\ts.tokenApprovals.Remove(string(tid))\n\tbalance, err := s.BalanceOf(owner)\n\tif err != nil {\n\t\treturn err\n\t}\n\tbalance -= 1\n\ts.balances.Set(owner.String(), balance)\n\ts.owners.Remove(string(tid))\n\n\tevent := TransferEvent{owner, zeroAddress, tid}\n\temit(\u0026event)\n\n\ts.afterTokenTransfer(owner, zeroAddress, tid, 1)\n\n\treturn nil\n}\n\n/* Helper methods */\n\n// Helper for SetApprovalForAll()\nfunc (s *basicNFT) setApprovalForAll(owner, operator std.Address, approved bool) error {\n\tif owner == operator {\n\t\treturn ErrApprovalToCurrentOwner\n\t}\n\n\tkey := owner.String() + \":\" + operator.String()\n\ts.operatorApprovals.Set(key, approved)\n\n\tevent := ApprovalForAllEvent{owner, operator, approved}\n\temit(\u0026event)\n\n\treturn nil\n}\n\n// Helper for TransferFrom() and SafeTransferFrom()\nfunc (s *basicNFT) transfer(from, to std.Address, tid TokenID) error {\n\tif err := isValidAddress(from); err != nil {\n\t\treturn ErrInvalidAddress\n\t}\n\tif err := isValidAddress(to); err != nil {\n\t\treturn ErrInvalidAddress\n\t}\n\n\tif from == to {\n\t\treturn ErrCannotTransferToSelf\n\t}\n\n\towner, err := s.OwnerOf(tid)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif owner != from {\n\t\treturn ErrTransferFromIncorrectOwner\n\t}\n\n\ts.beforeTokenTransfer(from, to, tid, 1)\n\n\t// Check that tokenId was not transferred by `beforeTokenTransfer`\n\towner, err = s.OwnerOf(tid)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif owner != from {\n\t\treturn ErrTransferFromIncorrectOwner\n\t}\n\n\ts.tokenApprovals.Remove(string(tid))\n\tfromBalance, err := s.BalanceOf(from)\n\tif err != nil {\n\t\treturn err\n\t}\n\ttoBalance, err := s.BalanceOf(to)\n\tif err != nil {\n\t\treturn err\n\t}\n\tfromBalance -= 1\n\ttoBalance += 1\n\ts.balances.Set(from.String(), fromBalance)\n\ts.balances.Set(to.String(), toBalance)\n\ts.owners.Set(string(tid), to)\n\n\tevent := TransferEvent{from, to, tid}\n\temit(\u0026event)\n\n\ts.afterTokenTransfer(from, to, tid, 1)\n\n\treturn nil\n}\n\n// Helper for Mint() and SafeMint()\nfunc (s *basicNFT) mint(to std.Address, tid TokenID) error {\n\tif err := isValidAddress(to); err != nil {\n\t\treturn err\n\t}\n\n\tif s.exists(tid) {\n\t\treturn ErrTokenIdAlreadyExists\n\t}\n\n\ts.beforeTokenTransfer(zeroAddress, to, tid, 1)\n\n\t// Check that tokenId was not minted by `beforeTokenTransfer`\n\tif s.exists(tid) {\n\t\treturn ErrTokenIdAlreadyExists\n\t}\n\n\ttoBalance, err := s.BalanceOf(to)\n\tif err != nil {\n\t\treturn err\n\t}\n\ttoBalance += 1\n\ts.balances.Set(to.String(), toBalance)\n\ts.owners.Set(string(tid), to)\n\n\tevent := TransferEvent{zeroAddress, to, tid}\n\temit(\u0026event)\n\n\ts.afterTokenTransfer(zeroAddress, to, tid, 1)\n\n\treturn nil\n}\n\nfunc (s *basicNFT) isApprovedOrOwner(addr std.Address, tid TokenID) bool {\n\towner, found := s.owners.Get(string(tid))\n\tif !found {\n\t\treturn false\n\t}\n\n\tif addr == owner.(std.Address) || s.IsApprovedForAll(owner.(std.Address), addr) {\n\t\treturn true\n\t}\n\n\t_, err := s.GetApproved(tid)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\treturn true\n}\n\n// Checks if token id already exists\nfunc (s *basicNFT) exists(tid TokenID) bool {\n\t_, found := s.owners.Get(string(tid))\n\treturn found\n}\n\nfunc (s *basicNFT) beforeTokenTransfer(from, to std.Address, firstTokenId TokenID, batchSize uint64) {\n\t// TODO: Implementation\n}\n\nfunc (s *basicNFT) afterTokenTransfer(from, to std.Address, firstTokenId TokenID, batchSize uint64) {\n\t// TODO: Implementation\n}\n\nfunc (s *basicNFT) checkOnGRC721Received(from, to std.Address, tid TokenID) bool {\n\t// TODO: Implementation\n\treturn true\n}\n\nfunc (s *basicNFT) RenderHome() (str string) {\n\tstr += ufmt.Sprintf(\"# %s ($%s)\\n\\n\", s.name, s.symbol)\n\tstr += ufmt.Sprintf(\"* **Total supply**: %d\\n\", s.TokenCount())\n\tstr += ufmt.Sprintf(\"* **Known accounts**: %d\\n\", s.balances.Size())\n\n\treturn\n}\n"},{"name":"errors.gno","body":"package grc721\n\nimport \"errors\"\n\nvar (\n\tErrInvalidTokenId              = errors.New(\"invalid token id\")\n\tErrInvalidAddress              = errors.New(\"invalid address\")\n\tErrTokenIdNotHasApproved       = errors.New(\"token id not approved for anyone\")\n\tErrApprovalToCurrentOwner      = errors.New(\"approval to current owner\")\n\tErrCallerIsNotOwner            = errors.New(\"caller is not token owner\")\n\tErrCallerNotApprovedForAll     = errors.New(\"caller is not approved for all\")\n\tErrCannotTransferToSelf        = errors.New(\"cannot send transfer to self\")\n\tErrTransferFromIncorrectOwner  = errors.New(\"transfer from incorrect owner\")\n\tErrTransferToNonGRC721Receiver = errors.New(\"transfer to non GRC721Receiver implementer\")\n\tErrCallerIsNotOwnerOrApproved  = errors.New(\"caller is not token owner or approved\")\n\tErrTokenIdAlreadyExists        = errors.New(\"token id already exists\")\n\n\t// ERC721Royalty\n\tErrInvalidRoyaltyPercentage     = errors.New(\"invalid royalty percentage\")\n\tErrInvalidRoyaltyPaymentAddress = errors.New(\"invalid royalty paymentAddress\")\n\tErrCannotCalculateRoyaltyAmount = errors.New(\"cannot calculate royalty amount\")\n)\n"},{"name":"grc721_metadata.gno","body":"package grc721\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n// metadataNFT represents an NFT with metadata extensions.\ntype metadataNFT struct {\n\t*basicNFT            // Embedded basicNFT struct for basic NFT functionality\n\textensions *avl.Tree // AVL tree for storing metadata extensions\n}\n\n// Ensure that metadataNFT implements the IGRC721MetadataOnchain interface.\nvar _ IGRC721MetadataOnchain = (*metadataNFT)(nil)\n\n// NewNFTWithMetadata creates a new basic NFT with metadata extensions.\nfunc NewNFTWithMetadata(name string, symbol string) *metadataNFT {\n\t// Create a new basic NFT\n\tnft := NewBasicNFT(name, symbol)\n\n\t// Return a metadataNFT with basicNFT embedded and an empty AVL tree for extensions\n\treturn \u0026metadataNFT{\n\t\tbasicNFT:   nft,\n\t\textensions: avl.NewTree(),\n\t}\n}\n\n// SetTokenMetadata sets metadata for a given token ID.\nfunc (s *metadataNFT) SetTokenMetadata(tid TokenID, metadata Metadata) error {\n\t// Check if the caller is the owner of the token\n\towner, err := s.basicNFT.OwnerOf(tid)\n\tif err != nil {\n\t\treturn err\n\t}\n\tcaller := std.PrevRealm().Addr()\n\tif caller != owner {\n\t\treturn ErrCallerIsNotOwner\n\t}\n\n\t// Set the metadata for the token ID in the extensions AVL tree\n\ts.extensions.Set(string(tid), metadata)\n\treturn nil\n}\n\n// TokenMetadata retrieves metadata for a given token ID.\nfunc (s *metadataNFT) TokenMetadata(tid TokenID) (Metadata, error) {\n\t// Retrieve metadata from the extensions AVL tree\n\tmetadata, found := s.extensions.Get(string(tid))\n\tif !found {\n\t\treturn Metadata{}, ErrInvalidTokenId\n\t}\n\n\treturn metadata.(Metadata), nil\n}\n\n// mint mints a new token and assigns it to the specified address.\nfunc (s *metadataNFT) mint(to std.Address, tid TokenID) error {\n\t// Check if the address is valid\n\tif err := isValidAddress(to); err != nil {\n\t\treturn err\n\t}\n\n\t// Check if the token ID already exists\n\tif s.basicNFT.exists(tid) {\n\t\treturn ErrTokenIdAlreadyExists\n\t}\n\n\ts.basicNFT.beforeTokenTransfer(zeroAddress, to, tid, 1)\n\n\t// Check if the token ID was minted by beforeTokenTransfer\n\tif s.basicNFT.exists(tid) {\n\t\treturn ErrTokenIdAlreadyExists\n\t}\n\n\t// Increment balance of the recipient address\n\ttoBalance, err := s.basicNFT.BalanceOf(to)\n\tif err != nil {\n\t\treturn err\n\t}\n\ttoBalance += 1\n\ts.basicNFT.balances.Set(to.String(), toBalance)\n\n\t// Set owner of the token ID to the recipient address\n\ts.basicNFT.owners.Set(string(tid), to)\n\n\t// Emit transfer event\n\tevent := TransferEvent{zeroAddress, to, tid}\n\temit(\u0026event)\n\n\ts.basicNFT.afterTokenTransfer(zeroAddress, to, tid, 1)\n\n\treturn nil\n}\n"},{"name":"grc721_royalty.gno","body":"package grc721\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n// royaltyNFT represents a non-fungible token (NFT) with royalty functionality.\ntype royaltyNFT struct {\n\t*metadataNFT                   // Embedding metadataNFT for NFT functionality\n\ttokenRoyaltyInfo     *avl.Tree // AVL tree to store royalty information for each token\n\tmaxRoyaltyPercentage uint64    // maxRoyaltyPercentage represents the maximum royalty percentage that can be charged every sale\n}\n\n// Ensure that royaltyNFT implements the IGRC2981 interface.\nvar _ IGRC2981 = (*royaltyNFT)(nil)\n\n// NewNFTWithRoyalty creates a new royalty NFT with the specified name, symbol, and royalty calculator.\nfunc NewNFTWithRoyalty(name string, symbol string) *royaltyNFT {\n\t// Create a new NFT with metadata\n\tnft := NewNFTWithMetadata(name, symbol)\n\n\treturn \u0026royaltyNFT{\n\t\tmetadataNFT:          nft,\n\t\ttokenRoyaltyInfo:     avl.NewTree(),\n\t\tmaxRoyaltyPercentage: 100,\n\t}\n}\n\n// SetTokenRoyalty sets the royalty information for a specific token ID.\nfunc (r *royaltyNFT) SetTokenRoyalty(tid TokenID, royaltyInfo RoyaltyInfo) error {\n\t// Validate the payment address\n\tif err := isValidAddress(royaltyInfo.PaymentAddress); err != nil {\n\t\treturn ErrInvalidRoyaltyPaymentAddress\n\t}\n\n\t// Check if royalty percentage exceeds maxRoyaltyPercentage\n\tif royaltyInfo.Percentage \u003e r.maxRoyaltyPercentage {\n\t\treturn ErrInvalidRoyaltyPercentage\n\t}\n\n\t// Check if the caller is the owner of the token\n\towner, err := r.metadataNFT.OwnerOf(tid)\n\tif err != nil {\n\t\treturn err\n\t}\n\tcaller := std.PrevRealm().Addr()\n\tif caller != owner {\n\t\treturn ErrCallerIsNotOwner\n\t}\n\n\t// Set royalty information for the token\n\tr.tokenRoyaltyInfo.Set(string(tid), royaltyInfo)\n\n\treturn nil\n}\n\n// RoyaltyInfo returns the royalty information for the given token ID and sale price.\nfunc (r *royaltyNFT) RoyaltyInfo(tid TokenID, salePrice uint64) (std.Address, uint64, error) {\n\t// Retrieve royalty information for the token\n\tval, found := r.tokenRoyaltyInfo.Get(string(tid))\n\tif !found {\n\t\treturn \"\", 0, ErrInvalidTokenId\n\t}\n\n\troyaltyInfo := val.(RoyaltyInfo)\n\n\t// Calculate royalty amount\n\troyaltyAmount, _ := r.calculateRoyaltyAmount(salePrice, royaltyInfo.Percentage)\n\n\treturn royaltyInfo.PaymentAddress, royaltyAmount, nil\n}\n\nfunc (r *royaltyNFT) calculateRoyaltyAmount(salePrice, percentage uint64) (uint64, error) {\n\troyaltyAmount := (salePrice * percentage) / 100\n\treturn royaltyAmount, nil\n}\n"},{"name":"igrc721_metadata.gno","body":"package grc721\n\n// IGRC721CollectionMetadata describes basic information about an NFT collection.\ntype IGRC721CollectionMetadata interface {\n\tName() string   // Name returns the name of the collection.\n\tSymbol() string // Symbol returns the symbol of the collection.\n}\n\n// IGRC721Metadata follows the Ethereum standard\ntype IGRC721Metadata interface {\n\tIGRC721CollectionMetadata\n\tTokenURI(tid TokenID) (string, error) // TokenURI returns the URI of a specific token.\n}\n\n// IGRC721Metadata follows the OpenSea metadata standard\ntype IGRC721MetadataOnchain interface {\n\tIGRC721CollectionMetadata\n\tTokenMetadata(tid TokenID) (Metadata, error)\n}\n\ntype Trait struct {\n\tDisplayType string\n\tTraitType   string\n\tValue       string\n}\n\n// see: https://docs.opensea.io/docs/metadata-standards\ntype Metadata struct {\n\tImage           string  // URL to the image of the item. Can be any type of image (including SVGs, which will be cached into PNGs by OpenSea), IPFS or Arweave URLs or paths. We recommend using a minimum 3000 x 3000 image.\n\tImageData       string  // Raw SVG image data, if you want to generate images on the fly (not recommended). Only use this if you're not including the image parameter.\n\tExternalURL     string  // URL that will appear below the asset's image on OpenSea and will allow users to leave OpenSea and view the item on your site.\n\tDescription     string  // Human-readable description of the item. Markdown is supported.\n\tName            string  // Name of the item.\n\tAttributes      []Trait // Attributes for the item, which will show up on the OpenSea page for the item.\n\tBackgroundColor string  // Background color of the item on OpenSea. Must be a six-character hexadecimal without a pre-pended #\n\tAnimationURL    string  // URL to a multimedia attachment for the item. Supported file extensions: GLTF, GLB, WEBM, MP4, M4V, OGV, OGG, MP3, WAV, OGA, HTML (for rich experiences and interactive NFTs using JavaScript canvas, WebGL, etc.). Scripts and relative paths within the HTML page are now supported. Access to browser extensions is not supported.\n\tYoutubeURL      string  // URL to a YouTube video (only used if animation_url is not provided).\n}\n"},{"name":"igrc721_royalty.gno","body":"package grc721\n\nimport \"std\"\n\n// IGRC2981 follows the Ethereum standard\ntype IGRC2981 interface {\n\t// RoyaltyInfo retrieves royalty information for a tokenID and salePrice.\n\t// It returns the payment address, royalty amount, and an error if any.\n\tRoyaltyInfo(tokenID TokenID, salePrice uint64) (std.Address, uint64, error)\n}\n\n// RoyaltyInfo represents royalty information for a token.\ntype RoyaltyInfo struct {\n\tPaymentAddress std.Address // PaymentAddress is the address where royalty payment should be sent.\n\tPercentage     uint64      // Percentage is the royalty percentage. It indicates the percentage of royalty to be paid for each sale. For example : Percentage = 10 =\u003e 10%\n}\n"},{"name":"igrc721.gno","body":"package grc721\n\nimport \"std\"\n\ntype IGRC721 interface {\n\tBalanceOf(owner std.Address) (uint64, error)\n\tOwnerOf(tid TokenID) (std.Address, error)\n\tSetTokenURI(tid TokenID, tURI TokenURI) (bool, error)\n\tSafeTransferFrom(from, to std.Address, tid TokenID) error\n\tTransferFrom(from, to std.Address, tid TokenID) error\n\tApprove(approved std.Address, tid TokenID) error\n\tSetApprovalForAll(operator std.Address, approved bool) error\n\tGetApproved(tid TokenID) (std.Address, error)\n\tIsApprovedForAll(owner, operator std.Address) bool\n\tMint(to std.Address, tid TokenID) error\n}\n\ntype (\n\tTokenID  string\n\tTokenURI string\n)\n\ntype TransferEvent struct {\n\tFrom    std.Address\n\tTo      std.Address\n\tTokenID TokenID\n}\n\ntype ApprovalEvent struct {\n\tOwner    std.Address\n\tApproved std.Address\n\tTokenID  TokenID\n}\n\ntype ApprovalForAllEvent struct {\n\tOwner    std.Address\n\tOperator std.Address\n\tApproved bool\n}\n"},{"name":"util.gno","body":"package grc721\n\nimport (\n\t\"std\"\n)\n\nvar zeroAddress = std.Address(\"\")\n\nfunc isValidAddress(addr std.Address) error {\n\tif !addr.IsValid() {\n\t\treturn ErrInvalidAddress\n\t}\n\treturn nil\n}\n\nfunc emit(event interface{}) {\n\t// TODO: setup a pubsub system here?\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqD4AqUY/VAPgrwGhq7e9Px4Pj81GRDZYwRvm+A69599"},"signature":"BgRUVKnz9QTJGmXEp11R19Dj1UIm65qzL69eVzgQRs9XzhPcJXZfbqxFfYNTe1QRGEaBN6sLzXAKDUYdaW9V7A=="}],"memo":"Deployed through play.gno.land"},"blockNum":"1325930"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","send":"","pkg_path":"gno.land/r/gnoswap/v2/community_pool","func":"TransferToken","args":["gno.land/r/gnoswap/v2/gns","g16a7etgm9z2r653ucl36rj0l2yqcxgrz2jyegzx",""]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"C3bB7ybKpIy1QdTXWJTxrCloCDNYqgg//NAaWtzc3y1BpNqffain1amf1JdONKLu55xzokmHzkJzhU3fhTnu9Q=="}],"memo":""},"blockNum":"1326787"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","send":"","pkg_path":"gno.land/r/gnoswap/v2/community_pool","func":"TransferToken","args":["gno.land/r/gnoswap/v2/gns","g16a7etgm9z2r653ucl36rj0l2yqcxgrz2jyegzx",""]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"V3dvtlblytSxJtCaTc+/WniyVApjgH3VRewvu8znbzoMdu7kwvSkiEenpYiuINZkKIuASw16EwUwnRz93K+u1w=="}],"memo":""},"blockNum":"1326800"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","send":"","pkg_path":"gno.land/r/gnoswap/v2/community_pool","func":"TransferToken","args":["gno.land/r/gnoswap/v2/gns","g16a7etgm9z2r653ucl36rj0l2yqcxgrz2jyegzx","10"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"ou8eDFc0uWPdC45bFakkkhujrWdYnC+05CDgS6/eUogJSPHB8yujNm0uSnvMHKIJWDcAY817Y+/IwnnqLioGXA=="}],"memo":""},"blockNum":"1326810"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","send":"","pkg_path":"gno.land/r/gnoswap/v2/emission","func":"ChangeDistributionPct","args":["gno.land/r/gnoswap/v2/gns","g16a7etgm9z2r653ucl36rj0l2yqcxgrz2jyegzx","10"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AoTh14aoDz7iGb+UgHIlC5BuwrTQhiClW4UClIZSxdix"},"signature":"Xvu4BQaUB56DT9kVhiD8+nz4Elq1xF5HU+9rxhiDS6ZBod4Jp/lLFOcZw9kE+4ATTv+wfL4g7jLez/CXr3EdsA=="}],"memo":""},"blockNum":"1326863"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16xjzc2v2w9jjaxx0rq9drk46uf8668lcj6h9js","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g16xjzc2v2w9jjaxx0rq9drk46uf8668lcj6h9js","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g16xjzc2v2w9jjaxx0rq9drk46uf8668lcj6h9js","send":"","pkg_path":"gno.land/r/onbloc/usdc","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g16xjzc2v2w9jjaxx0rq9drk46uf8668lcj6h9js","send":"300000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/onbloc/usdc","300000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/onbloc/baz:3000*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/usdc:3000","100","302588"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkV8iBO1O0beH6awpjq1LfePULXIHW9N7+SyaXXeE9nc"},"signature":"hzKVKwPr5N0Xo2fH6Pbe1qb3PoHG6oyurysQaywzopUuUHeQH6iUlGknZIPBtZF1xuQ8UqZJJJ1rFxSC1PJflw=="}],"memo":""},"blockNum":"1329111"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16xjzc2v2w9jjaxx0rq9drk46uf8668lcj6h9js","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g16xjzc2v2w9jjaxx0rq9drk46uf8668lcj6h9js","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g16xjzc2v2w9jjaxx0rq9drk46uf8668lcj6h9js","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g16xjzc2v2w9jjaxx0rq9drk46uf8668lcj6h9js","send":"745657ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/gnoswap/v2/gns","746119","EXACT_OUT","gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000","100","745657"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkV8iBO1O0beH6awpjq1LfePULXIHW9N7+SyaXXeE9nc"},"signature":"EZR9hZR8yIfFN2Cn3YAviWqtjgIUCOlh5fcaCIOo7WgV6KOdZmaZPpPruWboy8Eu+TI+J3IXgUrZ5JjdC8ooPw=="}],"memo":""},"blockNum":"1329124"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16xjzc2v2w9jjaxx0rq9drk46uf8668lcj6h9js","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","143"]},{"@type":"/vm.m_call","caller":"g16xjzc2v2w9jjaxx0rq9drk46uf8668lcj6h9js","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["143"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkV8iBO1O0beH6awpjq1LfePULXIHW9N7+SyaXXeE9nc"},"signature":"DbS87p89YS+oCoFm6gA5sLwX9hYelLGSWKs61MjxI45gtw/s23Gp52nJ+z/bk/527C3V/cZKwM8Iqlc8VGxgeg=="}],"memo":""},"blockNum":"1329135"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16xjzc2v2w9jjaxx0rq9drk46uf8668lcj6h9js","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","300000"]},{"@type":"/vm.m_call","caller":"g16xjzc2v2w9jjaxx0rq9drk46uf8668lcj6h9js","send":"","pkg_path":"gno.land/r/onbloc/usdc","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","304594"]},{"@type":"/vm.m_call","caller":"g16xjzc2v2w9jjaxx0rq9drk46uf8668lcj6h9js","send":"300000ugnot","pkg_path":"gno.land/r/gnoswap/v2/position","func":"IncreaseLiquidity","args":["160","300000","304594","298500","303071","9999999999"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkV8iBO1O0beH6awpjq1LfePULXIHW9N7+SyaXXeE9nc"},"signature":"ACQZiIQEa0ozoDD98iyopKR7UO3fovXfbZDRfI5+SH9sfI3eQ9BTrC2lOlDNPudhbt3yjTamIPbGCL6KcwrE4A=="}],"memo":""},"blockNum":"1329143"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"TwGcwusOGl98RnSR7wly2TCDTxyXk6Fggk/LiBPE8Glr3YFV11EZmW/PzUHI7Kps4Gz5kI46ZF5L5EQiIvWllQ=="}],"memo":""},"blockNum":"1344021"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"2000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/onbloc/foo","2000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/onbloc/usdc:3000*POOL*gno.land/r/onbloc/usdc:gno.land/r/onbloc/obl:3000*POOL*gno.land/r/onbloc/obl:gno.land/r/onbloc/foo:3000","100","4377627"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FMFdfGZx7JLW/+14ul69Otey/s/yAU3FOUl7D5O9kL"},"signature":"Z0toaFySG6wsx6q+kRLmsCEwFCgfUXg/Hs/XPGVAnDgC0pHkrEsG5QGQGdqk/ca4o1pmRvk4T9IlbWG8vRalcg=="}],"memo":""},"blockNum":"1344164"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/onbloc/obl","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"2000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/onbloc/obl","2000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/onbloc/baz:3000*POOL*gno.land/r/onbloc/baz:gno.land/r/onbloc/usdc:3000*POOL*gno.land/r/onbloc/usdc:gno.land/r/onbloc/obl:3000","100","4804573"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FMFdfGZx7JLW/+14ul69Otey/s/yAU3FOUl7D5O9kL"},"signature":"x6ZOo/xbbY8lq6BUYA8Ij65NMZWFwAiyCWLTI3hj6CtaPmiiacGSjjqGp/BUEfS57oaaeGSZSBj4ob3egUvRcA=="}],"memo":""},"blockNum":"1344185"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","4399627"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/onbloc/obl","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","4801156"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"Mint","args":["gno.land/r/onbloc/foo","gno.land/r/onbloc/obl","3000","-6060","7800","4399627","4801156","4377629","4777150","7282571140","g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"SetTokenURILast","args":null}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FMFdfGZx7JLW/+14ul69Otey/s/yAU3FOUl7D5O9kL"},"signature":"ZlsJfU5gonRrI5dzu8eLRlcU+HWAMQUvnDucLwAWJCcdS+I32VCJsx2u8aDsZVhBF/day/HBtyo9OwHpWCgDdA=="}],"memo":""},"blockNum":"1344204"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"2000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/onbloc/foo","2000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/onbloc/usdc:3000*POOL*gno.land/r/onbloc/usdc:gno.land/r/onbloc/obl:3000*POOL*gno.land/r/onbloc/obl:gno.land/r/onbloc/foo:3000","100","4377617"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FMFdfGZx7JLW/+14ul69Otey/s/yAU3FOUl7D5O9kL"},"signature":"IYt1NqTxxmSrW0aYsVs3mJGm8aVvofLC+4nQ8XQN/FEckA/XjK6uE01LSKOIwckLqhdiQqincZPbTAWL1f59Aw=="}],"memo":""},"blockNum":"1344236"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","2023924"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","4400237"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1vsm68lq9cpn7x507s6gh59anmx86kxfhzyszu2","2023924"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"2023924ugnot","pkg_path":"gno.land/r/gnoswap/v2/position","func":"Mint","args":["gnot","gno.land/r/onbloc/foo","3000","840","14700","2023924","4400237","2013804","4378236","7282571140","g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"SetTokenURILast","args":null}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FMFdfGZx7JLW/+14ul69Otey/s/yAU3FOUl7D5O9kL"},"signature":"ROldKys5+eycw/aHGOUnKZ1bDuXB5eCv88jcfbDBqpVm38I9nGxgle5Uximt6kucPWZgynrTJMj8dz79SjYMDA=="}],"memo":""},"blockNum":"1344252"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","164"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["164"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FMFdfGZx7JLW/+14ul69Otey/s/yAU3FOUl7D5O9kL"},"signature":"pBF/+wJwh9zQ9bWPkRDeARPpah+HpBQ70eMkwvP0bdoh0JJNLd4JH1MqBAfPGDfQZDPGaq5P0nOC3CXWkgCpRQ=="}],"memo":""},"blockNum":"1344347"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","164"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["164"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FMFdfGZx7JLW/+14ul69Otey/s/yAU3FOUl7D5O9kL"},"signature":"XULlBgQ9olGT6naouUFoN9an74R73ly8YL1DfTjzcAQXghTmHe1DL5hAucHfsAIwLnYR3xat1IS9n6mULaktng=="}],"memo":""},"blockNum":"1344362"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","164"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["164"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FMFdfGZx7JLW/+14ul69Otey/s/yAU3FOUl7D5O9kL"},"signature":"9kjj0vWKp8SISlXG42uVYUrRAe1sBcHj2gGaNao4M1YDbA0E8MoFpjRdv19MF4ChVtciByRqP+ETXuR45rrsLg=="}],"memo":""},"blockNum":"1344390"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","164"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["164"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FMFdfGZx7JLW/+14ul69Otey/s/yAU3FOUl7D5O9kL"},"signature":"8t1nYcHtvb6FCXtx02nopFN1bNpv9AceGbmz2tKK7e0JYUxWOWlxatWnWPfMSHnLsVbNqLRbhYqwzkBqztMqhA=="}],"memo":""},"blockNum":"1344399"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","164"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["164"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FMFdfGZx7JLW/+14ul69Otey/s/yAU3FOUl7D5O9kL"},"signature":"fMF7fc3AIWeKCtj69stknDqSIc221/AkU/bpJdRN6u9Mpvk/XQPGKIErSaq+dn7KnYCzfugQzRyNXRA/6Tdl/g=="}],"memo":""},"blockNum":"1344414"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","163"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["163"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FMFdfGZx7JLW/+14ul69Otey/s/yAU3FOUl7D5O9kL"},"signature":"TehsaMQAM/cRJa3tdjNFe6A981sOhOB5X00mcQVTGFUaS40h7+RZdogwLihxvxQ5ygA0jc+bP0ypHjl2IMiAeQ=="}],"memo":""},"blockNum":"1344429"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","163"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["163"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FMFdfGZx7JLW/+14ul69Otey/s/yAU3FOUl7D5O9kL"},"signature":"33USedj4NEjMMqEKa3/49ucN5tNvokx8RFQedr/tPiM6xnTOH/R49Qa1fajX3UxpY+ifeZ3QvpK8fflVjdFUPQ=="}],"memo":""},"blockNum":"1344456"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","164"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["164"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FMFdfGZx7JLW/+14ul69Otey/s/yAU3FOUl7D5O9kL"},"signature":"f1LGSxyN9rPF0RXsFQKML+F0ZbAt6qd1BBbL/J9oV9Ex6WTvgcHytVaxcPqkD9zxhk4BaZfkSA3YJcox3u7J5g=="}],"memo":""},"blockNum":"1344526"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","9223372036854775807"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","9223372036854775807"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1vsm68lq9cpn7x507s6gh59anmx86kxfhzyszu2","9223372036854775807"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"DecreaseLiquidity","args":["164","100","0","0","9999999999","true"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FMFdfGZx7JLW/+14ul69Otey/s/yAU3FOUl7D5O9kL"},"signature":"xEAhi57E21bFdWLFRtsel77Y4s/Ah/5hpz4ktHNWpI4Jl70SC0jiKTJ+0yIWgfZqGLz2hxDZzKwUgArpIB+ulg=="}],"memo":""},"blockNum":"1344568"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","9223372036854775807"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/onbloc/obl","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","9223372036854775807"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"DecreaseLiquidity","args":["163","100","0","0","9999999999","true"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FMFdfGZx7JLW/+14ul69Otey/s/yAU3FOUl7D5O9kL"},"signature":"/Uy6a6Zzsv1o9GLWPSyGVzv6iDvM9YwsZDso61l6YH0LpMIVyeSn0aRmhClE/AodrujskjT/UYaMmMSxCywu2w=="}],"memo":""},"blockNum":"1344595"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/onbloc/qux","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gno.land/r/onbloc/foo","gno.land/r/onbloc/qux","8790000","EXACT_IN","gno.land/r/onbloc/foo:gno.land/r/demo/wugnot:3000*POOL*gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000*POOL*gno.land/r/gnoswap/v2/gns:gno.land/r/onbloc/qux:3000","100","4020210"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FMFdfGZx7JLW/+14ul69Otey/s/yAU3FOUl7D5O9kL"},"signature":"0c6Any1PvY0Qhcz2fL2EV2+lS91Qtq7hckRyXjJWRgdayG+1csksrgZy4C9S8LlHHg3UUIRwBn41mwREgwa3SA=="}],"memo":""},"blockNum":"1344624"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/onbloc/obl","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/onbloc/obl","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1um7vrfzw8pn42yc9y92q54z6hhmuveu845m56g","send":"","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gno.land/r/onbloc/obl","gno.land/r/demo/wugnot","4830000","EXACT_IN","gno.land/r/onbloc/obl:gno.land/r/onbloc/foo:3000*POOL*gno.land/r/onbloc/foo:gno.land/r/demo/wugnot:3000","100","2010408"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FMFdfGZx7JLW/+14ul69Otey/s/yAU3FOUl7D5O9kL"},"signature":"28QA9l5dFvxYVA1pK8Cmy3cGt1nonERwCnNUKa9KK4A8Rc7fWG7hjy0sYoa9DkW0yKu60xVTFJ3WZRNx7zCpaw=="}],"memo":""},"blockNum":"1344643"}
