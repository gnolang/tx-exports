{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1nwpqdmduz758qxekfw29qarq5fr9awkkvwe6jn","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"UZ4rioesesU1igor1r9lOjZe5mGwTCIdKIZa2/MGQ8cN4bciFS7PZ6I1nRWMQVyLY7rjc+3UacmKG+y21SyiHA=="}],"memo":""},"blockNum":"2427395"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"name":"ddddd","path":"gno.land/r/iamtest1/ddddd","files":[{"name":"package.gno","body":"package ddddd\n\n\nfunc Echo(x string) string {\n   return x\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"sni7EdlFhKgQBomRZN1KxF+lJIeBJhiC5AuWAjAT9fo+Nz2RwaErTRkFc2LYC+1xJ8qV8VzkBBbU2XTrco4Gjw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"2433085"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g17v98ju6528h0v6nz0kat09wje7ttuc656nahy5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"KPISk7o9ybGR0AB2HfDXeLkIfO3jaZ4VQgKi9myxmYYVxicTwmEitLmiOmkGrxvkvaFsJ/ysGMJfsADh3ezgEA=="}],"memo":""},"blockNum":"2437159"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/ecodevx/dao/pre1","func":"AdvanceProposals","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7MWSLkjf+z/CYfMh6KVHEaHLDWpnfGBRDqFO81j1FRN"},"signature":"C6sgm40tLot8ThipHchnHyQOoXJFHhfD1wYL0yCOaA566xtNryfpCS3onJEeNZNQghu5O3LkCzWh8uqF4gfCeQ=="}],"memo":"Called through gno.studio"},"blockNum":"2440814"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/ecodevx/tutorials/pre1","func":"Publish","args":["learn-gno-in-5-minutes","---\n{\n  \"title\": \"Want to Learn Gno in 5 minutes?\",\n  \"slug\": \"learn-gno-in-5\",\n  \"tags\": [\"gnoland\", \"gno\"],\n  \"level\": \"Beginner\",\n  \"author\": \"leohhhn\",\n  \"authorAddress\": \"g1lavlav7zwsjqlzzl3qdl3nl242qtf638vnhdjh\",\n  \"summary\": \"If you are a Golang developer looking to get into Gno, this is the blog post for you.\"\n}\n---\n\n## Overview\n\nIf you are a Golang developer looking to get into Gno, this is the blog post for \nyou. No matter your experience level, after completing this tutorial, you will get \nthe gist of what Gno is and how you can use it to develop your own apps. You will\nlearn the basics and some ins and outs of creating a project using Gno on top of \ngno.land.\n\n## What is Gno?\n\nGno is an interpretation of the widely used Go (Golang) programming language\ncreated by Cosmos co-founder Jae Kwon to mark a new era in smart\ncontracting. Syntax-wise, Gno is ~99% identical to Go, allowing programmers with\nGo experience to start coding blockchain apps right away, with a minimal learning \ncurve.\n\nGno runs in a custom virtual machine called the GnoVM. It is possible to run the\nGnoVM in two modes:\n- as a standalone binary,\n- contained in a gno.land blockchain node.\n\nVisit the gno.land [homepage](https://gno.land), as well as the [Official\nGno Documentation](https://docs.gno.land) to learn more.\n\nLet's get started with Gno development.\n\n## Installing necessary tools \u0026 binaries\n\nBefore installing any Gno-specific tooling, make sure the following\nprerequisites are present on your machine:\n\n- **Git**\n- **`make` (for running Makefiles)**\n- **Go 1.21+**\n- **Go Environment Setup**:\n    - Make sure `$GOPATH` is well-defined, and `$GOPATH/bin` is added to your\n      `$PATH` variable.\n\nAfter all prerequisites are present, you can continue with the installation.\nAll tools needed for Gno development can be found in the\n[Gno monorepo](https://github.com/gnolang/gno).\n\nFirst, clone the monorepo and `cd` into it:\n\n```bash\ngit clone git@github.com:gnolang/gno.git\ncd gno\n```\n\nNext, install all the necessary binaries with the following command:\n\n```bash\nmake install\n```\n\nThis will install three binaries required to continue:\n\n- `gnodev` - an all-in-one tool for simple Gno development,\n- `gno` - the GnoVM binary for running \u0026 testing the Gno code,\n- `gnokey` - binary used for keypair management.\n\n## Creating a new Gno project\n\nGno mimics Go in most areas - including setting up a new project. Let's create\na simple counter application. In an empty folder, run the following:\n\n```bash\ngno mod init gno.land/r/\u003cyour_username\u003e/counter\n```\n\nThis will initiate a `gno.mod` file with an appropriate path for your app. \nRead more about Gno package paths [here](https://docs.gno.land/concepts/namespaces).\n\nFollowing this, you can create a `counter.gno` file which will be the place for your\nGno code. If you already know Go, Gno code will come to you very naturally.\n\n```bash\ntouch counter.gno\n```\n\nIn the newly created file, start by declaring your package name:\n\n```go\npackage counter\n```\n\nAfter this, we can declare a global variable `counter` of type `int`.\n\n```go\nvar counter int\n```\n\nThis is where Gno starts to differ from Go - variables declared in the global\nscope get auto-persisted. What does this mean?\n\n**Gno is a transaction-based language** - this means that each call to a Gno app\nhappens within a transactional context, ensuring atomicity and consistency. Because\nof this, developers can focus on the business logic of their apps instead of\nhaving to deal with the intricacies of application state management and persistence.\n\nMoving forward, we can declare an `Increment()` function that will increment our\ncounter variable by `1`.\n\n```go\nfunc Increment() {\n\tcounter++\n}\n```\n\nFinally, we can define a `Render()` function - a Gno-specific concept allowing \ncallers to view the aforementioned persisted state of the app.\n\n```go\nfunc Render(_ string) string {\n\treturn \"Current counter value: \" + strconv.Itoa(counter)\n}\n```\n\nThe `Render()` function is meant to return a correctly formatted Markdown string.\nWe need to import `strconv`, which is part of the Gno standard library, to convert\nthe `counter` value to a string. Furthermore, a valid `Render()` function must\ntake in a string parameter, which in our case is not used.\n\n### Testing in Gno\n\nWe can test our counter app exactly the same way we would in Go. First, create a\n`counter_test.gno` file:\n\n```bash\ntouch counter_test.gno\n```\n\nDeclare the counter package name, and write a function testing the `Increment()`\nfunctionality in the Counter package:\n\n```go\npackage counter\n\nimport (\n\t\"testing\"\n)\n\nfunc TestIncrement(t*testing.T) {\n\tIncrement() // counter should be 1 after call\n\t\n\t// counter is a package-level variable which is why it is available in this context\n\tif counter != 1 {\n\t\tt.Fatalf(\"expected counter value to be 1, got %d\", counter)\n\t}   \n}\n```\n\nTo run the tests, use the `gno test` command in the package folder:\n\n```bash\ngno test . -v\n```\n\nIf all went well, you will get the following output:\n\n```bash\n=== RUN   TestIncrement\n--- PASS: TestIncrement (0.00s)\nok      .       0.71s\n```\n\nCongratulations! You've just written \u0026 tested your first Gno app. Next step -\ndeploying the app.\n\n## Deploying a Gno app\n\nApart from running them locally, Gno apps can be deployed and ran on blockchain\nnetworks. This is another fundamental difference between Go and Gno.\n\nDevelopers can choose to deploy to a local or remote blockchain network\ndepending on the development stage of their app. Let's discuss how to set up a\nlocal development environment for Gno.\n\n### Running a local dev environment\n\nThe fastest and most convenient way to run a local development environment for\nGno is by using `gnodev`. It is a binary containing multiple tools that make up\neverything you need to write Gno apps:\n- a local gno.land node running in the background,\n- a `gnoweb` server allowing you to immediately see the state of your app using\n  the aforementioned `Render()` function.\n\nRead more about `gnodev` [here](https://docs.gno.land/gno-tooling/cli/gno-tooling-gnodev).\n\nTo start `gnodev`, simply give it the path to where your `.gno` and `gno.mod` files\nare:\n\n```bash\ngnodev \u003cyour_path\u003e\n```\n\nStarting `gnodev` will leave you with the following terminal output:\n\n```bash\n❯ gnodev .\nNode        ┃ I pkgs loaded path=[\u003cyour_working_dir\u003e \u003cyour_gnodev_installation_path\u003e]\nNode        ┃ I node started lisn=tcp://127.0.0.1:36657 addr=g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 chainID=dev\nGnoWeb      ┃ I gnoweb started lisn=http://127.0.0.1:8888\n--- READY   ┃ I for commands and help, press `h`\n```\n\nBy giving `gnodev` the path to your counter application, you have automatically\nloaded the code into the built-in node. `gnodev` also watches your development\ndirectory, so that it can do an automatic reload of the code when needed.\n\nYou can view the output of the `Render` function in your app by visiting the\n`gnoweb` address listed above, and adding to it the path of your app.\nIn case of the local node contained within `gnodev`, `gno.land/` is replaced by\n`http://127.0.0.1:8888`, so the `Render` of your app will be displayed on the\nfollowing link:\n\n```\nhttp://127.0.0.1:8888/r/\u003cyour_username\u003e/counter\n```\n\n### Setting up a Gno keypair\n\nTo interact with any `gno.land` network, including the local node contained within\n`gnodev`, users must have a public-private keypair. Keypairs allow users to sign\ntransactions and broadcast them to the node. Keypairs can also be assigned a\nbalance of units specific to the network they are interacting with. These units\nare used to pay for computational power on the network. This serves many purposes,\namong which is to stop DDoS attacks on blockchain networks.\n\nBy running a mathematical derivation algorithm on a 12 or 24 word phrase, a\npublic-private keypair is generated. This phrase serves as the \"master password\"\nfor the keypair. For more info on keypairs, look into `BIP39` and `HD Wallets`.\n\nTo generate a keypair, we can use the `gnokey` tool. `gnokey` provides users with\na randomly generated phrase (and thus keypair) to ensure privacy \u0026\nsecurity.\n\nTo start, run the following command:\n\n```bash\ngnokey add MyKeypair\n```\n\n`gnokey` will ask for a password to encrypt the keypair on your local disk. After\nthis, it will show you the phrase that your keypair will be derived from.\nMake sure you write this phrase down, as it is the only way you can recover your\nkeys in case of losing them.\n\nTo check if you've successfully added the keypair, run `gnokey list`:\n\n```bash\n❯ gnokey list           \n0. MyKeypair (local) - addr: g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 pub: gpub1pgfj7ard9eg82cjtv4u4xetrwqer2dntxyfzxz3pq0skzdkmzu0r9h6gny6eg8c9dc303xrrudee6z4he4y7cs5rnjwmyf40yaj, path: \u003cnil\u003e\n```\n\n### Interacting with your Gno app\n\nApart from testing locally, we can manually call our app's `Render()` and\n`Increment()` functions using the `gnokey maketx call` command to check if\nit's working correctly:\n\n```bash\n# Calling Render to check current value of counter\ngnokey maketx call \\\n--pkgpath \"gno.land/r/demo/counter\" \\\n--func \"Render\" \\\n--args \"\"\n--gas-fee 10000000ugnot \\\n--gas-wanted 800000 \\\n--broadcast  \\\n--remote localhost:26657 \\\nMyKeypair\n\n# Output:\n# (\"Current counter value: 0\" string)\n# OK!\n# GAS WANTED: 800000\n# GAS USED:   87405\n```\n\nLet's break down all the options from the `gnokey` command:\n\n1. `maketx` - create a transaction and sign it\n2. `call` - type of message to send to the chain, in this case\n   [Call](https://docs.gno.land/gno-tooling/cli/gno-tooling-gnokey/#call)\n3. `--pkgpath` - path to where the app is found on-chain, defined in the `gno.mod`\n   file\n4. `--func` - name of the function to be called\n5. `--gas-wanted` - the upper limit of gas for the execution of the transaction\n6. `--gas-fee` - the amount of network currency, in this case `ugnot`s, the caller\n   is willing to pay\n7. `--broadcast` - broadcast the transaction on-chain\n8. `--chain-id` - id of the chain to connect to, in our case the local node, `dev`\n9. `--remote` - specify node endpoint, in our case it's our local node\n10. `MyKeypair` - the keypair to use for the transaction\n\nCalling `Increment()`:\n\n```bash\ngnokey maketx call \\\n--pkgpath \"gno.land/r/demo/counter\" \\\n--func \"Increment\" \\\n--gas-fee 10000000ugnot \\\n--gas-wanted 800000 \\\n--broadcast  \\\n--remote localhost:26657 \\\ntest1\n```\n\nFinally, calling `Render()` again, we see the updated value:\n\n```bash\ngnokey maketx call \\\n--pkgpath \"gno.land/r/demo/counter\" \\\n--func \"Render\" \\   \n--args \"\" \\              \n--gas-fee 10000000ugnot \\\n--gas-wanted 800000 \\\n--broadcast  \\            \n--remote localhost:26657 \\\nMyKeypair\n\n# Output\n# (\"Current counter value: 1\" string)\n# OK!\n# GAS WANTED: 800000\n# GAS USED:   87411\n```\nCongratulations! You have successfully written and tested your first Gno app.\n\n## Gno code organization\n\nGno code is meant to be reusable and transparent. This is why a recommended way\nto organize Gno code exists. Code is meant to be organized in two main categories:\n- `Packages` - stateless libraries meant to be reused\n- `Realms` - instances of Gno apps, such as the Counter app detailed above\n\nPackages can be deployed under `gno.land/p/demo/`, while realms can be deployed\nunder `gno.land/r/`. You can view *and import* packages with this path. Try\nbrowsing for this link: [`gno.land/p/demo/blog`](https://gno.land/p/demo/blog).\n\nBelow are some commonly used packages.\n\n### Package `avl`\n\nDeployed under `gno.land/p/demo/avl`, the AVL package provides a tree structure\nfor storing data. Currently, the AVL package is used to replace the functionality\nof the native `map` in Gno, as maps are not fully deterministic and thus do not\nwork as expected in the language. Here is how using the AVL package from your\nrealm might look like:\n\n```go\npackage myrealm\n\nimport \"gno.land/p/demo/avl\"\n\n// This AVL tree will be persisted after transaction calls\nvar tree *avl.Tree\n\n// Save simply exposes the avl.Set function to the user\nfunc Save(key string, value int) {\n  // tree.Set takes in a string key, and a value that can be of any type\n  tree.Set(key, value)\n}\n\n// Get gets back a value at a specific key, if it exists\nfunc Get(key string) int {\n  // tree.Get returns the value at given key in its raw form, \n  // and a bool to signify the existence of the key-value pair\n  rawValue, exists := tree.Get(key)\n  if !exists {\n    panic(\"value at given key does not exist\")\n  }\n  // rawValue needs to be converted into the proper type before returning it\n  return rawValue.(int)\n}\n```\n\n### Package `seqid`\n\nDeployed under `gno.land/p/demo/seqid`, the `seqid` package provides a simple\nway to have sequential IDs in Gno. Its encoding scheme is based on the `cford32`\npackage. From [`seqid.gno`](https://gno.land/p/demo/seqid/seqid.gno):\n\n```go\n// Package seqid provides a simple way to have sequential IDs which will be\n// ordered correctly when inserted in an AVL tree.\n//\n// Sample usage:\n//\n//\tvar id seqid.ID\n//\tvar users avl.Tree\n//\n//\tfunc NewUser() {\n//\t\tusers.Set(id.Next().String(), \u0026User{ ... })\n//\t}\npackage seqid\n```\n\nYou can view more package (and realm) examples\n[here](https://github.com/gnolang/gno/tree/master/examples).\n\n## Blockchain-specific functionality\n\nGno is designed to follow the syntax of Go. There are very few exceptions in how\nGno differs from Go syntactically, which is why this section will outline the\nmajor differences and added features. For a full list of Go-Gno compatability,\ncheck out the [compatability page](https://docs.gno.land/reference/go-gno-compatibility)\nin the official documentation.\n\nThis section also concerns the blockchain aspect of Gno. It will introduce\nblockchain concepts that are commonly used in Gno apps.\n\nWhen Gno code runs on a blockchain network, it has access to the environment variables of\nthat network, such as the block height, block timestamp, current caller, amount\nof native currency sent along the call, etc. This context is fundamental for\nGno app development and can be accessed through functions found in the special\n`std` package.\n\nBelow you can find a [\"Learn X in Y\"-styled](https://learnxinyminutes.com/) \nreport. Since Gno is designed to be as close as possible to Go syntax, we will \nnot cover all bits and pieces of its syntax, but only the most prominent ones, \nand the ones that are specific to the language.\n\n```go\n// Single line comment\n/* Multi-\nline comment */\n\n// A package clause starts every Gno source file.\n// Name of the package needs to match the name found in the `gno.mod` file.\npackage example\n\n// Import declaration declares library packages referenced in this file.\nimport (\n  // Gno, like Go, has built-in importable standard libraries.\n  // View the full compatibility list at https://docs.gno.land/reference/go-gno-compatibility\n  \"encoding/binary\"\n  // std is a special Gno standard library that contains\n  // blockchain-specific functionality.\n  \"std\"\n\n  // Apart from built-in libraries, you can import code found on the chain.\n  \"gno.land/p/demo/avl\"\n  // Gno currently does not support reflection.\n  // This is why fmt is only partially supported, in the micro-fmt package:\n  \"gno.land/p/demo/ufmt\"\n)\n\n// In Gno, global variables are auto-persisted after each call (transaction)\nvar (\n  admin std.Address // std.Address represents the address of all things on-chain\n)\n\n// The init function is special. It is like a constructor - it is run only once\n// in the lifetime of a Gno package/realm, upon its deployment.\n// It is usually used to set initial values, such as admin addresses\nfunc init() {\n  // PrevRealm() retrieves the previous entity in the call stack.\n  // When it is used within the init() function, it represents\n  // the deployer of the code.\n  admin = std.PrevRealm().Addr()\n}\n\n// Render returns a correctly-formatted Markdown string, allowing developers\n// to have a default way to render the state of their apps.\n// Render functions take in a string path which allows for flexibility.\nfunc Render(path string) string {\n  if path == \"\" {\n    return \"Hello 世界!\"\n  }\n\n  return ufmt.Sprintf(\"Hello %s!\", path)\n}\n\n// Main, contrary to Go, is not special. It does not have any special use cases,\n// and its name signifies nothing in the Gno runtime.\nfunc main() {\n  // Get block number at time of call\n  var height int64 = std.GetHeight()\n  // Get current chain ID\n  var chainId string = std.GetChainID()\n  // Get the previous caller - represented by a Gno public key\n  var caller std.Address = std.PrevRealm().Addr()\n  // Get the address of entry point of the call\n  var entryPoint std.Address = std.GetOrigPkgAddr()\n  // Get amount of currency sent with call\n  var currencySent int64 = std.GetOrigSend()\n  // Get the current realm (smart contract) instance\n  var currentRealm std.Realm = std.CurrentRealm()\n  // Get the current realm path\n  // Shorthand for std.CurrentRealm().PkgPath()\n  var currentRealmPath string = std.CurrentRealmPath()\n\n  // Banker - allows for manipulation of native currency\n  // Readonly banker\n  var readonlyBanker std.Banker = std.GetBanker(std.BankerTypeReadonly)\n  // Banker that can manipulate only currency sent with the calling tx\n  var origSendBanker std.Banker = std.GetBanker(std.BankerTypeOrigSend)\n  // Banker with full access to the app's (realm's) currency\n  var realmSendBanker std.Banker = std.GetBanker(std.BankerTypeRealmSend)\n  // Banker that can issue new coins\n  var realmIssueBanker std.Banker = std.GetBanker(std.BankerTypeRealmIssue)\n  // View full banker API on\n  // https://docs.gno.land/reference/standard-library/std/banker\n\n  // Coin \u0026 Coins - native Gno struct defining currency\n  // Make a new coin instance, of 100 coins of denomination lxy\n  var lxyCoin std.Coin = std.NewCoin(\"100\", \"lxy\")\n  // Make a different coin instance, of 100 coins of denomination lyx\n  var lyxCoin std.Coin = std.NewCoin(\"100\", \"lyx\")\n  // Make a set of coins\n  var coinSet std.Coins = std.NewCoins(lxyCoin)\n  // Check amount of specific coin in set\n  coinSet.AmountOf(\"lxy\") // 100\n  // AmountOf will return 0 if coin does not exist in set\n  coinSet.AmountOf(\"lyx\") // 0\n  // Add a coin to a set\n  coinSet.Add(lyx)\n  // View full coins API on\n  // https://docs.gno.land/reference/standard-library/std/coin \u0026\n  // https://docs.gno.land/reference/standard-library/std/coins\n\n  // Send coins using Banker\n  // Ex: send coins from caller to different address\n  from := caller\n  to := \"g1l9aypkr8xfvs82zeux486ddzec88ty69lue9de\"\n  // Make sure to use the appropriate banker for your intended purpose\n  banker.SendCoins(from, to, coinSet)\n\n  // Get coins owned by specific address\n  ownedCoins := banker.GetCoins(caller)\n}\n```\n\n## Additional resources\n\nFor more information, view the following resources:\n\n- [gno.land home page](https://gno.land)\n- [Official Documentation](https://docs.gno.land)\n- [gno-by-example](https://gno-by-example.com/)\n- [Gno monorepo](https://github.com/gnolang/gno)\n\nIf you're using VS Code for development, check out\nthe VS Code [Gno plugin](https://marketplace.visualstudio.com/items?itemName=harry-hov.gno).\n\nIf you have further questions, feel free to join [gno.land Discord\nserver](https://discord.com/invite/YFtMjWwUN7) and get support from the Gno team directly."]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7MWSLkjf+z/CYfMh6KVHEaHLDWpnfGBRDqFO81j1FRN"},"signature":"vt788jjxLLgE4g/4DwtARVU78PtzqHK1Xz6gUAK2UvVdbx4lvEGspnS31BmtTRzGJbH79xaHYyiFHaO3qYwXlQ=="}],"memo":"Called through gno.studio"},"blockNum":"2441000"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["86"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["86"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["87"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["87"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["90"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["90"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["91"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["91"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["92"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["92"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1t+ghsl+0iSQZ51MozHZ1U04/dlLmgN1yDqvcynDdxF"},"signature":"LFS8xFUPUmE8k1EA5uD6MSvmmiTnjNCUFCwCBxDR26dAnKfc5LLczIixOeoDJdb+Ri3NvRXLjtGleLtX1Oc+bQ=="}],"memo":""},"blockNum":"2448140"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"1948540000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/gnoswap/v2/gns","1948540000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000,gno.land/r/demo/wugnot:gno.land/r/onbloc/usdc:3000*POOL*gno.land/r/onbloc/usdc:gno.land/r/onbloc/obl:3000*POOL*gno.land/r/onbloc/obl:gno.land/r/gnoswap/v2/gns:3000","95,5","2162589192"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1t+ghsl+0iSQZ51MozHZ1U04/dlLmgN1yDqvcynDdxF"},"signature":"TIiQ2oYaGU16xH4CdvnKo/fSEbQVvETnDPCzgeX5cGQxn+Fak+JmZzVhsRzPoqXZdUGeCkf6AdcKdRKLwwgKWQ=="}],"memo":""},"blockNum":"2448171"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gno.land/r/gnoswap/v2/gns","gnot","2173450000","EXACT_IN","gno.land/r/gnoswap/v2/gns:gno.land/r/demo/wugnot:3000","100","2131538202"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1t+ghsl+0iSQZ51MozHZ1U04/dlLmgN1yDqvcynDdxF"},"signature":"/ltMRatGe1Fhct/K9f5mTacIPAioarowAe1RzDt5+SIrnK9pXBQ2cpOoBn/1Tf+WQ28UR7SHABrVDTdeSvgfVg=="}],"memo":""},"blockNum":"2448182"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["86"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["86"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["87"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["87"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["90"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["90"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["91"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["91"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["92"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["92"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1t+ghsl+0iSQZ51MozHZ1U04/dlLmgN1yDqvcynDdxF"},"signature":"yLRPRj6F3LjqBHmtLf2Ab8Zh17StRE6Q1Kw19UDIwgocblJNbZnXQcDIqtlm7+Vnm7Q6nlwq852PYbdHnqf+ww=="}],"memo":""},"blockNum":"2448224"}
