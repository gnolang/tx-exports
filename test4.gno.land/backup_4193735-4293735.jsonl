{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1trpstmfjqzzpy2k9jzh3cgmy6yglrvjwwvzufg","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Eb7Mf6Hl0f7MJvGoXtuMevoo/SA0CnizyAAEWf1YLyx48/x7NgmyiQGe27pmv+FwOqOI8nNwAin1UrJnEOt9Ow=="}],"memo":""},"blockNum":"4200508"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1trpstmfjqzzpy2k9jzh3cgmy6yglrvjwwvzufg","package":{"name":"mytoken","path":"gno.land/r/g1trpstmfjqzzpy2k9jzh3cgmy6yglrvjwwvzufg/mytoken","files":[{"name":"package.gno","body":"package mytoken\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tmytoken *grc20.AdminToken\n\tadmin   std.Address\n)\n\n// init is called once at time of deployment\nfunc init() {\n\t// Set deployer of Realm to admin\n\tadmin = std.PrevRealm().Addr()\n\n\t// Set token name, symbol and number of decimals\n\tmytoken = grc20.NewAdminToken(\"My Token\", \"TKN\", 4)\n\n\t// Mint 1 million tokens to admin\n\tmytoken.Mint(admin, 1000000*10000)\n}\n\nfunc TotalSupply() uint64 {\n\treturn mytoken.TotalSupply()\n}\n\nfunc Decimals() uint {\n\treturn mytoken.GetDecimals()\n}\n\nfunc BalanceOf(account std.Address) uint64 {\n\tbalance, err := mytoken.BalanceOf(account)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc Allowance(owner, spender std.Address) uint64 {\n\tallowance, err := mytoken.Allowance(owner, spender)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn allowance\n}\n\nfunc Transfer(recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Transfer(caller, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Approve(spender std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Approve(caller, spender, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(sender, recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"transfer amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.TransferFrom(caller, sender, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Mint(address std.Address, amount uint64) {\n\tassertIsAdmin(std.PrevRealm().Addr())\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"mint amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.Mint(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(address std.Address, amount uint64) {\n\tassertIsAdmin(std.PrevRealm().Addr())\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"burn amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.Burn(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn mytoken.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := std.Address(parts[1])\n\t\tbalance, _ := mytoken.BalanceOf(owner)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\n// How-to: Create a GRC20 Token\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+bZy3Yo3zqZQMYmP+a3ikciGtMeI/1BKza1R5lz0Dar"},"signature":"ohmNs7hndkSGstpPpz/qvW9yJMb3PnzXkORNlY0tLNgFd/5UdwtzXIHkTLL1pq7gSkcPtSkEOoHxl/TU5rb+Iw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"4200516"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1trpstmfjqzzpy2k9jzh3cgmy6yglrvjwwvzufg","package":{"name":"mytoken","path":"gno.land/r/g1trpstmfjqzzpy2k9jzh3cgmy6yglrvjwwvzufg/mytoken","files":[{"name":"package.gno","body":"package mytoken\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tmytoken *grc20.AdminToken\n\tadmin   std.Address\n)\n\n// init is called once at time of deployment\nfunc init() {\n\t// Set deployer of Realm to admin\n\tadmin = std.PrevRealm().Addr()\n\n\t// Set token name, symbol and number of decimals\n\tmytoken = grc20.NewAdminToken(\"My Token\", \"TKN\", 4)\n\n\t// Mint 1 million tokens to admin\n\tmytoken.Mint(admin, 1000000*10000)\n}\n\nfunc TotalSupply() uint64 {\n\treturn mytoken.TotalSupply()\n}\n\nfunc Decimals() uint {\n\treturn mytoken.GetDecimals()\n}\n\nfunc BalanceOf(account std.Address) uint64 {\n\tbalance, err := mytoken.BalanceOf(account)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc Allowance(owner, spender std.Address) uint64 {\n\tallowance, err := mytoken.Allowance(owner, spender)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn allowance\n}\n\nfunc Transfer(recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Transfer(caller, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Approve(spender std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Approve(caller, spender, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(sender, recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"transfer amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.TransferFrom(caller, sender, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Mint(address std.Address, amount uint64) {\n\tassertIsAdmin(std.PrevRealm().Addr())\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"mint amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.Mint(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(address std.Address, amount uint64) {\n\tassertIsAdmin(std.PrevRealm().Addr())\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"burn amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.Burn(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn mytoken.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := std.Address(parts[1])\n\t\tbalance, _ := mytoken.BalanceOf(owner)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\n// How-to: Create a GRC20 Token\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+bZy3Yo3zqZQMYmP+a3ikciGtMeI/1BKza1R5lz0Dar"},"signature":"d9JqqnOLP6CSHlJfDOcOEvPYwI9wQ0OsF6J0ANMAFR0mu+pVWRdPDb4dO6VcU9XHoZc2m/ABAaW4p36gAmVClg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"4200519"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g150gdvn780ws7a3s9qpdvv7h4d9hq6vh672ely0","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"XtIsrWi5ByrGIsEIE0raKHRDhf32EH7e2nYAQiphpmxniUIrOLNSWbtWctSUaaUqP+nrK4Nmj2gDwHm24R3UqA=="}],"memo":""},"blockNum":"4208821"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g150gdvn780ws7a3s9qpdvv7h4d9hq6vh672ely0","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"v1UJJTFBy2/N1E6K3Bb2dAkEOTbAM2BNSQL0/GLO495gH6c3txnP7YZGJ/W4+/HMTAatIQL7wHxOA0Lih73J2Q=="}],"memo":""},"blockNum":"4221526"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g150gdvn780ws7a3s9qpdvv7h4d9hq6vh672ely0","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"2AvHTBfJVQicCYK/VFtYlw1YGtzABDiSOa883+gwgZ8w/+MZ4sRiyCxO94JX5IjH5ytqUTdfZYRCKXGiU1LM0A=="}],"memo":""},"blockNum":"4258283"}
