{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1uylpjn8ua2q659zmylgdyczv9g7adzrl7n3sjm","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"ZBWOovMPL1xVEJNH/p+Ilxf93wWsxScX7ym0SJuNoXhHW+PBms5Aa8Dc+/x07lLTL4LX79l0LsJf6KtmLuADYg=="}],"memo":""},"blockNum":"944152"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uylpjn8ua2q659zmylgdyczv9g7adzrl7n3sjm","send":"10000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhyapjVqwHmkCDHZgwSER6wUxd+w1G58nx94GM/HI07O"},"signature":"BDctIEPIBLAtnjvM8GCxRBox1DEhRqeaygBAHEvssWZiH46U8iTT58oEiUhPh+q1WqNcP+zI7L0jTLC9QmaNOA=="}],"memo":""},"blockNum":"944249"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uylpjn8ua2q659zmylgdyczv9g7adzrl7n3sjm","send":"10000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhyapjVqwHmkCDHZgwSER6wUxd+w1G58nx94GM/HI07O"},"signature":"yPPxIwcCOAHT/O9d/FGC2UddtgMHJs/9cF2+TbgImMU83fMApfubCAWTEJhR7Mu0x5DeRx75LpEmiU4kdppvMw=="}],"memo":""},"blockNum":"944254"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1uylpjn8ua2q659zmylgdyczv9g7adzrl7n3sjm","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"ymjA0cobVQUG7A/boYxMkfSeqO40vWoMRhXJCRoQmR0X3cdASlk92gjyeI9ZR1tfrHH2HzBbYjf4bug1oGM6Vg=="}],"memo":""},"blockNum":"944443"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1uylpjn8ua2q659zmylgdyczv9g7adzrl7n3sjm","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"mfyWkxBNB/rErOJJzEV+F4CeYF3LuyGqiUH2tRK/nhYi3ObwMSkS6Vno9suxYJj8yiIHDW3Bp3ZH71AFmqN9LA=="}],"memo":""},"blockNum":"944449"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1uylpjn8ua2q659zmylgdyczv9g7adzrl7n3sjm","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"qvMBiZ4Et65+x7UFTQkRsD6lJxgh9E6nrrWiQ52ITg8gqL8CKO3eNGi/CmK3iVind7JeF2olrBmw+q9SlaigQQ=="}],"memo":""},"blockNum":"944456"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1uylpjn8ua2q659zmylgdyczv9g7adzrl7n3sjm","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"Ki+z+5BtJEDgMDI6TUfB4UX3WeTKCpL32JJdNt5tNL8cCC6Fqj3chOSqZn+1tgfYBN4KzDJD4N7qEPK2DoZh1A=="}],"memo":""},"blockNum":"944462"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"NKkPBMHE60jC+xXmXkw9IvODg7Q5KarI22xZj4r3tkgoCINGrmwYPzuaEvZ54BxH2OgiLeAKwRCzm7UIYjtzSQ=="}],"memo":""},"blockNum":"948396"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"dXLu5NiIbNJBcnXX7MUwTsvdhTv6pPR37VZimvT4UKU2XIGKh1aepaOOQM1VNy+Hx9/Pq4CFkhatRAAhar3j1A=="}],"memo":""},"blockNum":"948403"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gno.land/r/gnoswap/v2/gns","gnot","5000000","EXACT_IN","gno.land/r/gnoswap/v2/gns:gno.land/r/onbloc/usdc:3000*POOL*gno.land/r/onbloc/usdc:gno.land/r/demo/wugnot:3000,gno.land/r/gnoswap/v2/gns:gno.land/r/onbloc/bar:500*POOL*gno.land/r/onbloc/bar:gno.land/r/demo/wugnot:3000","90,10","5468798"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"GuiHY64DMQh+BJ3Tvv0xDI8iAtWkvyMRedpFn6TNvwoByEy36Wvt5zbNd0Uvno2zh8VUeH0CrFhH1xvZM9KztQ=="}],"memo":""},"blockNum":"948585"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gno.land/r/gnoswap/v2/gns","gnot","5000000","EXACT_IN","gno.land/r/gnoswap/v2/gns:gno.land/r/onbloc/usdc:3000*POOL*gno.land/r/onbloc/usdc:gno.land/r/demo/wugnot:3000,gno.land/r/gnoswap/v2/gns:gno.land/r/onbloc/bar:500*POOL*gno.land/r/onbloc/bar:gno.land/r/demo/wugnot:3000","90,10","5468798"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"YX4IasvDCJQN3apCRDoFWDk9aFH/QjPNo8P9A/CWDo8Hc6UeYKTPvqs75r3agG4J9JzFyWfqVQdUJm0viqCQmw=="}],"memo":""},"blockNum":"948593"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"4000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/gnoswap/v2/gns","4000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000","100","3945446"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"vrV5Z9/l1Ya2lBaHoWokH6Li1Kp6gZFJ+jyFfuz9TKIaPQOVurNJcBFxVvGtsXMMo2pbEYM4aay0NGwagJ2SFw=="}],"memo":""},"blockNum":"948601"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"5000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/onbloc/foo","5000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/onbloc/foo:3000","100","10673754"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"wstmOrJuyp4/HUIgSUJf24vAcVTetlbLkyBJmaoyjOQ/Xr5CSpEQndvhGnOSTkYiVXMYub8XRiwvoBxiX6TODA=="}],"memo":""},"blockNum":"948623"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gno.land/r/onbloc/foo","gno.land/r/gnoswap/v2/gns","4000000","EXACT_IN","gno.land/r/onbloc/foo:gno.land/r/demo/wugnot:3000*POOL*gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000","100","1825201"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"vMEU+jP55eHlrSXvsPrM0xJfkh7fRrtHaJCB29gH1agPJxp2BeTPE62odfGAGCtXtSmyE/GXwrdaRghbw3EjuQ=="}],"memo":""},"blockNum":"948635"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/obl","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gno.land/r/onbloc/foo","gno.land/r/onbloc/obl","5000000","EXACT_IN","gno.land/r/onbloc/foo:gno.land/r/onbloc/obl:3000","100","5400872"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"TWXlqYtnUkgixbLSrinczpaukGQxFUIyOzjJZTomVX5Vt95fogvIyMTLU1SVNVlxMLVX0HOBWpK3T0L0D+pALA=="}],"memo":""},"blockNum":"948643"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","126"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["126"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"6rjYRJbTuzchPNpQLDCK8SqPUdV9aWTCspd+Rt9nj8pTifq+mRbw57aXY4FN/lyAQe/qLLSxwvZZbhI+eZMQ4A=="}],"memo":""},"blockNum":"948658"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["65"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["65","true"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["99"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["99","true"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["101"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["101","true"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"Is/Zvf1AxUbmMR1u63X4AHqBeRlsDsjoIaUu7ClsLjFoCXWM3EQEhVv4Uige7TGPO7EJjVFH72x92cOCw3o3SA=="}],"memo":""},"blockNum":"948664"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","37"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["37"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","56"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["56"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"3OaFVVo1o2e7DHz4m7LyrPktsxpmsZdoU0Tw9MrXDKguXwIssnzTToQeK7wbPUzAj6m4i7ggNJd/3rJB5LikXA=="}],"memo":""},"blockNum":"948673"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","126"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["126"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"VrE7lUTzbfNQX+/A6qhEJX4WXdQdJ5hl0uCgBj+6XRwPAIl9pcz2MA5cYV275hnwhVgfvZFsCZwaWKOwddD5wQ=="}],"memo":""},"blockNum":"948687"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","126"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["126"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"dfY25RAt5ZtzZrD9DNHd+T8py7tsm9itIFMiBGjN/L0Zu1ur5Pgyy+YcduPEWnMJ9kJveS+gePYz7pfH1NmiiA=="}],"memo":""},"blockNum":"948703"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","5000000"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","2320578"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1vsm68lq9cpn7x507s6gh59anmx86kxfhzyszu2","5000000"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"5000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/position","func":"Mint","args":["gnot","gno.land/r/onbloc/foo","3000","-14640","-720","5000000","2320578","4975000","2308975","7282571140","g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"SetTokenURILast","args":null}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"o/fQ4+xNH6GigidaHMeqTyrgz2XI53lHyKNzQ1eC7gw3acBLtPDOCCoVdNTBVHAH4nJ77ieA7s+S8mgnEj9pFg=="}],"memo":""},"blockNum":"948716"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"UnstakeToken","args":["99"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"qtxwUUMLBNHQrAXQKfRu+4mHzPe08vXV8u62CR7O2gxBqf/MFbLgIRSoN+9Xiky4MVbB6c54T3YRpK7RWUFb8A=="}],"memo":""},"blockNum":"948726"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","9223372036854775807"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","9223372036854775807"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1vsm68lq9cpn7x507s6gh59anmx86kxfhzyszu2","9223372036854775807"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"DecreaseLiquidity","args":["37","100","0","0","9999999999","true"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"gUEJSqivrj2ug8ldat8HIJ3lSdenOEQ5B8VQsEcLEEMDrcqaFxFb3y+CywGsFsfm2zKyZgFwh+wx9FNV5bYc7Q=="}],"memo":""},"blockNum":"948737"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["37"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["56"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"vPy9aiYX6ZF2nnQHHcOoKONCoG+GnLWQtarjQSLDQW8+uR58n9YgvWYjfdjQVGBNlQ8cbJ82+fjJ+0/ZLi74Aw=="}],"memo":""},"blockNum":"948743"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","56"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["56"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"VrL5prXn8FB31hJXrl5etmWoTN/x8nNeKgnprS9sN0gVXxT4J0c+v90BRoMCrdCBw6FmWAW3EEBJJ42EJKdpIw=="}],"memo":""},"blockNum":"948753"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","848165"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","10000000"]},{"@type":"/vm.m_call","caller":"g1n9n6t76ec46zgcqejkmwhlswt82r3a580lskj8","send":"848165ugnot","pkg_path":"gno.land/r/gnoswap/v2/position","func":"IncreaseLiquidity","args":["56","848165","10000000","843924","9950000","9999999999"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ag77S86k6lyPZlTewqaST1Uu0FGsatZ5Qy18kma5b5PB"},"signature":"soNKvCAT0sxos286S/AnFOCsq4c/DKvJ0guiCJloMMY63Y0o40VGfqq/mr8Vxmgaf5C/UAJNhjpG7EawnfNSQQ=="}],"memo":""},"blockNum":"948769"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fjh9y7ausp27dqsdq0qrcsnmgvwm6829v2au7d","package":{"name":"ufmt","path":"gno.land/p/grepsuzette/pr2554/ufmt/v1","files":[{"name":"ufmt.gno","body":"// Package ufmt provides utility functions for formatting strings, similarly\n// to the Go package \"fmt\", of which only a subset is currently supported\n// (hence the name µfmt - micro fmt).\npackage ufmt\n\nimport (\n\t\"errors\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// Println formats using the default formats for its operands and writes to standard output.\n// Println writes the given arguments to standard output with spaces between arguments\n// and a newline at the end.\nfunc Println(args ...interface{}) {\n\tvar strs []string\n\tfor _, arg := range args {\n\t\tswitch v := arg.(type) {\n\t\tcase string:\n\t\t\tstrs = append(strs, v)\n\t\tcase (interface{ String() string }):\n\t\t\tstrs = append(strs, v.String())\n\t\tcase error:\n\t\t\tstrs = append(strs, v.Error())\n\t\tcase int, int8, int16, int32, int64, uint, uint8, uint16, uint32, uint64:\n\t\t\tstrs = append(strs, Sprintf(\"%d\", v))\n\t\tcase bool:\n\t\t\tif v {\n\t\t\t\tstrs = append(strs, \"true\")\n\t\t\t} else {\n\t\t\t\tstrs = append(strs, \"false\")\n\t\t\t}\n\t\tcase nil:\n\t\t\tstrs = append(strs, \"\u003cnil\u003e\")\n\t\tdefault:\n\t\t\tstrs = append(strs, \"(unhandled)\")\n\t\t}\n\t}\n\n\t// TODO: remove println after gno supports os.Stdout\n\tprintln(strings.Join(strs, \" \"))\n}\n\n// Sprintf offers similar functionality to Go's fmt.Sprintf, or the sprintf\n// equivalent available in many languages, including C/C++.\n// The number of args passed must exactly match the arguments consumed by the format.\n// A limited number of formatting verbs and features are currently supported,\n// hence the name ufmt (µfmt, micro-fmt).\n//\n// The currently formatted verbs are the following:\n//\n//\t%s: places a string value directly.\n//\t    If the value implements the interface interface{ String() string },\n//\t    the String() method is called to retrieve the value. Same about Error()\n//\t    string.\n//\t%c: formats the character represented by Unicode code point\n//\t%d: formats an integer value using package \"strconv\".\n//\t    Currently supports only uint, uint64, int, int64.\n//\t%t: formats a boolean value to \"true\" or \"false\".\n//\t%%: outputs a literal %. Does not consume an argument.\nfunc Sprintf(format string, args ...interface{}) string {\n\t// we use runes to handle multi-byte characters\n\tsTor := []rune(format)\n\tend := len(sTor)\n\targNum := 0\n\targLen := len(args)\n\tbuf := \"\"\n\n\tfor i := 0; i \u003c end; {\n\t\tisLast := i == end-1\n\t\tc := string(sTor[i])\n\n\t\tif isLast || c != \"%\" {\n\t\t\t// we don't check for invalid format like a one ending with \"%\"\n\t\t\tbuf += string(c)\n\t\t\ti++\n\t\t\tcontinue\n\t\t}\n\n\t\tverb := string(sTor[i+1])\n\t\tif verb == \"%\" {\n\t\t\tbuf += \"%\"\n\t\t\ti += 2\n\t\t\tcontinue\n\t\t}\n\n\t\tif argNum \u003e argLen {\n\t\t\tpanic(\"invalid number of arguments to ufmt.Sprintf\")\n\t\t}\n\t\targ := args[argNum]\n\t\targNum++\n\n\t\tswitch verb {\n\t\tcase \"s\":\n\t\t\tswitch v := arg.(type) {\n\t\t\tcase interface{ String() string }:\n\t\t\t\tbuf += v.String()\n\t\t\tcase error:\n\t\t\t\tbuf += v.Error()\n\t\t\tcase string:\n\t\t\t\tbuf += v\n\t\t\tdefault:\n\t\t\t\tbuf += fallback(verb, v)\n\t\t\t}\n\t\tcase \"c\":\n\t\t\tswitch v := arg.(type) {\n\t\t\t// rune is int32. Exclude overflowing numeric types and dups (byte, int32):\n\t\t\tcase rune:\n\t\t\t\tbuf += string(v)\n\t\t\tcase int:\n\t\t\t\tbuf += string(v)\n\t\t\tcase int8:\n\t\t\t\tbuf += string(v)\n\t\t\tcase int16:\n\t\t\t\tbuf += string(v)\n\t\t\tcase uint:\n\t\t\t\tbuf += string(v)\n\t\t\tcase uint8:\n\t\t\t\tbuf += string(v)\n\t\t\tcase uint16:\n\t\t\t\tbuf += string(v)\n\t\t\tdefault:\n\t\t\t\tbuf += fallback(verb, v)\n\t\t\t}\n\t\tcase \"d\":\n\t\t\tswitch v := arg.(type) {\n\t\t\tcase int:\n\t\t\t\tbuf += strconv.Itoa(v)\n\t\t\tcase int8:\n\t\t\t\tbuf += strconv.Itoa(int(v))\n\t\t\tcase int16:\n\t\t\t\tbuf += strconv.Itoa(int(v))\n\t\t\tcase int32:\n\t\t\t\tbuf += strconv.Itoa(int(v))\n\t\t\tcase int64:\n\t\t\t\tbuf += strconv.Itoa(int(v))\n\t\t\tcase uint:\n\t\t\t\tbuf += strconv.FormatUint(uint64(v), 10)\n\t\t\tcase uint8:\n\t\t\t\tbuf += strconv.FormatUint(uint64(v), 10)\n\t\t\tcase uint16:\n\t\t\t\tbuf += strconv.FormatUint(uint64(v), 10)\n\t\t\tcase uint32:\n\t\t\t\tbuf += strconv.FormatUint(uint64(v), 10)\n\t\t\tcase uint64:\n\t\t\t\tbuf += strconv.FormatUint(v, 10)\n\t\t\tdefault:\n\t\t\t\tbuf += fallback(verb, v)\n\t\t\t}\n\t\tcase \"t\":\n\t\t\tswitch v := arg.(type) {\n\t\t\tcase bool:\n\t\t\t\tif v {\n\t\t\t\t\tbuf += \"true\"\n\t\t\t\t} else {\n\t\t\t\t\tbuf += \"false\"\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tbuf += fallback(verb, v)\n\t\t\t}\n\t\t// % handled before, as it does not consume an argument\n\t\tdefault:\n\t\t\tbuf += \"(unhandled verb: %\" + verb + \")\"\n\t\t}\n\n\t\ti += 2\n\t}\n\tif argNum \u003c argLen {\n\t\tpanic(\"too many arguments to ufmt.Sprintf\")\n\t}\n\treturn buf\n}\n\n// This function is used to mimic Go's fmt.Sprintf\n// specific behaviour of showing verb/type mismatches,\n// where for example:\n//\n//\tfmt.Sprintf(\"%d\", \"foo\") gives \"%!d(string=foo)\"\n//\n// Here:\n//\n//\tfallback(\"s\", 8) -\u003e \"%!s(int=8)\"\n//\tfallback(\"d\", nil) -\u003e \"%!d(\u003cnil\u003e)\", and so on.\nfunc fallback(verb string, arg interface{}) string {\n\tvar s string\n\tswitch v := arg.(type) {\n\tcase string:\n\t\ts = \"string=\" + v\n\tcase (interface{ String() string }):\n\t\ts = \"string=\" + v.String()\n\tcase error:\n\t\t// note: also \"string=\" in Go fmt\n\t\ts = \"string=\" + v.Error()\n\tcase int, int8, int16, int32, int64, uint, uint8, uint16, uint32, uint64:\n\t\t// note: rune, byte would be dups, being aliases\n\t\tif typename, e := typeToString(v); e != nil {\n\t\t\tpanic(\"should not happen\")\n\t\t} else {\n\t\t\ts = typename + \"=\" + Sprintf(\"%d\", v)\n\t\t}\n\tcase bool:\n\t\tif v {\n\t\t\ts = \"bool=true\"\n\t\t} else {\n\t\t\ts = \"bool=false\"\n\t\t}\n\tcase nil:\n\t\ts = \"\u003cnil\u003e\"\n\tdefault:\n\t\ts = \"(unhandled)\"\n\t}\n\treturn \"%!\" + verb + \"(\" + s + \")\"\n}\n\n// Get the name of the type of `v` as a string.\n// The recognized type of v is currently limited to native non-composite types.\n// An error is returned otherwise.\nfunc typeToString(v interface{}) (string, error) {\n\tswitch v.(type) {\n\tcase string:\n\t\treturn \"string\", nil\n\tcase int:\n\t\treturn \"int\", nil\n\tcase int8:\n\t\treturn \"int8\", nil\n\tcase int16:\n\t\treturn \"int16\", nil\n\tcase int32:\n\t\treturn \"int32\", nil\n\tcase int64:\n\t\treturn \"int64\", nil\n\tcase uint:\n\t\treturn \"uint\", nil\n\tcase uint8:\n\t\treturn \"uint8\", nil\n\tcase uint16:\n\t\treturn \"uint16\", nil\n\tcase uint32:\n\t\treturn \"uint32\", nil\n\tcase uint64:\n\t\treturn \"uint64\", nil\n\tcase float32:\n\t\treturn \"float32\", nil\n\tcase float64:\n\t\treturn \"float64\", nil\n\tcase bool:\n\t\treturn \"bool\", nil\n\tdefault:\n\t\treturn \"\", errors.New(\"(unsupported type)\")\n\t}\n}\n\n// errMsg implements the error interface.\ntype errMsg struct {\n\tmsg string\n}\n\n// Error defines the requirements of the error interface.\n// It functions similarly to Go's errors.New()\nfunc (e *errMsg) Error() string {\n\treturn e.msg\n}\n\n// Errorf is a function that mirrors the functionality of fmt.Errorf.\n//\n// It takes a format string and arguments to create a formatted string,\n// then sets this string as the 'msg' field of an errMsg struct and returns a pointer to this struct.\n//\n// This function operates in a similar manner to Go's fmt.Errorf,\n// providing a way to create formatted error messages.\n//\n// The currently formatted verbs are the following:\n//\n//\t%s: places a string value directly.\n//\t    If the value implements the interface interface{ String() string },\n//\t    the String() method is called to retrieve the value. Same for error.\n//\t%c: formats the character represented by Unicode code point\n//\t%d: formats an integer value using package \"strconv\".\n//\t    Currently supports only uint, uint64, int, int64.\n//\t%t: formats a boolean value to \"true\" or \"false\".\n//\t%%: outputs a literal %. Does not consume an argument.\nfunc Errorf(format string, args ...interface{}) error {\n\treturn \u0026errMsg{Sprintf(format, args...)}\n}\n"},{"name":"ufmt_test.gno","body":"package ufmt\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"testing\"\n)\n\ntype stringer struct{}\n\nfunc (stringer) String() string {\n\treturn \"I'm a stringer\"\n}\n\nfunc TestSprintf(t *testing.T) {\n\ttru := true\n\tcases := []struct {\n\t\tformat         string\n\t\tvalues         []interface{}\n\t\texpectedOutput string\n\t}{\n\t\t{\"hello %s!\", []interface{}{\"planet\"}, \"hello planet!\"},\n\t\t{\"hi %%%s!\", []interface{}{\"worl%d\"}, \"hi %worl%d!\"},\n\t\t{\"%s %c %d %t\", []interface{}{\"foo\", 'α', 421, true}, \"foo α 421 true\"},\n\t\t{\"string [%s]\", []interface{}{\"foo\"}, \"string [foo]\"},\n\t\t{\"int [%d]\", []interface{}{int(42)}, \"int [42]\"},\n\t\t{\"int8 [%d]\", []interface{}{int8(8)}, \"int8 [8]\"},\n\t\t{\"int16 [%d]\", []interface{}{int16(16)}, \"int16 [16]\"},\n\t\t{\"int32 [%d]\", []interface{}{int32(32)}, \"int32 [32]\"},\n\t\t{\"int64 [%d]\", []interface{}{int64(64)}, \"int64 [64]\"},\n\t\t{\"uint [%d]\", []interface{}{uint(42)}, \"uint [42]\"},\n\t\t{\"uint8 [%d]\", []interface{}{uint8(8)}, \"uint8 [8]\"},\n\t\t{\"uint16 [%d]\", []interface{}{uint16(16)}, \"uint16 [16]\"},\n\t\t{\"uint32 [%d]\", []interface{}{uint32(32)}, \"uint32 [32]\"},\n\t\t{\"uint64 [%d]\", []interface{}{uint64(64)}, \"uint64 [64]\"},\n\t\t{\"bool [%t]\", []interface{}{true}, \"bool [true]\"},\n\t\t{\"bool [%t]\", []interface{}{false}, \"bool [false]\"},\n\t\t{\"no args\", nil, \"no args\"},\n\t\t{\"finish with %\", nil, \"finish with %\"},\n\t\t{\"stringer [%s]\", []interface{}{stringer{}}, \"stringer [I'm a stringer]\"},\n\t\t{\"â\", nil, \"â\"},\n\t\t{\"Hello, World! 😊\", nil, \"Hello, World! 😊\"},\n\t\t{\"unicode formatting: %s\", []interface{}{\"😊\"}, \"unicode formatting: 😊\"},\n\t\t// mismatch printing\n\t\t{\"%s\", []interface{}{nil}, \"%!s(\u003cnil\u003e)\"},\n\t\t{\"%s\", []interface{}{421}, \"%!s(int=421)\"},\n\t\t{\"%s\", []interface{}{\"z\"}, \"z\"},\n\t\t{\"%s\", []interface{}{tru}, \"%!s(bool=true)\"},\n\t\t{\"%s\", []interface{}{'z'}, \"%!s(int32=122)\"},\n\n\t\t{\"%c\", []interface{}{nil}, \"%!c(\u003cnil\u003e)\"},\n\t\t{\"%c\", []interface{}{421}, \"ƥ\"},\n\t\t{\"%c\", []interface{}{\"z\"}, \"%!c(string=z)\"},\n\t\t{\"%c\", []interface{}{tru}, \"%!c(bool=true)\"},\n\t\t{\"%c\", []interface{}{'z'}, \"z\"},\n\n\t\t{\"%d\", []interface{}{nil}, \"%!d(\u003cnil\u003e)\"},\n\t\t{\"%d\", []interface{}{421}, \"421\"},\n\t\t{\"%d\", []interface{}{\"z\"}, \"%!d(string=z)\"},\n\t\t{\"%d\", []interface{}{tru}, \"%!d(bool=true)\"},\n\t\t{\"%d\", []interface{}{'z'}, \"122\"},\n\n\t\t{\"%t\", []interface{}{nil}, \"%!t(\u003cnil\u003e)\"},\n\t\t{\"%t\", []interface{}{421}, \"%!t(int=421)\"},\n\t\t{\"%t\", []interface{}{\"z\"}, \"%!t(string=z)\"},\n\t\t{\"%t\", []interface{}{tru}, \"true\"},\n\t\t{\"%t\", []interface{}{'z'}, \"%!t(int32=122)\"},\n\t}\n\n\tfor _, tc := range cases {\n\t\tname := fmt.Sprintf(tc.format, tc.values...)\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tgot := Sprintf(tc.format, tc.values...)\n\t\t\tif got != tc.expectedOutput {\n\t\t\t\tt.Errorf(\"got %q, want %q.\", got, tc.expectedOutput)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestErrorf(t *testing.T) {\n\ttests := []struct {\n\t\tname     string\n\t\tformat   string\n\t\targs     []interface{}\n\t\texpected string\n\t}{\n\t\t{\n\t\t\tname:     \"simple string\",\n\t\t\tformat:   \"error: %s\",\n\t\t\targs:     []interface{}{\"something went wrong\"},\n\t\t\texpected: \"error: something went wrong\",\n\t\t},\n\t\t{\n\t\t\tname:     \"integer value\",\n\t\t\tformat:   \"value: %d\",\n\t\t\targs:     []interface{}{42},\n\t\t\texpected: \"value: 42\",\n\t\t},\n\t\t{\n\t\t\tname:     \"boolean value\",\n\t\t\tformat:   \"success: %t\",\n\t\t\targs:     []interface{}{true},\n\t\t\texpected: \"success: true\",\n\t\t},\n\t\t{\n\t\t\tname:     \"multiple values\",\n\t\t\tformat:   \"error %d: %s (success=%t)\",\n\t\t\targs:     []interface{}{123, \"failure occurred\", false},\n\t\t\texpected: \"error 123: failure occurred (success=false)\",\n\t\t},\n\t\t{\n\t\t\tname:     \"literal percent\",\n\t\t\tformat:   \"literal %%\",\n\t\t\targs:     []interface{}{},\n\t\t\texpected: \"literal %\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\terr := Errorf(tt.format, tt.args...)\n\t\t\tif err.Error() != tt.expected {\n\t\t\t\tt.Errorf(\"Errorf(%q, %v) = %q, expected %q\", tt.format, tt.args, err.Error(), tt.expected)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestPrintErrors(t *testing.T) {\n\tgot := Sprintf(\"error: %s\", errors.New(\"can I be printed?\"))\n\texpectedOutput := \"error: can I be printed?\"\n\tif got != expectedOutput {\n\t\tt.Errorf(\"got %q, want %q.\", got, expectedOutput)\n\t}\n}\n\n// NOTE: Currently, there is no way to get the output of Println without using os.Stdout,\n// so we can only test that it doesn't panic and print arguments well.\nfunc TestPrintln(t *testing.T) {\n\ttests := []struct {\n\t\tname     string\n\t\targs     []interface{}\n\t\texpected string\n\t}{\n\t\t{\n\t\t\tname:     \"Empty args\",\n\t\t\targs:     []interface{}{},\n\t\t\texpected: \"\",\n\t\t},\n\t\t{\n\t\t\tname:     \"String args\",\n\t\t\targs:     []interface{}{\"Hello\", \"World\"},\n\t\t\texpected: \"Hello World\",\n\t\t},\n\t\t{\n\t\t\tname:     \"Integer args\",\n\t\t\targs:     []interface{}{1, 2, 3},\n\t\t\texpected: \"1 2 3\",\n\t\t},\n\t\t{\n\t\t\tname:     \"Mixed args\",\n\t\t\targs:     []interface{}{\"Hello\", 42, true, false, \"World\"},\n\t\t\texpected: \"Hello 42 true false World\",\n\t\t},\n\t\t{\n\t\t\tname:     \"Unhandled type\",\n\t\t\targs:     []interface{}{\"Hello\", 3.14, []int{1, 2, 3}},\n\t\t\texpected: \"Hello (unhandled) (unhandled)\",\n\t\t},\n\t}\n\n\t// TODO: replace os.Stdout with a buffer to capture the output and test it.\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tPrintln(tt.args...)\n\t\t})\n\t}\n}\n"}]},"deposit":"100000ugnot"}],"fee":{"gas_wanted":"100000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1sQrIl4krsBIKtCTfMqWzbkKQDSfmPtMYQA9EvsJqmu"},"signature":"tboeatchDT94PfsAqp4xpqP98foIq1jJb/t0lBRvisd8k/K2aIM7npD7w4YyBPuvIb9hPlN8endbPy+ImfaYew=="}],"memo":""},"blockNum":"948907"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fjh9y7ausp27dqsdq0qrcsnmgvwm6829v2au7d","package":{"name":"ufmt","path":"gno.land/p/grepsuzette/pr2554/v1/ufmt","files":[{"name":"ufmt.gno","body":"// Package ufmt provides utility functions for formatting strings, similarly\n// to the Go package \"fmt\", of which only a subset is currently supported\n// (hence the name µfmt - micro fmt).\npackage ufmt\n\nimport (\n\t\"errors\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// Println formats using the default formats for its operands and writes to standard output.\n// Println writes the given arguments to standard output with spaces between arguments\n// and a newline at the end.\nfunc Println(args ...interface{}) {\n\tvar strs []string\n\tfor _, arg := range args {\n\t\tswitch v := arg.(type) {\n\t\tcase string:\n\t\t\tstrs = append(strs, v)\n\t\tcase (interface{ String() string }):\n\t\t\tstrs = append(strs, v.String())\n\t\tcase error:\n\t\t\tstrs = append(strs, v.Error())\n\t\tcase int, int8, int16, int32, int64, uint, uint8, uint16, uint32, uint64:\n\t\t\tstrs = append(strs, Sprintf(\"%d\", v))\n\t\tcase bool:\n\t\t\tif v {\n\t\t\t\tstrs = append(strs, \"true\")\n\t\t\t} else {\n\t\t\t\tstrs = append(strs, \"false\")\n\t\t\t}\n\t\tcase nil:\n\t\t\tstrs = append(strs, \"\u003cnil\u003e\")\n\t\tdefault:\n\t\t\tstrs = append(strs, \"(unhandled)\")\n\t\t}\n\t}\n\n\t// TODO: remove println after gno supports os.Stdout\n\tprintln(strings.Join(strs, \" \"))\n}\n\n// Sprintf offers similar functionality to Go's fmt.Sprintf, or the sprintf\n// equivalent available in many languages, including C/C++.\n// The number of args passed must exactly match the arguments consumed by the format.\n// A limited number of formatting verbs and features are currently supported,\n// hence the name ufmt (µfmt, micro-fmt).\n//\n// The currently formatted verbs are the following:\n//\n//\t%s: places a string value directly.\n//\t    If the value implements the interface interface{ String() string },\n//\t    the String() method is called to retrieve the value. Same about Error()\n//\t    string.\n//\t%c: formats the character represented by Unicode code point\n//\t%d: formats an integer value using package \"strconv\".\n//\t    Currently supports only uint, uint64, int, int64.\n//\t%t: formats a boolean value to \"true\" or \"false\".\n//\t%%: outputs a literal %. Does not consume an argument.\nfunc Sprintf(format string, args ...interface{}) string {\n\t// we use runes to handle multi-byte characters\n\tsTor := []rune(format)\n\tend := len(sTor)\n\targNum := 0\n\targLen := len(args)\n\tbuf := \"\"\n\n\tfor i := 0; i \u003c end; {\n\t\tisLast := i == end-1\n\t\tc := string(sTor[i])\n\n\t\tif isLast || c != \"%\" {\n\t\t\t// we don't check for invalid format like a one ending with \"%\"\n\t\t\tbuf += string(c)\n\t\t\ti++\n\t\t\tcontinue\n\t\t}\n\n\t\tverb := string(sTor[i+1])\n\t\tif verb == \"%\" {\n\t\t\tbuf += \"%\"\n\t\t\ti += 2\n\t\t\tcontinue\n\t\t}\n\n\t\tif argNum \u003e argLen {\n\t\t\tpanic(\"invalid number of arguments to ufmt.Sprintf\")\n\t\t}\n\t\targ := args[argNum]\n\t\targNum++\n\n\t\tswitch verb {\n\t\tcase \"s\":\n\t\t\tswitch v := arg.(type) {\n\t\t\tcase interface{ String() string }:\n\t\t\t\tbuf += v.String()\n\t\t\tcase error:\n\t\t\t\tbuf += v.Error()\n\t\t\tcase string:\n\t\t\t\tbuf += v\n\t\t\tdefault:\n\t\t\t\tbuf += fallback(verb, v)\n\t\t\t}\n\t\tcase \"c\":\n\t\t\tswitch v := arg.(type) {\n\t\t\t// rune is int32. Exclude overflowing numeric types and dups (byte, int32):\n\t\t\tcase rune:\n\t\t\t\tbuf += string(v)\n\t\t\tcase int:\n\t\t\t\tbuf += string(v)\n\t\t\tcase int8:\n\t\t\t\tbuf += string(v)\n\t\t\tcase int16:\n\t\t\t\tbuf += string(v)\n\t\t\tcase uint:\n\t\t\t\tbuf += string(v)\n\t\t\tcase uint8:\n\t\t\t\tbuf += string(v)\n\t\t\tcase uint16:\n\t\t\t\tbuf += string(v)\n\t\t\tdefault:\n\t\t\t\tbuf += fallback(verb, v)\n\t\t\t}\n\t\tcase \"d\":\n\t\t\tswitch v := arg.(type) {\n\t\t\tcase int:\n\t\t\t\tbuf += strconv.Itoa(v)\n\t\t\tcase int8:\n\t\t\t\tbuf += strconv.Itoa(int(v))\n\t\t\tcase int16:\n\t\t\t\tbuf += strconv.Itoa(int(v))\n\t\t\tcase int32:\n\t\t\t\tbuf += strconv.Itoa(int(v))\n\t\t\tcase int64:\n\t\t\t\tbuf += strconv.Itoa(int(v))\n\t\t\tcase uint:\n\t\t\t\tbuf += strconv.FormatUint(uint64(v), 10)\n\t\t\tcase uint8:\n\t\t\t\tbuf += strconv.FormatUint(uint64(v), 10)\n\t\t\tcase uint16:\n\t\t\t\tbuf += strconv.FormatUint(uint64(v), 10)\n\t\t\tcase uint32:\n\t\t\t\tbuf += strconv.FormatUint(uint64(v), 10)\n\t\t\tcase uint64:\n\t\t\t\tbuf += strconv.FormatUint(v, 10)\n\t\t\tdefault:\n\t\t\t\tbuf += fallback(verb, v)\n\t\t\t}\n\t\tcase \"t\":\n\t\t\tswitch v := arg.(type) {\n\t\t\tcase bool:\n\t\t\t\tif v {\n\t\t\t\t\tbuf += \"true\"\n\t\t\t\t} else {\n\t\t\t\t\tbuf += \"false\"\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tbuf += fallback(verb, v)\n\t\t\t}\n\t\t// % handled before, as it does not consume an argument\n\t\tdefault:\n\t\t\tbuf += \"(unhandled verb: %\" + verb + \")\"\n\t\t}\n\n\t\ti += 2\n\t}\n\tif argNum \u003c argLen {\n\t\tpanic(\"too many arguments to ufmt.Sprintf\")\n\t}\n\treturn buf\n}\n\n// This function is used to mimic Go's fmt.Sprintf\n// specific behaviour of showing verb/type mismatches,\n// where for example:\n//\n//\tfmt.Sprintf(\"%d\", \"foo\") gives \"%!d(string=foo)\"\n//\n// Here:\n//\n//\tfallback(\"s\", 8) -\u003e \"%!s(int=8)\"\n//\tfallback(\"d\", nil) -\u003e \"%!d(\u003cnil\u003e)\", and so on.\nfunc fallback(verb string, arg interface{}) string {\n\tvar s string\n\tswitch v := arg.(type) {\n\tcase string:\n\t\ts = \"string=\" + v\n\tcase (interface{ String() string }):\n\t\ts = \"string=\" + v.String()\n\tcase error:\n\t\t// note: also \"string=\" in Go fmt\n\t\ts = \"string=\" + v.Error()\n\tcase int, int8, int16, int32, int64, uint, uint8, uint16, uint32, uint64:\n\t\t// note: rune, byte would be dups, being aliases\n\t\tif typename, e := typeToString(v); e != nil {\n\t\t\tpanic(\"should not happen\")\n\t\t} else {\n\t\t\ts = typename + \"=\" + Sprintf(\"%d\", v)\n\t\t}\n\tcase bool:\n\t\tif v {\n\t\t\ts = \"bool=true\"\n\t\t} else {\n\t\t\ts = \"bool=false\"\n\t\t}\n\tcase nil:\n\t\ts = \"\u003cnil\u003e\"\n\tdefault:\n\t\ts = \"(unhandled)\"\n\t}\n\treturn \"%!\" + verb + \"(\" + s + \")\"\n}\n\n// Get the name of the type of `v` as a string.\n// The recognized type of v is currently limited to native non-composite types.\n// An error is returned otherwise.\nfunc typeToString(v interface{}) (string, error) {\n\tswitch v.(type) {\n\tcase string:\n\t\treturn \"string\", nil\n\tcase int:\n\t\treturn \"int\", nil\n\tcase int8:\n\t\treturn \"int8\", nil\n\tcase int16:\n\t\treturn \"int16\", nil\n\tcase int32:\n\t\treturn \"int32\", nil\n\tcase int64:\n\t\treturn \"int64\", nil\n\tcase uint:\n\t\treturn \"uint\", nil\n\tcase uint8:\n\t\treturn \"uint8\", nil\n\tcase uint16:\n\t\treturn \"uint16\", nil\n\tcase uint32:\n\t\treturn \"uint32\", nil\n\tcase uint64:\n\t\treturn \"uint64\", nil\n\tcase float32:\n\t\treturn \"float32\", nil\n\tcase float64:\n\t\treturn \"float64\", nil\n\tcase bool:\n\t\treturn \"bool\", nil\n\tdefault:\n\t\treturn \"\", errors.New(\"(unsupported type)\")\n\t}\n}\n\n// errMsg implements the error interface.\ntype errMsg struct {\n\tmsg string\n}\n\n// Error defines the requirements of the error interface.\n// It functions similarly to Go's errors.New()\nfunc (e *errMsg) Error() string {\n\treturn e.msg\n}\n\n// Errorf is a function that mirrors the functionality of fmt.Errorf.\n//\n// It takes a format string and arguments to create a formatted string,\n// then sets this string as the 'msg' field of an errMsg struct and returns a pointer to this struct.\n//\n// This function operates in a similar manner to Go's fmt.Errorf,\n// providing a way to create formatted error messages.\n//\n// The currently formatted verbs are the following:\n//\n//\t%s: places a string value directly.\n//\t    If the value implements the interface interface{ String() string },\n//\t    the String() method is called to retrieve the value. Same for error.\n//\t%c: formats the character represented by Unicode code point\n//\t%d: formats an integer value using package \"strconv\".\n//\t    Currently supports only uint, uint64, int, int64.\n//\t%t: formats a boolean value to \"true\" or \"false\".\n//\t%%: outputs a literal %. Does not consume an argument.\nfunc Errorf(format string, args ...interface{}) error {\n\treturn \u0026errMsg{Sprintf(format, args...)}\n}\n"},{"name":"ufmt_test.gno","body":"package ufmt\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"testing\"\n)\n\ntype stringer struct{}\n\nfunc (stringer) String() string {\n\treturn \"I'm a stringer\"\n}\n\nfunc TestSprintf(t *testing.T) {\n\ttru := true\n\tcases := []struct {\n\t\tformat         string\n\t\tvalues         []interface{}\n\t\texpectedOutput string\n\t}{\n\t\t{\"hello %s!\", []interface{}{\"planet\"}, \"hello planet!\"},\n\t\t{\"hi %%%s!\", []interface{}{\"worl%d\"}, \"hi %worl%d!\"},\n\t\t{\"%s %c %d %t\", []interface{}{\"foo\", 'α', 421, true}, \"foo α 421 true\"},\n\t\t{\"string [%s]\", []interface{}{\"foo\"}, \"string [foo]\"},\n\t\t{\"int [%d]\", []interface{}{int(42)}, \"int [42]\"},\n\t\t{\"int8 [%d]\", []interface{}{int8(8)}, \"int8 [8]\"},\n\t\t{\"int16 [%d]\", []interface{}{int16(16)}, \"int16 [16]\"},\n\t\t{\"int32 [%d]\", []interface{}{int32(32)}, \"int32 [32]\"},\n\t\t{\"int64 [%d]\", []interface{}{int64(64)}, \"int64 [64]\"},\n\t\t{\"uint [%d]\", []interface{}{uint(42)}, \"uint [42]\"},\n\t\t{\"uint8 [%d]\", []interface{}{uint8(8)}, \"uint8 [8]\"},\n\t\t{\"uint16 [%d]\", []interface{}{uint16(16)}, \"uint16 [16]\"},\n\t\t{\"uint32 [%d]\", []interface{}{uint32(32)}, \"uint32 [32]\"},\n\t\t{\"uint64 [%d]\", []interface{}{uint64(64)}, \"uint64 [64]\"},\n\t\t{\"bool [%t]\", []interface{}{true}, \"bool [true]\"},\n\t\t{\"bool [%t]\", []interface{}{false}, \"bool [false]\"},\n\t\t{\"no args\", nil, \"no args\"},\n\t\t{\"finish with %\", nil, \"finish with %\"},\n\t\t{\"stringer [%s]\", []interface{}{stringer{}}, \"stringer [I'm a stringer]\"},\n\t\t{\"â\", nil, \"â\"},\n\t\t{\"Hello, World! 😊\", nil, \"Hello, World! 😊\"},\n\t\t{\"unicode formatting: %s\", []interface{}{\"😊\"}, \"unicode formatting: 😊\"},\n\t\t// mismatch printing\n\t\t{\"%s\", []interface{}{nil}, \"%!s(\u003cnil\u003e)\"},\n\t\t{\"%s\", []interface{}{421}, \"%!s(int=421)\"},\n\t\t{\"%s\", []interface{}{\"z\"}, \"z\"},\n\t\t{\"%s\", []interface{}{tru}, \"%!s(bool=true)\"},\n\t\t{\"%s\", []interface{}{'z'}, \"%!s(int32=122)\"},\n\n\t\t{\"%c\", []interface{}{nil}, \"%!c(\u003cnil\u003e)\"},\n\t\t{\"%c\", []interface{}{421}, \"ƥ\"},\n\t\t{\"%c\", []interface{}{\"z\"}, \"%!c(string=z)\"},\n\t\t{\"%c\", []interface{}{tru}, \"%!c(bool=true)\"},\n\t\t{\"%c\", []interface{}{'z'}, \"z\"},\n\n\t\t{\"%d\", []interface{}{nil}, \"%!d(\u003cnil\u003e)\"},\n\t\t{\"%d\", []interface{}{421}, \"421\"},\n\t\t{\"%d\", []interface{}{\"z\"}, \"%!d(string=z)\"},\n\t\t{\"%d\", []interface{}{tru}, \"%!d(bool=true)\"},\n\t\t{\"%d\", []interface{}{'z'}, \"122\"},\n\n\t\t{\"%t\", []interface{}{nil}, \"%!t(\u003cnil\u003e)\"},\n\t\t{\"%t\", []interface{}{421}, \"%!t(int=421)\"},\n\t\t{\"%t\", []interface{}{\"z\"}, \"%!t(string=z)\"},\n\t\t{\"%t\", []interface{}{tru}, \"true\"},\n\t\t{\"%t\", []interface{}{'z'}, \"%!t(int32=122)\"},\n\t}\n\n\tfor _, tc := range cases {\n\t\tname := fmt.Sprintf(tc.format, tc.values...)\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tgot := Sprintf(tc.format, tc.values...)\n\t\t\tif got != tc.expectedOutput {\n\t\t\t\tt.Errorf(\"got %q, want %q.\", got, tc.expectedOutput)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestErrorf(t *testing.T) {\n\ttests := []struct {\n\t\tname     string\n\t\tformat   string\n\t\targs     []interface{}\n\t\texpected string\n\t}{\n\t\t{\n\t\t\tname:     \"simple string\",\n\t\t\tformat:   \"error: %s\",\n\t\t\targs:     []interface{}{\"something went wrong\"},\n\t\t\texpected: \"error: something went wrong\",\n\t\t},\n\t\t{\n\t\t\tname:     \"integer value\",\n\t\t\tformat:   \"value: %d\",\n\t\t\targs:     []interface{}{42},\n\t\t\texpected: \"value: 42\",\n\t\t},\n\t\t{\n\t\t\tname:     \"boolean value\",\n\t\t\tformat:   \"success: %t\",\n\t\t\targs:     []interface{}{true},\n\t\t\texpected: \"success: true\",\n\t\t},\n\t\t{\n\t\t\tname:     \"multiple values\",\n\t\t\tformat:   \"error %d: %s (success=%t)\",\n\t\t\targs:     []interface{}{123, \"failure occurred\", false},\n\t\t\texpected: \"error 123: failure occurred (success=false)\",\n\t\t},\n\t\t{\n\t\t\tname:     \"literal percent\",\n\t\t\tformat:   \"literal %%\",\n\t\t\targs:     []interface{}{},\n\t\t\texpected: \"literal %\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\terr := Errorf(tt.format, tt.args...)\n\t\t\tif err.Error() != tt.expected {\n\t\t\t\tt.Errorf(\"Errorf(%q, %v) = %q, expected %q\", tt.format, tt.args, err.Error(), tt.expected)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestPrintErrors(t *testing.T) {\n\tgot := Sprintf(\"error: %s\", errors.New(\"can I be printed?\"))\n\texpectedOutput := \"error: can I be printed?\"\n\tif got != expectedOutput {\n\t\tt.Errorf(\"got %q, want %q.\", got, expectedOutput)\n\t}\n}\n\n// NOTE: Currently, there is no way to get the output of Println without using os.Stdout,\n// so we can only test that it doesn't panic and print arguments well.\nfunc TestPrintln(t *testing.T) {\n\ttests := []struct {\n\t\tname     string\n\t\targs     []interface{}\n\t\texpected string\n\t}{\n\t\t{\n\t\t\tname:     \"Empty args\",\n\t\t\targs:     []interface{}{},\n\t\t\texpected: \"\",\n\t\t},\n\t\t{\n\t\t\tname:     \"String args\",\n\t\t\targs:     []interface{}{\"Hello\", \"World\"},\n\t\t\texpected: \"Hello World\",\n\t\t},\n\t\t{\n\t\t\tname:     \"Integer args\",\n\t\t\targs:     []interface{}{1, 2, 3},\n\t\t\texpected: \"1 2 3\",\n\t\t},\n\t\t{\n\t\t\tname:     \"Mixed args\",\n\t\t\targs:     []interface{}{\"Hello\", 42, true, false, \"World\"},\n\t\t\texpected: \"Hello 42 true false World\",\n\t\t},\n\t\t{\n\t\t\tname:     \"Unhandled type\",\n\t\t\targs:     []interface{}{\"Hello\", 3.14, []int{1, 2, 3}},\n\t\t\texpected: \"Hello (unhandled) (unhandled)\",\n\t\t},\n\t}\n\n\t// TODO: replace os.Stdout with a buffer to capture the output and test it.\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tPrintln(tt.args...)\n\t\t})\n\t}\n}\n"}]},"deposit":"100000ugnot"}],"fee":{"gas_wanted":"100000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1sQrIl4krsBIKtCTfMqWzbkKQDSfmPtMYQA9EvsJqmu"},"signature":"g0IzNyuM+Z3F05EdQotxyu5yz4CieE5x2DMGhTQNbkM4tQq3kMCTnLb6OPXZQ1BD2skwJlmqp8xAOLxKiUyEQw=="}],"memo":""},"blockNum":"949100"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fjh9y7ausp27dqsdq0qrcsnmgvwm6829v2au7d","package":{"name":"tictactoe","path":"gno.land/p/grepsuzette/pr2554/v1/tictactoe","files":[{"name":"game.gno","body":"package tictactoe\n\nimport (\n\t\"errors\"\n\t\"std\"\n\n\t\"gno.land/p/grepsuzette/pr2554/v1/ufmt\"\n)\n\n// this file is @moul's work in #613\n// a few changes and bugfixes have been made\n\ntype Game struct {\n\tplayer1, player2 std.Address\n\tboard            [9]rune // 0=empty, 1=player1, 2=player2\n\tturnCtr          int\n\twinnerIdx        int\n}\n\nfunc NewGame(player1, player2 std.Address) (*Game, error) {\n\tif player1 == player2 {\n\t\treturn nil, errors.New(\"cannot fight against self\")\n\t}\n\n\tg := Game{\n\t\tplayer1:   player1,\n\t\tplayer2:   player2,\n\t\twinnerIdx: -1,\n\t\tturnCtr:   -1,\n\t}\n\treturn \u0026g, nil\n}\n\n// Partially recover a game\n// The game is guaranteed to be legit in terms of number of tiles 1 and 2\n// No winning detection is implemented here however\nfunc RecoverGame(player1, player2 std.Address, board string) (*Game, error) {\n\tg, e := NewGame(player1, player2)\n\tif e != nil {\n\t\treturn nil, e\n\t}\n\tif len(board) != 9 {\n\t\treturn nil, ufmt.Errorf(\"invalid board length: %d\", len(board))\n\t}\n\tnum1, num2 := 0, 0\n\trunes := [9]rune{}\n\tfor i, c := range board {\n\t\tswitch c {\n\t\tcase rune(0), '_', '-':\n\t\t\trunes[i] = rune(0)\n\t\tcase rune(1), 'O', 'o':\n\t\t\tnum1 += 1\n\t\t\trunes[i] = rune(1)\n\t\tcase rune(2), 'X', 'x':\n\t\t\tnum2 += 1\n\t\t\trunes[i] = rune(2)\n\t\tdefault:\n\t\t\treturn nil, errors.New(\"invalid rune\")\n\t\t}\n\t}\n\tif num1 != num2 \u0026\u0026 num1 != num2+1 {\n\t\treturn nil, errors.New(\"invalid number of x and o\")\n\t}\n\tg.board = runes\n\tg.turnCtr = num1 + num2\n\tg.winnerIdx = -1\n\treturn g, nil\n}\n\n// start sets turnCtr to 0.\nfunc (g *Game) Start() {\n\tif g.turnCtr != -1 {\n\t\tpanic(\"game already started\")\n\t}\n\tg.turnCtr = 0\n}\n\nfunc (g *Game) Play(player std.Address, posX, posY int) error {\n\tif !g.Started() {\n\t\treturn errors.New(\"game not started\")\n\t}\n\n\tif g.Turn() != player {\n\t\treturn errors.New(\"invalid turn\")\n\t}\n\n\tif g.IsOver() {\n\t\treturn errors.New(\"game over\")\n\t}\n\n\t// are posX and posY valid\n\tif posX \u003c 0 || posY \u003c 0 || posX \u003e 2 || posY \u003e 2 {\n\t\treturn errors.New(\"posX and posY should be 0, 1 or 2\")\n\t}\n\n\t// is slot already used?\n\tidx := xyToIdx(posX, posY)\n\tif g.board[idx] != 0 {\n\t\treturn ufmt.Errorf(\"slot already used (%d, %d)\", posX, posY)\n\t}\n\n\t// play\n\tplayerVal := rune(g.turnCtr%2) + 1 // player1=1, player2=2\n\tg.board[idx] = playerVal\n\n\t// check if win\n\tif g.checkLastMoveWon(posX, posY) {\n\t\tg.winnerIdx = g.turnCtr\n\t}\n\n\t// change turn\n\tg.turnCtr++\n\treturn nil\n}\n\nfunc (g Game) WouldWin(side rune, x, y int) bool {\n\tidx := xyToIdx(x, y)\n\tif g.board[idx] != rune(0) {\n\t\tpanic(\"tile should be empty\")\n\t}\n\t// place rune temporarily\n\tg.board[idx] = side\n\tb := g.checkLastMoveWon(x, y)\n\tg.board[idx] = rune(0)\n\treturn b\n}\n\nfunc (g Game) checkLastMoveWon(posX, posY int) bool {\n\t// assumes the game wasn't won yet, and that the move was already applied.\n\n\t// check vertical line\n\t{\n\t\ta := g.At(posX, 0)\n\t\tb := g.At(posX, 1)\n\t\tc := g.At(posX, 2)\n\t\tif a == b \u0026\u0026 b == c {\n\t\t\treturn true\n\t\t}\n\t}\n\n\t// check horizontal line\n\t{\n\t\ta := g.At(0, posY)\n\t\tb := g.At(1, posY)\n\t\tc := g.At(2, posY)\n\t\tif a == b \u0026\u0026 b == c {\n\t\t\treturn true\n\t\t}\n\t}\n\n\t// diagonals\n\t{\n\t\ttl := g.At(0, 0)\n\t\ttr := g.At(0, 2)\n\t\tbl := g.At(2, 0)\n\t\tbr := g.At(2, 2)\n\t\tc := g.At(1, 1)\n\t\tif posX == posY \u0026\u0026 tl == c \u0026\u0026 c == br {\n\t\t\treturn true\n\t\t}\n\t\tif posX+posY == 2 \u0026\u0026 tr == c \u0026\u0026 c == bl {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc (g Game) At(posX, posY int) rune { return g.board[xyToIdx(posX, posY)] }\nfunc (g Game) Winner() std.Address    { return g.PlayerByIndex(g.winnerIdx) }\nfunc (g Game) Turn() std.Address      { return g.PlayerByIndex(g.turnCtr) }\nfunc (g Game) TurnNumber() int        { return g.turnCtr }\nfunc (g Game) IsDraw() bool           { return g.turnCtr \u003e 8 \u0026\u0026 g.winnerIdx == -1 }\nfunc (g Game) Started() bool          { return g.turnCtr \u003e= 0 }\n\nfunc (g Game) IsOver() bool {\n\t// draw\n\tif g.turnCtr \u003e 8 {\n\t\treturn true\n\t}\n\n\t// winner\n\treturn g.Winner() != std.Address(\"\")\n}\n\nfunc (g Game) Output() string {\n\toutput := \"\"\n\n\tfor y := 2; y \u003e= 0; y-- {\n\t\tfor x := 0; x \u003c 3; x++ {\n\t\t\tval := g.At(x, y)\n\t\t\tswitch val {\n\t\t\tcase 0:\n\t\t\t\toutput += \"-\"\n\t\t\tcase 1:\n\t\t\t\toutput += \"O\"\n\t\t\tcase 2:\n\t\t\t\toutput += \"X\"\n\t\t\t}\n\t\t}\n\t\toutput += \"\\n\"\n\t}\n\n\treturn output\n}\n\nfunc (g Game) PlayerByIndex(idx int) std.Address {\n\tswitch idx % 2 {\n\tcase 0:\n\t\treturn g.player1\n\tcase 1:\n\t\treturn g.player2\n\tdefault:\n\t\treturn std.Address(\"\")\n\t}\n}\n\nfunc xyToIdx(x, y int) int { return y*3 + x }\n"}]},"deposit":"100000ugnot"}],"fee":{"gas_wanted":"100000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1sQrIl4krsBIKtCTfMqWzbkKQDSfmPtMYQA9EvsJqmu"},"signature":"PTeKElZCLpMK6DCtoc+L+bvW1wIOd+AfJjzgi8Zfe+oed/giZ28RUhEFrJrcOo2Fj0PMlma1a5y3AYPrmSj57w=="}],"memo":""},"blockNum":"949162"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fjh9y7ausp27dqsdq0qrcsnmgvwm6829v2au7d","package":{"name":"tictactoe1p","path":"gno.land/p/grepsuzette/pr2554/v1/tictactoe/tictactoe1p","files":[{"name":"1pvscpu.gno","body":"package tictactoe1p\n\n// a 1P-vs-CPU tictactoe\n// extending moul's tictactoe model\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/grepsuzette/pr2554/v1/tictactoe\"\n\t\"gno.land/p/grepsuzette/pr2554/v1/ufmt\"\n)\n\n// 1P-VS-CPU is a tictactoe game\ntype Game struct {\n\t*tictactoe.Game\n\tcpu      std.Address\n\tIntn     func(n int) int\n\tpickMove func(g *tictactoe.Game, Intn func(int) int) (x, y int, e error) // AI function\n}\n\n// \"\" is a whole new game, whether CPU goes first is random.\n// \"---------\"` OTOH indicates a game where cpu /declined/ to go first.\n// fRand is a user-supplied func returning a random number in [0, n(\n// fPickMove is nil (uses averageDifficulty) or a func used for CPU to pick moves\nfunc GameFromRepr(\n\ttext string,\n\tcpu, human std.Address,\n\tfRand func(int) int,\n\tfPickMove func(*tictactoe.Game, func(int) int,\n\t) (x, y int, e error),\n) (*Game, error) {\n\taddr1, addr2 := decideOrder(cpu, human, text, fRand)\n\n\tvar g *tictactoe.Game\n\tvar e error\n\tswitch len(text) {\n\tcase 0:\n\t\tg, e = tictactoe.NewGame(addr1, addr2)\n\t\tg.Start()\n\tcase 9:\n\t\tr := []rune(text)\n\t\tg, e = tictactoe.RecoverGame(\n\t\t\taddr1,\n\t\t\taddr2,\n\t\t\tstring([]rune{\n\t\t\t\tr[6], r[7], r[8],\n\t\t\t\tr[3], r[4], r[5],\n\t\t\t\tr[0], r[1], r[2],\n\t\t\t}),\n\t\t)\n\tdefault:\n\t\treturn nil, errors.New(\"invalid board length\")\n\t}\n\tif fPickMove == nil {\n\t\tfPickMove = averageDifficulty\n\t}\n\treturn \u0026Game{g, cpu, fRand, fPickMove}, e\n}\n\nfunc (game Game) ToRepr() string {\n\treturn strings.ReplaceAll(game.Output(), \"\\n\", \"\")\n}\n\nfunc (game Game) IsCpuFirst() bool {\n\treturn game.PlayerByIndex(0) == game.cpu\n}\n\nfunc (game *Game) PlayCPU() (x, y int, e error) {\n\tswitch {\n\tcase game.Turn() != game.cpu:\n\t\treturn -1, -1, ufmt.Errorf(\n\t\t\t\"not my turn (%s), turn is %s's\",\n\t\t\tgame.cpu.String(), game.Turn().String(),\n\t\t)\n\tcase game.IsOver():\n\t\treturn -1, -1, errors.New(\"game is over\")\n\tdefault:\n\t\tx, y, _ = game.pickMove(game.Game, game.Intn)\n\t\te = game.Play(game.cpu, x, y)\n\t\treturn x, y, e\n\t}\n}\n\n// Decide who go first, based on the count of markers.\n// No error. A special and important case is the empty board,\n// meaning player to go first is random.\n// fRand is a user-supplied func returning a random number in [0, n(\nfunc decideOrder(cpu, human std.Address, board string, fRand func(int) int) (addr1, addr2 std.Address) {\n\tvar cpuFirst bool\n\tif board == \"\" {\n\t\tcpuFirst = fRand(2) == 0\n\t} else {\n\t\tnumO := strings.Count(board, \"O\") + strings.Count(board, \"o\")\n\t\tnumX := strings.Count(board, \"X\") + strings.Count(board, \"x\")\n\t\tcpuFirst = numX != numO\n\t}\n\tif cpuFirst {\n\t\treturn cpu, human\n\t} else {\n\t\treturn human, cpu\n\t}\n}\n"},{"name":"README.md","body":"# 1PvsCPU tictactoe\n\nExtends [p/demo/tictactoe](https://gno.land/p/demo/tictactoe/).\nThose games specifically are one player vs a computer.\n\nTry it [here](https://test4.gno.land/r/grepsuzette/pr2554/v1/games/tictactoe).\n"},{"name":"ai.gno","body":"package tictactoe1p\n\nimport (\n\t\"errors\"\n\n\t\"gno.land/p/grepsuzette/pr2554/v1/tictactoe\"\n)\n\n// the default move picker.\nfunc averageDifficulty(game *tictactoe.Game, Intn func(int) int) (x, y int, e error) {\n\t// candidates\n\ta := make([]struct{ x, y int }, 0)\n\tside := rune(1 + game.TurnNumber()%2)\n\tfor y := 0; y \u003c= 2; y++ {\n\t\tfor x := 0; x \u003c= 2; x++ {\n\t\t\tif game.At(x, y) != rune(0) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t// if can wins (and can see it), then win\n\t\t\tif game.WouldWin(side, x, y) \u0026\u0026 Intn(5) \u003e 0 {\n\t\t\t\treturn x, y, nil\n\t\t\t}\n\t\t\ta = append(a, struct{ x, y int }{x, y})\n\t\t}\n\t}\n\tif len(a) == 0 {\n\t\treturn -1, -1, errors.New(\"no free tile left\")\n\t} else {\n\t\t// random pick among candidates\n\t\tc := a[Intn(len(a))]\n\t\treturn c.x, c.y, nil\n\t}\n}\n"}]},"deposit":"100000ugnot"}],"fee":{"gas_wanted":"100000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1sQrIl4krsBIKtCTfMqWzbkKQDSfmPtMYQA9EvsJqmu"},"signature":"AuHcQtT73Q3NzfzgiBJihBjot4V6/oRhiOMJU1Ov5KBRE7rqhhPFvqD6tEBVChxCmm+vAG+75icvs3/5sjkJ/w=="}],"memo":""},"blockNum":"949265"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fjh9y7ausp27dqsdq0qrcsnmgvwm6829v2au7d","package":{"name":"ternary","path":"gno.land/p/grepsuzette/pr2554/v1/ternary","files":[{"name":"README.md","body":"# Ternary package\n\nTernary operator have notoriously been absent from Go \nfrom its inception.\n\nThis package proposes ternary functions.\n\nWe don't advocate for their systematic use, but \nit can often prove useful when realms need to generate \nMarkdown, \n\n## Usage\n```go\nimport \"p/demo/ternary\"\n\nfunc Render(path string) string {\n    // display appropriate greeting\n    return \"# \" + ternary.String(isEarly, \"hi\", \"bye\")\n}\n```\n\nAnother example: \n\n`f := ternary.Float64(useGoldenRatio, 1.618, 1.66)`\n\n## List of functions\n\nMost native types got a function.\n\nNote: both branches yes/no get evaluated, contrarily to the C operator.\nPlease don't use this if your branches are expensive.\n\nFunctions:\n\n* func String(cond bool, yes, no string) string\n* func Int(cond bool, yes, no int) int\n* func Int8(cond bool, yes, no int8) int8 \n* func Int16(cond bool, yes, no int16) int16 \n* func Int32(cond bool, yes, no int32) int32 \n* func Int64(cond bool, yes, no int64) int64 \n* func Uint(cond bool, yes, no uint) uint \n* func Uint8(cond bool, yes, no uint8) uint8 \n* func Uint16(cond bool, yes, no uint16) uint16 \n* func Uint32(cond bool, yes, no uint32) uint32 \n* func Uint64(cond bool, yes, no uint64) uint64 \n* func Float32(cond bool, yes, no float32) float32 \n* func Float64(cond bool, yes, no float64) float64 \n* func Rune(cond bool, yes, no rune) rune \n* func Bool(cond bool, yes, no bool) rune \n* func Address(cond bool, std.Address, std.Address) std.Address\n\n"},{"name":"ternary.gno","body":"package ternary\n\nimport \"std\"\n\nfunc String(cond bool, yes, no string) string {\n\tif cond {\n\t\treturn yes\n\t}\n\treturn no\n}\n\nfunc Int(cond bool, yes, no int) int {\n\tif cond {\n\t\treturn yes\n\t}\n\treturn no\n}\n\nfunc Int8(cond bool, yes, no int8) int8 {\n\tif cond {\n\t\treturn yes\n\t}\n\treturn no\n}\n\nfunc Int16(cond bool, yes, no int16) int16 {\n\tif cond {\n\t\treturn yes\n\t}\n\treturn no\n}\n\nfunc Int32(cond bool, yes, no int32) int32 {\n\tif cond {\n\t\treturn yes\n\t}\n\treturn no\n}\n\nfunc Int64(cond bool, yes, no int64) int64 {\n\tif cond {\n\t\treturn yes\n\t}\n\treturn no\n}\n\nfunc Uint(cond bool, yes, no uint) uint {\n\tif cond {\n\t\treturn yes\n\t}\n\treturn no\n}\n\nfunc Uint8(cond bool, yes, no uint8) uint8 {\n\tif cond {\n\t\treturn yes\n\t}\n\treturn no\n}\n\nfunc Uint16(cond bool, yes, no uint16) uint16 {\n\tif cond {\n\t\treturn yes\n\t}\n\treturn no\n}\n\nfunc Uint32(cond bool, yes, no uint32) uint32 {\n\tif cond {\n\t\treturn yes\n\t}\n\treturn no\n}\n\nfunc Uint64(cond bool, yes, no uint64) uint64 {\n\tif cond {\n\t\treturn yes\n\t}\n\treturn no\n}\n\nfunc Float32(cond bool, yes, no float32) float32 {\n\tif cond {\n\t\treturn yes\n\t}\n\treturn no\n}\n\nfunc Float64(cond bool, yes, no float64) float64 {\n\tif cond {\n\t\treturn yes\n\t}\n\treturn no\n}\n\nfunc Rune(cond bool, yes, no rune) rune {\n\tif cond {\n\t\treturn yes\n\t}\n\treturn no\n}\n\nfunc Bool(cond bool, yes, no bool) bool {\n\tif cond {\n\t\treturn yes\n\t}\n\treturn no\n}\n\nfunc Address(cond bool, yes, no std.Address) std.Address {\n\tif cond {\n\t\treturn yes\n\t}\n\treturn no\n}\n"}]},"deposit":"100000ugnot"}],"fee":{"gas_wanted":"100000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1sQrIl4krsBIKtCTfMqWzbkKQDSfmPtMYQA9EvsJqmu"},"signature":"PtcnP2GtZuDqA+a9I8x57yH4y/k/saeZdMsodHNVQTUdzskLyper5xWsV9mGNf5Qgr5b9q7PElHupsWZG9SaTQ=="}],"memo":""},"blockNum":"949295"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fjh9y7ausp27dqsdq0qrcsnmgvwm6829v2au7d","package":{"name":"games","path":"gno.land/r/grepsuzette/pr2554/v1/games","files":[{"name":"games.gno","body":"package games\n\nimport (\n\t\"strings\"\n\n\t\"gno.land/p/grepsuzette/pr2554/v1/ufmt\"\n)\n\nfunc Render(path string) string {\n\treturn \"#### r/demo/games\\n\\n\" +\n\t\t\"A collection of small games written in the Gno language:\\n\\n\" +\n\t\trenderGames() + \"\\n\\n\"\n}\n\nfunc renderGames() string {\n\tvar b strings.Builder\n\tfor _, o := range []struct {\n\t\ttitle, path string\n\t\tauthors     []string\n\t\tdesc        string\n\t}{\n\t\t{\"tictactoe\", \"games/tictactoe\", []string{\"grepsuzette\", \"moul\"}, \"CPU vs Human tictactoe, no need for a wallet\"},\n\t} {\n\t\tb.WriteString(ufmt.Sprintf(\n\t\t\t\"* [%s](%s): %s\\n\",\n\t\t\to.title, o.path,\n\t\t\to.desc,\n\t\t\t// when we have many authors, we can also show them\n\t\t\t// for now it's not very interesting\n\t\t\t// RenderAuthors(o.authors, \"@\"),\n\t\t))\n\t}\n\treturn b.String()\n}\n\n// [\"a\", \"b\", \"c\"] -\u003e \"a, b and c\"\n// Typical prefix is \"@\": \"a\", \"b\", \"c\" -\u003e \"@a, @b and @c\"\nfunc RenderAuthors(authors []string, optionalPrefix ...string) string {\n\ta := []string{}\n\tprefix := \"\"\n\tif len(optionalPrefix) \u003e 0 {\n\t\tprefix = optionalPrefix[0]\n\t}\n\tfor _, author := range authors {\n\t\ta = append(a, prefix+author)\n\t}\n\tswitch len(a) {\n\tcase 0:\n\t\treturn \"*?*\"\n\tcase 1:\n\t\treturn a[0]\n\tdefault:\n\t\treturn strings.Join(a[0:len(a)-1], \", \") + \" and \" + a[len(a)-1]\n\t}\n}\n"}]},"deposit":"100000ugnot"}],"fee":{"gas_wanted":"100000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1sQrIl4krsBIKtCTfMqWzbkKQDSfmPtMYQA9EvsJqmu"},"signature":"ZLehRaRRK/czJNFl1yzYTpFpbMZiLTSZ4fOi9G9+6tguZ/hfUgQw5Lk9GQqCVcWOoxfPtDH0NMK5HHqdDCLSNQ=="}],"memo":""},"blockNum":"949458"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fjh9y7ausp27dqsdq0qrcsnmgvwm6829v2au7d","package":{"name":"tictactoe","path":"gno.land/r/grepsuzette/pr2554/v1/games/tictactoe","files":[{"name":"README.md","body":"# Player VS CPU tic-tac-toe\n\n* Human VS CPU\n* aims to start experimenting with lowtech UI\n* stateless\n* no wallet required\n\nReusing moul's tic-tac-toe logic.\n\n```\n     (\\           Thanks for the wing!\n    (  \\  /(o)\\    Thanks for the wing!  \n    (   \\/  ()/ /)  Raaarch!  *Whistle*\n     (   `;.))'\".) \n      `(/////.-'\n   =====))=))===() \n     ///'       \n    //   PjP/ejm\n   '            \n```\n## Principle\n\n* `path` for Render is like `board=-X---O---\u0026move=a2`\n* no javascript,\n* only gnoweb markdown.\n\n## How the hell did Cap'n Cluck learn to play?\n\nI, Cap'n Cluck, had to learn from the most cunning and crafty of creatures – humans! I observed those barnacle-brained bilge-rats engaged in their most awesome game o' strategies, tic-tac-toe.\n\nThrough earhole-peepin', I picked up the patterns and strategies. I honed me beak on pieces o' eight, developin' a near-nautical sense o' spatial relationships! Aarrr, soon enough, I, Cap'n Cluck, became a veritable menace, matchin' wits with any landlubber brave enough to engage in a spot o' tic-tac-toe!\n\n"},{"name":"render.gno","body":"package tictactoe\n\n// Stateless human VS CPU Tic-tac-toe\n// Markdown + HTML1.0 + gnolang\n// no javascript, no wallet needed.\n\nimport (\n\t\"math/rand\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/grepsuzette/pr2554/v1/ternary\"\n\t\"gno.land/p/grepsuzette/pr2554/v1/tictactoe/tictactoe1p\"\n\t\"gno.land/p/grepsuzette/pr2554/v1/ufmt\"\n)\n\nconst (\n\tcpuAddress   = std.Address(\"gCPU\")\n\thumanAddress = std.Address(\"gHUMAN\")\n\turlParrot    = \"https://raw.githubusercontent.com/grepsuzette/gfx/master/parrot.png\"\n\tstatusWon    = \"Looks like you've won!\"\n\tstatusLost   = \"Sorry mate, you lost!\"\n\tstatusDraw   = \"It's a draw...\"\n)\n\nvar prng *rand.Rand\n\nfunc Intn(n int) int {\n\tif prng == nil {\n\t\t// Note: our PRNG is not stateful as calling Render is not going\n\t\t// to modify this stateless realm. We initialize it here when still nil\n\t\t// this creates the randomness we need (seeded from blockchain's height)\n\t\tprng = rand.New(rand.NewPCG(uint64(std.GetHeight()), uint64(9)))\n\t}\n\treturn prng.IntN(n)\n}\n\nfunc Render(path string) string {\n\tgame, x, y, debug := parsePath(path)\n\tif x != -1 \u0026\u0026 y != -1 {\n\t\tgame.Play(humanAddress, x, y)\n\t}\n\tcpuX, cpuY, e := game.PlayCPU()\n\toutput := parrotTalk(*game)\n\toutput += render(*game, cpuX, cpuY)\n\tif debug {\n\t\toutput += ufmt.Sprintf(\n\t\t\t\"--- played x=%d y=%d cpuX=%d cpuY=%d height=%d path=%s turn:%d error:%s\",\n\t\t\tx, y, cpuX, cpuY, std.GetHeight(), path, game.Game.TurnNumber(), e,\n\t\t)\n\t}\n\treturn output\n}\n\n// Lower-case render is simply called by Render.\n// Note the \u003cform\u003e (below) could be a \u003cdiv\u003e. If some day\n// realms can access GET and POST variables, then regular\n// \u003cbutton\u003e can be used. \u003cform\u003e is kept to remember that.\nfunc render(game tictactoe1p.Game, cpuX, cpuY int) string {\n\tstatus, class := statusAndClass(game)\n\trepr := game.ToRepr()\n\toutput := css()\n\toutput += `\u003cform id=\"board\" class=\"` + class + `\"\u003e` + \"\\n\"\n\t// output += \"\\t\" + `\u003cinput type=\"hidden\" name=\"state\" value=\"` + repr + `\"\u003e` + \"\\n\"\n\toutput += `\u003cdiv id=\"left\"\u003e\u003cimg src=\"` + urlParrot + `\" id=\"parrot\" width=\"120\" height=\"120\" align=\"left\" /\u003e\u003c/div\u003e` + \"\\n\"\n\toutput += `\u003cdiv id=\"right\"\u003e`\n\n\tfor y := 2; y \u003e= 0; y-- {\n\t\toutput += \"\\t\"\n\t\tfor x := 0; x \u003c= 2; x++ {\n\t\t\truneAtXY := game.At(x, y)\n\t\t\toccupied := runeAtXY != rune(0)\n\t\t\tif occupied {\n\t\t\t\thighlighted := x == cpuX \u0026\u0026 y == cpuY\n\t\t\t\toutput += button(x, y, ternary.String(runeAtXY == rune(1), \"O\", \"X\"), true, highlighted, repr)\n\t\t\t} else if game.IsOver() {\n\t\t\t\toutput += button(x, y, \"\u0026nbsp;\", true, false, repr)\n\t\t\t} else {\n\t\t\t\t// tile is free, but :hover must show\n\t\t\t\tcpu1st := game.Game.PlayerByIndex(0) == cpuAddress\n\t\t\t\toutput += button(x, y, ternary.String(cpu1st, \"X\", \"O\"), false, false, repr)\n\t\t\t}\n\t\t}\n\t\toutput += \"\u003cbr /\u003e\\n\"\n\t}\n\toutput += \"\u003c/div\u003e\\n\"\n\toutput += \"\u003c/form\u003e\\n\"\n\tif game.IsOver() {\n\t\toutput += ufmt.Sprintf(\n\t\t\t\"\\n%s [ %s | %s ]\\n\",\n\t\t\tstatus,\n\t\t\t\"[New game](/r/demo/games/tictactoe)\",\n\t\t\t\"[Back to demo/games](/r/demo/games)\",\n\t\t)\n\t} else {\n\t\toutput += \"\\n[Okay country roads, take me home](/r/demo/games)\"\n\t}\n\treturn output\n}\n\nfunc button(x, y int, char string, occupied, highlighted bool, repr string) string {\n\treturn ufmt.Sprintf(\n\t\t`\u003ca href=\"/r/demo/games/tictactoe:state=%s\u0026move=%c%d\" class=\"button tile %s %s\"\u003e%s\u003c/a\u003e`,\n\t\trepr,\n\t\trune('a'+x), y+1,\n\t\tternary.String(occupied, \"disabled\", \"\"),\n\t\tternary.String(highlighted, \"highlighted\", \"\"),\n\t\tchar,\n\t)\n}\n\n// return status and class(es).\n// it's empty when the game is not over.\nfunc statusAndClass(game tictactoe1p.Game) (status string, classes string) {\n\tif game.IsOver() {\n\t\tswitch {\n\t\tcase game.Winner() == humanAddress:\n\t\t\tclasses = \"over won\"\n\t\t\tstatus = statusWon\n\t\tcase game.Winner() == cpuAddress:\n\t\t\tclasses = \"over lost\"\n\t\t\tstatus = statusLost\n\t\tdefault:\n\t\t\tclasses = \"over draw\"\n\t\t\tstatus = statusDraw\n\t\t}\n\t}\n\treturn\n}\n\n// Decompose path, into valid game and played coordinates (or -1,-1)\n// The path is like \"state=O--X-----\u0026move=c3\"\n//\n//   - state is empty or 9 characters,\n//     imagine the following but without the \\n: \"-OX\\nO--\\n---\".\n//     O always plays first.\n//\n//   - move coordinate ranges from \"a1\" to \"c3\" but can be empty.\n//\n//   - debug \u0026debug enables printing of a debug line.\nfunc parsePath(path string) (game *tictactoe1p.Game, x, y int, debug bool) {\n\th, e := BreakToMap(path)\n\tif e != nil {\n\t\tpanic(e)\n\t}\n\t// nil: default AI\n\tgame, e = tictactoe1p.GameFromRepr(h[\"state\"], cpuAddress, humanAddress, Intn, nil)\n\tif e != nil {\n\t\tpanic(e)\n\t}\n\t_, debug = h[\"debug\"]\n\tx, y = -1, -1\n\tfor i, xx := range h[\"move\"] {\n\t\tswitch i {\n\t\tcase 0:\n\t\t\tx = int(xx) - int('a')\n\t\tcase 1:\n\t\t\ty = int(xx) - int('1')\n\t\tdefault:\n\t\t\tpanic(\"invalid move: \" + h[\"move\"])\n\t\t}\n\t}\n\treturn game, x, y, debug\n}\n\nfunc parrotTalk(game tictactoe1p.Game) string {\n\tvar a []string\n\tswitch {\n\tcase !game.IsOver():\n\t\ta = []string{\n\t\t\t\"Let's play Tic-tac-toe!\",\n\t\t\t\"Cap'n Cluck, am here and ready to rule the high seas of tic-tac-toe!\",\n\t\t\t\"Aarrr, we'll see who'll be top parrot on this jolly board.\",\n\t\t\t\"The stakes are higher than the mast of a sunken galleon!\",\n\t\t}\n\tcase game.IsDraw():\n\t\ta = []string{\n\t\t\t\"Three cheers for Yers Truly, Cap'n! It's a draw.\",\n\t\t\t\"It's a draw, sailor...\",\n\t\t\t\"This match ends in neither victory nor defeat, but a draw!\",\n\t\t}\n\tcase game.Winner().String() == cpuAddress.String():\n\t\ta = []string{\n\t\t\t\"Alrighty, mateys! Who's the bravest birdy of the seven seas!\",\n\t\t\t\"Avast, ye scallywags, for I won this game\",\n\t\t\t\"Remember, me hearties, even in victory, Cap'n Cluck remains a humble scallywag.\",\n\t\t\t\"Aarrr, parrot power prevails again!\",\n\t\t\t\"Cap'n Cluck claims the prize!\",\n\t\t\t\"The high seas crown me king o' the game!\",\n\t\t}\n\tcase game.Winner().String() != cpuAddress.String():\n\t\ta = []string{\n\t\t\t\"Ye bested a bold parrot on this day!\",\n\t\t\t\"Cap'n Cluck, beaten by a buccaneer? Nay, 'tis unbirdable!\",\n\t\t\t\"Aarrr, this be the day I, Cap'n Cluck, ate me parroted pirate's words! But fear not, for I shall be back!\",\n\t\t\t\"Ye bested this parrot, but amongst feathery fiends, revenge is ripe!\",\n\t\t\t\"Despite this defeat, remember, I, Cap'n Cluck, am not a chicken when it comes to tic-tac-toe!\",\n\t\t}\n\t}\n\ts := a[Intn(len(a))]\n\treturn ufmt.Sprintf(\"\u003cdiv\u003e\u003cb\u003e%s\u003c/b\u003e\u003cbr /\u003e\"+strings.Repeat(\"\u0026nbsp;\", 17)+\"/\u003c/div\u003e\", s)\n}\n\nfunc css() string {\n\treturn `\n\u003cstyle type=\"text/css\"\u003e\n\t/* responsive stuffs */\n\t#board { \n\t\tdisplay: flex; \n\t\tflex-direction: row;\n\t}\n\t#board \u003e #left {\n\t\tflex-shrink: 1;\n\t}\n\t#board \u003e #right {\n\t\tflex-shrink: 0;\n\t\tflex-basis: auto;\n\t\twidth: 9.5em;\n\t}\n\t/* buttons, and parrot */\n\t#board a.tile.button { \n\t  appearance: button;\n\t  box-sizing: border-box;\n\t  margin: 0;\n\t  font-weight: bold;\n\t  display: inline-block;\n\t  background-color: #eee;\n\t  border-color: rgb(227, 227, 227);\n\t  border-style: outset;\n\t  border-width: 1px;\n\t  border-collapse: separate;\n\t  text-decoration: none;\n\t  text-align: center;\n\t  line-height: 3em;\n\t}\n    #board button, #board a.tile.button { \n        width: 3em; height: 3em; \n        margin-right: 2px; margin-bottom: 2px; \n        cursor: pointer; \n        color: initial;\n\t\tborder-radius: 5px;\n    }\n\t#board.won button, #board.won a.tile.button  { box-shadow: aquamarine 1px 1px 12px 6px; }\n\t#board.lost button, #board.lost a.tile.button  { box-shadow: rgb(255, 200, 190) 0px 1px 34px 2px; }\n\t#board.draw button , #board.draw a.tile.button { box-shadow: rgb(200, 200, 200) 0px 1px 30px 8px; }\n\t#board button , #board a.tile.button { color: #888; }\n\t#board button:not([disabled]):hover, #board a.tile.button:not(.disabled):hover { \n        border-style: ridge; \n        box-shadow: inset -10px -10px 15px rgba(255, 255, 255, 0.5), \n                    inset 10px 10px 15px rgba(70, 70, 70, 0.12);\n\t\tborder-radius: 5px;\n    }\n    #board button[disabled], #board a.tile.button.disabled { cursor: default; }\n\t#board button:not([disabled]), #board a.tile.button:not(.disabled) { color: transparent; }\n\t#board button:not([disabled]):hover , #board a.tile.button:not(.disabled):hover { color: #888; text-transform: uppercase; }\n\t#board button.highlighted, #board a.tile.button.highlighted { color: chocolate; }\n    img#parrot {\n        -webkit-transform: scaleX(-1);\n        transform: scaleX(-1);\n        padding-left: 10px; \n\t\tmargin-right: 0.5em;\n    }\n\u003c/style\u003e\n`\n}\n\n// Break down a string of url parameters to map[string]string.\n// E.g. \"foo=a\u0026bar=b\" -\u003e (map[string]string{foo:\"a\", bar:\"b\"}, nil)\nfunc BreakToMap(querystring string) (map[string]string, error) {\n\tm := make(map[string]string)\n\tfor _, s := range strings.Split(querystring, \"\u0026\") {\n\t\tif len(strings.TrimSpace(s)) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tidx := strings.Index(s, \"=\")\n\t\tif idx \u003e -1 {\n\t\t\tm[s[:idx]] = s[idx+1:]\n\t\t} else {\n\t\t\tm[s] = \"\"\n\t\t}\n\t}\n\treturn m, nil\n}\n"}]},"deposit":"100000ugnot"}],"fee":{"gas_wanted":"100000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1sQrIl4krsBIKtCTfMqWzbkKQDSfmPtMYQA9EvsJqmu"},"signature":"TkIsLdS2SNczyGHhfD1FK2nXkR+lgkJ2yVmbIt1dy+85Gug4xd5pqZgy+07/t4nFY5TcsbYVpnU/UWX/RfRHqQ=="}],"memo":""},"blockNum":"949470"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fjh9y7ausp27dqsdq0qrcsnmgvwm6829v2au7d","package":{"name":"games","path":"gno.land/r/grepsuzette/pr2554/v2/games","files":[{"name":"games.gno","body":"package games\n\nimport (\n\t\"strings\"\n\n\t\"gno.land/p/grepsuzette/pr2554/v1/ufmt\"\n)\n\nfunc Render(path string) string {\n\treturn \"#### r/demo/games\\n\\n\" +\n\t\t\"A collection of small games written in the Gno language:\\n\\n\" +\n\t\trenderGames() + \"\\n\\n\"\n}\n\nfunc renderGames() string {\n\tvar b strings.Builder\n\tfor _, o := range []struct {\n\t\ttitle, path string\n\t\tauthors     []string\n\t\tdesc        string\n\t}{\n\t\t{\"tictactoe\", \"games/tictactoe\", []string{\"grepsuzette\", \"moul\"}, \"CPU vs Human tictactoe, no need for a wallet\"},\n\t} {\n\t\tb.WriteString(ufmt.Sprintf(\n\t\t\t\"* [%s](%s): %s\\n\",\n\t\t\to.title, o.path,\n\t\t\to.desc,\n\t\t\t// when we have many authors, we can also show them\n\t\t\t// for now it's not very interesting\n\t\t\t// RenderAuthors(o.authors, \"@\"),\n\t\t))\n\t}\n\treturn b.String()\n}\n\n// [\"a\", \"b\", \"c\"] -\u003e \"a, b and c\"\n// Typical prefix is \"@\": \"a\", \"b\", \"c\" -\u003e \"@a, @b and @c\"\nfunc RenderAuthors(authors []string, optionalPrefix ...string) string {\n\ta := []string{}\n\tprefix := \"\"\n\tif len(optionalPrefix) \u003e 0 {\n\t\tprefix = optionalPrefix[0]\n\t}\n\tfor _, author := range authors {\n\t\ta = append(a, prefix+author)\n\t}\n\tswitch len(a) {\n\tcase 0:\n\t\treturn \"*?*\"\n\tcase 1:\n\t\treturn a[0]\n\tdefault:\n\t\treturn strings.Join(a[0:len(a)-1], \", \") + \" and \" + a[len(a)-1]\n\t}\n}\n"}]},"deposit":"100000ugnot"}],"fee":{"gas_wanted":"100000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1sQrIl4krsBIKtCTfMqWzbkKQDSfmPtMYQA9EvsJqmu"},"signature":"NGIBKPSsuqOy5lehr0A546x3+BKLbljE1TmGhLrTzDc23+Cl0uxQodtsHWu5H3EEnat86sXfZ4dtxI3mnfwCzQ=="}],"memo":""},"blockNum":"949711"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fjh9y7ausp27dqsdq0qrcsnmgvwm6829v2au7d","package":{"name":"tictactoe","path":"gno.land/r/grepsuzette/pr2554/v2/games/tictactoe","files":[{"name":"README.md","body":"# Player VS CPU tic-tac-toe\n\n* Human VS CPU\n* aims to start experimenting with lowtech UI\n* stateless\n* no wallet required\n\nReusing moul's tic-tac-toe logic.\n\n```\n     (\\           Thanks for the wing!\n    (  \\  /(o)\\    Thanks for the wing!  \n    (   \\/  ()/ /)  Raaarch!  *Whistle*\n     (   `;.))'\".) \n      `(/////.-'\n   =====))=))===() \n     ///'       \n    //   PjP/ejm\n   '            \n```\n## Principle\n\n* `path` for Render is like `board=-X---O---\u0026move=a2`\n* no javascript,\n* only gnoweb markdown.\n\n## How the hell did Cap'n Cluck learn to play?\n\nI, Cap'n Cluck, had to learn from the most cunning and crafty of creatures – humans! I observed those barnacle-brained bilge-rats engaged in their most awesome game o' strategies, tic-tac-toe.\n\nThrough earhole-peepin', I picked up the patterns and strategies. I honed me beak on pieces o' eight, developin' a near-nautical sense o' spatial relationships! Aarrr, soon enough, I, Cap'n Cluck, became a veritable menace, matchin' wits with any landlubber brave enough to engage in a spot o' tic-tac-toe!\n\n"},{"name":"render.gno","body":"package tictactoe\n\n// Stateless human VS CPU Tic-tac-toe\n// Markdown + HTML1.0 + gnolang\n// no javascript, no wallet needed.\n\nimport (\n\t\"math/rand\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/grepsuzette/pr2554/v1/ternary\"\n\t\"gno.land/p/grepsuzette/pr2554/v1/tictactoe/tictactoe1p\"\n\t\"gno.land/p/grepsuzette/pr2554/v1/ufmt\"\n)\n\nconst (\n\tcpuAddress   = std.Address(\"gCPU\")\n\thumanAddress = std.Address(\"gHUMAN\")\n\turlParrot    = \"https://raw.githubusercontent.com/grepsuzette/gfx/master/parrot.png\"\n\tstatusWon    = \"Looks like you've won!\"\n\tstatusLost   = \"Sorry mate, you lost!\"\n\tstatusDraw   = \"It's a draw...\"\n)\n\nvar prng *rand.Rand\n\nconst rRoot = \"r/grepsuzette/pr2554/v2\"\n\nfunc Intn(n int) int {\n\tif prng == nil {\n\t\t// Note: our PRNG is not stateful as calling Render is not going\n\t\t// to modify this stateless realm. We initialize it here when still nil\n\t\t// this creates the randomness we need (seeded from blockchain's height)\n\t\tprng = rand.New(rand.NewPCG(uint64(std.GetHeight()), uint64(9)))\n\t}\n\treturn prng.IntN(n)\n}\n\nfunc Render(path string) string {\n\tgame, x, y, debug := parsePath(path)\n\tif x != -1 \u0026\u0026 y != -1 {\n\t\tgame.Play(humanAddress, x, y)\n\t}\n\tcpuX, cpuY, e := game.PlayCPU()\n\toutput := parrotTalk(*game)\n\toutput += render(*game, cpuX, cpuY)\n\tif debug {\n\t\toutput += ufmt.Sprintf(\n\t\t\t\"--- played x=%d y=%d cpuX=%d cpuY=%d height=%d path=%s turn:%d error:%s\",\n\t\t\tx, y, cpuX, cpuY, std.GetHeight(), path, game.Game.TurnNumber(), e,\n\t\t)\n\t}\n\treturn output\n}\n\n// Lower-case render is simply called by Render.\n// Note the \u003cform\u003e (below) could be a \u003cdiv\u003e. If some day\n// realms can access GET and POST variables, then regular\n// \u003cbutton\u003e can be used. \u003cform\u003e is kept to remember that.\nfunc render(game tictactoe1p.Game, cpuX, cpuY int) string {\n\tstatus, class := statusAndClass(game)\n\trepr := game.ToRepr()\n\toutput := css()\n\toutput += `\u003cform id=\"board\" class=\"` + class + `\"\u003e` + \"\\n\"\n\t// output += \"\\t\" + `\u003cinput type=\"hidden\" name=\"state\" value=\"` + repr + `\"\u003e` + \"\\n\"\n\toutput += `\u003cdiv id=\"left\"\u003e\u003cimg src=\"` + urlParrot + `\" id=\"parrot\" width=\"120\" height=\"120\" align=\"left\" /\u003e\u003c/div\u003e` + \"\\n\"\n\toutput += `\u003cdiv id=\"right\"\u003e`\n\n\tfor y := 2; y \u003e= 0; y-- {\n\t\toutput += \"\\t\"\n\t\tfor x := 0; x \u003c= 2; x++ {\n\t\t\truneAtXY := game.At(x, y)\n\t\t\toccupied := runeAtXY != rune(0)\n\t\t\tif occupied {\n\t\t\t\thighlighted := x == cpuX \u0026\u0026 y == cpuY\n\t\t\t\toutput += button(x, y, ternary.String(runeAtXY == rune(1), \"O\", \"X\"), true, highlighted, repr)\n\t\t\t} else if game.IsOver() {\n\t\t\t\toutput += button(x, y, \"\u0026nbsp;\", true, false, repr)\n\t\t\t} else {\n\t\t\t\t// tile is free, but :hover must show\n\t\t\t\tcpu1st := game.Game.PlayerByIndex(0) == cpuAddress\n\t\t\t\toutput += button(x, y, ternary.String(cpu1st, \"X\", \"O\"), false, false, repr)\n\t\t\t}\n\t\t}\n\t\toutput += \"\u003cbr /\u003e\\n\"\n\t}\n\toutput += \"\u003c/div\u003e\\n\"\n\toutput += \"\u003c/form\u003e\\n\"\n\tif game.IsOver() {\n\t\toutput += ufmt.Sprintf(\n\t\t\t\"\\n%s [ %s | %s ]\\n\",\n\t\t\tstatus,\n\t\t\t\"[New game](\"+rRoot+\"/games/tictactoe)\",\n\t\t\t\"[Back to demo/games](\"+rRoot+\"/games)\",\n\t\t)\n\t} else {\n\t\toutput += \"\\n[Okay country roads, take me home](\" + rRoot + \"/games)\"\n\t}\n\treturn output\n}\n\nfunc button(x, y int, char string, occupied, highlighted bool, repr string) string {\n\treturn ufmt.Sprintf(\n\t\t`\u003ca href=\"`+rRoot+`/games/tictactoe:state=%s\u0026move=%c%d\" class=\"button tile %s %s\"\u003e%s\u003c/a\u003e`,\n\t\trepr,\n\t\trune('a'+x), y+1,\n\t\tternary.String(occupied, \"disabled\", \"\"),\n\t\tternary.String(highlighted, \"highlighted\", \"\"),\n\t\tchar,\n\t)\n}\n\n// return status and class(es).\n// it's empty when the game is not over.\nfunc statusAndClass(game tictactoe1p.Game) (status string, classes string) {\n\tif game.IsOver() {\n\t\tswitch {\n\t\tcase game.Winner() == humanAddress:\n\t\t\tclasses = \"over won\"\n\t\t\tstatus = statusWon\n\t\tcase game.Winner() == cpuAddress:\n\t\t\tclasses = \"over lost\"\n\t\t\tstatus = statusLost\n\t\tdefault:\n\t\t\tclasses = \"over draw\"\n\t\t\tstatus = statusDraw\n\t\t}\n\t}\n\treturn\n}\n\n// Decompose path, into valid game and played coordinates (or -1,-1)\n// The path is like \"state=O--X-----\u0026move=c3\"\n//\n//   - state is empty or 9 characters,\n//     imagine the following but without the \\n: \"-OX\\nO--\\n---\".\n//     O always plays first.\n//\n//   - move coordinate ranges from \"a1\" to \"c3\" but can be empty.\n//\n//   - debug \u0026debug enables printing of a debug line.\nfunc parsePath(path string) (game *tictactoe1p.Game, x, y int, debug bool) {\n\th, e := BreakToMap(path)\n\tif e != nil {\n\t\tpanic(e)\n\t}\n\t// nil: default AI\n\tgame, e = tictactoe1p.GameFromRepr(h[\"state\"], cpuAddress, humanAddress, Intn, nil)\n\tif e != nil {\n\t\tpanic(e)\n\t}\n\t_, debug = h[\"debug\"]\n\tx, y = -1, -1\n\tfor i, xx := range h[\"move\"] {\n\t\tswitch i {\n\t\tcase 0:\n\t\t\tx = int(xx) - int('a')\n\t\tcase 1:\n\t\t\ty = int(xx) - int('1')\n\t\tdefault:\n\t\t\tpanic(\"invalid move: \" + h[\"move\"])\n\t\t}\n\t}\n\treturn game, x, y, debug\n}\n\nfunc parrotTalk(game tictactoe1p.Game) string {\n\tvar a []string\n\tswitch {\n\tcase !game.IsOver():\n\t\ta = []string{\n\t\t\t\"Let's play Tic-tac-toe!\",\n\t\t\t\"Cap'n Cluck, am here and ready to rule the high seas of tic-tac-toe!\",\n\t\t\t\"Aarrr, we'll see who'll be top parrot on this jolly board.\",\n\t\t\t\"The stakes are higher than the mast of a sunken galleon!\",\n\t\t}\n\tcase game.IsDraw():\n\t\ta = []string{\n\t\t\t\"Three cheers for Yers Truly, Cap'n! It's a draw.\",\n\t\t\t\"It's a draw, sailor...\",\n\t\t\t\"This match ends in neither victory nor defeat, but a draw!\",\n\t\t}\n\tcase game.Winner().String() == cpuAddress.String():\n\t\ta = []string{\n\t\t\t\"Alrighty, mateys! Who's the bravest birdy of the seven seas!\",\n\t\t\t\"Avast, ye scallywags, for I won this game\",\n\t\t\t\"Remember, me hearties, even in victory, Cap'n Cluck remains a humble scallywag.\",\n\t\t\t\"Aarrr, parrot power prevails again!\",\n\t\t\t\"Cap'n Cluck claims the prize!\",\n\t\t\t\"The high seas crown me king o' the game!\",\n\t\t}\n\tcase game.Winner().String() != cpuAddress.String():\n\t\ta = []string{\n\t\t\t\"Ye bested a bold parrot on this day!\",\n\t\t\t\"Cap'n Cluck, beaten by a buccaneer? Nay, 'tis unbirdable!\",\n\t\t\t\"Aarrr, this be the day I, Cap'n Cluck, ate me parroted pirate's words! But fear not, for I shall be back!\",\n\t\t\t\"Ye bested this parrot, but amongst feathery fiends, revenge is ripe!\",\n\t\t\t\"Despite this defeat, remember, I, Cap'n Cluck, am not a chicken when it comes to tic-tac-toe!\",\n\t\t}\n\t}\n\ts := a[Intn(len(a))]\n\treturn ufmt.Sprintf(\"\u003cdiv\u003e\u003cb\u003e%s\u003c/b\u003e\u003cbr /\u003e\"+strings.Repeat(\"\u0026nbsp;\", 17)+\"/\u003c/div\u003e\", s)\n}\n\nfunc css() string {\n\treturn `\n\u003cstyle type=\"text/css\"\u003e\n\t/* responsive stuffs */\n\t#board { \n\t\tdisplay: flex; \n\t\tflex-direction: row;\n\t}\n\t#board \u003e #left {\n\t\tflex-shrink: 1;\n\t}\n\t#board \u003e #right {\n\t\tflex-shrink: 0;\n\t\tflex-basis: auto;\n\t\twidth: 9.5em;\n\t}\n\t/* buttons, and parrot */\n\t#board a.tile.button { \n\t  appearance: button;\n\t  box-sizing: border-box;\n\t  margin: 0;\n\t  font-weight: bold;\n\t  display: inline-block;\n\t  background-color: #eee;\n\t  border-color: rgb(227, 227, 227);\n\t  border-style: outset;\n\t  border-width: 1px;\n\t  border-collapse: separate;\n\t  text-decoration: none;\n\t  text-align: center;\n\t  line-height: 3em;\n\t}\n    #board button, #board a.tile.button { \n        width: 3em; height: 3em; \n        margin-right: 2px; margin-bottom: 2px; \n        cursor: pointer; \n        color: initial;\n\t\tborder-radius: 5px;\n    }\n\t#board.won button, #board.won a.tile.button  { box-shadow: aquamarine 1px 1px 12px 6px; }\n\t#board.lost button, #board.lost a.tile.button  { box-shadow: rgb(255, 200, 190) 0px 1px 34px 2px; }\n\t#board.draw button , #board.draw a.tile.button { box-shadow: rgb(200, 200, 200) 0px 1px 30px 8px; }\n\t#board button , #board a.tile.button { color: #888; }\n\t#board button:not([disabled]):hover, #board a.tile.button:not(.disabled):hover { \n        border-style: ridge; \n        box-shadow: inset -10px -10px 15px rgba(255, 255, 255, 0.5), \n                    inset 10px 10px 15px rgba(70, 70, 70, 0.12);\n\t\tborder-radius: 5px;\n    }\n    #board button[disabled], #board a.tile.button.disabled { cursor: default; }\n\t#board button:not([disabled]), #board a.tile.button:not(.disabled) { color: transparent; }\n\t#board button:not([disabled]):hover , #board a.tile.button:not(.disabled):hover { color: #888; text-transform: uppercase; }\n\t#board button.highlighted, #board a.tile.button.highlighted { color: chocolate; }\n    img#parrot {\n        -webkit-transform: scaleX(-1);\n        transform: scaleX(-1);\n        padding-left: 10px; \n\t\tmargin-right: 0.5em;\n    }\n\u003c/style\u003e\n`\n}\n\n// Break down a string of url parameters to map[string]string.\n// E.g. \"foo=a\u0026bar=b\" -\u003e (map[string]string{foo:\"a\", bar:\"b\"}, nil)\nfunc BreakToMap(querystring string) (map[string]string, error) {\n\tm := make(map[string]string)\n\tfor _, s := range strings.Split(querystring, \"\u0026\") {\n\t\tif len(strings.TrimSpace(s)) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tidx := strings.Index(s, \"=\")\n\t\tif idx \u003e -1 {\n\t\t\tm[s[:idx]] = s[idx+1:]\n\t\t} else {\n\t\t\tm[s] = \"\"\n\t\t}\n\t}\n\treturn m, nil\n}\n"}]},"deposit":"100000ugnot"}],"fee":{"gas_wanted":"100000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1sQrIl4krsBIKtCTfMqWzbkKQDSfmPtMYQA9EvsJqmu"},"signature":"q3XyN04946RwF4hEj6T6E8PNJo9ZWUuH4kXKTRwt/Tcn4HhTuI2j0n3jz28Y43PvWZCrcKm8E6LlgXqm26N8bg=="}],"memo":""},"blockNum":"949720"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fjh9y7ausp27dqsdq0qrcsnmgvwm6829v2au7d","package":{"name":"games","path":"gno.land/r/grepsuzette/pr2554/v3/games","files":[{"name":"games.gno","body":"package games\n\nimport (\n\t\"strings\"\n\n\t\"gno.land/p/grepsuzette/pr2554/v1/ufmt\"\n)\n\nfunc Render(path string) string {\n\treturn \"#### r/demo/games\\n\\n\" +\n\t\t\"A collection of small games written in the Gno language:\\n\\n\" +\n\t\trenderGames() + \"\\n\\n\"\n}\n\nfunc renderGames() string {\n\tvar b strings.Builder\n\tfor _, o := range []struct {\n\t\ttitle, path string\n\t\tauthors     []string\n\t\tdesc        string\n\t}{\n\t\t{\"tictactoe\", \"games/tictactoe\", []string{\"grepsuzette\", \"moul\"}, \"CPU vs Human tictactoe, no need for a wallet\"},\n\t} {\n\t\tb.WriteString(ufmt.Sprintf(\n\t\t\t\"* [%s](%s): %s\\n\",\n\t\t\to.title, o.path,\n\t\t\to.desc,\n\t\t\t// when we have many authors, we can also show them\n\t\t\t// for now it's not very interesting\n\t\t\t// RenderAuthors(o.authors, \"@\"),\n\t\t))\n\t}\n\treturn b.String()\n}\n\n// [\"a\", \"b\", \"c\"] -\u003e \"a, b and c\"\n// Typical prefix is \"@\": \"a\", \"b\", \"c\" -\u003e \"@a, @b and @c\"\nfunc RenderAuthors(authors []string, optionalPrefix ...string) string {\n\ta := []string{}\n\tprefix := \"\"\n\tif len(optionalPrefix) \u003e 0 {\n\t\tprefix = optionalPrefix[0]\n\t}\n\tfor _, author := range authors {\n\t\ta = append(a, prefix+author)\n\t}\n\tswitch len(a) {\n\tcase 0:\n\t\treturn \"*?*\"\n\tcase 1:\n\t\treturn a[0]\n\tdefault:\n\t\treturn strings.Join(a[0:len(a)-1], \", \") + \" and \" + a[len(a)-1]\n\t}\n}\n"}]},"deposit":"100000ugnot"}],"fee":{"gas_wanted":"100000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1sQrIl4krsBIKtCTfMqWzbkKQDSfmPtMYQA9EvsJqmu"},"signature":"nRrfCBxmq6icNDtc1SXjbRffkmZc5decrUYUepY9WrRgyEX3T6RKAMfIp3qGkevRmhR5oc4lUwVm/w05owZgeQ=="}],"memo":""},"blockNum":"949804"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fjh9y7ausp27dqsdq0qrcsnmgvwm6829v2au7d","package":{"name":"tictactoe","path":"gno.land/r/grepsuzette/pr2554/v3/games/tictactoe","files":[{"name":"README.md","body":"# Player VS CPU tic-tac-toe\n\n* Human VS CPU\n* aims to start experimenting with lowtech UI\n* stateless\n* no wallet required\n\nReusing moul's tic-tac-toe logic.\n\n```\n     (\\           Thanks for the wing!\n    (  \\  /(o)\\    Thanks for the wing!  \n    (   \\/  ()/ /)  Raaarch!  *Whistle*\n     (   `;.))'\".) \n      `(/////.-'\n   =====))=))===() \n     ///'       \n    //   PjP/ejm\n   '            \n```\n## Principle\n\n* `path` for Render is like `board=-X---O---\u0026move=a2`\n* no javascript,\n* only gnoweb markdown.\n\n## How the hell did Cap'n Cluck learn to play?\n\nI, Cap'n Cluck, had to learn from the most cunning and crafty of creatures – humans! I observed those barnacle-brained bilge-rats engaged in their most awesome game o' strategies, tic-tac-toe.\n\nThrough earhole-peepin', I picked up the patterns and strategies. I honed me beak on pieces o' eight, developin' a near-nautical sense o' spatial relationships! Aarrr, soon enough, I, Cap'n Cluck, became a veritable menace, matchin' wits with any landlubber brave enough to engage in a spot o' tic-tac-toe!\n\n"},{"name":"render.gno","body":"package tictactoe\n\n// Stateless human VS CPU Tic-tac-toe\n// Markdown + HTML1.0 + gnolang\n// no javascript, no wallet needed.\n\nimport (\n\t\"math/rand\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/grepsuzette/pr2554/v1/ternary\"\n\t\"gno.land/p/grepsuzette/pr2554/v1/tictactoe/tictactoe1p\"\n\t\"gno.land/p/grepsuzette/pr2554/v1/ufmt\"\n)\n\nconst (\n\tcpuAddress   = std.Address(\"gCPU\")\n\thumanAddress = std.Address(\"gHUMAN\")\n\turlParrot    = \"https://raw.githubusercontent.com/grepsuzette/gfx/master/parrot.png\"\n\tstatusWon    = \"Looks like you've won!\"\n\tstatusLost   = \"Sorry mate, you lost!\"\n\tstatusDraw   = \"It's a draw...\"\n)\n\nvar prng *rand.Rand\n\nconst rRoot = \"/r/grepsuzette/pr2554/v3\"\n\nfunc Intn(n int) int {\n\tif prng == nil {\n\t\t// Note: our PRNG is not stateful as calling Render is not going\n\t\t// to modify this stateless realm. We initialize it here when still nil\n\t\t// this creates the randomness we need (seeded from blockchain's height)\n\t\tprng = rand.New(rand.NewPCG(uint64(std.GetHeight()), uint64(9)))\n\t}\n\treturn prng.IntN(n)\n}\n\nfunc Render(path string) string {\n\tgame, x, y, debug := parsePath(path)\n\tif x != -1 \u0026\u0026 y != -1 {\n\t\tgame.Play(humanAddress, x, y)\n\t}\n\tcpuX, cpuY, e := game.PlayCPU()\n\toutput := parrotTalk(*game)\n\toutput += render(*game, cpuX, cpuY)\n\tif debug {\n\t\toutput += ufmt.Sprintf(\n\t\t\t\"--- played x=%d y=%d cpuX=%d cpuY=%d height=%d path=%s turn:%d error:%s\",\n\t\t\tx, y, cpuX, cpuY, std.GetHeight(), path, game.Game.TurnNumber(), e,\n\t\t)\n\t}\n\treturn output\n}\n\n// Lower-case render is simply called by Render.\n// Note the \u003cform\u003e (below) could be a \u003cdiv\u003e. If some day\n// realms can access GET and POST variables, then regular\n// \u003cbutton\u003e can be used. \u003cform\u003e is kept to remember that.\nfunc render(game tictactoe1p.Game, cpuX, cpuY int) string {\n\tstatus, class := statusAndClass(game)\n\trepr := game.ToRepr()\n\toutput := css()\n\toutput += `\u003cform id=\"board\" class=\"` + class + `\"\u003e` + \"\\n\"\n\t// output += \"\\t\" + `\u003cinput type=\"hidden\" name=\"state\" value=\"` + repr + `\"\u003e` + \"\\n\"\n\toutput += `\u003cdiv id=\"left\"\u003e\u003cimg src=\"` + urlParrot + `\" id=\"parrot\" width=\"120\" height=\"120\" align=\"left\" /\u003e\u003c/div\u003e` + \"\\n\"\n\toutput += `\u003cdiv id=\"right\"\u003e`\n\n\tfor y := 2; y \u003e= 0; y-- {\n\t\toutput += \"\\t\"\n\t\tfor x := 0; x \u003c= 2; x++ {\n\t\t\truneAtXY := game.At(x, y)\n\t\t\toccupied := runeAtXY != rune(0)\n\t\t\tif occupied {\n\t\t\t\thighlighted := x == cpuX \u0026\u0026 y == cpuY\n\t\t\t\toutput += button(x, y, ternary.String(runeAtXY == rune(1), \"O\", \"X\"), true, highlighted, repr)\n\t\t\t} else if game.IsOver() {\n\t\t\t\toutput += button(x, y, \"\u0026nbsp;\", true, false, repr)\n\t\t\t} else {\n\t\t\t\t// tile is free, but :hover must show\n\t\t\t\tcpu1st := game.Game.PlayerByIndex(0) == cpuAddress\n\t\t\t\toutput += button(x, y, ternary.String(cpu1st, \"X\", \"O\"), false, false, repr)\n\t\t\t}\n\t\t}\n\t\toutput += \"\u003cbr /\u003e\\n\"\n\t}\n\toutput += \"\u003c/div\u003e\\n\"\n\toutput += \"\u003c/form\u003e\\n\"\n\tif game.IsOver() {\n\t\toutput += ufmt.Sprintf(\n\t\t\t\"\\n%s [ %s | %s ]\\n\",\n\t\t\tstatus,\n\t\t\t\"[New game](\"+rRoot+\"/games/tictactoe)\",\n\t\t\t\"[Back to demo/games](\"+rRoot+\"/games)\",\n\t\t)\n\t} else {\n\t\toutput += \"\\n[Okay country roads, take me home](\" + rRoot + \"/games)\"\n\t}\n\treturn output\n}\n\nfunc button(x, y int, char string, occupied, highlighted bool, repr string) string {\n\treturn ufmt.Sprintf(\n\t\t`\u003ca href=\"`+rRoot+`/games/tictactoe:state=%s\u0026move=%c%d\" class=\"button tile %s %s\"\u003e%s\u003c/a\u003e`,\n\t\trepr,\n\t\trune('a'+x), y+1,\n\t\tternary.String(occupied, \"disabled\", \"\"),\n\t\tternary.String(highlighted, \"highlighted\", \"\"),\n\t\tchar,\n\t)\n}\n\n// return status and class(es).\n// it's empty when the game is not over.\nfunc statusAndClass(game tictactoe1p.Game) (status string, classes string) {\n\tif game.IsOver() {\n\t\tswitch {\n\t\tcase game.Winner() == humanAddress:\n\t\t\tclasses = \"over won\"\n\t\t\tstatus = statusWon\n\t\tcase game.Winner() == cpuAddress:\n\t\t\tclasses = \"over lost\"\n\t\t\tstatus = statusLost\n\t\tdefault:\n\t\t\tclasses = \"over draw\"\n\t\t\tstatus = statusDraw\n\t\t}\n\t}\n\treturn\n}\n\n// Decompose path, into valid game and played coordinates (or -1,-1)\n// The path is like \"state=O--X-----\u0026move=c3\"\n//\n//   - state is empty or 9 characters,\n//     imagine the following but without the \\n: \"-OX\\nO--\\n---\".\n//     O always plays first.\n//\n//   - move coordinate ranges from \"a1\" to \"c3\" but can be empty.\n//\n//   - debug \u0026debug enables printing of a debug line.\nfunc parsePath(path string) (game *tictactoe1p.Game, x, y int, debug bool) {\n\th, e := BreakToMap(path)\n\tif e != nil {\n\t\tpanic(e)\n\t}\n\t// nil: default AI\n\tgame, e = tictactoe1p.GameFromRepr(h[\"state\"], cpuAddress, humanAddress, Intn, nil)\n\tif e != nil {\n\t\tpanic(e)\n\t}\n\t_, debug = h[\"debug\"]\n\tx, y = -1, -1\n\tfor i, xx := range h[\"move\"] {\n\t\tswitch i {\n\t\tcase 0:\n\t\t\tx = int(xx) - int('a')\n\t\tcase 1:\n\t\t\ty = int(xx) - int('1')\n\t\tdefault:\n\t\t\tpanic(\"invalid move: \" + h[\"move\"])\n\t\t}\n\t}\n\treturn game, x, y, debug\n}\n\nfunc parrotTalk(game tictactoe1p.Game) string {\n\tvar a []string\n\tswitch {\n\tcase !game.IsOver():\n\t\ta = []string{\n\t\t\t\"Let's play Tic-tac-toe!\",\n\t\t\t\"Cap'n Cluck, am here and ready to rule the high seas of tic-tac-toe!\",\n\t\t\t\"Aarrr, we'll see who'll be top parrot on this jolly board.\",\n\t\t\t\"The stakes are higher than the mast of a sunken galleon!\",\n\t\t}\n\tcase game.IsDraw():\n\t\ta = []string{\n\t\t\t\"Three cheers for Yers Truly, Cap'n! It's a draw.\",\n\t\t\t\"It's a draw, sailor...\",\n\t\t\t\"This match ends in neither victory nor defeat, but a draw!\",\n\t\t}\n\tcase game.Winner().String() == cpuAddress.String():\n\t\ta = []string{\n\t\t\t\"Alrighty, mateys! Who's the bravest birdy of the seven seas!\",\n\t\t\t\"Avast, ye scallywags, for I won this game\",\n\t\t\t\"Remember, me hearties, even in victory, Cap'n Cluck remains a humble scallywag.\",\n\t\t\t\"Aarrr, parrot power prevails again!\",\n\t\t\t\"Cap'n Cluck claims the prize!\",\n\t\t\t\"The high seas crown me king o' the game!\",\n\t\t}\n\tcase game.Winner().String() != cpuAddress.String():\n\t\ta = []string{\n\t\t\t\"Ye bested a bold parrot on this day!\",\n\t\t\t\"Cap'n Cluck, beaten by a buccaneer? Nay, 'tis unbirdable!\",\n\t\t\t\"Aarrr, this be the day I, Cap'n Cluck, ate me parroted pirate's words! But fear not, for I shall be back!\",\n\t\t\t\"Ye bested this parrot, but amongst feathery fiends, revenge is ripe!\",\n\t\t\t\"Despite this defeat, remember, I, Cap'n Cluck, am not a chicken when it comes to tic-tac-toe!\",\n\t\t}\n\t}\n\ts := a[Intn(len(a))]\n\treturn ufmt.Sprintf(\"\u003cdiv\u003e\u003cb\u003e%s\u003c/b\u003e\u003cbr /\u003e\"+strings.Repeat(\"\u0026nbsp;\", 17)+\"/\u003c/div\u003e\", s)\n}\n\nfunc css() string {\n\treturn `\n\u003cstyle type=\"text/css\"\u003e\n\t/* responsive stuffs */\n\t#board { \n\t\tdisplay: flex; \n\t\tflex-direction: row;\n\t}\n\t#board \u003e #left {\n\t\tflex-shrink: 1;\n\t}\n\t#board \u003e #right {\n\t\tflex-shrink: 0;\n\t\tflex-basis: auto;\n\t\twidth: 9.5em;\n\t}\n\t/* buttons, and parrot */\n\t#board a.tile.button { \n\t  appearance: button;\n\t  box-sizing: border-box;\n\t  margin: 0;\n\t  font-weight: bold;\n\t  display: inline-block;\n\t  background-color: #eee;\n\t  border-color: rgb(227, 227, 227);\n\t  border-style: outset;\n\t  border-width: 1px;\n\t  border-collapse: separate;\n\t  text-decoration: none;\n\t  text-align: center;\n\t  line-height: 3em;\n\t}\n    #board button, #board a.tile.button { \n        width: 3em; height: 3em; \n        margin-right: 2px; margin-bottom: 2px; \n        cursor: pointer; \n        color: initial;\n\t\tborder-radius: 5px;\n    }\n\t#board.won button, #board.won a.tile.button  { box-shadow: aquamarine 1px 1px 12px 6px; }\n\t#board.lost button, #board.lost a.tile.button  { box-shadow: rgb(255, 200, 190) 0px 1px 34px 2px; }\n\t#board.draw button , #board.draw a.tile.button { box-shadow: rgb(200, 200, 200) 0px 1px 30px 8px; }\n\t#board button , #board a.tile.button { color: #888; }\n\t#board button:not([disabled]):hover, #board a.tile.button:not(.disabled):hover { \n        border-style: ridge; \n        box-shadow: inset -10px -10px 15px rgba(255, 255, 255, 0.5), \n                    inset 10px 10px 15px rgba(70, 70, 70, 0.12);\n\t\tborder-radius: 5px;\n    }\n    #board button[disabled], #board a.tile.button.disabled { cursor: default; }\n\t#board button:not([disabled]), #board a.tile.button:not(.disabled) { color: transparent; }\n\t#board button:not([disabled]):hover , #board a.tile.button:not(.disabled):hover { color: #888; text-transform: uppercase; }\n\t#board button.highlighted, #board a.tile.button.highlighted { color: chocolate; }\n    img#parrot {\n        -webkit-transform: scaleX(-1);\n        transform: scaleX(-1);\n        padding-left: 10px; \n\t\tmargin-right: 0.5em;\n    }\n\u003c/style\u003e\n`\n}\n\n// Break down a string of url parameters to map[string]string.\n// E.g. \"foo=a\u0026bar=b\" -\u003e (map[string]string{foo:\"a\", bar:\"b\"}, nil)\nfunc BreakToMap(querystring string) (map[string]string, error) {\n\tm := make(map[string]string)\n\tfor _, s := range strings.Split(querystring, \"\u0026\") {\n\t\tif len(strings.TrimSpace(s)) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tidx := strings.Index(s, \"=\")\n\t\tif idx \u003e -1 {\n\t\t\tm[s[:idx]] = s[idx+1:]\n\t\t} else {\n\t\t\tm[s] = \"\"\n\t\t}\n\t}\n\treturn m, nil\n}\n"}]},"deposit":"100000ugnot"}],"fee":{"gas_wanted":"100000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1sQrIl4krsBIKtCTfMqWzbkKQDSfmPtMYQA9EvsJqmu"},"signature":"3+ffXbMbZYtcBjhdyQdqQvc5scOEPyfkmdBjpLENH/k+Nvg3B9CvN6mrRpgOJ1bYGq2An/3JAsaqTMFQA5hroQ=="}],"memo":""},"blockNum":"949813"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"V3MvnznUqtR7NACImUHyNFi3F7pd4ONpallCTZx+cEMpk92Jx6Zs1FSlszvghXIUmE6ck5b/c89b9CKQt6HXMg=="}],"memo":""},"blockNum":"956444"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"8dkUrk6G7rEHHWwx3HamipLGH624itXLyZD4d+c1W6ttn6YJTUU0NTjzKKPQ5XgmV79ctXVbf6Sze53aN+Nvog=="}],"memo":""},"blockNum":"956450"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1njagaeg7e398hze39ygfgvc4gwsh6lkz7dwnuz","to_address":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","amount":"15000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"As2VmUYjIs+Q+esyTyrgv8nQpAtImqdkUUKCpJYzNQ4a"},"signature":"vWdFwYlwS0bdzaYER3zyekgwD/9jt5WvJRaEijKpZz1Ve8QuMCzzZj05N6cRnFGSrzUkh43vkVjwJBNc3hRADQ=="}],"memo":""},"blockNum":"956455"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"2500000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/gnoswap/v2/gns","2500000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000","100","2465902"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgBLYKtI5YjFhkkspn0XG82pSc4nulX2VLybSaJsrccb"},"signature":"RAB0Sg1uNQK7pb6Gw1qrmf/7NRy5zF4BAnhoj5YOdbh60X3Yp4HvOiX1LHu4zmW+1TwuFi/zMuuF4ItxvVbvoA=="}],"memo":""},"blockNum":"956906"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"5800000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/onbloc/foo","5800000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/onbloc/foo:3000","100","12381494"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgBLYKtI5YjFhkkspn0XG82pSc4nulX2VLybSaJsrccb"},"signature":"HlaD5KDWoe2nAfl24Rhl5u1uZiKGym7aR/Mk27BvNuleNxzdq8L0HQ1DjZVopLXHyOugnGgs3fEVhERJLcDNmQ=="}],"memo":""},"blockNum":"956914"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/onbloc/obl","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gno.land/r/onbloc/foo","gno.land/r/onbloc/obl","10000000","EXACT_IN","gno.land/r/onbloc/foo:gno.land/r/onbloc/obl:3000","100","10801743"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgBLYKtI5YjFhkkspn0XG82pSc4nulX2VLybSaJsrccb"},"signature":"Io4TpQY0kgc5O1XUlE++lVNwa51mWxoOA7Sw6gSyzS4A0MYzDEVQDCMzMfpiHBH0FcG+vmlwQoGO8+zC5FvD3Q=="}],"memo":""},"blockNum":"956927"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/onbloc/obl","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/onbloc/obl","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gno.land/r/onbloc/obl","gnot","5000000","EXACT_IN","gno.land/r/onbloc/obl:gno.land/r/onbloc/usdc:3000*POOL*gno.land/r/onbloc/usdc:gno.land/r/demo/wugnot:3000","100","2106766"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgBLYKtI5YjFhkkspn0XG82pSc4nulX2VLybSaJsrccb"},"signature":"IR/umP4tEGuenDiSTO2gGmmy92XJE2sFpyxXBxL546YjZjuO9uzDY113L/g0TigsIebtfJONlNgM1DPiVRSSHw=="}],"memo":""},"blockNum":"956935"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","3712925"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","8000000"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1vsm68lq9cpn7x507s6gh59anmx86kxfhzyszu2","3712925"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"3712925ugnot","pkg_path":"gno.land/r/gnoswap/v2/position","func":"Mint","args":["gnot","gno.land/r/onbloc/foo","3000","720","14640","3712925","8000000","3694360","7960000","7282571140","g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"SetTokenURILast","args":null}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgBLYKtI5YjFhkkspn0XG82pSc4nulX2VLybSaJsrccb"},"signature":"v5AXloX17XDfLi9NOMgCQNjCxXtDpcNDpi9YF/geoYRaJCj332hU68FfsSDgmGUvG7f5BxgGf6fgc0Z9dOpL0A=="}],"memo":""},"blockNum":"956947"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","39"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["39"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","128"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["128"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgBLYKtI5YjFhkkspn0XG82pSc4nulX2VLybSaJsrccb"},"signature":"ASuoQWKpymgYAN5HaoIcBJieIfmLFMghx33Yzv1FMGhRx/q8j6H8vDb89av4mYaRHV3r9v/ORkmN2KcRckNU1A=="}],"memo":""},"blockNum":"956966"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","9223372036854775807"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","9223372036854775807"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1vsm68lq9cpn7x507s6gh59anmx86kxfhzyszu2","9223372036854775807"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"DecreaseLiquidity","args":["39","25","225793","3915587","9999999999","true"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgBLYKtI5YjFhkkspn0XG82pSc4nulX2VLybSaJsrccb"},"signature":"dRFgh+u29T95d09Op/wN272Z/vi+DGxN/+B9Bmcj1MU7qFiiLL+WyLvVVoARonY7Bpfm/EqNXABRC3UCWUxmpg=="}],"memo":""},"blockNum":"956976"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","128"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["128"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgBLYKtI5YjFhkkspn0XG82pSc4nulX2VLybSaJsrccb"},"signature":"oRSMWptxwLP6K98Vgrq/NdWRBS/bpgMzOZYACB9I1lgqkaM3xcU657QKg82l13PK0QQTgRx1tl0n11WkTQKPHA=="}],"memo":""},"blockNum":"956986"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","9223372036854775807"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","9223372036854775807"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1vsm68lq9cpn7x507s6gh59anmx86kxfhzyszu2","9223372036854775807"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"DecreaseLiquidity","args":["128","100","0","0","9999999999","true"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgBLYKtI5YjFhkkspn0XG82pSc4nulX2VLybSaJsrccb"},"signature":"hg5aonqpVtMtvAXVy4IWqJIUx3mP3oKMX4jr98ag9a5beVbZO0DMz0Gpli5ZfHptwftQYPk29ARQeJLAS5M3Xw=="}],"memo":""},"blockNum":"957001"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","39"]},{"@type":"/vm.m_call","caller":"g1s9u2nxwg2qftvxszqq2gdkzqmr6pmvav4q4lkc","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["39"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgBLYKtI5YjFhkkspn0XG82pSc4nulX2VLybSaJsrccb"},"signature":"5lZvjZD5VY11voS48vjA0HlBiz2cWC+UAkP+tAs0sg9GPjODSNqZb7pFIyxDr9gh/+TY0E69EQXCIaPwRy2Gfg=="}],"memo":""},"blockNum":"957011"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ytrxtq8jq8tfy65ry5qp703ffj6g780j0t6jms","send":"","pkg_path":"gno.land/r/teritori/social_feeds","func":"ReactPost","args":["1","7","☺️","true"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+X/44cZZbJ7j1yMwjs8TeGDdb9PUYcQIhmTHKdHtp7/"},"signature":"9a1+JZJeuBhUKSsEj0L/+Ni2cRLVCe20b7N24YYNIcZwaTjNpXTg1Tg82nAvktDKReU5YwO/4+LdiYA4T2J9Bw=="}],"memo":""},"blockNum":"958445"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["86"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["86","true"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["87"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["87","true"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["90"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["90","true"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["91"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["91","true"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/position","func":"CollectFee","args":["92"]},{"@type":"/vm.m_call","caller":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"CollectReward","args":["92","true"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1t+ghsl+0iSQZ51MozHZ1U04/dlLmgN1yDqvcynDdxF"},"signature":"SPaKAs8gWV/JR2v71PQZteF98/WvcJwBT9ko0g2IUqczyAI4N5HonQXMzd8+HhIk+xBetO92ctxmBkWGiNxGdQ=="}],"memo":""},"blockNum":"958776"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs","send":"25000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/onbloc/foo","25000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/onbloc/foo:3000","100","53367360"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5CeIauoQlM10t3GjPTWtHXek6pwVVU1ivae/cFLMggd"},"signature":"VJEKVsiJIQhRSGgjZLoCBCL9ehDoEYw9e2MH8wJ0aNAJdKgaAKAtzIX1zp52A654EbVmnmnNBwH5bcJ2JiDljg=="}],"memo":""},"blockNum":"958805"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs","send":"25000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/gnoswap/v2/gns","25000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000","100","24659018"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5CeIauoQlM10t3GjPTWtHXek6pwVVU1ivae/cFLMggd"},"signature":"dYBn3ixpOzNTFYN9+jF69wEkH8UeRfxKww+eVZTCD8xGZKces3D1z4PA18Ff9e6+in1XegyBXgqtMW1fVzPypg=="}],"memo":""},"blockNum":"958815"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","24959458"]},{"@type":"/vm.m_call","caller":"g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","24782934"]},{"@type":"/vm.m_call","caller":"g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1vsm68lq9cpn7x507s6gh59anmx86kxfhzyszu2","24959458"]},{"@type":"/vm.m_call","caller":"g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs","send":"24959458ugnot","pkg_path":"gno.land/r/gnoswap/v2/position","func":"Mint","args":["gnot","gno.land/r/gnoswap/v2/gns","3000","-6960","6900","24959458","24782934","24834661","24659019","7282571140","g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs"]},{"@type":"/vm.m_call","caller":"g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"SetTokenURILast","args":null}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5CeIauoQlM10t3GjPTWtHXek6pwVVU1ivae/cFLMggd"},"signature":"VkZ+nTkIA86rBZXRXk6gkh7jCpyZOk+IUGt/V7o0GWc7Bvin5h6jyP3xSnfCzr6iP+hZRJ3ynyXKFv3FK2VM3Q=="}],"memo":""},"blockNum":"958827"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","24893096"]},{"@type":"/vm.m_call","caller":"g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs","send":"","pkg_path":"gno.land/r/onbloc/foo","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","53635539"]},{"@type":"/vm.m_call","caller":"g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1vsm68lq9cpn7x507s6gh59anmx86kxfhzyszu2","24893096"]},{"@type":"/vm.m_call","caller":"g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs","send":"24893096ugnot","pkg_path":"gno.land/r/gnoswap/v2/position","func":"Mint","args":["gnot","gno.land/r/onbloc/foo","3000","720","14640","24893096","53635539","24768631","53367361","7282571140","g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs"]},{"@type":"/vm.m_call","caller":"g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"SetTokenURILast","args":null}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5CeIauoQlM10t3GjPTWtHXek6pwVVU1ivae/cFLMggd"},"signature":"/4fyESzv6mg1qu61k2E2+n3zL/+F7aXd3rGXcULSg8lavUEeXrIdf/qi59A+hGqK9iEJxXpQfktf322k3sqArQ=="}],"memo":""},"blockNum":"958849"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g10y2y4l4g7cx23tkl9jy5u638lw5aykvx7upqaz","to_address":"g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs","amount":"10000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1t+ghsl+0iSQZ51MozHZ1U04/dlLmgN1yDqvcynDdxF"},"signature":"gkKTKgI/txytvQ9NYZ1YX98DAowUpb5c3InA/X4CIi4zO4hGiBrIxVHtuFC4cGQBOSe7oBnIdYTdv01LxDyLMA=="}],"memo":""},"blockNum":"958864"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","129"]},{"@type":"/vm.m_call","caller":"g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["129"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5CeIauoQlM10t3GjPTWtHXek6pwVVU1ivae/cFLMggd"},"signature":"eQRL/mRWDtk9eYW5cKxNpdpVeEJ8u/iQX0qcK9AJS2Y1sTJO4AjoJcZQr2EsiJO4GJnIeC2b7UCvCQ+g5oTivw=="}],"memo":""},"blockNum":"958877"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","129"]},{"@type":"/vm.m_call","caller":"g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["129"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5CeIauoQlM10t3GjPTWtHXek6pwVVU1ivae/cFLMggd"},"signature":"CoPILrb4xBMZv9j7hascHnnO5Nfg53mrmCBfxAE/NBYn9yB2yNBOkTJ4f3u2P+6ApIkn+VlpWciCq/6HCX2qQg=="}],"memo":""},"blockNum":"958891"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs","send":"","pkg_path":"gno.land/r/gnoswap/v2/gnft","func":"Approve","args":["g14fclvfqynndp0l6kpyxkpgn4sljw9rr96hz46l","129"]},{"@type":"/vm.m_call","caller":"g1x9680z956dr4scce6qazj2pnx93w2777gdq0vs","send":"","pkg_path":"gno.land/r/gnoswap/v2/staker","func":"StakeToken","args":["129"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5CeIauoQlM10t3GjPTWtHXek6pwVVU1ivae/cFLMggd"},"signature":"1TUGzk4Ksj7UbPkeZgcfaYpTf6XfTk3vM89kdHD9QDtee0iU6cWTLWRS5J8ma32E7f7lzCraXyF4KuOZV//m0Q=="}],"memo":""},"blockNum":"958913"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g14ks20xj4csuyn0jucwdt96rgr6cenht30avkyr","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"3ZLycoViqOaO3gQg9rWdCOdcbEVsJ7e1OVz3GZgTE2lqG04//p3+Fp0WiB3EjUC7V5bGQ86cn9VGkyaBHJFT9w=="}],"memo":""},"blockNum":"959692"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14ks20xj4csuyn0jucwdt96rgr6cenht30avkyr","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g14ks20xj4csuyn0jucwdt96rgr6cenht30avkyr","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g14ks20xj4csuyn0jucwdt96rgr6cenht30avkyr","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g14ks20xj4csuyn0jucwdt96rgr6cenht30avkyr","send":"2000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/gnoswap/v2/gns","2000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000","100","1972718"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5AUjFIdvgvvYPCszkBSj4LyyQVI/uczvuxzbg5IRDB3"},"signature":"vwuu8lPqjYxj5c7SgCyfvL+B39uDIqJq1aX6N+riJwtfVDvMvNhX1bn7UfyEnq8oeeARx/X3uGqd581b1ODxfQ=="}],"memo":""},"blockNum":"959697"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14ks20xj4csuyn0jucwdt96rgr6cenht30avkyr","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g14ks20xj4csuyn0jucwdt96rgr6cenht30avkyr","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g14ks20xj4csuyn0jucwdt96rgr6cenht30avkyr","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g14ks20xj4csuyn0jucwdt96rgr6cenht30avkyr","send":"","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gno.land/r/gnoswap/v2/gns","gnot","40000000","EXACT_IN","gno.land/r/gnoswap/v2/gns:gno.land/r/onbloc/usdc:3000*POOL*gno.land/r/onbloc/usdc:gno.land/r/demo/wugnot:3000","100","39865480"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5AUjFIdvgvvYPCszkBSj4LyyQVI/uczvuxzbg5IRDB3"},"signature":"pPXZv9p+jSRF/F1cHkLuQ2yn5mZoCiZq8c2CFIZB3s5gsHYOOxwFJj//gOk3kv8NO8vzxR1yQfNawNq3xcqQkA=="}],"memo":""},"blockNum":"959703"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ngywvql2ql7t8uzl63w60eqcejkwg4rm4lxdw9","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1ngywvql2ql7t8uzl63w60eqcejkwg4rm4lxdw9","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1ngywvql2ql7t8uzl63w60eqcejkwg4rm4lxdw9","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1ngywvql2ql7t8uzl63w60eqcejkwg4rm4lxdw9","send":"10000000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/gnoswap/v2/gns","10000000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000","100","9860804907"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Atgv/+TCwlR+jzjx94p4Ik0IuGET4J/q2q9ciaL4UOQh"},"signature":"oDRlrw7WnmEYuy4f79k+7xFVhUSpuoeX0ARR2bhc6qIIVjdIkPyLS5LpAmIzQD3+klVFpKqTYVISVVtdUWCmWw=="}],"memo":""},"blockNum":"959819"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1kkhrcr7rnay67zsynmrrxmwrlfr7yfsuu669wk","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g126swhfaq2vyvvjywevhgw7lv9hg8qan93dasu8","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1kkhrcr7rnay67zsynmrrxmwrlfr7yfsuu669wk","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1kkhrcr7rnay67zsynmrrxmwrlfr7yfsuu669wk","send":"","pkg_path":"gno.land/r/gnoswap/v2/gns","func":"Approve","args":["g1cnz5gm2l09pm2k6rknjjar9a2w53fdhk4yjzy5","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g1kkhrcr7rnay67zsynmrrxmwrlfr7yfsuu669wk","send":"1000000000ugnot","pkg_path":"gno.land/r/gnoswap/v2/router","func":"SwapRoute","args":["gnot","gno.land/r/gnoswap/v2/gns","1000000000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/gnoswap/v2/gns:3000","100","985773151"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At0REeqvgrSR/YAi3wOjOOV+87fR/8+0N+eVmwzLfEiq"},"signature":"VNrDlikM6ZG0JCqH1IQjlltG6ZVQHxkrTDqjRDc44MIB7mpskz56Sc3gr+2jZV7sG24Fbk0bBCNFFgQNZQuAJA=="}],"memo":""},"blockNum":"959846"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","package":{"name":"hellotest4","path":"gno.land/r/g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7/hellotest4","files":[{"name":"package.gno","body":"package hellotest4\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"rzlwQfiGQsJii9zp94PPgzcIaX7VI4fvAdPwVvUkAqh9SoaFhcNL7NyXqOm0FyZj8ajcEcfeTwClspHW3e6+cQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"969057"}
