{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742434182_3","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"sf+3WnHGvrwrnXn/AEr5SYUChjlPwGcqwasIPEmZ37J8X8Z/AcaNV0CjXeVRdY9/7JC7x3i4W9/uFNQkbGPqBQ=="}],"memo":""},"metadata":{"timestamp":"1742434181"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742434182_4","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"e8iQdyvBObXiSkR03nrDNcYLlna+gpJmDxs1dEJGtoXG0VknY4G34nR4N/lRBT0/Nj080qvmsRDfBr/Z8VA4Cg=="}],"memo":""},"metadata":{"timestamp":"1742434181"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742434182_5","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"CCgA7NKmztcv1BHsYHaEbGPdMqU8aaFeI0EIQnRY8Tr40lwtricIkxp+9xjNS85glfp95hCynQSDFgf8KD5ACw=="}],"memo":""},"metadata":{"timestamp":"1742434181"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742434182_6","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"an37Gh9lXa9r8iKkRWRSb6eIsYJZMB3zv3HysuqmKDUGDlgdvCQOrH+3m+NaHNWW4X7jVfmFIz+L7sscZSOyAw=="}],"memo":""},"metadata":{"timestamp":"1742434181"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742434182_7","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"Hh10wRMPGcPopE/H+xvJFtQ/UfrrVNrE2mdOWcnt6UE8Zz8FcZkSp5oyaJNf5X0oVzfsqpp42Jh21TpXchIfDw=="}],"memo":""},"metadata":{"timestamp":"1742434181"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742434182_8","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"apxGhpmCef2QOzc3v9f+UMPacm/Awcjs1tLaAjV5UcsLBDzir4I0t2KBjvPo8MfsMg6ZsgoKRXBTJXuz8dNcAQ=="}],"memo":""},"metadata":{"timestamp":"1742434181"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742434182_9","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"zHG2tZsC/UctMAOw2G81MJCmiwFYF3zo4D9MpBFAHNLaUOG560TnNAoyXGJ/WOjDjun/fjOVAOXFKlfq3f8NCQ=="}],"memo":""},"metadata":{"timestamp":"1742434181"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1xq6suh33r3dkwps8c89my04s3k3gyqjlpqxcgj","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"c+hb24nX6xaZP4UEvQe7TKdFKnYsDad2/AqWurlwvV4tZPH9kaul2fwMdWPYNQbQHeLpkwpc0ZQMBXXkYRQhDw=="}],"memo":""},"metadata":{"timestamp":"1742440411"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g150gdvn780ws7a3s9qpdvv7h4d9hq6vh672ely0","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"jlVmo4UlpiL1leP2XxYHU5UxemymQ5ehqump+dDG52K7sAL+APm88Fte6T0l4a290dsinsniXt3a6EgLyIpiBw=="}],"memo":""},"metadata":{"timestamp":"1742455040"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1vhth8ckz29m96lys37jgq42zvcuwczf09t8yx7","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"j3nPc+Ut7Bx1mAhPlGRf1lcX4ufqb6CUPVuNgZIe+otDarVYJ1OJmbTFOI9vMWkj/A9be/e/ZPsgbaBuhgn2Cw=="}],"memo":""},"metadata":{"timestamp":"1742457209"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"PHKO+euBYBOv7iHPztQ3wOvmANGaKhDpsAaaijSZCk7txeoCnJlnwSmViI/dRLr4lSpMvjWYcxqu4gbKVeCoBg=="}],"memo":""},"metadata":{"timestamp":"1742482082"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"PHKO+euBYBOv7iHPztQ3wOvmANGaKhDpsAaaijSZCk7txeoCnJlnwSmViI/dRLr4lSpMvjWYcxqu4gbKVeCoBg=="}],"memo":""},"metadata":{"timestamp":"1742482112"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g9v4dcmmhqcrzgu2llmg78aph3kscp5vzu6cv3","amount":"5000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"28y9l6fn2ADPPXN5Ki8PBFv6pIOy9cc3A6EWWhqqZ13i82pOi+eU7Q8+dX4K5q0ue3sp+Iu1J6stp0zqMcySDw=="}],"memo":""},"metadata":{"timestamp":"1742484982"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1d24j8fwnc0w5q427fauyey4gdd30qgu69k6n0x","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"0G5osD+86isiKPplbizHY6e7oY0zNEJhw8MzfxbCs8bJ7kpOIdFaxNzuCyOpkEnQEEzJlj3GcyRyo+FatcozBg=="}],"memo":""},"metadata":{"timestamp":"1742486101"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1d24j8fwnc0w5q427fauyey4gdd30qgu69k6n0x","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["ursulovic202"]}],"fee":{"gas_wanted":"500000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"o1gk+FqvTLvwbFCf+NwEaGV+Bsz0B75uVgjiz5lRPkvh2vC3qyFsojcQBZDQInnKxIT5HcjrCunqHUnV5cAmAQ=="}],"memo":""},"metadata":{"timestamp":"1742486327"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742520596_0","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"sItgJ5ZVw+gHd8qzNB5SCnA4jjbLYOF8WYDu/A70XCXbTqqVj7oeoj3p1kdFwVO07hZ/tr29F+pPiygn5mqzAg=="}],"memo":""},"metadata":{"timestamp":"1742520592"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742520596_1","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"ieHNUAfC26nzO5LNWVeRlwIozO6J2WoVDu23/OeGW5dPw9a7Kr1ZN+Lsr8ymo71zV9aAPBPeORqa1qpxLYdFDA=="}],"memo":""},"metadata":{"timestamp":"1742520592"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742520596_2","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"XedVgRLc3tiu3ZmmQPRRQz5BoSeW8Br6osVkWYgqfa53WfVQPDDetgHQQ1NhhBljU0PaiZHxQFCYTUsboxnLDQ=="}],"memo":""},"metadata":{"timestamp":"1742520592"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742520596_3","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"cLQHQtgDZs22YdcaOd5hJAZQGzfUGEr8ot/9gmCK0PeLNdtItZeJnsbu+6KjAC9J4u5F3kmYd/bPCQrGZIxhCg=="}],"memo":""},"metadata":{"timestamp":"1742520592"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742520596_4","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"gNY1oi6GgR94mB5iKKFIei1+YSgWd+qkM2vaoV/xviUAc5QedxZVgJomeHBdBuyESPDzCilQOe/pQrbVlx1ZDA=="}],"memo":""},"metadata":{"timestamp":"1742520592"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742520596_5","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"gI8D8y7PPguVpxaPmdexBNGL1Gf6XJCwH+azw7SqOpGubz5hXR2pCWMstSZbr/ieIRpx18d+NFFfMAhJ32D9DQ=="}],"memo":""},"metadata":{"timestamp":"1742520592"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742520596_6","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"Mo/9iHUUnfI05EobtG6itq1HmrG6wyHRvF6GD+FW6VYZzcDGVmMPCM/HWBAfE4jkDJ+gI972PO01aReab4cjBA=="}],"memo":""},"metadata":{"timestamp":"1742520592"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742520596_7","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"fv5D5fCplLh3eH6Mp+ch3b4t4n3TVkMpomPNQtF2oRufPrPcByUgqXB7L7x+FxngSGi9DLH5nwLMT/LJqExWCw=="}],"memo":""},"metadata":{"timestamp":"1742520592"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742520596_8","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"6PoU0qRhe/9/Hqs5qstGaLSkMO3ivqe1uqDNhZnT9g5DtbycFrIKvdZh80fA/MwlgCjfLJrhw2KMurT1OlpNBQ=="}],"memo":""},"metadata":{"timestamp":"1742520592"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742520596_9","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"AgtElwe1vOxob+BYHyEXAd+k0DLdnGeNHL6fJMtrkT0BZPIoGrZ2kTIeRo1Hkh8mNEl3cLWraL9XVj3NUKDjDw=="}],"memo":""},"metadata":{"timestamp":"1742520592"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"spdbhyTmfvduteJhcYrxP9JYLWSj9SFsKFXmfJy+K4clPgeYNTxV7pw+CtdKSlAGekG/Q3T6QYS4JfAO2+dgCA=="}],"memo":""},"metadata":{"timestamp":"1742590173"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"spdbhyTmfvduteJhcYrxP9JYLWSj9SFsKFXmfJy+K4clPgeYNTxV7pw+CtdKSlAGekG/Q3T6QYS4JfAO2+dgCA=="}],"memo":""},"metadata":{"timestamp":"1742590188"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"spdbhyTmfvduteJhcYrxP9JYLWSj9SFsKFXmfJy+K4clPgeYNTxV7pw+CtdKSlAGekG/Q3T6QYS4JfAO2+dgCA=="}],"memo":""},"metadata":{"timestamp":"1742590203"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders","path":"gno.land/r/meeshell222/snakesandladders","files":[{"name":"package.gno","body":"package snakesandladders\n\nimport (\n  \"strconv\"\n)\n\n// TYPES\n\ntype Player struct {\n  Address string\n  Position int\n}\n\ntype Game struct {\n  Players []Player\n  Turn int\n  Started bool\n  Winner string\n}\n\n// STATE\n\nvar game Game\n\nvar snakes = Map[int]int{\n  16: 6, 49: 11, 62: 19, 64: 60,\n  87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = Map[int]int{\n  1: 38, 4: 14, 9: 31, 21: 42,\n  28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// FUNCTIONS\n\n// Join game before it starts\nfunc JoinGame() string {\n  if game.Started {\n    return \"Game already started\"\n  }\n  for i := 0; i \u003c len(game.Players); i++ {\n    if game.Players[i].Address == string(Caller()) {\n      return \"Already joined\"\n    }\n  }\n  player := Player{\n    Address: string(Caller()),\n    Position: 0,\n  }\n  game.Players = append(game.Players, player)\n  return \"Player joined: \" + player.Address\n}\n\n// Start the game\nfunc StartGame() string {\n  if game.Started {\n    return \"Game already started\"\n  }\n  if len(game.Players) \u003c 2 {\n    return \"Need at least 2 players\"\n  }\n  game.Started = true\n  game.Turn = 0\n  return \"Game started with \" + strconv.Itoa(len(game.Players)) + \" players\"\n}\n\n// Roll the dice (value passed by caller)\nfunc RollDice(roll int) string {\n  if !game.Started {\n    return \"Game not started\"\n  }\n  if game.Winner != \"\" {\n    return \"Game over. Winner: \" + game.Winner\n  }\n\n  current := game.Players[game.Turn]\n  if current.Address != string(Caller()) {\n    return \"Not your turn\"\n  }\n\n  newPos := current.Position + roll\n  if newPos \u003e 100 {\n    newPos = current.Position // do not move\n  }\n\n  if snakes[newPos] != 0 {\n    newPos = snakes[newPos]\n  } else if ladders[newPos] != 0 {\n    newPos = ladders[newPos]\n  }\n\n  game.Players[game.Turn].Position = newPos\n\n  result := current.Address + \" moved to \" + strconv.Itoa(newPos)\n\n  if newPos == 100 {\n    game.Winner = current.Address\n    result += \" and WON!\"\n  }\n\n  game.Turn = (game.Turn + 1) % len(game.Players)\n  return result\n}\n\n// View current state\nfunc GetGame() Game {\n  return game\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"HA8FK0le/947XFuqwd9+D/qgwLYhdrPGsHnLRkGMdbrHP1NcxJHzsub3vWH5k5em2AmW7v6sODhPTs4q/rr7AQ=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742590239"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders","path":"gno.land/r/meeshell222/snakesandladders","files":[{"name":"package.gno","body":"package snakesandladders\n\nimport (\n\t\"strconv\"\n)\n\n// TYPES\n\ntype Player struct {\n\tAddress  string\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  string\n}\n\n// STATE\n\nvar game Game\n\nvar snakes map[int]int = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders map[int]int = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// FUNCTIONS\n\n// Player joins before the game starts\nfunc JoinGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\tcaller := string(Caller())\n\tfor i := 0; i \u003c len(game.Players); i++ {\n\t\tif game.Players[i].Address == caller {\n\t\t\treturn \"Already joined\"\n\t\t}\n\t}\n\tplayer := Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t}\n\tgame.Players = append(game.Players, player)\n\treturn \"Player joined: \" + player.Address\n}\n\n// Start game when enough players joined\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\treturn \"Game started with \" + strconv.Itoa(len(game.Players)) + \" players\"\n}\n\n// Roll dice and apply move\nfunc RollDice(roll int) string {\n\tif !game.Started {\n\t\treturn \"Game not started\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game over. Winner: \" + game.Winner\n\t}\n\tcurrent := game.Players[game.Turn]\n\tif current.Address != string(Caller()) {\n\t\treturn \"Not your turn\"\n\t}\n\n\tnewPos := current.Position + roll\n\tif newPos \u003e 100 {\n\t\tnewPos = current.Position // no move if over 100\n\t}\n\n\t// Apply snakes or ladders\n\tif val, ok := snakes[newPos]; ok {\n\t\tnewPos = val\n\t} else if val, ok := ladders[newPos]; ok {\n\t\tnewPos = val\n\t}\n\n\tgame.Players[game.Turn].Position = newPos\n\tresult := current.Address + \" moved to \" + strconv.Itoa(newPos)\n\n\tif newPos == 100 {\n\t\tgame.Winner = current.Address\n\t\tresult += \" and WON!\"\n\t}\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn result\n}\n\n// Return current game state\nfunc GetGame() Game {\n\treturn game\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"n8VPM8KlSSdaXNwEdLMfyseLYKizuhpg4Qei1e7OIB7TehIc1HZh/b9JF85yr7oL8f7HbIB8/xyE6WRwg9AOAw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742590374"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders","path":"gno.land/r/meeshell222/snakesandladders","files":[{"name":"package.gno","body":"package snakesandladders\n\nimport (\n\t\"gno.land/std\"\n\t\"strconv\"\n)\n\n// TYPES\n\ntype Player struct {\n\tAddress  string\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  string\n}\n\n// STATE\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// FUNCTIONS\n\n// Player joins before the game starts\nfunc JoinGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\tcaller := std.GetCaller()\n\tfor i := 0; i \u003c len(game.Players); i++ {\n\t\tif game.Players[i].Address == caller {\n\t\t\treturn \"Already joined\"\n\t\t}\n\t}\n\tplayer := Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t}\n\tgame.Players = append(game.Players, player)\n\treturn \"Player joined: \" + player.Address\n}\n\n// Start game when enough players joined\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\treturn \"Game started with \" + strconv.Itoa(len(game.Players)) + \" players\"\n}\n\n// Roll dice and apply move\nfunc RollDice(roll int) string {\n\tif !game.Started {\n\t\treturn \"Game not started\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game over. Winner: \" + game.Winner\n\t}\n\tcaller := std.GetCaller()\n\tcurrent := game.Players[game.Turn]\n\tif current.Address != caller {\n\t\treturn \"Not your turn\"\n\t}\n\n\tnewPos := current.Position + roll\n\tif newPos \u003e 100 {\n\t\tnewPos = current.Position // no move if over 100\n\t}\n\n\t// Apply snakes or ladders\n\tif val, ok := snakes[newPos]; ok {\n\t\tnewPos = val\n\t} else if val, ok := ladders[newPos]; ok {\n\t\tnewPos = val\n\t}\n\n\tgame.Players[game.Turn].Position = newPos\n\tresult := caller + \" moved to \" + strconv.Itoa(newPos)\n\n\tif newPos == 100 {\n\t\tgame.Winner = caller\n\t\tresult += \" and WON!\"\n\t}\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn result\n}\n\n// Return current game state\nfunc GetGame() Game {\n\treturn game\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"fozwT3Rs5Y/VsKy6LMO5qtakOFXl2DWa5qtj4xmDQnSY68KBt7jw2pLXv74FrpghSjS2vsQv9/TZ2fLBeF80AA=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742590460"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders","path":"gno.land/p/meeshell222/snakesandladders","files":[{"name":"package.gno","body":"package snakesandladders\n\nimport (\n\t\"gno.land/pkg/std\"\n\t\"strconv\"\n)\n\n// TYPES\n\ntype Player struct {\n\tAddress  string\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  string\n}\n\n// STATE\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// FUNCTIONS\n\n// Player joins before the game starts\nfunc JoinGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\tcaller := std.GetCaller()\n\tfor i := 0; i \u003c len(game.Players); i++ {\n\t\tif game.Players[i].Address == caller {\n\t\t\treturn \"Already joined\"\n\t\t}\n\t}\n\tplayer := Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t}\n\tgame.Players = append(game.Players, player)\n\treturn \"Player joined: \" + player.Address\n}\n\n// Start game when enough players joined\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\treturn \"Game started with \" + strconv.Itoa(len(game.Players)) + \" players\"\n}\n\n// Roll dice and apply move\nfunc RollDice(roll int) string {\n\tif !game.Started {\n\t\treturn \"Game not started\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game over. Winner: \" + game.Winner\n\t}\n\tcaller := std.GetCaller()\n\tcurrent := game.Players[game.Turn]\n\tif current.Address != caller {\n\t\treturn \"Not your turn\"\n\t}\n\n\tnewPos := current.Position + roll\n\tif newPos \u003e 100 {\n\t\tnewPos = current.Position // no move if over 100\n\t}\n\n\t// Apply snakes or ladders\n\tif val, ok := snakes[newPos]; ok {\n\t\tnewPos = val\n\t} else if val, ok := ladders[newPos]; ok {\n\t\tnewPos = val\n\t}\n\n\tgame.Players[game.Turn].Position = newPos\n\tresult := caller + \" moved to \" + strconv.Itoa(newPos)\n\n\tif newPos == 100 {\n\t\tgame.Winner = caller\n\t\tresult += \" and WON!\"\n\t}\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn result\n}\n\n// Return current game state\nfunc GetGame() Game {\n\treturn game\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"McSUBuEU+Mo2GOfwTpwBONdc/SMc9HbqqKxiVQELcPulAmD73KkZ4k05xecOjnrrBxYEFwpOQru684ZgvB/tBw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742590630"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"main","path":"gno.land/r/meeshell222/main","files":[{"name":"package.gno","body":"package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\ntype Player struct {\n\tAddress  string\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  string\n}\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\nfunc JoinGame(address string) error {\n\tif game.Started {\n\t\treturn errors.New(\"game already started\")\n\t}\n\tfor _, p := range game.Players {\n\t\tif p.Address == address {\n\t\t\treturn errors.New(\"already joined\")\n\t\t}\n\t}\n\tgame.Players = append(game.Players, Player{Address: address})\n\treturn nil\n}\n\nfunc StartGame() error {\n\tif game.Started {\n\t\treturn errors.New(\"game already started\")\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn errors.New(\"need at least 2 players\")\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\treturn nil\n}\n\nfunc RollDice(address string, roll int) (string, error) {\n\tif !game.Started {\n\t\treturn \"\", errors.New(\"game not started\")\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"\", errors.New(\"game over, winner: \" + game.Winner)\n\t}\n\tif game.Players[game.Turn].Address != address {\n\t\treturn \"\", errors.New(\"not your turn\")\n\t}\n\n\tplayer := \u0026game.Players[game.Turn]\n\tnewPos := player.Position + roll\n\tif newPos \u003e 100 {\n\t\tnewPos = player.Position // can't overshoot\n\t}\n\tif val, ok := snakes[newPos]; ok {\n\t\tnewPos = val\n\t} else if val, ok := ladders[newPos]; ok {\n\t\tnewPos = val\n\t}\n\n\tplayer.Position = newPos\n\tmsg := fmt.Sprintf(\"%s rolled %d, moved to %d\", player.Address, roll, newPos)\n\n\tif newPos == 100 {\n\t\tgame.Winner = address\n\t\tmsg += \" and WON!\"\n\t}\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn msg, nil\n}\n\nfunc main() {\n\trand.Seed(time.Now().UnixNano())\n\n\t// Sample playthrough\n\tJoinGame(\"alice\")\n\tJoinGame(\"bob\")\n\tStartGame()\n\n\tplayers := []string{\"alice\", \"bob\"}\n\n\tfor game.Winner == \"\" {\n\t\tcurrent := players[game.Turn]\n\t\troll := rand.Intn(6) + 1\n\t\tmsg, err := RollDice(current, roll)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error:\", err)\n\t\t\tbreak\n\t\t}\n\t\tfmt.Println(msg)\n\t\ttime.Sleep(300 * time.Millisecond)\n\t}\n\n\tfmt.Println(\"Game over. Winner:\", game.Winner)\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"c7sUhS0PvTcKnOPNRS7BokV9MuVZZ3q9/Vn2+Mit2jg/6xTSYdWzp6rESUlGiC8WdMUA2BrO5soQyfm8jGUUAA=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742590911"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"main","path":"gno.land/r/meeshell222/main","files":[{"name":"package.gno","body":"package main\n\nimport (\n\t\"strconv\"\n)\n\n// TYPES\n\ntype Player struct {\n\tAddress  string\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  string\n}\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// FUNCTIONS\n\nfunc JoinGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\tcaller := std.GetCaller()\n\tfor i := 0; i \u003c len(game.Players); i++ {\n\t\tif game.Players[i].Address == caller {\n\t\t\treturn \"Already joined\"\n\t\t}\n\t}\n\tplayer := Player{Address: caller, Position: 0}\n\tgame.Players = append(game.Players, player)\n\treturn \"Player joined: \" + player.Address\n}\n\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\treturn \"Game started with \" + strconv.Itoa(len(game.Players)) + \" players\"\n}\n\nfunc RollDice(roll int) string {\n\tif !game.Started {\n\t\treturn \"Game not started\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game over. Winner: \" + game.Winner\n\t}\n\tcaller := std.GetCaller()\n\tcurrent := game.Players[game.Turn]\n\tif current.Address != caller {\n\t\treturn \"Not your turn\"\n\t}\n\n\tnewPos := current.Position + roll\n\tif newPos \u003e 100 {\n\t\tnewPos = current.Position\n\t}\n\n\tif val, ok := snakes[newPos]; ok {\n\t\tnewPos = val\n\t} else if val, ok := ladders[newPos]; ok {\n\t\tnewPos = val\n\t}\n\n\tgame.Players[game.Turn].Position = newPos\n\tresult := caller + \" moved to \" + strconv.Itoa(newPos)\n\n\tif newPos == 100 {\n\t\tgame.Winner = caller\n\t\tresult += \" and WON!\"\n\t}\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn result\n}\n\nfunc GetGame() Game {\n\treturn game\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"lxfW+X9CHJiZ/JwlusJgNZ5a6sFuj2e5HCQxfLJ2Vv4EGKCrBODrDQt2Dd/uzst9EokAoyMsReghdQiP0Du4AA=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742590997"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"main","path":"gno.land/r/meeshell222/main","files":[{"name":"package.gno","body":"package main\n\nimport (\n\t\"strconv\"\n\t\"strings\"\n)\n\n// TYPES\n\ntype Player struct {\n\tAddress  string\n\tPosition int\n}\n\ntype GameState struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  string\n\tLog     []string\n}\n\n// STATE\n\nvar game GameState\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// HELPERS\n\nfunc findPlayer(addr string) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\n// PUBLIC INTERFACE\n\nfunc JoinGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\taddr := std.GetCaller()\n\t_, exists := findPlayer(addr)\n\tif exists {\n\t\treturn \"Already joined\"\n\t}\n\tgame.Players = append(game.Players, Player{Address: addr, Position: 0})\n\tlog := addr + \" joined the game\"\n\tgame.Log = append(game.Log, log)\n\treturn log\n}\n\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\tlog := \"Game started with \" + strconv.Itoa(len(game.Players)) + \" players\"\n\tgame.Log = append(game.Log, log)\n\treturn log\n}\n\nfunc RollDice(roll int) string {\n\tif !game.Started {\n\t\treturn \"Game not started\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game over. Winner: \" + game.Winner\n\t}\n\tcaller := std.GetCaller()\n\tcurr := \u0026game.Players[game.Turn]\n\tif curr.Address != caller {\n\t\treturn \"Not your turn\"\n\t}\n\n\tnewPos := curr.Position + roll\n\tif newPos \u003e 100 {\n\t\tnewPos = curr.Position\n\t}\n\tnewPos = applySnakesAndLadders(newPos)\n\tcurr.Position = newPos\n\n\tlog := caller + \" rolled \" + strconv.Itoa(roll) + \", now at \" + strconv.Itoa(newPos)\n\n\tif newPos == 100 {\n\t\tgame.Winner = caller\n\t\tlog += \" and WON!\"\n\t}\n\n\tgame.Log = append(game.Log, log)\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn log\n}\n\nfunc GetState() string {\n\ts := []string{}\n\tfor _, p := range game.Players {\n\t\ts = append(s, p.Address+\"@\"+strconv.Itoa(p.Position))\n\t}\n\treturn strings.Join(s, \" | \")\n}\n\nfunc GetLog() []string {\n\treturn game.Log\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"CpO7DDXefmBum1fo5ClaJeaZ6NenYAvOMOq9iYtzAW+TCM4MDff9nkR7W4bpWRyKr7LbkTPKv44UhErHu2J/Bw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742591544"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"main","path":"gno.land/r/meeshell222/main","files":[{"name":"package.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// TYPES\n\ntype Player struct {\n\tAddress  string\n\tPosition int\n}\n\ntype GameState struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  string\n\tLog     []string\n}\n\n// STATE\n\nvar game GameState\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// HELPERS\n\nfunc findPlayer(addr string) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\n// PUBLIC INTERFACE\n\nfunc JoinGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\taddr := std.GetCaller()\n\t_, exists := findPlayer(addr)\n\tif exists {\n\t\treturn \"Already joined\"\n\t}\n\tgame.Players = append(game.Players, Player{Address: addr, Position: 0})\n\tlog := addr + \" joined the game\"\n\tgame.Log = append(game.Log, log)\n\treturn log\n}\n\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\tlog := \"Game started with \" + strconv.Itoa(len(game.Players)) + \" players\"\n\tgame.Log = append(game.Log, log)\n\treturn log\n}\n\nfunc RollDice(roll int) string {\n\tif !game.Started {\n\t\treturn \"Game not started\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game over. Winner: \" + game.Winner\n\t}\n\tcaller := std.GetCaller()\n\tcurr := \u0026game.Players[game.Turn]\n\tif curr.Address != caller {\n\t\treturn \"Not your turn\"\n\t}\n\n\tnewPos := curr.Position + roll\n\tif newPos \u003e 100 {\n\t\tnewPos = curr.Position\n\t}\n\tnewPos = applySnakesAndLadders(newPos)\n\tcurr.Position = newPos\n\n\tlog := caller + \" rolled \" + strconv.Itoa(roll) + \", now at \" + strconv.Itoa(newPos)\n\n\tif newPos == 100 {\n\t\tgame.Winner = caller\n\t\tlog += \" and WON!\"\n\t}\n\n\tgame.Log = append(game.Log, log)\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn log\n}\n\nfunc GetState() string {\n\ts := []string{}\n\tfor _, p := range game.Players {\n\t\ts = append(s, p.Address+\"@\"+strconv.Itoa(p.Position))\n\t}\n\treturn strings.Join(s, \" | \")\n}\n\nfunc GetLog() []string {\n\treturn game.Log\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"5QuOVDFYHDa78AgXMJufmpWThBiF0lQEn+YK545/DBSvmFvSGvqC2lUv2JrmcB+oJV/n2EfVUbK+hwNn/CtSCg=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742591629"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"main","path":"gno.land/r/meeshell222/main","files":[{"name":"package.gno","body":"package main\n\nimport (\n\t\"std\" // ✅ correct import for GetCaller\n\t\"strconv\"\n\t\"strings\"\n)\n\n// TYPES\n\ntype Player struct {\n\tAddress  string\n\tPosition int\n}\n\ntype GameState struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  string\n\tLog     []string\n}\n\n// STATE\n\nvar game GameState\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// HELPERS\n\nfunc findPlayer(addr string) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\n// PUBLIC FUNCTIONS\n\nfunc JoinGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\taddr := std.GetCaller()\n\t_, exists := findPlayer(addr)\n\tif exists {\n\t\treturn \"Already joined\"\n\t}\n\tgame.Players = append(game.Players, Player{Address: addr, Position: 0})\n\tlog := addr + \" joined the game\"\n\tgame.Log = append(game.Log, log)\n\treturn log\n}\n\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\tlog := \"Game started with \" + strconv.Itoa(len(game.Players)) + \" players\"\n\tgame.Log = append(game.Log, log)\n\treturn log\n}\n\nfunc RollDice(roll int) string {\n\tif !game.Started {\n\t\treturn \"Game not started\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game over. Winner: \" + game.Winner\n\t}\n\tcaller := std.GetCaller()\n\tcurr := \u0026game.Players[game.Turn]\n\tif curr.Address != caller {\n\t\treturn \"Not your turn\"\n\t}\n\n\tnewPos := curr.Position + roll\n\tif newPos \u003e 100 {\n\t\tnewPos = curr.Position\n\t}\n\tnewPos = applySnakesAndLadders(newPos)\n\tcurr.Position = newPos\n\n\tlog := caller + \" rolled \" + strconv.Itoa(roll) + \", now at \" + strconv.Itoa(newPos)\n\tif newPos == 100 {\n\t\tgame.Winner = caller\n\t\tlog += \" and WON!\"\n\t}\n\n\tgame.Log = append(game.Log, log)\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn log\n}\n\nfunc GetState() string {\n\ts := []string{}\n\tfor _, p := range game.Players {\n\t\ts = append(s, p.Address+\"@\"+strconv.Itoa(p.Position))\n\t}\n\treturn strings.Join(s, \" | \")\n}\n\nfunc GetLog() []string {\n\treturn game.Log\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"XgXOoGjGYrHb8bWz1Sac1/CUXIgwEuGEyhbkJmu3ukeQIiacEvRa7U8TCxwtTpVQ98qCuXOsvfCj9eV07d+xDw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742591825"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"main","path":"gno.land/r/meeshell222/main","files":[{"name":"package.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// --- Game Types ---\n\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  std.Address\n\tLogs    []string\n}\n\n// --- Global State ---\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// --- Helper Functions ---\n\nfunc findPlayer(addr std.Address) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\nfunc logEvent(msg string) {\n\tgame.Logs = append(game.Logs, msg)\n\tstd.Emit(\"GameLog\", \"msg\", msg)\n}\n\n// --- Game Functions ---\n\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif _, exists := findPlayer(caller); exists {\n\t\treturn \"Already joined.\"\n\t}\n\tgame.Players = append(game.Players, Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t})\n\tmsg := \"Player \" + caller.String() + \" joined the game.\"\n\tlogEvent(msg)\n\treturn msg\n}\n\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players to start.\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\tlogEvent(\"Game started with \" + strconv.Itoa(len(game.Players)) + \" players.\")\n\treturn \"Game started.\"\n}\n\nfunc RollDice(roll int) string {\n\tcaller := std.OriginCaller()\n\tif !game.Started {\n\t\treturn \"Game not started yet.\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game already finished. Winner: \" + game.Winner.String()\n\t}\n\n\tcurrPlayer := \u0026game.Players[game.Turn]\n\tif currPlayer.Address != caller {\n\t\treturn \"Not your turn.\"\n\t}\n\n\tpos := currPlayer.Position + roll\n\tif pos \u003e 100 {\n\t\tpos = currPlayer.Position // overshoot doesn't move\n\t}\n\tfinalPos := applySnakesAndLadders(pos)\n\tcurrPlayer.Position = finalPos\n\n\tmsg := caller.String() + \" rolled \" + strconv.Itoa(roll) + \" → \" + strconv.Itoa(finalPos)\n\tif finalPos == 100 {\n\t\tgame.Winner = caller\n\t\tmsg += \" 🎉 WINNER!\"\n\t}\n\tlogEvent(msg)\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn msg\n}\n\nfunc GetGameState() string {\n\tvar states []string\n\tfor _, p := range game.Players {\n\t\tstates = append(states, p.Address.String()+\"@\"+strconv.Itoa(p.Position))\n\t}\n\treturn strings.Join(states, \" | \")\n}\n\nfunc GetLog() []string {\n\treturn game.Logs\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"14579017","gas_fee":"30373ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"XOTeRwCWfY1KzHtjUVJ8pvM7R1R7jb29bpIb42pl11fUbAymoGOVCqYtt2VxFa8ZlKeyoIMmepppTuKKCC7+Cw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742592136"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/main","func":"JoinGame","args":null}],"fee":{"gas_wanted":"1038334","gas_fee":"2164ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"1oCGRC22UIduWIF0sQjuK7PHubZxDcKia3/SpFBGOOKJJRjDXeyi5Y8dM61iJvmLYY17yWQiaIzIK3RSIczFCQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742592247"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/main","func":"StartGame","args":null}],"fee":{"gas_wanted":"224090","gas_fee":"467ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"0N1nhNS28XFMrEOq3LtJrQZP2xFI9igqltvMkPdW1WFlR1COrIL6cDsYKh/Epltu0wGNEXTlTWqAutVdrY0SCg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742592272"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders","path":"gno.land/r/meeshell222/snakesandladders","files":[{"name":"package.gno","body":"package snakesandladders\n\nimport (\n\t\"std\"\n\t\"strings\"\n)\n\n// Define the game board with snakes and ladders\nvar board = map[int]int{\n\t3:  22, // Ladder from 3 to 22\n\t5:  8,  // Ladder from 5 to 8\n\t11: 26, // Ladder from 11 to 26\n\t20: 29, // Ladder from 20 to 29\n\t17: 4,  // Snake from 17 to 4\n\t19: 7,  // Snake from 19 to 7\n\t27: 1,  // Snake from 27 to 1\n\t21: 9,  // Snake from 21 to 9\n}\n\n// Player struct to hold player information\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\n// Game state variables\nvar (\n\tplayers            = []Player{}\n\tcurrentPlayerIndex int\n\tgameStarted        bool\n)\n\n// Initialize the game\nfunc init() {\n\tgameStarted = false\n\tcurrentPlayerIndex = 0\n}\n\n// Join the game\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tfor _, player := range players {\n\t\tif player.Address == caller {\n\t\t\treturn \"You are already in the game.\"\n\t\t}\n\t}\n\tplayers = append(players, Player{Address: caller, Position: 0})\n\treturn \"You have joined the game.\"\n}\n\n// Start the game\nfunc StartGame() string {\n\tif gameStarted {\n\t\treturn \"Game has already started.\"\n\t}\n\tif len(players) \u003c 2 {\n\t\treturn \"Need at least 2 players to start the game.\"\n\t}\n\tgameStarted = true\n\treturn \"Game started!\"\n}\n\n// Roll the dice and move\nfunc RollDice() string {\n\tif !gameStarted {\n\t\treturn \"Game has not started yet.\"\n\t}\n\tcaller := std.OriginCaller()\n\tif players[currentPlayerIndex].Address != caller {\n\t\treturn \"It's not your turn.\"\n\t}\n\tdiceRoll := std.RandIntn(6) + 1\n\tnewPosition := players[currentPlayerIndex].Position + diceRoll\n\tif newPosition \u003e= 30 {\n\t\tplayers[currentPlayerIndex].Position = 30\n\t\tgameStarted = false\n\t\treturn \"Congratulations! You have won the game.\"\n\t}\n\tif destination, ok := board[newPosition]; ok {\n\t\tnewPosition = destination\n\t}\n\tplayers[currentPlayerIndex].Position = newPosition\n\tcurrentPlayerIndex = (currentPlayerIndex + 1) % len(players)\n\treturn \"You rolled a \" + itoa(diceRoll) + \". Your new position is \" + itoa(newPosition) + \".\"\n}\n\n// Render the game state\nfunc Render(_ string) string {\n\tvar sb strings.Builder\n\tsb.WriteString(\"# Snakes and Ladders\\n\\n\")\n\tif !gameStarted {\n\t\tsb.WriteString(\"Game has not started yet.\\n\")\n\t} else {\n\t\tsb.WriteString(\"Game is in progress.\\n\")\n\t}\n\tsb.WriteString(\"\\n## Players:\\n\")\n\tfor _, player := range players {\n\t\tsb.WriteString(\"- Address: \" + player.Address.String() + \", Position: \" + itoa(player.Position) + \"\\n\")\n\t}\n\treturn sb.String()\n}\n\n// Helper function to convert int to string\nfunc itoa(i int) string {\n\treturn std.Sprintf(\"%d\", i)\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"5+H4ZhCohbbD0eCWXWzRpZIY0FDBCeRRxYNx8umDF5NenuzWU5iBS8ExSrGFL8kICa71uBVa1wCw0OkbV5pGAw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742592362"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders","path":"gno.land/r/meeshell222/snakesandladders","files":[{"name":"package.gno","body":"package snakesandladders\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// --- Game Types ---\n\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  std.Address\n\tLogs    []string\n}\n\n// --- Global State ---\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// --- Helper Functions ---\n\nfunc findPlayer(addr std.Address) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\nfunc logEvent(msg string) {\n\tgame.Logs = append(game.Logs, msg)\n\tstd.Emit(\"GameLog\", \"msg\", msg)\n}\n\n// --- Game Functions ---\n\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif _, exists := findPlayer(caller); exists {\n\t\treturn \"Already joined.\"\n\t}\n\tgame.Players = append(game.Players, Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t})\n\tmsg := \"Player \" + caller.String() + \" joined the game.\"\n\tlogEvent(msg)\n\treturn msg\n}\n\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players to start.\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\tlogEvent(\"Game started with \" + strconv.Itoa(len(game.Players)) + \" players.\")\n\treturn \"Game started.\"\n}\n\nfunc RollDice(roll int) string {\n\tcaller := std.OriginCaller()\n\tif !game.Started {\n\t\treturn \"Game not started yet.\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game already finished. Winner: \" + game.Winner.String()\n\t}\n\n\tcurrPlayer := \u0026game.Players[game.Turn]\n\tif currPlayer.Address != caller {\n\t\treturn \"Not your turn.\"\n\t}\n\n\tpos := currPlayer.Position + roll\n\tif pos \u003e 100 {\n\t\tpos = currPlayer.Position // overshoot doesn't move\n\t}\n\tfinalPos := applySnakesAndLadders(pos)\n\tcurrPlayer.Position = finalPos\n\n\tmsg := caller.String() + \" rolled \" + strconv.Itoa(roll) + \" → \" + strconv.Itoa(finalPos)\n\tif finalPos == 100 {\n\t\tgame.Winner = caller\n\t\tmsg += \" 🎉 WINNER!\"\n\t}\n\tlogEvent(msg)\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn msg\n}\n\nfunc GetGameState() string {\n\tvar states []string\n\tfor _, p := range game.Players {\n\t\tstates = append(states, p.Address.String()+\"@\"+strconv.Itoa(p.Position))\n\t}\n\treturn strings.Join(states, \" | \")\n}\n\nfunc GetLog() []string {\n\treturn game.Logs\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"14617695","gas_fee":"30454ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"r8kCu3S/cLuL1sjS6nf8D437hKZMoTLpI21ACssz4vew2ndBTWSD/m59/Gh7ytaKT98UUYfYjkMi/p+5cbnxBw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742592408"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders2","path":"gno.land/r/meeshell222/snakesandladders2","files":[{"name":"package.gno","body":"package snakesandladders\n\nimport (\n\t\"gno.land/r/gnoland/dynreplacer\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// --- Game Types ---\n\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  std.Address\n\tLogs    []string\n}\n\n// --- Global State ---\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// --- Helper Functions ---\n\nfunc findPlayer(addr std.Address) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\nfunc logEvent(msg string) {\n\tgame.Logs = append(game.Logs, msg)\n\tstd.Emit(\"GameLog\", \"msg\", msg)\n}\n\n// --- Game Functions ---\n\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif _, exists := findPlayer(caller); exists {\n\t\treturn \"Already joined.\"\n\t}\n\tgame.Players = append(game.Players, Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t})\n\tmsg := \"Player \" + caller.String() + \" joined the game.\"\n\tlogEvent(msg)\n\treturn msg\n}\n\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players to start.\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\tlogEvent(\"Game started with \" + strconv.Itoa(len(game.Players)) + \" players.\")\n\treturn \"Game started.\"\n}\n\nfunc RollDice(roll int) string {\n\tcaller := std.OriginCaller()\n\tif !game.Started {\n\t\treturn \"Game not started yet.\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game already finished. Winner: \" + game.Winner.String()\n\t}\n\n\tcurrPlayer := \u0026game.Players[game.Turn]\n\tif currPlayer.Address != caller {\n\t\treturn \"Not your turn.\"\n\t}\n\n\tpos := currPlayer.Position + roll\n\tif pos \u003e 100 {\n\t\tpos = currPlayer.Position // overshoot doesn't move\n\t}\n\tfinalPos := applySnakesAndLadders(pos)\n\tcurrPlayer.Position = finalPos\n\n\tmsg := caller.String() + \" rolled \" + strconv.Itoa(roll) + \" → \" + strconv.Itoa(finalPos)\n\tif finalPos == 100 {\n\t\tgame.Winner = caller\n\t\tmsg += \" 🎉 WINNER!\"\n\t}\n\tlogEvent(msg)\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn msg\n}\n\nfunc GetGameState() string {\n\tvar states []string\n\tfor _, p := range game.Players {\n\t\tstates = append(states, p.Address.String()+\"@\"+strconv.Itoa(p.Position))\n\t}\n\treturn strings.Join(states, \" | \")\n}\n\nfunc GetLog() []string {\n\treturn game.Logs\n}\n\n// --- Render Function for gno.land UI ---\n\nfunc Render(_ string) string {\n\tr := dynreplacer.New()\n\n\tr.RegisterCallback(\":game-state:\", func() string {\n\t\tvar b strings.Builder\n\t\tb.WriteString(\"## 🎲 Game State\\n\")\n\t\tif !game.Started {\n\t\t\tb.WriteString(\"⏳ Game not started.\\n\")\n\t\t\treturn b.String()\n\t\t}\n\n\t\tfor i, p := range game.Players {\n\t\t\tmarker := \"\"\n\t\t\tif i == game.Turn \u0026\u0026 game.Winner == \"\" {\n\t\t\t\tmarker = \" 👈\"\n\t\t\t}\n\t\t\tb.WriteString(\"- `\" + p.Address.String() + \"`: **\" + strconv.Itoa(p.Position) + \"**\" + marker + \"\\n\")\n\t\t}\n\n\t\tif game.Winner != \"\" {\n\t\t\tb.WriteString(\"\\n🏁 Winner: `\" + game.Winner.String() + \"` 🎉\\n\")\n\t\t}\n\n\t\treturn b.String()\n\t})\n\n\tr.RegisterCallback(\":game-log:\", func() string {\n\t\tvar b strings.Builder\n\t\tb.WriteString(\"## 📜 Game Log\\n\")\n\t\tlogs := game.Logs\n\t\tif len(logs) \u003e 5 {\n\t\t\tlogs = logs[len(logs)-5:] // show last 5\n\t\t}\n\t\tfor _, log := range logs {\n\t\t\tb.WriteString(\"- \" + log + \"\\n\")\n\t\t}\n\t\treturn b.String()\n\t})\n\n\treturn r.ReplaceAll(`\n# 🐍 Snakes and Ladders Game\n\nTry to reach square 100 before your opponents!\n\n:game-state:\n\n:game-log:\n`)\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"dGVOeGEeghLLqdIaClu9LFB+i46hxRnLMiPFfEWRk0P95mVl6pnqDVavyWhVX1BT6w4oOm3YTGEaTAF188FhBQ=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742592734"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders2","path":"gno.land/r/meeshell222/snakesandladders2","files":[{"name":"package.gno","body":"package snakesandladders2\n\nimport (\n\t\"gno.land/r/dynreplacer\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// --- Game Types ---\n\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  std.Address\n\tLogs    []string\n}\n\n// --- Global State ---\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// --- Helper Functions ---\n\nfunc findPlayer(addr std.Address) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\nfunc logEvent(msg string) {\n\tgame.Logs = append(game.Logs, msg)\n\tstd.Emit(\"GameLog\", \"msg\", msg)\n}\n\n// --- Game Functions ---\n\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif _, exists := findPlayer(caller); exists {\n\t\treturn \"Already joined.\"\n\t}\n\tgame.Players = append(game.Players, Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t})\n\tmsg := \"Player \" + caller.String() + \" joined the game.\"\n\tlogEvent(msg)\n\treturn msg\n}\n\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players to start.\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\tlogEvent(\"Game started with \" + strconv.Itoa(len(game.Players)) + \" players.\")\n\treturn \"Game started.\"\n}\n\nfunc RollDice(roll int) string {\n\tcaller := std.OriginCaller()\n\tif !game.Started {\n\t\treturn \"Game not started yet.\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game already finished. Winner: \" + game.Winner.String()\n\t}\n\n\tcurrPlayer := \u0026game.Players[game.Turn]\n\tif currPlayer.Address != caller {\n\t\treturn \"Not your turn.\"\n\t}\n\n\tpos := currPlayer.Position + roll\n\tif pos \u003e 100 {\n\t\tpos = currPlayer.Position // overshoot doesn't move\n\t}\n\tfinalPos := applySnakesAndLadders(pos)\n\tcurrPlayer.Position = finalPos\n\n\tmsg := caller.String() + \" rolled \" + strconv.Itoa(roll) + \" → \" + strconv.Itoa(finalPos)\n\tif finalPos == 100 {\n\t\tgame.Winner = caller\n\t\tmsg += \" 🎉 WINNER!\"\n\t}\n\tlogEvent(msg)\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn msg\n}\n\nfunc GetGameState() string {\n\tvar states []string\n\tfor _, p := range game.Players {\n\t\tstates = append(states, p.Address.String()+\"@\"+strconv.Itoa(p.Position))\n\t}\n\treturn strings.Join(states, \" | \")\n}\n\nfunc GetLog() []string {\n\treturn game.Logs\n}\n\n// --- Render Function for gno.land UI ---\n\nfunc Render(_ string) string {\n\tr := dynreplacer.New()\n\n\tr.RegisterCallback(\":game-state:\", func() string {\n\t\tvar b strings.Builder\n\t\tb.WriteString(\"## 🎲 Game State\\n\")\n\t\tif !game.Started {\n\t\t\tb.WriteString(\"⏳ Game not started.\\n\")\n\t\t\treturn b.String()\n\t\t}\n\n\t\tfor i, p := range game.Players {\n\t\t\tmarker := \"\"\n\t\t\tif i == game.Turn \u0026\u0026 game.Winner == \"\" {\n\t\t\t\tmarker = \" 👈\"\n\t\t\t}\n\t\t\tb.WriteString(\"- `\" + p.Address.String() + \"`: **\" + strconv.Itoa(p.Position) + \"**\" + marker + \"\\n\")\n\t\t}\n\n\t\tif game.Winner != \"\" {\n\t\t\tb.WriteString(\"\\n🏁 Winner: `\" + game.Winner.String() + \"` 🎉\\n\")\n\t\t}\n\n\t\treturn b.String()\n\t})\n\n\tr.RegisterCallback(\":game-log:\", func() string {\n\t\tvar b strings.Builder\n\t\tb.WriteString(\"## 📜 Game Log\\n\")\n\t\tlogs := game.Logs\n\t\tif len(logs) \u003e 5 {\n\t\t\tlogs = logs[len(logs)-5:] // show last 5\n\t\t}\n\t\tfor _, log := range logs {\n\t\t\tb.WriteString(\"- \" + log + \"\\n\")\n\t\t}\n\t\treturn b.String()\n\t})\n\n\treturn r.ReplaceAll(`\n# 🐍 Snakes and Ladders Game\n\nTry to reach square 100 before your opponents!\n\n:game-state:\n\n:game-log:\n`)\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"I/mpgjf4lgLKTED8MGV3ItlGU8IPbZhgoTImKNBCMEfJtvipi6IW32L/mO3Pb+rm8zKeltPQFXcQWRq0t/qOBw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742593020"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders2","path":"gno.land/r/meeshell222/snakesandladders2","files":[{"name":"package.gno","body":"package snakesandladders2\n\nimport (\n\t\"gno.land/r/dynreplacer\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// --- Game Types ---\n\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  std.Address\n\tLogs    []string\n}\n\n// --- Global State ---\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// --- Helper Functions ---\n\nfunc findPlayer(addr std.Address) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\nfunc logEvent(msg string) {\n\tgame.Logs = append(game.Logs, msg)\n\tstd.Emit(\"GameLog\", \"msg\", msg)\n}\n\n// --- Game Functions ---\n\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif _, exists := findPlayer(caller); exists {\n\t\treturn \"Already joined.\"\n\t}\n\tgame.Players = append(game.Players, Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t})\n\tmsg := \"Player \" + caller.String() + \" joined the game.\"\n\tlogEvent(msg)\n\treturn msg\n}\n\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players to start.\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\tlogEvent(\"Game started with \" + strconv.Itoa(len(game.Players)) + \" players.\")\n\treturn \"Game started.\"\n}\n\nfunc RollDice(roll int) string {\n\tcaller := std.OriginCaller()\n\tif !game.Started {\n\t\treturn \"Game not started yet.\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game already finished. Winner: \" + game.Winner.String()\n\t}\n\n\tcurrPlayer := \u0026game.Players[game.Turn]\n\tif currPlayer.Address != caller {\n\t\treturn \"Not your turn.\"\n\t}\n\n\tpos := currPlayer.Position + roll\n\tif pos \u003e 100 {\n\t\tpos = currPlayer.Position // overshoot doesn't move\n\t}\n\tfinalPos := applySnakesAndLadders(pos)\n\tcurrPlayer.Position = finalPos\n\n\tmsg := caller.String() + \" rolled \" + strconv.Itoa(roll) + \" → \" + strconv.Itoa(finalPos)\n\tif finalPos == 100 {\n\t\tgame.Winner = caller\n\t\tmsg += \" 🎉 WINNER!\"\n\t}\n\tlogEvent(msg)\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn msg\n}\n\nfunc GetGameState() string {\n\tvar states []string\n\tfor _, p := range game.Players {\n\t\tstates = append(states, p.Address.String()+\"@\"+strconv.Itoa(p.Position))\n\t}\n\treturn strings.Join(states, \" | \")\n}\n\nfunc GetLog() []string {\n\treturn game.Logs\n}\n\n// --- Render Function for gno.land UI ---\n\nfunc Render(_ string) string {\n\tr := dynreplacer.New()\n\n\tr.RegisterCallback(\":game-state:\", func() string {\n\t\tvar b strings.Builder\n\t\tb.WriteString(\"## 🎲 Game State\\n\")\n\t\tif !game.Started {\n\t\t\tb.WriteString(\"⏳ Game not started.\\n\")\n\t\t\treturn b.String()\n\t\t}\n\n\t\tfor i, p := range game.Players {\n\t\t\tmarker := \"\"\n\t\t\tif i == game.Turn \u0026\u0026 game.Winner == \"\" {\n\t\t\t\tmarker = \" 👈\"\n\t\t\t}\n\t\t\tb.WriteString(\"- `\" + p.Address.String() + \"`: **\" + strconv.Itoa(p.Position) + \"**\" + marker + \"\\n\")\n\t\t}\n\n\t\tif game.Winner != \"\" {\n\t\t\tb.WriteString(\"\\n🏁 Winner: `\" + game.Winner.String() + \"` 🎉\\n\")\n\t\t}\n\n\t\treturn b.String()\n\t})\n\n\tr.RegisterCallback(\":game-log:\", func() string {\n\t\tvar b strings.Builder\n\t\tb.WriteString(\"## 📜 Game Log\\n\")\n\t\tlogs := game.Logs\n\t\tif len(logs) \u003e 5 {\n\t\t\tlogs = logs[len(logs)-5:] // show last 5\n\t\t}\n\t\tfor _, log := range logs {\n\t\t\tb.WriteString(\"- \" + log + \"\\n\")\n\t\t}\n\t\treturn b.String()\n\t})\n\n\treturn r.ReplaceAll(`\n# 🐍 Snakes and Ladders Game\n\nTry to reach square 100 before your opponents!\n\n:game-state:\n\n:game-log:\n`)\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"I/mpgjf4lgLKTED8MGV3ItlGU8IPbZhgoTImKNBCMEfJtvipi6IW32L/mO3Pb+rm8zKeltPQFXcQWRq0t/qOBw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742593035"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders2","path":"gno.land/r/meeshell222/snakesandladders2","files":[{"name":"package.gno","body":"package snakesandladders2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// --- Game Types ---\n\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  std.Address\n\tLogs    []string\n}\n\n// --- Global State ---\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// --- Helper Functions ---\n\nfunc findPlayer(addr std.Address) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\nfunc logEvent(msg string) {\n\tgame.Logs = append(game.Logs, msg)\n\tstd.Emit(\"GameLog\", \"msg\", msg)\n}\n\n// --- Game Functions ---\n\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif _, exists := findPlayer(caller); exists {\n\t\treturn \"Already joined.\"\n\t}\n\tgame.Players = append(game.Players, Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t})\n\tmsg := \"Player \" + caller.String() + \" joined the game.\"\n\tlogEvent(msg)\n\treturn msg\n}\n\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players to start.\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\tlogEvent(\"Game started with \" + strconv.Itoa(len(game.Players)) + \" players.\")\n\treturn \"Game started.\"\n}\n\nfunc RollDice(roll int) string {\n\tcaller := std.OriginCaller()\n\tif !game.Started {\n\t\treturn \"Game not started yet.\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game already finished. Winner: \" + game.Winner.String()\n\t}\n\n\tcurrPlayer := \u0026game.Players[game.Turn]\n\tif currPlayer.Address != caller {\n\t\treturn \"Not your turn.\"\n\t}\n\n\tpos := currPlayer.Position + roll\n\tif pos \u003e 100 {\n\t\tpos = currPlayer.Position // overshoot doesn't move\n\t}\n\tfinalPos := applySnakesAndLadders(pos)\n\tcurrPlayer.Position = finalPos\n\n\tmsg := caller.String() + \" rolled \" + strconv.Itoa(roll) + \" → \" + strconv.Itoa(finalPos)\n\tif finalPos == 100 {\n\t\tgame.Winner = caller\n\t\tmsg += \" 🎉 WINNER!\"\n\t}\n\tlogEvent(msg)\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn msg\n}\n\nfunc GetGameState() string {\n\tvar states []string\n\tfor i, p := range game.Players {\n\t\tplayer := p.Address.String() + \" at \" + strconv.Itoa(p.Position)\n\t\tif i == game.Turn \u0026\u0026 game.Winner == \"\" {\n\t\t\tplayer += \" 👈\"\n\t\t}\n\t\tstates = append(states, player)\n\t}\n\treturn strings.Join(states, \"\\n\")\n}\n\nfunc GetLog() string {\n\tlogs := game.Logs\n\tif len(logs) \u003e 5 {\n\t\tlogs = logs[len(logs)-5:] // show last 5\n\t}\n\treturn strings.Join(logs, \"\\n\")\n}\n\n// --- Render Function for gno.land UI ---\n\nfunc Render(_ string) string {\n\tvar b strings.Builder\n\n\tb.WriteString(\"# 🐍 Snakes and Ladders\\n\\n\")\n\n\tif !game.Started {\n\t\tb.WriteString(\"Game not started yet. Use `StartGame()` to begin.\\n\\n\")\n\t} else {\n\t\tb.WriteString(\"## 🎲 Game State\\n\\n\")\n\t\tb.WriteString(GetGameState() + \"\\n\\n\")\n\t}\n\n\tif game.Winner != \"\" {\n\t\tb.WriteString(\"🎉 Winner: `\" + game.Winner.String() + \"`\\n\\n\")\n\t}\n\n\tb.WriteString(\"## 📜 Last Moves\\n\\n\")\n\tb.WriteString(GetLog())\n\n\treturn b.String()\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"14652102","gas_fee":"30526ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"wRllkm/PRXOjbIw0kxQWocks+cb/VSThmJHdnMgCi0TCkW5h6pCkqHtIehtoTLZlLup2BN3jNrUz77lM6307Aw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742593171"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders2","func":"StartGame","args":null}],"fee":{"gas_wanted":"241944","gas_fee":"505ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"6sQsaNHyewLc2ztI4tOeixymtSePAHV//2oqdsLivUY1tzpJ7qxtB6I6eRLoGFm4EhmCSAX+A67MkKPpaW2oCA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742593251"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders2","func":"JoinGame","args":null}],"fee":{"gas_wanted":"1069969","gas_fee":"2230ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"J81hzK2++ktou1ILGoQzvCs+YIRC3oOQno0pk8LrJQnFdh/h2V7OTWaYMaNhlVYRN70+Lq6VH8ybAwRZThc5BA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742593271"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders2","func":"RollDice","args":["5"]}],"fee":{"gas_wanted":"980552","gas_fee":"2043ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"SEtL4ZsXrH2vYFIcIXXir3EzybWdlwPRMoBUSVahSOJee/1ftEO2FhdALcLeHHWcG/RUwcE5dZnQDwPvYP3QCA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742593301"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18cwpdpsqd8mywj8skpsqsg9tn9hudkkpa6ycpe","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders2","func":"StartGame","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"A8Om+wfP+ji/uX99EdmtywOUL/4N/EBAsy+SycN3p7BJg4sIXNrDtg8AsonKOO0gT0oWp6CjPvqgFLRjtcaXBg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742593740"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders2","func":"StartGame","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"1223010ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"B2nB66C4+92Y6xA5TedAxji0t9fqwO/ObLk8oKYJYeWNiJMc/dVAvYaJ4ZqPBD/FUzkDEdzFB73m0HQFkCH8Bw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742593750"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders2","func":"RollDice","args":["0"]}],"fee":{"gas_wanted":"980552","gas_fee":"2043ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"9kcLcTrYhs13dpNkGdJ1yY6+nPcBXFzRcZSAorVXPXv0mPDBbMw/7G8QvG+wNTOmAEBIWy4UxlQlyiitpguLBQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742594167"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g16vauf878a9uwtmm9nsp58whefycrg5asv2lt3d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"SH2dnoFvHpHBaeDe1FkOel/4K/2PZ/rmqJ2Habio7LTIe/1rKfKwOLne2PBzxKhNSXwvuyTkdPqiIpijXhuvBA=="}],"memo":""},"metadata":{"timestamp":"1742594378"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18cwpdpsqd8mywj8skpsqsg9tn9hudkkpa6ycpe","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders2","func":"JoinGame","args":null}],"fee":{"gas_wanted":"1118510","gas_fee":"2331ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"AnYYsnKZucDAvsdgr359kA+lcXzRv5JlHXczLnLF89bU+YPY+zYYr8vY/ujilPLmCe/HIm8jArsal8PcdXyGDg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742594534"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders","func":"StartGame","args":null}],"fee":{"gas_wanted":"232893","gas_fee":"486ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"TFRCgON52TQOEZumyefxrOPLVUQ27r/I5XisGKgFFoNYzU5DHZV3H8D6inRw7UGnJw3LMa6I5v349k9VKov1Cw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742594609"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders","func":"StartGame","args":null}],"fee":{"gas_wanted":"232893","gas_fee":"486ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"TFRCgON52TQOEZumyefxrOPLVUQ27r/I5XisGKgFFoNYzU5DHZV3H8D6inRw7UGnJw3LMa6I5v349k9VKov1Cw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742594679"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders","func":"RollDice","args":["0"]}],"fee":{"gas_wanted":"966394","gas_fee":"2014ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"qW1M7GQvl0kdfObbq+G9uyN/E14r9T0nKTWAJ2hYhYAy83qa5ZbSm5fecBsuizjG5HEPFanRHCyBORpLAGbFBA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742594745"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742606976_0","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"UEOaoSJgUTmpUFORgXhzs6K/hmm1vycU6PSYBFTspTNZVd+6lJGhWPM1pd0eFW2cmLkCHEfZNmggncdQ7m9SCg=="}],"memo":""},"metadata":{"timestamp":"1742606975"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742606976_1","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"GdOjESOF5uuFlvbSdvVoZyIfpsE2tTiJkS/xZTqCuD4JbUK6GDIF/AmPIGJ2tsONF9PpPsRC41LdxuN487gpAQ=="}],"memo":""},"metadata":{"timestamp":"1742606975"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742606976_2","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"2nPMwcQdLznn6mlXt/8hMSxh+Q45T/+RHL0mLa03wkzAvtSFvP6flqtUHZZFLbhD5Tmp2kc5co8PJrRRNqbtCg=="}],"memo":""},"metadata":{"timestamp":"1742606975"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742606976_3","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"/D51fIrdrp6mRsMwd9sz6jmAa19n5DoRNbn/4YiCTkccjA7AeKH1HtYWSF8bFa+IlatcfwlOhdbed/VF5tLWBA=="}],"memo":""},"metadata":{"timestamp":"1742606975"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742606976_4","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"eWGBwkwPe4SUt98vPi1BhgKpcILp2fG9tdi0CYH6p/w4o/O83g/yhKwIPV+7N/Zr8UHkiC+UHoiBSzfrkHs2Ag=="}],"memo":""},"metadata":{"timestamp":"1742606975"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742606976_5","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"fKJbOC2YZbTbf0VwFiwoSDUYT9QiylmkR9KhthLXXgT+5f1r5c3uSDsnHMWQ99UuO2o9oxM0ROUlY3wuykZjCw=="}],"memo":""},"metadata":{"timestamp":"1742606975"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742606976_6","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"EcWhB76wsMfQqNuKc5157dzjh1R3+nodH1KBomxmhNhQ/ssqN1Slb3SA9awXQpLw8jg4Li3//NRqQfkx+fLoCA=="}],"memo":""},"metadata":{"timestamp":"1742606975"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742606976_7","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"oCBD28if36/z5rzg4lB4GcBZcapBBTXJmMOCz7d2unhJq04nvI2U0h1w6Pyy5d/HOHIsB46rRoctWjXJXrQeAA=="}],"memo":""},"metadata":{"timestamp":"1742606975"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742606976_8","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"/kpvXrJSMve9tR7U2n/PKonpzgd0BE+5pNarMgPpZD0TP90uam8m1iqZ9IznNYVSYK00hVK0ldJiokrMsIteCA=="}],"memo":""},"metadata":{"timestamp":"1742606975"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742606976_9","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"yj1Nd1wmV6rgoB2Csj1OQaI7eMi0bMv3GVyPOqW1PndnsSR0cYXAHXZdRTkHhB/JkhU4Kc86pyGEtS1P3aapCA=="}],"memo":""},"metadata":{"timestamp":"1742606975"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"PHKO+euBYBOv7iHPztQ3wOvmANGaKhDpsAaaijSZCk7txeoCnJlnwSmViI/dRLr4lSpMvjWYcxqu4gbKVeCoBg=="}],"memo":""},"metadata":{"timestamp":"1742641642"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"PHKO+euBYBOv7iHPztQ3wOvmANGaKhDpsAaaijSZCk7txeoCnJlnwSmViI/dRLr4lSpMvjWYcxqu4gbKVeCoBg=="}],"memo":""},"metadata":{"timestamp":"1742641667"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"PHKO+euBYBOv7iHPztQ3wOvmANGaKhDpsAaaijSZCk7txeoCnJlnwSmViI/dRLr4lSpMvjWYcxqu4gbKVeCoBg=="}],"memo":""},"metadata":{"timestamp":"1742641687"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"PHKO+euBYBOv7iHPztQ3wOvmANGaKhDpsAaaijSZCk7txeoCnJlnwSmViI/dRLr4lSpMvjWYcxqu4gbKVeCoBg=="}],"memo":""},"metadata":{"timestamp":"1742641712"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"PHKO+euBYBOv7iHPztQ3wOvmANGaKhDpsAaaijSZCk7txeoCnJlnwSmViI/dRLr4lSpMvjWYcxqu4gbKVeCoBg=="}],"memo":""},"metadata":{"timestamp":"1742641737"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"PHKO+euBYBOv7iHPztQ3wOvmANGaKhDpsAaaijSZCk7txeoCnJlnwSmViI/dRLr4lSpMvjWYcxqu4gbKVeCoBg=="}],"memo":""},"metadata":{"timestamp":"1742641762"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"PHKO+euBYBOv7iHPztQ3wOvmANGaKhDpsAaaijSZCk7txeoCnJlnwSmViI/dRLr4lSpMvjWYcxqu4gbKVeCoBg=="}],"memo":""},"metadata":{"timestamp":"1742641797"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"PHKO+euBYBOv7iHPztQ3wOvmANGaKhDpsAaaijSZCk7txeoCnJlnwSmViI/dRLr4lSpMvjWYcxqu4gbKVeCoBg=="}],"memo":""},"metadata":{"timestamp":"1742641823"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"PHKO+euBYBOv7iHPztQ3wOvmANGaKhDpsAaaijSZCk7txeoCnJlnwSmViI/dRLr4lSpMvjWYcxqu4gbKVeCoBg=="}],"memo":""},"metadata":{"timestamp":"1742641848"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"PHKO+euBYBOv7iHPztQ3wOvmANGaKhDpsAaaijSZCk7txeoCnJlnwSmViI/dRLr4lSpMvjWYcxqu4gbKVeCoBg=="}],"memo":""},"metadata":{"timestamp":"1742641883"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"PHKO+euBYBOv7iHPztQ3wOvmANGaKhDpsAaaijSZCk7txeoCnJlnwSmViI/dRLr4lSpMvjWYcxqu4gbKVeCoBg=="}],"memo":""},"metadata":{"timestamp":"1742641923"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"PHKO+euBYBOv7iHPztQ3wOvmANGaKhDpsAaaijSZCk7txeoCnJlnwSmViI/dRLr4lSpMvjWYcxqu4gbKVeCoBg=="}],"memo":""},"metadata":{"timestamp":"1742641938"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"PHKO+euBYBOv7iHPztQ3wOvmANGaKhDpsAaaijSZCk7txeoCnJlnwSmViI/dRLr4lSpMvjWYcxqu4gbKVeCoBg=="}],"memo":""},"metadata":{"timestamp":"1742641958"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"PHKO+euBYBOv7iHPztQ3wOvmANGaKhDpsAaaijSZCk7txeoCnJlnwSmViI/dRLr4lSpMvjWYcxqu4gbKVeCoBg=="}],"memo":""},"metadata":{"timestamp":"1742642013"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"PHKO+euBYBOv7iHPztQ3wOvmANGaKhDpsAaaijSZCk7txeoCnJlnwSmViI/dRLr4lSpMvjWYcxqu4gbKVeCoBg=="}],"memo":""},"metadata":{"timestamp":"1742642038"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"PHKO+euBYBOv7iHPztQ3wOvmANGaKhDpsAaaijSZCk7txeoCnJlnwSmViI/dRLr4lSpMvjWYcxqu4gbKVeCoBg=="}],"memo":""},"metadata":{"timestamp":"1742642059"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"PHKO+euBYBOv7iHPztQ3wOvmANGaKhDpsAaaijSZCk7txeoCnJlnwSmViI/dRLr4lSpMvjWYcxqu4gbKVeCoBg=="}],"memo":""},"metadata":{"timestamp":"1742642084"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"PHKO+euBYBOv7iHPztQ3wOvmANGaKhDpsAaaijSZCk7txeoCnJlnwSmViI/dRLr4lSpMvjWYcxqu4gbKVeCoBg=="}],"memo":""},"metadata":{"timestamp":"1742642109"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"PHKO+euBYBOv7iHPztQ3wOvmANGaKhDpsAaaijSZCk7txeoCnJlnwSmViI/dRLr4lSpMvjWYcxqu4gbKVeCoBg=="}],"memo":""},"metadata":{"timestamp":"1742642144"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"PHKO+euBYBOv7iHPztQ3wOvmANGaKhDpsAaaijSZCk7txeoCnJlnwSmViI/dRLr4lSpMvjWYcxqu4gbKVeCoBg=="}],"memo":""},"metadata":{"timestamp":"1742642179"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18t5xm93slgtgllwd3wdftwyylp8mg8lxy782r8","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"roI1/UwmO99akXtelvjYOn4FFZHuqQgBr1yPNvoSTf+IkHvyutTDpwHov855KwsNlzESi2R4XIBtqy/1M96LBQ=="}],"memo":""},"metadata":{"timestamp":"1742651337"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18t5xm93slgtgllwd3wdftwyylp8mg8lxy782r8","send":"","pkg_path":"gno.land/r/demo/userbook","func":"SignUp","args":null}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"X5miz29Ey1IVHWjb2cmZyCh0bAaSgcJKkiEjPKi3ZbruZ3jW2j+WR/oJ3xZAvsnfI7/vnFFlitIi0GTpTHbPAA=="}],"memo":""},"metadata":{"timestamp":"1742652120"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18t5xm93slgtgllwd3wdftwyylp8mg8lxy782r8","send":"","pkg_path":"gno.land/r/demo/userbook","func":"SignUp","args":null}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"X5miz29Ey1IVHWjb2cmZyCh0bAaSgcJKkiEjPKi3ZbruZ3jW2j+WR/oJ3xZAvsnfI7/vnFFlitIi0GTpTHbPAA=="}],"memo":""},"metadata":{"timestamp":"1742652281"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1wlh0jket70jh5uy0773altuc9xv4jj9jpksash","amount":"5000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"7in5MNoN6jzDdqoyiJqTKbP1vbpPllTeeEkdjVKz3P0ljj1leX05QnVvSaHPbmQyAXwso1IKVfLjSbYWeWt5BQ=="}],"memo":""},"metadata":{"timestamp":"1742682831"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1wlh0jket70jh5uy0773altuc9xv4jj9jpksash","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["itsHabib"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"xQl0ak/4lXxbOBgD5xpEK+9yTRodCYvsR/fk7tzlHn8BM8jjVo0s1biou77bPtjHo7H6daraWaFxZoFzUSX3Dg=="}],"memo":""},"metadata":{"timestamp":"1742683308"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1wlh0jket70jh5uy0773altuc9xv4jj9jpksash","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["itshabib"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"uJQ76SvxazVhBV2N36rQQE5jbc/d2H3Gx+9nDSY86Lf1xmGx2wfLU8hymeaSiEZD74AvnSPV16zXmZuaAUhIBg=="}],"memo":""},"metadata":{"timestamp":"1742683393"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1wlh0jket70jh5uy0773altuc9xv4jj9jpksash","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["itshabib111"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"WIb8EFczyd0NcIFYT4ktL4o7yzzNljo/jH+M81XQ5pukyy83gkZnEBSRnI5SSfKD+ezd9g2Jvz//eYxo5l29AA=="}],"memo":""},"metadata":{"timestamp":"1742683765"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1wlh0jket70jh5uy0773altuc9xv4jj9jpksash","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"5eKIwgtNWkfuw7e9C7gnikT7aBjxCjZmDnEJP4SypEjaANup4xR8pYdiq/P7b6DYaaMwD2Kl+v2vkrAIT+OhDA=="}],"memo":""},"metadata":{"timestamp":"1742683956"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1wlh0jket70jh5uy0773altuc9xv4jj9jpksash","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["itshabib111"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"WIb8EFczyd0NcIFYT4ktL4o7yzzNljo/jH+M81XQ5pukyy83gkZnEBSRnI5SSfKD+ezd9g2Jvz//eYxo5l29AA=="}],"memo":""},"metadata":{"timestamp":"1742684026"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1wlh0jket70jh5uy0773altuc9xv4jj9jpksash","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["itshabib111"]}],"fee":{"gas_wanted":"8000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"eYX+77hLmcu/NOKCiThTGBsEcNtORlY1Cj94IyYzjNc4qNcP0JkcUYizgLTd9JT+xbHD5VxsVA5iKuvBxcmjAQ=="}],"memo":""},"metadata":{"timestamp":"1742684126"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1wlh0jket70jh5uy0773altuc9xv4jj9jpksash","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["itshabib111"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"jLXyg+V2v7641RVt9BODZYJZmoZKEVamsCqw3UxW806vBc5/UwGV88UcrXjMsJvDSqY0pT2lCGjj1GBHHRL9Cg=="}],"memo":""},"metadata":{"timestamp":"1742684167"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1wlh0jket70jh5uy0773altuc9xv4jj9jpksash","send":"1100000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["itshabib111"]}],"fee":{"gas_wanted":"11000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"AU9pnTvS1uP4+sQd61HyLBpr4/TFbuE1G1FUzz1OMwnH0/Eb98shHawoxJd+UK96AIEGqL+FNOLaKqHMke7/CA=="}],"memo":""},"metadata":{"timestamp":"1742684252"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1wlh0jket70jh5uy0773altuc9xv4jj9jpksash","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["itshabib111"]}],"fee":{"gas_wanted":"11000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"iM9mCy1UtuyWcEi0GEHd51WPe/t1B0RaK3VAg7u61wNuM2OhHkHQ+QO6ASyJtbUJ+qrpdb0x4ix+/lGcMY41CA=="}],"memo":""},"metadata":{"timestamp":"1742684307"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1wlh0jket70jh5uy0773altuc9xv4jj9jpksash","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["itshabib111"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"9aoK00KFQAb/YFU0pAyNVq4oz1VJpgIspn/dGLzb4Br/cTG1kXe/3mPNX/qsOWSr47I1AGKWwlJsMsu+8358Ag=="}],"memo":""},"metadata":{"timestamp":"1742684387"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742693418_0","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"AyAxV/qyy85UFLD90XCfX9Wt40CSZUAFFyqZPdWuny8Fkq/PlzVgsIWHEfj93cdlKCO1YAtVRSJdhCq+wdNrBw=="}],"memo":""},"metadata":{"timestamp":"1742693414"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742693418_1","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"mZT5mxJxPmEddv/M4PlXoRrkbjaZwd+ssIFcAZU4JpnIVuiK3IJ9RsIpD62/vJJnHC5P9dqIYwN0KGrVyDR/Ag=="}],"memo":""},"metadata":{"timestamp":"1742693414"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742693418_2","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"2Jxi9pteojsXkgUyatVB6aEh4nsHfda7WM1rXjadlG5ZUKL251BVkQJ1omW2j40hgDfFQ5ouRzU/cWjJgKZJAA=="}],"memo":""},"metadata":{"timestamp":"1742693414"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742693418_3","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"VvPtWGJbG54rw2XWR2GQgioN7V7azeLwp9OrvSDlm7rzkU2T6SFYwVa/tqPrsPY/IjWg1TD9kvLE8Jh3ZILRDw=="}],"memo":""},"metadata":{"timestamp":"1742693414"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742693418_4","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"vTEx5REONPVhAYiLbtw9zjKRIgGUWIcM+Hi+Yymam41YdMaS4hio2MB97ELMEtreiw4bnYJ7tiIGnlZk5YyMDw=="}],"memo":""},"metadata":{"timestamp":"1742693414"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742693418_5","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"oficGJGSHPqwQxhp/TaT3W1SlkIZAO5zXS4EKSir5HlevVaoVqPIZIQ6RBZ3YAYfAwwlA82FFl5kKrRz9b5QCw=="}],"memo":""},"metadata":{"timestamp":"1742693414"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742693418_6","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"1q/gTws3Txd5hR+U/SSGRRprwHNCDiEnMx1WuQ9jgIZya0cU/Zctdgi90PXT+LlIcsUjauVOQTupkxW42d3+Ag=="}],"memo":""},"metadata":{"timestamp":"1742693414"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742693418_7","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"n77x3gcv91KprocarGb667QcBLne9L/cxr4mwMIqfUXrIzoEjfhOJwfx2ClMRMnOOps9t70da3upHsbXSHtQCQ=="}],"memo":""},"metadata":{"timestamp":"1742693414"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742693418_8","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"dzLLym7LxHU99D9/1K2OSGy2HU09L7qLI4Vu/rk+adOApP8VZWNTXuwsvNBNr32SkdB7QzbfxT3aaQF7EJyiCQ=="}],"memo":""},"metadata":{"timestamp":"1742693414"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742693418_9","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"I+aJ8cVt18pydDDJYNPyuyd3SCacykKE4yup6km0HRW5KsbX0+WPdnnsyGR3LjDtJagpxr8JS+dniZqQdTh2CQ=="}],"memo":""},"metadata":{"timestamp":"1742693414"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1krhqzttr824dm3zus8fvy79sefxe78k95uwcqa","to_address":"g1hysm2qek2l3s6usngrs7vzzcwfe4z6ydlayg5k","amount":"1000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"2hx3AbcZY8tIg0mod2Seo+PXukGiLGUhUwzmsdnh08DDax4KPd3Zs9FHNt7xEzuDXsp4R2g29pbvJ5T2fsOCBQ=="}],"memo":""},"metadata":{"timestamp":"1742701668"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18t5xm93slgtgllwd3wdftwyylp8mg8lxy782r8","send":"","pkg_path":"gno.land/r/demo/userbook","func":"SignUp","args":null}],"fee":{"gas_wanted":"50000","gas_fee":"1000012ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"OxA7hFrUSovxXKcMo0c8s04I9tHy3rjV73OaAZq2pxWCusX3n9Ds7ajRPDT6yw+9I7tAk3PtbbTtmc8reHpZBw=="}],"memo":""},"metadata":{"timestamp":"1742716262"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1mpkp5lm8lwpm0pym4388836d009zfe4maxlqsq","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"BYNHLjkm4M3D7sMFyyIDIOFgqDEzqwh1HR0iJ+fXO65vZ/eTzLj3nsXHTM7SzbVgRCfIsvSLgKWH7JfAxJdgAw=="}],"memo":""},"metadata":{"timestamp":"1742718642"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g150gdvn780ws7a3s9qpdvv7h4d9hq6vh672ely0","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"jlVmo4UlpiL1leP2XxYHU5UxemymQ5ehqump+dDG52K7sAL+APm88Fte6T0l4a290dsinsniXt3a6EgLyIpiBw=="}],"memo":""},"metadata":{"timestamp":"1742728541"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15nw3tn7623tr48j0awzhg2757lf5yf4mxf9htg","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"L8q7yyGsHrakZhCN8O8PjwTtz4sptvnKcFNiir0NMvXUrgcGmQBspexpzgBuZM8XlZ0iJuJLwLgQuLWBJpcgAw=="}],"memo":""},"metadata":{"timestamp":"1742733777"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15nw3tn7623tr48j0awzhg2757lf5yf4mxf9htg","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"EBQzeStl/siPQ6ra2Qkm8RL0uWwhoUDTwxpG2UU09yLqjzfqWFKYyT+DOLlVZDMMds8+JEFU8N3SEjN3Y8JzCg=="}],"memo":""},"metadata":{"timestamp":"1742733842"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15nw3tn7623tr48j0awzhg2757lf5yf4mxf9htg","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"EBQzeStl/siPQ6ra2Qkm8RL0uWwhoUDTwxpG2UU09yLqjzfqWFKYyT+DOLlVZDMMds8+JEFU8N3SEjN3Y8JzCg=="}],"memo":""},"metadata":{"timestamp":"1742733988"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders3","path":"gno.land/r/meeshell222/snakesandladders3","files":[{"name":"package.gno","body":"package snakesandladders3\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// --- Game Types ---\n\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  std.Address\n\tLogs    []string\n}\n\n// --- Global State ---\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// --- Helper Functions ---\n\nfunc findPlayer(addr std.Address) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\nfunc logEvent(msg string) {\n\tgame.Logs = append(game.Logs, msg)\n\tstd.Emit(\"GameLog\", \"msg\", msg)\n}\n\n// --- Game Functions ---\n\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif _, exists := findPlayer(caller); exists {\n\t\treturn \"Already joined.\"\n\t}\n\tgame.Players = append(game.Players, Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t})\n\tmsg := \"Player \" + caller.String() + \" joined the game.\"\n\tlogEvent(msg)\n\treturn msg\n}\n\nr.RegisterCallback(\":players-count:\", func() string {\n\treturn \"👥 Players joined: \" + strconv.Itoa(len(game.Players))\n})\n\n\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players to start.\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\tlogEvent(\"Game started with \" + strconv.Itoa(len(game.Players)) + \" players.\")\n\treturn \"Game started.\"\n}\n\nfunc RollDice(roll int) string {\n\tcaller := std.OriginCaller()\n\tif !game.Started {\n\t\treturn \"Game not started yet.\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game already finished. Winner: \" + game.Winner.String()\n\t}\n\n\tcurrPlayer := \u0026game.Players[game.Turn]\n\tif currPlayer.Address != caller {\n\t\treturn \"Not your turn.\"\n\t}\n\n\tpos := currPlayer.Position + roll\n\tif pos \u003e 100 {\n\t\tpos = currPlayer.Position // overshoot doesn't move\n\t}\n\tfinalPos := applySnakesAndLadders(pos)\n\tcurrPlayer.Position = finalPos\n\n\tmsg := caller.String() + \" rolled \" + strconv.Itoa(roll) + \" → \" + strconv.Itoa(finalPos)\n\tif finalPos == 100 {\n\t\tgame.Winner = caller\n\t\tmsg += \" 🎉 WINNER!\"\n\t}\n\tlogEvent(msg)\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn msg\n}\n\nfunc GetGameState() string {\n\tvar states []string\n\tfor i, p := range game.Players {\n\t\tplayer := p.Address.String() + \" at \" + strconv.Itoa(p.Position)\n\t\tif i == game.Turn \u0026\u0026 game.Winner == \"\" {\n\t\t\tplayer += \" 👈\"\n\t\t}\n\t\tstates = append(states, player)\n\t}\n\treturn strings.Join(states, \"\\n\")\n}\n\nfunc GetLog() string {\n\tlogs := game.Logs\n\tif len(logs) \u003e 5 {\n\t\tlogs = logs[len(logs)-5:] // show last 5\n\t}\n\treturn strings.Join(logs, \"\\n\")\n}\n\n// --- Render Function for gno.land UI ---\n\nfunc Render(_ string) string {\n\tvar b strings.Builder\n\n\tb.WriteString(\"# 🐍 Snakes and Ladders\\n\\n\")\n\n\tif !game.Started {\n\t\tb.WriteString(\"Game not started yet. Use `StartGame()` to begin.\\n\\n\")\n\t} else {\n\t\tb.WriteString(\"## 🎲 Game State\\n\\n\")\n\t\tb.WriteString(GetGameState() + \"\\n\\n\")\n\t}\n\n\tif game.Winner != \"\" {\n\t\tb.WriteString(\"🎉 Winner: `\" + game.Winner.String() + \"`\\n\\n\")\n\t}\n\n\tb.WriteString(\"## 📜 Last Moves\\n\\n\")\n\tb.WriteString(GetLog())\n\n\treturn b.String()\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"rWkC+ZGLF2lpVtVKVVRGZuUk+bCo+DW3vRaM7efbRh/TxwPQzyIThqF3se0wSQYdNZiAgmiAXc7vroMbNSNjDw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742735820"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders3","path":"gno.land/r/meeshell222/snakesandladders3","files":[{"name":"package.gno","body":"package snakesandladders3\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// --- Game Types ---\n\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  std.Address\n\tLogs    []string\n}\n\n// --- Global State ---\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// --- Helper Functions ---\n\nfunc findPlayer(addr std.Address) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\nfunc logEvent(msg string) {\n\tgame.Logs = append(game.Logs, msg)\n\tstd.Emit(\"GameLog\", \"msg\", msg)\n}\n\n// --- Game Functions ---\n\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif _, exists := findPlayer(caller); exists {\n\t\treturn \"Already joined.\"\n\t}\n\tgame.Players = append(game.Players, Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t})\n\tmsg := \"Player \" + caller.String() + \" joined the game.\"\n\tlogEvent(msg)\n\treturn msg\n}\n\n// StartGame sets up the game with exactly 2 players.\nfunc StartGame(opponent std.Address) string {\n\tcaller := std.OriginCaller()\n\n\t// Ensure the game hasn't started yet\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\t// Ensure caller and opponent are two distinct addresses\n\tif caller == opponent {\n\t\treturn \"Cannot play against yourself.\"\n\t}\n\n\t// Reset game state\n\tgame = Game{\n\t\tPlayers: []Player{\n\t\t\t{Address: caller, Position: 0},\n\t\t\t{Address: opponent, Position: 0},\n\t\t},\n\t\tTurn:    0,\n\t\tStarted: true,\n\t\tLogs:    []string{},\n\t}\n\n\tlogEvent(\"Game started between \" + caller.String() + \" and \" + opponent.String())\n\treturn \"Game started.\"\n}\n\nfunc RollDice(roll int) string {\n\tcaller := std.OriginCaller()\n\tif !game.Started {\n\t\treturn \"Game not started yet.\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game already finished. Winner: \" + game.Winner.String()\n\t}\n\n\tcurrPlayer := \u0026game.Players[game.Turn]\n\tif currPlayer.Address != caller {\n\t\treturn \"Not your turn.\"\n\t}\n\n\tpos := currPlayer.Position + roll\n\tif pos \u003e 100 {\n\t\tpos = currPlayer.Position // overshoot doesn't move\n\t}\n\tfinalPos := applySnakesAndLadders(pos)\n\tcurrPlayer.Position = finalPos\n\n\tmsg := caller.String() + \" rolled \" + strconv.Itoa(roll) + \" → \" + strconv.Itoa(finalPos)\n\tif finalPos == 100 {\n\t\tgame.Winner = caller\n\t\tmsg += \" 🎉 WINNER!\"\n\t}\n\tlogEvent(msg)\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn msg\n}\n\nfunc GetGameState() string {\n\tvar states []string\n\tfor i, p := range game.Players {\n\t\tplayer := p.Address.String() + \" at \" + strconv.Itoa(p.Position)\n\t\tif i == game.Turn \u0026\u0026 game.Winner == \"\" {\n\t\t\tplayer += \" 👈\"\n\t\t}\n\t\tstates = append(states, player)\n\t}\n\treturn strings.Join(states, \"\\n\")\n}\n\nfunc GetLog() string {\n\tlogs := game.Logs\n\tif len(logs) \u003e 5 {\n\t\tlogs = logs[len(logs)-5:] // show last 5\n\t}\n\treturn strings.Join(logs, \"\\n\")\n}\n\n// --- Render Function for gno.land UI ---\n\nfunc Render(_ string) string {\n\tvar b strings.Builder\n\n\tb.WriteString(\"# 🐍 Snakes and Ladders\\n\\n\")\n\n\tif !game.Started {\n\t\tb.WriteString(\"Game not started yet.\\n\")\n\t\tb.WriteString(\"Use `StartGame(g1...)` with two unique players.\\n\\n\")\n\t} else {\n\t\tb.WriteString(\"## 🎲 Game State\\n\\n\")\n\t\tb.WriteString(GetGameState() + \"\\n\\n\")\n\t}\n\n\tif game.Winner != \"\" {\n\t\tb.WriteString(\"🎉 Winner: `\" + game.Winner.String() + \"`\\n\\n\")\n\t}\n\n\tb.WriteString(\"## 📜 Last Moves\\n\\n\")\n\tb.WriteString(GetLog())\n\n\treturn b.String()\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"14663936","gas_fee":"30550ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"orNmXRspapl63hR8JHlMr9Ar2pt64d0WVqyxhDvgyR9eQXFwIJlcV3sHK2R55FvkMo3u/+foeHE2pItrK8FkAw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742736242"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders3","func":"StartGame","args":["g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\n"]}],"fee":{"gas_wanted":"1190802","gas_fee":"2481ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"DnO8pQH1c0N9KQ85CtWNl/zv5ZuUsQvl8GfNXOGaGDwzgdIef17afhVCqAleqJJHOfvbls2vgQM60QVglDdRCA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742736353"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders2","func":"RollDice","args":["0"]}],"fee":{"gas_wanted":"980590","gas_fee":"2043ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"HMP5b3z9DMyuZ+f6xzTImmLYFsINLuKnYOVRFjfzs4WltAw+iPBepnuFX8fGFNMZPUoHWl8S8anGRkwpn7gFDg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742736393"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders4","path":"gno.land/r/meeshell222/snakesandladders4","files":[{"name":"package.gno","body":"package snakesandladders4\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// --- Game Types ---\n\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  std.Address\n\tLogs    []string\n}\n\n// --- Global State ---\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// --- Helper Functions ---\n\nfunc findPlayer(addr std.Address) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\nfunc logEvent(msg string) {\n\tgame.Logs = append(game.Logs, msg)\n\tstd.Emit(\"GameLog\", \"msg\", msg)\n}\n\n// --- Game Functions ---\n\nfunc StartGame(opponent std.Address) string {\n\tcaller := std.OriginCaller()\n\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\n\t// Prevent duplicate entries\n\tif _, exists := findPlayer(caller); !exists {\n\t\tgame.Players = append(game.Players, Player{Address: caller, Position: 0})\n\t}\n\tif _, exists := findPlayer(opponent); !exists {\n\t\tgame.Players = append(game.Players, Player{Address: opponent, Position: 0})\n\t}\n\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Two players are required to start the game.\"\n\t}\n\n\tgame.Started = true\n\tgame.Turn = 0\n\tlogEvent(\"Game started between \" + game.Players[0].Address.String() + \" and \" + game.Players[1].Address.String())\n\treturn \"Game started.\"\n}\n\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif _, exists := findPlayer(caller); exists {\n\t\treturn \"Already joined.\"\n\t}\n\tgame.Players = append(game.Players, Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t})\n\tmsg := \"Player \" + caller.String() + \" joined the game.\"\n\tlogEvent(msg)\n\treturn msg\n}\n\n// StartGame sets up the game with exactly 2 players.\nfunc StartGame(opponent std.Address) string {\n\tcaller := std.OriginCaller()\n\n\t// Ensure the game hasn't started yet\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\t// Ensure caller and opponent are two distinct addresses\n\tif caller == opponent {\n\t\treturn \"Cannot play against yourself.\"\n\t}\n\n\t// Reset game state\n\tgame = Game{\n\t\tPlayers: []Player{\n\t\t\t{Address: caller, Position: 0},\n\t\t\t{Address: opponent, Position: 0},\n\t\t},\n\t\tTurn:    0,\n\t\tStarted: true,\n\t\tLogs:    []string{},\n\t}\n\n\tlogEvent(\"Game started between \" + caller.String() + \" and \" + opponent.String())\n\treturn \"Game started.\"\n}\n\nfunc RollDice(roll int) string {\n\tcaller := std.OriginCaller()\n\tif !game.Started {\n\t\treturn \"Game not started yet.\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game already finished. Winner: \" + game.Winner.String()\n\t}\n\n\tcurrPlayer := \u0026game.Players[game.Turn]\n\tif currPlayer.Address != caller {\n\t\treturn \"Not your turn.\"\n\t}\n\n\tpos := currPlayer.Position + roll\n\tif pos \u003e 100 {\n\t\tpos = currPlayer.Position // overshoot doesn't move\n\t}\n\tfinalPos := applySnakesAndLadders(pos)\n\tcurrPlayer.Position = finalPos\n\n\tmsg := caller.String() + \" rolled \" + strconv.Itoa(roll) + \" → \" + strconv.Itoa(finalPos)\n\tif finalPos == 100 {\n\t\tgame.Winner = caller\n\t\tmsg += \" 🎉 WINNER!\"\n\t}\n\tlogEvent(msg)\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn msg\n}\n\nfunc GetGameState() string {\n\tvar states []string\n\tfor i, p := range game.Players {\n\t\tplayer := p.Address.String() + \" at \" + strconv.Itoa(p.Position)\n\t\tif i == game.Turn \u0026\u0026 game.Winner == \"\" {\n\t\t\tplayer += \" 👈\"\n\t\t}\n\t\tstates = append(states, player)\n\t}\n\treturn strings.Join(states, \"\\n\")\n}\n\nfunc GetLog() string {\n\tlogs := game.Logs\n\tif len(logs) \u003e 5 {\n\t\tlogs = logs[len(logs)-5:] // show last 5\n\t}\n\treturn strings.Join(logs, \"\\n\")\n}\n\n// --- Render Function for gno.land UI ---\n\nfunc Render(_ string) string {\n\tvar b strings.Builder\n\n\tb.WriteString(\"# 🐍 Snakes \u0026 Ladders\\n\\n\")\n\n\t// Game status\n\tif !game.Started {\n\t\tb.WriteString(\"**Game not started yet.**\\n\")\n\t\tb.WriteString(\"Call `StartGame(opponentAddress)` after both players have joined.\\n\\n\")\n\t} else if game.Winner != \"\" {\n\t\tb.WriteString(\"🏁 **Winner:** `\" + game.Winner.String() + \"` 🎉\\n\\n\")\n\t} else {\n\t\tcurr := game.Players[game.Turn].Address.String()\n\t\tb.WriteString(\"🎯 **Current turn:** `\" + curr + \"`\\n\\n\")\n\t}\n\n\t// Player states\n\tb.WriteString(\"## 👥 Players\\n\")\n\tfor i, p := range game.Players {\n\t\tpos := strconv.Itoa(p.Position)\n\t\tturnMarker := \"\"\n\t\tif i == game.Turn \u0026\u0026 game.Winner == \"\" {\n\t\t\tturnMarker = \" 👈\"\n\t\t}\n\t\tb.WriteString(\"- `\" + p.Address.String() + \"` at **\" + pos + \"**\" + turnMarker + \"\\n\")\n\t}\n\tb.WriteString(\"\\n\")\n\n\t// Basic grid rendering (top-down 10x10)\n\tb.WriteString(\"## 🎲 Game Board (100 → 1)\\n\\n\")\n\tfor row := 9; row \u003e= 0; row-- {\n\t\tfor col := 0; col \u003c 10; col++ {\n\t\t\tnum := row*10 + col + 1\n\t\t\tif row%2 == 1 {\n\t\t\t\tnum = row*10 + (9 - col) + 1 // serpentine pattern\n\t\t\t}\n\n\t\t\t// Show player(s) on tile\n\t\t\tmark := \"⬜\"\n\t\t\tfor _, p := range game.Players {\n\t\t\t\tif p.Position == num {\n\t\t\t\t\tmark = \"🎯\"\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Show snake or ladder\n\t\t\tif _, ok := snakes[num]; ok {\n\t\t\t\tmark = \"🐍\"\n\t\t\t} else if _, ok := ladders[num]; ok {\n\t\t\t\tmark = \"🪜\"\n\t\t\t}\n\n\t\t\tb.WriteString(mark + \" \")\n\t\t}\n\t\tb.WriteString(\"\\n\")\n\t}\n\tb.WriteString(\"\\n\")\n\n\t// Logs\n\tb.WriteString(\"## 📜 Last Moves\\n\")\n\tlogs := game.Logs\n\tif len(logs) \u003e 5 {\n\t\tlogs = logs[len(logs)-5:]\n\t}\n\tfor _, log := range logs {\n\t\tb.WriteString(\"- \" + log + \"\\n\")\n\t}\n\n\treturn b.String()\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"F7gv6G9jLP/b+BPCmp82AdK82niFkPdgzpsXWsZDj4v2jhGnDRId2AzCO5lJd+lQ8Xf8oa/4YTeefqtKBqSeAA=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742736754"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders4","path":"gno.land/r/meeshell222/snakesandladders4","files":[{"name":"package.gno","body":"package snakesandladders4\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// --- Game Types ---\n\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  std.Address\n\tLogs    []string\n}\n\n// --- Global State ---\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// --- Helper Functions ---\n\nfunc findPlayer(addr std.Address) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\nfunc logEvent(msg string) {\n\tgame.Logs = append(game.Logs, msg)\n\tstd.Emit(\"GameLog\", \"msg\", msg)\n}\n\n// --- Game Functions ---\n\nfunc StartGame(opponent std.Address) string {\n\tcaller := std.OriginCaller()\n\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\n  func StartGame(opponent std.Address) string {\n\tcaller := std.OriginCaller()\n\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\n\t// Prevent duplicate entries\n\tif _, exists := findPlayer(caller); !exists {\n\t\tgame.Players = append(game.Players, Player{Address: caller, Position: 0})\n\t}\n\tif _, exists := findPlayer(opponent); !exists {\n\t\tgame.Players = append(game.Players, Player{Address: opponent, Position: 0})\n\t}\n\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Two players are required to start the game.\"\n\t}\n\n\tgame.Started = true\n\tgame.Turn = 0\n\tlogEvent(\"Game started between \" + game.Players[0].Address.String() + \" and \" + game.Players[1].Address.String())\n\treturn \"Game started.\"\n}\n\n\n\t// Prevent duplicate entries\n\tif _, exists := findPlayer(caller); !exists {\n\t\tgame.Players = append(game.Players, Player{Address: caller, Position: 0})\n\t}\n\tif _, exists := findPlayer(opponent); !exists {\n\t\tgame.Players = append(game.Players, Player{Address: opponent, Position: 0})\n\t}\n\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Two players are required to start the game.\"\n\t}\n\n\tgame.Started = true\n\tgame.Turn = 0\n\tlogEvent(\"Game started between \" + game.Players[0].Address.String() + \" and \" + game.Players[1].Address.String())\n\treturn \"Game started.\"\n}\n\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif _, exists := findPlayer(caller); exists {\n\t\treturn \"Already joined.\"\n\t}\n\tgame.Players = append(game.Players, Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t})\n\tmsg := \"Player \" + caller.String() + \" joined the game.\"\n\tlogEvent(msg)\n\treturn msg\n}\n\n// StartGame sets up the game with exactly 2 players.\nfunc StartGame(opponent std.Address) string {\n\tcaller := std.OriginCaller()\n\n\t// Ensure the game hasn't started yet\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\t// Ensure caller and opponent are two distinct addresses\n\tif caller == opponent {\n\t\treturn \"Cannot play against yourself.\"\n\t}\n\n\t// Reset game state\n\tgame = Game{\n\t\tPlayers: []Player{\n\t\t\t{Address: caller, Position: 0},\n\t\t\t{Address: opponent, Position: 0},\n\t\t},\n\t\tTurn:    0,\n\t\tStarted: true,\n\t\tLogs:    []string{},\n\t}\n\n\tlogEvent(\"Game started between \" + caller.String() + \" and \" + opponent.String())\n\treturn \"Game started.\"\n}\n\nfunc RollDice(roll int) string {\n\tcaller := std.OriginCaller()\n\tif !game.Started {\n\t\treturn \"Game not started yet.\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game already finished. Winner: \" + game.Winner.String()\n\t}\n\n\tcurrPlayer := \u0026game.Players[game.Turn]\n\tif currPlayer.Address != caller {\n\t\treturn \"Not your turn.\"\n\t}\n\n\tpos := currPlayer.Position + roll\n\tif pos \u003e 100 {\n\t\tpos = currPlayer.Position // overshoot doesn't move\n\t}\n\tfinalPos := applySnakesAndLadders(pos)\n\tcurrPlayer.Position = finalPos\n\n\tmsg := caller.String() + \" rolled \" + strconv.Itoa(roll) + \" → \" + strconv.Itoa(finalPos)\n\tif finalPos == 100 {\n\t\tgame.Winner = caller\n\t\tmsg += \" 🎉 WINNER!\"\n\t}\n\tlogEvent(msg)\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn msg\n}\n\nfunc GetGameState() string {\n\tvar states []string\n\tfor i, p := range game.Players {\n\t\tplayer := p.Address.String() + \" at \" + strconv.Itoa(p.Position)\n\t\tif i == game.Turn \u0026\u0026 game.Winner == \"\" {\n\t\t\tplayer += \" 👈\"\n\t\t}\n\t\tstates = append(states, player)\n\t}\n\treturn strings.Join(states, \"\\n\")\n}\n\nfunc GetLog() string {\n\tlogs := game.Logs\n\tif len(logs) \u003e 5 {\n\t\tlogs = logs[len(logs)-5:] // show last 5\n\t}\n\treturn strings.Join(logs, \"\\n\")\n}\n\n// --- Render Function for gno.land UI ---\n\nfunc Render(_ string) string {\n\tvar b strings.Builder\n\n\tb.WriteString(\"# 🐍 Snakes and Ladders\\n\\n\")\n\n\tif !game.Started {\n\t\tb.WriteString(\"🎮 *Game not started.*\\n\\n\")\n\t\tb.WriteString(\"Use `StartGame(\\\"g1...\\\")` to begin — you can even play against yourself!\\n\\n\")\n\t\tif len(game.Players) \u003e 0 {\n\t\t\tb.WriteString(\"### Joined Players:\\n\")\n\t\t\tfor _, p := range game.Players {\n\t\t\t\tb.WriteString(\"- `\" + p.Address.String() + \"`\\n\")\n\t\t\t}\n\t\t\tb.WriteString(\"\\n\")\n\t\t}\n\t\treturn b.String()\n\t}\n\n\tb.WriteString(\"## 🎲 Game State\\n\\n\")\n\tfor i, p := range game.Players {\n\t\tturnMarker := \"\"\n\t\tif i == game.Turn \u0026\u0026 game.Winner == \"\" {\n\t\t\tturnMarker = \" 👈 *current turn*\"\n\t\t}\n\t\tb.WriteString(\"- `\" + p.Address.String() + \"` is on **\" + strconv.Itoa(p.Position) + \"**\" + turnMarker + \"\\n\")\n\t}\n\n\tif game.Winner != \"\" {\n\t\tb.WriteString(\"\\n🏁 **Winner:** `\" + game.Winner.String() + \"` 🎉\\n\")\n\t}\n\n\tb.WriteString(\"\\n## 📜 Recent Moves\\n\\n\")\n\tlogs := game.Logs\n\tif len(logs) \u003e 5 {\n\t\tlogs = logs[len(logs)-5:]\n\t}\n\tfor _, log := range logs {\n\t\tb.WriteString(\"- \" + log + \"\\n\")\n\t}\n\n\treturn b.String()\n}\n\n\nfunc Render(_ string) string {\n\tvar b strings.Builder\n\n\tb.WriteString(\"# 🐍 Snakes \u0026 Ladders\\n\\n\")\n\n\t// Game status\n\tif !game.Started {\n\t\tb.WriteString(\"**Game not started yet.**\\n\")\n\t\tb.WriteString(\"Call `StartGame(opponentAddress)` after both players have joined.\\n\\n\")\n\t} else if game.Winner != \"\" {\n\t\tb.WriteString(\"🏁 **Winner:** `\" + game.Winner.String() + \"` 🎉\\n\\n\")\n\t} else {\n\t\tcurr := game.Players[game.Turn].Address.String()\n\t\tb.WriteString(\"🎯 **Current turn:** `\" + curr + \"`\\n\\n\")\n\t}\n\n\t// Player states\n\tb.WriteString(\"## 👥 Players\\n\")\n\tfor i, p := range game.Players {\n\t\tpos := strconv.Itoa(p.Position)\n\t\tturnMarker := \"\"\n\t\tif i == game.Turn \u0026\u0026 game.Winner == \"\" {\n\t\t\tturnMarker = \" 👈\"\n\t\t}\n\t\tb.WriteString(\"- `\" + p.Address.String() + \"` at **\" + pos + \"**\" + turnMarker + \"\\n\")\n\t}\n\tb.WriteString(\"\\n\")\n\n\t// Basic grid rendering (top-down 10x10)\n\tb.WriteString(\"## 🎲 Game Board (100 → 1)\\n\\n\")\n\tfor row := 9; row \u003e= 0; row-- {\n\t\tfor col := 0; col \u003c 10; col++ {\n\t\t\tnum := row*10 + col + 1\n\t\t\tif row%2 == 1 {\n\t\t\t\tnum = row*10 + (9 - col) + 1 // serpentine pattern\n\t\t\t}\n\n\t\t\t// Show player(s) on tile\n\t\t\tmark := \"⬜\"\n\t\t\tfor _, p := range game.Players {\n\t\t\t\tif p.Position == num {\n\t\t\t\t\tmark = \"🎯\"\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Show snake or ladder\n\t\t\tif _, ok := snakes[num]; ok {\n\t\t\t\tmark = \"🐍\"\n\t\t\t} else if _, ok := ladders[num]; ok {\n\t\t\t\tmark = \"🪜\"\n\t\t\t}\n\n\t\t\tb.WriteString(mark + \" \")\n\t\t}\n\t\tb.WriteString(\"\\n\")\n\t}\n\tb.WriteString(\"\\n\")\n\n\t// Logs\n\tb.WriteString(\"## 📜 Last Moves\\n\")\n\tlogs := game.Logs\n\tif len(logs) \u003e 5 {\n\t\tlogs = logs[len(logs)-5:]\n\t}\n\tfor _, log := range logs {\n\t\tb.WriteString(\"- \" + log + \"\\n\")\n\t}\n\n\treturn b.String()\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"vipvwGQl6mlP0j0Pv6AlhewSISBpFEQ4KMFqNJ8tvcEBQFU7sN4O2DBEmXidB0S7wHYFNf5o58naLJnAHAxOBg=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742736895"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ckanw7sgnyfyqygunjjk9hp7mmlqvkxhsjdxya","send":"","pkg_path":"gno.land/r/docs/hello","func":"Render","args":[""]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"1q4utUqT+eAtCiJMsooJ7fohqR6wGP2YHcHd/6/C+gsdLaNlrInNwFpoETbKXHZOJP9BF/KqTBY4V5C1NVb4CQ=="}],"memo":""},"metadata":{"timestamp":"1742750475"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ckanw7sgnyfyqygunjjk9hp7mmlqvkxhsjdxya","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"kmExfSmk6Ws3/ClCdkRgX/q6cykpkwUpk3k97lbHoFU2Vj3lcU7J4ZVb/q4eCH2S8gbakjhoGNOOZoet6kx7DQ=="}],"memo":""},"metadata":{"timestamp":"1742750912"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ckanw7sgnyfyqygunjjk9hp7mmlqvkxhsjdxya","send":"","pkg_path":"gno.land/r/docs/users","func":"Render","args":["g1ckanw7sgnyfyqygunjjk9hp7mmlqvkxhsjdxya"]}],"fee":{"gas_wanted":"6000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"k8St+U+cf+nucuh4X+AyzFdBAP5un2KV7OsOEE36Jb4V/Hm5QwEh7u6Ux2nIU+fhRl2bPPlpxWjZNKwQ20I2CA=="}],"memo":""},"metadata":{"timestamp":"1742750957"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ckanw7sgnyfyqygunjjk9hp7mmlqvkxhsjdxya","send":"","pkg_path":"gno.land/r/docs/users","func":"Render","args":["g1z5225q6e7qjtmexjmakkn86r66lw94r0gajyn9"]}],"fee":{"gas_wanted":"6000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"ScE3h2DHiXdJSNUtRBnECznQv7C8brQHcsuDrgOAPgJLvqcn5Cmaw3lsvXJ71PCTtYc99urKZ/h27JlQtd+ZDg=="}],"memo":""},"metadata":{"timestamp":"1742751017"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ckanw7sgnyfyqygunjjk9hp7mmlqvkxhsjdxya","send":"","pkg_path":"gno.land/r/docs/hello","func":"Render","args":[""]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"1q4utUqT+eAtCiJMsooJ7fohqR6wGP2YHcHd/6/C+gsdLaNlrInNwFpoETbKXHZOJP9BF/KqTBY4V5C1NVb4CQ=="}],"memo":""},"metadata":{"timestamp":"1742751183"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ckanw7sgnyfyqygunjjk9hp7mmlqvkxhsjdxya","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["Miguelito766"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"P91qMBuSHwhahbSgpfwcjdt4ygOvdSvsvLz8yxqXgCTRvKYRy5eTjllsZytwode9M9aFNV5hMgaHu2E0ooOsDQ=="}],"memo":""},"metadata":{"timestamp":"1742751489"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ckanw7sgnyfyqygunjjk9hp7mmlqvkxhsjdxya","send":"","pkg_path":"gno.land/r/sys/users","func":"RegisterUser","args":["miguelito766","g1ckanw7sgnyfyqygunjjk9hp7mmlqvkxhsjdxya"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"SZS0J0VT0KbMiRuvNTxREaNdxDTT++FYJ4RCnTKXCspu0vxoNRX8Obq43O/0/8wygHYvhFz7ql6Xcw4dhLMQAA=="}],"memo":""},"metadata":{"timestamp":"1742752252"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ckanw7sgnyfyqygunjjk9hp7mmlqvkxhsjdxya","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["Miguelito766"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"gkqHAVXgW3/MdM0emO0wWq46lUOAGApfHMGMLrj1qogufT0wpdZYl0CrN5ZiKK/Cqpsr+PXdmh3epg/ddEhkDQ=="}],"memo":""},"metadata":{"timestamp":"1742752508"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ckanw7sgnyfyqygunjjk9hp7mmlqvkxhsjdxya","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["miguelito766"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"/u9jvHbp+Q3O5jtpcx6dYmhSr8Q/cG0oR1/H1MhsfgbTNK1lkTNM+fyzm498KMJZEY3cTQ2P+B1/PPWamI48BQ=="}],"memo":""},"metadata":{"timestamp":"1742752564"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ckanw7sgnyfyqygunjjk9hp7mmlqvkxhsjdxya","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["76"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"XcT1e2YszvgkMXawuQzzgw1FiMm2uK82mQen3fx52pnbXCOdZIKJ6PAHa9V5xKyhq3DNVPtZQqgZO8w4Qvu0Cw=="}],"memo":""},"metadata":{"timestamp":"1742753949"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742779804_0","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"425758","gas_fee":"426ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"MeOXVHVM+SAfI5/RlCwvWbk9JG25+N96nONiPzI1IHzrlmZQsnJQhGSgPPCmPW7JpBALk7ywkZ1ySRMSB25iDg=="}],"memo":""},"metadata":{"timestamp":"1742779803"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742779804_1","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"425758","gas_fee":"426ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"TBfEvTv1ijqXn3f2sOj4QX55WkCJAljFf6cW5LLDZPWQcHzz4pomV41+RLhelMhDvymbh0RwIsTrSK2GpgVMBg=="}],"memo":""},"metadata":{"timestamp":"1742779803"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742779804_2","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"425758","gas_fee":"426ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"GoWjBCQAVCMY8A7nIpHjxQhh2crOnfjhQ4W5FqCMjol7JuuGVIfhe422StP4Ktp2DRbSqymqdLnw+sQYZBmgBA=="}],"memo":""},"metadata":{"timestamp":"1742779803"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742779804_3","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"425758","gas_fee":"426ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"0SU0FXJwrfiWcDURcjl6BmIjpkxRiBQKjhF1mbhH/x5lCk5uOQ0ix1Xq+TG1fea7dbBt9YHqkX0yZXhMsunnAg=="}],"memo":""},"metadata":{"timestamp":"1742779803"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742779804_4","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"425758","gas_fee":"426ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"Kyj8EZtBI71QAIy2He8U5NDNDD5ZIVL3KgIzpFBug9JVTmpU7/jgjQIzSa0ydQBY9butFJcv6uFwY7i0seRGDg=="}],"memo":""},"metadata":{"timestamp":"1742779803"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742779804_5","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"425758","gas_fee":"426ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"bPGi3PIYAFfsd7I2s+ZD69soQml1Rs961CS4kRaZtQ94MgvZbfKSCvrF2BGrvVZfy5KM7xTdO5XDUu3RvUdIBA=="}],"memo":""},"metadata":{"timestamp":"1742779803"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742779804_6","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"425758","gas_fee":"426ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"tsrZS4oUx3qfU0jR/YvII75PmcQr730p3TtcMxKpC4vzvz6ktTSFrjRf/6s01oGsE9k9dfm0Ok7z5GFd5Sk3Cg=="}],"memo":""},"metadata":{"timestamp":"1742779803"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742779804_7","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"425758","gas_fee":"426ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"cTUlpTIgcUz/n2aqkZ3aaW+fa7y+qdl8BiLj5Y/5ZAG0vkTkibq16bze7yVELyZIbs6tftVByS5JvtMTlTcnAA=="}],"memo":""},"metadata":{"timestamp":"1742779803"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742779804_8","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"425758","gas_fee":"426ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"w5vhDo9PAjtI3wx1JD4JXbgNxUCotRiyvfB5B8GvgkXYHwif4WFwwQXwIclPiC8/JNpYwf+fwOqrkQ4XbWDkDw=="}],"memo":""},"metadata":{"timestamp":"1742779803"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742779804_9","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"425758","gas_fee":"426ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"XRUHWN/z1DlWA9n5ZhQmqw8fNsbJjqmVrZ57SUoJFgA0oauo1AkdO/7jV6Jh3Jbi50R0eHhAi3i7Vd5J9AQPDg=="}],"memo":""},"metadata":{"timestamp":"1742779803"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders2","func":"StartGame","args":null}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"+g1nzwSyWwUeO1NPJZaqh+gXt0dGZvcXpGwdDR0diUfsygQ/FQnCrv1UF0oQ7CRkwOyf/9H8fAgSD4sA9wfDBQ=="}],"memo":""},"metadata":{"timestamp":"1742805594"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"1000001ugnot","pkg_path":"gno.land/r/stefann/home","func":"Donate","args":null}],"fee":{"gas_wanted":"2059554","gas_fee":"862252ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"ZnSeXrMVFSd3nA6W7wmeFX1PAjj3ILZTz8QOf+MnfypIqxm6M2eevkg0aVLHGxgILrl0SXBzRpibtOIdGQAWBg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742808144"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"home","path":"gno.land/r/meeshell222/home","files":[{"name":"package.gno","body":"package home\n\nimport (\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/moul/dynreplacer\"\n\tblog \"gno.land/r/gnoland/blog\"\n\tevents \"gno.land/r/gnoland/events\"\n)\n\n// XXX: p/demo/ui API is crappy, we need to make it more idiomatic\n// XXX: use an updatable block system to update content from a DAO\n// XXX: var blocks avl.Tree\n\nvar (\n\toverride string\n\tAdmin    = ownable.NewWithAddress(\"g1manfred47kzduec920z88wfr64ylksmdcedlf5\") // @moul\n)\n\nfunc Render(_ string) string {\n\tr := dynreplacer.New()\n\tr.RegisterCallback(\":latest-blogposts:\", func() string {\n\t\treturn blog.RenderLastPostsWidget(4)\n\t})\n\tr.RegisterCallback(\":upcoming-events:\", func() string {\n\t\tout, _ := events.RenderEventWidget(events.MaxWidgetSize)\n\t\treturn out\n\t})\n\n\ttemplate := `# Welcome to gno.land\n\n## We’re building a decentralized operating system where governance is fair, development is open, and innovation is rewarded.\n\n[/about](/about) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/github](/github) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/try gno](/try-gno) \n\n\n**/about /github /try gno**\n\ngno.land is a smart contract platform built for Gno, a deterministic implementation of Go, designed for secure, auditable, and reusable decentralized applications (dApps). Unlike historical blockchain development languages, Gno allows Go developers to easily transfer their skills without needing to learn a completely new language. With type safety and composability, gno.land makes building scalable dApps secure, intuitive and reusable.\n\nAt its core, gno.land is the ‘GitHub’ of the Gno ecosystem, where transparent, open-source smart contracts are built on top of a native censorship-resistant decentralized operating system (dOS) starting with the Gno Virtual Machine (GnoVM).\n\n## Key Features of Gno\n\n- Open \u0026 Transparent: All applications are open-source and fully auditable.\n- Composable: Smart contracts are modular, reusable, and customizable to ease development and extend the ecosystem’s capabilities quickly.\n- Censorship-Resistant: Enables platforms with fair moderation and freedom of communication without a central authority.\n- Developer-Friendly: Intuitive design that reduces onboarding timelines and enables faster iteration.\n- Go-Based \u0026 Type Safe: Go developers can transition seamlessly to Gno thanks to the well-established Go language, while benefiting from type safety for security.\n\n\n---\n\nUse Cases\n\n## Why Gno and gno.land?\n\ngno.land’s smart contract platform is a first step in an experiment to build a complete dOS to bypass the centralized and controlled restrictions of the current Web, and power new social platforms, governance frameworks, and economic models that favor contribution-based incentives.\n\n\u003cgno-columns\u003e\n\n####\n\n![The next killer app](#)\n\n### A Platform Designed for Next Generation Apps\n\nA reusable technical architecture for everyone to build the next generation applications of the future that attract the next wave of builders and users.\n\n####\n\n![New-Economic-Model](#)\n\n### New Economic Model\n\nA builder-aligned economy that incentivizes developers, content creators, and maintainers with sustainable rewards.\n\n####\n\n![Decentralized Platform Governance](#)\n\n### Decentralized Governance: GovDAO\n\nA governance model that prioritizes contribution-based participation over capital-weighted control.\n\n####\n\n![Social coordination \u0026 community](#)\n\n### Social coordination \u0026 community\n\nA decentralized space for uncensored discourse, fair moderation, and community-driven governance with forkability to allow for conflict resolution.\n\n\n\n\n\u003c/gno-columns\u003e\n\n---\nBeta Mainnet\n\n## Beta Mainnet Coming Soon!\n\nStay tuned for the first phase of gno.land's launch, the beta mainnet release.  \n- [Road to Mainnet and Beyond](https://gno.land/r/gnoland/blog:p/road-to-mainnet)\n\n---\n\nEcosystem\n\n## Discover the gno.land universe\n\nExplore gno.land's expanding ecosystem of applications, wallets, and explorers.\n\n[/the ecosystem ](https://gno.land/ecosystem)\n\n\n\u003cgno-columns\u003e\n\n####\n\n![Wallet](#)\n\n### Wallets and Faucet\n\nExecute transactions on gno.land using wallets, or a CLI keychain and client tool.\n\n- [Adena Wallet](https://www.adena.app/)\n- [gnokey](https://docs.gno.land/gno-tooling/cli/gnokey/)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n\n####\n\n![Explorers](#)\n\n### Explorers\n\nMonitor and track the status of on-chain transactions in real time. \n\n- [gnoscan](https://gnoscan.io/)\n\n\n####\n\n![Defi](#)\n\n### Defi and Games\n\nTry out the DeFi platforms and gaming applications on gno.land. \n\n- [gnoswap - a gno.land DEX](http://beta.gnoswap.io/)\n\n####\n\n![Social dApps](#)\n\n### Social and Community dApps\n\nRegister your gno.land username and be a part of the conversation happening on gno.land social network, r/Boards.  \n\n- [gno.land's user name registry](https://gno.land/r/gnoland/users/v1)\n- [Boards - gno.land's social network](coming soon!)\n- [Hall of Fame](https://gno.land/r/leon/hof) \n- [Gno.me - gno.land's educational and community development platform](Coming soon!)\n\n\n\u003c/gno-columns\u003e\n\n## A community of gnomes\n\ngno.land is a contribution-driven network and community where dedicated contributors, also known as gnomes, serve as the builders, guardians, and pioneers of gno.land’s future.\n\n\u003cgno-columns\u003e\n##\n\n![Blog](#)\n\n### Our Blog \n\n:latest-blogposts:\n\n##\n\n![Events](#)\n\n### Past Events\n\n:upcoming-events:\n\n\u003c/gno-columns\u003e\n\n---\n\nBuilders\n\n## Build on gno.land\n\ngno.land builders are at the center of creating the applications and infrastructure for the decentralized operating system needed to power an Internet that is 100% decentralized.\n\n[/read the documentation](docs.gno.land) [Read about the Gno language](https://gno.land/gnolang)\n\n\u003cgno-columns\u003e\n\n### Builders\n\n- [Discover Gno Examples](https://gno.land/r/docs)\n- [Gno Playground: Code to Gno](https://play.gno.land/)\n- [Gno Studio Connect: A Realm interaction app](https://gno.studio/connect)\n- [Gnodev: Efficient local development for Gno](https://docs.gno.land/gno-tooling/cli/gno-tooling-gnodev)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n- [Discover Demo Packages](https://github.com/gnolang/gno/tree/master/examples)\n\n### Bounties\n\nThe Gno bounty program is a good way to find interesting challenges in Gno, and get rewarded for helping us advance the project. \n\n[/read more](https://github.com/gnolang/bounties)\n\n### gno.land grants\n\nAre you a builder, tinkerer, or researcher? If you’re looking to create awesome dApps, tooling, infrastructure, or smart contract libraries on gno.land, you can apply for a grant. gno.land grants program provides financial support to developers interested in exploring new blockchain technology, and/or are already actively contributing to gno.land.\n\n[/read more](https://github.com/gnolang/grants)\n\n\u003c/gno-columns\u003e\n\n---\n\n\u003cgno-columns\u003e\n\n### General\n\n- [About](#)\n- [Events](#)\n- [Blog](#)\n- [Career](#)\n\n### Advanced\n\n- [Builder Guides](#)\n- [Tokenomics](#)\n- [Demo list](#)\n- [Docs](#)\n\n### Explore\n\n- [Faucet](#)\n- [Ecosystem](#)\n- [Partners](#)\n- [Gnops](#)\n\n### Social\n\n- [GitHub](#)\n- [Discord](#)\n- [YouTube](#)\n- [Twitter](#)\n\n\u003c/gno-columns\u003e\n`\n\n\tif override != \"\" {\n\t\ttemplate = override\n\t}\n\tresult := r.Replace(template)\n\treturn result\n}\n\nfunc AdminSetOverride(content string) {\n\tAdmin.AssertCallerIsOwner()\n\toverride = content\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"Vgx+fK+taYs7YlGkrP7heMIPh8i5xBug1rZh7OI+eOreJEBfZqvzCf/gSRJhn7P4T/JsihkA13ikBhfALoZfDA=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742820368"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"home2","path":"gno.land/r/meeshell222/home2","files":[{"name":"package.gno","body":"package home2\n\nimport (\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/moul/dynreplacer\"\n\tblog \"gno.land/r/gnoland/blog\"\n\tevents \"gno.land/r/gnoland/events\"\n)\n\n// XXX: p/demo/ui API is crappy, we need to make it more idiomatic\n// XXX: use an updatable block system to update content from a DAO\n// XXX: var blocks avl.Tree\n\nvar (\n\toverride string\n\tAdmin    = ownable.NewWithAddress(\"g1manfred47kzduec920z88wfr64ylksmdcedlf5\") // @moul\n)\n\nfunc Render(_ string) string {\n\tr := dynreplacer.New()\n\tr.RegisterCallback(\":latest-blogposts:\", func() string {\n\t\treturn blog.RenderLastPostsWidget(4)\n\t})\n\tr.RegisterCallback(\":upcoming-events:\", func() string {\n\t\tout, _ := events.RenderEventWidget(events.MaxWidgetSize)\n\t\treturn out\n\t})\n\n\ttemplate := `# Welcome to gno.land\n\n## We’re building a decentralized operating system where governance is fair, development is open, and innovation is rewarded.\n\n[/about](/about) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/github](/github) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/try gno](/try-gno) \n\n\n**/about /github /try gno**\n\ngno.land is a smart contract platform built for Gno, a deterministic implementation of Go, designed for secure, auditable, and reusable decentralized applications (dApps). Unlike historical blockchain development languages, Gno allows Go developers to easily transfer their skills without needing to learn a completely new language. With type safety and composability, gno.land makes building scalable dApps secure, intuitive and reusable.\n\nAt its core, gno.land is the ‘GitHub’ of the Gno ecosystem, where transparent, open-source smart contracts are built on top of a native censorship-resistant decentralized operating system (dOS) starting with the Gno Virtual Machine (GnoVM).\n\n## Key Features of Gno\n\n- Open \u0026 Transparent: All applications are open-source and fully auditable.\n- Composable: Smart contracts are modular, reusable, and customizable to ease development and extend the ecosystem’s capabilities quickly.\n- Censorship-Resistant: Enables platforms with fair moderation and freedom of communication without a central authority.\n- Developer-Friendly: Intuitive design that reduces onboarding timelines and enables faster iteration.\n- Go-Based \u0026 Type Safe: Go developers can transition seamlessly to Gno thanks to the well-established Go language, while benefiting from type safety for security.\n\n\n---\n\nUse Cases\n\n## Why Gno and gno.land?\n\ngno.land’s smart contract platform is a first step in an experiment to build a complete dOS to bypass the centralized and controlled restrictions of the current Web, and power new social platforms, governance frameworks, and economic models that favor contribution-based incentives.\n\n\u003cgno-columns\u003e\n\n####\n\n![The next killer app](#)\n\n### A Platform Designed for Next Generation Apps\n\nA reusable technical architecture for everyone to build the next generation applications of the future that attract the next wave of builders and users.\n\n####\n\n![New-Economic-Model](#)\n\n### New Economic Model\n\nA builder-aligned economy that incentivizes developers, content creators, and maintainers with sustainable rewards.\n\n####\n\n![Decentralized Platform Governance](#)\n\n### Decentralized Governance: GovDAO\n\nA governance model that prioritizes contribution-based participation over capital-weighted control.\n\n####\n\n![Social coordination \u0026 community](#)\n\n### Social coordination \u0026 community\n\nA decentralized space for uncensored discourse, fair moderation, and community-driven governance with forkability to allow for conflict resolution.\n\n\n\n\n\u003c/gno-columns\u003e\n\n---\nBeta Mainnet\n\n## Beta Mainnet Coming Soon!\n\nStay tuned for the first phase of gno.land's launch, the beta mainnet release.  \n- [Road to Mainnet and Beyond](https://gno.land/r/gnoland/blog:p/road-to-mainnet)\n\n---\n\nEcosystem\n\n## Discover the gno.land universe\n\nExplore gno.land's expanding ecosystem of applications, wallets, and explorers.\n\n[/the ecosystem ](https://gno.land/ecosystem)\n\n\n\u003cgno-columns\u003e\n\n####\n\n![Wallet](#)\n\n### Wallets and Faucet\n\nExecute transactions on gno.land using wallets, or a CLI keychain and client tool.\n\n- [Adena Wallet](https://www.adena.app/)\n- [gnokey](https://docs.gno.land/gno-tooling/cli/gnokey/)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n\n####\n\n![Explorers](#)\n\n### Explorers\n\nMonitor and track the status of on-chain transactions in real time. \n\n- [gnoscan](https://gnoscan.io/)\n\n\n####\n\n![Defi](#)\n\n### Defi and Games\n\nTry out the DeFi platforms and gaming applications on gno.land. \n\n- [gnoswap - a gno.land DEX](http://beta.gnoswap.io/)\n\n####\n\n![Social dApps](#)\n\n### Social and Community dApps\n\nRegister your gno.land username and be a part of the conversation happening on gno.land social network, r/Boards.  \n\n- [gno.land's user name registry](https://gno.land/r/gnoland/users/v1)\n- [Boards - gno.land's social network](coming soon!)\n- [Hall of Fame](https://gno.land/r/leon/hof) \n- [Gno.me - gno.land's educational and community development platform](Coming soon!)\n\n\n\u003c/gno-columns\u003e\n\n## A community of gnomes\n\ngno.land is a contribution-driven network and community where dedicated contributors, also known as gnomes, serve as the builders, guardians, and pioneers of gno.land’s future.\n\n\u003cgno-columns\u003e\n##\n\n![Blog](#)\n\n### Our Blog \n\n:latest-blogposts:\n\n##\n\n![Events](#)\n\n### Past Events\n\n:upcoming-events:\n\n\u003c/gno-columns\u003e\n\n---\n\nBuilders\n\n## Build on gno.land\n\ngno.land builders are at the center of creating the applications and infrastructure for the decentralized operating system needed to power an Internet that is 100% decentralized.\n\n[/read the documentation](docs.gno.land) [Read about the Gno language](https://gno.land/gnolang)\n\n\u003cgno-columns\u003e\n\n### Builders\n\n- [Discover Gno Examples](https://gno.land/r/docs)\n- [Gno Playground: Code to Gno](https://play.gno.land/)\n- [Gno Studio Connect: A Realm interaction app](https://gno.studio/connect)\n- [Gnodev: Efficient local development for Gno](https://docs.gno.land/gno-tooling/cli/gno-tooling-gnodev)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n- [Discover Demo Packages](https://github.com/gnolang/gno/tree/master/examples)\n\n### Bounties\n\nThe Gno bounty program is a good way to find interesting challenges in Gno, and get rewarded for helping us advance the project. \n\n[/read more](https://github.com/gnolang/bounties)\n\n### gno.land grants\n\nAre you a builder, tinkerer, or researcher? If you’re looking to create awesome dApps, tooling, infrastructure, or smart contract libraries on gno.land, you can apply for a grant. gno.land grants program provides financial support to developers interested in exploring new blockchain technology, and/or are already actively contributing to gno.land.\n\n[/read more](https://github.com/gnolang/grants)\n\n\u003c/gno-columns\u003e\n\n---\n\n\u003cgno-columns\u003e\n\n### General\n\n- [About](#)\n- [Events](#)\n- [Blog](#)\n- [Career](#)\n\n### Advanced\n\n- [Builder Guides](#)\n- [Tokenomics](#)\n- [Demo list](#)\n- [Docs](#)\n\n### Explore\n\n- [Faucet](#)\n- [Ecosystem](#)\n- [Partners](#)\n- [Gnops](#)\n\n### Social\n\n- [GitHub](#)\n- [Discord](#)\n- [YouTube](#)\n- [Twitter](#)\n\n\u003c/gno-columns\u003e\n`\n\n\tif override != \"\" {\n\t\ttemplate = override\n\t}\n\tresult := r.Replace(template)\n\treturn result\n}\n\nfunc AdminSetOverride(content string) {\n\tAdmin.AssertCallerIsOwner()\n\toverride = content\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"ZPyPDw23nBcFANevMT3xmwQEaA6Cq2g5Xb/7afjURD48AHhcQtDDFzVgt2JcB1kgz7+oPhzbKY+gVEfEPi3lAw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742820388"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"home4","path":"gno.land/r/meeshell222/home4","files":[{"name":"package.gno","body":"package home4\n\nimport (\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/moul/dynreplacer\"\n\tblog \"gno.land/r/gnoland/blog\"\n\tevents \"gno.land/r/gnoland/events\"\n)\n\n// XXX: p/demo/ui API is crappy, we need to make it more idiomatic\n// XXX: use an updatable block system to update content from a DAO\n// XXX: var blocks avl.Tree\n\nvar (\n\toverride string\n\tAdmin    = ownable.NewWithAddress(\"g1manfred47kzduec920z88wfr64ylksmdcedlf5\") // @moul\n)\n\nfunc Render(_ string) string {\n\tr := dynreplacer.New()\n\tr.RegisterCallback(\":latest-blogposts:\", func() string {\n\t\treturn blog.RenderLastPostsWidget(4)\n\t})\n\tr.RegisterCallback(\":upcoming-events:\", func() string {\n\t\tout, _ := events.RenderEventWidget(events.MaxWidgetSize)\n\t\treturn out\n\t})\n\n\ttemplate := `# Welcome to gno.land\n\n## We’re building a decentralized operating system where governance is fair, development is open, and innovation is rewarded.\n\n[/about](/about) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/github](/github) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/try gno](/try-gno) \n\n\n**/about /github /try gno**\n\ngno.land is a smart contract platform built for Gno, a deterministic implementation of Go, designed for secure, auditable, and reusable decentralized applications (dApps). Unlike historical blockchain development languages, Gno allows Go developers to easily transfer their skills without needing to learn a completely new language. With type safety and composability, gno.land makes building scalable dApps secure, intuitive and reusable.\n\nAt its core, gno.land is the ‘GitHub’ of the Gno ecosystem, where transparent, open-source smart contracts are built on top of a native censorship-resistant decentralized operating system (dOS) starting with the Gno Virtual Machine (GnoVM).\n\n## Key Features of Gno\n\n- Open \u0026 Transparent: All applications are open-source and fully auditable.\n- Composable: Smart contracts are modular, reusable, and customizable to ease development and extend the ecosystem’s capabilities quickly.\n- Censorship-Resistant: Enables platforms with fair moderation and freedom of communication without a central authority.\n- Developer-Friendly: Intuitive design that reduces onboarding timelines and enables faster iteration.\n- Go-Based \u0026 Type Safe: Go developers can transition seamlessly to Gno thanks to the well-established Go language, while benefiting from type safety for security.\n\n\n---\n\nUse Cases\n\n## Why Gno and gno.land?\n\ngno.land’s smart contract platform is a first step in an experiment to build a complete dOS to bypass the centralized and controlled restrictions of the current Web, and power new social platforms, governance frameworks, and economic models that favor contribution-based incentives.\n\n\u003cgno-columns\u003e\n\n####\n\n![The next killer app](#)\n\n### A Platform Designed for Next Generation Apps\n\nA reusable technical architecture for everyone to build the next generation applications of the future that attract the next wave of builders and users.\n\n####\n\n![New-Economic-Model](#)\n\n### New Economic Model\n\nA builder-aligned economy that incentivizes developers, content creators, and maintainers with sustainable rewards.\n\n####\n\n![Decentralized Platform Governance](#)\n\n### Decentralized Governance: GovDAO\n\nA governance model that prioritizes contribution-based participation over capital-weighted control.\n\n####\n\n![Social coordination \u0026 community](#)\n\n### Social coordination \u0026 community\n\nA decentralized space for uncensored discourse, fair moderation, and community-driven governance with forkability to allow for conflict resolution.\n\n\n\n\n\u003c/gno-columns\u003e\n\n---\nBeta Mainnet\n\n## Beta Mainnet Coming Soon!\n\nStay tuned for the first phase of gno.land's launch, the beta mainnet release.  \n- [Road to Mainnet and Beyond](https://gno.land/r/gnoland/blog:p/road-to-mainnet)\n\n---\n\nEcosystem\n\n## Discover the gno.land universe\n\nExplore gno.land's expanding ecosystem of applications, wallets, and explorers.\n\n[/the ecosystem ](https://gno.land/ecosystem)\n\n\n\u003cgno-columns\u003e\n\n####\n\n![Wallet](#)\n\n### Wallets and Faucet\n\nExecute transactions on gno.land using wallets, or a CLI keychain and client tool.\n\n- [Adena Wallet](https://www.adena.app/)\n- [gnokey](https://docs.gno.land/gno-tooling/cli/gnokey/)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n\n####\n\n![Explorers](#)\n\n### Explorers\n\nMonitor and track the status of on-chain transactions in real time. \n\n- [gnoscan](https://gnoscan.io/)\n\n\n####\n\n![Defi](#)\n\n### Defi and Games\n\nTry out the DeFi platforms and gaming applications on gno.land. \n\n- [gnoswap - a gno.land DEX](http://beta.gnoswap.io/)\n\n####\n\n![Social dApps](#)\n\n### Social and Community dApps\n\nRegister your gno.land username and be a part of the conversation happening on gno.land social network, r/Boards.  \n\n- [gno.land's user name registry](https://gno.land/r/gnoland/users/v1)\n- [Boards - gno.land's social network](coming soon!)\n- [Hall of Fame](https://gno.land/r/leon/hof) \n- [Gno.me - gno.land's educational and community development platform](Coming soon!)\n\n\n\u003c/gno-columns\u003e\n\n## A community of gnomes\n\ngno.land is a contribution-driven network and community where dedicated contributors, also known as gnomes, serve as the builders, guardians, and pioneers of gno.land’s future.\n\n\u003cgno-columns\u003e\n##\n\n![Blog](#)\n\n### Our Blog \n\n:latest-blogposts:\n\n##\n\n![Events](#)\n\n### Past Events\n\n:upcoming-events:\n\n\u003c/gno-columns\u003e\n\n---\n\nBuilders\n\n## Build on gno.land\n\ngno.land builders are at the center of creating the applications and infrastructure for the decentralized operating system needed to power an Internet that is 100% decentralized.\n\n[/read the documentation](docs.gno.land) [Read about the Gno language](https://gno.land/gnolang)\n\n\u003cgno-columns\u003e\n\n### Builders\n\n- [Discover Gno Examples](https://gno.land/r/docs)\n- [Gno Playground: Code to Gno](https://play.gno.land/)\n- [Gno Studio Connect: A Realm interaction app](https://gno.studio/connect)\n- [Gnodev: Efficient local development for Gno](https://docs.gno.land/gno-tooling/cli/gno-tooling-gnodev)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n- [Discover Demo Packages](https://github.com/gnolang/gno/tree/master/examples)\n\n### Bounties\n\nThe Gno bounty program is a good way to find interesting challenges in Gno, and get rewarded for helping us advance the project. \n\n[/read more](https://github.com/gnolang/bounties)\n\n### gno.land grants\n\nAre you a builder, tinkerer, or researcher? If you’re looking to create awesome dApps, tooling, infrastructure, or smart contract libraries on gno.land, you can apply for a grant. gno.land grants program provides financial support to developers interested in exploring new blockchain technology, and/or are already actively contributing to gno.land.\n\n[/read more](https://github.com/gnolang/grants)\n\n\u003c/gno-columns\u003e\n\n---\n\n\u003cgno-columns\u003e\n\n### General\n\n- [About](#)\n- [Events](#)\n- [Blog](#)\n- [Career](#)\n\n### Advanced\n\n- [Builder Guides](#)\n- [Tokenomics](#)\n- [Demo list](#)\n- [Docs](#)\n\n### Explore\n\n- [Faucet](#)\n- [Ecosystem](#)\n- [Partners](#)\n- [Gnops](#)\n\n### Social\n\n- [GitHub](#)\n- [Discord](#)\n- [YouTube](#)\n- [Twitter](#)\n\n\u003c/gno-columns\u003e\n`\n\n\tif override != \"\" {\n\t\ttemplate = override\n\t}\n\tresult := r.Replace(template)\n\treturn result\n}\n\nfunc AdminSetOverride(content string) {\n\tAdmin.AssertCallerIsOwner()\n\toverride = content\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"YxfFeK7c+ek3NrkYscFv5YL1oZpg0IZsKQgavkpAQtuj4BhqB91tGq28aaA09iKX3Kikd3g2mzn7baLcDA9qAA=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742820418"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"home4v2","path":"gno.land/r/meeshell222/home4v2","files":[{"name":"package.gno","body":"package home4v2\n\nimport (\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/moul/dynreplacer\"\n\tblog \"gno.land/r/gnoland/blog\"\n\tevents \"gno.land/r/gnoland/events\"\n)\n\nvar (\n\toverride string\n\tAdmin    = ownable.NewWithAddress(\"g1manfred47kzduec920z88wfr64ylksmdcedlf5\") // @moul\n)\n\nfunc Render(_ string) string {\n\tr := dynreplacer.New()\n\tr.RegisterCallback(\":latest-blogposts:\", func() string {\n\t\treturn blog.RenderLastPostsWidget(4)\n\t})\n\tr.RegisterCallback(\":upcoming-events:\", func() string {\n\t\tout, _ := events.RenderEventWidget(events.MaxWidgetSize)\n\t\treturn out\n\t})\n\n\ttemplate := `# Welcome to gno.land\n\n## We’re building a decentralized operating system where governance is fair, development is open, and innovation is rewarded.\n\n[/about](/about) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/github](/github) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/try gno](/try-gno) \n\n\n**/about /github /try gno**\n\ngno.land is a smart contract platform built for Gno, a deterministic implementation of Go, designed for secure, auditable, and reusable decentralized applications (dApps). Unlike historical blockchain development languages, Gno allows Go developers to easily transfer their skills without needing to learn a completely new language. With type safety and composability, gno.land makes building scalable dApps secure, intuitive and reusable.\n\nAt its core, gno.land is the ‘GitHub’ of the Gno ecosystem, where transparent, open-source smart contracts are built on top of a native censorship-resistant decentralized operating system (dOS) starting with the Gno Virtual Machine (GnoVM).\n\n## Key Features of Gno\n\n- Open \u0026 Transparent: All applications are open-source and fully auditable.\n- Composable: Smart contracts are modular, reusable, and customizable to ease development and extend the ecosystem’s capabilities quickly.\n- Censorship-Resistant: Enables platforms with fair moderation and freedom of communication without a central authority.\n- Developer-Friendly: Intuitive design that reduces onboarding timelines and enables faster iteration.\n- Go-Based \u0026 Type Safe: Go developers can transition seamlessly to Gno thanks to the well-established Go language, while benefiting from type safety for security.\n\n---\n\nUse Cases\n\n## Why Gno and gno.land?\n\ngno.land’s smart contract platform is a first step in an experiment to build a complete dOS to bypass the centralized and controlled restrictions of the current Web, and power new social platforms, governance frameworks, and economic models that favor contribution-based incentives.\n\n\u003cgno-columns\u003e\n\n####\n\n![The next killer app](#)\n\n### A Platform Designed for Next Generation Apps\n\nA reusable technical architecture for everyone to build the next generation applications of the future that attract the next wave of builders and users.\n\n####\n\n![New-Economic-Model](#)\n\n### New Economic Model\n\nA builder-aligned economy that incentivizes developers, content creators, and maintainers with sustainable rewards.\n\n####\n\n![Decentralized Platform Governance](#)\n\n### Decentralized Governance: GovDAO\n\nA governance model that prioritizes contribution-based participation over capital-weighted control.\n\n####\n\n![Social coordination \u0026 community](#)\n\n### Social coordination \u0026 community\n\nA decentralized space for uncensored discourse, fair moderation, and community-driven governance with forkability to allow for conflict resolution.\n\n\u003c/gno-columns\u003e\n\n---\nBeta Mainnet\n\n## Beta Mainnet Coming Soon!\n\nStay tuned for the first phase of gno.land's launch, the beta mainnet release.  \n- [Road to Mainnet and Beyond](https://gno.land/r/gnoland/blog:p/road-to-mainnet)\n\n---\n\nEcosystem\n\n## Discover the gno.land universe\n\nExplore gno.land's expanding ecosystem of applications, wallets, and explorers.\n\n[/the ecosystem ](https://gno.land/ecosystem)\n\n\u003cgno-columns\u003e\n\n####\n\n![Wallet](#)\n\n### Wallets and Faucet\n\nExecute transactions on gno.land using wallets, or a CLI keychain and client tool.\n\n- [Adena Wallet](https://www.adena.app/)\n- [gnokey](https://docs.gno.land/gno-tooling/cli/gnokey/)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n\n####\n\n![Explorers](#)\n\n### Explorers\n\nMonitor and track the status of on-chain transactions in real time. \n\n- [gnoscan](https://gnoscan.io/)\n\n####\n\n![Defi](#)\n\n### Defi and Games\n\nTry out the DeFi platforms and gaming applications on gno.land. \n\n- [gnoswap - a gno.land DEX](http://beta.gnoswap.io/)\n\n####\n\n![Social dApps](#)\n\n### Social and Community dApps\n\nRegister your gno.land username and be a part of the conversation happening on gno.land social network, r/Boards.  \n\n- [gno.land's user name registry](https://gno.land/r/gnoland/users/v1)\n- [Boards - gno.land's social network](coming soon!)\n- [Hall of Fame](https://gno.land/r/leon/hof) \n- [Gno.me - gno.land's educational and community development platform](Coming soon!)\n\n\u003c/gno-columns\u003e\n\n## A community of gnomes\n\ngno.land is a contribution-driven network and community where dedicated contributors, also known as gnomes, serve as the builders, guardians, and pioneers of gno.land’s future.\n\n\u003cgno-columns\u003e\n##\n\n![Blog](#)\n\n### Our Blog \n\n:latest-blogposts:\n\n##\n\n![Events](#)\n\n### Past Events\n\n:upcoming-events:\n\n\u003c/gno-columns\u003e\n\n---\n\nBuilders\n\n## Build on gno.land\n\ngno.land builders are at the center of creating the applications and infrastructure for the decentralized operating system needed to power an Internet that is 100% decentralized.\n\n[/read the documentation](docs.gno.land) [Read about the Gno language](https://gno.land/gnolang)\n\n\u003cgno-columns\u003e\n\n### Builders\n\n- [Discover Gno Examples](https://gno.land/r/docs)\n- [Gno Playground: Code to Gno](https://play.gno.land/)\n- [Gno Studio Connect: A Realm interaction app](https://gno.studio/connect)\n- [Gnodev: Efficient local development for Gno](https://docs.gno.land/gno-tooling/cli/gno-tooling-gnodev)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n- [Discover Demo Packages](https://github.com/gnolang/gno/tree/master/examples)\n\n### Bounties\n\nThe Gno bounty program is a good way to find interesting challenges in Gno, and get rewarded for helping us advance the project. \n\n[/read more](https://github.com/gnolang/bounties)\n\n### gno.land grants\n\nAre you a builder, tinkerer, or researcher? If you’re looking to create awesome dApps, tooling, infrastructure, or smart contract libraries on gno.land, you can apply for a grant. gno.land grants program provides financial support to developers interested in exploring new blockchain technology, and/or are already actively contributing to gno.land.\n\n[/read more](https://github.com/gnolang/grants)\n\n\u003c/gno-columns\u003e\n\n---\n\n\u003cgno-columns\u003e\n\n### General\n\n- [About](#)\n- [Events](#)\n- [Blog](#)\n- [Career](#)\n\n### Advanced\n\n- [Builder Guides](#)\n- [Tokenomics](#)\n- [Demo list](#)\n- [Docs](#)\n\n### Explore\n\n- [Faucet](#)\n- [Ecosystem](#)\n- [Partners](#)\n- [Gnops](#)\n\n### Social\n\n- [GitHub](#)\n- [Discord](#)\n- [YouTube](#)\n- [Twitter](#)\n\n\u003c/gno-columns\u003e\n`\n\n\tif override != \"\" {\n\t\ttemplate = override\n\t}\n\tresult := r.Replace(template)\n\treturn result\n}\n\nfunc AdminSetOverride(content string) {\n\tAdmin.AssertCallerIsOwner()\n\toverride = content\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"31502832","gas_fee":"65631ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"vUWCz3vkjlg2SN9YA9WOT/1f0vZD+i5g4DQ8vmzVG5J2oJSWeHhsL+uYGWgyghE/DtUH3OweaW+NcZPxnrZpBQ=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742820735"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"home4v3","path":"gno.land/r/meeshell222/home4v3","files":[{"name":"package.gno","body":"package home4v3\n\nimport (\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/moul/dynreplacer\"\n\tblog \"gno.land/r/gnoland/blog\"\n\tevents \"gno.land/r/gnoland/events\"\n)\n\nvar (\n\toverride string\n\tAdmin    = ownable.NewWithAddress(\"g1manfred47kzduec920z88wfr64ylksmdcedlf5\") // @moul\n)\n\nfunc Render(_ string) string {\n\tr := dynreplacer.New()\n\tr.RegisterCallback(\":latest-blogposts:\", func() string {\n\t\treturn blog.RenderLastPostsWidget(4)\n\t})\n\tr.RegisterCallback(\":upcoming-events:\", func() string {\n\t\tout, _ := events.RenderEventWidget(events.MaxWidgetSize)\n\t\treturn out\n\t})\n\n\ttemplate := `# Welcome to gno.land\n\n## We’re building a decentralized operating system where governance is fair, development is open, and innovation is rewarded.\n\n[/about](/about) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/github](/github) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/try gno](/try-gno) \n\n\n**/about /github /try gno**\n\ngno.land is a smart contract platform built for Gno, a deterministic implementation of Go, designed for secure, auditable, and reusable decentralized applications (dApps). Unlike historical blockchain development languages, Gno allows Go developers to easily transfer their skills without needing to learn a completely new language. With type safety and composability, gno.land makes building scalable dApps secure, intuitive and reusable.\n\nAt its core, gno.land is the ‘GitHub’ of the Gno ecosystem, where transparent, open-source smart contracts are built on top of a native censorship-resistant decentralized operating system (dOS) starting with the Gno Virtual Machine (GnoVM).\n\n## Key Features of Gno\n\n- Open \u0026 Transparent: All applications are open-source and fully auditable.\n- Composable: Smart contracts are modular, reusable, and customizable to ease development and extend the ecosystem’s capabilities quickly.\n- Censorship-Resistant: Enables platforms with fair moderation and freedom of communication without a central authority.\n- Developer-Friendly: Intuitive design that reduces onboarding timelines and enables faster iteration.\n- Go-Based \u0026 Type Safe: Go developers can transition seamlessly to Gno thanks to the well-established Go language, while benefiting from type safety for security.\n\n---\n\nUse Cases\n\n## Why Gno and gno.land?\n\ngno.land’s smart contract platform is a first step in an experiment to build a complete dOS to bypass the centralized and controlled restrictions of the current Web, and power new social platforms, governance frameworks, and economic models that favor contribution-based incentives.\n\n\u003cgno-columns\u003e\n\n####\n\n\n### A Platform Designed for Next Generation Apps\n\nA reusable technical architecture for everyone to build the next generation applications of the future that attract the next wave of builders and users.\n\n####\n\n\n### New Economic Model\n\nA builder-aligned economy that incentivizes developers, content creators, and maintainers with sustainable rewards.\n\n####\n\n\n### Decentralized Governance: GovDAO\n\nA governance model that prioritizes contribution-based participation over capital-weighted control.\n\n####\n\n### Social coordination \u0026 community\n\nA decentralized space for uncensored discourse, fair moderation, and community-driven governance with forkability to allow for conflict resolution.\n\n\u003c/gno-columns\u003e\n\n---\nBeta Mainnet\n\n## Beta Mainnet Coming Soon!\n\nStay tuned for the first phase of gno.land's launch, the beta mainnet release.  \n- [Road to Mainnet and Beyond](https://gno.land/r/gnoland/blog:p/road-to-mainnet)\n\n---\n\nEcosystem\n\n## Discover the gno.land universe\n\nExplore gno.land's expanding ecosystem of applications, wallets, and explorers.\n\n[/the ecosystem ](https://gno.land/ecosystem)\n\n\u003cgno-columns\u003e\n\n####\n\n\n### Wallets and Faucet\n\nExecute transactions on gno.land using wallets, or a CLI keychain and client tool.\n\n- [Adena Wallet](https://www.adena.app/)\n- [gnokey](https://docs.gno.land/gno-tooling/cli/gnokey/)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n\n####\n\n### Explorers\n\nMonitor and track the status of on-chain transactions in real time. \n\n- [gnoscan](https://gnoscan.io/)\n\n####\n\n\n### Defi and Games\n\nTry out the DeFi platforms and gaming applications on gno.land. \n\n- [gnoswap - a gno.land DEX](http://beta.gnoswap.io/)\n\n####\n\n\n### Social and Community dApps\n\nRegister your gno.land username and be a part of the conversation happening on gno.land social network, r/Boards.  \n\n- [gno.land's user name registry](https://gno.land/r/gnoland/users/v1)\n- [Boards - gno.land's social network](coming soon!)\n- [Hall of Fame](https://gno.land/r/leon/hof) \n- [Gno.me - gno.land's educational and community development platform](Coming soon!)\n\n\u003c/gno-columns\u003e\n\n## A community of gnomes\n\ngno.land is a contribution-driven network and community where dedicated contributors, also known as gnomes, serve as the builders, guardians, and pioneers of gno.land’s future.\n\n\u003cgno-columns\u003e\n##\n\n\n### Our Blog \n\n:latest-blogposts:\n\n##\n\n\n### Past Events\n\n:upcoming-events:\n\n\u003c/gno-columns\u003e\n\n---\n\nBuilders\n\n## Build on gno.land\n\ngno.land builders are at the center of creating the applications and infrastructure for the decentralized operating system needed to power an Internet that is 100% decentralized.\n\n[/read the documentation](docs.gno.land) [Read about the Gno language](https://gno.land/gnolang)\n\n\u003cgno-columns\u003e\n\n### Builders\n\n- [Discover Gno Examples](https://gno.land/r/docs)\n- [Gno Playground: Code to Gno](https://play.gno.land/)\n- [Gno Studio Connect: A Realm interaction app](https://gno.studio/connect)\n- [Gnodev: Efficient local development for Gno](https://docs.gno.land/gno-tooling/cli/gno-tooling-gnodev)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n- [Discover Demo Packages](https://github.com/gnolang/gno/tree/master/examples)\n\n### Bounties\n\nThe Gno bounty program is a good way to find interesting challenges in Gno, and get rewarded for helping us advance the project. \n\n[/read more](https://github.com/gnolang/bounties)\n\n### gno.land grants\n\n      If you’re looking to create awesome dApps, tooling, infrastructure, or smart contract libraries on gno.land, you can apply for a grant. gno.land grants program provides financial support to developers interested in exploring new blockchain technology, and/or are already actively contributing to gno.land.\n\n[/read more](https://github.com/gnolang/grants)\n\n\u003c/gno-columns\u003e\n\n---\n\n\u003cgno-columns\u003e\n\n### General\n\n- [About](#)\n- [Events](#)\n- [Blog](#)\n- [Career](#)\n\n### Advanced\n\n- [Builder Guides](#)\n- [Tokenomics](#)\n- [Demo list](#)\n- [Docs](#)\n\n### Explore\n\n- [Faucet](#)\n- [Ecosystem](#)\n- [Partners](#)\n- [Gnops](#)\n\n### Social\n\n- [GitHub](#)\n- [Discord](#)\n- [YouTube](#)\n- [Twitter](#)\n\n\u003c/gno-columns\u003e\n`\n\n\tif override != \"\" {\n\t\ttemplate = override\n\t}\n\tresult := r.Replace(template)\n\treturn result\n}\n\nfunc AdminSetOverride(content string) {\n\tAdmin.AssertCallerIsOwner()\n\toverride = content\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"31497388","gas_fee":"65620ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"70KwHnZ8IA1FTd/HmHWBMoel1T3KLS/kNigoE3JeLDqLheI3Ne0tK8zI/gAKI4MWYXizZK7UQK5zNv6ae5imBQ=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742820971"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"home4v4","path":"gno.land/r/meeshell222/home4v4","files":[{"name":"package.gno","body":"package home4v4\n\nimport (\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/moul/dynreplacer\"\n\tblog \"gno.land/r/gnoland/blog\"\n\tevents \"gno.land/r/gnoland/events\"\n)\n\nvar (\n\toverride string\n\tAdmin    = ownable.NewWithAddress(\"g1manfred47kzduec920z88wfr64ylksmdcedlf5\") // @moul\n)\n\nfunc Render(_ string) string {\n\tr := dynreplacer.New()\n\tr.RegisterCallback(\":latest-blogposts:\", func() string {\n\t\treturn blog.RenderLastPostsWidget(4)\n\t})\n\tr.RegisterCallback(\":upcoming-events:\", func() string {\n\t\tout, _ := events.RenderEventWidget(events.MaxWidgetSize)\n\t\treturn out\n\t})\n\n\ttemplate := `# Welcome to gno.land\n\n## We’re building a decentralized operating system where governance is fair, development is open, and innovation is rewarded.\n\n[/about](/about) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/github](/github) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/try gno](/try-gno) \n\n\n**/about /github /try gno**\n\ngno.land is a smart contract platform built for Gno, a deterministic implementation of Go, designed for secure, auditable, and reusable decentralized applications (dApps). Unlike historical blockchain development languages, Gno allows Go developers to easily transfer their skills without needing to learn a completely new language. With type safety and composability, gno.land makes building scalable dApps secure, intuitive and reusable.\n\nAt its core, gno.land is the ‘GitHub’ of the Gno ecosystem, where transparent, open-source smart contracts are built on top of a native censorship-resistant decentralized operating system (dOS) starting with the Gno Virtual Machine (GnoVM).\n\n## Key Features of Gno\n\n- Open \u0026 Transparent: All applications are open-source and fully auditable.\n- Composable: Smart contracts are modular, reusable, and customizable to ease development and extend the ecosystem’s capabilities quickly.\n- Censorship-Resistant: Enables platforms with fair moderation and freedom of communication without a central authority.\n- Developer-Friendly: Intuitive design that reduces onboarding timelines and enables faster iteration.\n- Go-Based \u0026 Type Safe: Go developers can transition seamlessly to Gno thanks to the well-established Go language, while benefiting from type safety for security.\n\n---\n\nUse Cases\n\n## Why Gno and gno.land?\n\ngno.land’s smart contract platform is a first step in an experiment to build a complete dOS to bypass the centralized and controlled restrictions of the current Web, and power new social platforms, governance frameworks, and economic models that favor contribution-based incentives.\n\n\u003cgno-columns\u003e\n\n####\n\n\n### A Platform Designed for Next Generation Apps\n\nA reusable technical architecture for everyone to build the next generation applications of the future that attract the next wave of builders and users.\n\n####\n\n\n### New Economic Model\n\nA builder-aligned economy that incentivizes developers, content creators, and maintainers with sustainable rewards.\n\n####\n\n\n### Decentralized Governance: GovDAO\n\nA governance model that prioritizes contribution-based participation over capital-weighted control.\n\n####\n\n### Social coordination \u0026 community\n\nA decentralized space for uncensored discourse, fair moderation, and community-driven governance with forkability to allow for conflict resolution.\n\n\u003c/gno-columns\u003e\n\n---\nBeta Mainnet\n\n## Beta Mainnet Coming Soon!\n\nStay tuned for the first phase of gno.land's launch, the beta mainnet release.  \n- [Road to Mainnet and Beyond](https://gno.land/r/gnoland/blog:p/road-to-mainnet)\n\n---\n\nEcosystem\n\n## Discover the gno.land universe\n\nExplore gno.land's expanding ecosystem of applications, wallets, and explorers.\n\n[/the ecosystem ](https://gno.land/ecosystem)\n\n\u003cgno-columns\u003e\n\n####\n\n\n### Wallets and Faucet\n\nExecute transactions on gno.land using wallets, or a CLI keychain and client tool.\n\n- [Adena Wallet](https://www.adena.app/)\n- [gnokey](https://docs.gno.land/gno-tooling/cli/gnokey/)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n\n####\n\n### Explorers\n\nMonitor and track the status of on-chain transactions in real time. \n\n- [gnoscan](https://gnoscan.io/)\n\n####\n\n\n### Defi and Games\n\nTry out the DeFi platforms and gaming applications on gno.land. \n\n- [gnoswap - a gno.land DEX](http://beta.gnoswap.io/)\n\n####\n\n\n### Social and Community dApps\n\nRegister your gno.land username and be a part of the conversation happening on gno.land social network, r/Boards.  \n\n- [gno.land's user name registry](https://gno.land/r/gnoland/users/v1)\n- [Boards - gno.land's social network](coming soon!)\n- [Hall of Fame](https://gno.land/r/leon/hof) \n- [Gno.me - gno.land's educational and community development platform](Coming soon!)\n\n\u003c/gno-columns\u003e\n\n## A community of gnomes\n\ngno.land is a contribution-driven network and community where dedicated contributors, also known as gnomes, serve as the builders, guardians, and pioneers of gno.land’s future.\n\n\u003cgno-columns\u003e\n##\n\n\n### Our Blog \n\n:latest-blogposts:\n\n##\n\n\n### Past Events\n\n:upcoming-events:\n\n\u003c/gno-columns\u003e\n\n---\n\nBuilders\n\n## Build on gno.land\n\ngno.land builders are at the center of creating the applications and infrastructure for the decentralized operating system needed to power an Internet that is 100% decentralized.\n\n[/read the documentation](docs.gno.land) [Read about the Gno language](https://gno.land/gnolang)\n\n\u003cgno-columns\u003e\n\n### Builders\n\n- [Discover Gno Examples](https://gno.land/r/docs)\n- [Gno Playground: Code to Gno](https://play.gno.land/)\n- [Gno Studio Connect: A Realm interaction app](https://gno.studio/connect)\n- [Gnodev: Efficient local development for Gno](https://docs.gno.land/gno-tooling/cli/gno-tooling-gnodev)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n- [Discover Demo Packages](https://github.com/gnolang/gno/tree/master/examples)\n\n### Bounties\n\nThe Gno bounty program is a good way to find interesting challenges in Gno, and get rewarded for helping us advance the project. \n\n[/read more](https://github.com/gnolang/bounties)\n\n### gno.land grants\n\n      If you’re looking to create awesome dApps, tooling, infrastructure, or smart contract libraries on gno.land, you can apply for a grant. gno.land grants program provides financial support to developers interested in exploring new blockchain technology, and/or are already actively contributing to gno.land.\n\n[/read more](https://github.com/gnolang/grants)\n\n\u003c/gno-columns\u003e\n\n---\n\n\u003cgno-columns\u003e\n\n### General\n\n- [About](#)\n- [Events](#)\n- [Blog](#)\n- [Career](#)\n\n### Advanced\n\n- [Builder Guides](#)\n- [Tokenomics](#)\n- [Demo list](#)\n- [Docs](#)\n\n### Explore\n\n- [Faucet](#)\n- [Ecosystem](#)\n- [Partners](#)\n- [Gnops](#)\n\n### Social\n\n- [GitHub](#)\n- [Discord](#)\n- [YouTube](#)\n- [Twitter](#)\n\n\u003c/gno-columns\u003e\n`\n\n\tif override != \"\" {\n\t\ttemplate = override\n\t}\n\tresult := r.Replace(template)\n\treturn result\n}\n\nfunc AdminSetOverride(content string) {\n\tAdmin.AssertCallerIsOwner()\n\toverride = content\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"31497388","gas_fee":"65620ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"w8MIoLwhQwNQ/GY5JamRaLNl0tLu1bT2GtUk9LL+A0hghg2N5BDjTmVMkwRDJspLwR7eRsjyxxG5/A4sWbV/DQ=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742821036"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"home4v5","path":"gno.land/r/meeshell222/home4v5","files":[{"name":"package.gno","body":"package home4v5\n\nimport (\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/moul/dynreplacer\"\n\tblog \"gno.land/r/gnoland/blog\"\n\tevents \"gno.land/r/gnoland/events\"\n)\n\nvar (\n\toverride string\n\tAdmin    = ownable.NewWithAddress(\"g1manfred47kzduec920z88wfr64ylksmdcedlf5\") // @moul\n)\n\nfunc Render(_ string) string {\n\tr := dynreplacer.New()\n\tr.RegisterCallback(\":latest-blogposts:\", func() string {\n\t\treturn blog.RenderLastPostsWidget(4)\n\t})\n\tr.RegisterCallback(\":upcoming-events:\", func() string {\n\t\tout, _ := events.RenderEventWidget(events.MaxWidgetSize)\n\t\treturn out\n\t})\n\n\ttemplate := `# Welcome to gno.land\n\n## We’re building a decentralized operating system where governance is fair, development is open, and innovation is rewarded.\n\n[/about](/about) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/github](/github) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/try gno](/try-gno) \n\n\ngno.land is a smart contract platform built for Gno, a deterministic implementation of Go, designed for secure, auditable, and reusable decentralized applications (dApps). Unlike historical blockchain development languages, Gno allows Go developers to easily transfer their skills without needing to learn a completely new language. With type safety and composability, gno.land makes building scalable dApps secure, intuitive and reusable.\n\nAt its core, gno.land is the ‘GitHub’ of the Gno ecosystem, where transparent, open-source smart contracts are built on top of a native censorship-resistant decentralized operating system (dOS) starting with the Gno Virtual Machine (GnoVM).\n\n## Key Features of Gno\n\n- Open \u0026 Transparent: All applications are open-source and fully auditable.\n- Composable: Smart contracts are modular, reusable, and customizable to ease development and extend the ecosystem’s capabilities quickly.\n- Censorship-Resistant: Enables platforms with fair moderation and freedom of communication without a central authority.\n- Developer-Friendly: Intuitive design that reduces onboarding timelines and enables faster iteration.\n- Go-Based \u0026 Type Safe: Go developers can transition seamlessly to Gno thanks to the well-established Go language, while benefiting from type safety for security.\n\n---\n\nUse Cases\n\n## Why Gno and gno.land?\n\ngno.land’s smart contract platform is a first step in an experiment to build a complete dOS to bypass the centralized and controlled restrictions of the current Web, and power new social platforms, governance frameworks, and economic models that favor contribution-based incentives.\n\n\u003cgno-columns\u003e\n\n####\n\n\n### A Platform Designed for Next Generation Apps\n\nA reusable technical architecture for everyone to build the next generation applications of the future that attract the next wave of builders and users.\n\n####\n\n\n### New Economic Model\n\nA builder-aligned economy that incentivizes developers, content creators, and maintainers with sustainable rewards.\n\n####\n\n\n### Decentralized Governance: GovDAO\n\nA governance model that prioritizes contribution-based participation over capital-weighted control.\n\n####\n\n### Social coordination \u0026 community\n\nA decentralized space for uncensored discourse, fair moderation, and community-driven governance with forkability to allow for conflict resolution.\n\n\u003c/gno-columns\u003e\n\n---\nBeta Mainnet\n\n## Beta Mainnet Coming Soon!\n\nStay tuned for the first phase of gno.land's launch, the beta mainnet release.  \n- [Road to Mainnet and Beyond](https://gno.land/r/gnoland/blog:p/road-to-mainnet)\n\n---\n\nEcosystem\n\n## Discover the gno.land universe\n\nExplore gno.land's expanding ecosystem of applications, wallets, and explorers.\n\n[/the ecosystem ](https://gno.land/ecosystem)\n\n\u003cgno-columns\u003e\n\n####\n\n\n### Wallets and Faucet\n\nExecute transactions on gno.land using wallets, or a CLI keychain and client tool.\n\n- [Adena Wallet](https://www.adena.app/)\n- [gnokey](https://docs.gno.land/gno-tooling/cli/gnokey/)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n\n####\n\n### Explorers\n\nMonitor and track the status of on-chain transactions in real time. \n\n- [gnoscan](https://gnoscan.io/)\n\n####\n\n\n### Defi and Games\n\nTry out the DeFi platforms and gaming applications on gno.land. \n\n- [gnoswap - a gno.land DEX](http://beta.gnoswap.io/)\n\n####\n\n\n### Social and Community dApps\n\nRegister your gno.land username and be a part of the conversation happening on gno.land social network, r/Boards.  \n\n- [gno.land's user name registry](https://gno.land/r/gnoland/users/v1)\n- [Boards - gno.land's social network](coming soon!)\n- [Hall of Fame](https://gno.land/r/leon/hof) \n- [Gno.me - gno.land's educational and community development platform](Coming soon!)\n\n\u003c/gno-columns\u003e\n\n## A community of gnomes\n\ngno.land is a contribution-driven network and community where dedicated contributors, also known as gnomes, serve as the builders, guardians, and pioneers of gno.land’s future.\n\n\u003cgno-columns\u003e\n##\n\n\n### Our Blog \n\n:latest-blogposts:\n\n##\n\n\n### Past Events\n\n:upcoming-events:\n\n\u003c/gno-columns\u003e\n\n---\n\nBuilders\n\n## Build on gno.land\n\ngno.land builders are at the center of creating the applications and infrastructure for the decentralized operating system needed to power an Internet that is 100% decentralized.\n\n[/read the documentation](docs.gno.land) [Read about the Gno language](https://gno.land/gnolang)\n\n\u003cgno-columns\u003e\n\n### Builders\n\n- [Discover Gno Examples](https://gno.land/r/docs)\n- [Gno Playground: Code to Gno](https://play.gno.land/)\n- [Gno Studio Connect: A Realm interaction app](https://gno.studio/connect)\n- [Gnodev: Efficient local development for Gno](https://docs.gno.land/gno-tooling/cli/gno-tooling-gnodev)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n- [Discover Demo Packages](https://github.com/gnolang/gno/tree/master/examples)\n\n### Bounties\n\nThe Gno bounty program is a good way to find interesting challenges in Gno, and get rewarded for helping us advance the project. \n\n[/read more](https://github.com/gnolang/bounties)\n\n### gno.land grants\n\n      If you’re looking to create awesome dApps, tooling, infrastructure, or smart contract libraries on gno.land, you can apply for a grant. gno.land grants program provides financial support to developers interested in exploring new blockchain technology, and/or are already actively contributing to gno.land.\n\n[/read more](https://github.com/gnolang/grants)\n\n\u003c/gno-columns\u003e\n\n---\n\n\u003cgno-columns\u003e\n\n### General\n\n- [About](#)\n- [Events](#)\n- [Blog](#)\n- [Career](#)\n\n### Advanced\n\n- [Builder Guides](#)\n- [Tokenomics](#)\n- [Demo list](#)\n- [Docs](#)\n\n### Explore\n\n- [Faucet](#)\n- [Ecosystem](#)\n- [Partners](#)\n- [Gnops](#)\n\n### Social\n\n- [GitHub](#)\n- [Discord](#)\n- [YouTube](#)\n- [Twitter](#)\n\n\u003c/gno-columns\u003e\n`\n\n\tif override != \"\" {\n\t\ttemplate = override\n\t}\n\tresult := r.Replace(template)\n\treturn result\n}\n\nfunc AdminSetOverride(content string) {\n\tAdmin.AssertCallerIsOwner()\n\toverride = content\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"31496762","gas_fee":"65619ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"rPULXCdOdZm4ovMGVFLzInMTT5PF1qZ1DLJqk9yrjrjOLMghxjeULGYlQE8Ml49PVfcIcRwc86mQWFNfRI3bAQ=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742821076"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"home4v6","path":"gno.land/r/meeshell222/home4v6","files":[{"name":"package.gno","body":"package home4v6\n\nimport (\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/moul/dynreplacer\"\n\tblog \"gno.land/r/gnoland/blog\"\n\tevents \"gno.land/r/gnoland/events\"\n)\n\nvar (\n\toverride string\n\tAdmin    = ownable.NewWithAddress(\"g1manfred47kzduec920z88wfr64ylksmdcedlf5\") // @moul\n)\n\nfunc Render(_ string) string {\n\tr := dynreplacer.New()\n\tr.RegisterCallback(\":latest-blogposts:\", func() string {\n\t\treturn blog.RenderLastPostsWidget(4)\n\t})\n\tr.RegisterCallback(\":upcoming-events:\", func() string {\n\t\tout, _ := events.RenderEventWidget(events.MaxWidgetSize)\n\t\treturn out\n\t})\n\n\ttemplate := `# Welcome to gno.land\n\n## We’re building a decentralized operating system where governance is fair, development is open, and innovation is rewarded.\n\n[/about](/about) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/github](/github) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/try gno](/try-gno) \n\n\ngno.land is a smart contract platform built for Gno, a deterministic implementation of Go, designed for secure, auditable, and reusable decentralized applications (dApps). Unlike historical blockchain development languages, Gno allows Go developers to easily transfer their skills without needing to learn a completely new language. With type safety and composability, gno.land makes building scalable dApps secure, intuitive and reusable.\n\nAt its core, gno.land is the ‘GitHub’ of the Gno ecosystem, where transparent, open-source smart contracts are built on top of a native censorship-resistant decentralized operating system (dOS) starting with the Gno Virtual Machine (GnoVM).\n\n## Key Features of Gno\n\n- Open \u0026 Transparent: All applications are open-source and fully auditable.\n- Composable: Smart contracts are modular, reusable, and customizable to ease development and extend the ecosystem’s capabilities quickly.\n- Censorship-Resistant: Enables platforms with fair moderation and freedom of communication without a central authority.\n- Developer-Friendly: Intuitive design that reduces onboarding timelines and enables faster iteration.\n- Go-Based \u0026 Type Safe: Go developers can transition seamlessly to Gno thanks to the well-established Go language, while benefiting from type safety for security.\n\n---\n\nUse Cases\n\n## Why Gno and gno.land?\n\ngno.land’s smart contract platform is a first step in an experiment to build a complete dOS to bypass the centralized and controlled restrictions of the current Web, and power new social platforms, governance frameworks, and economic models that favor contribution-based incentives.\n\n\u003cgno-columns\u003e\n\n####\n\n\n### A Platform Designed for Next Generation Apps\n\nA reusable technical architecture for everyone to build the next generation applications of the future that attract the next wave of builders and users.\n\n####\n\n\n### New Economic Model\n\nA builder-aligned economy that incentivizes developers, content creators, and maintainers with sustainable rewards.\n\n####\n\n\n### Decentralized Governance: GovDAO\n\nA governance model that prioritizes contribution-based participation over capital-weighted control.\n\n####\n\n### Social coordination \u0026 community\n\nA decentralized space for uncensored discourse, fair moderation, and community-driven governance with forkability to allow for conflict resolution.\n\n\u003c/gno-columns\u003e\n\n---\nBeta Mainnet\n\n## Beta Mainnet Coming Soon!\n\nStay tuned for the first phase of gno.land's launch, the beta mainnet release.  \n- [Road to Mainnet and Beyond](https://gno.land/r/gnoland/blog:p/road-to-mainnet)\n\n---\n\nEcosystem\n\n## Discover the gno.land universe\n\nExplore gno.land's expanding ecosystem of applications, wallets, and explorers.\n\n[/the ecosystem ](https://gno.land/ecosystem)\n\n\u003cgno-columns\u003e\n\n####\n\n\n### Wallets and Faucet\n\nExecute transactions on gno.land using wallets, or a CLI keychain and client tool.\n\n- [Adena Wallet](https://www.adena.app/)\n- [gnokey](https://docs.gno.land/gno-tooling/cli/gnokey/)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n\n####\n\n### Explorers\n\nMonitor and track the status of on-chain transactions in real time. \n\n- [gnoscan](https://gnoscan.io/)\n\n####\n\n\n### Defi and Games\n\nTry out the DeFi platforms and gaming applications on gno.land. \n\n- [gnoswap - a gno.land DEX](http://beta.gnoswap.io/)\n\n####\n\n\n### Social and Community dApps\n\nRegister your gno.land username and be a part of the conversation happening on gno.land social network, r/Boards.  \n\n- [gno.land's user name registry](https://gno.land/r/gnoland/users/v1)\n- [Boards - gno.land's social network](coming soon!)\n- [Hall of Fame](https://gno.land/r/leon/hof) \n- [Gno.me - gno.land's educational and community development platform](Coming soon!)\n\n\u003c/gno-columns\u003e\n\n## A community of gnomes\n\ngno.land is a contribution-driven network and community where dedicated contributors, also known as gnomes, serve as the builders, guardians, and pioneers of gno.land’s future.\n\n\u003cgno-columns\u003e\n##\n\n\n### Our Blog \n\n:latest-blogposts:\n\n##\n\n\n### Past Events\n\n:upcoming-events:\n\n\u003c/gno-columns\u003e\n\n---\n\nBuilders\n\n## Build on gno.land\n\ngno.land builders are at the center of creating the applications and infrastructure for the decentralized operating system needed to power an Internet that is 100% decentralized.\n\n[/read the documentation](docs.gno.land) [Read about the Gno language](https://gno.land/gnolang)\n\n\u003cgno-columns\u003e\n\n### Builders\n\n- [Discover Gno Examples](https://gno.land/r/docs)\n- [Gno Playground: Code to Gno](https://play.gno.land/)\n- [Gno Studio Connect: A Realm interaction app](https://gno.studio/connect)\n- [Gnodev: Efficient local development for Gno](https://docs.gno.land/gno-tooling/cli/gno-tooling-gnodev)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n- [Discover Demo Packages](https://github.com/gnolang/gno/tree/master/examples)\n\n### Bounties\n\nThe Gno bounty program is a good way to find interesting challenges in Gno, and get rewarded for helping us advance the project. \n\n[/read more](https://github.com/gnolang/bounties)\n\n### gno.land grants\n\nIf you’re looking to create awesome dApps, tooling, infrastructure, or smart contract libraries on gno.land, you can apply for a grant. gno.land grants program provides financial support to developers interested in exploring new blockchain technology, and/or are already actively contributing to gno.land.\n\n[/read more](https://github.com/gnolang/grants)\n\n\u003c/gno-columns\u003e\n\n---\n\n\u003cgno-columns\u003e\n\n### General\n\n- [About](#)\n- [Events](#)\n- [Blog](#)\n- [Career](#)\n\n### Advanced\n\n- [Builder Guides](#)\n- [Tokenomics](#)\n- [Demo list](#)\n- [Docs](#)\n\n### Explore\n\n- [Faucet](#)\n- [Ecosystem](#)\n- [Partners](#)\n- [Gnops](#)\n\n### Social\n\n- [GitHub](#)\n- [Discord](#)\n- [YouTube](#)\n- [Twitter](#)\n\n\u003c/gno-columns\u003e\n`\n\n\tif override != \"\" {\n\t\ttemplate = override\n\t}\n\tresult := r.Replace(template)\n\treturn result\n}\n\nfunc AdminSetOverride(content string) {\n\tAdmin.AssertCallerIsOwner()\n\toverride = content\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"31496632","gas_fee":"65618ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"i2/SZbCbtR8jhdcbS0mFirqsZsz3tft6+BRMqvRy4OMvv7OD+mtdpcwDut7RkYC16RJ6IIrGRHpa4/Jdna0nAw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742821161"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1manfred47kzduec920z88wfr64ylksmdcedlf5","send":"","pkg_path":"gno.land/r/sys/names","func":"Enable","args":null}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"J5x+sMCObbDljRiT+pcaHutjY2JDI18l+SHfTEJLdtloZKH7oaJrhRL4sFpHK3l2w2e8UwDqoXUNT92DpRF9CA=="}],"memo":""},"metadata":{"timestamp":"1742839012"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","package":{"name":"users","path":"gno.land/r/leon000/issues/lols/query_auth_accs","files":[{"name":"admin.gno","body":"package users\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/dao\"\n\n\t\"gno.land/r/gov/dao/bridge\"\n\tsusers \"gno.land/r/sys/users\"\n)\n\nvar paused = false // XXX: replace with p/moul/authz\n\n// ProposeNewPausedValue allows GovDAO to pause or unpause this realm\nfunc ProposeNewPausedValue(newPausedValue bool) dao.Executor {\n\tcb := func() error {\n\t\tpaused = newPausedValue\n\t\treturn nil\n\t}\n\n\treturn bridge.GovDAO().NewGovDAOExecutor(cb)\n}\n\n// ProposeNewName allows GovDAO to propose a new name for an existing user\n// The associated address and all previous names of a user that changes a name\n// are preserved, and all resolve to the new name.\nfunc ProposeNewName(addr std.Address, newName string) dao.Executor {\n\tif matched := reUsername.MatchString(newName); !matched {\n\t\tpanic(ErrInvalidUsername)\n\t}\n\n\tuserData := susers.ResolveAddress(addr)\n\tif userData == nil {\n\t\tpanic(susers.ErrUserNotExistOrDeleted)\n\t}\n\n\tcb := func() error {\n\t\tif err := userData.UpdateName(newName); err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t}\n\n\treturn bridge.GovDAO().NewGovDAOExecutor(cb)\n}\n\n// ProposeDeleteUser allows GovDAO to propose deletion of a user\n// This will make the associated address and names unresolvable.\n// WARN: After deletion, the same address WILL NOT be able to register a new name.\nfunc ProposeDeleteUser(addr std.Address) dao.Executor {\n\tuserData := susers.ResolveAddress(addr)\n\tif userData == nil {\n\t\tpanic(susers.ErrUserNotExistOrDeleted)\n\t}\n\n\tcb := func() error {\n\t\tif err := userData.Delete(); err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t}\n\n\treturn bridge.GovDAO().NewGovDAOExecutor(cb)\n}\n\n// ProposeNewRegisterPrice allows GovDAO to update the price of registration\nfunc ProposeNewRegisterPrice(newPrice int64) dao.Executor {\n\tif newPrice \u003c 0 {\n\t\tpanic(\"invalid price\")\n\t}\n\n\tcb := func() error {\n\t\tregisterPrice = newPrice\n\t\treturn nil\n\t}\n\n\treturn bridge.GovDAO().NewGovDAOExecutor(cb)\n}\n"},{"name":"errors.gno","body":"package users\n\nimport (\n\t\"errors\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tErrNonUserCall     = errors.New(\"r/gnoland/users: non-user call\")\n\tErrPaused          = errors.New(\"r/gnoland/users: paused\")\n\tErrInvalidPayment  = ufmt.Errorf(\"r/gnoland/users: you need to send exactly %d ugnot\", registerPrice)\n\tErrInvalidUsername = errors.New(\"r/gnoland/users: invalid username\")\n)\n"},{"name":"preregister.gno","body":"package users\n\nimport (\n\t\"std\"\n\n\tsusers \"gno.land/r/sys/users\"\n)\n\n// pre-registered users\nvar preRegisteredUsers = []struct {\n\tName    string\n\tAddress std.Address\n}{\n\t// system name\n\t{\"archives\", \"g1xlnyjrnf03ju82v0f98ruhpgnquk28knmjfe5k\"}, // -\u003e @r_archives\n\t{\"demo\", \"g13ek2zz9qurzynzvssyc4sthwppnruhnp0gdz8n\"},     // -\u003e @r_demo\n\t{\"gno\", \"g19602kd9tfxrfd60sgreadt9zvdyyuudcyxsz8a\"},      // -\u003e @r_gno\n\t{\"gnoland\", \"g1g3lsfxhvaqgdv4ccemwpnms4fv6t3aq3p5z6u7\"},  // -\u003e @r_gnoland\n\t{\"gnolang\", \"g1yjlnm3z2630gg5mryjd79907e0zx658wxs9hnd\"},  // -\u003e @r_gnolang\n\t{\"gov\", \"g1g73v2anukg4ej7axwqpthsatzrxjsh0wk797da\"},      // -\u003e @r_gov\n\t{\"nt\", \"g15ge0ae9077eh40erwrn2eq0xw6wupwqthpv34l\"},       // -\u003e @r_nt\n\t{\"sys\", \"g1r929wt2qplfawe4lvqv9zuwfdcz4vxdun7qh8l\"},      // -\u003e @r_sys\n\t{\"x\", \"g164sdpew3c2t3rvxj3kmfv7c7ujlvcw2punzzuz\"},        // -\u003e @r_x\n\n\t// test1 user\n\t{\"test1\", \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"}, // -\u003e @test1\n}\n\nfunc init() {\n\t// add pre-registered users\n\tfor _, res := range preRegisteredUsers {\n\t\t// Try registering, skip if it fails\n\t\t_ = susers.RegisterUser(res.Name, res.Address)\n\t}\n}\n"},{"name":"render.gno","body":"package users\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/p/moul/md\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n\n\t\"gno.land/r/demo/profile\"\n\tsusers \"gno.land/r/sys/users\"\n)\n\nfunc Render(path string) string {\n\treq := realmpath.Parse(path)\n\n\tif req.Path == \"\" {\n\t\treturn renderHomePage()\n\t}\n\n\t// Otherwise, render the user page\n\treturn renderUserPage(req.Path)\n}\n\nfunc renderHomePage() string {\n\tvar out string\n\n\tout += \"# gno.land user registry\\n\"\n\n\tif paused {\n\t\tout += md.HorizontalRule()\n\t\tout += md.H2(\"This realm is paused.\")\n\t\tout += md.Paragraph(\"Check out [`gno.land/r/gnoland/users`](/r/gnoland/users) for newer versions of the registry.\")\n\t\tout += md.HorizontalRule()\n\t}\n\n\tout += renderIntroParagraph()\n\n\tout += md.H2(\"Latest registrations\")\n\tentries := latestUsers.Entries()\n\tif len(entries) == 0 {\n\t\tout += \"No registered users.\"\n\t}\n\n\tfor i := len(entries) - 1; i \u003e= 0; i-- {\n\t\tuser := entries[i].(string)\n\t\tout += ufmt.Sprintf(\"- User [%s](/r/gnoland/users/v1:%s)\\n\", md.Bold(user), user)\n\t}\n\n\treturn out\n}\n\nfunc renderIntroParagraph() string {\n\tout := md.Paragraph(\"Welcome to the gno.land user registry (v1). Please register a username.\")\n\tout += md.Paragraph(`Registering a username grants the registering address the right to deploy packages and realms\nunder that username’s namespace. For example, if an address registers the username ` + md.InlineCode(\"gnome123\") + `, it \nwill gain permission to deploy packages and realms to package paths with the pattern ` + md.InlineCode(\"gno.land/{p,r}/gnome123/*\") + `.`)\n\n\tout += md.Paragraph(\"In V1, usernames must follow these rules, in order to prevent username squatting:\")\n\titems := []string{\n\t\t\"Must start with 3 characters\",\n\t\t\"Must end with 3 numbers\",\n\t\t\"Have a maximum length of 20 characters\",\n\t\t\"With the only special character allowed being `_`\",\n\t}\n\tout += md.BulletList(items)\n\n\tout += \"\\n\\n\"\n\tout += md.Paragraph(\"In later versions of the registry, vanity usernames will be allowed through specific mechanisms.\")\n\n\tif !paused {\n\t\tout += md.H3(ufmt.Sprintf(\" [[Click here to register]](%s)\", txlink.Call(\"Register\")))\n\t\tout += ufmt.Sprintf(\"Registration price: %f GNOT (%dugnot)\\n\\n\", float64(registerPrice)/1_000_000, registerPrice)\n\t}\n\n\tout += md.HorizontalRule()\n\tout += \"\\n\\n\"\n\n\treturn out\n}\n\n// resolveUser resolves the user based on the path, determining if it's a name or address\nfunc resolveUser(path string) (*susers.UserData, bool, bool) {\n\tif std.Address(path).IsValid() {\n\t\treturn susers.ResolveAddress(std.Address(path)), false, false\n\t}\n\n\tdata, isLatest := susers.ResolveName(path)\n\treturn data, isLatest, true\n}\n\n// renderUserPage generates the user page based on user data and path\nfunc renderUserPage(path string) string {\n\tvar out string\n\n\t// Render single user page\n\tdata, isLatest, isName := resolveUser(path)\n\tif data == nil {\n\t\tout += md.H1(\"User not found.\")\n\t\tout += \"This user does not exist or has been deleted.\\n\"\n\t\treturn out\n\t}\n\n\tout += md.H1(\"User - \" + md.InlineCode(data.Name()))\n\n\tif isName \u0026\u0026 !isLatest {\n\t\tout += md.Paragraph(ufmt.Sprintf(\n\t\t\t\"Note: You searched for `%s`, which is a previous name of [`%s`](/r/gnoland/users/v1:%s).\",\n\t\t\tpath, data.Name(), data.Name()))\n\t} else {\n\t\tout += ufmt.Sprintf(\"Address: %s\\n\\n\", data.Addr().String())\n\n\t\tout += md.H2(\"Bio\")\n\t\tout += profile.GetStringField(data.Addr(), \"Bio\", \"No bio defined.\")\n\t\tout += \"\\n\\n\"\n\t\tout += ufmt.Sprintf(\"[Update bio](%s)\", txlink.Realm(\"gno.land/r/demo/profile\").Call(\"SetStringField\", \"field\", \"Bio\"))\n\t\tout += \"\\n\\n\"\n\t}\n\n\treturn out\n}\n"},{"name":"users.gno","body":"package users\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\n\t\"gno.land/p/moul/fifo\"\n\tsusers \"gno.land/r/sys/users\"\n)\n\nconst (\n\treValidUsername = \"^[a-z]{3}[_a-z0-9]{0,14}[0-9]{3}$\"\n)\n\nvar (\n\tregisterPrice = int64(1_000_000) // 1 GNOT\n\tlatestUsers   = fifo.New(10)     // Save the latest 10 users for rendering purposes\n\treUsername    = regexp.MustCompile(reValidUsername)\n)\n\n// Register registers a new username for the caller.\n// A valid username must start with a minimum of 3 letters,\n// end with a minimum of 3 numbers, and be less than 20 chars long.\n// All letters must be lowercase, and the only valid special char is `_`.\n// Only calls from EOAs are supported.\nfunc Register(username string) {\n\tif !std.PreviousRealm().IsUser() {\n\t\tpanic(ErrNonUserCall)\n\t}\n\n\tif paused {\n\t\tpanic(ErrPaused)\n\t}\n\n\tif std.OriginSend().AmountOf(\"ugnot\") != registerPrice {\n\t\tpanic(ErrInvalidPayment)\n\t}\n\n\tif matched := reUsername.MatchString(username); !matched {\n\t\tpanic(ErrInvalidUsername)\n\t}\n\n\tregistrant := std.PreviousRealm().Address()\n\tif err := susers.RegisterUser(username, registrant); err != nil {\n\t\tpanic(err)\n\t}\n\n\tlatestUsers.Append(username)\n\tstd.Emit(\"Registeration\", \"address\", registrant.String(), \"name\", username)\n}\n"},{"name":"users_test.gno","body":"package users\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/urequire\"\n\n\tsusers \"gno.land/r/sys/users\"\n)\n\nvar (\n\talice     = \"alice123\"\n\tbob       = \"bob123\"\n\taliceAddr = testutils.TestAddress(alice)\n\tbobAddr   = testutils.TestAddress(bob)\n)\n\nfunc TestRegister_Valid(t *testing.T) {\n\ttesting.SetOriginSend(std.NewCoins(std.NewCoin(\"ugnot\", 1_000_000)))\n\ttesting.SetRealm(std.NewUserRealm(aliceAddr))\n\ttesting.SetOriginCaller(aliceAddr)\n\n\tuassert.NotPanics(t, func() {\n\t\tRegister(alice)\n\t})\n\n\tres, latest := susers.ResolveName(alice)\n\n\tuassert.NotEqual(t, nil, res)\n\tuassert.Equal(t, alice, res.Name())\n\tuassert.Equal(t, aliceAddr, res.Addr())\n\tuassert.False(t, res.IsDeleted())\n\tuassert.True(t, latest)\n}\n\nfunc TestRegister_Invalid(t *testing.T) {\n\ttesting.SetOriginSend(std.NewCoins(std.NewCoin(\"ugnot\", 1_000_000)))\n\ttesting.SetRealm(std.NewUserRealm(bobAddr))\n\ttesting.SetOriginCaller(bobAddr)\n\n\t// Invalid usernames\n\tuassert.PanicsWithMessage(t, ErrInvalidUsername.Error(), func() {\n\t\tRegister(\"alice\") // vanity\n\t})\n\n\tuassert.PanicsWithMessage(t, ErrInvalidUsername.Error(), func() {\n\t\tRegister(\"\") // empty\n\t})\n\n\tuassert.PanicsWithMessage(t, ErrInvalidUsername.Error(), func() {\n\t\tRegister(\"    \") // empty\n\t})\n\n\tuassert.PanicsWithMessage(t, ErrInvalidUsername.Error(), func() {\n\t\tRegister(\"123\") // empty\n\t})\n\n\tuassert.PanicsWithMessage(t, ErrInvalidUsername.Error(), func() {\n\t\tRegister(\"123\") // only numbers\n\t})\n\n\tuassert.PanicsWithMessage(t, ErrInvalidUsername.Error(), func() {\n\t\tRegister(\"alice\u0026#($)\") // non-allowed chars\n\t})\n\n\tuassert.PanicsWithMessage(t, ErrInvalidUsername.Error(), func() {\n\t\tRegister(\"Alice123\") // upper-case\n\t})\n\n\tuassert.PanicsWithMessage(t, ErrInvalidUsername.Error(), func() {\n\t\tRegister(\"toolongusernametoolongusernametoolongusername123\") // too long\n\t})\n\n\t// Name taken\n\turequire.NotPanics(t, func() {\n\t\tRegister(bob)\n\t})\n\n\tuassert.PanicsWithMessage(t, susers.ErrNameTaken.Error(), func() {\n\t\tRegister(bob) // already registered\n\t})\n}\n\nfunc TestRegister_InvalidPayment(t *testing.T) {\n\ttesting.SetRealm(std.NewUserRealm(bobAddr))\n\ttesting.SetOriginCaller(bobAddr)\n\n\ttesting.SetOriginSend(std.NewCoins(std.NewCoin(\"ugnot\", 12))) // invalid payment amount\n\n\tuassert.PanicsWithMessage(t, ErrInvalidPayment.Error(), func() {\n\t\tRegister(alice)\n\t})\n}\n"},{"name":"z_0_prop1_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/dao\"\n\t\"gno.land/p/demo/testutils\"\n\n\tusers \"gno.land/r/gnoland/users/v1\"\n\t_ \"gno.land/r/gov/dao/init\" // so that the govdao.GovDAO initializer is executed\n\tgovdao \"gno.land/r/gov/dao/v2\"\n\tsusers \"gno.land/r/sys/users\"\n)\n\n// Test updating a name via GovDAO\n\nfunc init() {\n\tc := std.OriginCaller()\n\talice := testutils.TestAddress(\"alice\")\n\n\t// Register alice\n\ttesting.SetOriginCaller(alice)\n\ttesting.SetRealm(std.NewUserRealm(alice))\n\tusers.Register(\"alice123\")\n\n\t// Prop to change name\n\ttesting.SetOriginCaller(c)\n\ttesting.SetRealm(std.NewUserRealm(c))\n\tex := users.ProposeNewName(alice, \"alice_new123\")\n\n\t// Create a proposal\n\tprop := dao.ProposalRequest{\n\t\tTitle:       \"Change alice's name!\",\n\t\tDescription: \"\",\n\t\tExecutor:    ex,\n\t}\n\n\tgovdao.GovDAO.Propose(prop)\n}\n\nfunc main() {\n\tprintln(\"--\")\n\tprintln(govdao.Render(\"\"))\n\tprintln(\"--\")\n\tprintln(govdao.Render(\"0\"))\n\tprintln(\"--\")\n\tgovdao.GovDAO.VoteOnProposal(0, \"YES\")\n\tprintln(\"--\")\n\tprintln(govdao.Render(\"0\"))\n\tprintln(\"--\")\n\tgovdao.GovDAO.ExecuteProposal(0)\n\tprintln(\"--\")\n\tprintln(govdao.Render(\"0\"))\n\n\tdata, _ := susers.ResolveName(\"alice_new123\")\n\tprintln(data.Addr())\n}\n\n// Output:\n// --\n// # GovDAO Proposals\n//\n// ## [Prop #0 - Change alice's name!](/r/gov/dao/v2:0)\n//\n// **Status: ACTIVE**\n//\n// **Author: g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm**\n//\n//\n// --\n// # Proposal #0 - Change alice's name!\n//\n// ## Description\n//\n// No description provided.\n//\n// ## Proposal information\n//\n// **Status: ACTIVE**\n//\n// **Voting stats:**\n// - YES 0 (0%)\n// - NO 0 (0%)\n// - ABSTAIN 0 (0%)\n// - MISSING VOTES 10 (100%)\n//\n//\n// **Threshold met: FALSE**\n//\n// **Author: g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm**\n//\n// ### Actions\n//\n// #### [[Vote YES](/r/gov/dao/v2$help\u0026func=VoteOnProposal\u0026id=0\u0026option=YES)] - [[Vote NO](/r/gov/dao/v2$help\u0026func=VoteOnProposal\u0026id=0\u0026option=NO)] - [[Vote ABSTAIN](/r/gov/dao/v2$help\u0026func=VoteOnProposal\u0026id=0\u0026option=ABSTAIN)]\n//\n//\n// --\n// --\n// # Proposal #0 - Change alice's name!\n//\n// ## Description\n//\n// No description provided.\n//\n// ## Proposal information\n//\n// **Status: ACCEPTED**\n//\n// **Voting stats:**\n// - YES 10 (100%)\n// - NO 0 (0%)\n// - ABSTAIN 0 (0%)\n// - MISSING VOTES 0 (0%)\n//\n//\n// **Threshold met: TRUE**\n//\n// **Author: g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm**\n//\n// ### Actions\n//\n// The voting period for this proposal is over.\n//\n//\n// --\n// --\n// # Proposal #0 - Change alice's name!\n//\n// ## Description\n//\n// No description provided.\n//\n// ## Proposal information\n//\n// **Status: EXECUTION SUCCESSFUL**\n//\n// **Voting stats:**\n// - YES 10 (100%)\n// - NO 0 (0%)\n// - ABSTAIN 0 (0%)\n// - MISSING VOTES 0 (0%)\n//\n//\n// **Threshold met: TRUE**\n//\n// **Author: g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm**\n//\n// ### Actions\n//\n// The voting period for this proposal is over.\n//\n//\n// g1v9kxjcm9ta047h6lta047h6lta047h6lzd40gh\n\n// Events:\n// [\n//   {\n//     \"type\": \"Registered\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"name\",\n//         \"value\": \"alice123\"\n//       },\n//       {\n//         \"key\": \"address\",\n//         \"value\": \"g1v9kxjcm9ta047h6lta047h6lta047h6lzd40gh\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/sys/users\",\n//     \"func\": \"RegisterUser\"\n//   },\n//   {\n//     \"type\": \"Registeration\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"address\",\n//         \"value\": \"g1v9kxjcm9ta047h6lta047h6lta047h6lzd40gh\"\n//       },\n//       {\n//         \"key\": \"name\",\n//         \"value\": \"alice123\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/gnoland/users/v1\",\n//     \"func\": \"Register\"\n//   },\n//   {\n//     \"type\": \"ProposalAdded\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"proposal-id\",\n//         \"value\": \"0\"\n//       },\n//       {\n//         \"key\": \"proposal-author\",\n//         \"value\": \"g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/gov/dao/v2\",\n//     \"func\": \"EmitProposalAdded\"\n//   },\n//   {\n//     \"type\": \"VoteAdded\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"proposal-id\",\n//         \"value\": \"0\"\n//       },\n//       {\n//         \"key\": \"author\",\n//         \"value\": \"g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm\"\n//       },\n//       {\n//         \"key\": \"option\",\n//         \"value\": \"YES\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/gov/dao/v2\",\n//     \"func\": \"EmitVoteAdded\"\n//   },\n//   {\n//     \"type\": \"ProposalAccepted\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"proposal-id\",\n//         \"value\": \"0\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/gov/dao/v2\",\n//     \"func\": \"EmitProposalAccepted\"\n//   },\n//   {\n//     \"type\": \"Updated\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"alias\",\n//         \"value\": \"alice_new123\"\n//       },\n//       {\n//         \"key\": \"address\",\n//         \"value\": \"g1v9kxjcm9ta047h6lta047h6lta047h6lzd40gh\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/sys/users\",\n//     \"func\": \"UpdateName\"\n//   },\n//   {\n//     \"type\": \"ProposalExecuted\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"proposal-id\",\n//         \"value\": \"0\"\n//       },\n//       {\n//         \"key\": \"exec-status\",\n//         \"value\": \"accepted\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/gov/dao/v2\",\n//     \"func\": \"ExecuteProposal\"\n//   }\n// ]\n"},{"name":"z_1_prop2_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/dao\"\n\t\"gno.land/p/demo/testutils\"\n\n\tusers \"gno.land/r/gnoland/users/v1\"\n\t_ \"gno.land/r/gov/dao/init\" // so that the govdao.GovDAO initializer is executed\n\tgovdao \"gno.land/r/gov/dao/v2\"\n\tsusers \"gno.land/r/sys/users\"\n)\n\n// Test updating a name via GovDAO\n\nfunc init() {\n\tc := std.OriginCaller()\n\talice := testutils.TestAddress(\"alice\")\n\n\t// Register alice\n\ttesting.SetOriginCaller(alice)\n\ttesting.SetRealm(std.NewUserRealm(alice))\n\tusers.Register(\"alice123\")\n\n\t// Prop to change name\n\ttesting.SetOriginCaller(c)\n\ttesting.SetRealm(std.NewUserRealm(c))\n\tex := users.ProposeDeleteUser(alice)\n\n\t// Create a proposal\n\tprop := dao.ProposalRequest{\n\t\tTitle:       \"Change alice's name!\",\n\t\tDescription: \"\",\n\t\tExecutor:    ex,\n\t}\n\n\tgovdao.GovDAO.Propose(prop)\n}\n\nfunc main() {\n\tprintln(\"--\")\n\tprintln(govdao.Render(\"\"))\n\tprintln(\"--\")\n\tprintln(govdao.Render(\"0\"))\n\tprintln(\"--\")\n\tgovdao.GovDAO.VoteOnProposal(0, \"YES\")\n\tprintln(\"--\")\n\tprintln(govdao.Render(\"0\"))\n\tprintln(\"--\")\n\tgovdao.GovDAO.ExecuteProposal(0)\n\tprintln(\"--\")\n\tprintln(govdao.Render(\"0\"))\n\n\tdata, _ := susers.ResolveName(\"alice123\")\n\tif data == nil {\n\t\tprintln(\"Successfully deleted alice\")\n\t}\n}\n\n// Output:\n// --\n// # GovDAO Proposals\n//\n// ## [Prop #0 - Change alice's name!](/r/gov/dao/v2:0)\n//\n// **Status: ACTIVE**\n//\n// **Author: g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm**\n//\n//\n// --\n// # Proposal #0 - Change alice's name!\n//\n// ## Description\n//\n// No description provided.\n//\n// ## Proposal information\n//\n// **Status: ACTIVE**\n//\n// **Voting stats:**\n// - YES 0 (0%)\n// - NO 0 (0%)\n// - ABSTAIN 0 (0%)\n// - MISSING VOTES 10 (100%)\n//\n//\n// **Threshold met: FALSE**\n//\n// **Author: g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm**\n//\n// ### Actions\n//\n// #### [[Vote YES](/r/gov/dao/v2$help\u0026func=VoteOnProposal\u0026id=0\u0026option=YES)] - [[Vote NO](/r/gov/dao/v2$help\u0026func=VoteOnProposal\u0026id=0\u0026option=NO)] - [[Vote ABSTAIN](/r/gov/dao/v2$help\u0026func=VoteOnProposal\u0026id=0\u0026option=ABSTAIN)]\n//\n//\n// --\n// --\n// # Proposal #0 - Change alice's name!\n//\n// ## Description\n//\n// No description provided.\n//\n// ## Proposal information\n//\n// **Status: ACCEPTED**\n//\n// **Voting stats:**\n// - YES 10 (100%)\n// - NO 0 (0%)\n// - ABSTAIN 0 (0%)\n// - MISSING VOTES 0 (0%)\n//\n//\n// **Threshold met: TRUE**\n//\n// **Author: g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm**\n//\n// ### Actions\n//\n// The voting period for this proposal is over.\n//\n//\n// --\n// --\n// # Proposal #0 - Change alice's name!\n//\n// ## Description\n//\n// No description provided.\n//\n// ## Proposal information\n//\n// **Status: EXECUTION SUCCESSFUL**\n//\n// **Voting stats:**\n// - YES 10 (100%)\n// - NO 0 (0%)\n// - ABSTAIN 0 (0%)\n// - MISSING VOTES 0 (0%)\n//\n//\n// **Threshold met: TRUE**\n//\n// **Author: g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm**\n//\n// ### Actions\n//\n// The voting period for this proposal is over.\n//\n//\n// Successfully deleted alice\n\n// Events:\n// [\n//   {\n//     \"type\": \"Registered\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"name\",\n//         \"value\": \"alice123\"\n//       },\n//       {\n//         \"key\": \"address\",\n//         \"value\": \"g1v9kxjcm9ta047h6lta047h6lta047h6lzd40gh\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/sys/users\",\n//     \"func\": \"RegisterUser\"\n//   },\n//   {\n//     \"type\": \"Registeration\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"address\",\n//         \"value\": \"g1v9kxjcm9ta047h6lta047h6lta047h6lzd40gh\"\n//       },\n//       {\n//         \"key\": \"name\",\n//         \"value\": \"alice123\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/gnoland/users/v1\",\n//     \"func\": \"Register\"\n//   },\n//   {\n//     \"type\": \"ProposalAdded\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"proposal-id\",\n//         \"value\": \"0\"\n//       },\n//       {\n//         \"key\": \"proposal-author\",\n//         \"value\": \"g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/gov/dao/v2\",\n//     \"func\": \"EmitProposalAdded\"\n//   },\n//   {\n//     \"type\": \"VoteAdded\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"proposal-id\",\n//         \"value\": \"0\"\n//       },\n//       {\n//         \"key\": \"author\",\n//         \"value\": \"g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm\"\n//       },\n//       {\n//         \"key\": \"option\",\n//         \"value\": \"YES\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/gov/dao/v2\",\n//     \"func\": \"EmitVoteAdded\"\n//   },\n//   {\n//     \"type\": \"ProposalAccepted\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"proposal-id\",\n//         \"value\": \"0\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/gov/dao/v2\",\n//     \"func\": \"EmitProposalAccepted\"\n//   },\n//   {\n//     \"type\": \"Deleted\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"address\",\n//         \"value\": \"g1v9kxjcm9ta047h6lta047h6lta047h6lzd40gh\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/sys/users\",\n//     \"func\": \"Delete\"\n//   },\n//   {\n//     \"type\": \"ProposalExecuted\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"proposal-id\",\n//         \"value\": \"0\"\n//       },\n//       {\n//         \"key\": \"exec-status\",\n//         \"value\": \"accepted\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/gov/dao/v2\",\n//     \"func\": \"ExecuteProposal\"\n//   }\n// ]\n"}]},"deposit":""}],"fee":{"gas_wanted":"80000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"j8dTWNIPr95pwadpYerz4vTC2aV7OmVH/PDhBytKkHgOy/hGHO3mWhWyzTH/cpweeP/zY/PPY9gY26YtR5uOBQ=="}],"memo":""},"metadata":{"timestamp":"1742839524"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fjh9y7ausp27dqsdq0qrcsnmgvwm6829v2au7d","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"kCu2eDmRncucpb4LP9NcyUnY2nHrHHHUzfN1D3tqGRAgub1ylG1tkDqenM2Ugw9yc/wB5j34iKGllhnDqie8DA=="}],"memo":""},"metadata":{"timestamp":"1742868054"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fjh9y7ausp27dqsdq0qrcsnmgvwm6829v2au7d","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"FPFqJIyP0i2ELyM9IHnLVSIyNC87hoXSrIsa6fbNojmYO615BN94Cm6WblIsTOVvnUlNL4VHDLRiC1JCoHfhBg=="}],"memo":""},"metadata":{"timestamp":"1742868355"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fjh9y7ausp27dqsdq0qrcsnmgvwm6829v2au7d","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["grepsuzette001"]}],"fee":{"gas_wanted":"14476306","gas_fee":"30159ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"Llw+frhrGnGmDeK6Y5JCFKxHNq9Fkuz1wr9gJnvq+PDJcKVmrGKZSmy9NllbdZh55qReSkVHeM28NSEnl/AxAA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742868893"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15nw3tn7623tr48j0awzhg2757lf5yf4mxf9htg","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"0hgzVdru4+s7ZiKe7kKvLb56kXPVX3FKm7yxdc278B8="},"signature":"L8q7yyGsHrakZhCN8O8PjwTtz4sptvnKcFNiir0NMvXUrgcGmQBspexpzgBuZM8XlZ0iJuJLwLgQuLWBJpcgAw=="}],"memo":""},"metadata":{"timestamp":"1742899071"}}
