{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/demo/counter","func":"Increment","args":null}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"bqdZ5Yq/CwFZ3hcIEGby5vnEMg5+goN13/QlAM3ropKmNT6QsJfjk8o1ZHG2C61MZpqUqxWH+7T9Zy++QuxTCQ=="}],"memo":""},"metadata":{"timestamp":"1742405450"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/docs/minisocial/v1","func":"CreatePost","args":["Hey! This is me from the Online Workshop!"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"zTIA7DTflOJR6mVXKgCrv4YHzyjdOqMwGYoTMsjsdnuPJ2xFJu9KNWn6Tj05nzfaJ3zCW3wNgOWsO3JAlUaSAA=="}],"memo":""},"metadata":{"timestamp":"1742405651"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1mv0052e7r6s09f5t9xsqf00nj3tqsgt9dg52jr","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"K9n7Ca7adpKzvONHMJohTBLn533sEdTKbcITBqmw1gzS9JftCdPpHydo+wxvZ05y68kCJEU6UcTjwVzJN7aeCA=="}],"memo":""},"metadata":{"timestamp":"1742409808"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ydvzv2y3mshkp4f03yghcglv4cuh0gmt45saxw","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"rkWmj+0FdjxhmSx7ogoXmpyPwWO9KLE7duaAbnsF7M4IeanYnLXWvRqsZcihCUx/BqqQVNbii+YkOn7viYWsDA=="}],"memo":""},"metadata":{"timestamp":"1742410059"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1mv0052e7r6s09f5t9xsqf00nj3tqsgt9dg52jr","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"cTo39P4uEnwOKQyDD3xdFaVITVJYqk7FrRG+phBPhQr2n+cToE/izTguATMiIhgjFWnOsQWXbUt0xkV5OUZkCw=="}],"memo":""},"metadata":{"timestamp":"1742410174"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1mv0052e7r6s09f5t9xsqf00nj3tqsgt9dg52jr","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"xfy8UcQMJTRWIFnbNC7DFGXz3c/7ga0jW7ls3tjQPuwODpAGduzyYP6FLR1iW4CpRCYB7KVCC48o4OrSwCC8Dw=="}],"memo":""},"metadata":{"timestamp":"1742410245"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1mv0052e7r6s09f5t9xsqf00nj3tqsgt9dg52jr","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["quocnguyen"]}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"XHXeKiDqmAk2RCSZSgaAS4Wbv+PwOCNpuKaj4kVlb3HbmDj/hume+EqYkmW9k7mS35zL7sDFr7v+2/rcIZvPAQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742410295"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1v5rlvj5fvx6lhtw6aneey73mvr280kr3n9pzs6","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"qBhw6R3EMiOmMfs0ewVVyCYnuEmCFIXLZthMSXt9RWdWmOWgrwCd/0+KVMDWV2i4xbQI/es/QvBtxZEub0tdBQ=="}],"memo":""},"metadata":{"timestamp":"1742419287"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742434182_0","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"EPfG6Y1qFhFhXmKNg/NEcNfl94uVoGChfxJ5+cP3iCngN2CD4mxskEI9ODYhUsC+T6E/XwraYzf9IwKM2gQkDg=="}],"memo":""},"metadata":{"timestamp":"1742434181"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742434182_1","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"qDvRHegnag7x/sfjTGE3T5yYJ1rpnK/uU00k6lajAvEvShH14ARoyfjrpmP4qUxQjZhWXpeJCkH86hfNNjrCCg=="}],"memo":""},"metadata":{"timestamp":"1742434181"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742434182_2","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"pEXvs6o2PkwPFOFO6NPaOINmBeJWvZ/KE5NU1tk3PCzy7jJ8FeFV0Db3uJV/xeihSHoH36t6L8goy335yh9wDg=="}],"memo":""},"metadata":{"timestamp":"1742434181"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742434182_3","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"BkKwQFrMH8tHTWN0B4vmxxwLVSS7jNLDgjhQ+4yhAPBPsU1OjM/JjlCVgOp1TNaRyUkZ9v1XwkkFLh8CrCH6DQ=="}],"memo":""},"metadata":{"timestamp":"1742434181"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742434182_4","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"CIFJ3qJjFNSRYop3COc3ICbiusmkoYi4Der+VH3u6UqYpSo+AQrJHB41vACl6SRLEGB76R3DwHk3bDAiofxrAg=="}],"memo":""},"metadata":{"timestamp":"1742434181"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742434182_5","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"8+b+vk4+qgMqrv/nMnsH6bOQjv36qZ7CPqGXdIhXsyPYIEuLna13f3o6xEbxl8IR6A0jvck9Z0D7xc7Z0wzDBg=="}],"memo":""},"metadata":{"timestamp":"1742434181"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742434182_6","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"4/DhXx3aYZROkqFGk6sdxL/q1+Jm1JUhMuYLZtMMGEOcuO/Q9F3fHCjjO4bc42LaAGV94Vrnf8NoToO6ZxbjCA=="}],"memo":""},"metadata":{"timestamp":"1742434181"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742434182_7","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"n36PMxs5n0JrLg925y+lVLm2cKF3muHlaoPLOu37XrDSz9NECXQ3Ia0++fSok8wN320LTSGxXAzfzjpEtFxXAw=="}],"memo":""},"metadata":{"timestamp":"1742434181"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742434182_8","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"JTS6/B8g0YEX2+G/fnkD7EKq0WH9jLZY+oFdQK6gNaaJ8sKn2i6nWng4T9OjGLRhDiZTCRP5nKK3dGYQdyG9Ag=="}],"memo":""},"metadata":{"timestamp":"1742434181"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742434182_9","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"bFowRNUZ4QAppp/k8aeG+qWFrmdlMLYO12crt7GhHlEJappR3c8rCJ/3sX1yvxp4vHs1p2ByyJi1eLlmi+TIAQ=="}],"memo":""},"metadata":{"timestamp":"1742434181"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1xq6suh33r3dkwps8c89my04s3k3gyqjlpqxcgj","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3IpO1/Hgz2h1sfK1hce0mclYlWjdSh8DgDOJ77NvjDyNw5jBgw1uo4vrWWKgCd9ouneQKNYPLyNEx4a2lX7XAA=="}],"memo":""},"metadata":{"timestamp":"1742440411"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g150gdvn780ws7a3s9qpdvv7h4d9hq6vh672ely0","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"QdSHZ4u3jqdlBTtHSIES74qwyF/OYdZMIJskX4jNg8/2F6U6hTck0hY2SSV+dPKWOn2QhbCiKiFd5Cg2deAbDA=="}],"memo":""},"metadata":{"timestamp":"1742455040"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1vhth8ckz29m96lys37jgq42zvcuwczf09t8yx7","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"khIF6eQzD6wnodh/h2Rhn3iYpPlCTu9+nC1WasjLCAsjvHsbOuYv3hQzGZk839zMPxNcLvIiReypQ9dEXgCxCg=="}],"memo":""},"metadata":{"timestamp":"1742457209"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3i8fcsPacaduban8lnLLfl6an1A7tn9vfebX4llrt0WEZZTqsRSnkM5rRZDGk7lwwyNVD7yNigrcjr51mOTgCQ=="}],"memo":""},"metadata":{"timestamp":"1742482082"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3i8fcsPacaduban8lnLLfl6an1A7tn9vfebX4llrt0WEZZTqsRSnkM5rRZDGk7lwwyNVD7yNigrcjr51mOTgCQ=="}],"memo":""},"metadata":{"timestamp":"1742482112"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g9v4dcmmhqcrzgu2llmg78aph3kscp5vzu6cv3","amount":"5000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ApHYjBVBKXozWY1XzIBTujsG+IrxIlECdYP+InOZVecRSlSiMnTPmaG2wBXDXe+zUPhLDt2V2WHhWZs2PuZWAg=="}],"memo":""},"metadata":{"timestamp":"1742484982"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1d24j8fwnc0w5q427fauyey4gdd30qgu69k6n0x","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"OtG5gihJo8Di5ncC4i16AFMC3YRjAKiPasEksKoy93EH03AAvpeXMO33h1XHCiNl37bVmqIirh80BtQd/DeuAA=="}],"memo":""},"metadata":{"timestamp":"1742486101"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1d24j8fwnc0w5q427fauyey4gdd30qgu69k6n0x","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["ursulovic202"]}],"fee":{"gas_wanted":"500000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"xbXHxjosUlYtjioCg8hpqPk83Wdao0sTLiWJ7w9+AjsGP42foGjc79YmB0tsORNK+MZmVOwyfjjvZyfskPT8CA=="}],"memo":""},"metadata":{"timestamp":"1742486327"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742520596_0","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"p2Mm0VrH/JnyE/ZP4y0fcDPE5EM0tGi+GUKzMTugQzQV5Vd3jN8tVemYb4lZzguzEKPXhEEMknvMN/dcOPzeAg=="}],"memo":""},"metadata":{"timestamp":"1742520592"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742520596_1","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"/Eo7AlfYvm8h+adHvM/GV6TZj441FSxuFkz4KymEIMC9gMmP1cgSquREvhXQuQp7JeVKpDyOaQoUDg0j2SavBQ=="}],"memo":""},"metadata":{"timestamp":"1742520592"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742520596_2","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"eVsLW7gnVlCaMQRL5Q+FUUGBgDXVhZRB65zFbeZjD7GLOU80tYYy1M5W5V3cG+BzKlCrddTlcMtxLJ9+uMg8Dw=="}],"memo":""},"metadata":{"timestamp":"1742520592"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742520596_3","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"7cpBoAcy8VKce5Hmq9spz5SWAgVIEu3M0qMH5WSEYfIE85BdJNq0gnreaMklUkjPR7LDums43BNPU5pFKyF2Cg=="}],"memo":""},"metadata":{"timestamp":"1742520592"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742520596_4","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"r36oK4vBVumpjVMC0ihj8rDJMvyr61KrQh8kyA5QiLexZbzC9xF8NhIF0amPVW2SZpvG9IjZFX8aA4AOcQYKBw=="}],"memo":""},"metadata":{"timestamp":"1742520592"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742520596_5","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"bkdIy2E1DSI09bVzEj6Us6VMwoedAXT8Xri/mzs1FC3bSMZdBc7UcpecFgczjJifS9MK8IOb5Jf0QUj+uLl6Cw=="}],"memo":""},"metadata":{"timestamp":"1742520592"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742520596_6","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"BE4bujUQbkEcusvvxoQV7ewW45gvbL6eF3YRHVclZ2rkL8kT3yHSJJ/TKXOGH7jpL/eVn9NTYzjqHjZ4o9TBAQ=="}],"memo":""},"metadata":{"timestamp":"1742520592"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742520596_7","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"XaacUoji2K+knSamzGO67ZbaTqvY92x8FvVN4w/5xzgmu7WOXrbvasoxZh4pzVypfsiWJEqbu60hn0XIOTajAw=="}],"memo":""},"metadata":{"timestamp":"1742520592"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742520596_8","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tNwcVOlzkxHVaDKDTynYzpi9KG/8963agysCpcpgMAoWKU+7Cupo/MXFT6Ri620QmTvdPhnzb/2wOfvvVLZIDA=="}],"memo":""},"metadata":{"timestamp":"1742520592"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742520596_9","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"NLjScepME7I0tnU5kO9dJ4ZVsWuqaJVGgtJcg52zym0xkPfSSX02Ti0tw9RGf487+V7Exrl1P+UI8Ml1RuzMDQ=="}],"memo":""},"metadata":{"timestamp":"1742520592"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"pWd/uWNDp2Z/wAIEGm7JzD4bvGT2XpJ6qsY69Iu+H1KSdkpod9b2QxVpb969oUqnLQpnzcPD48fkCi/XUNebCg=="}],"memo":""},"metadata":{"timestamp":"1742590173"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"pWd/uWNDp2Z/wAIEGm7JzD4bvGT2XpJ6qsY69Iu+H1KSdkpod9b2QxVpb969oUqnLQpnzcPD48fkCi/XUNebCg=="}],"memo":""},"metadata":{"timestamp":"1742590188"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"pWd/uWNDp2Z/wAIEGm7JzD4bvGT2XpJ6qsY69Iu+H1KSdkpod9b2QxVpb969oUqnLQpnzcPD48fkCi/XUNebCg=="}],"memo":""},"metadata":{"timestamp":"1742590203"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders","path":"gno.land/r/meeshell222/snakesandladders","files":[{"name":"package.gno","body":"package snakesandladders\n\nimport (\n  \"strconv\"\n)\n\n// TYPES\n\ntype Player struct {\n  Address string\n  Position int\n}\n\ntype Game struct {\n  Players []Player\n  Turn int\n  Started bool\n  Winner string\n}\n\n// STATE\n\nvar game Game\n\nvar snakes = Map[int]int{\n  16: 6, 49: 11, 62: 19, 64: 60,\n  87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = Map[int]int{\n  1: 38, 4: 14, 9: 31, 21: 42,\n  28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// FUNCTIONS\n\n// Join game before it starts\nfunc JoinGame() string {\n  if game.Started {\n    return \"Game already started\"\n  }\n  for i := 0; i \u003c len(game.Players); i++ {\n    if game.Players[i].Address == string(Caller()) {\n      return \"Already joined\"\n    }\n  }\n  player := Player{\n    Address: string(Caller()),\n    Position: 0,\n  }\n  game.Players = append(game.Players, player)\n  return \"Player joined: \" + player.Address\n}\n\n// Start the game\nfunc StartGame() string {\n  if game.Started {\n    return \"Game already started\"\n  }\n  if len(game.Players) \u003c 2 {\n    return \"Need at least 2 players\"\n  }\n  game.Started = true\n  game.Turn = 0\n  return \"Game started with \" + strconv.Itoa(len(game.Players)) + \" players\"\n}\n\n// Roll the dice (value passed by caller)\nfunc RollDice(roll int) string {\n  if !game.Started {\n    return \"Game not started\"\n  }\n  if game.Winner != \"\" {\n    return \"Game over. Winner: \" + game.Winner\n  }\n\n  current := game.Players[game.Turn]\n  if current.Address != string(Caller()) {\n    return \"Not your turn\"\n  }\n\n  newPos := current.Position + roll\n  if newPos \u003e 100 {\n    newPos = current.Position // do not move\n  }\n\n  if snakes[newPos] != 0 {\n    newPos = snakes[newPos]\n  } else if ladders[newPos] != 0 {\n    newPos = ladders[newPos]\n  }\n\n  game.Players[game.Turn].Position = newPos\n\n  result := current.Address + \" moved to \" + strconv.Itoa(newPos)\n\n  if newPos == 100 {\n    game.Winner = current.Address\n    result += \" and WON!\"\n  }\n\n  game.Turn = (game.Turn + 1) % len(game.Players)\n  return result\n}\n\n// View current state\nfunc GetGame() Game {\n  return game\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"DWoj/NNvZw7jKsq3mFLT2GhwQ+TqDyopTFOL/qDSZK8B4sBLdilt715im62/7ksBCM8VNbcX7dYwnPSMLixgAA=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742590239"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders","path":"gno.land/r/meeshell222/snakesandladders","files":[{"name":"package.gno","body":"package snakesandladders\n\nimport (\n\t\"strconv\"\n)\n\n// TYPES\n\ntype Player struct {\n\tAddress  string\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  string\n}\n\n// STATE\n\nvar game Game\n\nvar snakes map[int]int = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders map[int]int = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// FUNCTIONS\n\n// Player joins before the game starts\nfunc JoinGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\tcaller := string(Caller())\n\tfor i := 0; i \u003c len(game.Players); i++ {\n\t\tif game.Players[i].Address == caller {\n\t\t\treturn \"Already joined\"\n\t\t}\n\t}\n\tplayer := Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t}\n\tgame.Players = append(game.Players, player)\n\treturn \"Player joined: \" + player.Address\n}\n\n// Start game when enough players joined\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\treturn \"Game started with \" + strconv.Itoa(len(game.Players)) + \" players\"\n}\n\n// Roll dice and apply move\nfunc RollDice(roll int) string {\n\tif !game.Started {\n\t\treturn \"Game not started\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game over. Winner: \" + game.Winner\n\t}\n\tcurrent := game.Players[game.Turn]\n\tif current.Address != string(Caller()) {\n\t\treturn \"Not your turn\"\n\t}\n\n\tnewPos := current.Position + roll\n\tif newPos \u003e 100 {\n\t\tnewPos = current.Position // no move if over 100\n\t}\n\n\t// Apply snakes or ladders\n\tif val, ok := snakes[newPos]; ok {\n\t\tnewPos = val\n\t} else if val, ok := ladders[newPos]; ok {\n\t\tnewPos = val\n\t}\n\n\tgame.Players[game.Turn].Position = newPos\n\tresult := current.Address + \" moved to \" + strconv.Itoa(newPos)\n\n\tif newPos == 100 {\n\t\tgame.Winner = current.Address\n\t\tresult += \" and WON!\"\n\t}\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn result\n}\n\n// Return current game state\nfunc GetGame() Game {\n\treturn game\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"6FxN/2lepjTNNdoHXE98fet74ZfBL3leRkwoUY2bLZ/qtKhmYqmv8h/ob8DVoNmPkXtFsUgHr7FBZJs1dcGeAA=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742590374"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders","path":"gno.land/r/meeshell222/snakesandladders","files":[{"name":"package.gno","body":"package snakesandladders\n\nimport (\n\t\"gno.land/std\"\n\t\"strconv\"\n)\n\n// TYPES\n\ntype Player struct {\n\tAddress  string\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  string\n}\n\n// STATE\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// FUNCTIONS\n\n// Player joins before the game starts\nfunc JoinGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\tcaller := std.GetCaller()\n\tfor i := 0; i \u003c len(game.Players); i++ {\n\t\tif game.Players[i].Address == caller {\n\t\t\treturn \"Already joined\"\n\t\t}\n\t}\n\tplayer := Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t}\n\tgame.Players = append(game.Players, player)\n\treturn \"Player joined: \" + player.Address\n}\n\n// Start game when enough players joined\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\treturn \"Game started with \" + strconv.Itoa(len(game.Players)) + \" players\"\n}\n\n// Roll dice and apply move\nfunc RollDice(roll int) string {\n\tif !game.Started {\n\t\treturn \"Game not started\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game over. Winner: \" + game.Winner\n\t}\n\tcaller := std.GetCaller()\n\tcurrent := game.Players[game.Turn]\n\tif current.Address != caller {\n\t\treturn \"Not your turn\"\n\t}\n\n\tnewPos := current.Position + roll\n\tif newPos \u003e 100 {\n\t\tnewPos = current.Position // no move if over 100\n\t}\n\n\t// Apply snakes or ladders\n\tif val, ok := snakes[newPos]; ok {\n\t\tnewPos = val\n\t} else if val, ok := ladders[newPos]; ok {\n\t\tnewPos = val\n\t}\n\n\tgame.Players[game.Turn].Position = newPos\n\tresult := caller + \" moved to \" + strconv.Itoa(newPos)\n\n\tif newPos == 100 {\n\t\tgame.Winner = caller\n\t\tresult += \" and WON!\"\n\t}\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn result\n}\n\n// Return current game state\nfunc GetGame() Game {\n\treturn game\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"YMu6z+NDuryMlHYIzFJGUHBRQz5HnP+744ng7gt7QL0O657Y/smJLgKaV0iCzTz5OMf4sN1+IZlH+wgte6FjAw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742590460"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders","path":"gno.land/p/meeshell222/snakesandladders","files":[{"name":"package.gno","body":"package snakesandladders\n\nimport (\n\t\"gno.land/pkg/std\"\n\t\"strconv\"\n)\n\n// TYPES\n\ntype Player struct {\n\tAddress  string\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  string\n}\n\n// STATE\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// FUNCTIONS\n\n// Player joins before the game starts\nfunc JoinGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\tcaller := std.GetCaller()\n\tfor i := 0; i \u003c len(game.Players); i++ {\n\t\tif game.Players[i].Address == caller {\n\t\t\treturn \"Already joined\"\n\t\t}\n\t}\n\tplayer := Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t}\n\tgame.Players = append(game.Players, player)\n\treturn \"Player joined: \" + player.Address\n}\n\n// Start game when enough players joined\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\treturn \"Game started with \" + strconv.Itoa(len(game.Players)) + \" players\"\n}\n\n// Roll dice and apply move\nfunc RollDice(roll int) string {\n\tif !game.Started {\n\t\treturn \"Game not started\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game over. Winner: \" + game.Winner\n\t}\n\tcaller := std.GetCaller()\n\tcurrent := game.Players[game.Turn]\n\tif current.Address != caller {\n\t\treturn \"Not your turn\"\n\t}\n\n\tnewPos := current.Position + roll\n\tif newPos \u003e 100 {\n\t\tnewPos = current.Position // no move if over 100\n\t}\n\n\t// Apply snakes or ladders\n\tif val, ok := snakes[newPos]; ok {\n\t\tnewPos = val\n\t} else if val, ok := ladders[newPos]; ok {\n\t\tnewPos = val\n\t}\n\n\tgame.Players[game.Turn].Position = newPos\n\tresult := caller + \" moved to \" + strconv.Itoa(newPos)\n\n\tif newPos == 100 {\n\t\tgame.Winner = caller\n\t\tresult += \" and WON!\"\n\t}\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn result\n}\n\n// Return current game state\nfunc GetGame() Game {\n\treturn game\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"6RRVNBaJVjgJCIy9JzDrc5agu3NGBX7iNLFQ8AM+JFNExHwLTQJu0D/QRynoPTbcDVIGhTVQUPjDIqXqIrKGDg=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742590630"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"main","path":"gno.land/r/meeshell222/main","files":[{"name":"package.gno","body":"package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"time\"\n)\n\ntype Player struct {\n\tAddress  string\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  string\n}\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\nfunc JoinGame(address string) error {\n\tif game.Started {\n\t\treturn errors.New(\"game already started\")\n\t}\n\tfor _, p := range game.Players {\n\t\tif p.Address == address {\n\t\t\treturn errors.New(\"already joined\")\n\t\t}\n\t}\n\tgame.Players = append(game.Players, Player{Address: address})\n\treturn nil\n}\n\nfunc StartGame() error {\n\tif game.Started {\n\t\treturn errors.New(\"game already started\")\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn errors.New(\"need at least 2 players\")\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\treturn nil\n}\n\nfunc RollDice(address string, roll int) (string, error) {\n\tif !game.Started {\n\t\treturn \"\", errors.New(\"game not started\")\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"\", errors.New(\"game over, winner: \" + game.Winner)\n\t}\n\tif game.Players[game.Turn].Address != address {\n\t\treturn \"\", errors.New(\"not your turn\")\n\t}\n\n\tplayer := \u0026game.Players[game.Turn]\n\tnewPos := player.Position + roll\n\tif newPos \u003e 100 {\n\t\tnewPos = player.Position // can't overshoot\n\t}\n\tif val, ok := snakes[newPos]; ok {\n\t\tnewPos = val\n\t} else if val, ok := ladders[newPos]; ok {\n\t\tnewPos = val\n\t}\n\n\tplayer.Position = newPos\n\tmsg := fmt.Sprintf(\"%s rolled %d, moved to %d\", player.Address, roll, newPos)\n\n\tif newPos == 100 {\n\t\tgame.Winner = address\n\t\tmsg += \" and WON!\"\n\t}\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn msg, nil\n}\n\nfunc main() {\n\trand.Seed(time.Now().UnixNano())\n\n\t// Sample playthrough\n\tJoinGame(\"alice\")\n\tJoinGame(\"bob\")\n\tStartGame()\n\n\tplayers := []string{\"alice\", \"bob\"}\n\n\tfor game.Winner == \"\" {\n\t\tcurrent := players[game.Turn]\n\t\troll := rand.Intn(6) + 1\n\t\tmsg, err := RollDice(current, roll)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error:\", err)\n\t\t\tbreak\n\t\t}\n\t\tfmt.Println(msg)\n\t\ttime.Sleep(300 * time.Millisecond)\n\t}\n\n\tfmt.Println(\"Game over. Winner:\", game.Winner)\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"0leR2cb7E2DhYiKpHxL5pJK9mrywhV/5etPToTom2gB1IECn72dJc01ouVFc5ZbP7jrNpxPGpWnVIQ6IIH4uAA=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742590911"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"main","path":"gno.land/r/meeshell222/main","files":[{"name":"package.gno","body":"package main\n\nimport (\n\t\"strconv\"\n)\n\n// TYPES\n\ntype Player struct {\n\tAddress  string\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  string\n}\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// FUNCTIONS\n\nfunc JoinGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\tcaller := std.GetCaller()\n\tfor i := 0; i \u003c len(game.Players); i++ {\n\t\tif game.Players[i].Address == caller {\n\t\t\treturn \"Already joined\"\n\t\t}\n\t}\n\tplayer := Player{Address: caller, Position: 0}\n\tgame.Players = append(game.Players, player)\n\treturn \"Player joined: \" + player.Address\n}\n\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\treturn \"Game started with \" + strconv.Itoa(len(game.Players)) + \" players\"\n}\n\nfunc RollDice(roll int) string {\n\tif !game.Started {\n\t\treturn \"Game not started\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game over. Winner: \" + game.Winner\n\t}\n\tcaller := std.GetCaller()\n\tcurrent := game.Players[game.Turn]\n\tif current.Address != caller {\n\t\treturn \"Not your turn\"\n\t}\n\n\tnewPos := current.Position + roll\n\tif newPos \u003e 100 {\n\t\tnewPos = current.Position\n\t}\n\n\tif val, ok := snakes[newPos]; ok {\n\t\tnewPos = val\n\t} else if val, ok := ladders[newPos]; ok {\n\t\tnewPos = val\n\t}\n\n\tgame.Players[game.Turn].Position = newPos\n\tresult := caller + \" moved to \" + strconv.Itoa(newPos)\n\n\tif newPos == 100 {\n\t\tgame.Winner = caller\n\t\tresult += \" and WON!\"\n\t}\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn result\n}\n\nfunc GetGame() Game {\n\treturn game\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"BMliXzLP9nxc6mZv74KCBOw7M99NC3ybzh+51lBXDWlkOE4qHVsQ5mKXVTHETylT1YGDnJ+MmoZIIvWW8Z29BQ=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742590997"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"main","path":"gno.land/r/meeshell222/main","files":[{"name":"package.gno","body":"package main\n\nimport (\n\t\"strconv\"\n\t\"strings\"\n)\n\n// TYPES\n\ntype Player struct {\n\tAddress  string\n\tPosition int\n}\n\ntype GameState struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  string\n\tLog     []string\n}\n\n// STATE\n\nvar game GameState\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// HELPERS\n\nfunc findPlayer(addr string) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\n// PUBLIC INTERFACE\n\nfunc JoinGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\taddr := std.GetCaller()\n\t_, exists := findPlayer(addr)\n\tif exists {\n\t\treturn \"Already joined\"\n\t}\n\tgame.Players = append(game.Players, Player{Address: addr, Position: 0})\n\tlog := addr + \" joined the game\"\n\tgame.Log = append(game.Log, log)\n\treturn log\n}\n\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\tlog := \"Game started with \" + strconv.Itoa(len(game.Players)) + \" players\"\n\tgame.Log = append(game.Log, log)\n\treturn log\n}\n\nfunc RollDice(roll int) string {\n\tif !game.Started {\n\t\treturn \"Game not started\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game over. Winner: \" + game.Winner\n\t}\n\tcaller := std.GetCaller()\n\tcurr := \u0026game.Players[game.Turn]\n\tif curr.Address != caller {\n\t\treturn \"Not your turn\"\n\t}\n\n\tnewPos := curr.Position + roll\n\tif newPos \u003e 100 {\n\t\tnewPos = curr.Position\n\t}\n\tnewPos = applySnakesAndLadders(newPos)\n\tcurr.Position = newPos\n\n\tlog := caller + \" rolled \" + strconv.Itoa(roll) + \", now at \" + strconv.Itoa(newPos)\n\n\tif newPos == 100 {\n\t\tgame.Winner = caller\n\t\tlog += \" and WON!\"\n\t}\n\n\tgame.Log = append(game.Log, log)\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn log\n}\n\nfunc GetState() string {\n\ts := []string{}\n\tfor _, p := range game.Players {\n\t\ts = append(s, p.Address+\"@\"+strconv.Itoa(p.Position))\n\t}\n\treturn strings.Join(s, \" | \")\n}\n\nfunc GetLog() []string {\n\treturn game.Log\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"2Xge9aLV5wI3wDzC7JM7yxX3C28lk0kkWlHjQC0eM6gJitLRu3IC4DHsFfVjuxk3DtpcG1Zp6X5LFqmC1xCnAg=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742591544"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"main","path":"gno.land/r/meeshell222/main","files":[{"name":"package.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// TYPES\n\ntype Player struct {\n\tAddress  string\n\tPosition int\n}\n\ntype GameState struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  string\n\tLog     []string\n}\n\n// STATE\n\nvar game GameState\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// HELPERS\n\nfunc findPlayer(addr string) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\n// PUBLIC INTERFACE\n\nfunc JoinGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\taddr := std.GetCaller()\n\t_, exists := findPlayer(addr)\n\tif exists {\n\t\treturn \"Already joined\"\n\t}\n\tgame.Players = append(game.Players, Player{Address: addr, Position: 0})\n\tlog := addr + \" joined the game\"\n\tgame.Log = append(game.Log, log)\n\treturn log\n}\n\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\tlog := \"Game started with \" + strconv.Itoa(len(game.Players)) + \" players\"\n\tgame.Log = append(game.Log, log)\n\treturn log\n}\n\nfunc RollDice(roll int) string {\n\tif !game.Started {\n\t\treturn \"Game not started\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game over. Winner: \" + game.Winner\n\t}\n\tcaller := std.GetCaller()\n\tcurr := \u0026game.Players[game.Turn]\n\tif curr.Address != caller {\n\t\treturn \"Not your turn\"\n\t}\n\n\tnewPos := curr.Position + roll\n\tif newPos \u003e 100 {\n\t\tnewPos = curr.Position\n\t}\n\tnewPos = applySnakesAndLadders(newPos)\n\tcurr.Position = newPos\n\n\tlog := caller + \" rolled \" + strconv.Itoa(roll) + \", now at \" + strconv.Itoa(newPos)\n\n\tif newPos == 100 {\n\t\tgame.Winner = caller\n\t\tlog += \" and WON!\"\n\t}\n\n\tgame.Log = append(game.Log, log)\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn log\n}\n\nfunc GetState() string {\n\ts := []string{}\n\tfor _, p := range game.Players {\n\t\ts = append(s, p.Address+\"@\"+strconv.Itoa(p.Position))\n\t}\n\treturn strings.Join(s, \" | \")\n}\n\nfunc GetLog() []string {\n\treturn game.Log\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"uNQd0MmQMfqL703txBx1jzRJASezL9WfuGli+29yxZuTSpBXN7AuUCf7TxC+OYxMndWXYUUkZ3aCylrsG7tQBw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742591629"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"main","path":"gno.land/r/meeshell222/main","files":[{"name":"package.gno","body":"package main\n\nimport (\n\t\"std\" // ✅ correct import for GetCaller\n\t\"strconv\"\n\t\"strings\"\n)\n\n// TYPES\n\ntype Player struct {\n\tAddress  string\n\tPosition int\n}\n\ntype GameState struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  string\n\tLog     []string\n}\n\n// STATE\n\nvar game GameState\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// HELPERS\n\nfunc findPlayer(addr string) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\n// PUBLIC FUNCTIONS\n\nfunc JoinGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\taddr := std.GetCaller()\n\t_, exists := findPlayer(addr)\n\tif exists {\n\t\treturn \"Already joined\"\n\t}\n\tgame.Players = append(game.Players, Player{Address: addr, Position: 0})\n\tlog := addr + \" joined the game\"\n\tgame.Log = append(game.Log, log)\n\treturn log\n}\n\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\tlog := \"Game started with \" + strconv.Itoa(len(game.Players)) + \" players\"\n\tgame.Log = append(game.Log, log)\n\treturn log\n}\n\nfunc RollDice(roll int) string {\n\tif !game.Started {\n\t\treturn \"Game not started\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game over. Winner: \" + game.Winner\n\t}\n\tcaller := std.GetCaller()\n\tcurr := \u0026game.Players[game.Turn]\n\tif curr.Address != caller {\n\t\treturn \"Not your turn\"\n\t}\n\n\tnewPos := curr.Position + roll\n\tif newPos \u003e 100 {\n\t\tnewPos = curr.Position\n\t}\n\tnewPos = applySnakesAndLadders(newPos)\n\tcurr.Position = newPos\n\n\tlog := caller + \" rolled \" + strconv.Itoa(roll) + \", now at \" + strconv.Itoa(newPos)\n\tif newPos == 100 {\n\t\tgame.Winner = caller\n\t\tlog += \" and WON!\"\n\t}\n\n\tgame.Log = append(game.Log, log)\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn log\n}\n\nfunc GetState() string {\n\ts := []string{}\n\tfor _, p := range game.Players {\n\t\ts = append(s, p.Address+\"@\"+strconv.Itoa(p.Position))\n\t}\n\treturn strings.Join(s, \" | \")\n}\n\nfunc GetLog() []string {\n\treturn game.Log\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"9ARvgnwo0Q21FgWo+9ONDTpVZZ/S2XtQpPjcnNl0Kl7l0DIovbDkkUJIDQw/g8PiuICWKKawxTQwO7asJJc6CQ=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742591825"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"main","path":"gno.land/r/meeshell222/main","files":[{"name":"package.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// --- Game Types ---\n\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  std.Address\n\tLogs    []string\n}\n\n// --- Global State ---\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// --- Helper Functions ---\n\nfunc findPlayer(addr std.Address) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\nfunc logEvent(msg string) {\n\tgame.Logs = append(game.Logs, msg)\n\tstd.Emit(\"GameLog\", \"msg\", msg)\n}\n\n// --- Game Functions ---\n\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif _, exists := findPlayer(caller); exists {\n\t\treturn \"Already joined.\"\n\t}\n\tgame.Players = append(game.Players, Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t})\n\tmsg := \"Player \" + caller.String() + \" joined the game.\"\n\tlogEvent(msg)\n\treturn msg\n}\n\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players to start.\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\tlogEvent(\"Game started with \" + strconv.Itoa(len(game.Players)) + \" players.\")\n\treturn \"Game started.\"\n}\n\nfunc RollDice(roll int) string {\n\tcaller := std.OriginCaller()\n\tif !game.Started {\n\t\treturn \"Game not started yet.\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game already finished. Winner: \" + game.Winner.String()\n\t}\n\n\tcurrPlayer := \u0026game.Players[game.Turn]\n\tif currPlayer.Address != caller {\n\t\treturn \"Not your turn.\"\n\t}\n\n\tpos := currPlayer.Position + roll\n\tif pos \u003e 100 {\n\t\tpos = currPlayer.Position // overshoot doesn't move\n\t}\n\tfinalPos := applySnakesAndLadders(pos)\n\tcurrPlayer.Position = finalPos\n\n\tmsg := caller.String() + \" rolled \" + strconv.Itoa(roll) + \" → \" + strconv.Itoa(finalPos)\n\tif finalPos == 100 {\n\t\tgame.Winner = caller\n\t\tmsg += \" 🎉 WINNER!\"\n\t}\n\tlogEvent(msg)\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn msg\n}\n\nfunc GetGameState() string {\n\tvar states []string\n\tfor _, p := range game.Players {\n\t\tstates = append(states, p.Address.String()+\"@\"+strconv.Itoa(p.Position))\n\t}\n\treturn strings.Join(states, \" | \")\n}\n\nfunc GetLog() []string {\n\treturn game.Logs\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"14579017","gas_fee":"30373ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"1vnK1x9z87Xb5DKYQcbAw3RmYLYz3l3Suhy4MkatG19Q9x4o0L8hH9H3Qyly88BSMlPunHCFLNCwxcjnrWfsCw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742592136"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/main","func":"JoinGame","args":null}],"fee":{"gas_wanted":"1038334","gas_fee":"2164ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"jzCvlRy9bSnJb7Cwfs2e9qc53a8X52245TgWGqhKjuDbmdaO0soOP57tIkxeGLjmmKzqO15vHxHTL081B/pXBQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742592247"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/main","func":"StartGame","args":null}],"fee":{"gas_wanted":"224090","gas_fee":"467ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"iv0xDPa/WmXbp3d9cKJqTU2/O7/5b26IxLFjzr+s1II2DzDqOAgZ0eugHunZdZjz5Gp0YyCqxlwTu6RBTsqiBA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742592272"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders","path":"gno.land/r/meeshell222/snakesandladders","files":[{"name":"package.gno","body":"package snakesandladders\n\nimport (\n\t\"std\"\n\t\"strings\"\n)\n\n// Define the game board with snakes and ladders\nvar board = map[int]int{\n\t3:  22, // Ladder from 3 to 22\n\t5:  8,  // Ladder from 5 to 8\n\t11: 26, // Ladder from 11 to 26\n\t20: 29, // Ladder from 20 to 29\n\t17: 4,  // Snake from 17 to 4\n\t19: 7,  // Snake from 19 to 7\n\t27: 1,  // Snake from 27 to 1\n\t21: 9,  // Snake from 21 to 9\n}\n\n// Player struct to hold player information\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\n// Game state variables\nvar (\n\tplayers            = []Player{}\n\tcurrentPlayerIndex int\n\tgameStarted        bool\n)\n\n// Initialize the game\nfunc init() {\n\tgameStarted = false\n\tcurrentPlayerIndex = 0\n}\n\n// Join the game\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tfor _, player := range players {\n\t\tif player.Address == caller {\n\t\t\treturn \"You are already in the game.\"\n\t\t}\n\t}\n\tplayers = append(players, Player{Address: caller, Position: 0})\n\treturn \"You have joined the game.\"\n}\n\n// Start the game\nfunc StartGame() string {\n\tif gameStarted {\n\t\treturn \"Game has already started.\"\n\t}\n\tif len(players) \u003c 2 {\n\t\treturn \"Need at least 2 players to start the game.\"\n\t}\n\tgameStarted = true\n\treturn \"Game started!\"\n}\n\n// Roll the dice and move\nfunc RollDice() string {\n\tif !gameStarted {\n\t\treturn \"Game has not started yet.\"\n\t}\n\tcaller := std.OriginCaller()\n\tif players[currentPlayerIndex].Address != caller {\n\t\treturn \"It's not your turn.\"\n\t}\n\tdiceRoll := std.RandIntn(6) + 1\n\tnewPosition := players[currentPlayerIndex].Position + diceRoll\n\tif newPosition \u003e= 30 {\n\t\tplayers[currentPlayerIndex].Position = 30\n\t\tgameStarted = false\n\t\treturn \"Congratulations! You have won the game.\"\n\t}\n\tif destination, ok := board[newPosition]; ok {\n\t\tnewPosition = destination\n\t}\n\tplayers[currentPlayerIndex].Position = newPosition\n\tcurrentPlayerIndex = (currentPlayerIndex + 1) % len(players)\n\treturn \"You rolled a \" + itoa(diceRoll) + \". Your new position is \" + itoa(newPosition) + \".\"\n}\n\n// Render the game state\nfunc Render(_ string) string {\n\tvar sb strings.Builder\n\tsb.WriteString(\"# Snakes and Ladders\\n\\n\")\n\tif !gameStarted {\n\t\tsb.WriteString(\"Game has not started yet.\\n\")\n\t} else {\n\t\tsb.WriteString(\"Game is in progress.\\n\")\n\t}\n\tsb.WriteString(\"\\n## Players:\\n\")\n\tfor _, player := range players {\n\t\tsb.WriteString(\"- Address: \" + player.Address.String() + \", Position: \" + itoa(player.Position) + \"\\n\")\n\t}\n\treturn sb.String()\n}\n\n// Helper function to convert int to string\nfunc itoa(i int) string {\n\treturn std.Sprintf(\"%d\", i)\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lk/XTe7QM2nh6d8xM73Ye5mS+XtauXbwf3ACcVOgifiVKnJBCTJ+npw1XMuN3ZdfvhX1GkbzOEcRFrtvktjIBQ=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742592362"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders","path":"gno.land/r/meeshell222/snakesandladders","files":[{"name":"package.gno","body":"package snakesandladders\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// --- Game Types ---\n\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  std.Address\n\tLogs    []string\n}\n\n// --- Global State ---\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// --- Helper Functions ---\n\nfunc findPlayer(addr std.Address) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\nfunc logEvent(msg string) {\n\tgame.Logs = append(game.Logs, msg)\n\tstd.Emit(\"GameLog\", \"msg\", msg)\n}\n\n// --- Game Functions ---\n\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif _, exists := findPlayer(caller); exists {\n\t\treturn \"Already joined.\"\n\t}\n\tgame.Players = append(game.Players, Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t})\n\tmsg := \"Player \" + caller.String() + \" joined the game.\"\n\tlogEvent(msg)\n\treturn msg\n}\n\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players to start.\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\tlogEvent(\"Game started with \" + strconv.Itoa(len(game.Players)) + \" players.\")\n\treturn \"Game started.\"\n}\n\nfunc RollDice(roll int) string {\n\tcaller := std.OriginCaller()\n\tif !game.Started {\n\t\treturn \"Game not started yet.\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game already finished. Winner: \" + game.Winner.String()\n\t}\n\n\tcurrPlayer := \u0026game.Players[game.Turn]\n\tif currPlayer.Address != caller {\n\t\treturn \"Not your turn.\"\n\t}\n\n\tpos := currPlayer.Position + roll\n\tif pos \u003e 100 {\n\t\tpos = currPlayer.Position // overshoot doesn't move\n\t}\n\tfinalPos := applySnakesAndLadders(pos)\n\tcurrPlayer.Position = finalPos\n\n\tmsg := caller.String() + \" rolled \" + strconv.Itoa(roll) + \" → \" + strconv.Itoa(finalPos)\n\tif finalPos == 100 {\n\t\tgame.Winner = caller\n\t\tmsg += \" 🎉 WINNER!\"\n\t}\n\tlogEvent(msg)\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn msg\n}\n\nfunc GetGameState() string {\n\tvar states []string\n\tfor _, p := range game.Players {\n\t\tstates = append(states, p.Address.String()+\"@\"+strconv.Itoa(p.Position))\n\t}\n\treturn strings.Join(states, \" | \")\n}\n\nfunc GetLog() []string {\n\treturn game.Logs\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"14617695","gas_fee":"30454ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"6UccHPkFdqy4T3yt2n7rxRbcEqcxlv26E8MzIkqNskB3B8DKpUsL4OuNLEBw5doxCjaxx2PZXsKDQynLHD8DBA=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742592408"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders2","path":"gno.land/r/meeshell222/snakesandladders2","files":[{"name":"package.gno","body":"package snakesandladders\n\nimport (\n\t\"gno.land/r/gnoland/dynreplacer\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// --- Game Types ---\n\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  std.Address\n\tLogs    []string\n}\n\n// --- Global State ---\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// --- Helper Functions ---\n\nfunc findPlayer(addr std.Address) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\nfunc logEvent(msg string) {\n\tgame.Logs = append(game.Logs, msg)\n\tstd.Emit(\"GameLog\", \"msg\", msg)\n}\n\n// --- Game Functions ---\n\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif _, exists := findPlayer(caller); exists {\n\t\treturn \"Already joined.\"\n\t}\n\tgame.Players = append(game.Players, Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t})\n\tmsg := \"Player \" + caller.String() + \" joined the game.\"\n\tlogEvent(msg)\n\treturn msg\n}\n\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players to start.\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\tlogEvent(\"Game started with \" + strconv.Itoa(len(game.Players)) + \" players.\")\n\treturn \"Game started.\"\n}\n\nfunc RollDice(roll int) string {\n\tcaller := std.OriginCaller()\n\tif !game.Started {\n\t\treturn \"Game not started yet.\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game already finished. Winner: \" + game.Winner.String()\n\t}\n\n\tcurrPlayer := \u0026game.Players[game.Turn]\n\tif currPlayer.Address != caller {\n\t\treturn \"Not your turn.\"\n\t}\n\n\tpos := currPlayer.Position + roll\n\tif pos \u003e 100 {\n\t\tpos = currPlayer.Position // overshoot doesn't move\n\t}\n\tfinalPos := applySnakesAndLadders(pos)\n\tcurrPlayer.Position = finalPos\n\n\tmsg := caller.String() + \" rolled \" + strconv.Itoa(roll) + \" → \" + strconv.Itoa(finalPos)\n\tif finalPos == 100 {\n\t\tgame.Winner = caller\n\t\tmsg += \" 🎉 WINNER!\"\n\t}\n\tlogEvent(msg)\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn msg\n}\n\nfunc GetGameState() string {\n\tvar states []string\n\tfor _, p := range game.Players {\n\t\tstates = append(states, p.Address.String()+\"@\"+strconv.Itoa(p.Position))\n\t}\n\treturn strings.Join(states, \" | \")\n}\n\nfunc GetLog() []string {\n\treturn game.Logs\n}\n\n// --- Render Function for gno.land UI ---\n\nfunc Render(_ string) string {\n\tr := dynreplacer.New()\n\n\tr.RegisterCallback(\":game-state:\", func() string {\n\t\tvar b strings.Builder\n\t\tb.WriteString(\"## 🎲 Game State\\n\")\n\t\tif !game.Started {\n\t\t\tb.WriteString(\"⏳ Game not started.\\n\")\n\t\t\treturn b.String()\n\t\t}\n\n\t\tfor i, p := range game.Players {\n\t\t\tmarker := \"\"\n\t\t\tif i == game.Turn \u0026\u0026 game.Winner == \"\" {\n\t\t\t\tmarker = \" 👈\"\n\t\t\t}\n\t\t\tb.WriteString(\"- `\" + p.Address.String() + \"`: **\" + strconv.Itoa(p.Position) + \"**\" + marker + \"\\n\")\n\t\t}\n\n\t\tif game.Winner != \"\" {\n\t\t\tb.WriteString(\"\\n🏁 Winner: `\" + game.Winner.String() + \"` 🎉\\n\")\n\t\t}\n\n\t\treturn b.String()\n\t})\n\n\tr.RegisterCallback(\":game-log:\", func() string {\n\t\tvar b strings.Builder\n\t\tb.WriteString(\"## 📜 Game Log\\n\")\n\t\tlogs := game.Logs\n\t\tif len(logs) \u003e 5 {\n\t\t\tlogs = logs[len(logs)-5:] // show last 5\n\t\t}\n\t\tfor _, log := range logs {\n\t\t\tb.WriteString(\"- \" + log + \"\\n\")\n\t\t}\n\t\treturn b.String()\n\t})\n\n\treturn r.ReplaceAll(`\n# 🐍 Snakes and Ladders Game\n\nTry to reach square 100 before your opponents!\n\n:game-state:\n\n:game-log:\n`)\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"4KEzaHojoSzyUK+ONRtzTiSKq/ll11fLE9XqI8MV02XFLHLe6YdlVpQkEq+vO08xdujGFiQKvts+QgzQggs9Cw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742592734"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders2","path":"gno.land/r/meeshell222/snakesandladders2","files":[{"name":"package.gno","body":"package snakesandladders2\n\nimport (\n\t\"gno.land/r/dynreplacer\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// --- Game Types ---\n\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  std.Address\n\tLogs    []string\n}\n\n// --- Global State ---\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// --- Helper Functions ---\n\nfunc findPlayer(addr std.Address) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\nfunc logEvent(msg string) {\n\tgame.Logs = append(game.Logs, msg)\n\tstd.Emit(\"GameLog\", \"msg\", msg)\n}\n\n// --- Game Functions ---\n\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif _, exists := findPlayer(caller); exists {\n\t\treturn \"Already joined.\"\n\t}\n\tgame.Players = append(game.Players, Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t})\n\tmsg := \"Player \" + caller.String() + \" joined the game.\"\n\tlogEvent(msg)\n\treturn msg\n}\n\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players to start.\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\tlogEvent(\"Game started with \" + strconv.Itoa(len(game.Players)) + \" players.\")\n\treturn \"Game started.\"\n}\n\nfunc RollDice(roll int) string {\n\tcaller := std.OriginCaller()\n\tif !game.Started {\n\t\treturn \"Game not started yet.\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game already finished. Winner: \" + game.Winner.String()\n\t}\n\n\tcurrPlayer := \u0026game.Players[game.Turn]\n\tif currPlayer.Address != caller {\n\t\treturn \"Not your turn.\"\n\t}\n\n\tpos := currPlayer.Position + roll\n\tif pos \u003e 100 {\n\t\tpos = currPlayer.Position // overshoot doesn't move\n\t}\n\tfinalPos := applySnakesAndLadders(pos)\n\tcurrPlayer.Position = finalPos\n\n\tmsg := caller.String() + \" rolled \" + strconv.Itoa(roll) + \" → \" + strconv.Itoa(finalPos)\n\tif finalPos == 100 {\n\t\tgame.Winner = caller\n\t\tmsg += \" 🎉 WINNER!\"\n\t}\n\tlogEvent(msg)\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn msg\n}\n\nfunc GetGameState() string {\n\tvar states []string\n\tfor _, p := range game.Players {\n\t\tstates = append(states, p.Address.String()+\"@\"+strconv.Itoa(p.Position))\n\t}\n\treturn strings.Join(states, \" | \")\n}\n\nfunc GetLog() []string {\n\treturn game.Logs\n}\n\n// --- Render Function for gno.land UI ---\n\nfunc Render(_ string) string {\n\tr := dynreplacer.New()\n\n\tr.RegisterCallback(\":game-state:\", func() string {\n\t\tvar b strings.Builder\n\t\tb.WriteString(\"## 🎲 Game State\\n\")\n\t\tif !game.Started {\n\t\t\tb.WriteString(\"⏳ Game not started.\\n\")\n\t\t\treturn b.String()\n\t\t}\n\n\t\tfor i, p := range game.Players {\n\t\t\tmarker := \"\"\n\t\t\tif i == game.Turn \u0026\u0026 game.Winner == \"\" {\n\t\t\t\tmarker = \" 👈\"\n\t\t\t}\n\t\t\tb.WriteString(\"- `\" + p.Address.String() + \"`: **\" + strconv.Itoa(p.Position) + \"**\" + marker + \"\\n\")\n\t\t}\n\n\t\tif game.Winner != \"\" {\n\t\t\tb.WriteString(\"\\n🏁 Winner: `\" + game.Winner.String() + \"` 🎉\\n\")\n\t\t}\n\n\t\treturn b.String()\n\t})\n\n\tr.RegisterCallback(\":game-log:\", func() string {\n\t\tvar b strings.Builder\n\t\tb.WriteString(\"## 📜 Game Log\\n\")\n\t\tlogs := game.Logs\n\t\tif len(logs) \u003e 5 {\n\t\t\tlogs = logs[len(logs)-5:] // show last 5\n\t\t}\n\t\tfor _, log := range logs {\n\t\t\tb.WriteString(\"- \" + log + \"\\n\")\n\t\t}\n\t\treturn b.String()\n\t})\n\n\treturn r.ReplaceAll(`\n# 🐍 Snakes and Ladders Game\n\nTry to reach square 100 before your opponents!\n\n:game-state:\n\n:game-log:\n`)\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"RwaehVD/nCt4a7XgAa2mI/JtR4WRzpE1JwSr9pgnA04zRpUspr7HVXEdjgQc0fhM1zFK14veimD7nYSKvzf2Ag=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742593020"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders2","path":"gno.land/r/meeshell222/snakesandladders2","files":[{"name":"package.gno","body":"package snakesandladders2\n\nimport (\n\t\"gno.land/r/dynreplacer\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// --- Game Types ---\n\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  std.Address\n\tLogs    []string\n}\n\n// --- Global State ---\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// --- Helper Functions ---\n\nfunc findPlayer(addr std.Address) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\nfunc logEvent(msg string) {\n\tgame.Logs = append(game.Logs, msg)\n\tstd.Emit(\"GameLog\", \"msg\", msg)\n}\n\n// --- Game Functions ---\n\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif _, exists := findPlayer(caller); exists {\n\t\treturn \"Already joined.\"\n\t}\n\tgame.Players = append(game.Players, Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t})\n\tmsg := \"Player \" + caller.String() + \" joined the game.\"\n\tlogEvent(msg)\n\treturn msg\n}\n\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players to start.\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\tlogEvent(\"Game started with \" + strconv.Itoa(len(game.Players)) + \" players.\")\n\treturn \"Game started.\"\n}\n\nfunc RollDice(roll int) string {\n\tcaller := std.OriginCaller()\n\tif !game.Started {\n\t\treturn \"Game not started yet.\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game already finished. Winner: \" + game.Winner.String()\n\t}\n\n\tcurrPlayer := \u0026game.Players[game.Turn]\n\tif currPlayer.Address != caller {\n\t\treturn \"Not your turn.\"\n\t}\n\n\tpos := currPlayer.Position + roll\n\tif pos \u003e 100 {\n\t\tpos = currPlayer.Position // overshoot doesn't move\n\t}\n\tfinalPos := applySnakesAndLadders(pos)\n\tcurrPlayer.Position = finalPos\n\n\tmsg := caller.String() + \" rolled \" + strconv.Itoa(roll) + \" → \" + strconv.Itoa(finalPos)\n\tif finalPos == 100 {\n\t\tgame.Winner = caller\n\t\tmsg += \" 🎉 WINNER!\"\n\t}\n\tlogEvent(msg)\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn msg\n}\n\nfunc GetGameState() string {\n\tvar states []string\n\tfor _, p := range game.Players {\n\t\tstates = append(states, p.Address.String()+\"@\"+strconv.Itoa(p.Position))\n\t}\n\treturn strings.Join(states, \" | \")\n}\n\nfunc GetLog() []string {\n\treturn game.Logs\n}\n\n// --- Render Function for gno.land UI ---\n\nfunc Render(_ string) string {\n\tr := dynreplacer.New()\n\n\tr.RegisterCallback(\":game-state:\", func() string {\n\t\tvar b strings.Builder\n\t\tb.WriteString(\"## 🎲 Game State\\n\")\n\t\tif !game.Started {\n\t\t\tb.WriteString(\"⏳ Game not started.\\n\")\n\t\t\treturn b.String()\n\t\t}\n\n\t\tfor i, p := range game.Players {\n\t\t\tmarker := \"\"\n\t\t\tif i == game.Turn \u0026\u0026 game.Winner == \"\" {\n\t\t\t\tmarker = \" 👈\"\n\t\t\t}\n\t\t\tb.WriteString(\"- `\" + p.Address.String() + \"`: **\" + strconv.Itoa(p.Position) + \"**\" + marker + \"\\n\")\n\t\t}\n\n\t\tif game.Winner != \"\" {\n\t\t\tb.WriteString(\"\\n🏁 Winner: `\" + game.Winner.String() + \"` 🎉\\n\")\n\t\t}\n\n\t\treturn b.String()\n\t})\n\n\tr.RegisterCallback(\":game-log:\", func() string {\n\t\tvar b strings.Builder\n\t\tb.WriteString(\"## 📜 Game Log\\n\")\n\t\tlogs := game.Logs\n\t\tif len(logs) \u003e 5 {\n\t\t\tlogs = logs[len(logs)-5:] // show last 5\n\t\t}\n\t\tfor _, log := range logs {\n\t\t\tb.WriteString(\"- \" + log + \"\\n\")\n\t\t}\n\t\treturn b.String()\n\t})\n\n\treturn r.ReplaceAll(`\n# 🐍 Snakes and Ladders Game\n\nTry to reach square 100 before your opponents!\n\n:game-state:\n\n:game-log:\n`)\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"RwaehVD/nCt4a7XgAa2mI/JtR4WRzpE1JwSr9pgnA04zRpUspr7HVXEdjgQc0fhM1zFK14veimD7nYSKvzf2Ag=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742593035"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders2","path":"gno.land/r/meeshell222/snakesandladders2","files":[{"name":"package.gno","body":"package snakesandladders2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// --- Game Types ---\n\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  std.Address\n\tLogs    []string\n}\n\n// --- Global State ---\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// --- Helper Functions ---\n\nfunc findPlayer(addr std.Address) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\nfunc logEvent(msg string) {\n\tgame.Logs = append(game.Logs, msg)\n\tstd.Emit(\"GameLog\", \"msg\", msg)\n}\n\n// --- Game Functions ---\n\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif _, exists := findPlayer(caller); exists {\n\t\treturn \"Already joined.\"\n\t}\n\tgame.Players = append(game.Players, Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t})\n\tmsg := \"Player \" + caller.String() + \" joined the game.\"\n\tlogEvent(msg)\n\treturn msg\n}\n\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players to start.\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\tlogEvent(\"Game started with \" + strconv.Itoa(len(game.Players)) + \" players.\")\n\treturn \"Game started.\"\n}\n\nfunc RollDice(roll int) string {\n\tcaller := std.OriginCaller()\n\tif !game.Started {\n\t\treturn \"Game not started yet.\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game already finished. Winner: \" + game.Winner.String()\n\t}\n\n\tcurrPlayer := \u0026game.Players[game.Turn]\n\tif currPlayer.Address != caller {\n\t\treturn \"Not your turn.\"\n\t}\n\n\tpos := currPlayer.Position + roll\n\tif pos \u003e 100 {\n\t\tpos = currPlayer.Position // overshoot doesn't move\n\t}\n\tfinalPos := applySnakesAndLadders(pos)\n\tcurrPlayer.Position = finalPos\n\n\tmsg := caller.String() + \" rolled \" + strconv.Itoa(roll) + \" → \" + strconv.Itoa(finalPos)\n\tif finalPos == 100 {\n\t\tgame.Winner = caller\n\t\tmsg += \" 🎉 WINNER!\"\n\t}\n\tlogEvent(msg)\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn msg\n}\n\nfunc GetGameState() string {\n\tvar states []string\n\tfor i, p := range game.Players {\n\t\tplayer := p.Address.String() + \" at \" + strconv.Itoa(p.Position)\n\t\tif i == game.Turn \u0026\u0026 game.Winner == \"\" {\n\t\t\tplayer += \" 👈\"\n\t\t}\n\t\tstates = append(states, player)\n\t}\n\treturn strings.Join(states, \"\\n\")\n}\n\nfunc GetLog() string {\n\tlogs := game.Logs\n\tif len(logs) \u003e 5 {\n\t\tlogs = logs[len(logs)-5:] // show last 5\n\t}\n\treturn strings.Join(logs, \"\\n\")\n}\n\n// --- Render Function for gno.land UI ---\n\nfunc Render(_ string) string {\n\tvar b strings.Builder\n\n\tb.WriteString(\"# 🐍 Snakes and Ladders\\n\\n\")\n\n\tif !game.Started {\n\t\tb.WriteString(\"Game not started yet. Use `StartGame()` to begin.\\n\\n\")\n\t} else {\n\t\tb.WriteString(\"## 🎲 Game State\\n\\n\")\n\t\tb.WriteString(GetGameState() + \"\\n\\n\")\n\t}\n\n\tif game.Winner != \"\" {\n\t\tb.WriteString(\"🎉 Winner: `\" + game.Winner.String() + \"`\\n\\n\")\n\t}\n\n\tb.WriteString(\"## 📜 Last Moves\\n\\n\")\n\tb.WriteString(GetLog())\n\n\treturn b.String()\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"14652102","gas_fee":"30526ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Dp7TOSA83+wVDBicnRXRJhcan8JtPHwQPF7TjU2WBxYiht/YetJSYlqgkLBAIdoKG0Rh4n6Umj1C2mSmTVWUCg=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742593171"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders2","func":"StartGame","args":null}],"fee":{"gas_wanted":"241944","gas_fee":"505ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"SNAL1lOvoazCGEaJEQ49K0zsx3kn2bIA73jDvTD1EtZQcaPvq03gKA2B2tjouLGH8ehfBCaKKizPkR/ZLLAJBg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742593251"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders2","func":"JoinGame","args":null}],"fee":{"gas_wanted":"1069969","gas_fee":"2230ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"r/aFGCbA04v4N1nMft/TyTvUmcRYOSV5NxW2jllrL7ouig6omdAdkrGGlalJeFEhjUTF12sfY9uJGIcsQjf5Dw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742593271"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders2","func":"RollDice","args":["5"]}],"fee":{"gas_wanted":"980552","gas_fee":"2043ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"FuyBzzugt3jS7cOOfj+sR6jerpAlgwL28MwZVJiIEoMmxVa9EmZ1Ac81KAa8wUglm8tT2GdtvU+tLdcnI6LmAg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742593301"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18cwpdpsqd8mywj8skpsqsg9tn9hudkkpa6ycpe","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders2","func":"StartGame","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"R5vAnBTc/yLGSSogTUbiEJgSo5J1pdEed/IhivTg1HME1FR0dJ6Ue5jRPYy6eZT+xPQjiczeQme6jo4MYWnrAQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742593740"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders2","func":"StartGame","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"1223010ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"NND6QFnJd9flzRhuIg2Elp/SwwVcOjxMs9Y4QQlGe+gmA1QcWCrR5JQAw1WbCM/kDkF/jcOIU54zZtOr3RtNBA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742593750"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders2","func":"RollDice","args":["0"]}],"fee":{"gas_wanted":"980552","gas_fee":"2043ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Z5V2l3owtsll98yD7RldfJrZJ3lnqfmOUjth5osZMwTID2WzVOm0EVNgdREcEfOpFnFeLQKqEFCzTagitFxlBA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742594167"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g16vauf878a9uwtmm9nsp58whefycrg5asv2lt3d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"7DxNtpiFI9pwlIrQJvmveDuU4Nh7Tnq/Z1JqMLLdrfG6c4LeFiUoO6bOmL8gbuxh568TupAW5q7wgPGXGQBhBA=="}],"memo":""},"metadata":{"timestamp":"1742594378"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18cwpdpsqd8mywj8skpsqsg9tn9hudkkpa6ycpe","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders2","func":"JoinGame","args":null}],"fee":{"gas_wanted":"1118510","gas_fee":"2331ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"DjebKBs75Jhy9EiQevcFSFEmtkl2nH9fsQFX3UuM5TMgZ7+0iI+dgUJ5Um9UjJ+HT2uTp9RI3CCNYJx2JYw9Bw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742594534"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders","func":"StartGame","args":null}],"fee":{"gas_wanted":"232893","gas_fee":"486ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Q8fI+XvgR9rBkBj4tfCPoDts6EmAceW5fy2NBT8Fl4HSGzQ7RcwOnlfJybyFHq6znDO8VTHCNvwSpDPyx+6sCQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742594609"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders","func":"StartGame","args":null}],"fee":{"gas_wanted":"232893","gas_fee":"486ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Q8fI+XvgR9rBkBj4tfCPoDts6EmAceW5fy2NBT8Fl4HSGzQ7RcwOnlfJybyFHq6znDO8VTHCNvwSpDPyx+6sCQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742594679"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders","func":"RollDice","args":["0"]}],"fee":{"gas_wanted":"966394","gas_fee":"2014ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"bNZVlBzcoyrtjm57V0JB/Mw3o0WyX+sUBJeXEGaVck/oYQ20Kv+Xx0cgvjZHda3SWfVIz1c0fQK1e5Q4SVkACQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742594745"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742606976_0","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ECDZWxk+Sbo36B7a33aYxkfci3SFtyNOKd3ulhjHJSIhZbHFKE7k9aNJ5r+qLbFrWgW/h4qbvfQQKUC1M2OmCg=="}],"memo":""},"metadata":{"timestamp":"1742606975"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742606976_1","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"4sqLg5sbvRHA0KxRJif4KGsUKrggXntEyPiO3uKKJNnLVUIECfTxD70mzPQC5snPoJ2kojb9+wHpMJ4jx/ZVCw=="}],"memo":""},"metadata":{"timestamp":"1742606975"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742606976_2","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"4vF4/+C1bAI1UA4uc8BMYXtT7t83AzhB07rNERp3zJXWyZwRquajtGVAdS1v+WzqcjDFjpr74dgOG4LPzrd/Dw=="}],"memo":""},"metadata":{"timestamp":"1742606975"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742606976_3","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"6wXxpjOU9eYA52fcPEU1Mt+eHPlpy5yEigEYZO1eiw79YeMgUaKln1aOe5cU5HuiHoYZkcD7LBcHOS/piO+DBA=="}],"memo":""},"metadata":{"timestamp":"1742606975"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742606976_4","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"XQizafZS6VJKgyUgDOpTND0N1SfrjEDlibjMKm/y2Ob51GdSS7iDqYkxeycvrfcSTa0jDHHzuToOmptrMyiMCg=="}],"memo":""},"metadata":{"timestamp":"1742606975"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742606976_5","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"23ch2Z9SwOQI8cwGtssdub7SZpLpT/Fc2+gHJ+aZkaRpbRKlv+vMjBv2HqS7KsA9Kzph+1XB+AcqsY0SGNS3Ag=="}],"memo":""},"metadata":{"timestamp":"1742606975"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742606976_6","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"AmRi7PdxPLsFW5aXISdS/iQUuUIOsbdsVGmxuVbDCSajigk6XQyvVmjzbX6e5vkY1UBeidnxVtUdSGzZrmwVAA=="}],"memo":""},"metadata":{"timestamp":"1742606975"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742606976_7","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"P9yAYEKTEfIF28oP3U11efZxEFxqVzb9B61G0cA1cDNE6Jl++eznQLALD7MMxkBatn26I3dC4+vzx3LTmjo/AA=="}],"memo":""},"metadata":{"timestamp":"1742606975"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742606976_8","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3tgnXN12VYr74xUey8fr4kH+5cthxPgzUiEwJHMoBZhc69beD+ULVGiNH8JVzL5aQSHLQ34giS3MQNXm0orlDg=="}],"memo":""},"metadata":{"timestamp":"1742606975"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742606976_9","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"MD8iVrUYug42OOl+gu/MnRN2cek+HpDG/UroLgMbrIrjXISWDNnNAFgOrOaaA1CvUplthuErsMhfr0hnCvVRAA=="}],"memo":""},"metadata":{"timestamp":"1742606975"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3i8fcsPacaduban8lnLLfl6an1A7tn9vfebX4llrt0WEZZTqsRSnkM5rRZDGk7lwwyNVD7yNigrcjr51mOTgCQ=="}],"memo":""},"metadata":{"timestamp":"1742641642"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3i8fcsPacaduban8lnLLfl6an1A7tn9vfebX4llrt0WEZZTqsRSnkM5rRZDGk7lwwyNVD7yNigrcjr51mOTgCQ=="}],"memo":""},"metadata":{"timestamp":"1742641667"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3i8fcsPacaduban8lnLLfl6an1A7tn9vfebX4llrt0WEZZTqsRSnkM5rRZDGk7lwwyNVD7yNigrcjr51mOTgCQ=="}],"memo":""},"metadata":{"timestamp":"1742641687"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3i8fcsPacaduban8lnLLfl6an1A7tn9vfebX4llrt0WEZZTqsRSnkM5rRZDGk7lwwyNVD7yNigrcjr51mOTgCQ=="}],"memo":""},"metadata":{"timestamp":"1742641712"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3i8fcsPacaduban8lnLLfl6an1A7tn9vfebX4llrt0WEZZTqsRSnkM5rRZDGk7lwwyNVD7yNigrcjr51mOTgCQ=="}],"memo":""},"metadata":{"timestamp":"1742641737"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3i8fcsPacaduban8lnLLfl6an1A7tn9vfebX4llrt0WEZZTqsRSnkM5rRZDGk7lwwyNVD7yNigrcjr51mOTgCQ=="}],"memo":""},"metadata":{"timestamp":"1742641762"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3i8fcsPacaduban8lnLLfl6an1A7tn9vfebX4llrt0WEZZTqsRSnkM5rRZDGk7lwwyNVD7yNigrcjr51mOTgCQ=="}],"memo":""},"metadata":{"timestamp":"1742641797"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3i8fcsPacaduban8lnLLfl6an1A7tn9vfebX4llrt0WEZZTqsRSnkM5rRZDGk7lwwyNVD7yNigrcjr51mOTgCQ=="}],"memo":""},"metadata":{"timestamp":"1742641823"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3i8fcsPacaduban8lnLLfl6an1A7tn9vfebX4llrt0WEZZTqsRSnkM5rRZDGk7lwwyNVD7yNigrcjr51mOTgCQ=="}],"memo":""},"metadata":{"timestamp":"1742641848"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3i8fcsPacaduban8lnLLfl6an1A7tn9vfebX4llrt0WEZZTqsRSnkM5rRZDGk7lwwyNVD7yNigrcjr51mOTgCQ=="}],"memo":""},"metadata":{"timestamp":"1742641883"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3i8fcsPacaduban8lnLLfl6an1A7tn9vfebX4llrt0WEZZTqsRSnkM5rRZDGk7lwwyNVD7yNigrcjr51mOTgCQ=="}],"memo":""},"metadata":{"timestamp":"1742641923"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3i8fcsPacaduban8lnLLfl6an1A7tn9vfebX4llrt0WEZZTqsRSnkM5rRZDGk7lwwyNVD7yNigrcjr51mOTgCQ=="}],"memo":""},"metadata":{"timestamp":"1742641938"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3i8fcsPacaduban8lnLLfl6an1A7tn9vfebX4llrt0WEZZTqsRSnkM5rRZDGk7lwwyNVD7yNigrcjr51mOTgCQ=="}],"memo":""},"metadata":{"timestamp":"1742641958"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3i8fcsPacaduban8lnLLfl6an1A7tn9vfebX4llrt0WEZZTqsRSnkM5rRZDGk7lwwyNVD7yNigrcjr51mOTgCQ=="}],"memo":""},"metadata":{"timestamp":"1742642013"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3i8fcsPacaduban8lnLLfl6an1A7tn9vfebX4llrt0WEZZTqsRSnkM5rRZDGk7lwwyNVD7yNigrcjr51mOTgCQ=="}],"memo":""},"metadata":{"timestamp":"1742642038"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3i8fcsPacaduban8lnLLfl6an1A7tn9vfebX4llrt0WEZZTqsRSnkM5rRZDGk7lwwyNVD7yNigrcjr51mOTgCQ=="}],"memo":""},"metadata":{"timestamp":"1742642059"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3i8fcsPacaduban8lnLLfl6an1A7tn9vfebX4llrt0WEZZTqsRSnkM5rRZDGk7lwwyNVD7yNigrcjr51mOTgCQ=="}],"memo":""},"metadata":{"timestamp":"1742642084"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3i8fcsPacaduban8lnLLfl6an1A7tn9vfebX4llrt0WEZZTqsRSnkM5rRZDGk7lwwyNVD7yNigrcjr51mOTgCQ=="}],"memo":""},"metadata":{"timestamp":"1742642109"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3i8fcsPacaduban8lnLLfl6an1A7tn9vfebX4llrt0WEZZTqsRSnkM5rRZDGk7lwwyNVD7yNigrcjr51mOTgCQ=="}],"memo":""},"metadata":{"timestamp":"1742642144"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hm7ad7epn5mt9lkn65htly3fw68ezuc2fmavy2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3i8fcsPacaduban8lnLLfl6an1A7tn9vfebX4llrt0WEZZTqsRSnkM5rRZDGk7lwwyNVD7yNigrcjr51mOTgCQ=="}],"memo":""},"metadata":{"timestamp":"1742642179"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18t5xm93slgtgllwd3wdftwyylp8mg8lxy782r8","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"rhYrWeydFCnMYHsaA2/Cwx5yLajwvU4TuILDlQHl4J9QDQmTVmGd0J9szGOOvfMLqVEuYJej0OrAG9lGRCeJBA=="}],"memo":""},"metadata":{"timestamp":"1742651337"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18t5xm93slgtgllwd3wdftwyylp8mg8lxy782r8","send":"","pkg_path":"gno.land/r/demo/userbook","func":"SignUp","args":null}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ROYEzZahze8HDP6ozUyd6w/zn8/dNI1dnpO3q+kdECg5Y1xqN8cJ/FdsAS9s1bKsfyUKcWXBXIALAJcsz99VDw=="}],"memo":""},"metadata":{"timestamp":"1742652120"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18t5xm93slgtgllwd3wdftwyylp8mg8lxy782r8","send":"","pkg_path":"gno.land/r/demo/userbook","func":"SignUp","args":null}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ROYEzZahze8HDP6ozUyd6w/zn8/dNI1dnpO3q+kdECg5Y1xqN8cJ/FdsAS9s1bKsfyUKcWXBXIALAJcsz99VDw=="}],"memo":""},"metadata":{"timestamp":"1742652281"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1wlh0jket70jh5uy0773altuc9xv4jj9jpksash","amount":"5000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"YvnS2YmI2ctQ28zw2le6pVINlTyuce+ezlxQ9rvPJqnniLxGestqZhjzPmnChyqP1PjN2McXnImIBSSVGXoUCA=="}],"memo":""},"metadata":{"timestamp":"1742682831"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1wlh0jket70jh5uy0773altuc9xv4jj9jpksash","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["itsHabib"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"PYHXfYFq9Mjk5NTIrueT3C4SjzyP/nvwDW80kq0qg0LRPI+Q0gWxSdye6+LEvalcMCvN5IvjR8Qz4IVFBpJGBA=="}],"memo":""},"metadata":{"timestamp":"1742683308"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1wlh0jket70jh5uy0773altuc9xv4jj9jpksash","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["itshabib"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"FE5ot54/1pOQ6ovYAppSq0kgIgCB8GO213eQKQYgTYzTVW7sVZayL6bqY8hWmbR8J+zWaUbMbm6QTCH4hjvZDA=="}],"memo":""},"metadata":{"timestamp":"1742683393"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1wlh0jket70jh5uy0773altuc9xv4jj9jpksash","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["itshabib111"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"DT2eoYzZb0G8wrCQ38mDe9l1pxzviZ07SW0g9tjsR+jjNFUtjCjzVOXYl6rzhlX8a8+ithwFsm5/LPGcjDLaBA=="}],"memo":""},"metadata":{"timestamp":"1742683765"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1wlh0jket70jh5uy0773altuc9xv4jj9jpksash","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"/GIAR+blJc0Wm+tSsjj480KIqiTa1Z0H5YXyl0bNgEhDVqnL0d0mmQ0qAhDTFJIboLG8WBaSNislIkFRNgCUDw=="}],"memo":""},"metadata":{"timestamp":"1742683956"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1wlh0jket70jh5uy0773altuc9xv4jj9jpksash","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["itshabib111"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"DT2eoYzZb0G8wrCQ38mDe9l1pxzviZ07SW0g9tjsR+jjNFUtjCjzVOXYl6rzhlX8a8+ithwFsm5/LPGcjDLaBA=="}],"memo":""},"metadata":{"timestamp":"1742684026"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1wlh0jket70jh5uy0773altuc9xv4jj9jpksash","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["itshabib111"]}],"fee":{"gas_wanted":"8000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"rL+4mW2n1TQPyc3+3CLx6k9mYljUeHEo5E9BC/j7aFSxuJAJT/JxyaIzpupm6DY+UmbN5MbyiK1B5beOgHQMCQ=="}],"memo":""},"metadata":{"timestamp":"1742684126"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1wlh0jket70jh5uy0773altuc9xv4jj9jpksash","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["itshabib111"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"hBfZdonLi6DWYTPuw+0gG3AyaOUeSwiIETF5wF533cV1DZNjfmGrR5OxRFnGjijMrfYtbS4gggBnziZqaEqlDw=="}],"memo":""},"metadata":{"timestamp":"1742684167"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1wlh0jket70jh5uy0773altuc9xv4jj9jpksash","send":"1100000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["itshabib111"]}],"fee":{"gas_wanted":"11000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"o4eXnmXvx2fDBchnFEtuVrGLpAHzi7swMfhGOFMLdh+QYjqcBfLN05cU0KnT8uc5OGZgkuSG69INKjJ3F1HSCA=="}],"memo":""},"metadata":{"timestamp":"1742684252"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1wlh0jket70jh5uy0773altuc9xv4jj9jpksash","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["itshabib111"]}],"fee":{"gas_wanted":"11000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"SqGfTa8ZCnEib2Bo9w6AFWX1wVp8TP0kzpI9DFSCyN/w7wbMvvfEEt/aI4BoB6yCsvT0Ma/zDtnNfif82FKKDg=="}],"memo":""},"metadata":{"timestamp":"1742684307"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1wlh0jket70jh5uy0773altuc9xv4jj9jpksash","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["itshabib111"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"1VtkF5ajmzOyY+pd6y67LG/5aMmEJxk3IIYqDgXRkvCDZZkX+99cghg9ZRdMqtmua5/RoVn+mlksrNLr1wWkBg=="}],"memo":""},"metadata":{"timestamp":"1742684387"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742693418_0","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"LMbqcQW7a4m+artPrMvSNy3FyZe7vWA6ifWvEJgwOma7qnVhZ+lmlU6j1o0GdUW270kgWLrMJ7q88D8zhkuUBA=="}],"memo":""},"metadata":{"timestamp":"1742693414"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742693418_1","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"AmJxDVk+DdMEN4F1hXs6zdCXAFN0AeZnFfFycSMbRz7p0La9bw0rQvrNUiq0sFseuUM8sbfblLQmiCk3GV4DAA=="}],"memo":""},"metadata":{"timestamp":"1742693414"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742693418_2","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lwv8G0J0Gstx0gSO6qcEabEUdqHS7m3kXMQ630GtMnJn6kPV7IC3UWbPSnaqueFkf/e1PQNJzrI73wy8I+OiDg=="}],"memo":""},"metadata":{"timestamp":"1742693414"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742693418_3","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"BvkDg9r49v1newbjTdMGGa8Sr2ieDzIg31RtfVbUfWuXI+/TEX/BIHt3gSymid5onXwqYwaDCbWl26lPdsEuAg=="}],"memo":""},"metadata":{"timestamp":"1742693414"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742693418_4","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"2xuxTgnyvIMqXN7/8uwDrFG96nKOHtJ6TnDyHY9STBwOf/ml+RykWNkZd4KeGYv6s14EZ8w5s9wnF5bLoSlnDw=="}],"memo":""},"metadata":{"timestamp":"1742693414"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742693418_5","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"g/8JPGIw2CyHM1mvWKcn1AW+Pb/GFeqBnWBZhfbfHxTaYSq/SAI7IV7CI6M2Kd5h8A49X8ZdHRZ41jSGO1ziAQ=="}],"memo":""},"metadata":{"timestamp":"1742693414"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742693418_6","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"F2pXEZuTw8EdLTw3oNgxjnHu25UQdWRC7AJFl23ngj02qWpxKpRKW1hKEQrl6rThUXX847P17pHwgiufuySQDA=="}],"memo":""},"metadata":{"timestamp":"1742693414"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742693418_7","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"b1R+jH3qcyvBP86eTJESOIRosuq2ahO8LNclsZJAKnKRL58fGeTAvi6Il0KoWU1wVgAzfhKqQYnxUuLyfEgXDA=="}],"memo":""},"metadata":{"timestamp":"1742693414"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742693418_8","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"A8GZGT8RIbAusGSYICBF16TL4M+UyThTke2Y0sgKz8yd90anhPFpWvMzi7iJ6aFr+kPDec23rEurWMrjskTmCQ=="}],"memo":""},"metadata":{"timestamp":"1742693414"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742693418_9","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"423154","gas_fee":"424ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"9nm5rS+Iq0Tm0dVqNkGKYKDg8TbiHFb9fl04y0D81ibuTroyTSGdA4WiiHuGkBmC30qg9tE3ptA7nndiWrxkAA=="}],"memo":""},"metadata":{"timestamp":"1742693414"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1krhqzttr824dm3zus8fvy79sefxe78k95uwcqa","to_address":"g1hysm2qek2l3s6usngrs7vzzcwfe4z6ydlayg5k","amount":"1000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"eCKyHntgQ1l79kT1cAm8R3IvIP61H2uvtQ+S+8fz+a+BztUt4m4kY53Z42ZjQvTuZmktzQPbo9hAxKts2pRhDg=="}],"memo":""},"metadata":{"timestamp":"1742701668"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18t5xm93slgtgllwd3wdftwyylp8mg8lxy782r8","send":"","pkg_path":"gno.land/r/demo/userbook","func":"SignUp","args":null}],"fee":{"gas_wanted":"50000","gas_fee":"1000012ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"bRlNcMfQ1XsWcubj4mFq7Ytabk5AfsuB97bdKztsyS9VkkxpzsFNgi/QezEmK3IALPDkW5zwYeyfW9h2UGDOBw=="}],"memo":""},"metadata":{"timestamp":"1742716262"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1mpkp5lm8lwpm0pym4388836d009zfe4maxlqsq","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"p4MQoXQWB7rZN0mmeahMlDpw2VRoD3pZdV6Uarb1QhRIVTbysTda6GROf4hn3dkk+FdoC6iBigt37JBS1iCyCQ=="}],"memo":""},"metadata":{"timestamp":"1742718642"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g150gdvn780ws7a3s9qpdvv7h4d9hq6vh672ely0","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"QdSHZ4u3jqdlBTtHSIES74qwyF/OYdZMIJskX4jNg8/2F6U6hTck0hY2SSV+dPKWOn2QhbCiKiFd5Cg2deAbDA=="}],"memo":""},"metadata":{"timestamp":"1742728541"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15nw3tn7623tr48j0awzhg2757lf5yf4mxf9htg","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ZSin2HErjB1d/O2Pj3TDnShyEt69Wgl/KOLIc8mHV8ldZACznvwOgWmKiKfhbOt80k+yAm66NrEOCj670UYEAw=="}],"memo":""},"metadata":{"timestamp":"1742733777"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15nw3tn7623tr48j0awzhg2757lf5yf4mxf9htg","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tFzNI/BjesC2WIKe9rXlmtZm/Nkg5Eg/+V9Jt0SymTXZsyy7nVfjg4bUmnGxHXuoD9Gmqb7yB9abi2326z00Cg=="}],"memo":""},"metadata":{"timestamp":"1742733842"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15nw3tn7623tr48j0awzhg2757lf5yf4mxf9htg","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tFzNI/BjesC2WIKe9rXlmtZm/Nkg5Eg/+V9Jt0SymTXZsyy7nVfjg4bUmnGxHXuoD9Gmqb7yB9abi2326z00Cg=="}],"memo":""},"metadata":{"timestamp":"1742733988"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders3","path":"gno.land/r/meeshell222/snakesandladders3","files":[{"name":"package.gno","body":"package snakesandladders3\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// --- Game Types ---\n\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  std.Address\n\tLogs    []string\n}\n\n// --- Global State ---\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// --- Helper Functions ---\n\nfunc findPlayer(addr std.Address) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\nfunc logEvent(msg string) {\n\tgame.Logs = append(game.Logs, msg)\n\tstd.Emit(\"GameLog\", \"msg\", msg)\n}\n\n// --- Game Functions ---\n\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif _, exists := findPlayer(caller); exists {\n\t\treturn \"Already joined.\"\n\t}\n\tgame.Players = append(game.Players, Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t})\n\tmsg := \"Player \" + caller.String() + \" joined the game.\"\n\tlogEvent(msg)\n\treturn msg\n}\n\nr.RegisterCallback(\":players-count:\", func() string {\n\treturn \"👥 Players joined: \" + strconv.Itoa(len(game.Players))\n})\n\n\nfunc StartGame() string {\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Need at least 2 players to start.\"\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\tlogEvent(\"Game started with \" + strconv.Itoa(len(game.Players)) + \" players.\")\n\treturn \"Game started.\"\n}\n\nfunc RollDice(roll int) string {\n\tcaller := std.OriginCaller()\n\tif !game.Started {\n\t\treturn \"Game not started yet.\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game already finished. Winner: \" + game.Winner.String()\n\t}\n\n\tcurrPlayer := \u0026game.Players[game.Turn]\n\tif currPlayer.Address != caller {\n\t\treturn \"Not your turn.\"\n\t}\n\n\tpos := currPlayer.Position + roll\n\tif pos \u003e 100 {\n\t\tpos = currPlayer.Position // overshoot doesn't move\n\t}\n\tfinalPos := applySnakesAndLadders(pos)\n\tcurrPlayer.Position = finalPos\n\n\tmsg := caller.String() + \" rolled \" + strconv.Itoa(roll) + \" → \" + strconv.Itoa(finalPos)\n\tif finalPos == 100 {\n\t\tgame.Winner = caller\n\t\tmsg += \" 🎉 WINNER!\"\n\t}\n\tlogEvent(msg)\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn msg\n}\n\nfunc GetGameState() string {\n\tvar states []string\n\tfor i, p := range game.Players {\n\t\tplayer := p.Address.String() + \" at \" + strconv.Itoa(p.Position)\n\t\tif i == game.Turn \u0026\u0026 game.Winner == \"\" {\n\t\t\tplayer += \" 👈\"\n\t\t}\n\t\tstates = append(states, player)\n\t}\n\treturn strings.Join(states, \"\\n\")\n}\n\nfunc GetLog() string {\n\tlogs := game.Logs\n\tif len(logs) \u003e 5 {\n\t\tlogs = logs[len(logs)-5:] // show last 5\n\t}\n\treturn strings.Join(logs, \"\\n\")\n}\n\n// --- Render Function for gno.land UI ---\n\nfunc Render(_ string) string {\n\tvar b strings.Builder\n\n\tb.WriteString(\"# 🐍 Snakes and Ladders\\n\\n\")\n\n\tif !game.Started {\n\t\tb.WriteString(\"Game not started yet. Use `StartGame()` to begin.\\n\\n\")\n\t} else {\n\t\tb.WriteString(\"## 🎲 Game State\\n\\n\")\n\t\tb.WriteString(GetGameState() + \"\\n\\n\")\n\t}\n\n\tif game.Winner != \"\" {\n\t\tb.WriteString(\"🎉 Winner: `\" + game.Winner.String() + \"`\\n\\n\")\n\t}\n\n\tb.WriteString(\"## 📜 Last Moves\\n\\n\")\n\tb.WriteString(GetLog())\n\n\treturn b.String()\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"HDGPxz4pBRTc+tCHwGQqjekKk/3L/Oc05MSWEQUz73Nvzi1K6Bb0IFxff0b0wrryUWEZyE8HRooEyEh4CJOiBw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742735820"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders3","path":"gno.land/r/meeshell222/snakesandladders3","files":[{"name":"package.gno","body":"package snakesandladders3\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// --- Game Types ---\n\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  std.Address\n\tLogs    []string\n}\n\n// --- Global State ---\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// --- Helper Functions ---\n\nfunc findPlayer(addr std.Address) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\nfunc logEvent(msg string) {\n\tgame.Logs = append(game.Logs, msg)\n\tstd.Emit(\"GameLog\", \"msg\", msg)\n}\n\n// --- Game Functions ---\n\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif _, exists := findPlayer(caller); exists {\n\t\treturn \"Already joined.\"\n\t}\n\tgame.Players = append(game.Players, Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t})\n\tmsg := \"Player \" + caller.String() + \" joined the game.\"\n\tlogEvent(msg)\n\treturn msg\n}\n\n// StartGame sets up the game with exactly 2 players.\nfunc StartGame(opponent std.Address) string {\n\tcaller := std.OriginCaller()\n\n\t// Ensure the game hasn't started yet\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\t// Ensure caller and opponent are two distinct addresses\n\tif caller == opponent {\n\t\treturn \"Cannot play against yourself.\"\n\t}\n\n\t// Reset game state\n\tgame = Game{\n\t\tPlayers: []Player{\n\t\t\t{Address: caller, Position: 0},\n\t\t\t{Address: opponent, Position: 0},\n\t\t},\n\t\tTurn:    0,\n\t\tStarted: true,\n\t\tLogs:    []string{},\n\t}\n\n\tlogEvent(\"Game started between \" + caller.String() + \" and \" + opponent.String())\n\treturn \"Game started.\"\n}\n\nfunc RollDice(roll int) string {\n\tcaller := std.OriginCaller()\n\tif !game.Started {\n\t\treturn \"Game not started yet.\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game already finished. Winner: \" + game.Winner.String()\n\t}\n\n\tcurrPlayer := \u0026game.Players[game.Turn]\n\tif currPlayer.Address != caller {\n\t\treturn \"Not your turn.\"\n\t}\n\n\tpos := currPlayer.Position + roll\n\tif pos \u003e 100 {\n\t\tpos = currPlayer.Position // overshoot doesn't move\n\t}\n\tfinalPos := applySnakesAndLadders(pos)\n\tcurrPlayer.Position = finalPos\n\n\tmsg := caller.String() + \" rolled \" + strconv.Itoa(roll) + \" → \" + strconv.Itoa(finalPos)\n\tif finalPos == 100 {\n\t\tgame.Winner = caller\n\t\tmsg += \" 🎉 WINNER!\"\n\t}\n\tlogEvent(msg)\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn msg\n}\n\nfunc GetGameState() string {\n\tvar states []string\n\tfor i, p := range game.Players {\n\t\tplayer := p.Address.String() + \" at \" + strconv.Itoa(p.Position)\n\t\tif i == game.Turn \u0026\u0026 game.Winner == \"\" {\n\t\t\tplayer += \" 👈\"\n\t\t}\n\t\tstates = append(states, player)\n\t}\n\treturn strings.Join(states, \"\\n\")\n}\n\nfunc GetLog() string {\n\tlogs := game.Logs\n\tif len(logs) \u003e 5 {\n\t\tlogs = logs[len(logs)-5:] // show last 5\n\t}\n\treturn strings.Join(logs, \"\\n\")\n}\n\n// --- Render Function for gno.land UI ---\n\nfunc Render(_ string) string {\n\tvar b strings.Builder\n\n\tb.WriteString(\"# 🐍 Snakes and Ladders\\n\\n\")\n\n\tif !game.Started {\n\t\tb.WriteString(\"Game not started yet.\\n\")\n\t\tb.WriteString(\"Use `StartGame(g1...)` with two unique players.\\n\\n\")\n\t} else {\n\t\tb.WriteString(\"## 🎲 Game State\\n\\n\")\n\t\tb.WriteString(GetGameState() + \"\\n\\n\")\n\t}\n\n\tif game.Winner != \"\" {\n\t\tb.WriteString(\"🎉 Winner: `\" + game.Winner.String() + \"`\\n\\n\")\n\t}\n\n\tb.WriteString(\"## 📜 Last Moves\\n\\n\")\n\tb.WriteString(GetLog())\n\n\treturn b.String()\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"14663936","gas_fee":"30550ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"xXvQx+VDxulRNLoIhXgSy6/kh5/irilCDbylrO8MmY9vIKKaeuaHd0odyUto45JdvYvxUllxtIzFvOc+8yNvAg=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742736242"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders3","func":"StartGame","args":["g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\n"]}],"fee":{"gas_wanted":"1190802","gas_fee":"2481ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"HebRlfJz8S77+raTBiBXz2pCXVnQZIyrZUC8pqG9Nj8PBoJrBzdMn8UfVsPMuOnlwBt/SKdo1r9G22OKvQ+7Cw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742736353"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders2","func":"RollDice","args":["0"]}],"fee":{"gas_wanted":"980590","gas_fee":"2043ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"m97mVGNetF6ubS8jWf4alqdlZxgqI16DBX4t3XTLqRwth+IWooDYKNQQ+zXluYH7OIGZnoUqKt/fMj6NJ9DcCQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742736393"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders4","path":"gno.land/r/meeshell222/snakesandladders4","files":[{"name":"package.gno","body":"package snakesandladders4\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// --- Game Types ---\n\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  std.Address\n\tLogs    []string\n}\n\n// --- Global State ---\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// --- Helper Functions ---\n\nfunc findPlayer(addr std.Address) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\nfunc logEvent(msg string) {\n\tgame.Logs = append(game.Logs, msg)\n\tstd.Emit(\"GameLog\", \"msg\", msg)\n}\n\n// --- Game Functions ---\n\nfunc StartGame(opponent std.Address) string {\n\tcaller := std.OriginCaller()\n\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\n\t// Prevent duplicate entries\n\tif _, exists := findPlayer(caller); !exists {\n\t\tgame.Players = append(game.Players, Player{Address: caller, Position: 0})\n\t}\n\tif _, exists := findPlayer(opponent); !exists {\n\t\tgame.Players = append(game.Players, Player{Address: opponent, Position: 0})\n\t}\n\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Two players are required to start the game.\"\n\t}\n\n\tgame.Started = true\n\tgame.Turn = 0\n\tlogEvent(\"Game started between \" + game.Players[0].Address.String() + \" and \" + game.Players[1].Address.String())\n\treturn \"Game started.\"\n}\n\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif _, exists := findPlayer(caller); exists {\n\t\treturn \"Already joined.\"\n\t}\n\tgame.Players = append(game.Players, Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t})\n\tmsg := \"Player \" + caller.String() + \" joined the game.\"\n\tlogEvent(msg)\n\treturn msg\n}\n\n// StartGame sets up the game with exactly 2 players.\nfunc StartGame(opponent std.Address) string {\n\tcaller := std.OriginCaller()\n\n\t// Ensure the game hasn't started yet\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\t// Ensure caller and opponent are two distinct addresses\n\tif caller == opponent {\n\t\treturn \"Cannot play against yourself.\"\n\t}\n\n\t// Reset game state\n\tgame = Game{\n\t\tPlayers: []Player{\n\t\t\t{Address: caller, Position: 0},\n\t\t\t{Address: opponent, Position: 0},\n\t\t},\n\t\tTurn:    0,\n\t\tStarted: true,\n\t\tLogs:    []string{},\n\t}\n\n\tlogEvent(\"Game started between \" + caller.String() + \" and \" + opponent.String())\n\treturn \"Game started.\"\n}\n\nfunc RollDice(roll int) string {\n\tcaller := std.OriginCaller()\n\tif !game.Started {\n\t\treturn \"Game not started yet.\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game already finished. Winner: \" + game.Winner.String()\n\t}\n\n\tcurrPlayer := \u0026game.Players[game.Turn]\n\tif currPlayer.Address != caller {\n\t\treturn \"Not your turn.\"\n\t}\n\n\tpos := currPlayer.Position + roll\n\tif pos \u003e 100 {\n\t\tpos = currPlayer.Position // overshoot doesn't move\n\t}\n\tfinalPos := applySnakesAndLadders(pos)\n\tcurrPlayer.Position = finalPos\n\n\tmsg := caller.String() + \" rolled \" + strconv.Itoa(roll) + \" → \" + strconv.Itoa(finalPos)\n\tif finalPos == 100 {\n\t\tgame.Winner = caller\n\t\tmsg += \" 🎉 WINNER!\"\n\t}\n\tlogEvent(msg)\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn msg\n}\n\nfunc GetGameState() string {\n\tvar states []string\n\tfor i, p := range game.Players {\n\t\tplayer := p.Address.String() + \" at \" + strconv.Itoa(p.Position)\n\t\tif i == game.Turn \u0026\u0026 game.Winner == \"\" {\n\t\t\tplayer += \" 👈\"\n\t\t}\n\t\tstates = append(states, player)\n\t}\n\treturn strings.Join(states, \"\\n\")\n}\n\nfunc GetLog() string {\n\tlogs := game.Logs\n\tif len(logs) \u003e 5 {\n\t\tlogs = logs[len(logs)-5:] // show last 5\n\t}\n\treturn strings.Join(logs, \"\\n\")\n}\n\n// --- Render Function for gno.land UI ---\n\nfunc Render(_ string) string {\n\tvar b strings.Builder\n\n\tb.WriteString(\"# 🐍 Snakes \u0026 Ladders\\n\\n\")\n\n\t// Game status\n\tif !game.Started {\n\t\tb.WriteString(\"**Game not started yet.**\\n\")\n\t\tb.WriteString(\"Call `StartGame(opponentAddress)` after both players have joined.\\n\\n\")\n\t} else if game.Winner != \"\" {\n\t\tb.WriteString(\"🏁 **Winner:** `\" + game.Winner.String() + \"` 🎉\\n\\n\")\n\t} else {\n\t\tcurr := game.Players[game.Turn].Address.String()\n\t\tb.WriteString(\"🎯 **Current turn:** `\" + curr + \"`\\n\\n\")\n\t}\n\n\t// Player states\n\tb.WriteString(\"## 👥 Players\\n\")\n\tfor i, p := range game.Players {\n\t\tpos := strconv.Itoa(p.Position)\n\t\tturnMarker := \"\"\n\t\tif i == game.Turn \u0026\u0026 game.Winner == \"\" {\n\t\t\tturnMarker = \" 👈\"\n\t\t}\n\t\tb.WriteString(\"- `\" + p.Address.String() + \"` at **\" + pos + \"**\" + turnMarker + \"\\n\")\n\t}\n\tb.WriteString(\"\\n\")\n\n\t// Basic grid rendering (top-down 10x10)\n\tb.WriteString(\"## 🎲 Game Board (100 → 1)\\n\\n\")\n\tfor row := 9; row \u003e= 0; row-- {\n\t\tfor col := 0; col \u003c 10; col++ {\n\t\t\tnum := row*10 + col + 1\n\t\t\tif row%2 == 1 {\n\t\t\t\tnum = row*10 + (9 - col) + 1 // serpentine pattern\n\t\t\t}\n\n\t\t\t// Show player(s) on tile\n\t\t\tmark := \"⬜\"\n\t\t\tfor _, p := range game.Players {\n\t\t\t\tif p.Position == num {\n\t\t\t\t\tmark = \"🎯\"\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Show snake or ladder\n\t\t\tif _, ok := snakes[num]; ok {\n\t\t\t\tmark = \"🐍\"\n\t\t\t} else if _, ok := ladders[num]; ok {\n\t\t\t\tmark = \"🪜\"\n\t\t\t}\n\n\t\t\tb.WriteString(mark + \" \")\n\t\t}\n\t\tb.WriteString(\"\\n\")\n\t}\n\tb.WriteString(\"\\n\")\n\n\t// Logs\n\tb.WriteString(\"## 📜 Last Moves\\n\")\n\tlogs := game.Logs\n\tif len(logs) \u003e 5 {\n\t\tlogs = logs[len(logs)-5:]\n\t}\n\tfor _, log := range logs {\n\t\tb.WriteString(\"- \" + log + \"\\n\")\n\t}\n\n\treturn b.String()\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ohzzCe1rRVX1xjwDCO7ZpG+BXsvhQOmT2J32wc7vIsMgf3nBgaSM1oVb/8gzJ28t0wbx22lj/wJpZwg/19QfBw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742736754"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders4","path":"gno.land/r/meeshell222/snakesandladders4","files":[{"name":"package.gno","body":"package snakesandladders4\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// --- Game Types ---\n\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  std.Address\n\tLogs    []string\n}\n\n// --- Global State ---\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// --- Helper Functions ---\n\nfunc findPlayer(addr std.Address) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\nfunc logEvent(msg string) {\n\tgame.Logs = append(game.Logs, msg)\n\tstd.Emit(\"GameLog\", \"msg\", msg)\n}\n\n// --- Game Functions ---\n\nfunc StartGame(opponent std.Address) string {\n\tcaller := std.OriginCaller()\n\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\n  func StartGame(opponent std.Address) string {\n\tcaller := std.OriginCaller()\n\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\n\t// Prevent duplicate entries\n\tif _, exists := findPlayer(caller); !exists {\n\t\tgame.Players = append(game.Players, Player{Address: caller, Position: 0})\n\t}\n\tif _, exists := findPlayer(opponent); !exists {\n\t\tgame.Players = append(game.Players, Player{Address: opponent, Position: 0})\n\t}\n\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Two players are required to start the game.\"\n\t}\n\n\tgame.Started = true\n\tgame.Turn = 0\n\tlogEvent(\"Game started between \" + game.Players[0].Address.String() + \" and \" + game.Players[1].Address.String())\n\treturn \"Game started.\"\n}\n\n\n\t// Prevent duplicate entries\n\tif _, exists := findPlayer(caller); !exists {\n\t\tgame.Players = append(game.Players, Player{Address: caller, Position: 0})\n\t}\n\tif _, exists := findPlayer(opponent); !exists {\n\t\tgame.Players = append(game.Players, Player{Address: opponent, Position: 0})\n\t}\n\n\tif len(game.Players) \u003c 2 {\n\t\treturn \"Two players are required to start the game.\"\n\t}\n\n\tgame.Started = true\n\tgame.Turn = 0\n\tlogEvent(\"Game started between \" + game.Players[0].Address.String() + \" and \" + game.Players[1].Address.String())\n\treturn \"Game started.\"\n}\n\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif _, exists := findPlayer(caller); exists {\n\t\treturn \"Already joined.\"\n\t}\n\tgame.Players = append(game.Players, Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t})\n\tmsg := \"Player \" + caller.String() + \" joined the game.\"\n\tlogEvent(msg)\n\treturn msg\n}\n\n// StartGame sets up the game with exactly 2 players.\nfunc StartGame(opponent std.Address) string {\n\tcaller := std.OriginCaller()\n\n\t// Ensure the game hasn't started yet\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\t// Ensure caller and opponent are two distinct addresses\n\tif caller == opponent {\n\t\treturn \"Cannot play against yourself.\"\n\t}\n\n\t// Reset game state\n\tgame = Game{\n\t\tPlayers: []Player{\n\t\t\t{Address: caller, Position: 0},\n\t\t\t{Address: opponent, Position: 0},\n\t\t},\n\t\tTurn:    0,\n\t\tStarted: true,\n\t\tLogs:    []string{},\n\t}\n\n\tlogEvent(\"Game started between \" + caller.String() + \" and \" + opponent.String())\n\treturn \"Game started.\"\n}\n\nfunc RollDice(roll int) string {\n\tcaller := std.OriginCaller()\n\tif !game.Started {\n\t\treturn \"Game not started yet.\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game already finished. Winner: \" + game.Winner.String()\n\t}\n\n\tcurrPlayer := \u0026game.Players[game.Turn]\n\tif currPlayer.Address != caller {\n\t\treturn \"Not your turn.\"\n\t}\n\n\tpos := currPlayer.Position + roll\n\tif pos \u003e 100 {\n\t\tpos = currPlayer.Position // overshoot doesn't move\n\t}\n\tfinalPos := applySnakesAndLadders(pos)\n\tcurrPlayer.Position = finalPos\n\n\tmsg := caller.String() + \" rolled \" + strconv.Itoa(roll) + \" → \" + strconv.Itoa(finalPos)\n\tif finalPos == 100 {\n\t\tgame.Winner = caller\n\t\tmsg += \" 🎉 WINNER!\"\n\t}\n\tlogEvent(msg)\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn msg\n}\n\nfunc GetGameState() string {\n\tvar states []string\n\tfor i, p := range game.Players {\n\t\tplayer := p.Address.String() + \" at \" + strconv.Itoa(p.Position)\n\t\tif i == game.Turn \u0026\u0026 game.Winner == \"\" {\n\t\t\tplayer += \" 👈\"\n\t\t}\n\t\tstates = append(states, player)\n\t}\n\treturn strings.Join(states, \"\\n\")\n}\n\nfunc GetLog() string {\n\tlogs := game.Logs\n\tif len(logs) \u003e 5 {\n\t\tlogs = logs[len(logs)-5:] // show last 5\n\t}\n\treturn strings.Join(logs, \"\\n\")\n}\n\n// --- Render Function for gno.land UI ---\n\nfunc Render(_ string) string {\n\tvar b strings.Builder\n\n\tb.WriteString(\"# 🐍 Snakes and Ladders\\n\\n\")\n\n\tif !game.Started {\n\t\tb.WriteString(\"🎮 *Game not started.*\\n\\n\")\n\t\tb.WriteString(\"Use `StartGame(\\\"g1...\\\")` to begin — you can even play against yourself!\\n\\n\")\n\t\tif len(game.Players) \u003e 0 {\n\t\t\tb.WriteString(\"### Joined Players:\\n\")\n\t\t\tfor _, p := range game.Players {\n\t\t\t\tb.WriteString(\"- `\" + p.Address.String() + \"`\\n\")\n\t\t\t}\n\t\t\tb.WriteString(\"\\n\")\n\t\t}\n\t\treturn b.String()\n\t}\n\n\tb.WriteString(\"## 🎲 Game State\\n\\n\")\n\tfor i, p := range game.Players {\n\t\tturnMarker := \"\"\n\t\tif i == game.Turn \u0026\u0026 game.Winner == \"\" {\n\t\t\tturnMarker = \" 👈 *current turn*\"\n\t\t}\n\t\tb.WriteString(\"- `\" + p.Address.String() + \"` is on **\" + strconv.Itoa(p.Position) + \"**\" + turnMarker + \"\\n\")\n\t}\n\n\tif game.Winner != \"\" {\n\t\tb.WriteString(\"\\n🏁 **Winner:** `\" + game.Winner.String() + \"` 🎉\\n\")\n\t}\n\n\tb.WriteString(\"\\n## 📜 Recent Moves\\n\\n\")\n\tlogs := game.Logs\n\tif len(logs) \u003e 5 {\n\t\tlogs = logs[len(logs)-5:]\n\t}\n\tfor _, log := range logs {\n\t\tb.WriteString(\"- \" + log + \"\\n\")\n\t}\n\n\treturn b.String()\n}\n\n\nfunc Render(_ string) string {\n\tvar b strings.Builder\n\n\tb.WriteString(\"# 🐍 Snakes \u0026 Ladders\\n\\n\")\n\n\t// Game status\n\tif !game.Started {\n\t\tb.WriteString(\"**Game not started yet.**\\n\")\n\t\tb.WriteString(\"Call `StartGame(opponentAddress)` after both players have joined.\\n\\n\")\n\t} else if game.Winner != \"\" {\n\t\tb.WriteString(\"🏁 **Winner:** `\" + game.Winner.String() + \"` 🎉\\n\\n\")\n\t} else {\n\t\tcurr := game.Players[game.Turn].Address.String()\n\t\tb.WriteString(\"🎯 **Current turn:** `\" + curr + \"`\\n\\n\")\n\t}\n\n\t// Player states\n\tb.WriteString(\"## 👥 Players\\n\")\n\tfor i, p := range game.Players {\n\t\tpos := strconv.Itoa(p.Position)\n\t\tturnMarker := \"\"\n\t\tif i == game.Turn \u0026\u0026 game.Winner == \"\" {\n\t\t\tturnMarker = \" 👈\"\n\t\t}\n\t\tb.WriteString(\"- `\" + p.Address.String() + \"` at **\" + pos + \"**\" + turnMarker + \"\\n\")\n\t}\n\tb.WriteString(\"\\n\")\n\n\t// Basic grid rendering (top-down 10x10)\n\tb.WriteString(\"## 🎲 Game Board (100 → 1)\\n\\n\")\n\tfor row := 9; row \u003e= 0; row-- {\n\t\tfor col := 0; col \u003c 10; col++ {\n\t\t\tnum := row*10 + col + 1\n\t\t\tif row%2 == 1 {\n\t\t\t\tnum = row*10 + (9 - col) + 1 // serpentine pattern\n\t\t\t}\n\n\t\t\t// Show player(s) on tile\n\t\t\tmark := \"⬜\"\n\t\t\tfor _, p := range game.Players {\n\t\t\t\tif p.Position == num {\n\t\t\t\t\tmark = \"🎯\"\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Show snake or ladder\n\t\t\tif _, ok := snakes[num]; ok {\n\t\t\t\tmark = \"🐍\"\n\t\t\t} else if _, ok := ladders[num]; ok {\n\t\t\t\tmark = \"🪜\"\n\t\t\t}\n\n\t\t\tb.WriteString(mark + \" \")\n\t\t}\n\t\tb.WriteString(\"\\n\")\n\t}\n\tb.WriteString(\"\\n\")\n\n\t// Logs\n\tb.WriteString(\"## 📜 Last Moves\\n\")\n\tlogs := game.Logs\n\tif len(logs) \u003e 5 {\n\t\tlogs = logs[len(logs)-5:]\n\t}\n\tfor _, log := range logs {\n\t\tb.WriteString(\"- \" + log + \"\\n\")\n\t}\n\n\treturn b.String()\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"IOWNjY78RBgrX8wMmOJBptRSz8fJ6CWh1cwItJuFT4KydzJ/cGcgrfLBOSxv+Yc90NFp83JMpcru8sqlH7lXAA=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742736895"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ckanw7sgnyfyqygunjjk9hp7mmlqvkxhsjdxya","send":"","pkg_path":"gno.land/r/docs/hello","func":"Render","args":[""]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"C2mUF/9Jc74lkipzGz2cbAwCT2wddsTzZscm0EyhOa3Edisu4939dQxP8w8VCMjepzmMO6tMXv8BaqM/Bb6uDg=="}],"memo":""},"metadata":{"timestamp":"1742750475"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ckanw7sgnyfyqygunjjk9hp7mmlqvkxhsjdxya","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"6eSg8n8Z6KtaX2bEE8L51xHk/mQ+JmJ28vU14jzJf0uVPnE+o97DH1/QpUgaRj31vc74axhqmOlbcvj/O/FbDw=="}],"memo":""},"metadata":{"timestamp":"1742750912"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ckanw7sgnyfyqygunjjk9hp7mmlqvkxhsjdxya","send":"","pkg_path":"gno.land/r/docs/users","func":"Render","args":["g1ckanw7sgnyfyqygunjjk9hp7mmlqvkxhsjdxya"]}],"fee":{"gas_wanted":"6000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"LqMNM4HUk2v6I8ADgzW4Vnu/40rflf1QWcrAbs0avuz9T8ido8gyjTCK1U2xTmuLnZRHV47/YzK4UfVCItHMBQ=="}],"memo":""},"metadata":{"timestamp":"1742750957"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ckanw7sgnyfyqygunjjk9hp7mmlqvkxhsjdxya","send":"","pkg_path":"gno.land/r/docs/users","func":"Render","args":["g1z5225q6e7qjtmexjmakkn86r66lw94r0gajyn9"]}],"fee":{"gas_wanted":"6000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"rD+Md/u75rMfR+kN3c2Qj1Lgt9LlNp1UmnzXQedUnBPcVBt+nVqs41zehxI+AXaRDdypj4ll9iaeROGeP3MqAQ=="}],"memo":""},"metadata":{"timestamp":"1742751017"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ckanw7sgnyfyqygunjjk9hp7mmlqvkxhsjdxya","send":"","pkg_path":"gno.land/r/docs/hello","func":"Render","args":[""]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"C2mUF/9Jc74lkipzGz2cbAwCT2wddsTzZscm0EyhOa3Edisu4939dQxP8w8VCMjepzmMO6tMXv8BaqM/Bb6uDg=="}],"memo":""},"metadata":{"timestamp":"1742751183"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ckanw7sgnyfyqygunjjk9hp7mmlqvkxhsjdxya","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["Miguelito766"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"DIFhCYjt66ZZ61wZcMAaNKbgsajK/6oDPvuj2UfPqF4Kczovfrq3dj1A6HRLcra5Z1czXEginblOI5daVJtrCA=="}],"memo":""},"metadata":{"timestamp":"1742751489"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ckanw7sgnyfyqygunjjk9hp7mmlqvkxhsjdxya","send":"","pkg_path":"gno.land/r/sys/users","func":"RegisterUser","args":["miguelito766","g1ckanw7sgnyfyqygunjjk9hp7mmlqvkxhsjdxya"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"r+jN0EFcDPhlLjiJ776TorcRstV9AsAwUcfRl2usb+27sSphJth+XHyXzYi3etny+e9uJ4f2awGflYM26wwHCA=="}],"memo":""},"metadata":{"timestamp":"1742752252"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ckanw7sgnyfyqygunjjk9hp7mmlqvkxhsjdxya","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["Miguelito766"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"s+c7DatoeZouIiDg5QP6RCvaR3nSOq2bebQE9MXehVA5HmqnkHNd2YwNWGhednn5JQwlnx6V9VPodgHbHy96AA=="}],"memo":""},"metadata":{"timestamp":"1742752508"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ckanw7sgnyfyqygunjjk9hp7mmlqvkxhsjdxya","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["miguelito766"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"S4LLsuWpW6GRkXz9S3q+lQTwwXphOGc2b/38/UgWf5ltIuheHPhxAoKtiy8NTHNRVfryDpS5d+iet+2mjHo+DQ=="}],"memo":""},"metadata":{"timestamp":"1742752564"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ckanw7sgnyfyqygunjjk9hp7mmlqvkxhsjdxya","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["76"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"V4MaZryc/t2f2nwSM7WOEB2AJg/jLCNSCDXL4FZqur0pbl+wdkAipeKKw4r5zqgsowXQAHiGOw59lmCAWAokCQ=="}],"memo":""},"metadata":{"timestamp":"1742753949"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742779804_0","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"425758","gas_fee":"426ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"cjmXrF2FhEn8gQyeeUL5Wf9e6Jt5v6vCnqeH2okf3s+bXE7EIucqqqzvvEyB18IW8BqblakSjS6thv2a/UBCCQ=="}],"memo":""},"metadata":{"timestamp":"1742779803"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742779804_1","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"425758","gas_fee":"426ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"7OgS8v3x6f0wHho9wpkwkQSG+FhwLNER2cSHInkjA2rZrI/dMtBPVJG1wi1PyXjGy4SI1IHDQF3Asp7dJHPOCA=="}],"memo":""},"metadata":{"timestamp":"1742779803"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742779804_2","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"425758","gas_fee":"426ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"0EdaKef/8EZBcIrnhAVcb4lqQSlAjz/Tkgh75S+EzNmtxnkJB8IrNs8GgZ+cXOzRwz/Dw43eZejhVhWBj2P4Cg=="}],"memo":""},"metadata":{"timestamp":"1742779803"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742779804_3","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"425758","gas_fee":"426ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"qovC/0J85vq/c7w3NhasHBx03XkWe8+UTxdK87QLygtRoUyZ6ph8enESagZ6kHNQ/tO6oTxlC4LqxMLe8wr+DA=="}],"memo":""},"metadata":{"timestamp":"1742779803"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742779804_4","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"425758","gas_fee":"426ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"xlQF9yOVdJpB0868J9c02RX6/qhuEPGicUzEtvbFjM58WJ4J255ByJbZzOjmFGSsByJiiycpPf4p+EY0KGCtDw=="}],"memo":""},"metadata":{"timestamp":"1742779803"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742779804_5","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"425758","gas_fee":"426ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"O7gIS2w1VZs4RA1d9XOR1K90flhaA5QMc0hqTqvKeuc9DVJ0afUf2ZeVVcEApVU68EZWLaoo7aUVgHBBStKvCA=="}],"memo":""},"metadata":{"timestamp":"1742779803"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742779804_6","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"425758","gas_fee":"426ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"KcWHndckbzcivsb63FYucuXuLaJaqtNMScJYo3PeyoUojgqNHZhCMWPEaHzWt7RXaK1LTc0z7VH8qhK3PidsDA=="}],"memo":""},"metadata":{"timestamp":"1742779803"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742779804_7","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"425758","gas_fee":"426ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Pc+cG32kRHn2cOwPbXb/IsuGESrP4B09/Y02w09VypyegAZtrhme9tNA+D8mU94Btz71YH1+nbwEpFnKbc2SDQ=="}],"memo":""},"metadata":{"timestamp":"1742779803"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1742779804_8","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"425758","gas_fee":"426ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"4NhidxKV/1t+1ACJPruvmi5vialdjFkcp28uChazPqk9pbtC1WMDeAEZlF805C/z1I+1OUBSshLip5d7Y7UdDA=="}],"memo":""},"metadata":{"timestamp":"1742779803"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1742779804_9","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"425758","gas_fee":"426ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"65BQIPYEmetlOVU+oPxy30G9lBSn8qecw2D8K0oquHxS3NABMUiOCtWBKjqMxCeco8wh6I9pihjbU9Ru/019AQ=="}],"memo":""},"metadata":{"timestamp":"1742779803"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders2","func":"StartGame","args":null}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"yYscQ65v7G/2rhKaQTaCPbJlFWYQD9nUmJeaxSA6mlQhC30z034OqcNsvJDB3n3rF6MVe9QFKEnEpAhWsZs3DQ=="}],"memo":""},"metadata":{"timestamp":"1742805594"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"1000001ugnot","pkg_path":"gno.land/r/stefann/home","func":"Donate","args":null}],"fee":{"gas_wanted":"2059554","gas_fee":"862252ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"nDp9lycoHyBsMcINv9HtpNejI9Lrj2IX3YmH7Jb/0qOSWHWui3aPR7I5oglV/8mfyc2kyWQzFm2qw3eaV3kfBw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742808144"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"home","path":"gno.land/r/meeshell222/home","files":[{"name":"package.gno","body":"package home\n\nimport (\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/moul/dynreplacer\"\n\tblog \"gno.land/r/gnoland/blog\"\n\tevents \"gno.land/r/gnoland/events\"\n)\n\n// XXX: p/demo/ui API is crappy, we need to make it more idiomatic\n// XXX: use an updatable block system to update content from a DAO\n// XXX: var blocks avl.Tree\n\nvar (\n\toverride string\n\tAdmin    = ownable.NewWithAddress(\"g1manfred47kzduec920z88wfr64ylksmdcedlf5\") // @moul\n)\n\nfunc Render(_ string) string {\n\tr := dynreplacer.New()\n\tr.RegisterCallback(\":latest-blogposts:\", func() string {\n\t\treturn blog.RenderLastPostsWidget(4)\n\t})\n\tr.RegisterCallback(\":upcoming-events:\", func() string {\n\t\tout, _ := events.RenderEventWidget(events.MaxWidgetSize)\n\t\treturn out\n\t})\n\n\ttemplate := `# Welcome to gno.land\n\n## We’re building a decentralized operating system where governance is fair, development is open, and innovation is rewarded.\n\n[/about](/about) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/github](/github) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/try gno](/try-gno) \n\n\n**/about /github /try gno**\n\ngno.land is a smart contract platform built for Gno, a deterministic implementation of Go, designed for secure, auditable, and reusable decentralized applications (dApps). Unlike historical blockchain development languages, Gno allows Go developers to easily transfer their skills without needing to learn a completely new language. With type safety and composability, gno.land makes building scalable dApps secure, intuitive and reusable.\n\nAt its core, gno.land is the ‘GitHub’ of the Gno ecosystem, where transparent, open-source smart contracts are built on top of a native censorship-resistant decentralized operating system (dOS) starting with the Gno Virtual Machine (GnoVM).\n\n## Key Features of Gno\n\n- Open \u0026 Transparent: All applications are open-source and fully auditable.\n- Composable: Smart contracts are modular, reusable, and customizable to ease development and extend the ecosystem’s capabilities quickly.\n- Censorship-Resistant: Enables platforms with fair moderation and freedom of communication without a central authority.\n- Developer-Friendly: Intuitive design that reduces onboarding timelines and enables faster iteration.\n- Go-Based \u0026 Type Safe: Go developers can transition seamlessly to Gno thanks to the well-established Go language, while benefiting from type safety for security.\n\n\n---\n\nUse Cases\n\n## Why Gno and gno.land?\n\ngno.land’s smart contract platform is a first step in an experiment to build a complete dOS to bypass the centralized and controlled restrictions of the current Web, and power new social platforms, governance frameworks, and economic models that favor contribution-based incentives.\n\n\u003cgno-columns\u003e\n\n####\n\n![The next killer app](#)\n\n### A Platform Designed for Next Generation Apps\n\nA reusable technical architecture for everyone to build the next generation applications of the future that attract the next wave of builders and users.\n\n####\n\n![New-Economic-Model](#)\n\n### New Economic Model\n\nA builder-aligned economy that incentivizes developers, content creators, and maintainers with sustainable rewards.\n\n####\n\n![Decentralized Platform Governance](#)\n\n### Decentralized Governance: GovDAO\n\nA governance model that prioritizes contribution-based participation over capital-weighted control.\n\n####\n\n![Social coordination \u0026 community](#)\n\n### Social coordination \u0026 community\n\nA decentralized space for uncensored discourse, fair moderation, and community-driven governance with forkability to allow for conflict resolution.\n\n\n\n\n\u003c/gno-columns\u003e\n\n---\nBeta Mainnet\n\n## Beta Mainnet Coming Soon!\n\nStay tuned for the first phase of gno.land's launch, the beta mainnet release.  \n- [Road to Mainnet and Beyond](https://gno.land/r/gnoland/blog:p/road-to-mainnet)\n\n---\n\nEcosystem\n\n## Discover the gno.land universe\n\nExplore gno.land's expanding ecosystem of applications, wallets, and explorers.\n\n[/the ecosystem ](https://gno.land/ecosystem)\n\n\n\u003cgno-columns\u003e\n\n####\n\n![Wallet](#)\n\n### Wallets and Faucet\n\nExecute transactions on gno.land using wallets, or a CLI keychain and client tool.\n\n- [Adena Wallet](https://www.adena.app/)\n- [gnokey](https://docs.gno.land/gno-tooling/cli/gnokey/)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n\n####\n\n![Explorers](#)\n\n### Explorers\n\nMonitor and track the status of on-chain transactions in real time. \n\n- [gnoscan](https://gnoscan.io/)\n\n\n####\n\n![Defi](#)\n\n### Defi and Games\n\nTry out the DeFi platforms and gaming applications on gno.land. \n\n- [gnoswap - a gno.land DEX](http://beta.gnoswap.io/)\n\n####\n\n![Social dApps](#)\n\n### Social and Community dApps\n\nRegister your gno.land username and be a part of the conversation happening on gno.land social network, r/Boards.  \n\n- [gno.land's user name registry](https://gno.land/r/gnoland/users/v1)\n- [Boards - gno.land's social network](coming soon!)\n- [Hall of Fame](https://gno.land/r/leon/hof) \n- [Gno.me - gno.land's educational and community development platform](Coming soon!)\n\n\n\u003c/gno-columns\u003e\n\n## A community of gnomes\n\ngno.land is a contribution-driven network and community where dedicated contributors, also known as gnomes, serve as the builders, guardians, and pioneers of gno.land’s future.\n\n\u003cgno-columns\u003e\n##\n\n![Blog](#)\n\n### Our Blog \n\n:latest-blogposts:\n\n##\n\n![Events](#)\n\n### Past Events\n\n:upcoming-events:\n\n\u003c/gno-columns\u003e\n\n---\n\nBuilders\n\n## Build on gno.land\n\ngno.land builders are at the center of creating the applications and infrastructure for the decentralized operating system needed to power an Internet that is 100% decentralized.\n\n[/read the documentation](docs.gno.land) [Read about the Gno language](https://gno.land/gnolang)\n\n\u003cgno-columns\u003e\n\n### Builders\n\n- [Discover Gno Examples](https://gno.land/r/docs)\n- [Gno Playground: Code to Gno](https://play.gno.land/)\n- [Gno Studio Connect: A Realm interaction app](https://gno.studio/connect)\n- [Gnodev: Efficient local development for Gno](https://docs.gno.land/gno-tooling/cli/gno-tooling-gnodev)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n- [Discover Demo Packages](https://github.com/gnolang/gno/tree/master/examples)\n\n### Bounties\n\nThe Gno bounty program is a good way to find interesting challenges in Gno, and get rewarded for helping us advance the project. \n\n[/read more](https://github.com/gnolang/bounties)\n\n### gno.land grants\n\nAre you a builder, tinkerer, or researcher? If you’re looking to create awesome dApps, tooling, infrastructure, or smart contract libraries on gno.land, you can apply for a grant. gno.land grants program provides financial support to developers interested in exploring new blockchain technology, and/or are already actively contributing to gno.land.\n\n[/read more](https://github.com/gnolang/grants)\n\n\u003c/gno-columns\u003e\n\n---\n\n\u003cgno-columns\u003e\n\n### General\n\n- [About](#)\n- [Events](#)\n- [Blog](#)\n- [Career](#)\n\n### Advanced\n\n- [Builder Guides](#)\n- [Tokenomics](#)\n- [Demo list](#)\n- [Docs](#)\n\n### Explore\n\n- [Faucet](#)\n- [Ecosystem](#)\n- [Partners](#)\n- [Gnops](#)\n\n### Social\n\n- [GitHub](#)\n- [Discord](#)\n- [YouTube](#)\n- [Twitter](#)\n\n\u003c/gno-columns\u003e\n`\n\n\tif override != \"\" {\n\t\ttemplate = override\n\t}\n\tresult := r.Replace(template)\n\treturn result\n}\n\nfunc AdminSetOverride(content string) {\n\tAdmin.AssertCallerIsOwner()\n\toverride = content\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"8ecTa7zIIwAHHHN49BX3HsJS93a+4pgaMOjtcbHAuYzR0Znk6zNezX/z9xc+fy/VPpj73lUVB2DBk7CSvRFhDg=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742820368"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"home2","path":"gno.land/r/meeshell222/home2","files":[{"name":"package.gno","body":"package home2\n\nimport (\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/moul/dynreplacer\"\n\tblog \"gno.land/r/gnoland/blog\"\n\tevents \"gno.land/r/gnoland/events\"\n)\n\n// XXX: p/demo/ui API is crappy, we need to make it more idiomatic\n// XXX: use an updatable block system to update content from a DAO\n// XXX: var blocks avl.Tree\n\nvar (\n\toverride string\n\tAdmin    = ownable.NewWithAddress(\"g1manfred47kzduec920z88wfr64ylksmdcedlf5\") // @moul\n)\n\nfunc Render(_ string) string {\n\tr := dynreplacer.New()\n\tr.RegisterCallback(\":latest-blogposts:\", func() string {\n\t\treturn blog.RenderLastPostsWidget(4)\n\t})\n\tr.RegisterCallback(\":upcoming-events:\", func() string {\n\t\tout, _ := events.RenderEventWidget(events.MaxWidgetSize)\n\t\treturn out\n\t})\n\n\ttemplate := `# Welcome to gno.land\n\n## We’re building a decentralized operating system where governance is fair, development is open, and innovation is rewarded.\n\n[/about](/about) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/github](/github) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/try gno](/try-gno) \n\n\n**/about /github /try gno**\n\ngno.land is a smart contract platform built for Gno, a deterministic implementation of Go, designed for secure, auditable, and reusable decentralized applications (dApps). Unlike historical blockchain development languages, Gno allows Go developers to easily transfer their skills without needing to learn a completely new language. With type safety and composability, gno.land makes building scalable dApps secure, intuitive and reusable.\n\nAt its core, gno.land is the ‘GitHub’ of the Gno ecosystem, where transparent, open-source smart contracts are built on top of a native censorship-resistant decentralized operating system (dOS) starting with the Gno Virtual Machine (GnoVM).\n\n## Key Features of Gno\n\n- Open \u0026 Transparent: All applications are open-source and fully auditable.\n- Composable: Smart contracts are modular, reusable, and customizable to ease development and extend the ecosystem’s capabilities quickly.\n- Censorship-Resistant: Enables platforms with fair moderation and freedom of communication without a central authority.\n- Developer-Friendly: Intuitive design that reduces onboarding timelines and enables faster iteration.\n- Go-Based \u0026 Type Safe: Go developers can transition seamlessly to Gno thanks to the well-established Go language, while benefiting from type safety for security.\n\n\n---\n\nUse Cases\n\n## Why Gno and gno.land?\n\ngno.land’s smart contract platform is a first step in an experiment to build a complete dOS to bypass the centralized and controlled restrictions of the current Web, and power new social platforms, governance frameworks, and economic models that favor contribution-based incentives.\n\n\u003cgno-columns\u003e\n\n####\n\n![The next killer app](#)\n\n### A Platform Designed for Next Generation Apps\n\nA reusable technical architecture for everyone to build the next generation applications of the future that attract the next wave of builders and users.\n\n####\n\n![New-Economic-Model](#)\n\n### New Economic Model\n\nA builder-aligned economy that incentivizes developers, content creators, and maintainers with sustainable rewards.\n\n####\n\n![Decentralized Platform Governance](#)\n\n### Decentralized Governance: GovDAO\n\nA governance model that prioritizes contribution-based participation over capital-weighted control.\n\n####\n\n![Social coordination \u0026 community](#)\n\n### Social coordination \u0026 community\n\nA decentralized space for uncensored discourse, fair moderation, and community-driven governance with forkability to allow for conflict resolution.\n\n\n\n\n\u003c/gno-columns\u003e\n\n---\nBeta Mainnet\n\n## Beta Mainnet Coming Soon!\n\nStay tuned for the first phase of gno.land's launch, the beta mainnet release.  \n- [Road to Mainnet and Beyond](https://gno.land/r/gnoland/blog:p/road-to-mainnet)\n\n---\n\nEcosystem\n\n## Discover the gno.land universe\n\nExplore gno.land's expanding ecosystem of applications, wallets, and explorers.\n\n[/the ecosystem ](https://gno.land/ecosystem)\n\n\n\u003cgno-columns\u003e\n\n####\n\n![Wallet](#)\n\n### Wallets and Faucet\n\nExecute transactions on gno.land using wallets, or a CLI keychain and client tool.\n\n- [Adena Wallet](https://www.adena.app/)\n- [gnokey](https://docs.gno.land/gno-tooling/cli/gnokey/)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n\n####\n\n![Explorers](#)\n\n### Explorers\n\nMonitor and track the status of on-chain transactions in real time. \n\n- [gnoscan](https://gnoscan.io/)\n\n\n####\n\n![Defi](#)\n\n### Defi and Games\n\nTry out the DeFi platforms and gaming applications on gno.land. \n\n- [gnoswap - a gno.land DEX](http://beta.gnoswap.io/)\n\n####\n\n![Social dApps](#)\n\n### Social and Community dApps\n\nRegister your gno.land username and be a part of the conversation happening on gno.land social network, r/Boards.  \n\n- [gno.land's user name registry](https://gno.land/r/gnoland/users/v1)\n- [Boards - gno.land's social network](coming soon!)\n- [Hall of Fame](https://gno.land/r/leon/hof) \n- [Gno.me - gno.land's educational and community development platform](Coming soon!)\n\n\n\u003c/gno-columns\u003e\n\n## A community of gnomes\n\ngno.land is a contribution-driven network and community where dedicated contributors, also known as gnomes, serve as the builders, guardians, and pioneers of gno.land’s future.\n\n\u003cgno-columns\u003e\n##\n\n![Blog](#)\n\n### Our Blog \n\n:latest-blogposts:\n\n##\n\n![Events](#)\n\n### Past Events\n\n:upcoming-events:\n\n\u003c/gno-columns\u003e\n\n---\n\nBuilders\n\n## Build on gno.land\n\ngno.land builders are at the center of creating the applications and infrastructure for the decentralized operating system needed to power an Internet that is 100% decentralized.\n\n[/read the documentation](docs.gno.land) [Read about the Gno language](https://gno.land/gnolang)\n\n\u003cgno-columns\u003e\n\n### Builders\n\n- [Discover Gno Examples](https://gno.land/r/docs)\n- [Gno Playground: Code to Gno](https://play.gno.land/)\n- [Gno Studio Connect: A Realm interaction app](https://gno.studio/connect)\n- [Gnodev: Efficient local development for Gno](https://docs.gno.land/gno-tooling/cli/gno-tooling-gnodev)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n- [Discover Demo Packages](https://github.com/gnolang/gno/tree/master/examples)\n\n### Bounties\n\nThe Gno bounty program is a good way to find interesting challenges in Gno, and get rewarded for helping us advance the project. \n\n[/read more](https://github.com/gnolang/bounties)\n\n### gno.land grants\n\nAre you a builder, tinkerer, or researcher? If you’re looking to create awesome dApps, tooling, infrastructure, or smart contract libraries on gno.land, you can apply for a grant. gno.land grants program provides financial support to developers interested in exploring new blockchain technology, and/or are already actively contributing to gno.land.\n\n[/read more](https://github.com/gnolang/grants)\n\n\u003c/gno-columns\u003e\n\n---\n\n\u003cgno-columns\u003e\n\n### General\n\n- [About](#)\n- [Events](#)\n- [Blog](#)\n- [Career](#)\n\n### Advanced\n\n- [Builder Guides](#)\n- [Tokenomics](#)\n- [Demo list](#)\n- [Docs](#)\n\n### Explore\n\n- [Faucet](#)\n- [Ecosystem](#)\n- [Partners](#)\n- [Gnops](#)\n\n### Social\n\n- [GitHub](#)\n- [Discord](#)\n- [YouTube](#)\n- [Twitter](#)\n\n\u003c/gno-columns\u003e\n`\n\n\tif override != \"\" {\n\t\ttemplate = override\n\t}\n\tresult := r.Replace(template)\n\treturn result\n}\n\nfunc AdminSetOverride(content string) {\n\tAdmin.AssertCallerIsOwner()\n\toverride = content\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"FPEIvH8CILBmOagjuojIT9LhiupeoenODGa7fngyAl2ZgEs69ov/aRHjk1Z2SxX9p/vpSrlmq97yXIF+9XaVDg=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742820388"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"home4","path":"gno.land/r/meeshell222/home4","files":[{"name":"package.gno","body":"package home4\n\nimport (\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/moul/dynreplacer\"\n\tblog \"gno.land/r/gnoland/blog\"\n\tevents \"gno.land/r/gnoland/events\"\n)\n\n// XXX: p/demo/ui API is crappy, we need to make it more idiomatic\n// XXX: use an updatable block system to update content from a DAO\n// XXX: var blocks avl.Tree\n\nvar (\n\toverride string\n\tAdmin    = ownable.NewWithAddress(\"g1manfred47kzduec920z88wfr64ylksmdcedlf5\") // @moul\n)\n\nfunc Render(_ string) string {\n\tr := dynreplacer.New()\n\tr.RegisterCallback(\":latest-blogposts:\", func() string {\n\t\treturn blog.RenderLastPostsWidget(4)\n\t})\n\tr.RegisterCallback(\":upcoming-events:\", func() string {\n\t\tout, _ := events.RenderEventWidget(events.MaxWidgetSize)\n\t\treturn out\n\t})\n\n\ttemplate := `# Welcome to gno.land\n\n## We’re building a decentralized operating system where governance is fair, development is open, and innovation is rewarded.\n\n[/about](/about) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/github](/github) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/try gno](/try-gno) \n\n\n**/about /github /try gno**\n\ngno.land is a smart contract platform built for Gno, a deterministic implementation of Go, designed for secure, auditable, and reusable decentralized applications (dApps). Unlike historical blockchain development languages, Gno allows Go developers to easily transfer their skills without needing to learn a completely new language. With type safety and composability, gno.land makes building scalable dApps secure, intuitive and reusable.\n\nAt its core, gno.land is the ‘GitHub’ of the Gno ecosystem, where transparent, open-source smart contracts are built on top of a native censorship-resistant decentralized operating system (dOS) starting with the Gno Virtual Machine (GnoVM).\n\n## Key Features of Gno\n\n- Open \u0026 Transparent: All applications are open-source and fully auditable.\n- Composable: Smart contracts are modular, reusable, and customizable to ease development and extend the ecosystem’s capabilities quickly.\n- Censorship-Resistant: Enables platforms with fair moderation and freedom of communication without a central authority.\n- Developer-Friendly: Intuitive design that reduces onboarding timelines and enables faster iteration.\n- Go-Based \u0026 Type Safe: Go developers can transition seamlessly to Gno thanks to the well-established Go language, while benefiting from type safety for security.\n\n\n---\n\nUse Cases\n\n## Why Gno and gno.land?\n\ngno.land’s smart contract platform is a first step in an experiment to build a complete dOS to bypass the centralized and controlled restrictions of the current Web, and power new social platforms, governance frameworks, and economic models that favor contribution-based incentives.\n\n\u003cgno-columns\u003e\n\n####\n\n![The next killer app](#)\n\n### A Platform Designed for Next Generation Apps\n\nA reusable technical architecture for everyone to build the next generation applications of the future that attract the next wave of builders and users.\n\n####\n\n![New-Economic-Model](#)\n\n### New Economic Model\n\nA builder-aligned economy that incentivizes developers, content creators, and maintainers with sustainable rewards.\n\n####\n\n![Decentralized Platform Governance](#)\n\n### Decentralized Governance: GovDAO\n\nA governance model that prioritizes contribution-based participation over capital-weighted control.\n\n####\n\n![Social coordination \u0026 community](#)\n\n### Social coordination \u0026 community\n\nA decentralized space for uncensored discourse, fair moderation, and community-driven governance with forkability to allow for conflict resolution.\n\n\n\n\n\u003c/gno-columns\u003e\n\n---\nBeta Mainnet\n\n## Beta Mainnet Coming Soon!\n\nStay tuned for the first phase of gno.land's launch, the beta mainnet release.  \n- [Road to Mainnet and Beyond](https://gno.land/r/gnoland/blog:p/road-to-mainnet)\n\n---\n\nEcosystem\n\n## Discover the gno.land universe\n\nExplore gno.land's expanding ecosystem of applications, wallets, and explorers.\n\n[/the ecosystem ](https://gno.land/ecosystem)\n\n\n\u003cgno-columns\u003e\n\n####\n\n![Wallet](#)\n\n### Wallets and Faucet\n\nExecute transactions on gno.land using wallets, or a CLI keychain and client tool.\n\n- [Adena Wallet](https://www.adena.app/)\n- [gnokey](https://docs.gno.land/gno-tooling/cli/gnokey/)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n\n####\n\n![Explorers](#)\n\n### Explorers\n\nMonitor and track the status of on-chain transactions in real time. \n\n- [gnoscan](https://gnoscan.io/)\n\n\n####\n\n![Defi](#)\n\n### Defi and Games\n\nTry out the DeFi platforms and gaming applications on gno.land. \n\n- [gnoswap - a gno.land DEX](http://beta.gnoswap.io/)\n\n####\n\n![Social dApps](#)\n\n### Social and Community dApps\n\nRegister your gno.land username and be a part of the conversation happening on gno.land social network, r/Boards.  \n\n- [gno.land's user name registry](https://gno.land/r/gnoland/users/v1)\n- [Boards - gno.land's social network](coming soon!)\n- [Hall of Fame](https://gno.land/r/leon/hof) \n- [Gno.me - gno.land's educational and community development platform](Coming soon!)\n\n\n\u003c/gno-columns\u003e\n\n## A community of gnomes\n\ngno.land is a contribution-driven network and community where dedicated contributors, also known as gnomes, serve as the builders, guardians, and pioneers of gno.land’s future.\n\n\u003cgno-columns\u003e\n##\n\n![Blog](#)\n\n### Our Blog \n\n:latest-blogposts:\n\n##\n\n![Events](#)\n\n### Past Events\n\n:upcoming-events:\n\n\u003c/gno-columns\u003e\n\n---\n\nBuilders\n\n## Build on gno.land\n\ngno.land builders are at the center of creating the applications and infrastructure for the decentralized operating system needed to power an Internet that is 100% decentralized.\n\n[/read the documentation](docs.gno.land) [Read about the Gno language](https://gno.land/gnolang)\n\n\u003cgno-columns\u003e\n\n### Builders\n\n- [Discover Gno Examples](https://gno.land/r/docs)\n- [Gno Playground: Code to Gno](https://play.gno.land/)\n- [Gno Studio Connect: A Realm interaction app](https://gno.studio/connect)\n- [Gnodev: Efficient local development for Gno](https://docs.gno.land/gno-tooling/cli/gno-tooling-gnodev)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n- [Discover Demo Packages](https://github.com/gnolang/gno/tree/master/examples)\n\n### Bounties\n\nThe Gno bounty program is a good way to find interesting challenges in Gno, and get rewarded for helping us advance the project. \n\n[/read more](https://github.com/gnolang/bounties)\n\n### gno.land grants\n\nAre you a builder, tinkerer, or researcher? If you’re looking to create awesome dApps, tooling, infrastructure, or smart contract libraries on gno.land, you can apply for a grant. gno.land grants program provides financial support to developers interested in exploring new blockchain technology, and/or are already actively contributing to gno.land.\n\n[/read more](https://github.com/gnolang/grants)\n\n\u003c/gno-columns\u003e\n\n---\n\n\u003cgno-columns\u003e\n\n### General\n\n- [About](#)\n- [Events](#)\n- [Blog](#)\n- [Career](#)\n\n### Advanced\n\n- [Builder Guides](#)\n- [Tokenomics](#)\n- [Demo list](#)\n- [Docs](#)\n\n### Explore\n\n- [Faucet](#)\n- [Ecosystem](#)\n- [Partners](#)\n- [Gnops](#)\n\n### Social\n\n- [GitHub](#)\n- [Discord](#)\n- [YouTube](#)\n- [Twitter](#)\n\n\u003c/gno-columns\u003e\n`\n\n\tif override != \"\" {\n\t\ttemplate = override\n\t}\n\tresult := r.Replace(template)\n\treturn result\n}\n\nfunc AdminSetOverride(content string) {\n\tAdmin.AssertCallerIsOwner()\n\toverride = content\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"qXR0tRlwA5dcsdwaQvyL7fWOGHLgeRtzkuuJi5S3gbZeZdchcM1ZHbgPqiB3TpOTwOuYAlN4wzA7wr1UdRjsCw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742820418"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"home4v2","path":"gno.land/r/meeshell222/home4v2","files":[{"name":"package.gno","body":"package home4v2\n\nimport (\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/moul/dynreplacer\"\n\tblog \"gno.land/r/gnoland/blog\"\n\tevents \"gno.land/r/gnoland/events\"\n)\n\nvar (\n\toverride string\n\tAdmin    = ownable.NewWithAddress(\"g1manfred47kzduec920z88wfr64ylksmdcedlf5\") // @moul\n)\n\nfunc Render(_ string) string {\n\tr := dynreplacer.New()\n\tr.RegisterCallback(\":latest-blogposts:\", func() string {\n\t\treturn blog.RenderLastPostsWidget(4)\n\t})\n\tr.RegisterCallback(\":upcoming-events:\", func() string {\n\t\tout, _ := events.RenderEventWidget(events.MaxWidgetSize)\n\t\treturn out\n\t})\n\n\ttemplate := `# Welcome to gno.land\n\n## We’re building a decentralized operating system where governance is fair, development is open, and innovation is rewarded.\n\n[/about](/about) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/github](/github) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/try gno](/try-gno) \n\n\n**/about /github /try gno**\n\ngno.land is a smart contract platform built for Gno, a deterministic implementation of Go, designed for secure, auditable, and reusable decentralized applications (dApps). Unlike historical blockchain development languages, Gno allows Go developers to easily transfer their skills without needing to learn a completely new language. With type safety and composability, gno.land makes building scalable dApps secure, intuitive and reusable.\n\nAt its core, gno.land is the ‘GitHub’ of the Gno ecosystem, where transparent, open-source smart contracts are built on top of a native censorship-resistant decentralized operating system (dOS) starting with the Gno Virtual Machine (GnoVM).\n\n## Key Features of Gno\n\n- Open \u0026 Transparent: All applications are open-source and fully auditable.\n- Composable: Smart contracts are modular, reusable, and customizable to ease development and extend the ecosystem’s capabilities quickly.\n- Censorship-Resistant: Enables platforms with fair moderation and freedom of communication without a central authority.\n- Developer-Friendly: Intuitive design that reduces onboarding timelines and enables faster iteration.\n- Go-Based \u0026 Type Safe: Go developers can transition seamlessly to Gno thanks to the well-established Go language, while benefiting from type safety for security.\n\n---\n\nUse Cases\n\n## Why Gno and gno.land?\n\ngno.land’s smart contract platform is a first step in an experiment to build a complete dOS to bypass the centralized and controlled restrictions of the current Web, and power new social platforms, governance frameworks, and economic models that favor contribution-based incentives.\n\n\u003cgno-columns\u003e\n\n####\n\n![The next killer app](#)\n\n### A Platform Designed for Next Generation Apps\n\nA reusable technical architecture for everyone to build the next generation applications of the future that attract the next wave of builders and users.\n\n####\n\n![New-Economic-Model](#)\n\n### New Economic Model\n\nA builder-aligned economy that incentivizes developers, content creators, and maintainers with sustainable rewards.\n\n####\n\n![Decentralized Platform Governance](#)\n\n### Decentralized Governance: GovDAO\n\nA governance model that prioritizes contribution-based participation over capital-weighted control.\n\n####\n\n![Social coordination \u0026 community](#)\n\n### Social coordination \u0026 community\n\nA decentralized space for uncensored discourse, fair moderation, and community-driven governance with forkability to allow for conflict resolution.\n\n\u003c/gno-columns\u003e\n\n---\nBeta Mainnet\n\n## Beta Mainnet Coming Soon!\n\nStay tuned for the first phase of gno.land's launch, the beta mainnet release.  \n- [Road to Mainnet and Beyond](https://gno.land/r/gnoland/blog:p/road-to-mainnet)\n\n---\n\nEcosystem\n\n## Discover the gno.land universe\n\nExplore gno.land's expanding ecosystem of applications, wallets, and explorers.\n\n[/the ecosystem ](https://gno.land/ecosystem)\n\n\u003cgno-columns\u003e\n\n####\n\n![Wallet](#)\n\n### Wallets and Faucet\n\nExecute transactions on gno.land using wallets, or a CLI keychain and client tool.\n\n- [Adena Wallet](https://www.adena.app/)\n- [gnokey](https://docs.gno.land/gno-tooling/cli/gnokey/)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n\n####\n\n![Explorers](#)\n\n### Explorers\n\nMonitor and track the status of on-chain transactions in real time. \n\n- [gnoscan](https://gnoscan.io/)\n\n####\n\n![Defi](#)\n\n### Defi and Games\n\nTry out the DeFi platforms and gaming applications on gno.land. \n\n- [gnoswap - a gno.land DEX](http://beta.gnoswap.io/)\n\n####\n\n![Social dApps](#)\n\n### Social and Community dApps\n\nRegister your gno.land username and be a part of the conversation happening on gno.land social network, r/Boards.  \n\n- [gno.land's user name registry](https://gno.land/r/gnoland/users/v1)\n- [Boards - gno.land's social network](coming soon!)\n- [Hall of Fame](https://gno.land/r/leon/hof) \n- [Gno.me - gno.land's educational and community development platform](Coming soon!)\n\n\u003c/gno-columns\u003e\n\n## A community of gnomes\n\ngno.land is a contribution-driven network and community where dedicated contributors, also known as gnomes, serve as the builders, guardians, and pioneers of gno.land’s future.\n\n\u003cgno-columns\u003e\n##\n\n![Blog](#)\n\n### Our Blog \n\n:latest-blogposts:\n\n##\n\n![Events](#)\n\n### Past Events\n\n:upcoming-events:\n\n\u003c/gno-columns\u003e\n\n---\n\nBuilders\n\n## Build on gno.land\n\ngno.land builders are at the center of creating the applications and infrastructure for the decentralized operating system needed to power an Internet that is 100% decentralized.\n\n[/read the documentation](docs.gno.land) [Read about the Gno language](https://gno.land/gnolang)\n\n\u003cgno-columns\u003e\n\n### Builders\n\n- [Discover Gno Examples](https://gno.land/r/docs)\n- [Gno Playground: Code to Gno](https://play.gno.land/)\n- [Gno Studio Connect: A Realm interaction app](https://gno.studio/connect)\n- [Gnodev: Efficient local development for Gno](https://docs.gno.land/gno-tooling/cli/gno-tooling-gnodev)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n- [Discover Demo Packages](https://github.com/gnolang/gno/tree/master/examples)\n\n### Bounties\n\nThe Gno bounty program is a good way to find interesting challenges in Gno, and get rewarded for helping us advance the project. \n\n[/read more](https://github.com/gnolang/bounties)\n\n### gno.land grants\n\nAre you a builder, tinkerer, or researcher? If you’re looking to create awesome dApps, tooling, infrastructure, or smart contract libraries on gno.land, you can apply for a grant. gno.land grants program provides financial support to developers interested in exploring new blockchain technology, and/or are already actively contributing to gno.land.\n\n[/read more](https://github.com/gnolang/grants)\n\n\u003c/gno-columns\u003e\n\n---\n\n\u003cgno-columns\u003e\n\n### General\n\n- [About](#)\n- [Events](#)\n- [Blog](#)\n- [Career](#)\n\n### Advanced\n\n- [Builder Guides](#)\n- [Tokenomics](#)\n- [Demo list](#)\n- [Docs](#)\n\n### Explore\n\n- [Faucet](#)\n- [Ecosystem](#)\n- [Partners](#)\n- [Gnops](#)\n\n### Social\n\n- [GitHub](#)\n- [Discord](#)\n- [YouTube](#)\n- [Twitter](#)\n\n\u003c/gno-columns\u003e\n`\n\n\tif override != \"\" {\n\t\ttemplate = override\n\t}\n\tresult := r.Replace(template)\n\treturn result\n}\n\nfunc AdminSetOverride(content string) {\n\tAdmin.AssertCallerIsOwner()\n\toverride = content\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"31502832","gas_fee":"65631ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"PKlbdLnG/CoBNLnfMQXJUZpVRnSYoQTz/P15DA/YW5x1ikDisBtaOaY5HXqbTBoBGDZJE1Hjfk5004PhpP7fBA=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742820735"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"home4v3","path":"gno.land/r/meeshell222/home4v3","files":[{"name":"package.gno","body":"package home4v3\n\nimport (\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/moul/dynreplacer\"\n\tblog \"gno.land/r/gnoland/blog\"\n\tevents \"gno.land/r/gnoland/events\"\n)\n\nvar (\n\toverride string\n\tAdmin    = ownable.NewWithAddress(\"g1manfred47kzduec920z88wfr64ylksmdcedlf5\") // @moul\n)\n\nfunc Render(_ string) string {\n\tr := dynreplacer.New()\n\tr.RegisterCallback(\":latest-blogposts:\", func() string {\n\t\treturn blog.RenderLastPostsWidget(4)\n\t})\n\tr.RegisterCallback(\":upcoming-events:\", func() string {\n\t\tout, _ := events.RenderEventWidget(events.MaxWidgetSize)\n\t\treturn out\n\t})\n\n\ttemplate := `# Welcome to gno.land\n\n## We’re building a decentralized operating system where governance is fair, development is open, and innovation is rewarded.\n\n[/about](/about) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/github](/github) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/try gno](/try-gno) \n\n\n**/about /github /try gno**\n\ngno.land is a smart contract platform built for Gno, a deterministic implementation of Go, designed for secure, auditable, and reusable decentralized applications (dApps). Unlike historical blockchain development languages, Gno allows Go developers to easily transfer their skills without needing to learn a completely new language. With type safety and composability, gno.land makes building scalable dApps secure, intuitive and reusable.\n\nAt its core, gno.land is the ‘GitHub’ of the Gno ecosystem, where transparent, open-source smart contracts are built on top of a native censorship-resistant decentralized operating system (dOS) starting with the Gno Virtual Machine (GnoVM).\n\n## Key Features of Gno\n\n- Open \u0026 Transparent: All applications are open-source and fully auditable.\n- Composable: Smart contracts are modular, reusable, and customizable to ease development and extend the ecosystem’s capabilities quickly.\n- Censorship-Resistant: Enables platforms with fair moderation and freedom of communication without a central authority.\n- Developer-Friendly: Intuitive design that reduces onboarding timelines and enables faster iteration.\n- Go-Based \u0026 Type Safe: Go developers can transition seamlessly to Gno thanks to the well-established Go language, while benefiting from type safety for security.\n\n---\n\nUse Cases\n\n## Why Gno and gno.land?\n\ngno.land’s smart contract platform is a first step in an experiment to build a complete dOS to bypass the centralized and controlled restrictions of the current Web, and power new social platforms, governance frameworks, and economic models that favor contribution-based incentives.\n\n\u003cgno-columns\u003e\n\n####\n\n\n### A Platform Designed for Next Generation Apps\n\nA reusable technical architecture for everyone to build the next generation applications of the future that attract the next wave of builders and users.\n\n####\n\n\n### New Economic Model\n\nA builder-aligned economy that incentivizes developers, content creators, and maintainers with sustainable rewards.\n\n####\n\n\n### Decentralized Governance: GovDAO\n\nA governance model that prioritizes contribution-based participation over capital-weighted control.\n\n####\n\n### Social coordination \u0026 community\n\nA decentralized space for uncensored discourse, fair moderation, and community-driven governance with forkability to allow for conflict resolution.\n\n\u003c/gno-columns\u003e\n\n---\nBeta Mainnet\n\n## Beta Mainnet Coming Soon!\n\nStay tuned for the first phase of gno.land's launch, the beta mainnet release.  \n- [Road to Mainnet and Beyond](https://gno.land/r/gnoland/blog:p/road-to-mainnet)\n\n---\n\nEcosystem\n\n## Discover the gno.land universe\n\nExplore gno.land's expanding ecosystem of applications, wallets, and explorers.\n\n[/the ecosystem ](https://gno.land/ecosystem)\n\n\u003cgno-columns\u003e\n\n####\n\n\n### Wallets and Faucet\n\nExecute transactions on gno.land using wallets, or a CLI keychain and client tool.\n\n- [Adena Wallet](https://www.adena.app/)\n- [gnokey](https://docs.gno.land/gno-tooling/cli/gnokey/)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n\n####\n\n### Explorers\n\nMonitor and track the status of on-chain transactions in real time. \n\n- [gnoscan](https://gnoscan.io/)\n\n####\n\n\n### Defi and Games\n\nTry out the DeFi platforms and gaming applications on gno.land. \n\n- [gnoswap - a gno.land DEX](http://beta.gnoswap.io/)\n\n####\n\n\n### Social and Community dApps\n\nRegister your gno.land username and be a part of the conversation happening on gno.land social network, r/Boards.  \n\n- [gno.land's user name registry](https://gno.land/r/gnoland/users/v1)\n- [Boards - gno.land's social network](coming soon!)\n- [Hall of Fame](https://gno.land/r/leon/hof) \n- [Gno.me - gno.land's educational and community development platform](Coming soon!)\n\n\u003c/gno-columns\u003e\n\n## A community of gnomes\n\ngno.land is a contribution-driven network and community where dedicated contributors, also known as gnomes, serve as the builders, guardians, and pioneers of gno.land’s future.\n\n\u003cgno-columns\u003e\n##\n\n\n### Our Blog \n\n:latest-blogposts:\n\n##\n\n\n### Past Events\n\n:upcoming-events:\n\n\u003c/gno-columns\u003e\n\n---\n\nBuilders\n\n## Build on gno.land\n\ngno.land builders are at the center of creating the applications and infrastructure for the decentralized operating system needed to power an Internet that is 100% decentralized.\n\n[/read the documentation](docs.gno.land) [Read about the Gno language](https://gno.land/gnolang)\n\n\u003cgno-columns\u003e\n\n### Builders\n\n- [Discover Gno Examples](https://gno.land/r/docs)\n- [Gno Playground: Code to Gno](https://play.gno.land/)\n- [Gno Studio Connect: A Realm interaction app](https://gno.studio/connect)\n- [Gnodev: Efficient local development for Gno](https://docs.gno.land/gno-tooling/cli/gno-tooling-gnodev)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n- [Discover Demo Packages](https://github.com/gnolang/gno/tree/master/examples)\n\n### Bounties\n\nThe Gno bounty program is a good way to find interesting challenges in Gno, and get rewarded for helping us advance the project. \n\n[/read more](https://github.com/gnolang/bounties)\n\n### gno.land grants\n\n      If you’re looking to create awesome dApps, tooling, infrastructure, or smart contract libraries on gno.land, you can apply for a grant. gno.land grants program provides financial support to developers interested in exploring new blockchain technology, and/or are already actively contributing to gno.land.\n\n[/read more](https://github.com/gnolang/grants)\n\n\u003c/gno-columns\u003e\n\n---\n\n\u003cgno-columns\u003e\n\n### General\n\n- [About](#)\n- [Events](#)\n- [Blog](#)\n- [Career](#)\n\n### Advanced\n\n- [Builder Guides](#)\n- [Tokenomics](#)\n- [Demo list](#)\n- [Docs](#)\n\n### Explore\n\n- [Faucet](#)\n- [Ecosystem](#)\n- [Partners](#)\n- [Gnops](#)\n\n### Social\n\n- [GitHub](#)\n- [Discord](#)\n- [YouTube](#)\n- [Twitter](#)\n\n\u003c/gno-columns\u003e\n`\n\n\tif override != \"\" {\n\t\ttemplate = override\n\t}\n\tresult := r.Replace(template)\n\treturn result\n}\n\nfunc AdminSetOverride(content string) {\n\tAdmin.AssertCallerIsOwner()\n\toverride = content\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"31497388","gas_fee":"65620ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"GUjJiaHeKvgScnk+a/8RtpgrDWc4gl/cbloMo0ujX599TGC3GstzrMaKV2AqHC5upKnpxKV9ddMtVn4QvoBcDA=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742820971"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"home4v4","path":"gno.land/r/meeshell222/home4v4","files":[{"name":"package.gno","body":"package home4v4\n\nimport (\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/moul/dynreplacer\"\n\tblog \"gno.land/r/gnoland/blog\"\n\tevents \"gno.land/r/gnoland/events\"\n)\n\nvar (\n\toverride string\n\tAdmin    = ownable.NewWithAddress(\"g1manfred47kzduec920z88wfr64ylksmdcedlf5\") // @moul\n)\n\nfunc Render(_ string) string {\n\tr := dynreplacer.New()\n\tr.RegisterCallback(\":latest-blogposts:\", func() string {\n\t\treturn blog.RenderLastPostsWidget(4)\n\t})\n\tr.RegisterCallback(\":upcoming-events:\", func() string {\n\t\tout, _ := events.RenderEventWidget(events.MaxWidgetSize)\n\t\treturn out\n\t})\n\n\ttemplate := `# Welcome to gno.land\n\n## We’re building a decentralized operating system where governance is fair, development is open, and innovation is rewarded.\n\n[/about](/about) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/github](/github) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/try gno](/try-gno) \n\n\n**/about /github /try gno**\n\ngno.land is a smart contract platform built for Gno, a deterministic implementation of Go, designed for secure, auditable, and reusable decentralized applications (dApps). Unlike historical blockchain development languages, Gno allows Go developers to easily transfer their skills without needing to learn a completely new language. With type safety and composability, gno.land makes building scalable dApps secure, intuitive and reusable.\n\nAt its core, gno.land is the ‘GitHub’ of the Gno ecosystem, where transparent, open-source smart contracts are built on top of a native censorship-resistant decentralized operating system (dOS) starting with the Gno Virtual Machine (GnoVM).\n\n## Key Features of Gno\n\n- Open \u0026 Transparent: All applications are open-source and fully auditable.\n- Composable: Smart contracts are modular, reusable, and customizable to ease development and extend the ecosystem’s capabilities quickly.\n- Censorship-Resistant: Enables platforms with fair moderation and freedom of communication without a central authority.\n- Developer-Friendly: Intuitive design that reduces onboarding timelines and enables faster iteration.\n- Go-Based \u0026 Type Safe: Go developers can transition seamlessly to Gno thanks to the well-established Go language, while benefiting from type safety for security.\n\n---\n\nUse Cases\n\n## Why Gno and gno.land?\n\ngno.land’s smart contract platform is a first step in an experiment to build a complete dOS to bypass the centralized and controlled restrictions of the current Web, and power new social platforms, governance frameworks, and economic models that favor contribution-based incentives.\n\n\u003cgno-columns\u003e\n\n####\n\n\n### A Platform Designed for Next Generation Apps\n\nA reusable technical architecture for everyone to build the next generation applications of the future that attract the next wave of builders and users.\n\n####\n\n\n### New Economic Model\n\nA builder-aligned economy that incentivizes developers, content creators, and maintainers with sustainable rewards.\n\n####\n\n\n### Decentralized Governance: GovDAO\n\nA governance model that prioritizes contribution-based participation over capital-weighted control.\n\n####\n\n### Social coordination \u0026 community\n\nA decentralized space for uncensored discourse, fair moderation, and community-driven governance with forkability to allow for conflict resolution.\n\n\u003c/gno-columns\u003e\n\n---\nBeta Mainnet\n\n## Beta Mainnet Coming Soon!\n\nStay tuned for the first phase of gno.land's launch, the beta mainnet release.  \n- [Road to Mainnet and Beyond](https://gno.land/r/gnoland/blog:p/road-to-mainnet)\n\n---\n\nEcosystem\n\n## Discover the gno.land universe\n\nExplore gno.land's expanding ecosystem of applications, wallets, and explorers.\n\n[/the ecosystem ](https://gno.land/ecosystem)\n\n\u003cgno-columns\u003e\n\n####\n\n\n### Wallets and Faucet\n\nExecute transactions on gno.land using wallets, or a CLI keychain and client tool.\n\n- [Adena Wallet](https://www.adena.app/)\n- [gnokey](https://docs.gno.land/gno-tooling/cli/gnokey/)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n\n####\n\n### Explorers\n\nMonitor and track the status of on-chain transactions in real time. \n\n- [gnoscan](https://gnoscan.io/)\n\n####\n\n\n### Defi and Games\n\nTry out the DeFi platforms and gaming applications on gno.land. \n\n- [gnoswap - a gno.land DEX](http://beta.gnoswap.io/)\n\n####\n\n\n### Social and Community dApps\n\nRegister your gno.land username and be a part of the conversation happening on gno.land social network, r/Boards.  \n\n- [gno.land's user name registry](https://gno.land/r/gnoland/users/v1)\n- [Boards - gno.land's social network](coming soon!)\n- [Hall of Fame](https://gno.land/r/leon/hof) \n- [Gno.me - gno.land's educational and community development platform](Coming soon!)\n\n\u003c/gno-columns\u003e\n\n## A community of gnomes\n\ngno.land is a contribution-driven network and community where dedicated contributors, also known as gnomes, serve as the builders, guardians, and pioneers of gno.land’s future.\n\n\u003cgno-columns\u003e\n##\n\n\n### Our Blog \n\n:latest-blogposts:\n\n##\n\n\n### Past Events\n\n:upcoming-events:\n\n\u003c/gno-columns\u003e\n\n---\n\nBuilders\n\n## Build on gno.land\n\ngno.land builders are at the center of creating the applications and infrastructure for the decentralized operating system needed to power an Internet that is 100% decentralized.\n\n[/read the documentation](docs.gno.land) [Read about the Gno language](https://gno.land/gnolang)\n\n\u003cgno-columns\u003e\n\n### Builders\n\n- [Discover Gno Examples](https://gno.land/r/docs)\n- [Gno Playground: Code to Gno](https://play.gno.land/)\n- [Gno Studio Connect: A Realm interaction app](https://gno.studio/connect)\n- [Gnodev: Efficient local development for Gno](https://docs.gno.land/gno-tooling/cli/gno-tooling-gnodev)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n- [Discover Demo Packages](https://github.com/gnolang/gno/tree/master/examples)\n\n### Bounties\n\nThe Gno bounty program is a good way to find interesting challenges in Gno, and get rewarded for helping us advance the project. \n\n[/read more](https://github.com/gnolang/bounties)\n\n### gno.land grants\n\n      If you’re looking to create awesome dApps, tooling, infrastructure, or smart contract libraries on gno.land, you can apply for a grant. gno.land grants program provides financial support to developers interested in exploring new blockchain technology, and/or are already actively contributing to gno.land.\n\n[/read more](https://github.com/gnolang/grants)\n\n\u003c/gno-columns\u003e\n\n---\n\n\u003cgno-columns\u003e\n\n### General\n\n- [About](#)\n- [Events](#)\n- [Blog](#)\n- [Career](#)\n\n### Advanced\n\n- [Builder Guides](#)\n- [Tokenomics](#)\n- [Demo list](#)\n- [Docs](#)\n\n### Explore\n\n- [Faucet](#)\n- [Ecosystem](#)\n- [Partners](#)\n- [Gnops](#)\n\n### Social\n\n- [GitHub](#)\n- [Discord](#)\n- [YouTube](#)\n- [Twitter](#)\n\n\u003c/gno-columns\u003e\n`\n\n\tif override != \"\" {\n\t\ttemplate = override\n\t}\n\tresult := r.Replace(template)\n\treturn result\n}\n\nfunc AdminSetOverride(content string) {\n\tAdmin.AssertCallerIsOwner()\n\toverride = content\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"31497388","gas_fee":"65620ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"gIvRzgtyCNhtsDPATREmcVFC2qr6LPw7hwj6Nys8awD8BpJ56XQNPY11vPbJcrTz4sqxKvZD/A/fr/0fCQhrDA=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742821036"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"home4v5","path":"gno.land/r/meeshell222/home4v5","files":[{"name":"package.gno","body":"package home4v5\n\nimport (\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/moul/dynreplacer\"\n\tblog \"gno.land/r/gnoland/blog\"\n\tevents \"gno.land/r/gnoland/events\"\n)\n\nvar (\n\toverride string\n\tAdmin    = ownable.NewWithAddress(\"g1manfred47kzduec920z88wfr64ylksmdcedlf5\") // @moul\n)\n\nfunc Render(_ string) string {\n\tr := dynreplacer.New()\n\tr.RegisterCallback(\":latest-blogposts:\", func() string {\n\t\treturn blog.RenderLastPostsWidget(4)\n\t})\n\tr.RegisterCallback(\":upcoming-events:\", func() string {\n\t\tout, _ := events.RenderEventWidget(events.MaxWidgetSize)\n\t\treturn out\n\t})\n\n\ttemplate := `# Welcome to gno.land\n\n## We’re building a decentralized operating system where governance is fair, development is open, and innovation is rewarded.\n\n[/about](/about) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/github](/github) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/try gno](/try-gno) \n\n\ngno.land is a smart contract platform built for Gno, a deterministic implementation of Go, designed for secure, auditable, and reusable decentralized applications (dApps). Unlike historical blockchain development languages, Gno allows Go developers to easily transfer their skills without needing to learn a completely new language. With type safety and composability, gno.land makes building scalable dApps secure, intuitive and reusable.\n\nAt its core, gno.land is the ‘GitHub’ of the Gno ecosystem, where transparent, open-source smart contracts are built on top of a native censorship-resistant decentralized operating system (dOS) starting with the Gno Virtual Machine (GnoVM).\n\n## Key Features of Gno\n\n- Open \u0026 Transparent: All applications are open-source and fully auditable.\n- Composable: Smart contracts are modular, reusable, and customizable to ease development and extend the ecosystem’s capabilities quickly.\n- Censorship-Resistant: Enables platforms with fair moderation and freedom of communication without a central authority.\n- Developer-Friendly: Intuitive design that reduces onboarding timelines and enables faster iteration.\n- Go-Based \u0026 Type Safe: Go developers can transition seamlessly to Gno thanks to the well-established Go language, while benefiting from type safety for security.\n\n---\n\nUse Cases\n\n## Why Gno and gno.land?\n\ngno.land’s smart contract platform is a first step in an experiment to build a complete dOS to bypass the centralized and controlled restrictions of the current Web, and power new social platforms, governance frameworks, and economic models that favor contribution-based incentives.\n\n\u003cgno-columns\u003e\n\n####\n\n\n### A Platform Designed for Next Generation Apps\n\nA reusable technical architecture for everyone to build the next generation applications of the future that attract the next wave of builders and users.\n\n####\n\n\n### New Economic Model\n\nA builder-aligned economy that incentivizes developers, content creators, and maintainers with sustainable rewards.\n\n####\n\n\n### Decentralized Governance: GovDAO\n\nA governance model that prioritizes contribution-based participation over capital-weighted control.\n\n####\n\n### Social coordination \u0026 community\n\nA decentralized space for uncensored discourse, fair moderation, and community-driven governance with forkability to allow for conflict resolution.\n\n\u003c/gno-columns\u003e\n\n---\nBeta Mainnet\n\n## Beta Mainnet Coming Soon!\n\nStay tuned for the first phase of gno.land's launch, the beta mainnet release.  \n- [Road to Mainnet and Beyond](https://gno.land/r/gnoland/blog:p/road-to-mainnet)\n\n---\n\nEcosystem\n\n## Discover the gno.land universe\n\nExplore gno.land's expanding ecosystem of applications, wallets, and explorers.\n\n[/the ecosystem ](https://gno.land/ecosystem)\n\n\u003cgno-columns\u003e\n\n####\n\n\n### Wallets and Faucet\n\nExecute transactions on gno.land using wallets, or a CLI keychain and client tool.\n\n- [Adena Wallet](https://www.adena.app/)\n- [gnokey](https://docs.gno.land/gno-tooling/cli/gnokey/)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n\n####\n\n### Explorers\n\nMonitor and track the status of on-chain transactions in real time. \n\n- [gnoscan](https://gnoscan.io/)\n\n####\n\n\n### Defi and Games\n\nTry out the DeFi platforms and gaming applications on gno.land. \n\n- [gnoswap - a gno.land DEX](http://beta.gnoswap.io/)\n\n####\n\n\n### Social and Community dApps\n\nRegister your gno.land username and be a part of the conversation happening on gno.land social network, r/Boards.  \n\n- [gno.land's user name registry](https://gno.land/r/gnoland/users/v1)\n- [Boards - gno.land's social network](coming soon!)\n- [Hall of Fame](https://gno.land/r/leon/hof) \n- [Gno.me - gno.land's educational and community development platform](Coming soon!)\n\n\u003c/gno-columns\u003e\n\n## A community of gnomes\n\ngno.land is a contribution-driven network and community where dedicated contributors, also known as gnomes, serve as the builders, guardians, and pioneers of gno.land’s future.\n\n\u003cgno-columns\u003e\n##\n\n\n### Our Blog \n\n:latest-blogposts:\n\n##\n\n\n### Past Events\n\n:upcoming-events:\n\n\u003c/gno-columns\u003e\n\n---\n\nBuilders\n\n## Build on gno.land\n\ngno.land builders are at the center of creating the applications and infrastructure for the decentralized operating system needed to power an Internet that is 100% decentralized.\n\n[/read the documentation](docs.gno.land) [Read about the Gno language](https://gno.land/gnolang)\n\n\u003cgno-columns\u003e\n\n### Builders\n\n- [Discover Gno Examples](https://gno.land/r/docs)\n- [Gno Playground: Code to Gno](https://play.gno.land/)\n- [Gno Studio Connect: A Realm interaction app](https://gno.studio/connect)\n- [Gnodev: Efficient local development for Gno](https://docs.gno.land/gno-tooling/cli/gno-tooling-gnodev)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n- [Discover Demo Packages](https://github.com/gnolang/gno/tree/master/examples)\n\n### Bounties\n\nThe Gno bounty program is a good way to find interesting challenges in Gno, and get rewarded for helping us advance the project. \n\n[/read more](https://github.com/gnolang/bounties)\n\n### gno.land grants\n\n      If you’re looking to create awesome dApps, tooling, infrastructure, or smart contract libraries on gno.land, you can apply for a grant. gno.land grants program provides financial support to developers interested in exploring new blockchain technology, and/or are already actively contributing to gno.land.\n\n[/read more](https://github.com/gnolang/grants)\n\n\u003c/gno-columns\u003e\n\n---\n\n\u003cgno-columns\u003e\n\n### General\n\n- [About](#)\n- [Events](#)\n- [Blog](#)\n- [Career](#)\n\n### Advanced\n\n- [Builder Guides](#)\n- [Tokenomics](#)\n- [Demo list](#)\n- [Docs](#)\n\n### Explore\n\n- [Faucet](#)\n- [Ecosystem](#)\n- [Partners](#)\n- [Gnops](#)\n\n### Social\n\n- [GitHub](#)\n- [Discord](#)\n- [YouTube](#)\n- [Twitter](#)\n\n\u003c/gno-columns\u003e\n`\n\n\tif override != \"\" {\n\t\ttemplate = override\n\t}\n\tresult := r.Replace(template)\n\treturn result\n}\n\nfunc AdminSetOverride(content string) {\n\tAdmin.AssertCallerIsOwner()\n\toverride = content\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"31496762","gas_fee":"65619ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Vw8Rye+yluOk/xiO+9M+csC7cTAalmrsb2zVcXbXTxn9m4BrgblQrkgwuUM/EzKzGt/7rgxIXcR3B6iWGHoJBQ=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742821076"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"home4v6","path":"gno.land/r/meeshell222/home4v6","files":[{"name":"package.gno","body":"package home4v6\n\nimport (\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/moul/dynreplacer\"\n\tblog \"gno.land/r/gnoland/blog\"\n\tevents \"gno.land/r/gnoland/events\"\n)\n\nvar (\n\toverride string\n\tAdmin    = ownable.NewWithAddress(\"g1manfred47kzduec920z88wfr64ylksmdcedlf5\") // @moul\n)\n\nfunc Render(_ string) string {\n\tr := dynreplacer.New()\n\tr.RegisterCallback(\":latest-blogposts:\", func() string {\n\t\treturn blog.RenderLastPostsWidget(4)\n\t})\n\tr.RegisterCallback(\":upcoming-events:\", func() string {\n\t\tout, _ := events.RenderEventWidget(events.MaxWidgetSize)\n\t\treturn out\n\t})\n\n\ttemplate := `# Welcome to gno.land\n\n## We’re building a decentralized operating system where governance is fair, development is open, and innovation is rewarded.\n\n[/about](/about) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/github](/github) \u0026nbsp;\u0026nbsp;\u0026nbsp; [/try gno](/try-gno) \n\n\ngno.land is a smart contract platform built for Gno, a deterministic implementation of Go, designed for secure, auditable, and reusable decentralized applications (dApps). Unlike historical blockchain development languages, Gno allows Go developers to easily transfer their skills without needing to learn a completely new language. With type safety and composability, gno.land makes building scalable dApps secure, intuitive and reusable.\n\nAt its core, gno.land is the ‘GitHub’ of the Gno ecosystem, where transparent, open-source smart contracts are built on top of a native censorship-resistant decentralized operating system (dOS) starting with the Gno Virtual Machine (GnoVM).\n\n## Key Features of Gno\n\n- Open \u0026 Transparent: All applications are open-source and fully auditable.\n- Composable: Smart contracts are modular, reusable, and customizable to ease development and extend the ecosystem’s capabilities quickly.\n- Censorship-Resistant: Enables platforms with fair moderation and freedom of communication without a central authority.\n- Developer-Friendly: Intuitive design that reduces onboarding timelines and enables faster iteration.\n- Go-Based \u0026 Type Safe: Go developers can transition seamlessly to Gno thanks to the well-established Go language, while benefiting from type safety for security.\n\n---\n\nUse Cases\n\n## Why Gno and gno.land?\n\ngno.land’s smart contract platform is a first step in an experiment to build a complete dOS to bypass the centralized and controlled restrictions of the current Web, and power new social platforms, governance frameworks, and economic models that favor contribution-based incentives.\n\n\u003cgno-columns\u003e\n\n####\n\n\n### A Platform Designed for Next Generation Apps\n\nA reusable technical architecture for everyone to build the next generation applications of the future that attract the next wave of builders and users.\n\n####\n\n\n### New Economic Model\n\nA builder-aligned economy that incentivizes developers, content creators, and maintainers with sustainable rewards.\n\n####\n\n\n### Decentralized Governance: GovDAO\n\nA governance model that prioritizes contribution-based participation over capital-weighted control.\n\n####\n\n### Social coordination \u0026 community\n\nA decentralized space for uncensored discourse, fair moderation, and community-driven governance with forkability to allow for conflict resolution.\n\n\u003c/gno-columns\u003e\n\n---\nBeta Mainnet\n\n## Beta Mainnet Coming Soon!\n\nStay tuned for the first phase of gno.land's launch, the beta mainnet release.  \n- [Road to Mainnet and Beyond](https://gno.land/r/gnoland/blog:p/road-to-mainnet)\n\n---\n\nEcosystem\n\n## Discover the gno.land universe\n\nExplore gno.land's expanding ecosystem of applications, wallets, and explorers.\n\n[/the ecosystem ](https://gno.land/ecosystem)\n\n\u003cgno-columns\u003e\n\n####\n\n\n### Wallets and Faucet\n\nExecute transactions on gno.land using wallets, or a CLI keychain and client tool.\n\n- [Adena Wallet](https://www.adena.app/)\n- [gnokey](https://docs.gno.land/gno-tooling/cli/gnokey/)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n\n####\n\n### Explorers\n\nMonitor and track the status of on-chain transactions in real time. \n\n- [gnoscan](https://gnoscan.io/)\n\n####\n\n\n### Defi and Games\n\nTry out the DeFi platforms and gaming applications on gno.land. \n\n- [gnoswap - a gno.land DEX](http://beta.gnoswap.io/)\n\n####\n\n\n### Social and Community dApps\n\nRegister your gno.land username and be a part of the conversation happening on gno.land social network, r/Boards.  \n\n- [gno.land's user name registry](https://gno.land/r/gnoland/users/v1)\n- [Boards - gno.land's social network](coming soon!)\n- [Hall of Fame](https://gno.land/r/leon/hof) \n- [Gno.me - gno.land's educational and community development platform](Coming soon!)\n\n\u003c/gno-columns\u003e\n\n## A community of gnomes\n\ngno.land is a contribution-driven network and community where dedicated contributors, also known as gnomes, serve as the builders, guardians, and pioneers of gno.land’s future.\n\n\u003cgno-columns\u003e\n##\n\n\n### Our Blog \n\n:latest-blogposts:\n\n##\n\n\n### Past Events\n\n:upcoming-events:\n\n\u003c/gno-columns\u003e\n\n---\n\nBuilders\n\n## Build on gno.land\n\ngno.land builders are at the center of creating the applications and infrastructure for the decentralized operating system needed to power an Internet that is 100% decentralized.\n\n[/read the documentation](docs.gno.land) [Read about the Gno language](https://gno.land/gnolang)\n\n\u003cgno-columns\u003e\n\n### Builders\n\n- [Discover Gno Examples](https://gno.land/r/docs)\n- [Gno Playground: Code to Gno](https://play.gno.land/)\n- [Gno Studio Connect: A Realm interaction app](https://gno.studio/connect)\n- [Gnodev: Efficient local development for Gno](https://docs.gno.land/gno-tooling/cli/gno-tooling-gnodev)\n- [gno.land Faucet Hub](https://faucet.gno.land/)\n- [Discover Demo Packages](https://github.com/gnolang/gno/tree/master/examples)\n\n### Bounties\n\nThe Gno bounty program is a good way to find interesting challenges in Gno, and get rewarded for helping us advance the project. \n\n[/read more](https://github.com/gnolang/bounties)\n\n### gno.land grants\n\nIf you’re looking to create awesome dApps, tooling, infrastructure, or smart contract libraries on gno.land, you can apply for a grant. gno.land grants program provides financial support to developers interested in exploring new blockchain technology, and/or are already actively contributing to gno.land.\n\n[/read more](https://github.com/gnolang/grants)\n\n\u003c/gno-columns\u003e\n\n---\n\n\u003cgno-columns\u003e\n\n### General\n\n- [About](#)\n- [Events](#)\n- [Blog](#)\n- [Career](#)\n\n### Advanced\n\n- [Builder Guides](#)\n- [Tokenomics](#)\n- [Demo list](#)\n- [Docs](#)\n\n### Explore\n\n- [Faucet](#)\n- [Ecosystem](#)\n- [Partners](#)\n- [Gnops](#)\n\n### Social\n\n- [GitHub](#)\n- [Discord](#)\n- [YouTube](#)\n- [Twitter](#)\n\n\u003c/gno-columns\u003e\n`\n\n\tif override != \"\" {\n\t\ttemplate = override\n\t}\n\tresult := r.Replace(template)\n\treturn result\n}\n\nfunc AdminSetOverride(content string) {\n\tAdmin.AssertCallerIsOwner()\n\toverride = content\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"31496632","gas_fee":"65618ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"dRa48ZBCSVmZTK0eckyCgQeS7Ooq+HeMpLRKMzvKsd8+vfmS19AHmrFOgH3gsgTOVY7T46oOnmzVMMPJmh3RBw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742821161"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1manfred47kzduec920z88wfr64ylksmdcedlf5","send":"","pkg_path":"gno.land/r/sys/names","func":"Enable","args":null}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"e9vB1fLLgwRJcfSvHaF9z1/iI6j8RZugZTJmS1FNyrJ3H4GLQAPJ7cwR1da7YS/cEBs9/uCIFSaLL3ov/eeUCg=="}],"memo":""},"metadata":{"timestamp":"1742839012"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","package":{"name":"users","path":"gno.land/r/leon000/issues/lols/query_auth_accs","files":[{"name":"admin.gno","body":"package users\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/dao\"\n\n\t\"gno.land/r/gov/dao/bridge\"\n\tsusers \"gno.land/r/sys/users\"\n)\n\nvar paused = false // XXX: replace with p/moul/authz\n\n// ProposeNewPausedValue allows GovDAO to pause or unpause this realm\nfunc ProposeNewPausedValue(newPausedValue bool) dao.Executor {\n\tcb := func() error {\n\t\tpaused = newPausedValue\n\t\treturn nil\n\t}\n\n\treturn bridge.GovDAO().NewGovDAOExecutor(cb)\n}\n\n// ProposeNewName allows GovDAO to propose a new name for an existing user\n// The associated address and all previous names of a user that changes a name\n// are preserved, and all resolve to the new name.\nfunc ProposeNewName(addr std.Address, newName string) dao.Executor {\n\tif matched := reUsername.MatchString(newName); !matched {\n\t\tpanic(ErrInvalidUsername)\n\t}\n\n\tuserData := susers.ResolveAddress(addr)\n\tif userData == nil {\n\t\tpanic(susers.ErrUserNotExistOrDeleted)\n\t}\n\n\tcb := func() error {\n\t\tif err := userData.UpdateName(newName); err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t}\n\n\treturn bridge.GovDAO().NewGovDAOExecutor(cb)\n}\n\n// ProposeDeleteUser allows GovDAO to propose deletion of a user\n// This will make the associated address and names unresolvable.\n// WARN: After deletion, the same address WILL NOT be able to register a new name.\nfunc ProposeDeleteUser(addr std.Address) dao.Executor {\n\tuserData := susers.ResolveAddress(addr)\n\tif userData == nil {\n\t\tpanic(susers.ErrUserNotExistOrDeleted)\n\t}\n\n\tcb := func() error {\n\t\tif err := userData.Delete(); err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t}\n\n\treturn bridge.GovDAO().NewGovDAOExecutor(cb)\n}\n\n// ProposeNewRegisterPrice allows GovDAO to update the price of registration\nfunc ProposeNewRegisterPrice(newPrice int64) dao.Executor {\n\tif newPrice \u003c 0 {\n\t\tpanic(\"invalid price\")\n\t}\n\n\tcb := func() error {\n\t\tregisterPrice = newPrice\n\t\treturn nil\n\t}\n\n\treturn bridge.GovDAO().NewGovDAOExecutor(cb)\n}\n"},{"name":"errors.gno","body":"package users\n\nimport (\n\t\"errors\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tErrNonUserCall     = errors.New(\"r/gnoland/users: non-user call\")\n\tErrPaused          = errors.New(\"r/gnoland/users: paused\")\n\tErrInvalidPayment  = ufmt.Errorf(\"r/gnoland/users: you need to send exactly %d ugnot\", registerPrice)\n\tErrInvalidUsername = errors.New(\"r/gnoland/users: invalid username\")\n)\n"},{"name":"preregister.gno","body":"package users\n\nimport (\n\t\"std\"\n\n\tsusers \"gno.land/r/sys/users\"\n)\n\n// pre-registered users\nvar preRegisteredUsers = []struct {\n\tName    string\n\tAddress std.Address\n}{\n\t// system name\n\t{\"archives\", \"g1xlnyjrnf03ju82v0f98ruhpgnquk28knmjfe5k\"}, // -\u003e @r_archives\n\t{\"demo\", \"g13ek2zz9qurzynzvssyc4sthwppnruhnp0gdz8n\"},     // -\u003e @r_demo\n\t{\"gno\", \"g19602kd9tfxrfd60sgreadt9zvdyyuudcyxsz8a\"},      // -\u003e @r_gno\n\t{\"gnoland\", \"g1g3lsfxhvaqgdv4ccemwpnms4fv6t3aq3p5z6u7\"},  // -\u003e @r_gnoland\n\t{\"gnolang\", \"g1yjlnm3z2630gg5mryjd79907e0zx658wxs9hnd\"},  // -\u003e @r_gnolang\n\t{\"gov\", \"g1g73v2anukg4ej7axwqpthsatzrxjsh0wk797da\"},      // -\u003e @r_gov\n\t{\"nt\", \"g15ge0ae9077eh40erwrn2eq0xw6wupwqthpv34l\"},       // -\u003e @r_nt\n\t{\"sys\", \"g1r929wt2qplfawe4lvqv9zuwfdcz4vxdun7qh8l\"},      // -\u003e @r_sys\n\t{\"x\", \"g164sdpew3c2t3rvxj3kmfv7c7ujlvcw2punzzuz\"},        // -\u003e @r_x\n\n\t// test1 user\n\t{\"test1\", \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"}, // -\u003e @test1\n}\n\nfunc init() {\n\t// add pre-registered users\n\tfor _, res := range preRegisteredUsers {\n\t\t// Try registering, skip if it fails\n\t\t_ = susers.RegisterUser(res.Name, res.Address)\n\t}\n}\n"},{"name":"render.gno","body":"package users\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/p/moul/md\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n\n\t\"gno.land/r/demo/profile\"\n\tsusers \"gno.land/r/sys/users\"\n)\n\nfunc Render(path string) string {\n\treq := realmpath.Parse(path)\n\n\tif req.Path == \"\" {\n\t\treturn renderHomePage()\n\t}\n\n\t// Otherwise, render the user page\n\treturn renderUserPage(req.Path)\n}\n\nfunc renderHomePage() string {\n\tvar out string\n\n\tout += \"# gno.land user registry\\n\"\n\n\tif paused {\n\t\tout += md.HorizontalRule()\n\t\tout += md.H2(\"This realm is paused.\")\n\t\tout += md.Paragraph(\"Check out [`gno.land/r/gnoland/users`](/r/gnoland/users) for newer versions of the registry.\")\n\t\tout += md.HorizontalRule()\n\t}\n\n\tout += renderIntroParagraph()\n\n\tout += md.H2(\"Latest registrations\")\n\tentries := latestUsers.Entries()\n\tif len(entries) == 0 {\n\t\tout += \"No registered users.\"\n\t}\n\n\tfor i := len(entries) - 1; i \u003e= 0; i-- {\n\t\tuser := entries[i].(string)\n\t\tout += ufmt.Sprintf(\"- User [%s](/r/gnoland/users/v1:%s)\\n\", md.Bold(user), user)\n\t}\n\n\treturn out\n}\n\nfunc renderIntroParagraph() string {\n\tout := md.Paragraph(\"Welcome to the gno.land user registry (v1). Please register a username.\")\n\tout += md.Paragraph(`Registering a username grants the registering address the right to deploy packages and realms\nunder that username’s namespace. For example, if an address registers the username ` + md.InlineCode(\"gnome123\") + `, it \nwill gain permission to deploy packages and realms to package paths with the pattern ` + md.InlineCode(\"gno.land/{p,r}/gnome123/*\") + `.`)\n\n\tout += md.Paragraph(\"In V1, usernames must follow these rules, in order to prevent username squatting:\")\n\titems := []string{\n\t\t\"Must start with 3 characters\",\n\t\t\"Must end with 3 numbers\",\n\t\t\"Have a maximum length of 20 characters\",\n\t\t\"With the only special character allowed being `_`\",\n\t}\n\tout += md.BulletList(items)\n\n\tout += \"\\n\\n\"\n\tout += md.Paragraph(\"In later versions of the registry, vanity usernames will be allowed through specific mechanisms.\")\n\n\tif !paused {\n\t\tout += md.H3(ufmt.Sprintf(\" [[Click here to register]](%s)\", txlink.Call(\"Register\")))\n\t\tout += ufmt.Sprintf(\"Registration price: %f GNOT (%dugnot)\\n\\n\", float64(registerPrice)/1_000_000, registerPrice)\n\t}\n\n\tout += md.HorizontalRule()\n\tout += \"\\n\\n\"\n\n\treturn out\n}\n\n// resolveUser resolves the user based on the path, determining if it's a name or address\nfunc resolveUser(path string) (*susers.UserData, bool, bool) {\n\tif std.Address(path).IsValid() {\n\t\treturn susers.ResolveAddress(std.Address(path)), false, false\n\t}\n\n\tdata, isLatest := susers.ResolveName(path)\n\treturn data, isLatest, true\n}\n\n// renderUserPage generates the user page based on user data and path\nfunc renderUserPage(path string) string {\n\tvar out string\n\n\t// Render single user page\n\tdata, isLatest, isName := resolveUser(path)\n\tif data == nil {\n\t\tout += md.H1(\"User not found.\")\n\t\tout += \"This user does not exist or has been deleted.\\n\"\n\t\treturn out\n\t}\n\n\tout += md.H1(\"User - \" + md.InlineCode(data.Name()))\n\n\tif isName \u0026\u0026 !isLatest {\n\t\tout += md.Paragraph(ufmt.Sprintf(\n\t\t\t\"Note: You searched for `%s`, which is a previous name of [`%s`](/r/gnoland/users/v1:%s).\",\n\t\t\tpath, data.Name(), data.Name()))\n\t} else {\n\t\tout += ufmt.Sprintf(\"Address: %s\\n\\n\", data.Addr().String())\n\n\t\tout += md.H2(\"Bio\")\n\t\tout += profile.GetStringField(data.Addr(), \"Bio\", \"No bio defined.\")\n\t\tout += \"\\n\\n\"\n\t\tout += ufmt.Sprintf(\"[Update bio](%s)\", txlink.Realm(\"gno.land/r/demo/profile\").Call(\"SetStringField\", \"field\", \"Bio\"))\n\t\tout += \"\\n\\n\"\n\t}\n\n\treturn out\n}\n"},{"name":"users.gno","body":"package users\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\n\t\"gno.land/p/moul/fifo\"\n\tsusers \"gno.land/r/sys/users\"\n)\n\nconst (\n\treValidUsername = \"^[a-z]{3}[_a-z0-9]{0,14}[0-9]{3}$\"\n)\n\nvar (\n\tregisterPrice = int64(1_000_000) // 1 GNOT\n\tlatestUsers   = fifo.New(10)     // Save the latest 10 users for rendering purposes\n\treUsername    = regexp.MustCompile(reValidUsername)\n)\n\n// Register registers a new username for the caller.\n// A valid username must start with a minimum of 3 letters,\n// end with a minimum of 3 numbers, and be less than 20 chars long.\n// All letters must be lowercase, and the only valid special char is `_`.\n// Only calls from EOAs are supported.\nfunc Register(username string) {\n\tif !std.PreviousRealm().IsUser() {\n\t\tpanic(ErrNonUserCall)\n\t}\n\n\tif paused {\n\t\tpanic(ErrPaused)\n\t}\n\n\tif std.OriginSend().AmountOf(\"ugnot\") != registerPrice {\n\t\tpanic(ErrInvalidPayment)\n\t}\n\n\tif matched := reUsername.MatchString(username); !matched {\n\t\tpanic(ErrInvalidUsername)\n\t}\n\n\tregistrant := std.PreviousRealm().Address()\n\tif err := susers.RegisterUser(username, registrant); err != nil {\n\t\tpanic(err)\n\t}\n\n\tlatestUsers.Append(username)\n\tstd.Emit(\"Registeration\", \"address\", registrant.String(), \"name\", username)\n}\n"},{"name":"users_test.gno","body":"package users\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/urequire\"\n\n\tsusers \"gno.land/r/sys/users\"\n)\n\nvar (\n\talice     = \"alice123\"\n\tbob       = \"bob123\"\n\taliceAddr = testutils.TestAddress(alice)\n\tbobAddr   = testutils.TestAddress(bob)\n)\n\nfunc TestRegister_Valid(t *testing.T) {\n\ttesting.SetOriginSend(std.NewCoins(std.NewCoin(\"ugnot\", 1_000_000)))\n\ttesting.SetRealm(std.NewUserRealm(aliceAddr))\n\ttesting.SetOriginCaller(aliceAddr)\n\n\tuassert.NotPanics(t, func() {\n\t\tRegister(alice)\n\t})\n\n\tres, latest := susers.ResolveName(alice)\n\n\tuassert.NotEqual(t, nil, res)\n\tuassert.Equal(t, alice, res.Name())\n\tuassert.Equal(t, aliceAddr, res.Addr())\n\tuassert.False(t, res.IsDeleted())\n\tuassert.True(t, latest)\n}\n\nfunc TestRegister_Invalid(t *testing.T) {\n\ttesting.SetOriginSend(std.NewCoins(std.NewCoin(\"ugnot\", 1_000_000)))\n\ttesting.SetRealm(std.NewUserRealm(bobAddr))\n\ttesting.SetOriginCaller(bobAddr)\n\n\t// Invalid usernames\n\tuassert.PanicsWithMessage(t, ErrInvalidUsername.Error(), func() {\n\t\tRegister(\"alice\") // vanity\n\t})\n\n\tuassert.PanicsWithMessage(t, ErrInvalidUsername.Error(), func() {\n\t\tRegister(\"\") // empty\n\t})\n\n\tuassert.PanicsWithMessage(t, ErrInvalidUsername.Error(), func() {\n\t\tRegister(\"    \") // empty\n\t})\n\n\tuassert.PanicsWithMessage(t, ErrInvalidUsername.Error(), func() {\n\t\tRegister(\"123\") // empty\n\t})\n\n\tuassert.PanicsWithMessage(t, ErrInvalidUsername.Error(), func() {\n\t\tRegister(\"123\") // only numbers\n\t})\n\n\tuassert.PanicsWithMessage(t, ErrInvalidUsername.Error(), func() {\n\t\tRegister(\"alice\u0026#($)\") // non-allowed chars\n\t})\n\n\tuassert.PanicsWithMessage(t, ErrInvalidUsername.Error(), func() {\n\t\tRegister(\"Alice123\") // upper-case\n\t})\n\n\tuassert.PanicsWithMessage(t, ErrInvalidUsername.Error(), func() {\n\t\tRegister(\"toolongusernametoolongusernametoolongusername123\") // too long\n\t})\n\n\t// Name taken\n\turequire.NotPanics(t, func() {\n\t\tRegister(bob)\n\t})\n\n\tuassert.PanicsWithMessage(t, susers.ErrNameTaken.Error(), func() {\n\t\tRegister(bob) // already registered\n\t})\n}\n\nfunc TestRegister_InvalidPayment(t *testing.T) {\n\ttesting.SetRealm(std.NewUserRealm(bobAddr))\n\ttesting.SetOriginCaller(bobAddr)\n\n\ttesting.SetOriginSend(std.NewCoins(std.NewCoin(\"ugnot\", 12))) // invalid payment amount\n\n\tuassert.PanicsWithMessage(t, ErrInvalidPayment.Error(), func() {\n\t\tRegister(alice)\n\t})\n}\n"},{"name":"z_0_prop1_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/dao\"\n\t\"gno.land/p/demo/testutils\"\n\n\tusers \"gno.land/r/gnoland/users/v1\"\n\t_ \"gno.land/r/gov/dao/init\" // so that the govdao.GovDAO initializer is executed\n\tgovdao \"gno.land/r/gov/dao/v2\"\n\tsusers \"gno.land/r/sys/users\"\n)\n\n// Test updating a name via GovDAO\n\nfunc init() {\n\tc := std.OriginCaller()\n\talice := testutils.TestAddress(\"alice\")\n\n\t// Register alice\n\ttesting.SetOriginCaller(alice)\n\ttesting.SetRealm(std.NewUserRealm(alice))\n\tusers.Register(\"alice123\")\n\n\t// Prop to change name\n\ttesting.SetOriginCaller(c)\n\ttesting.SetRealm(std.NewUserRealm(c))\n\tex := users.ProposeNewName(alice, \"alice_new123\")\n\n\t// Create a proposal\n\tprop := dao.ProposalRequest{\n\t\tTitle:       \"Change alice's name!\",\n\t\tDescription: \"\",\n\t\tExecutor:    ex,\n\t}\n\n\tgovdao.GovDAO.Propose(prop)\n}\n\nfunc main() {\n\tprintln(\"--\")\n\tprintln(govdao.Render(\"\"))\n\tprintln(\"--\")\n\tprintln(govdao.Render(\"0\"))\n\tprintln(\"--\")\n\tgovdao.GovDAO.VoteOnProposal(0, \"YES\")\n\tprintln(\"--\")\n\tprintln(govdao.Render(\"0\"))\n\tprintln(\"--\")\n\tgovdao.GovDAO.ExecuteProposal(0)\n\tprintln(\"--\")\n\tprintln(govdao.Render(\"0\"))\n\n\tdata, _ := susers.ResolveName(\"alice_new123\")\n\tprintln(data.Addr())\n}\n\n// Output:\n// --\n// # GovDAO Proposals\n//\n// ## [Prop #0 - Change alice's name!](/r/gov/dao/v2:0)\n//\n// **Status: ACTIVE**\n//\n// **Author: g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm**\n//\n//\n// --\n// # Proposal #0 - Change alice's name!\n//\n// ## Description\n//\n// No description provided.\n//\n// ## Proposal information\n//\n// **Status: ACTIVE**\n//\n// **Voting stats:**\n// - YES 0 (0%)\n// - NO 0 (0%)\n// - ABSTAIN 0 (0%)\n// - MISSING VOTES 10 (100%)\n//\n//\n// **Threshold met: FALSE**\n//\n// **Author: g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm**\n//\n// ### Actions\n//\n// #### [[Vote YES](/r/gov/dao/v2$help\u0026func=VoteOnProposal\u0026id=0\u0026option=YES)] - [[Vote NO](/r/gov/dao/v2$help\u0026func=VoteOnProposal\u0026id=0\u0026option=NO)] - [[Vote ABSTAIN](/r/gov/dao/v2$help\u0026func=VoteOnProposal\u0026id=0\u0026option=ABSTAIN)]\n//\n//\n// --\n// --\n// # Proposal #0 - Change alice's name!\n//\n// ## Description\n//\n// No description provided.\n//\n// ## Proposal information\n//\n// **Status: ACCEPTED**\n//\n// **Voting stats:**\n// - YES 10 (100%)\n// - NO 0 (0%)\n// - ABSTAIN 0 (0%)\n// - MISSING VOTES 0 (0%)\n//\n//\n// **Threshold met: TRUE**\n//\n// **Author: g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm**\n//\n// ### Actions\n//\n// The voting period for this proposal is over.\n//\n//\n// --\n// --\n// # Proposal #0 - Change alice's name!\n//\n// ## Description\n//\n// No description provided.\n//\n// ## Proposal information\n//\n// **Status: EXECUTION SUCCESSFUL**\n//\n// **Voting stats:**\n// - YES 10 (100%)\n// - NO 0 (0%)\n// - ABSTAIN 0 (0%)\n// - MISSING VOTES 0 (0%)\n//\n//\n// **Threshold met: TRUE**\n//\n// **Author: g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm**\n//\n// ### Actions\n//\n// The voting period for this proposal is over.\n//\n//\n// g1v9kxjcm9ta047h6lta047h6lta047h6lzd40gh\n\n// Events:\n// [\n//   {\n//     \"type\": \"Registered\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"name\",\n//         \"value\": \"alice123\"\n//       },\n//       {\n//         \"key\": \"address\",\n//         \"value\": \"g1v9kxjcm9ta047h6lta047h6lta047h6lzd40gh\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/sys/users\",\n//     \"func\": \"RegisterUser\"\n//   },\n//   {\n//     \"type\": \"Registeration\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"address\",\n//         \"value\": \"g1v9kxjcm9ta047h6lta047h6lta047h6lzd40gh\"\n//       },\n//       {\n//         \"key\": \"name\",\n//         \"value\": \"alice123\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/gnoland/users/v1\",\n//     \"func\": \"Register\"\n//   },\n//   {\n//     \"type\": \"ProposalAdded\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"proposal-id\",\n//         \"value\": \"0\"\n//       },\n//       {\n//         \"key\": \"proposal-author\",\n//         \"value\": \"g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/gov/dao/v2\",\n//     \"func\": \"EmitProposalAdded\"\n//   },\n//   {\n//     \"type\": \"VoteAdded\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"proposal-id\",\n//         \"value\": \"0\"\n//       },\n//       {\n//         \"key\": \"author\",\n//         \"value\": \"g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm\"\n//       },\n//       {\n//         \"key\": \"option\",\n//         \"value\": \"YES\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/gov/dao/v2\",\n//     \"func\": \"EmitVoteAdded\"\n//   },\n//   {\n//     \"type\": \"ProposalAccepted\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"proposal-id\",\n//         \"value\": \"0\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/gov/dao/v2\",\n//     \"func\": \"EmitProposalAccepted\"\n//   },\n//   {\n//     \"type\": \"Updated\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"alias\",\n//         \"value\": \"alice_new123\"\n//       },\n//       {\n//         \"key\": \"address\",\n//         \"value\": \"g1v9kxjcm9ta047h6lta047h6lta047h6lzd40gh\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/sys/users\",\n//     \"func\": \"UpdateName\"\n//   },\n//   {\n//     \"type\": \"ProposalExecuted\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"proposal-id\",\n//         \"value\": \"0\"\n//       },\n//       {\n//         \"key\": \"exec-status\",\n//         \"value\": \"accepted\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/gov/dao/v2\",\n//     \"func\": \"ExecuteProposal\"\n//   }\n// ]\n"},{"name":"z_1_prop2_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/dao\"\n\t\"gno.land/p/demo/testutils\"\n\n\tusers \"gno.land/r/gnoland/users/v1\"\n\t_ \"gno.land/r/gov/dao/init\" // so that the govdao.GovDAO initializer is executed\n\tgovdao \"gno.land/r/gov/dao/v2\"\n\tsusers \"gno.land/r/sys/users\"\n)\n\n// Test updating a name via GovDAO\n\nfunc init() {\n\tc := std.OriginCaller()\n\talice := testutils.TestAddress(\"alice\")\n\n\t// Register alice\n\ttesting.SetOriginCaller(alice)\n\ttesting.SetRealm(std.NewUserRealm(alice))\n\tusers.Register(\"alice123\")\n\n\t// Prop to change name\n\ttesting.SetOriginCaller(c)\n\ttesting.SetRealm(std.NewUserRealm(c))\n\tex := users.ProposeDeleteUser(alice)\n\n\t// Create a proposal\n\tprop := dao.ProposalRequest{\n\t\tTitle:       \"Change alice's name!\",\n\t\tDescription: \"\",\n\t\tExecutor:    ex,\n\t}\n\n\tgovdao.GovDAO.Propose(prop)\n}\n\nfunc main() {\n\tprintln(\"--\")\n\tprintln(govdao.Render(\"\"))\n\tprintln(\"--\")\n\tprintln(govdao.Render(\"0\"))\n\tprintln(\"--\")\n\tgovdao.GovDAO.VoteOnProposal(0, \"YES\")\n\tprintln(\"--\")\n\tprintln(govdao.Render(\"0\"))\n\tprintln(\"--\")\n\tgovdao.GovDAO.ExecuteProposal(0)\n\tprintln(\"--\")\n\tprintln(govdao.Render(\"0\"))\n\n\tdata, _ := susers.ResolveName(\"alice123\")\n\tif data == nil {\n\t\tprintln(\"Successfully deleted alice\")\n\t}\n}\n\n// Output:\n// --\n// # GovDAO Proposals\n//\n// ## [Prop #0 - Change alice's name!](/r/gov/dao/v2:0)\n//\n// **Status: ACTIVE**\n//\n// **Author: g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm**\n//\n//\n// --\n// # Proposal #0 - Change alice's name!\n//\n// ## Description\n//\n// No description provided.\n//\n// ## Proposal information\n//\n// **Status: ACTIVE**\n//\n// **Voting stats:**\n// - YES 0 (0%)\n// - NO 0 (0%)\n// - ABSTAIN 0 (0%)\n// - MISSING VOTES 10 (100%)\n//\n//\n// **Threshold met: FALSE**\n//\n// **Author: g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm**\n//\n// ### Actions\n//\n// #### [[Vote YES](/r/gov/dao/v2$help\u0026func=VoteOnProposal\u0026id=0\u0026option=YES)] - [[Vote NO](/r/gov/dao/v2$help\u0026func=VoteOnProposal\u0026id=0\u0026option=NO)] - [[Vote ABSTAIN](/r/gov/dao/v2$help\u0026func=VoteOnProposal\u0026id=0\u0026option=ABSTAIN)]\n//\n//\n// --\n// --\n// # Proposal #0 - Change alice's name!\n//\n// ## Description\n//\n// No description provided.\n//\n// ## Proposal information\n//\n// **Status: ACCEPTED**\n//\n// **Voting stats:**\n// - YES 10 (100%)\n// - NO 0 (0%)\n// - ABSTAIN 0 (0%)\n// - MISSING VOTES 0 (0%)\n//\n//\n// **Threshold met: TRUE**\n//\n// **Author: g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm**\n//\n// ### Actions\n//\n// The voting period for this proposal is over.\n//\n//\n// --\n// --\n// # Proposal #0 - Change alice's name!\n//\n// ## Description\n//\n// No description provided.\n//\n// ## Proposal information\n//\n// **Status: EXECUTION SUCCESSFUL**\n//\n// **Voting stats:**\n// - YES 10 (100%)\n// - NO 0 (0%)\n// - ABSTAIN 0 (0%)\n// - MISSING VOTES 0 (0%)\n//\n//\n// **Threshold met: TRUE**\n//\n// **Author: g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm**\n//\n// ### Actions\n//\n// The voting period for this proposal is over.\n//\n//\n// Successfully deleted alice\n\n// Events:\n// [\n//   {\n//     \"type\": \"Registered\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"name\",\n//         \"value\": \"alice123\"\n//       },\n//       {\n//         \"key\": \"address\",\n//         \"value\": \"g1v9kxjcm9ta047h6lta047h6lta047h6lzd40gh\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/sys/users\",\n//     \"func\": \"RegisterUser\"\n//   },\n//   {\n//     \"type\": \"Registeration\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"address\",\n//         \"value\": \"g1v9kxjcm9ta047h6lta047h6lta047h6lzd40gh\"\n//       },\n//       {\n//         \"key\": \"name\",\n//         \"value\": \"alice123\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/gnoland/users/v1\",\n//     \"func\": \"Register\"\n//   },\n//   {\n//     \"type\": \"ProposalAdded\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"proposal-id\",\n//         \"value\": \"0\"\n//       },\n//       {\n//         \"key\": \"proposal-author\",\n//         \"value\": \"g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/gov/dao/v2\",\n//     \"func\": \"EmitProposalAdded\"\n//   },\n//   {\n//     \"type\": \"VoteAdded\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"proposal-id\",\n//         \"value\": \"0\"\n//       },\n//       {\n//         \"key\": \"author\",\n//         \"value\": \"g1wymu47drhr0kuq2098m792lytgtj2nyx77yrsm\"\n//       },\n//       {\n//         \"key\": \"option\",\n//         \"value\": \"YES\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/gov/dao/v2\",\n//     \"func\": \"EmitVoteAdded\"\n//   },\n//   {\n//     \"type\": \"ProposalAccepted\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"proposal-id\",\n//         \"value\": \"0\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/gov/dao/v2\",\n//     \"func\": \"EmitProposalAccepted\"\n//   },\n//   {\n//     \"type\": \"Deleted\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"address\",\n//         \"value\": \"g1v9kxjcm9ta047h6lta047h6lta047h6lzd40gh\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/sys/users\",\n//     \"func\": \"Delete\"\n//   },\n//   {\n//     \"type\": \"ProposalExecuted\",\n//     \"attrs\": [\n//       {\n//         \"key\": \"proposal-id\",\n//         \"value\": \"0\"\n//       },\n//       {\n//         \"key\": \"exec-status\",\n//         \"value\": \"accepted\"\n//       }\n//     ],\n//     \"pkg_path\": \"gno.land/r/gov/dao/v2\",\n//     \"func\": \"ExecuteProposal\"\n//   }\n// ]\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"80000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"0+Zar3bDa3zXEszguZj4nEEnYYZLGtYsgbM8Vb6iCEN/EdR091Cxk5mpXPIasne4rlQuCUIw68shq7cLaAPBAw=="}],"memo":""},"metadata":{"timestamp":"1742839524"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fjh9y7ausp27dqsdq0qrcsnmgvwm6829v2au7d","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"6vys4D5tx8ObotPxXfWvUoWWh7hO5SLzZNMZ5kosEaoVFHBoHUa99j06jL3VqGEgk+9HJD+8iiOWSgblwQd4AQ=="}],"memo":""},"metadata":{"timestamp":"1742868054"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fjh9y7ausp27dqsdq0qrcsnmgvwm6829v2au7d","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"GKu343YXKqqd4wF9tnGNyd1k4ToNkkTdYvjAKgGz/SLYe47E6deGE5GgKw0eX4G5Elhn9MQEplTQhcXvt8mCBw=="}],"memo":""},"metadata":{"timestamp":"1742868355"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fjh9y7ausp27dqsdq0qrcsnmgvwm6829v2au7d","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["grepsuzette001"]}],"fee":{"gas_wanted":"14476306","gas_fee":"30159ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"S8CiIj2ocXdCvNDP2bBoWwUz1z/W+vrdtxFJeIlYh10XAOLOnH8UGlJtVzuGjzXMeLaTuiX7U9gNx4rZlqO3Cg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1742868893"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15nw3tn7623tr48j0awzhg2757lf5yf4mxf9htg","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ZSin2HErjB1d/O2Pj3TDnShyEt69Wgl/KOLIc8mHV8ldZACznvwOgWmKiKfhbOt80k+yAm66NrEOCj670UYEAw=="}],"memo":""},"metadata":{"timestamp":"1742899071"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1m35x6sdxgm38tfrv8k7c386x7puascy7y2ztyh","package":{"name":"home","path":"gno.land/r/thomas000/home","files":[{"name":"home.gno","body":"package home\n\nimport \"gno.land/p/moul/md\"\n\nfunc Render() string {\n\tcontent := md.H1(\"Thomas' Home\")\n\tcontent += md.Paragraph(\"Hello there, I'm Thomas and I'm a blockchain engineer at All-In-Bits.\")\n\tcontent += md.H3(\"Project's list\")\n\tcontent += md.BulletList([]string{\"Emeris\", \"Starport/Ignite\", \"Gno.land\", \"Decentralists\", \"AtomOne\"})\n\treturn content\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"s9Z9VdcL53djIYsvsFoUby00x6a3n0D7LkJ0q6pdCPMGyUnl5xc3uieZPs5IbyzkMM6IAZx32VklCp2RJS+LDQ=="}],"memo":""},"metadata":{"timestamp":"1742944095"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g13qpel38unrma0nyrj29tr903pq7dpeecsmlu8z","amount":"1ugnot"}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"2scv1gf5GuSXCbcr5QAKG031wGLyeHcIyAx0DgRoOFVHqNRLqUKl93zSdruZc+qJIq3gtvOPkCokc6V16F33BA=="}],"memo":""},"metadata":{"timestamp":"1742967213"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g13qpel38unrma0nyrj29tr903pq7dpeecsmlu8z","amount":"1ugnot"}],"fee":{"gas_wanted":"100000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"aLukY1pv1n13x+ztFDVoBpDPVjjgHtV5Vh8o/weleYhg8T1DvLQU2CwqyHKVqJ0VsCeDOHNEm6fYKhuu3GK+Bg=="}],"memo":""},"metadata":{"timestamp":"1742967303"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g13qpel38unrma0nyrj29tr903pq7dpeecsmlu8z","amount":"1ugnot"}],"fee":{"gas_wanted":"200000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"6Y37d0KJ/qb/2pTVNGPLG7kruv3pQSoQS3cuAC/Ncy7eMtaRBgxeRe9sOXB6de6R7G2dDcIVDD/qpeMHFhuFCQ=="}],"memo":""},"metadata":{"timestamp":"1742967313"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g13qpel38unrma0nyrj29tr903pq7dpeecsmlu8z","amount":"1ugnot"}],"fee":{"gas_wanted":"300000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"6B5pRMx74xov54B2yMiuRm6m14FYOkdL3ai0cQJw3eL4amI7vtgMxZx2tX9Dqxd4Nawjv0x1AwSucHKTps5ZBw=="}],"memo":""},"metadata":{"timestamp":"1742967323"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g13qpel38unrma0nyrj29tr903pq7dpeecsmlu8z","amount":"1ugnot"}],"fee":{"gas_wanted":"400000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"4ZbQg3hfMTPEiSfDIZxlRfU4f8i7GkCtasXH6eaFLlVmCi4sQ9bdPjwUZuRkH+7quWGVFmPyy3J8owGDmAarCg=="}],"memo":""},"metadata":{"timestamp":"1742967333"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"testdao","path":"gno.land/r/meeshell222/testdao","files":[{"name":"package.gno","body":"package testdao\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n)\n\n// PathSeparator defines the DAO path separator.\nconst PathSeparator = \"/\"\n\ntype (\n\t// Role defines the type for DAO roles.\n\tRole string\n\n\t// Roles defines the type for a list of DAO roles.\n\tRoles []Role\n)\n\n// String returns the role as a string.\nfunc (r Role) String() string {\n\treturn string(r)\n}\n\n// NewMember creates a new DAO member.\nfunc NewMember(addr std.Address, roles ...Role) Member {\n\treturn Member{\n\t\tAddress: addr,\n\t\tRoles:   roles,\n\t}\n}\n\n// Member defines a DAO member.\ntype Member struct {\n\t// Address is the member account address.\n\tAddress std.Address\n\n\t// Roles contains the optional list of roles that the member belongs to.\n\tRoles Roles\n}\n\n// String returns a string representation of the member.\nfunc (m Member) String() string {\n\tif len(m.Roles) == 0 {\n\t\treturn m.Address.String()\n\t}\n\n\tvar roles []string\n\tfor _, r := range m.Roles {\n\t\troles = append(roles, string(r))\n\t}\n\treturn m.Address.String() + \" \" + strings.Join(roles, \", \")\n}\n\n// HasRole checks if the member belongs to a specific role.\nfunc (m Member) HasRole(r Role) bool {\n\tfor _, role := range m.Roles {\n\t\tif role == r {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// Option configures DAO.\ntype Option func(*DAO)\n\n// AssignAsSuperCouncil makes the DAO a super council.\nfunc AssignAsSuperCouncil() Option {\n\treturn func(dao *DAO) {\n\t\tdao.isSuperCouncil = true\n\t}\n}\n\n// WithSubDAO assigns sub DAO to a DAO.\nfunc WithSubDAO(sub *DAO) Option {\n\treturn func(dao *DAO) {\n\t\tsub.parent = dao\n\t\tdao.children = append(dao.children, sub)\n\t}\n}\n\n// WithMembers assigns members to a DAO.\nfunc WithMembers(members ...Member) Option {\n\treturn func(dao *DAO) {\n\t\tdao.members = members\n\t}\n}\n\n// WithManifest assigns a manifest to a DAO.\n// Manifest should describe the purpose of the DAO.\nfunc WithManifest(manifest string) Option {\n\treturn func(dao *DAO) {\n\t\tdao.manifest = manifest\n\t}\n}\n\n// New creates a new DAO.\nfunc New(name, title string, options ...Option) (*DAO, error) {\n\tname = strings.TrimSpace(name)\n\tif name == \"\" {\n\t\treturn nil, errors.New(\"DAO name is required\")\n\t}\n\n\tif !IsSlug(name) {\n\t\treturn nil, errors.New(`DAO name is not valid, only letters from \"a\" to \"z\", numbers, \"-\" and \"_\" are allowed`)\n\t}\n\n\ttitle = strings.TrimSpace(title)\n\tif title == \"\" {\n\t\treturn nil, errors.New(\"DAO title is required\")\n\t}\n\n\tdao := \u0026DAO{\n\t\tname:      name,\n\t\ttitle:     title,\n\t\tcreatedAt: time.Now(),\n\t}\n\n\tfor _, apply := range options {\n\t\tapply(dao)\n\t}\n\n\treturn dao, nil\n}\n\n// MustNew creates a new DAO.\n// The function panics if any of the arguments is not valid.\nfunc MustNew(name, title string, options ...Option) *DAO {\n\tdao, err := New(name, title, options...)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn dao\n}\n\n// DAO is a decentralized autonomous organization.\ntype DAO struct {\n\tname           string\n\ttitle          string\n\tmanifest       string\n\tisSuperCouncil bool\n\tisLocked       bool\n\tlockReason     string\n\tparent         *DAO\n\tchildren       []*DAO\n\tmembers        []Member\n\tcreatedAt      time.Time\n}\n\n// Name returns the name of the DAO.\nfunc (dao DAO) Name() string {\n\treturn dao.name\n}\n\n// Title returns the title of the DAO.\nfunc (dao DAO) Title() string {\n\treturn dao.title\n}\n\n// Manifest returns the manifest of the DAO.\nfunc (dao DAO) Manifest() string {\n\treturn dao.manifest\n}\n\n// SetManifest sets the manifest of the DAO.\nfunc (dao *DAO) SetManifest(s string) {\n\tdao.manifest = s\n}\n\n// CreatedAt returns the creation time of the DAO.\nfunc (dao DAO) CreatedAt() time.Time {\n\treturn dao.createdAt\n}\n\n// Parent returns the parent DAO of the sub DAO.\n// The result is nil for the DAO at the root of the DAO tree.\nfunc (dao DAO) Parent() *DAO {\n\treturn dao.parent\n}\n\n// Path returns the path of the DAO.\nfunc (dao DAO) Path() string {\n\tif dao.parent == nil {\n\t\treturn dao.name\n\t}\n\treturn dao.parent.Path() + PathSeparator + dao.name\n}\n\n// SubDAOs returns the first level sub DAOs.\nfunc (dao DAO) SubDAOs() []*DAO {\n\treturn dao.children\n}\n\n// Members returns the members of the DAOs.\nfunc (dao DAO) Members() []Member {\n\treturn dao.members\n}\n\n// LockReason returns a string with the reason the DAO is locked.\nfunc (dao DAO) LockReason() string {\n\treturn dao.lockReason\n}\n\n// IsSuperCouncil checks if the DAO is a super council.\nfunc (dao DAO) IsSuperCouncil() bool {\n\treturn dao.isSuperCouncil\n}\n\n// IsLocked checks if the DAO is locked.\nfunc (dao DAO) IsLocked() bool {\n\treturn dao.isLocked\n}\n\n// Lock locks the DAO.\nfunc (dao *DAO) Lock(reason string) {\n\tdao.lockReason = reason\n\tdao.isLocked = true\n}\n\n// HasParent checks if a DAO is a parent of this DAO.\nfunc (dao DAO) HasParent(parent *DAO) bool {\n\tif parent == nil {\n\t\treturn false\n\t}\n\treturn strings.HasPrefix(dao.Path(), parent.Path())\n}\n\n// HasMember checks if a member is part of the DAO.\nfunc (dao DAO) HasMember(addr std.Address) bool {\n\tfor _, m := range dao.members {\n\t\tif m.Address == addr {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// AddMember adds a member to the DAO.\n// Caller must check the member before adding to avoid duplications.\nfunc (dao *DAO) AddMember(m Member) {\n\tdao.members = append(dao.members, m)\n}\n\n// GetMember gets a member of the DAO.\nfunc (dao DAO) GetMember(addr std.Address) (Member, bool) {\n\tfor _, m := range dao.members {\n\t\tif m.Address == addr {\n\t\t\treturn m, true\n\t\t}\n\t}\n\treturn Member{}, false\n}\n\n// RemoveMember removes a member of the DAO.\nfunc (dao *DAO) RemoveMember(addr std.Address) bool {\n\tfor i, m := range dao.members {\n\t\tif m.Address == addr {\n\t\t\tdao.members = append(dao.members[:i], dao.members[i+1:]...)\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// AddSubDAO adds a sub DAO to the DAO.\nfunc (dao *DAO) AddSubDAO(sub *DAO) bool {\n\tif sub == nil {\n\t\treturn false\n\t}\n\n\tfor _, n := range dao.children {\n\t\tif n.name == sub.name {\n\t\t\treturn false\n\t\t}\n\t}\n\n\tsub.parent = dao\n\tdao.children = append(dao.children, sub)\n\treturn true\n}\n\n// GetDAO get a DAO by path.\nfunc (dao *DAO) GetDAO(path string) (_ *DAO, found bool) {\n\tif path == \"\" {\n\t\treturn nil, false\n\t}\n\n\tif path == dao.name {\n\t\treturn dao, true\n\t}\n\n\t// Make sure that current node is not present at the beginning of the path\n\tpath = strings.TrimPrefix(path, dao.name+PathSeparator)\n\n\t// Split DAO path in child name and relative sub path\n\tparts := strings.SplitN(path, PathSeparator, 2)\n\tchildName := parts[0]\n\n\tfor _, sub := range dao.children {\n\t\tif sub.name != childName {\n\t\t\tcontinue\n\t\t}\n\n\t\tif len(parts) \u003e 1 {\n\t\t\t// Traverse node children when a sub node path is available\n\t\t\treturn sub.GetDAO(parts[1])\n\t\t}\n\t\treturn sub, true\n\t}\n\n\treturn nil, false\n}\n\n// RemoveSubDAO removes a sub DAO.\n// The sub DAO must be a first level children of the DAO.\nfunc (dao *DAO) RemoveSubDAO(name string) bool {\n\tfor i, sub := range dao.children {\n\t\tif sub.name == name {\n\t\t\tdao.children = append(dao.children[:i], dao.children[i+1:]...)\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// IsRoot checks if the DAO is the DAO tree root.\nfunc (dao DAO) IsRoot() bool {\n\treturn dao.parent == nil\n}\n\n// ParseStringToMembers parses a string of member addresses and roles.\n// String should have one or more lines where each line should contain an\n// address optionally followed by one or more roles.\n// Example multi line string:\n//\n//\tg1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun roleA\n//\tg1e5hud66rs7ye4zgeqmqvwfhurs2mnf408hdqcl\n//\tg1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5 roleB roleA\n//\n// Addresses are validated after being parsed.\n// Roles must be validated by the caller to make sure the names are valid.\nfunc ParseStringToMembers(s string) ([]Member, error) {\n\tvar members []Member\n\tfor _, line := range strings.Split(s, \"\\n\") {\n\t\tline = strings.TrimSpace(line)\n\t\tif line == \"\" {\n\t\t\t// Skip empty lines\n\t\t\tcontinue\n\t\t}\n\n\t\tvar (\n\t\t\troles  []Role\n\t\t\tfields = strings.Fields(line)\n\t\t\taddr   = std.Address(strings.TrimSpace(fields[0]))\n\t\t)\n\n\t\tif !addr.IsValid() {\n\t\t\treturn nil, errors.New(\"invalid member address: \" + EscapeHTML(addr.String()))\n\t\t}\n\n\t\tfor _, v := range fields[1:] {\n\t\t\troles = appendRole(roles, strings.TrimSpace(v))\n\t\t}\n\n\t\tmembers = append(members, NewMember(addr, roles...))\n\t}\n\treturn members, nil\n}\n\n// MustParseStringToMembers parses a string of member addresses and roles.\n// String should have one or more lines where each line should contain an\n// address optionally followed by one or more roles.\n// Example multi line string:\n//\n//\tg1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun roleA\n//\tg1e5hud66rs7ye4zgeqmqvwfhurs2mnf408hdqcl\n//\tg1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5 roleB roleA\n//\n// Addresses are validated after being parsed.\n// Roles must be validated by the caller to make sure the names are valid.\nfunc MustParseStringToMembers(s string) []Member {\n\tmembers, err := ParseStringToMembers(s)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn members\n}\n\n// appendRole append a role if it doesn't exists within the list of roles.\nfunc appendRole(roles []Role, name string) []Role {\n\tfor _, r := range roles {\n\t\tif string(r) == name {\n\t\t\treturn roles\n\t\t}\n\t}\n\treturn append(roles, Role(name))\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Y8pReKimhTrgq/2JA75tt9zmpV6KqoUdf+wZ0YrEwHELMlTmlOP/q/am4GDKIqGwJim3fm4MnJ4PCFXEREqTAw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742996817"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"pWd/uWNDp2Z/wAIEGm7JzD4bvGT2XpJ6qsY69Iu+H1KSdkpod9b2QxVpb969oUqnLQpnzcPD48fkCi/XUNebCg=="}],"memo":""},"metadata":{"timestamp":"1742996872"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"pWd/uWNDp2Z/wAIEGm7JzD4bvGT2XpJ6qsY69Iu+H1KSdkpod9b2QxVpb969oUqnLQpnzcPD48fkCi/XUNebCg=="}],"memo":""},"metadata":{"timestamp":"1742996902"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"pWd/uWNDp2Z/wAIEGm7JzD4bvGT2XpJ6qsY69Iu+H1KSdkpod9b2QxVpb969oUqnLQpnzcPD48fkCi/XUNebCg=="}],"memo":""},"metadata":{"timestamp":"1742996917"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"pWd/uWNDp2Z/wAIEGm7JzD4bvGT2XpJ6qsY69Iu+H1KSdkpod9b2QxVpb969oUqnLQpnzcPD48fkCi/XUNebCg=="}],"memo":""},"metadata":{"timestamp":"1742996977"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"testdao","path":"gno.land/r/meeshell222/testdao","files":[{"name":"package.gno","body":"package testdao\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n)\n\n// PathSeparator defines the DAO path separator.\nconst PathSeparator = \"/\"\n\ntype (\n\t// Role defines the type for DAO roles.\n\tRole string\n\n\t// Roles defines the type for a list of DAO roles.\n\tRoles []Role\n)\n\n// String returns the role as a string.\nfunc (r Role) String() string {\n\treturn string(r)\n}\n\n// NewMember creates a new DAO member.\nfunc NewMember(addr std.Address, roles ...Role) Member {\n\treturn Member{\n\t\tAddress: addr,\n\t\tRoles:   roles,\n\t}\n}\n\n// Member defines a DAO member.\ntype Member struct {\n\t// Address is the member account address.\n\tAddress std.Address\n\n\t// Roles contains the optional list of roles that the member belongs to.\n\tRoles Roles\n}\n\n// String returns a string representation of the member.\nfunc (m Member) String() string {\n\tif len(m.Roles) == 0 {\n\t\treturn m.Address.String()\n\t}\n\n\tvar roles []string\n\tfor _, r := range m.Roles {\n\t\troles = append(roles, string(r))\n\t}\n\treturn m.Address.String() + \" \" + strings.Join(roles, \", \")\n}\n\n// HasRole checks if the member belongs to a specific role.\nfunc (m Member) HasRole(r Role) bool {\n\tfor _, role := range m.Roles {\n\t\tif role == r {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// Option configures DAO.\ntype Option func(*DAO)\n\n// AssignAsSuperCouncil makes the DAO a super council.\nfunc AssignAsSuperCouncil() Option {\n\treturn func(dao *DAO) {\n\t\tdao.isSuperCouncil = true\n\t}\n}\n\n// WithSubDAO assigns sub DAO to a DAO.\nfunc WithSubDAO(sub *DAO) Option {\n\treturn func(dao *DAO) {\n\t\tsub.parent = dao\n\t\tdao.children = append(dao.children, sub)\n\t}\n}\n\n// WithMembers assigns members to a DAO.\nfunc WithMembers(members ...Member) Option {\n\treturn func(dao *DAO) {\n\t\tdao.members = members\n\t}\n}\n\n// WithManifest assigns a manifest to a DAO.\n// Manifest should describe the purpose of the DAO.\nfunc WithManifest(manifest string) Option {\n\treturn func(dao *DAO) {\n\t\tdao.manifest = manifest\n\t}\n}\n\n// New creates a new DAO.\nfunc New(name, title string, options ...Option) (*DAO, error) {\n\tname = strings.TrimSpace(name)\n\tif name == \"\" {\n\t\treturn nil, errors.New(\"DAO name is required\")\n\t}\n\n\tif !IsSlug(name) {\n\t\treturn nil, errors.New(`DAO name is not valid, only letters from \"a\" to \"z\", numbers, \"-\" and \"_\" are allowed`)\n\t}\n\n\ttitle = strings.TrimSpace(title)\n\tif title == \"\" {\n\t\treturn nil, errors.New(\"DAO title is required\")\n\t}\n\n\tdao := \u0026DAO{\n\t\tname:      name,\n\t\ttitle:     title,\n\t\tcreatedAt: time.Now(),\n\t}\n\n\tfor _, apply := range options {\n\t\tapply(dao)\n\t}\n\n\treturn dao, nil\n}\n\n// MustNew creates a new DAO.\n// The function panics if any of the arguments is not valid.\nfunc MustNew(name, title string, options ...Option) *DAO {\n\tdao, err := New(name, title, options...)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn dao\n}\n\n// DAO is a decentralized autonomous organization.\ntype DAO struct {\n\tname           string\n\ttitle          string\n\tmanifest       string\n\tisSuperCouncil bool\n\tisLocked       bool\n\tlockReason     string\n\tparent         *DAO\n\tchildren       []*DAO\n\tmembers        []Member\n\tcreatedAt      time.Time\n}\n\n// Name returns the name of the DAO.\nfunc (dao DAO) Name() string {\n\treturn dao.name\n}\n\n// Title returns the title of the DAO.\nfunc (dao DAO) Title() string {\n\treturn dao.title\n}\n\n// Manifest returns the manifest of the DAO.\nfunc (dao DAO) Manifest() string {\n\treturn dao.manifest\n}\n\n// SetManifest sets the manifest of the DAO.\nfunc (dao *DAO) SetManifest(s string) {\n\tdao.manifest = s\n}\n\n// CreatedAt returns the creation time of the DAO.\nfunc (dao DAO) CreatedAt() time.Time {\n\treturn dao.createdAt\n}\n\n// Parent returns the parent DAO of the sub DAO.\n// The result is nil for the DAO at the root of the DAO tree.\nfunc (dao DAO) Parent() *DAO {\n\treturn dao.parent\n}\n\n// Path returns the path of the DAO.\nfunc (dao DAO) Path() string {\n\tif dao.parent == nil {\n\t\treturn dao.name\n\t}\n\treturn dao.parent.Path() + PathSeparator + dao.name\n}\n\n// SubDAOs returns the first level sub DAOs.\nfunc (dao DAO) SubDAOs() []*DAO {\n\treturn dao.children\n}\n\n// Members returns the members of the DAOs.\nfunc (dao DAO) Members() []Member {\n\treturn dao.members\n}\n\n// LockReason returns a string with the reason the DAO is locked.\nfunc (dao DAO) LockReason() string {\n\treturn dao.lockReason\n}\n\n// IsSuperCouncil checks if the DAO is a super council.\nfunc (dao DAO) IsSuperCouncil() bool {\n\treturn dao.isSuperCouncil\n}\n\n// IsLocked checks if the DAO is locked.\nfunc (dao DAO) IsLocked() bool {\n\treturn dao.isLocked\n}\n\n// Lock locks the DAO.\nfunc (dao *DAO) Lock(reason string) {\n\tdao.lockReason = reason\n\tdao.isLocked = true\n}\n\n// HasParent checks if a DAO is a parent of this DAO.\nfunc (dao DAO) HasParent(parent *DAO) bool {\n\tif parent == nil {\n\t\treturn false\n\t}\n\treturn strings.HasPrefix(dao.Path(), parent.Path())\n}\n\n// HasMember checks if a member is part of the DAO.\nfunc (dao DAO) HasMember(addr std.Address) bool {\n\tfor _, m := range dao.members {\n\t\tif m.Address == addr {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// AddMember adds a member to the DAO.\n// Caller must check the member before adding to avoid duplications.\nfunc (dao *DAO) AddMember(m Member) {\n\tdao.members = append(dao.members, m)\n}\n\n// GetMember gets a member of the DAO.\nfunc (dao DAO) GetMember(addr std.Address) (Member, bool) {\n\tfor _, m := range dao.members {\n\t\tif m.Address == addr {\n\t\t\treturn m, true\n\t\t}\n\t}\n\treturn Member{}, false\n}\n\n// RemoveMember removes a member of the DAO.\nfunc (dao *DAO) RemoveMember(addr std.Address) bool {\n\tfor i, m := range dao.members {\n\t\tif m.Address == addr {\n\t\t\tdao.members = append(dao.members[:i], dao.members[i+1:]...)\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// AddSubDAO adds a sub DAO to the DAO.\nfunc (dao *DAO) AddSubDAO(sub *DAO) bool {\n\tif sub == nil {\n\t\treturn false\n\t}\n\n\tfor _, n := range dao.children {\n\t\tif n.name == sub.name {\n\t\t\treturn false\n\t\t}\n\t}\n\n\tsub.parent = dao\n\tdao.children = append(dao.children, sub)\n\treturn true\n}\n\n// GetDAO get a DAO by path.\nfunc (dao *DAO) GetDAO(path string) (_ *DAO, found bool) {\n\tif path == \"\" {\n\t\treturn nil, false\n\t}\n\n\tif path == dao.name {\n\t\treturn dao, true\n\t}\n\n\t// Make sure that current node is not present at the beginning of the path\n\tpath = strings.TrimPrefix(path, dao.name+PathSeparator)\n\n\t// Split DAO path in child name and relative sub path\n\tparts := strings.SplitN(path, PathSeparator, 2)\n\tchildName := parts[0]\n\n\tfor _, sub := range dao.children {\n\t\tif sub.name != childName {\n\t\t\tcontinue\n\t\t}\n\n\t\tif len(parts) \u003e 1 {\n\t\t\t// Traverse node children when a sub node path is available\n\t\t\treturn sub.GetDAO(parts[1])\n\t\t}\n\t\treturn sub, true\n\t}\n\n\treturn nil, false\n}\n\n// RemoveSubDAO removes a sub DAO.\n// The sub DAO must be a first level children of the DAO.\nfunc (dao *DAO) RemoveSubDAO(name string) bool {\n\tfor i, sub := range dao.children {\n\t\tif sub.name == name {\n\t\t\tdao.children = append(dao.children[:i], dao.children[i+1:]...)\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// IsRoot checks if the DAO is the DAO tree root.\nfunc (dao DAO) IsRoot() bool {\n\treturn dao.parent == nil\n}\n\n// ParseStringToMembers parses a string of member addresses and roles.\n// String should have one or more lines where each line should contain an\n// address optionally followed by one or more roles.\n// Example multi line string:\n//\n//\tg1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun roleA\n//\tg1e5hud66rs7ye4zgeqmqvwfhurs2mnf408hdqcl\n//\tg1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5 roleB roleA\n//\n// Addresses are validated after being parsed.\n// Roles must be validated by the caller to make sure the names are valid.\nfunc ParseStringToMembers(s string) ([]Member, error) {\n\tvar members []Member\n\tfor _, line := range strings.Split(s, \"\\n\") {\n\t\tline = strings.TrimSpace(line)\n\t\tif line == \"\" {\n\t\t\t// Skip empty lines\n\t\t\tcontinue\n\t\t}\n\n\t\tvar (\n\t\t\troles  []Role\n\t\t\tfields = strings.Fields(line)\n\t\t\taddr   = std.Address(strings.TrimSpace(fields[0]))\n\t\t)\n\n\t\tif !addr.IsValid() {\n\t\t\treturn nil, errors.New(\"invalid member address: \" + EscapeHTML(addr.String()))\n\t\t}\n\n\t\tfor _, v := range fields[1:] {\n\t\t\troles = appendRole(roles, strings.TrimSpace(v))\n\t\t}\n\n\t\tmembers = append(members, NewMember(addr, roles...))\n\t}\n\treturn members, nil\n}\n\n// MustParseStringToMembers parses a string of member addresses and roles.\n// String should have one or more lines where each line should contain an\n// address optionally followed by one or more roles.\n// Example multi line string:\n//\n//\tg1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun roleA\n//\tg1e5hud66rs7ye4zgeqmqvwfhurs2mnf408hdqcl\n//\tg1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5 roleB roleA\n//\n// Addresses are validated after being parsed.\n// Roles must be validated by the caller to make sure the names are valid.\nfunc MustParseStringToMembers(s string) []Member {\n\tmembers, err := ParseStringToMembers(s)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn members\n}\n\n// appendRole append a role if it doesn't exists within the list of roles.\nfunc appendRole(roles []Role, name string) []Role {\n\tfor _, r := range roles {\n\t\tif string(r) == name {\n\t\t\treturn roles\n\t\t}\n\t}\n\treturn append(roles, Role(name))\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lsKuYHlhdZpkPa5phh+/VUrQY4rdcUKs0V/ZSE3PMuVw2ZeWI70CJhFj9bVjv073RuVthqh+cIAmeTC67x0DAA=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742996992"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"challenges","path":"gno.land/r/meeshell222/challenges","files":[{"name":"package.gno","body":"// File: challenges.gno\npackage challenges\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"std\"\n\n\t\"gno.land/p/demo/btree\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\n// -----------------------------------------------------------------------------\n// Roles \u0026 Access Control (using a simple map)\n// -----------------------------------------------------------------------------\n\n// Define role bit-flags. A user may have multiple roles combined.\nconst (\n\tROLE_SUPERUSER = 1 \u003c\u003c 0\n\tROLE_ADMIN     = 1 \u003c\u003c 1\n\tROLE_EDITOR    = 1 \u003c\u003c 2\n\tROLE_VIEWER    = 1 \u003c\u003c 3\n)\n\n// hasRole checks if a given address has the provided role bit set.\nfunc hasRole(addr std.Address, role uint) bool {\n\tr, ok := roles[addr]\n\tif !ok {\n\t\treturn false\n\t}\n\treturn (r \u0026 role) == role\n}\n\n// requireRole panics if the caller does not have the specified role.\nfunc requireRole(caller std.Address, role uint) {\n\tif !hasRole(caller, role) {\n\t\tpanic(\"insufficient permissions\")\n\t}\n}\n\n// GrantRole grants a bit-flag role to a given address. If the role is ROLE_SUPERUSER,\n// only a current superuser can grant it. Otherwise, an admin or superuser may grant.\nfunc GrantRole(addr std.Address, role uint) {\n\tcaller := std.OriginCaller()\n\tif role == ROLE_SUPERUSER {\n\t\trequireRole(caller, ROLE_SUPERUSER)\n\t} else {\n\t\tif !hasRole(caller, ROLE_SUPERUSER) \u0026\u0026 !hasRole(caller, ROLE_ADMIN) {\n\t\t\tpanic(\"must be admin or superuser to grant roles\")\n\t\t}\n\t}\n\troles[addr] = roles[addr] | role\n}\n\n// RevokeRole removes a bit-flag role from a given address. If the role is ROLE_SUPERUSER,\n// only a current superuser can revoke it. Otherwise, an admin or superuser may revoke.\nfunc RevokeRole(addr std.Address, role uint) {\n\tcaller := std.OriginCaller()\n\tif role == ROLE_SUPERUSER {\n\t\trequireRole(caller, ROLE_SUPERUSER)\n\t} else {\n\t\tif !hasRole(caller, ROLE_SUPERUSER) \u0026\u0026 !hasRole(caller, ROLE_ADMIN) {\n\t\t\tpanic(\"must be admin or superuser to revoke roles\")\n\t\t}\n\t}\n\tcurrent := roles[addr]\n\troles[addr] = current \u0026^ role\n}\n\n// -----------------------------------------------------------------------------\n// Data Structures for Challenges \u0026 Submissions\n// -----------------------------------------------------------------------------\n\n// Challenge represents a single challenge/assessment with an associated\n// RenderFunc for displaying the challenge, and an AssessFunc that\n// evaluates submissions (synchronously or asynchronously).\ntype Challenge struct {\n\tID               uint64\n\tTitle            string\n\tOwner            std.Address // creator's address\n\tPassingThreshold uint64      // e.g. 80 means score \u003e= 80 passes\n\tActive           bool\n\n\t// RenderFunc returns a Markdown description of the challenge.\n\tRenderFunc func() string\n\n\t// AssessFunc is a function to compute the challenge result.\n\t//   - challengeID: the challenge's ID\n\t//   - submitter: the address of the person submitting\n\t//   - submission: the submitted answer/content (or its checksum)\n\t//   - asyncKey: used to identify an async submission if needed\n\t// Returns:\n\t//   - grade (uint64): a percentage score\n\t//   - passed (bool): whether the submission is passing\n\t//   - additional (string): free-form text for extra context/feedback\n\tAssessFunc func(challengeID uint64, submitter std.Address, submission string, asyncKey string) (grade uint64, passed bool, additional string)\n\n\t// If true, grading is performed asynchronously.\n\tIsAsync bool\n}\n\n// Submission represents an individual's submitted answer for a challenge.\ntype Submission struct {\n\tID          uint64\n\tChallengeID uint64\n\tSubmitter   std.Address\n\tTimestamp   int64\n\tContentHash string // a checksum or reference\n\tScore       uint64 // percentage score\n\tPassed      bool\n\tAdditional  string // extra grading info\n\tIsGraded    bool   // false if grading is pending\n}\n\n// -----------------------------------------------------------------------------\n// Record Types\n// -----------------------------------------------------------------------------\n\n// ChallengeRecord wraps a Challenge to implement btree.Record.\ntype ChallengeRecord struct {\n\tID uint64\n\tCh *Challenge\n}\n\n// Less implements the btree.Record interface for ChallengeRecord.\nfunc (cr ChallengeRecord) Less(than btree.Record) bool {\n\tother := than.(ChallengeRecord)\n\treturn cr.ID \u003c other.ID\n}\n\n// SubmissionRecord wraps a Submission to implement btree.Record.\ntype SubmissionRecord struct {\n\tID  uint64\n\tSub *Submission\n}\n\n// Less implements the btree.Record interface for SubmissionRecord.\nfunc (sr SubmissionRecord) Less(than btree.Record) bool {\n\tother := than.(SubmissionRecord)\n\treturn sr.ID \u003c other.ID\n}\n\n// -----------------------------------------------------------------------------\n// Global Variables\n// -----------------------------------------------------------------------------\n\nvar (\n\tchallenges       map[uint64]Challenge\n\tsubmissions      map[uint64]Submission\n\troles            map[std.Address]uint\n\tnextChallengeID  uint64\n\tnextSubmissionID uint64\n\tchallengesTree   *btree.BTree\n\tsubmissionsTree  *btree.BTree\n)\n\n// -----------------------------------------------------------------------------\n// Lookup Helpers\n// -----------------------------------------------------------------------------\n\n// getChallengeByID retrieves a Challenge object from the challengesTree given a numeric ID.\nfunc getChallengeByID(id uint64) *Challenge {\n\trec := challengesTree.Get(ChallengeRecord{ID: id})\n\tif rec == nil {\n\t\treturn nil\n\t}\n\treturn rec.(ChallengeRecord).Ch\n}\n\n// getSubmissionByID retrieves a Submission object from the submissionsTree given a numeric ID.\nfunc getSubmissionByID(id uint64) *Submission {\n\trec := submissionsTree.Get(SubmissionRecord{ID: id})\n\tif rec == nil {\n\t\treturn nil\n\t}\n\treturn rec.(SubmissionRecord).Sub\n}\n\n// -----------------------------------------------------------------------------\n// Challenge Functions\n// -----------------------------------------------------------------------------\n\n// CreateChallenge inserts a new challenge record into the B-Tree. Only users with\n// EDITOR, ADMIN, or SUPERUSER roles may create challenges. Returns the unique challenge ID.\nfunc CreateChallenge(\n\ttitle string,\n\tpassingThreshold uint64,\n\trenderFunc func() string,\n\tassessFunc func(challengeID uint64, submitter std.Address, submission string, asyncKey string) (grade uint64, passed bool, additional string),\n\tisAsync bool,\n) uint64 {\n\n\tcaller := std.OriginCaller()\n\tif !(hasRole(caller, ROLE_EDITOR) || hasRole(caller, ROLE_ADMIN) || hasRole(caller, ROLE_SUPERUSER)) {\n\t\tpanic(\"must have editor/admin/superuser role to create challenge\")\n\t}\n\tnextChallengeID++\n\tcid := nextChallengeID\n\n\tch := \u0026Challenge{\n\t\tID:               cid,\n\t\tTitle:            title,\n\t\tOwner:            caller,\n\t\tPassingThreshold: passingThreshold,\n\t\tActive:           true,\n\t\tRenderFunc:       renderFunc,\n\t\tAssessFunc:       assessFunc,\n\t\tIsAsync:          isAsync,\n\t}\n\tchallengesTree.Insert(ChallengeRecord{ID: cid, Ch: ch})\n\treturn cid\n}\n\n// TODO: Implement UpdateChallenge to allow editing existing fields (with permissions).\n// TODO: Implement SetChallengeActive to allow toggling challenge activation status.\n\n// -----------------------------------------------------------------------------\n// Submission Functions\n// -----------------------------------------------------------------------------\n\n// SubmitAnswer creates a new Submission record for a given challenge.\n// If the challenge is synchronous (IsAsync == false), the submission is\n// immediately assessed. Returns the new submission ID.\nfunc SubmitAnswer(challengeID uint64, contentHash string) uint64 {\n\tcaller := std.OriginCaller()\n\tch := getChallengeByID(challengeID)\n\tif ch == nil {\n\t\tpanic(\"challenge not found\")\n\t}\n\tif !ch.Active {\n\t\tpanic(\"challenge is not active\")\n\t}\n\n\tnextSubmissionID++\n\tsid := nextSubmissionID\n\n\tsub := \u0026Submission{\n\t\tID:          sid,\n\t\tChallengeID: challengeID,\n\t\tSubmitter:   caller,\n\t\tTimestamp:   GetTimestamp(),\n\t\tContentHash: contentHash,\n\t}\n\tsubmissionsTree.Insert(SubmissionRecord{ID: sid, Sub: sub})\n\n\t// For synchronous challenges, do immediate grading.\n\tif !ch.IsAsync {\n\t\tdoAssessment(sub)\n\t}\n\treturn sid\n}\n\n// doAssessment uses a challenge's AssessFunc to compute a submission's final grade/passed status.\nfunc doAssessment(sub *Submission) {\n\tch := getChallengeByID(sub.ChallengeID)\n\tif ch == nil {\n\t\tpanic(\"challenge not found\")\n\t}\n\tif ch.AssessFunc != nil {\n\t\tgrade, passed, additional := ch.AssessFunc(ch.ID, sub.Submitter, sub.ContentHash, \"\")\n\t\tsub.Score = grade\n\t\tsub.Passed = passed\n\t\tsub.Additional = additional\n\t} else {\n\t\t// Default dummy logic if no assessment function is provided.\n\t\tsub.Score = 80\n\t\tif sub.Score \u003e= ch.PassingThreshold {\n\t\t\tsub.Passed = true\n\t\t} else {\n\t\t\tsub.Passed = false\n\t\t}\n\t\tsub.Additional = \"Synchronous grading complete (default)\"\n\t}\n\tsub.IsGraded = true\n}\n\n// AsyncResultCallback finalizes grading for asynchronous challenges. It can only be called\n// by an ADMIN or SUPERUSER. If the submission is already graded, it panics.\nfunc AsyncResultCallback(submissionID uint64, score uint64, passed bool, info string) {\n\tcaller := std.OriginCaller()\n\tif !hasRole(caller, ROLE_ADMIN) \u0026\u0026 !hasRole(caller, ROLE_SUPERUSER) {\n\t\tpanic(\"not authorized to finalize asynchronous result\")\n\t}\n\tsub := getSubmissionByID(submissionID)\n\tif sub == nil {\n\t\tpanic(\"submission not found\")\n\t}\n\tif sub.IsGraded {\n\t\tpanic(\"already graded\")\n\t}\n\tsub.Score = score\n\tsub.Passed = passed\n\tsub.Additional = info\n\tsub.IsGraded = true\n}\n\n// -----------------------------------------------------------------------------\n// Query Functions\n// -----------------------------------------------------------------------------\n\n// QueryMySubmissions returns all submissions where the caller is the submitter.\nfunc QueryMySubmissions() []*Submission {\n\tcaller := std.OriginCaller()\n\tvar results []*Submission\n\tsubmissionsTree.Ascend(func(r btree.Record) bool {\n\t\tsr := r.(SubmissionRecord)\n\t\tif sr.Sub.Submitter == caller {\n\t\t\tresults = append(results, sr.Sub)\n\t\t}\n\t\treturn true\n\t})\n\treturn results\n}\n\n// QuerySubmission retrieves a submission by ID and returns it if the caller is the\n// submitter, or has at least VIEWER role (or is an admin/superuser). Otherwise, it panics.\nfunc QuerySubmission(submissionID uint64) *Submission {\n\tcaller := std.OriginCaller()\n\tsub := getSubmissionByID(submissionID)\n\tif sub == nil {\n\t\tpanic(\"submission not found\")\n\t}\n\tif sub.Submitter == caller ||\n\t\thasRole(caller, ROLE_VIEWER) ||\n\t\thasRole(caller, ROLE_ADMIN) ||\n\t\thasRole(caller, ROLE_SUPERUSER) {\n\t\treturn sub\n\t}\n\tpanic(\"not authorized to view this submission\")\n}\n\n// QueryAllSubmissions returns all submissions in the system, but only if the caller\n// has VIEWER, ADMIN, or SUPERUSER role. Otherwise, it panics.\nfunc QueryAllSubmissions() []*Submission {\n\tcaller := std.OriginCaller()\n\tif !(hasRole(caller, ROLE_VIEWER) || hasRole(caller, ROLE_ADMIN) || hasRole(caller, ROLE_SUPERUSER)) {\n\t\tpanic(\"not authorized to view all submissions\")\n\t}\n\tvar results []*Submission\n\tsubmissionsTree.Ascend(func(r btree.Record) bool {\n\t\tsr := r.(SubmissionRecord)\n\t\tresults = append(results, sr.Sub)\n\t\treturn true\n\t})\n\treturn results\n}\n\n// QueryChallengeSubmissions returns all submissions associated with a particular\n// challenge ID, if the caller is the challenge's owner, has VIEWER+ roles, or if\n// the submissions belong to the caller.\nfunc QueryChallengeSubmissions(challengeID uint64) []*Submission {\n\tcaller := std.OriginCaller()\n\tch := getChallengeByID(challengeID)\n\tif ch == nil {\n\t\tpanic(\"challenge not found\")\n\t}\n\tvar results []*Submission\n\tsubmissionsTree.Ascend(func(r btree.Record) bool {\n\t\tsr := r.(SubmissionRecord)\n\t\tif sr.Sub.ChallengeID == challengeID {\n\t\t\tif ch.Owner == caller ||\n\t\t\t\thasRole(caller, ROLE_VIEWER) ||\n\t\t\t\thasRole(caller, ROLE_ADMIN) ||\n\t\t\t\thasRole(caller, ROLE_SUPERUSER) {\n\t\t\t\tresults = append(results, sr.Sub)\n\t\t\t} else if sr.Sub.Submitter == caller {\n\t\t\t\tresults = append(results, sr.Sub)\n\t\t\t}\n\t\t}\n\t\treturn true\n\t})\n\treturn results\n}\n\n// QueryAllChallenges returns a list of all challenges in the system. No role checks are performed\n// here, but you can easily add them if you want to restrict access to the challenge list.\nfunc QueryAllChallenges() []*Challenge {\n\tvar all []*Challenge\n\tchallengesTree.Ascend(func(r btree.Record) bool {\n\t\tcr := r.(ChallengeRecord)\n\t\tall = append(all, cr.Ch)\n\t\treturn true\n\t})\n\treturn all\n}\n\n// -----------------------------------------------------------------------------\n// Render() in the Main Challenges Realm\n// -----------------------------------------------------------------------------\n\n// Render returns Markdown output of the challenges in the realm.\n// Usage:\n//   - No arguments: returns a list of all challenges with IDs and titles.\n//   - One argument (challenge ID): returns the full Markdown description of that challenge.\nfunc Render(args ...interface{}) string {\n\tif len(args) == 0 {\n\t\tvar sb strings.Builder\n\t\tsb.WriteString(\"# Available Challenges\\n\\n\")\n\t\tchallengesTree.Ascend(func(r btree.Record) bool {\n\t\t\tcr := r.(ChallengeRecord)\n\t\t\tsb.WriteString(fmt.Sprintf(\"- **ID:** %d, **Title:** %s\\n\", cr.ID, cr.Ch.Title))\n\t\t\treturn true\n\t\t})\n\t\treturn sb.String()\n\t} else if len(args) == 1 {\n\t\tvar id uint64\n\t\tswitch v := args[0].(type) {\n\t\tcase int:\n\t\t\tid = uint64(v)\n\t\tcase uint64:\n\t\t\tid = v\n\t\tcase string:\n\t\t\tparsed, err := strconv.ParseUint(v, 10, 64)\n\t\t\tif err != nil {\n\t\t\t\tpanic(\"Render: invalid id argument\")\n\t\t\t}\n\t\t\tid = parsed\n\t\tdefault:\n\t\t\tpanic(\"Render: unsupported argument type\")\n\t\t}\n\t\tch := getChallengeByID(id)\n\t\tif ch == nil {\n\t\t\treturn ufmt.Sprintf(\"Challenge with ID %d not found.\", id)\n\t\t}\n\t\treturn ch.RenderFunc()\n\t} else {\n\t\tpanic(\"Render: too many arguments\")\n\t}\n}\n\n// -----------------------------------------------------------------------------\n// Utility Functions\n// -----------------------------------------------------------------------------\n\n// GetTimestamp returns the current Unix timestamp. In Gno, confirm that\n// time.Now().Unix() behaves as expected in the environment.\nfunc GetTimestamp() int64 {\n\treturn time.Now().Unix()\n}\n\n// -----------------------------------------------------------------------------\n// Initialization\n// -----------------------------------------------------------------------------\n\n// InitRealm initializes the realm after deployment. It sets the caller as a\n// SUPERUSER, and sets up the global data structures. This is intended to be\n// called only once.\nfunc InitRealm() {\n\tchallenges = make(map[uint64]Challenge)\n\tsubmissions = make(map[uint64]Submission)\n\troles = make(map[std.Address]uint)\n\tnextChallengeID = 1\n\tnextSubmissionID = 1\n\tchallengesTree = btree.New()\n\tsubmissionsTree = btree.New()\n\tcreator := std.OriginCaller()\n\troles[creator] = ROLE_SUPERUSER\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"YV0Zqr/MIEzQkwbffyRht62jQlQzvS0nDxyboslV5HCZFLrQcRtx5YAvHOwX5oLnp0VRAsZbybPUVZz0NGnjAw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1742997258"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1956e6rnvg8fr3phlc52te3krkqtrvj67th87xp","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"wqs4jPuAQMu6AMavOKESx1kB5Rhn5bswh/X5bdoupnh+EH/tI5Bbbmm/OlKM0kodQE6yAehBlFHxPtZCewZKDQ=="}],"memo":""},"metadata":{"timestamp":"1743000506"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1956e6rnvg8fr3phlc52te3krkqtrvj67th87xp","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"LhXdGXo15N2U5vBXVd8hOkzZkncFuYLbR1eAt/SYIN1cYdAr2ZJhsTkFGUxbkphUM7b45RC6bGszNSVh7cBZCA=="}],"memo":""},"metadata":{"timestamp":"1743000612"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1956e6rnvg8fr3phlc52te3krkqtrvj67th87xp","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"FXYKHpQw3tsICnIwEQa+qaLB4Fublx/bGgl41wEByUHAw8w1P5MgjfcbqV0UNGGKw5E41N6WQ47moEJbhKJZBw=="}],"memo":""},"metadata":{"timestamp":"1743000802"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1956e6rnvg8fr3phlc52te3krkqtrvj67th87xp","to_address":"g1956e6rnvg8fr3phlc52te3krkqtrvj67th87xp","amount":"9949837ugnot"}],"fee":{"gas_wanted":"54271","gas_fee":"114ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"2miAgz7DhWiTH6rlpjA1s/2H2pVPqEHhRlajv8kDfJDwGOBjBM/ha5UXToguXvxW2dtygJWTJcZSIlWIz+w1BQ=="}],"memo":""},"metadata":{"timestamp":"1743000887"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1956e6rnvg8fr3phlc52te3krkqtrvj67th87xp","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"FXYKHpQw3tsICnIwEQa+qaLB4Fublx/bGgl41wEByUHAw8w1P5MgjfcbqV0UNGGKw5E41N6WQ47moEJbhKJZBw=="}],"memo":""},"metadata":{"timestamp":"1743001038"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1956e6rnvg8fr3phlc52te3krkqtrvj67th87xp","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"FXYKHpQw3tsICnIwEQa+qaLB4Fublx/bGgl41wEByUHAw8w1P5MgjfcbqV0UNGGKw5E41N6WQ47moEJbhKJZBw=="}],"memo":""},"metadata":{"timestamp":"1743001183"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","to_address":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","amount":"1000000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"QKGcBR/6LqdaSQo/dfJ7BzxnqscN3BGvezZyEJAkGAll6bRm5H0dMb6r5ZJAlE1d/rgDGz/TK7Wi063N9LI1BA=="}],"memo":""},"metadata":{"timestamp":"1743005454"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","to_address":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","amount":"500000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"54gXoENNScmLnrV4bvtt8MyG+v2zwzCmYSgZ0hXfL6kA7r/gQ/zqRRCZuDkMOo52NXXQ3KDPClayN7pjY7YABQ=="}],"memo":""},"metadata":{"timestamp":"1743008993"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","amount":"500000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"2y5cK6oA5veZWO0g6HmiY0zuUVBH7WgLRHQksLG8i8o2KeY9fhnRi3nHTUWI0yH1qPUoDt1RroyAdx1X5dCZDg=="}],"memo":""},"metadata":{"timestamp":"1743009013"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","amount":"1392427325ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"doBOqiuXi3KiTAq++Tjz5XRX64XNew6VKUh4D0hmSh5uwDplT9uWYWEVvRh4EzP1fzGdH0p95kCfTV3QgHKhCg=="}],"memo":""},"metadata":{"timestamp":"1743009063"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","amount":"11924427325ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"otQw+OvnNRAVBQZS9hPLf1BzwDSJP3F8/Wzu5rwxI8PpfiHj5NZsiW5s1/lFjpVqi6ey7W2YfH1jDZZXydM6Cg=="}],"memo":""},"metadata":{"timestamp":"1743009093"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1vnwqssdndtqr5jv9sx3y4nh2hcjw0zwxrzyxp6","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["grizbbear022"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"CWAm+Eey6JlDFnptn9BioulKSKcSxK/jUzYHJ40H+FbRGK7UDG5w67CXqt1M0Z5dCmYKgObHLVHqvEj1PxaUBw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743039807"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1vnwqssdndtqr5jv9sx3y4nh2hcjw0zwxrzyxp6","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["berman094"]}],"fee":{"gas_wanted":"20000000","gas_fee":"40000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"OIlUJIkyM3oY3pJq73xnG8O5EG0tQt/laclPBoL26ZLQYXof44oOq0/SKailiZYw3GvhXwvMRcnSdxLJWf7nDQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743039862"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g162fwhzaattlrla45y257acthr796atmskfcknr","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"iLnQlboIaT5sER/Tb9hyYGy9eCj2uMaD7TkcyCJj7BNgZRLf86hzxOcwKBymg4woNLxd0/n3qKadMMGhjtBDCA=="}],"memo":""},"metadata":{"timestamp":"1743055477"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g162fwhzaattlrla45y257acthr796atmskfcknr","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["vanilcopapa_999"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"1w9iDanBEKp9nL1HVDWO1KW5Luj2zWbK6HCsZqTQugZNuMuQCQ9v9sGJt/zWQN9AGHLhTSoYk9U8B5zkRq60AQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743055562"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g162fwhzaattlrla45y257acthr796atmskfcknr","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["vanilcopapa_995"]}],"fee":{"gas_wanted":"14864557","gas_fee":"49549ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"1da/qq10HDpKY+fIFClqi/OXitZYOWXIs6Jb/jhXU1mpCicmUuQ6Mo0Jh+1Y66M9FdNq25PBrLoIuKLopURRAA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743055627"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1u60gmq9kluuckugav8hk4mnn02ut8w4sywgwf7","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"GfrrqK25le6qJbxQoci3QpEWLGJFDPJj+waGimd/3MSfG1URXwwGhzpXVqxZVJLR0Y67XwacZze2IfghBSSpBg=="}],"memo":""},"metadata":{"timestamp":"1743055813"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u60gmq9kluuckugav8hk4mnn02ut8w4sywgwf7","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["vanilcomanse_555"]}],"fee":{"gas_wanted":"12000000","gas_fee":"40000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"mNQdpIoJIXPlhXy0DV3FzN3kpfmCgUgqgCe1lFgNeGkiLxaB3c33vLyMJyvzuJiUVN/kqRcZEhGI47/WaDVYBg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743055928"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u60gmq9kluuckugav8hk4mnn02ut8w4sywgwf7","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["vanilcomanse_555"]}],"fee":{"gas_wanted":"15157932","gas_fee":"101053ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"aD4yYmA6G5rSinvT16WF4/p8GwFodnOStMlwL15RK/8n7VUMTx7WK/CK62W9QBQVg0Js3n66daJlNoKceTFeDQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743055963"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1rjfnrfjfvdky9cwpjsmn9nswd7nc2gswcks8k4","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"6n7yJswqVrtpy7615Tz0OXhDV6VMo6yfgVkrOg+MHRrg7rtYBg0R4fNgK1udn1S+z/S7KbuEFgZvo07kTM/5CQ=="}],"memo":""},"metadata":{"timestamp":"1743056259"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1rjfnrfjfvdky9cwpjsmn9nswd7nc2gswcks8k4","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["testacco_548"]}],"fee":{"gas_wanted":"12000000","gas_fee":"120000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"R1D+B57njd1lO74+1ls9HUsYcUqaJpmjqfWWYpJolKE/VzgvvLNahPcd2torV1Q2AwqjAoiWJlRkK5SzfV9wBw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743056334"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g154k9q4ux382vn92xrw9x6evfmrxrpplu2vphw9","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"XEKGYnLUtfnzeaZPVy15EdLk9WwdJ499SV1k3ryeshj+Ga8P4kcIS+5gf0yl3hqidREUdC6/xaCCPbE4Xp54Cg=="}],"memo":""},"metadata":{"timestamp":"1743058405"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1zsq8w5fwsn0l5azk6xaglxsphfrpayjt8x5477","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"D4YOEJDYXPXD8GWW/5ohkfQPbBTO5IkqXHy+/iQL+mNYhuQcC6oHw55PMbBa11Di9ubO95g1EFNnludHEgqODg=="}],"memo":""},"metadata":{"timestamp":"1743059513"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1zsq8w5fwsn0l5azk6xaglxsphfrpayjt8x5477","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["fog113"]}],"fee":{"gas_wanted":"12000000","gas_fee":"120000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"0nkOafJbu/FsGnAhPLZRrr1UB0q9xNVM+BZ5X0szD1jax9B4FbpBIL3KwJgBCCWR7v7JQFO3rR3BU+JsiwhRAw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743059558"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1zsq8w5fwsn0l5azk6xaglxsphfrpayjt8x5477","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["fog113"]}],"fee":{"gas_wanted":"20000000","gas_fee":"120000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"SRkXJRq5JZZ//FkaI18kTeefSkm4XSgBvmBSHFVnwM1LUcqvGaxEyxBJw8ZtW5Kbn5tof2OiKBjyF8rGF41hDg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743059804"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1d7y375usd6f7jqgkz7am0ddrn5fygn6lezml4v","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"vcMy5OOh9FDL4HyBIr0lvUE53vl5EmsppVGMB+EdfTo752gfEDfER5YBWFz5eFmpLFgrUF3KiisquGjeFmojDg=="}],"memo":""},"metadata":{"timestamp":"1743060135"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1d7y375usd6f7jqgkz7am0ddrn5fygn6lezml4v","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["songi113"]}],"fee":{"gas_wanted":"12000000","gas_fee":"120000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"F0UUa9lv01YzrOQDQfRF28ecNEeRo4xonjiy2FaIvxHLI+skux9BToiBsMeXR7JbfhahXTOwXf0fxgvkDS1RDw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743060200"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1e72wcq4vzuk7ag4gy9h2mjzaxvl6meag6dl7tj","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"H8tvFIN+YnTMSTrbebfuuEN+yaV3RIPwNAAsrDP6JK/UShElaDyZhoqP7HKftpM5ckx9PS+y0Q9M7xTrJZy7CQ=="}],"memo":""},"metadata":{"timestamp":"1743060837"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1e72wcq4vzuk7ag4gy9h2mjzaxvl6meag6dl7tj","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["taehwankim113"]}],"fee":{"gas_wanted":"12000000","gas_fee":"239970ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"mEzETcWz6pSXfbXHBw85OJ0Yy0Rpc7yamnFHs9YdyMhiyRJk0grNaweXYLRRVtARD16xCH25iCvZFH0wFpT+CQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743060932"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1e72wcq4vzuk7ag4gy9h2mjzaxvl6meag6dl7tj","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["taehwankim113"]}],"fee":{"gas_wanted":"14421040","gas_fee":"370044ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"vMEqDIDW2Pum4u8zOW2iOJFB1EQ1qrSPWvmrOqx6T/aMN4G5a7nwOc172n+Uf4sfsHu4K5sis4Nunf3YKiq6CQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743061082"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1f8hyy5mtw00sfu75j8sgvd3h028evlnlrp88qf","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"jEsClhrXVNXcQVmpIquWL1ZB0fhh1N8vShsBpBssA5KDw5LFgNxLUpd/3+PiOzF9gs7zTpVlMbHI7YJ0LRCEBA=="}],"memo":""},"metadata":{"timestamp":"1743064516"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1f8hyy5mtw00sfu75j8sgvd3h028evlnlrp88qf","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["okok0001"]}],"fee":{"gas_wanted":"12000000","gas_fee":"311310ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"KIlbVU/w5T4thSbSFkmnKLqSkjaJEdZV00Rt0cqFV22g1VPfhJ9SjofMQvD6zrYC5kqiSUUnkYjPNJajc3BRDw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743064557"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1eclf2d2n68mpcdv946m3lx9tlwhqj04lqwkyfe","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"2KU5sfwGjjjtFYWGIBOSIhc/3vSzxFqIUvCkeijhlbIKix0+kA98OU7i+Uz+EVan+iBdt9RqmVXT6CBxRQBsBg=="}],"memo":""},"metadata":{"timestamp":"1743064592"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1pggq07j4u8tzfrd3t8pa4ms7cutz7wnysyywql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Y8e0d5M4cSpYcX4/q+yft6PcqALMILtMXsMgcpxLLgkGzR0GIF2WaL/ZoWTGrT6fM8IhehNmu//Oyc4rKQpXDw=="}],"memo":""},"metadata":{"timestamp":"1743064602"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1eclf2d2n68mpcdv946m3lx9tlwhqj04lqwkyfe","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["ddsss0332"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"RAF95xeEIw6AzoB4gKhtAvXDtzIWofXYmJrT9nULGUscLAwyu9D6xG7cuvFzd+nwBn6UR29XRe+qazrDu4+CAQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743064632"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1pggq07j4u8tzfrd3t8pa4ms7cutz7wnysyywql","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["dddsss0321"]}],"fee":{"gas_wanted":"12000000","gas_fee":"311310ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"HEGafaGmz5QyWZGrB27Xveo/akHGj9IetSQKMyJNwwobF388C+kHyx88bjTSCvb0Hxg37awhMUp4MS8aVbo1Aw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743064677"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1e6027jr2h4s6yk5hjh0w7fvydzf0x9cnlquyfd","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"xmpYTcQ/iSS/MPlmoqnWGuMJ4cRJWF9kClOJKai43Ox7dJVKSvpbdjWrdw9AdrcxkGQewNeuo61Qtmyet1UdBQ=="}],"memo":""},"metadata":{"timestamp":"1743064752"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1e6027jr2h4s6yk5hjh0w7fvydzf0x9cnlquyfd","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["okkoko5555"]}],"fee":{"gas_wanted":"12000000","gas_fee":"311310ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"8nOFo7sAoKDcKjBSrPNxc9bKYNjT4MMPkQDHnWxt6cz7aiYXh+CwDIlPYHrY7ixQ9vqqmdUbCcv97B4vr0GmCw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743064797"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1pgau0y96k6y2j2493rmq0f290vwj8ekxl2uamy","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"mEy9rXpgGWxT965KXL30dZAiUgwZmEEVjCDhPwkq7Ltx03wwVapugWm9HmtFR2tn7Sbcn7f3+Q+vX+uw2zeACg=="}],"memo":""},"metadata":{"timestamp":"1743065238"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1f95dmun7ldnyzymrja6qjy063nfug0kzr63l7c","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"pFfRlb/viXhzTM0EqjinFC78BN+Zsq5EIxYfDp2982McxiZHaDlND86okNuc8TPghXqWDmUIrz6JjAJac2OzDQ=="}],"memo":""},"metadata":{"timestamp":"1743066873"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1f95dmun7ldnyzymrja6qjy063nfug0kzr63l7c","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Gjodwjcm05UBRMmHdrCLdBLyIJLVy2OhnFHyxAMFgFsdH4Zmw3FnL1EEDHw6YzspRkE8v8MsrjNy7crORXdmDQ=="}],"memo":""},"metadata":{"timestamp":"1743066898"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1f95dmun7ldnyzymrja6qjy063nfug0kzr63l7c","send":"100000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["jyp_1464"]}],"fee":{"gas_wanted":"12000000","gas_fee":"808860ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"HDd1a6M7eOiilQiP0Y5uPiGgcdgFW3ufWEl30Ksq5EBNbVrNFufBbqrXbKVkEsahITx7c/hfGgtRZbxBFcZ+Bg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743067494"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1vnwqssdndtqr5jv9sx3y4nh2hcjw0zwxrzyxp6","send":"","pkg_path":"gno.land/r/demo/profile","func":"SetStringField","args":["Bio"]}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"GlEvXs6TLbnAxc3J+uyPLkFeYsjI/xCWeTe9rX9V+UBnAycS9bzoHyb1T5/lr/go3EyGOLd3cXKRYggLd8k+Ag=="}],"memo":""},"metadata":{"timestamp":"1743068702"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["devx000"]}],"fee":{"gas_wanted":"50000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Stzu14mXcaTY9yfbo12WMWx0PFycM1iUbFeR6IDfV/JrcTrWi99GUV6liYd3Mvxykk9dkea74K/7VaU3N7hrAw=="}],"memo":""},"metadata":{"timestamp":"1743070146"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/demo/profile","func":"SetStringField","args":["Bio","DevX Team"]}],"fee":{"gas_wanted":"50000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"YWaO4dU6FoeGaGV9HD4m5lkrwiQxN61DbJlPaWiOkJ491KveTPL6VwRhGWA0ORkkFdpNaFcSSj28MchqZvvvAA=="}],"memo":""},"metadata":{"timestamp":"1743070251"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g173ezw2laua76sq3c2azrplezdmn2xlzd05sywh","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"1FnLvpvvD/RIhFYwAtvgY7NVuj38YXAfgwACHFAro4VzVITQ+mbXfJXI1IdSyBTLjKPslt85Kdpkqqg/WChtCQ=="}],"memo":""},"metadata":{"timestamp":"1743074443"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g173ezw2laua76sq3c2azrplezdmn2xlzd05sywh","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"1FnLvpvvD/RIhFYwAtvgY7NVuj38YXAfgwACHFAro4VzVITQ+mbXfJXI1IdSyBTLjKPslt85Kdpkqqg/WChtCQ=="}],"memo":""},"metadata":{"timestamp":"1743074508"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g173ezw2laua76sq3c2azrplezdmn2xlzd05sywh","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["bonk_0417"]}],"fee":{"gas_wanted":"12000000","gas_fee":"134970ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"akHlLB4VJ1saQFUFnClNSwAzBTzVaaoU4wrqSUJ+oMH28JlNharNo8cQ8yS0+6QYcWLvyUqOGbB0kGju5VwmAg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743074924"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g173ezw2laua76sq3c2azrplezdmn2xlzd05sywh","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"1FnLvpvvD/RIhFYwAtvgY7NVuj38YXAfgwACHFAro4VzVITQ+mbXfJXI1IdSyBTLjKPslt85Kdpkqqg/WChtCQ=="}],"memo":""},"metadata":{"timestamp":"1743075094"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g173ezw2laua76sq3c2azrplezdmn2xlzd05sywh","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"1FnLvpvvD/RIhFYwAtvgY7NVuj38YXAfgwACHFAro4VzVITQ+mbXfJXI1IdSyBTLjKPslt85Kdpkqqg/WChtCQ=="}],"memo":""},"metadata":{"timestamp":"1743075109"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g173ezw2laua76sq3c2azrplezdmn2xlzd05sywh","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"1FnLvpvvD/RIhFYwAtvgY7NVuj38YXAfgwACHFAro4VzVITQ+mbXfJXI1IdSyBTLjKPslt85Kdpkqqg/WChtCQ=="}],"memo":""},"metadata":{"timestamp":"1743075124"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g173ezw2laua76sq3c2azrplezdmn2xlzd05sywh","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"1FnLvpvvD/RIhFYwAtvgY7NVuj38YXAfgwACHFAro4VzVITQ+mbXfJXI1IdSyBTLjKPslt85Kdpkqqg/WChtCQ=="}],"memo":""},"metadata":{"timestamp":"1743075139"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g14zkjfjvnq7mv0zf8h9rd44k0crmr377whm5ndc","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"+s34Ud0/FCokWk9t4egRTxujmNI6atEA1jUZ+B338Et9srg5wZerndRUrQKD43XReQHdLtwd7iAJKDfeAGIHBQ=="}],"memo":""},"metadata":{"timestamp":"1743078594"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14zkjfjvnq7mv0zf8h9rd44k0crmr377whm5ndc","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["songbit"]}],"fee":{"gas_wanted":"12000000","gas_fee":"349230ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"6Tz1spZ45pCAPlX2RzXWLZF/lGQAXMqWtlGBoA3BLajFZMFbbZQEbMhZL0OZo1tkkNwuXqXYu3Rq19262rk6CQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743078704"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14zkjfjvnq7mv0zf8h9rd44k0crmr377whm5ndc","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["songbit010"]}],"fee":{"gas_wanted":"13944856","gas_fee":"405831ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"AYd2QDhJKlG/yhXc1ceG9Nrd1YdiLNAdoAqpB125SaJGOkhQts1QJuVp5DKevYYiRz6LJoiJ8S2uzxahr1BhDQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743078834"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["wen mainnet\\?"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"rnL6oOqvJV6ByTsC7ltggnY8ggru2Kl6s2DhCjsySYct3OHVic5ef2QSHTLdL96fS5sLIBZezdGvcwUzQ2WdCA=="}],"memo":""},"metadata":{"timestamp":"1743084685"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1cpx59z5r8vzeww2fm4ezpz7yvjs7kptywkm864","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"f5w9Ks3uPYSB4COWkMt/E/4+Apgx9PyP40JeyR+CD+3TYoJSvXh0OG7sh7yp0c9V0FkL+IjnNfpjagwNkPviDQ=="}],"memo":""},"metadata":{"timestamp":"1743087128"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1cpx59z5r8vzeww2fm4ezpz7yvjs7kptywkm864","package":{"name":"commondao","path":"gno.land/p/g1cpx59z5r8vzeww2fm4ezpz7yvjs7kptywkm864/commondao","files":[{"name":"commondao.gno","body":"package commondao\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/avl/list\"\n\t\"gno.land/p/demo/avl/rotree\"\n\t\"gno.land/p/demo/seqid\"\n\t\"gno.land/p/moul/addrset\"\n)\n\n// PathSeparator is the separator character used in DAO paths.\nconst PathSeparator = \"/\"\n\nvar (\n\tErrInvalidVoteChoice    = errors.New(\"invalid vote choice\")\n\tErrNotMember            = errors.New(\"account is not a member of the DAO\")\n\tErrOverflow             = errors.New(\"next ID overflows uint64\")\n\tErrProposalFailed       = errors.New(\"proposal failed to pass\")\n\tErrProposalNotFound     = errors.New(\"proposal not found\")\n\tErrVotingDeadlineNotMet = errors.New(\"voting deadline not met\")\n)\n\n// CommonDAO defines a DAO.\ntype CommonDAO struct {\n\tid          uint64\n\tslug        string\n\tname        string\n\tdescription string\n\tparent      *CommonDAO\n\tchildren    list.IList\n\tmembers     *addrset.Set\n\tgenID       seqid.ID\n\tactive      *avl.Tree // string(proposal ID) -\u003e *Proposal\n\tfinished    *avl.Tree // string(proposal ID) -\u003e *Proposal\n}\n\n// New creates a new common DAO.\nfunc New(options ...Option) *CommonDAO {\n\tdao := \u0026CommonDAO{\n\t\tmembers:  \u0026addrset.Set{},\n\t\tchildren: \u0026list.List{},\n\t\tactive:   avl.NewTree(),\n\t\tfinished: avl.NewTree(),\n\t}\n\tfor _, apply := range options {\n\t\tapply(dao)\n\t}\n\treturn dao\n}\n\n// ID returns DAO's unique identifier.\nfunc (dao CommonDAO) ID() uint64 {\n\treturn dao.id\n}\n\n// Slug returns DAO's URL slug.\nfunc (dao CommonDAO) Slug() string {\n\treturn dao.slug\n}\n\n// Name returns DAO's name.\nfunc (dao CommonDAO) Name() string {\n\treturn dao.name\n}\n\n// Description returns DAO's description.\nfunc (dao CommonDAO) Description() string {\n\treturn dao.description\n}\n\n// Path returns the full path to the DAO.\n// Paths are normally used when working with hierarchical\n// DAOs and is created by concatenating DAO slugs.\nfunc (dao CommonDAO) Path() string {\n\tparent := dao.Parent()\n\tif parent != nil {\n\t\tprefix := parent.Path()\n\t\tif prefix != \"\" {\n\t\t\treturn prefix + PathSeparator + dao.slug\n\t\t}\n\t}\n\treturn dao.slug\n}\n\n// Parent returns the parent DAO.\n// Null can be returned when DAO has no parent assigned.\nfunc (dao CommonDAO) Parent() *CommonDAO {\n\treturn dao.parent\n}\n\n// Children returns a list with the direct DAO children.\n// Each item in the list is a reference to a CommonDAO instance.\nfunc (dao CommonDAO) Children() list.IList {\n\treturn dao.children\n}\n\n// TopParent returns the topmost parent DAO.\n// The top parent is the root of the DAO tree.\nfunc (dao *CommonDAO) TopParent() *CommonDAO {\n\tparent := dao.Parent()\n\tif parent != nil {\n\t\treturn parent.TopParent()\n\t}\n\treturn dao\n}\n\n// Members returns the list of DAO members.\nfunc (dao CommonDAO) Members() *addrset.Set {\n\treturn dao.members\n}\n\n// ActiveProposals returns all active DAO proposals.\nfunc (dao CommonDAO) ActiveProposals() rotree.IReadOnlyTree {\n\treturn dao.active\n}\n\n// FinishedProposalsi returns all finished DAO proposals.\nfunc (dao CommonDAO) FinishedProposals() rotree.IReadOnlyTree {\n\treturn dao.finished\n}\n\n// Propose creates a new DAO proposal.\nfunc (dao *CommonDAO) Propose(creator std.Address, d ProposalDefinition) (*Proposal, error) {\n\tid, ok := dao.genID.TryNext()\n\tif !ok {\n\t\treturn nil, ErrOverflow\n\t}\n\n\tp, err := NewProposal(uint64(id), creator, d)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tkey := makeProposalKey(p.ID())\n\tdao.active.Set(key, p)\n\treturn p, nil\n}\n\n// MustPropose creates a new DAO proposal or panics on error.\nfunc (dao *CommonDAO) MustPropose(creator std.Address, d ProposalDefinition) *Proposal {\n\tp, err := dao.Propose(creator, d)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn p\n}\n\n// GetActiveProposal returns an active proposal.\nfunc (dao CommonDAO) GetActiveProposal(proposalID uint64) (_ *Proposal, found bool) {\n\tkey := makeProposalKey(proposalID)\n\tif v, ok := dao.active.Get(key); ok {\n\t\treturn v.(*Proposal), true\n\t}\n\treturn nil, false\n}\n\n// GetFinishedProposal returns a finished proposal.\nfunc (dao CommonDAO) GetFinishedProposal(proposalID uint64) (_ *Proposal, found bool) {\n\tkey := makeProposalKey(proposalID)\n\tif v, ok := dao.finished.Get(key); ok {\n\t\treturn v.(*Proposal), true\n\t}\n\treturn nil, false\n}\n\n// GetProposal returns an proposal.\nfunc (dao CommonDAO) GetProposal(proposalID uint64) (p *Proposal, found bool) {\n\tp, found = dao.GetActiveProposal(proposalID)\n\tif !found {\n\t\treturn dao.GetFinishedProposal(proposalID)\n\t}\n\treturn p, found\n}\n\n// Vote submits a new vote for a proposal.\nfunc (dao *CommonDAO) Vote(member std.Address, proposalID uint64, c VoteChoice, reason string) error {\n\tif !dao.Members().Has(member) {\n\t\treturn ErrNotMember\n\t}\n\n\tp, found := dao.GetActiveProposal(proposalID)\n\tif !found {\n\t\treturn ErrProposalNotFound\n\t}\n\n\tif !p.IsValidVoteChoice(c) {\n\t\treturn ErrInvalidVoteChoice\n\t}\n\n\tp.record.AddVote(Vote{\n\t\tAddress: member,\n\t\tChoice:  c,\n\t\tReason:  reason,\n\t})\n\treturn nil\n}\n\n// Tally counts votes and validates if a proposal passes.\nfunc (dao *CommonDAO) Tally(proposalID uint64) (passes bool, _ error) {\n\tp, found := dao.GetActiveProposal(proposalID)\n\tif !found {\n\t\treturn false, ErrProposalNotFound\n\t}\n\n\tif p.Status() != StatusActive {\n\t\treturn false, ErrStatusIsNotActive\n\t}\n\n\tif err := dao.checkProposalPasses(p); err != nil {\n\t\t// Don't return an error if proposal failed to pass when tallying\n\t\tif err == ErrProposalFailed {\n\t\t\treturn false, nil\n\t\t}\n\t\treturn false, err\n\t}\n\treturn true, nil\n}\n\n// Execute executes a proposal.\nfunc (dao *CommonDAO) Execute(proposalID uint64) error {\n\tp, found := dao.GetActiveProposal(proposalID)\n\tif !found {\n\t\treturn ErrProposalNotFound\n\t}\n\n\tif p.Status() != StatusActive {\n\t\treturn ErrStatusIsNotActive\n\t}\n\n\tif time.Now().Before(p.VotingDeadline()) {\n\t\treturn ErrVotingDeadlineNotMet\n\t}\n\n\t// From this point any error results in a proposal failure and successful execution\n\terr := p.Validate()\n\n\tif err == nil {\n\t\terr = dao.checkProposalPasses(p)\n\t}\n\n\tif err == nil {\n\t\t// Execute proposal only if it's executable\n\t\tif e, ok := p.Definition().(Executable); ok {\n\t\t\terr = e.Execute()\n\t\t}\n\t}\n\n\t// Proposal fails if there is any error during validation and execution process\n\tif err != nil {\n\t\tp.status = StatusFailed\n\t\tp.statusReason = err.Error()\n\t} else {\n\t\tp.status = StatusPassed\n\t}\n\n\t// Whichever the outcome of the validation, tallying\n\t// and execution consider the proposal finished.\n\tkey := makeProposalKey(p.id)\n\tdao.active.Remove(key)\n\tdao.finished.Set(key, p)\n\treturn nil\n}\n\nfunc (dao *CommonDAO) checkProposalPasses(p *Proposal) error {\n\trecord := p.VotingRecord().Readonly()\n\tmembers := NewMemberSet(*dao.Members())\n\tpasses, err := p.Definition().Tally(record, members)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif !passes {\n\t\treturn ErrProposalFailed\n\t}\n\treturn nil\n}\n\nfunc makeProposalKey(id uint64) string {\n\treturn seqid.ID(id).String()\n}\n"},{"name":"commondao_test.gno","body":"package commondao\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n\n\t\"gno.land/p/demo/seqid\"\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/urequire\"\n)\n\nfunc TestNew(t *testing.T) {\n\tcases := []struct {\n\t\tname    string\n\t\tparent  *CommonDAO\n\t\tmembers []std.Address\n\t}{\n\t\t{\n\t\t\tname:    \"with parent\",\n\t\t\tparent:  New(),\n\t\t\tmembers: []std.Address{\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"},\n\t\t},\n\t\t{\n\t\t\tname:    \"without parent\",\n\t\t\tmembers: []std.Address{\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"},\n\t\t},\n\t\t{\n\t\t\tname: \"multiple members\",\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t\t\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\",\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"no members\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tmembersCount := len(tc.members)\n\t\t\toptions := []Option{WithParent(tc.parent)}\n\t\t\tfor _, m := range tc.members {\n\t\t\t\toptions = append(options, WithMember(m))\n\t\t\t}\n\n\t\t\tdao := New(options...)\n\n\t\t\tif tc.parent == nil {\n\t\t\t\tuassert.Equal(t, nil, dao.Parent())\n\t\t\t} else {\n\t\t\t\tuassert.NotEqual(t, nil, dao.Parent())\n\t\t\t}\n\n\t\t\turequire.Equal(t, membersCount, dao.Members().Size(), \"dao members\")\n\n\t\t\tvar i int\n\t\t\tdao.Members().IterateByOffset(0, membersCount, func(addr std.Address) bool {\n\t\t\t\tuassert.Equal(t, tc.members[i], addr)\n\t\t\t\ti++\n\t\t\t\treturn false\n\t\t\t})\n\t\t})\n\t}\n}\n\nfunc TestCommonDAOMembersAdd(t *testing.T) {\n\tmember := std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\tdao := New(WithMember(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\"))\n\n\tadded := dao.Members().Add(member)\n\turequire.True(t, added)\n\n\tuassert.Equal(t, 2, dao.Members().Size())\n\tuassert.True(t, dao.Members().Has(member))\n\n\tadded = dao.Members().Add(member)\n\turequire.False(t, added)\n}\n\nfunc TestCommonDAOMembersRemove(t *testing.T) {\n\tmember := std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\tdao := New(WithMember(member))\n\n\tremoved := dao.Members().Remove(member)\n\turequire.True(t, removed)\n\n\tremoved = dao.Members().Remove(member)\n\turequire.False(t, removed)\n}\n\nfunc TestCommonDAOMembersHas(t *testing.T) {\n\tcases := []struct {\n\t\tname   string\n\t\tmember std.Address\n\t\tdao    *CommonDAO\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"member\",\n\t\t\tmember: \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\tdao:    New(WithMember(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"not a dao member\",\n\t\t\tmember: \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\tdao:    New(WithMember(\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\")),\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tgot := tc.dao.Members().Has(tc.member)\n\t\t\tuassert.Equal(t, got, tc.want)\n\t\t})\n\t}\n}\n\nfunc TestCommonDAOPropose(t *testing.T) {\n\tcases := []struct {\n\t\tname    string\n\t\tsetup   func() *CommonDAO\n\t\tcreator std.Address\n\t\tdef     ProposalDefinition\n\t\terr     error\n\t}{\n\t\t{\n\t\t\tname:    \"success\",\n\t\t\tsetup:   func() *CommonDAO { return New() },\n\t\t\tcreator: \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\tdef:     testPropDef{},\n\t\t},\n\t\t{\n\t\t\tname:  \"nil definition\",\n\t\t\tsetup: func() *CommonDAO { return New() },\n\t\t\terr:   ErrProposalDefinitionRequired,\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid creator address\",\n\t\t\tsetup: func() *CommonDAO { return New() },\n\t\t\tdef:   testPropDef{},\n\t\t\terr:   ErrInvalidCreatorAddress,\n\t\t},\n\t\t{\n\t\t\tname: \"proposal ID overflow\",\n\t\t\tsetup: func() *CommonDAO {\n\t\t\t\tdao := New()\n\t\t\t\tdao.genID = seqid.ID(1\u003c\u003c64 - 1)\n\t\t\t\treturn dao\n\t\t\t},\n\t\t\tcreator: \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\tdef:     testPropDef{},\n\t\t\terr:     ErrOverflow,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tdao := tc.setup()\n\n\t\t\tp, err := dao.Propose(tc.creator, tc.def)\n\n\t\t\tif tc.err != nil {\n\t\t\t\turequire.ErrorIs(t, err, tc.err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\turequire.NoError(t, err)\n\n\t\t\t_, found := dao.GetActiveProposal(p.ID())\n\t\t\turequire.True(t, found, \"proposal not found\")\n\t\t\tuassert.Equal(t, p.Creator(), tc.creator)\n\t\t})\n\t}\n}\n\nfunc TestCommonDAOVote(t *testing.T) {\n\tcases := []struct {\n\t\tname       string\n\t\tsetup      func() *CommonDAO\n\t\tmember     std.Address\n\t\tchoice     VoteChoice\n\t\tproposalID uint64\n\t\terr        error\n\t}{\n\t\t{\n\t\t\tname: \"success\",\n\t\t\tsetup: func() *CommonDAO {\n\t\t\t\tmember := std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n\t\t\t\tdao := New(WithMember(member))\n\t\t\t\tdao.Propose(member, testPropDef{})\n\t\t\t\treturn dao\n\t\t\t},\n\t\t\tmember:     \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\tchoice:     ChoiceYes,\n\t\t\tproposalID: 1,\n\t\t},\n\t\t{\n\t\t\tname: \"success with custom vote choice\",\n\t\t\tsetup: func() *CommonDAO {\n\t\t\t\tmember := std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n\t\t\t\tdao := New(WithMember(member))\n\t\t\t\tdao.Propose(member, testPropDef{\n\t\t\t\t\tvoteChoices: []VoteChoice{\"FOO\", \"BAR\"},\n\t\t\t\t})\n\t\t\t\treturn dao\n\t\t\t},\n\t\t\tmember:     \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\tchoice:     VoteChoice(\"BAR\"),\n\t\t\tproposalID: 1,\n\t\t},\n\t\t{\n\t\t\tname: \"invalid vote choice\",\n\t\t\tsetup: func() *CommonDAO {\n\t\t\t\tmember := std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n\t\t\t\tdao := New(WithMember(member))\n\t\t\t\tdao.Propose(member, testPropDef{})\n\t\t\t\treturn dao\n\t\t\t},\n\t\t\tmember:     \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\tchoice:     VoteChoice(\"invalid\"),\n\t\t\tproposalID: 1,\n\t\t\terr:        ErrInvalidVoteChoice,\n\t\t},\n\t\t{\n\t\t\tname:   \"not a member\",\n\t\t\tsetup:  func() *CommonDAO { return New() },\n\t\t\tmember: \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\tchoice: ChoiceAbstain,\n\t\t\terr:    ErrNotMember,\n\t\t},\n\t\t{\n\t\t\tname: \"proposal not found\",\n\t\t\tsetup: func() *CommonDAO {\n\t\t\t\treturn New(WithMember(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\"))\n\t\t\t},\n\t\t\tmember:     \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\tchoice:     ChoiceAbstain,\n\t\t\tproposalID: 42,\n\t\t\terr:        ErrProposalNotFound,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tdao := tc.setup()\n\n\t\t\terr := dao.Vote(tc.member, tc.proposalID, tc.choice, \"\")\n\n\t\t\tif tc.err != nil {\n\t\t\t\turequire.ErrorIs(t, err, tc.err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\turequire.NoError(t, err)\n\n\t\t\tp, found := dao.GetActiveProposal(tc.proposalID)\n\t\t\turequire.True(t, found, \"proposal not found\")\n\n\t\t\trecord := p.VotingRecord()\n\t\t\tuassert.True(t, record.HasVoted(tc.member))\n\t\t\tuassert.Equal(t, record.VoteCount(tc.choice), 1)\n\t\t})\n\t}\n}\n\nfunc TestCommonDAOTally(t *testing.T) {\n\terrTest := errors.New(\"test\")\n\tmember := std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\tcases := []struct {\n\t\tname   string\n\t\tsetup  func(*CommonDAO) (proposalID uint64)\n\t\tpasses bool\n\t\terr    error\n\t}{\n\t\t{\n\t\t\tname: \"pass\",\n\t\t\tsetup: func(dao *CommonDAO) uint64 {\n\t\t\t\treturn dao.MustPropose(member, testPropDef{tallyResult: true}).ID()\n\t\t\t},\n\t\t\tpasses: true,\n\t\t},\n\t\t{\n\t\t\tname: \"fail to pass\",\n\t\t\tsetup: func(dao *CommonDAO) uint64 {\n\t\t\t\treturn dao.MustPropose(member, testPropDef{tallyResult: false}).ID()\n\t\t\t},\n\t\t\tpasses: false,\n\t\t},\n\t\t{\n\t\t\tname:  \"proposal not found\",\n\t\t\tsetup: func(*CommonDAO) uint64 { return 404 },\n\t\t\terr:   ErrProposalNotFound,\n\t\t},\n\t\t{\n\t\t\tname: \"proposal status not active\",\n\t\t\tsetup: func(dao *CommonDAO) uint64 {\n\t\t\t\tp := dao.MustPropose(member, testPropDef{})\n\t\t\t\tp.status = StatusPassed\n\t\t\t\treturn p.ID()\n\t\t\t},\n\t\t\terr: ErrStatusIsNotActive,\n\t\t},\n\t\t{\n\t\t\tname: \"proposal failed error\",\n\t\t\tsetup: func(dao *CommonDAO) uint64 {\n\t\t\t\treturn dao.MustPropose(member, testPropDef{tallyErr: ErrProposalFailed}).ID()\n\t\t\t},\n\t\t\tpasses: false,\n\t\t},\n\t\t{\n\t\t\tname: \"error\",\n\t\t\tsetup: func(dao *CommonDAO) uint64 {\n\t\t\t\treturn dao.MustPropose(member, testPropDef{tallyErr: errTest}).ID()\n\t\t\t},\n\t\t\terr: errTest,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tdao := New(WithMember(member))\n\t\t\tproposalID := tc.setup(dao)\n\n\t\t\tpasses, err := dao.Tally(proposalID)\n\n\t\t\tif tc.err != nil {\n\t\t\t\tuassert.ErrorIs(t, err, tc.err, \"expect an error\")\n\t\t\t\tuassert.False(t, passes, \"expect tally to fail\")\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tuassert.NoError(t, err, \"expect no error\")\n\t\t\tuassert.Equal(t, tc.passes, passes, \"expect tally success value to match\")\n\t\t})\n\t}\n}\n\nfunc TestCommonDAOExecute(t *testing.T) {\n\terrTest := errors.New(\"test\")\n\tmember := std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n\tcases := []struct {\n\t\tname         string\n\t\tsetup        func() *CommonDAO\n\t\tproposalID   uint64\n\t\tstatus       ProposalStatus\n\t\tstatusReason string\n\t\terr          error\n\t}{\n\t\t{\n\t\t\tname: \"success\",\n\t\t\tsetup: func() *CommonDAO {\n\t\t\t\tdao := New(WithMember(member))\n\t\t\t\tdao.Propose(member, testPropDef{tallyResult: true})\n\t\t\t\treturn dao\n\t\t\t},\n\t\t\tstatus:     StatusPassed,\n\t\t\tproposalID: 1,\n\t\t},\n\t\t{\n\t\t\tname:       \"proposal not found\",\n\t\t\tsetup:      func() *CommonDAO { return New() },\n\t\t\tproposalID: 1,\n\t\t\terr:        ErrProposalNotFound,\n\t\t},\n\t\t{\n\t\t\tname: \"proposal not active\",\n\t\t\tsetup: func() *CommonDAO {\n\t\t\t\tdao := New(WithMember(member))\n\t\t\t\tp, _ := dao.Propose(member, testPropDef{})\n\t\t\t\tp.status = StatusPassed\n\t\t\t\treturn dao\n\t\t\t},\n\t\t\tproposalID: 1,\n\t\t\terr:        ErrStatusIsNotActive,\n\t\t},\n\t\t{\n\t\t\tname: \"voting deadline not met\",\n\t\t\tsetup: func() *CommonDAO {\n\t\t\t\tdao := New(WithMember(member))\n\t\t\t\tdao.Propose(member, testPropDef{votingPeriod: time.Minute * 5})\n\t\t\t\treturn dao\n\t\t\t},\n\t\t\tproposalID: 1,\n\t\t\terr:        ErrVotingDeadlineNotMet,\n\t\t},\n\t\t{\n\t\t\tname: \"validation error\",\n\t\t\tsetup: func() *CommonDAO {\n\t\t\t\tdao := New(WithMember(member))\n\t\t\t\tdao.Propose(member, testPropDef{validationErr: errTest})\n\t\t\t\treturn dao\n\t\t\t},\n\t\t\tproposalID:   1,\n\t\t\tstatus:       StatusFailed,\n\t\t\tstatusReason: errTest.Error(),\n\t\t},\n\t\t{\n\t\t\tname: \"tally error\",\n\t\t\tsetup: func() *CommonDAO {\n\t\t\t\tdao := New(WithMember(member))\n\t\t\t\tdao.Propose(member, testPropDef{tallyErr: errTest})\n\t\t\t\treturn dao\n\t\t\t},\n\t\t\tproposalID:   1,\n\t\t\tstatus:       StatusFailed,\n\t\t\tstatusReason: errTest.Error(),\n\t\t},\n\t\t{\n\t\t\tname: \"execution error\",\n\t\t\tsetup: func() *CommonDAO {\n\t\t\t\tdao := New(WithMember(member))\n\t\t\t\tdao.Propose(member, testPropDef{\n\t\t\t\t\ttallyResult:  true,\n\t\t\t\t\texecutionErr: errTest,\n\t\t\t\t})\n\t\t\t\treturn dao\n\t\t\t},\n\t\t\tproposalID:   1,\n\t\t\tstatus:       StatusFailed,\n\t\t\tstatusReason: errTest.Error(),\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tdao := tc.setup()\n\n\t\t\terr := dao.Execute(tc.proposalID)\n\n\t\t\tif tc.err != nil {\n\t\t\t\turequire.ErrorIs(t, err, tc.err, \"expect error to match\")\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\turequire.NoError(t, err, \"expect no error\")\n\n\t\t\t_, found := dao.GetActiveProposal(tc.proposalID)\n\t\t\turequire.False(t, found, \"proposal should not be active\")\n\n\t\t\tp, found := dao.GetFinishedProposal(tc.proposalID)\n\t\t\turequire.True(t, found, \"proposal must be found\")\n\t\t\tuassert.Equal(t, string(p.Status()), string(tc.status), \"status must match\")\n\t\t\tuassert.Equal(t, string(p.StatusReason()), string(tc.statusReason), \"status reason must match\")\n\t\t})\n\t}\n}\n"},{"name":"memberset.gno","body":"package commondao\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/moul/addrset\"\n)\n\n// NewMemberSet creates a new readonly memberset.\nfunc NewMemberSet(members addrset.Set) MemberSet { // TODO: Use an interface instead of addrset.Set\n\treturn MemberSet{members}\n}\n\n// MemberSet contains a readonly list of member addresses.\ntype MemberSet struct {\n\tmembers addrset.Set\n}\n\n// Size returns the number of addresses in the set.\nfunc (s MemberSet) Size() int {\n\treturn s.members.Size()\n}\n\n// Has checks if an address exists in the set.\nfunc (s MemberSet) Has(member std.Address) bool {\n\treturn s.members.Has(member)\n}\n\n// IterateByOffset walks through addresses starting at the given offset.\n// The callback should return true to stop iteration.\nfunc (s MemberSet) IterateByOffset(offset, count int, fn func(std.Address) bool) {\n\ts.members.IterateByOffset(offset, count, fn)\n}\n"},{"name":"memberset_test.gno","body":"package commondao\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/moul/addrset\"\n)\n\nfunc TestMemberSetSize(t *testing.T) {\n\tvar set addrset.Set\n\tmembers := NewMemberSet(set)\n\tuassert.Equal(t, 0, members.Size(), \"expect size 0\")\n\n\tset.Add(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\tmembers = NewMemberSet(set)\n\tuassert.Equal(t, 1, members.Size(), \"expect size 1\")\n\n\tset.Add(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n\tmembers = NewMemberSet(set)\n\tuassert.Equal(t, 2, members.Size(), \"expect size 2\")\n}\n\nfunc TestMemberSetHas(t *testing.T) {\n\tvar set addrset.Set\n\tset.Add(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\n\tmembers := NewMemberSet(set)\n\n\tuassert.True(t, members.Has(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), \"expect member is found\")\n\tuassert.False(t, members.Has(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\"), \"expect member is not found\")\n}\n\nfunc TestMemberSetIterateByOffset(t *testing.T) {\n\tvar set addrset.Set\n\tset.Add(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\tset.Add(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\") // \u003c--\n\tset.Add(\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\")\n\n\tNewMemberSet(set).IterateByOffset(1, 1, func(addr std.Address) bool {\n\t\tuassert.Equal(t, \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", addr.String(), \"expect address to match\")\n\t\treturn true\n\t})\n}\n"},{"name":"options.gno","body":"package commondao\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/moul/addrset\"\n)\n\n// Option configures the CommonDAO.\ntype Option func(*CommonDAO)\n\n// WithID assigns a unique identifier to the DAO.\nfunc WithID(id uint64) Option {\n\treturn func(dao *CommonDAO) {\n\t\tdao.id = id\n\t}\n}\n\n// WithName assigns a name to the DAO.\nfunc WithName(name string) Option {\n\treturn func(dao *CommonDAO) {\n\t\tdao.name = name\n\t}\n}\n\n// WithDescription assigns a description to the DAO.\nfunc WithDescription(description string) Option {\n\treturn func(dao *CommonDAO) {\n\t\tdao.description = description\n\t}\n}\n\n// WithSlug assigns a URL slug to the DAO.\nfunc WithSlug(slug string) Option {\n\treturn func(dao *CommonDAO) {\n\t\tdao.slug = slug\n\t}\n}\n\n// WithParent assigns a parent DAO.\nfunc WithParent(p *CommonDAO) Option {\n\treturn func(dao *CommonDAO) {\n\t\tdao.parent = p\n\t}\n}\n\n// WithChildren assigns one or more direct child SubDAOs to the DAO.\nfunc WithChildren(children ...*CommonDAO) Option {\n\treturn func(dao *CommonDAO) {\n\t\tfor _, subDAO := range children {\n\t\t\tdao.children.Append(subDAO)\n\t\t}\n\t}\n}\n\n// WithMember assigns a member to the DAO.\nfunc WithMember(addr std.Address) Option {\n\treturn func(dao *CommonDAO) {\n\t\tdao.members.Add(addr)\n\t}\n}\n\n// WithMembers assigns multiple members to the DAO.\n// An empty member set is used by default when specified members set is nil.\nfunc WithMembers(members *addrset.Set) Option {\n\treturn func(dao *CommonDAO) {\n\t\tif members == nil {\n\t\t\tmembers = \u0026addrset.Set{}\n\t\t}\n\t\tdao.members = members\n\t}\n}\n"},{"name":"proposal.gno","body":"package commondao\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nconst (\n\tStatusActive ProposalStatus = \"active\"\n\tStatusFailed                = \"failed\"\n\tStatusPassed                = \"passed\"\n)\n\nconst (\n\tChoiceNone       VoteChoice = \"\"\n\tChoiceYes                   = \"YES\"\n\tChoiceNo                    = \"NO\"\n\tChoiceNoWithVeto            = \"NO WITH VETO\"\n\tChoiceAbstain               = \"ABSTAIN\"\n)\n\nconst (\n\tQuorumOneThird     float64 = 0.33 // percentage\n\tQuorumHalf                 = 0.5\n\tQuorumTwoThirds            = 0.66\n\tQuorumThreeFourths         = 0.75\n\tQuorumFull                 = 1\n)\n\nvar (\n\tErrInvalidCreatorAddress      = errors.New(\"invalid proposal creator address\")\n\tErrProposalDefinitionRequired = errors.New(\"proposal definition is required\")\n\tErrNoQuorum                   = errors.New(\"no quorum\")\n\tErrStatusIsNotActive          = errors.New(\"proposal status is not active\")\n)\n\ntype (\n\t// ProposalStatus defines a type for different proposal states.\n\tProposalStatus string\n\n\t// VoteChoice defines a type for proposal vote choices.\n\tVoteChoice string\n\n\t// Proposal defines a DAO proposal.\n\tProposal struct {\n\t\tid             uint64\n\t\tstatus         ProposalStatus\n\t\tdefinition     ProposalDefinition\n\t\tcreator        std.Address\n\t\trecord         *VotingRecord\n\t\tstatusReason   string\n\t\tvoteChoices    *avl.Tree // string(VoteChoice) -\u003e struct{}\n\t\tvotingDeadline time.Time\n\t\tcreatedAt      time.Time\n\t}\n\n\t// ProposalDefinition defines an interface for custom proposal definitions.\n\t// These definitions define proposal content and behavior, they esentially\n\t// allow the definition for different proposal types.\n\tProposalDefinition interface {\n\t\t// Title returns the proposal title.\n\t\tTitle() string\n\n\t\t// Body returns the proposal body.\n\t\t// It usually contains the proposal description and other elements like proposal parameters.\n\t\tBody() string\n\n\t\t// VotingPeriod returns the period where votes are allowed after proposal creation.\n\t\t// No more votes should be allowed once this period is met. It is used to calculate\n\t\t// the voting deadline from the proposal's creationd date.\n\t\tVotingPeriod() time.Duration\n\n\t\t// Tally counts the number of votes and verifies if proposal passes.\n\t\tTally(r ReadonlyVotingRecord, members MemberSet) (passes bool, _ error)\n\t}\n\n\t// Validable defines an interface for proposal definitions that require state validation.\n\t// Validation is done before execution and normally also during proposal rendering.\n\tValidable interface {\n\t\t// Validate validates that the proposal is valid for the current state.\n\t\tValidate() error\n\t}\n\n\t// Executable defines an interface for proposal definitions that modify state on approval.\n\t// Once proposals are executed they are archived and considered finished.\n\tExecutable interface {\n\t\t// Execute executes the proposal.\n\t\tExecute() error\n\t}\n\n\t// CustomizableVoteChoices defines an interface for proposal definitions that want\n\t// to customize the list of allowed voting choices.\n\tCustomizableVoteChoices interface {\n\t\t// CustomVoteChoices returns a list of valid voting choices.\n\t\t// Choices are considered valid only when there are at least two possible choices\n\t\t// otherwise proposal defaults to using YES, NO and ABSTAIN as valid choices.\n\t\tCustomVoteChoices() []VoteChoice\n\t}\n)\n\n// NewProposal creates a new DAO proposal.\nfunc NewProposal(id uint64, creator std.Address, d ProposalDefinition) (*Proposal, error) {\n\tif d == nil {\n\t\treturn nil, ErrProposalDefinitionRequired\n\t}\n\n\tif !creator.IsValid() {\n\t\treturn nil, ErrInvalidCreatorAddress\n\t}\n\n\tnow := time.Now()\n\tp := \u0026Proposal{\n\t\tid:             id,\n\t\tstatus:         StatusActive,\n\t\tdefinition:     d,\n\t\tcreator:        creator,\n\t\trecord:         \u0026VotingRecord{},\n\t\tvoteChoices:    avl.NewTree(),\n\t\tvotingDeadline: now.Add(d.VotingPeriod()),\n\t\tcreatedAt:      now,\n\t}\n\n\tif v, ok := d.(CustomizableVoteChoices); ok {\n\t\tfor _, c := range v.CustomVoteChoices() {\n\t\t\tp.voteChoices.Set(string(c), struct{}{})\n\t\t}\n\t}\n\n\t// Use default voting choices when the definition returns none or a single vote choice\n\tif p.voteChoices.Size() \u003c 2 {\n\t\tp.voteChoices.Set(string(ChoiceYes), struct{}{})\n\t\tp.voteChoices.Set(string(ChoiceNo), struct{}{})\n\t\tp.voteChoices.Set(string(ChoiceAbstain), struct{}{})\n\t}\n\n\treturn p, nil\n}\n\n// ID returns the unique proposal identifies.\nfunc (p Proposal) ID() uint64 {\n\treturn p.id\n}\n\n// Definition returns the proposal definition.\n// Proposal definitions define proposal content and behavior.\nfunc (p Proposal) Definition() ProposalDefinition {\n\treturn p.definition\n}\n\n// Status returns the current proposal status.\nfunc (p Proposal) Status() ProposalStatus {\n\treturn p.status\n}\n\n// Creator returns the address of the account that created the proposal.\nfunc (p Proposal) Creator() std.Address {\n\treturn p.creator\n}\n\n// CreatedAt returns the time that proposal was created.\nfunc (p Proposal) CreatedAt() time.Time {\n\treturn p.createdAt\n}\n\n// VotingRecord returns a record that contains all the votes submitted for the proposal.\nfunc (p Proposal) VotingRecord() *VotingRecord {\n\treturn p.record\n}\n\n// StatusReason returns an optional reason that lead to the current proposal status.\n// Reason is mostyl useful when a proposal fails.\nfunc (p Proposal) StatusReason() string {\n\treturn p.statusReason\n}\n\n// VotingDeadline returns the deadline after which no more votes should be allowed.\nfunc (p Proposal) VotingDeadline() time.Time {\n\treturn p.votingDeadline\n}\n\n// VoteChoices returns the list of vote choices allowed for the proposal.\nfunc (p Proposal) VoteChoices() []VoteChoice {\n\tvar (\n\t\ti       int\n\t\tchoices = make([]VoteChoice, p.voteChoices.Size())\n\t)\n\n\tp.voteChoices.Iterate(\"\", \"\", func(c string, _ any) bool {\n\t\tchoices[i] = VoteChoice(c)\n\t\ti++\n\t\treturn false\n\t})\n\treturn choices\n}\n\n// Validate validates that a proposal is valid for the current state.\n// Validation is done when proposal status is active and when the definition supports validation.\nfunc (p Proposal) Validate() error {\n\tif p.status != StatusActive {\n\t\treturn nil\n\t}\n\n\tif v, ok := p.definition.(Validable); ok {\n\t\treturn v.Validate()\n\t}\n\treturn nil\n}\n\n// IsValidVoteChoice checks if a vote choice is valid for the proposal.\nfunc (p Proposal) IsValidVoteChoice(c VoteChoice) bool {\n\treturn p.voteChoices.Has(string(c))\n}\n\n// IsQuorumReached checks if a participation quorum is reach.\nfunc IsQuorumReached(quorum float64, r ReadonlyVotingRecord, members MemberSet) bool {\n\tif members.Size() \u003c= 0 || quorum \u003c= 0 {\n\t\treturn false\n\t}\n\n\tvar votesCount int\n\tfor _, c := range r.Choices() {\n\t\t// Don't count explicit abstentions or invalid votes\n\t\tif c == ChoiceNone || c == ChoiceAbstain {\n\t\t\tcontinue\n\t\t}\n\n\t\tvotesCount += r.VoteCount(c)\n\t}\n\n\tpercentage := float64(votesCount) / float64(members.Size())\n\treturn percentage \u003e= quorum\n}\n"},{"name":"proposal_test.gno","body":"package commondao\n\nimport (\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/urequire\"\n\t\"gno.land/p/moul/addrset\"\n)\n\nfunc TestProposalNew(t *testing.T) {\n\tid := uint64(1)\n\tcreator := std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\tvotingPeriod := time.Minute * 10\n\n\tp, err := NewProposal(id, creator, testPropDef{votingPeriod: votingPeriod})\n\n\tuassert.NoError(t, err)\n\tuassert.Equal(t, p.ID(), id)\n\tuassert.NotEqual(t, p.Definition(), nil)\n\tuassert.True(t, p.Status() == StatusActive)\n\tuassert.Equal(t, p.Creator(), creator)\n\tuassert.False(t, p.CreatedAt().IsZero())\n\tuassert.NotEqual(t, p.VotingRecord(), nil)\n\tuassert.Empty(t, p.StatusReason())\n\tuassert.True(t, p.VotingDeadline() == p.CreatedAt().Add(votingPeriod))\n}\n\nfunc TestProposalVoteChoices(t *testing.T) {\n\tcases := []struct {\n\t\tname       string\n\t\tdefinition ProposalDefinition\n\t\tchoices    []VoteChoice\n\t}{\n\t\t{\n\t\t\tname:       \"custom choices\",\n\t\t\tdefinition: testPropDef{voteChoices: []VoteChoice{\"FOO\", \"BAR\", \"BAZ\"}},\n\t\t\tchoices:    []VoteChoice{\"BAR\", \"BAZ\", \"FOO\"},\n\t\t},\n\t\t{\n\t\t\tname:       \"defaults because of empty custom choice list\",\n\t\t\tdefinition: testPropDef{voteChoices: []VoteChoice{}},\n\t\t\tchoices:    []VoteChoice{ChoiceAbstain, ChoiceNo, ChoiceYes},\n\t\t},\n\t\t{\n\t\t\tname:       \"defaults because of single custom choice list\",\n\t\t\tdefinition: testPropDef{voteChoices: []VoteChoice{\"FOO\"}},\n\t\t\tchoices:    []VoteChoice{ChoiceAbstain, ChoiceNo, ChoiceYes},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tp, _ := NewProposal(1, \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", testPropDef{\n\t\t\t\tvoteChoices: tc.choices,\n\t\t\t})\n\n\t\t\tchoices := p.VoteChoices()\n\n\t\t\turequire.Equal(t, len(choices), len(tc.choices), \"expect vote choice count to match\")\n\t\t\tfor i, c := range choices {\n\t\t\t\turequire.True(t, tc.choices[i] == c, \"expect vote choice to match\")\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestIsQuorumReached(t *testing.T) {\n\tcases := []struct {\n\t\tname    string\n\t\tquorum  float64\n\t\tmembers []std.Address\n\t\tvotes   []Vote\n\t\tfail    bool\n\t}{\n\t\t{\n\t\t\tname:   \"one third\",\n\t\t\tquorum: QuorumOneThird,\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t\t\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\",\n\t\t\t},\n\t\t\tvotes: []Vote{\n\t\t\t\t{Address: \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", Choice: ChoiceYes},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:   \"one third no quorum\",\n\t\t\tquorum: QuorumOneThird,\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t\t\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\",\n\t\t\t},\n\t\t\tfail: true,\n\t\t},\n\t\t{\n\t\t\tname:   \"half\",\n\t\t\tquorum: QuorumHalf,\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t\t\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\",\n\t\t\t\t\"g125t352u4pmdrr57emc4pe04y40sknr5ztng5mt\",\n\t\t\t},\n\t\t\tvotes: []Vote{\n\t\t\t\t{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes},\n\t\t\t\t{Address: \"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\", Choice: ChoiceNo},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:   \"half no quorum\",\n\t\t\tquorum: QuorumHalf,\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t\t\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\",\n\t\t\t\t\"g125t352u4pmdrr57emc4pe04y40sknr5ztng5mt\",\n\t\t\t},\n\t\t\tvotes: []Vote{\n\t\t\t\t{Address: \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", Choice: ChoiceYes},\n\t\t\t},\n\t\t\tfail: true,\n\t\t},\n\t\t{\n\t\t\tname:   \"two thirds\",\n\t\t\tquorum: QuorumTwoThirds,\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t\t\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\",\n\t\t\t},\n\t\t\tvotes: []Vote{\n\t\t\t\t{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes},\n\t\t\t\t{Address: \"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\", Choice: ChoiceNo},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:   \"two thirds no quorum\",\n\t\t\tquorum: QuorumTwoThirds,\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t\t\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\",\n\t\t\t},\n\t\t\tvotes: []Vote{\n\t\t\t\t{Address: \"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\", Choice: ChoiceNo},\n\t\t\t},\n\t\t\tfail: true,\n\t\t},\n\t\t{\n\t\t\tname:   \"three fourths\",\n\t\t\tquorum: QuorumThreeFourths,\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t\t\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\",\n\t\t\t\t\"g125t352u4pmdrr57emc4pe04y40sknr5ztng5mt\",\n\t\t\t},\n\t\t\tvotes: []Vote{\n\t\t\t\t{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes},\n\t\t\t\t{Address: \"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\", Choice: ChoiceNo},\n\t\t\t\t{Address: \"g125t352u4pmdrr57emc4pe04y40sknr5ztng5mt\", Choice: ChoiceNo},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:   \"three fourths no quorum\",\n\t\t\tquorum: QuorumThreeFourths,\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t\t\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\",\n\t\t\t\t\"g125t352u4pmdrr57emc4pe04y40sknr5ztng5mt\",\n\t\t\t},\n\t\t\tvotes: []Vote{\n\t\t\t\t{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes},\n\t\t\t},\n\t\t\tfail: true,\n\t\t},\n\t\t{\n\t\t\tname:   \"full\",\n\t\t\tquorum: QuorumFull,\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t},\n\t\t\tvotes: []Vote{\n\t\t\t\t{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceNo},\n\t\t\t\t{Address: \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", Choice: ChoiceNo},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:   \"full no quorum\",\n\t\t\tquorum: QuorumFull,\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t},\n\t\t\tvotes: []Vote{\n\t\t\t\t{Address: \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", Choice: ChoiceNo},\n\t\t\t},\n\t\t\tfail: true,\n\t\t},\n\t\t{\n\t\t\tname:   \"no quorum with empty vote\",\n\t\t\tquorum: QuorumHalf,\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t},\n\t\t\tvotes: []Vote{\n\t\t\t\t{Address: \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", Choice: ChoiceNone},\n\t\t\t},\n\t\t\tfail: true,\n\t\t},\n\t\t{\n\t\t\tname:   \"no quorum with abstention\",\n\t\t\tquorum: QuorumHalf,\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t},\n\t\t\tvotes: []Vote{\n\t\t\t\t{Address: \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", Choice: ChoiceAbstain},\n\t\t\t},\n\t\t\tfail: true,\n\t\t},\n\t\t{\n\t\t\tname:   \"invalid quorum percentage\",\n\t\t\tquorum: -1,\n\t\t\tfail:   true,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar members addrset.Set\n\t\t\tfor _, m := range tc.members {\n\t\t\t\tmembers.Add(m)\n\t\t\t}\n\n\t\t\tvar record VotingRecord\n\t\t\tfor _, v := range tc.votes {\n\t\t\t\trecord.AddVote(v)\n\t\t\t}\n\n\t\t\tsuccess := IsQuorumReached(tc.quorum, record.Readonly(), NewMemberSet(members))\n\n\t\t\tif tc.fail {\n\t\t\t\tuassert.False(t, success, \"expect quorum to fail\")\n\t\t\t} else {\n\t\t\t\tuassert.True(t, success, \"expect quorum to succeed\")\n\t\t\t}\n\t\t})\n\t}\n}\n\ntype testPropDef struct {\n\tvotingPeriod                          time.Duration\n\ttallyResult                           bool\n\tvalidationErr, tallyErr, executionErr error\n\tvoteChoices                           []VoteChoice\n}\n\nfunc (testPropDef) Title() string                 { return \"\" }\nfunc (testPropDef) Body() string                  { return \"\" }\nfunc (d testPropDef) VotingPeriod() time.Duration { return d.votingPeriod }\nfunc (d testPropDef) Validate() error             { return d.validationErr }\nfunc (d testPropDef) Execute() error              { return d.executionErr }\n\nfunc (d testPropDef) Tally(ReadonlyVotingRecord, MemberSet) (bool, error) {\n\treturn d.tallyResult, d.tallyErr\n}\n\nfunc (d testPropDef) CustomVoteChoices() []VoteChoice {\n\tif len(d.voteChoices) \u003e 0 {\n\t\treturn d.voteChoices\n\t}\n\treturn []VoteChoice{ChoiceYes, ChoiceNo, ChoiceAbstain}\n}\n"},{"name":"record.gno","body":"package commondao\n\nimport (\n\t\"errors\"\n\t\"math\"\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n// ErrVoteExists indicates that a user already voted.\nvar ErrVoteExists = errors.New(\"user already voted\")\n\ntype (\n\t// VoteIterFn defines a callback to iterate votes.\n\tVoteIterFn func(Vote) (stop bool)\n\n\t// Vote defines a single vote.\n\tVote struct {\n\t\t// Address is the address of the user that this vote belons to.\n\t\tAddress std.Address\n\n\t\t// Choice contains the voted choice.\n\t\tChoice VoteChoice\n\n\t\t// Reason contains the reason for the vote.\n\t\tReason string\n\n\t\t// Context can store any custom voting values related to the vote.\n\t\tContext any\n\t}\n)\n\n// ReadonlyVotingRecord defines an read only voting record.\ntype ReadonlyVotingRecord struct {\n\tvotes avl.Tree // string(address) -\u003e Vote\n\tcount avl.Tree // string(choice) -\u003e int\n}\n\n// Size returns the total number of votes that record contains.\nfunc (r ReadonlyVotingRecord) Size() int {\n\treturn r.votes.Size()\n}\n\n// Choices returns the voting choices that has been voted.\nfunc (r ReadonlyVotingRecord) Choices() []VoteChoice {\n\tvar choices []VoteChoice\n\tr.count.Iterate(\"\", \"\", func(k string, v any) bool {\n\t\tchoices = append(choices, VoteChoice(k))\n\t\treturn false\n\t})\n\treturn choices\n}\n\n// Iterate iterates voting record votes.\nfunc (r ReadonlyVotingRecord) Iterate(fn VoteIterFn) bool {\n\treturn r.votes.Iterate(\"\", \"\", func(_ string, v any) bool {\n\t\treturn fn(v.(Vote))\n\t})\n}\n\n// VoteCount returns the number of votes for a single voting choice.\nfunc (r ReadonlyVotingRecord) VoteCount(c VoteChoice) int {\n\tif v, found := r.count.Get(string(c)); found {\n\t\treturn v.(int)\n\t}\n\treturn 0\n}\n\n// HasVoted checks if an account already voted.\nfunc (r ReadonlyVotingRecord) HasVoted(user std.Address) bool {\n\treturn r.votes.Has(user.String())\n}\n\n// VotingRecord stores accounts that voted and vote choices.\ntype VotingRecord struct {\n\tReadonlyVotingRecord\n}\n\n// Readonly returns a read only voting record.\nfunc (r VotingRecord) Readonly() ReadonlyVotingRecord {\n\treturn r.ReadonlyVotingRecord\n}\n\n// AddVote adds a vote to the voting record.\n// If a vote for the same user already exists is overwritten.\nfunc (r *VotingRecord) AddVote(vote Vote) (updated bool) {\n\t// Get previous member vote if it exists\n\tv, _ := r.votes.Get(vote.Address.String())\n\n\t// When a previous vote exists update counter for the previous choice\n\tupdated = r.votes.Set(vote.Address.String(), vote)\n\tif updated {\n\t\tprev := v.(Vote)\n\t\tr.count.Set(string(prev.Choice), r.VoteCount(prev.Choice)-1)\n\t}\n\n\tr.count.Set(string(vote.Choice), r.VoteCount(vote.Choice)+1)\n\treturn\n}\n\n// FindMostVotedChoice returns the most voted choice.\n// ChoiceNone is returned when there is a tie between different\n// voting choices or when the voting record has are no votes.\nfunc FindMostVotedChoice(r ReadonlyVotingRecord) VoteChoice {\n\tvar (\n\t\tchoice                  VoteChoice\n\t\tcurrentCount, prevCount int\n\t)\n\n\tfor _, c := range r.Choices() {\n\t\tcount := r.VoteCount(c)\n\t\tif currentCount \u003c= count {\n\t\t\tchoice = c\n\t\t\tprevCount = currentCount\n\t\t\tcurrentCount = count\n\t\t}\n\t}\n\n\tif prevCount \u003c currentCount {\n\t\treturn choice\n\t}\n\treturn ChoiceNone\n}\n\n// SelectChoiceByAbsoluteMajority select the vote choice by absolute majority.\n// Vote choice is a majority when chosen by more than half of the votes.\n// Absolute majority considers abstentions when counting votes.\nfunc SelectChoiceByAbsoluteMajority(r ReadonlyVotingRecord, membersCount int) (VoteChoice, bool) {\n\tchoice := FindMostVotedChoice(r)\n\tif choice != ChoiceNone \u0026\u0026 r.VoteCount(choice) \u003e int(membersCount/2) {\n\t\treturn choice, true\n\t}\n\treturn ChoiceNone, false\n}\n\n// SelectChoiceBySuperMajority select the vote choice by super majority using a 2/3s threshold.\n// Abstentions are not considered when calculating the super majority choice.\nfunc SelectChoiceBySuperMajority(r ReadonlyVotingRecord, membersCount int) (VoteChoice, bool) {\n\tif membersCount \u003c 3 {\n\t\treturn ChoiceNone, false\n\t}\n\n\tchoice := FindMostVotedChoice(r)\n\tif choice != ChoiceNone \u0026\u0026 r.VoteCount(choice) \u003e= int(math.Ceil((2*float64(membersCount))/3)) {\n\t\treturn choice, true\n\t}\n\treturn ChoiceNone, false\n}\n\n// SelectChoiceByPlurality selects the vote choice by plurality.\n// The choice will be considered a majority if it has votes and if there is no other\n// choice with the same number of votes. A tie won't be considered majority.\nfunc SelectChoiceByPlurality(r ReadonlyVotingRecord) (VoteChoice, bool) {\n\tvar (\n\t\tchoice       VoteChoice\n\t\tcurrentCount int\n\t\tisMajority   bool\n\t)\n\n\tfor _, c := range r.Choices() {\n\t\tif c == ChoiceAbstain || c == ChoiceNone {\n\t\t\tcontinue\n\t\t}\n\n\t\tcount := r.VoteCount(c)\n\t\tif currentCount \u003c count {\n\t\t\tchoice = c\n\t\t\tcurrentCount = count\n\t\t\tisMajority = true\n\t\t} else if currentCount == count {\n\t\t\tisMajority = false\n\t\t}\n\t}\n\n\tif isMajority {\n\t\treturn choice, true\n\t}\n\treturn ChoiceNone, false\n}\n"},{"name":"record_test.gno","body":"package commondao\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/urequire\"\n)\n\nfunc TestVotingRecordDefaults(t *testing.T) {\n\tvar (\n\t\trecord VotingRecord\n\t\tuser   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t)\n\n\tuassert.Equal(t, record.Size(), 0)\n\tuassert.Equal(t, record.VoteCount(ChoiceYes), 0)\n\tuassert.Equal(t, record.VoteCount(ChoiceNo), 0)\n\tuassert.Equal(t, record.VoteCount(ChoiceAbstain), 0)\n\tuassert.False(t, record.HasVoted(user))\n}\n\nfunc TestVotingRecordAddVote(t *testing.T) {\n\tcases := []struct {\n\t\tname                            string\n\t\tsetup                           func(*VotingRecord)\n\t\tvotes                           []Vote\n\t\tyesCount, noCount, abstainCount int\n\t\tupdated                         bool\n\t}{\n\t\t{\n\t\t\tname: \"single vote\",\n\t\t\tvotes: []Vote{\n\t\t\t\t{\n\t\t\t\t\tAddress: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\tChoice:  ChoiceYes,\n\t\t\t\t},\n\t\t\t},\n\t\t\tyesCount: 1,\n\t\t},\n\t\t{\n\t\t\tname: \"multiple votes\",\n\t\t\tvotes: []Vote{\n\t\t\t\t{\n\t\t\t\t\tAddress: \"g125t352u4pmdrr57emc4pe04y40sknr5ztng5mt\",\n\t\t\t\t\tChoice:  ChoiceNo,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tAddress: \"g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk\",\n\t\t\t\t\tChoice:  ChoiceYes,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tAddress: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\tChoice:  ChoiceNo,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tAddress: \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\",\n\t\t\t\t\tChoice:  ChoiceAbstain,\n\t\t\t\t},\n\t\t\t},\n\t\t\tyesCount:     1,\n\t\t\tnoCount:      2,\n\t\t\tabstainCount: 1,\n\t\t},\n\t\t{\n\t\t\tname: \"vote exists\",\n\t\t\tvotes: []Vote{\n\t\t\t\t{\n\t\t\t\t\tAddress: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\tChoice:  ChoiceYes,\n\t\t\t\t},\n\t\t\t},\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceAbstain})\n\t\t\t},\n\t\t\tyesCount:     1,\n\t\t\tabstainCount: 0,\n\t\t\tupdated:      true,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar (\n\t\t\t\trecord  VotingRecord\n\t\t\t\tupdated bool\n\t\t\t)\n\n\t\t\tif tc.setup != nil {\n\t\t\t\ttc.setup(\u0026record)\n\t\t\t}\n\n\t\t\tfor _, v := range tc.votes {\n\t\t\t\tupdated = updated || record.AddVote(v)\n\t\t\t}\n\n\t\t\turequire.Equal(t, updated, tc.updated, \"expect vote to be updated\")\n\t\t\turequire.Equal(t, record.Size(), len(tc.votes), \"expect record size to match\")\n\n\t\t\tvar i int\n\t\t\trecord.Iterate(func(v Vote) bool {\n\t\t\t\tuassert.Equal(t, v.Address, tc.votes[i].Address)\n\t\t\t\tuassert.Equal(t, string(v.Choice), string(tc.votes[i].Choice))\n\t\t\t\tuassert.True(t, record.HasVoted(v.Address))\n\n\t\t\t\ti++\n\t\t\t\treturn i == record.Size()\n\t\t\t})\n\t\t\turequire.Equal(t, record.Size(), i, \"expect number of iterated votes to match\")\n\n\t\t\tuassert.Equal(t, record.VoteCount(ChoiceYes), tc.yesCount, \"expect YES vote count to match\")\n\t\t\tuassert.Equal(t, record.VoteCount(ChoiceNo), tc.noCount, \"expect NO vote count to match\")\n\t\t\tuassert.Equal(t, record.VoteCount(ChoiceAbstain), tc.abstainCount, \"expect ABSTAIN vote count to match\")\n\t\t})\n\t}\n}\n\nfunc TestFindMostVotedChoice(t *testing.T) {\n\tcases := []struct {\n\t\tname   string\n\t\tsetup  func(*VotingRecord)\n\t\tchoice VoteChoice\n\t}{\n\t\t{\n\t\t\tname:   \"no votes\",\n\t\t\tchoice: ChoiceNone,\n\t\t},\n\t\t{\n\t\t\tname: \"one vote\",\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes})\n\t\t\t},\n\t\t\tchoice: ChoiceYes,\n\t\t},\n\t\t{\n\t\t\tname: \"multiple votes\",\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceNo})\n\t\t\t\tr.AddVote(Vote{Address: \"g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", Choice: ChoiceNo})\n\t\t\t},\n\t\t\tchoice: ChoiceNo,\n\t\t},\n\t\t{\n\t\t\tname: \"tie\",\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk\", Choice: ChoiceNo})\n\t\t\t},\n\t\t\tchoice: ChoiceNone,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar record VotingRecord\n\n\t\t\tif tc.setup != nil {\n\t\t\t\ttc.setup(\u0026record)\n\t\t\t}\n\n\t\t\tchoice := FindMostVotedChoice(record.Readonly())\n\n\t\t\tuassert.Equal(t, string(choice), string(tc.choice))\n\t\t})\n\t}\n}\n\nfunc TestSelectChoiceByAbsoluteMajority(t *testing.T) {\n\tcases := []struct {\n\t\tname         string\n\t\tsetup        func(*VotingRecord)\n\t\tchoice       VoteChoice\n\t\tmembersCount int\n\t\tsuccess      bool\n\t}{\n\t\t{\n\t\t\tname:         \"no votes\",\n\t\t\tchoice:       ChoiceNone,\n\t\t\tmembersCount: 3,\n\t\t\tsuccess:      false,\n\t\t},\n\t\t{\n\t\t\tname: \"majority\",\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", Choice: ChoiceNo})\n\t\t\t},\n\t\t\tchoice:       ChoiceYes,\n\t\t\tmembersCount: 3,\n\t\t\tsuccess:      true,\n\t\t},\n\t\t{\n\t\t\tname: \"no majority\",\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk\", Choice: ChoiceNo})\n\t\t\t},\n\t\t\tchoice:       \"\",\n\t\t\tmembersCount: 3,\n\t\t\tsuccess:      false,\n\t\t},\n\t\t{\n\t\t\tname: \"majority with abstain vote\",\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", Choice: ChoiceAbstain})\n\t\t\t},\n\t\t\tchoice:       ChoiceYes,\n\t\t\tmembersCount: 3,\n\t\t\tsuccess:      true,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar record VotingRecord\n\n\t\t\tif tc.setup != nil {\n\t\t\t\ttc.setup(\u0026record)\n\t\t\t}\n\n\t\t\tchoice, success := SelectChoiceByAbsoluteMajority(record.Readonly(), tc.membersCount)\n\n\t\t\tuassert.Equal(t, string(tc.choice), string(choice), \"choice\")\n\t\t\tuassert.Equal(t, tc.success, success, \"success\")\n\t\t})\n\t}\n}\n\nfunc TestSelectChoiceBySuperMajority(t *testing.T) {\n\tcases := []struct {\n\t\tname         string\n\t\tsetup        func(*VotingRecord)\n\t\tchoice       VoteChoice\n\t\tmembersCount int\n\t\tsuccess      bool\n\t}{\n\t\t{\n\t\t\tname:         \"no votes\",\n\t\t\tchoice:       ChoiceNone,\n\t\t\tmembersCount: 3,\n\t\t\tsuccess:      false,\n\t\t},\n\t\t{\n\t\t\tname: \"majority\",\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", Choice: ChoiceNo})\n\t\t\t},\n\t\t\tchoice:       ChoiceYes,\n\t\t\tmembersCount: 3,\n\t\t\tsuccess:      true,\n\t\t},\n\t\t{\n\t\t\tname: \"no majority\",\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk\", Choice: ChoiceNo})\n\t\t\t},\n\t\t\tchoice:       \"\",\n\t\t\tmembersCount: 3,\n\t\t\tsuccess:      false,\n\t\t},\n\t\t{\n\t\t\tname: \"majority with abstain vote\",\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", Choice: ChoiceAbstain})\n\t\t\t},\n\t\t\tchoice:       ChoiceYes,\n\t\t\tmembersCount: 3,\n\t\t\tsuccess:      true,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar record VotingRecord\n\n\t\t\tif tc.setup != nil {\n\t\t\t\ttc.setup(\u0026record)\n\t\t\t}\n\n\t\t\tchoice, success := SelectChoiceBySuperMajority(record.Readonly(), tc.membersCount)\n\n\t\t\tuassert.Equal(t, string(tc.choice), string(choice), \"choice\")\n\t\t\tuassert.Equal(t, tc.success, success, \"success\")\n\t\t})\n\t}\n}\n\nfunc TestSelectChoiceByPlurality(t *testing.T) {\n\tcases := []struct {\n\t\tname    string\n\t\tsetup   func(*VotingRecord)\n\t\tchoice  VoteChoice\n\t\tsuccess bool\n\t}{\n\t\t{\n\t\t\tname:    \"no votes\",\n\t\t\tchoice:  ChoiceNone,\n\t\t\tsuccess: false,\n\t\t},\n\t\t{\n\t\t\tname: \"plurality\",\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", Choice: ChoiceNo})\n\t\t\t},\n\t\t\tchoice:  ChoiceYes,\n\t\t\tsuccess: true,\n\t\t},\n\t\t{\n\t\t\tname: \"no plurality\",\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk\", Choice: ChoiceNo})\n\t\t\t},\n\t\t\tchoice:  \"\",\n\t\t\tsuccess: false,\n\t\t},\n\t\t{\n\t\t\tname: \"plurality with abstain vote\",\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\", Choice: ChoiceNo})\n\t\t\t\tr.AddVote(Vote{Address: \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", Choice: ChoiceAbstain})\n\t\t\t},\n\t\t\tchoice:  ChoiceYes,\n\t\t\tsuccess: true,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar record VotingRecord\n\n\t\t\tif tc.setup != nil {\n\t\t\t\ttc.setup(\u0026record)\n\t\t\t}\n\n\t\t\tchoice, success := SelectChoiceByPlurality(record.Readonly())\n\n\t\t\tuassert.Equal(t, string(tc.choice), string(choice), \"choice\")\n\t\t\tuassert.Equal(t, tc.success, success, \"success\")\n\t\t})\n\t}\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"M3S94bNdksVI5wCM8DNdkI8U7JfEVv+bVWeTCTGX7kLwcPtTPSq9BJa5v9qHAt9lTr8TfU74SnhofpB05wbVBQ=="}],"memo":""},"metadata":{"timestamp":"1743087244"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1cpx59z5r8vzeww2fm4ezpz7yvjs7kptywkm864","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"f5w9Ks3uPYSB4COWkMt/E/4+Apgx9PyP40JeyR+CD+3TYoJSvXh0OG7sh7yp0c9V0FkL+IjnNfpjagwNkPviDQ=="}],"memo":""},"metadata":{"timestamp":"1743087274"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","package":{"name":"commondao","path":"gno.land/p/devx000/gnoland/commondao/v1rc1","files":[{"name":"commondao.gno","body":"package commondao\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/avl/list\"\n\t\"gno.land/p/demo/avl/rotree\"\n\t\"gno.land/p/demo/seqid\"\n\t\"gno.land/p/moul/addrset\"\n)\n\n// PathSeparator is the separator character used in DAO paths.\nconst PathSeparator = \"/\"\n\nvar (\n\tErrInvalidVoteChoice    = errors.New(\"invalid vote choice\")\n\tErrNotMember            = errors.New(\"account is not a member of the DAO\")\n\tErrOverflow             = errors.New(\"next ID overflows uint64\")\n\tErrProposalFailed       = errors.New(\"proposal failed to pass\")\n\tErrProposalNotFound     = errors.New(\"proposal not found\")\n\tErrVotingDeadlineNotMet = errors.New(\"voting deadline not met\")\n)\n\n// CommonDAO defines a DAO.\ntype CommonDAO struct {\n\tid          uint64\n\tslug        string\n\tname        string\n\tdescription string\n\tparent      *CommonDAO\n\tchildren    list.IList\n\tmembers     *addrset.Set\n\tgenID       seqid.ID\n\tactive      *avl.Tree // string(proposal ID) -\u003e *Proposal\n\tfinished    *avl.Tree // string(proposal ID) -\u003e *Proposal\n}\n\n// New creates a new common DAO.\nfunc New(options ...Option) *CommonDAO {\n\tdao := \u0026CommonDAO{\n\t\tmembers:  \u0026addrset.Set{},\n\t\tchildren: \u0026list.List{},\n\t\tactive:   avl.NewTree(),\n\t\tfinished: avl.NewTree(),\n\t}\n\tfor _, apply := range options {\n\t\tapply(dao)\n\t}\n\treturn dao\n}\n\n// ID returns DAO's unique identifier.\nfunc (dao CommonDAO) ID() uint64 {\n\treturn dao.id\n}\n\n// Slug returns DAO's URL slug.\nfunc (dao CommonDAO) Slug() string {\n\treturn dao.slug\n}\n\n// Name returns DAO's name.\nfunc (dao CommonDAO) Name() string {\n\treturn dao.name\n}\n\n// Description returns DAO's description.\nfunc (dao CommonDAO) Description() string {\n\treturn dao.description\n}\n\n// Path returns the full path to the DAO.\n// Paths are normally used when working with hierarchical\n// DAOs and is created by concatenating DAO slugs.\nfunc (dao CommonDAO) Path() string {\n\tparent := dao.Parent()\n\tif parent != nil {\n\t\tprefix := parent.Path()\n\t\tif prefix != \"\" {\n\t\t\treturn prefix + PathSeparator + dao.slug\n\t\t}\n\t}\n\treturn dao.slug\n}\n\n// Parent returns the parent DAO.\n// Null can be returned when DAO has no parent assigned.\nfunc (dao CommonDAO) Parent() *CommonDAO {\n\treturn dao.parent\n}\n\n// Children returns a list with the direct DAO children.\n// Each item in the list is a reference to a CommonDAO instance.\nfunc (dao CommonDAO) Children() list.IList {\n\treturn dao.children\n}\n\n// TopParent returns the topmost parent DAO.\n// The top parent is the root of the DAO tree.\nfunc (dao *CommonDAO) TopParent() *CommonDAO {\n\tparent := dao.Parent()\n\tif parent != nil {\n\t\treturn parent.TopParent()\n\t}\n\treturn dao\n}\n\n// Members returns the list of DAO members.\nfunc (dao CommonDAO) Members() *addrset.Set {\n\treturn dao.members\n}\n\n// ActiveProposals returns all active DAO proposals.\nfunc (dao CommonDAO) ActiveProposals() rotree.IReadOnlyTree {\n\treturn dao.active\n}\n\n// FinishedProposalsi returns all finished DAO proposals.\nfunc (dao CommonDAO) FinishedProposals() rotree.IReadOnlyTree {\n\treturn dao.finished\n}\n\n// Propose creates a new DAO proposal.\nfunc (dao *CommonDAO) Propose(creator std.Address, d ProposalDefinition) (*Proposal, error) {\n\tid, ok := dao.genID.TryNext()\n\tif !ok {\n\t\treturn nil, ErrOverflow\n\t}\n\n\tp, err := NewProposal(uint64(id), creator, d)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tkey := makeProposalKey(p.ID())\n\tdao.active.Set(key, p)\n\treturn p, nil\n}\n\n// MustPropose creates a new DAO proposal or panics on error.\nfunc (dao *CommonDAO) MustPropose(creator std.Address, d ProposalDefinition) *Proposal {\n\tp, err := dao.Propose(creator, d)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn p\n}\n\n// GetActiveProposal returns an active proposal.\nfunc (dao CommonDAO) GetActiveProposal(proposalID uint64) (_ *Proposal, found bool) {\n\tkey := makeProposalKey(proposalID)\n\tif v, ok := dao.active.Get(key); ok {\n\t\treturn v.(*Proposal), true\n\t}\n\treturn nil, false\n}\n\n// GetFinishedProposal returns a finished proposal.\nfunc (dao CommonDAO) GetFinishedProposal(proposalID uint64) (_ *Proposal, found bool) {\n\tkey := makeProposalKey(proposalID)\n\tif v, ok := dao.finished.Get(key); ok {\n\t\treturn v.(*Proposal), true\n\t}\n\treturn nil, false\n}\n\n// GetProposal returns an proposal.\nfunc (dao CommonDAO) GetProposal(proposalID uint64) (p *Proposal, found bool) {\n\tp, found = dao.GetActiveProposal(proposalID)\n\tif !found {\n\t\treturn dao.GetFinishedProposal(proposalID)\n\t}\n\treturn p, found\n}\n\n// Vote submits a new vote for a proposal.\nfunc (dao *CommonDAO) Vote(member std.Address, proposalID uint64, c VoteChoice, reason string) error {\n\tif !dao.Members().Has(member) {\n\t\treturn ErrNotMember\n\t}\n\n\tp, found := dao.GetActiveProposal(proposalID)\n\tif !found {\n\t\treturn ErrProposalNotFound\n\t}\n\n\tif !p.IsValidVoteChoice(c) {\n\t\treturn ErrInvalidVoteChoice\n\t}\n\n\tp.record.AddVote(Vote{\n\t\tAddress: member,\n\t\tChoice:  c,\n\t\tReason:  reason,\n\t})\n\treturn nil\n}\n\n// Tally counts votes and validates if a proposal passes.\nfunc (dao *CommonDAO) Tally(proposalID uint64) (passes bool, _ error) {\n\tp, found := dao.GetActiveProposal(proposalID)\n\tif !found {\n\t\treturn false, ErrProposalNotFound\n\t}\n\n\tif p.Status() != StatusActive {\n\t\treturn false, ErrStatusIsNotActive\n\t}\n\n\tif err := dao.checkProposalPasses(p); err != nil {\n\t\t// Don't return an error if proposal failed to pass when tallying\n\t\tif err == ErrProposalFailed {\n\t\t\treturn false, nil\n\t\t}\n\t\treturn false, err\n\t}\n\treturn true, nil\n}\n\n// Execute executes a proposal.\nfunc (dao *CommonDAO) Execute(proposalID uint64) error {\n\tp, found := dao.GetActiveProposal(proposalID)\n\tif !found {\n\t\treturn ErrProposalNotFound\n\t}\n\n\tif p.Status() != StatusActive {\n\t\treturn ErrStatusIsNotActive\n\t}\n\n\tif time.Now().Before(p.VotingDeadline()) {\n\t\treturn ErrVotingDeadlineNotMet\n\t}\n\n\t// From this point any error results in a proposal failure and successful execution\n\terr := p.Validate()\n\n\tif err == nil {\n\t\terr = dao.checkProposalPasses(p)\n\t}\n\n\tif err == nil {\n\t\t// Execute proposal only if it's executable\n\t\tif e, ok := p.Definition().(Executable); ok {\n\t\t\terr = e.Execute()\n\t\t}\n\t}\n\n\t// Proposal fails if there is any error during validation and execution process\n\tif err != nil {\n\t\tp.status = StatusFailed\n\t\tp.statusReason = err.Error()\n\t} else {\n\t\tp.status = StatusPassed\n\t}\n\n\t// Whichever the outcome of the validation, tallying\n\t// and execution consider the proposal finished.\n\tkey := makeProposalKey(p.id)\n\tdao.active.Remove(key)\n\tdao.finished.Set(key, p)\n\treturn nil\n}\n\nfunc (dao *CommonDAO) checkProposalPasses(p *Proposal) error {\n\trecord := p.VotingRecord().Readonly()\n\tmembers := NewMemberSet(*dao.Members())\n\tpasses, err := p.Definition().Tally(record, members)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif !passes {\n\t\treturn ErrProposalFailed\n\t}\n\treturn nil\n}\n\nfunc makeProposalKey(id uint64) string {\n\treturn seqid.ID(id).String()\n}\n"},{"name":"commondao_test.gno","body":"package commondao\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n\n\t\"gno.land/p/demo/seqid\"\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/urequire\"\n)\n\nfunc TestNew(t *testing.T) {\n\tcases := []struct {\n\t\tname    string\n\t\tparent  *CommonDAO\n\t\tmembers []std.Address\n\t}{\n\t\t{\n\t\t\tname:    \"with parent\",\n\t\t\tparent:  New(),\n\t\t\tmembers: []std.Address{\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"},\n\t\t},\n\t\t{\n\t\t\tname:    \"without parent\",\n\t\t\tmembers: []std.Address{\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"},\n\t\t},\n\t\t{\n\t\t\tname: \"multiple members\",\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t\t\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\",\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"no members\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tmembersCount := len(tc.members)\n\t\t\toptions := []Option{WithParent(tc.parent)}\n\t\t\tfor _, m := range tc.members {\n\t\t\t\toptions = append(options, WithMember(m))\n\t\t\t}\n\n\t\t\tdao := New(options...)\n\n\t\t\tif tc.parent == nil {\n\t\t\t\tuassert.Equal(t, nil, dao.Parent())\n\t\t\t} else {\n\t\t\t\tuassert.NotEqual(t, nil, dao.Parent())\n\t\t\t}\n\n\t\t\turequire.Equal(t, membersCount, dao.Members().Size(), \"dao members\")\n\n\t\t\tvar i int\n\t\t\tdao.Members().IterateByOffset(0, membersCount, func(addr std.Address) bool {\n\t\t\t\tuassert.Equal(t, tc.members[i], addr)\n\t\t\t\ti++\n\t\t\t\treturn false\n\t\t\t})\n\t\t})\n\t}\n}\n\nfunc TestCommonDAOMembersAdd(t *testing.T) {\n\tmember := std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\tdao := New(WithMember(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\"))\n\n\tadded := dao.Members().Add(member)\n\turequire.True(t, added)\n\n\tuassert.Equal(t, 2, dao.Members().Size())\n\tuassert.True(t, dao.Members().Has(member))\n\n\tadded = dao.Members().Add(member)\n\turequire.False(t, added)\n}\n\nfunc TestCommonDAOMembersRemove(t *testing.T) {\n\tmember := std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\tdao := New(WithMember(member))\n\n\tremoved := dao.Members().Remove(member)\n\turequire.True(t, removed)\n\n\tremoved = dao.Members().Remove(member)\n\turequire.False(t, removed)\n}\n\nfunc TestCommonDAOMembersHas(t *testing.T) {\n\tcases := []struct {\n\t\tname   string\n\t\tmember std.Address\n\t\tdao    *CommonDAO\n\t\twant   bool\n\t}{\n\t\t{\n\t\t\tname:   \"member\",\n\t\t\tmember: \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\tdao:    New(WithMember(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")),\n\t\t\twant:   true,\n\t\t},\n\t\t{\n\t\t\tname:   \"not a dao member\",\n\t\t\tmember: \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\tdao:    New(WithMember(\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\")),\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tgot := tc.dao.Members().Has(tc.member)\n\t\t\tuassert.Equal(t, got, tc.want)\n\t\t})\n\t}\n}\n\nfunc TestCommonDAOPropose(t *testing.T) {\n\tcases := []struct {\n\t\tname    string\n\t\tsetup   func() *CommonDAO\n\t\tcreator std.Address\n\t\tdef     ProposalDefinition\n\t\terr     error\n\t}{\n\t\t{\n\t\t\tname:    \"success\",\n\t\t\tsetup:   func() *CommonDAO { return New() },\n\t\t\tcreator: \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\tdef:     testPropDef{},\n\t\t},\n\t\t{\n\t\t\tname:  \"nil definition\",\n\t\t\tsetup: func() *CommonDAO { return New() },\n\t\t\terr:   ErrProposalDefinitionRequired,\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid creator address\",\n\t\t\tsetup: func() *CommonDAO { return New() },\n\t\t\tdef:   testPropDef{},\n\t\t\terr:   ErrInvalidCreatorAddress,\n\t\t},\n\t\t{\n\t\t\tname: \"proposal ID overflow\",\n\t\t\tsetup: func() *CommonDAO {\n\t\t\t\tdao := New()\n\t\t\t\tdao.genID = seqid.ID(1\u003c\u003c64 - 1)\n\t\t\t\treturn dao\n\t\t\t},\n\t\t\tcreator: \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\tdef:     testPropDef{},\n\t\t\terr:     ErrOverflow,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tdao := tc.setup()\n\n\t\t\tp, err := dao.Propose(tc.creator, tc.def)\n\n\t\t\tif tc.err != nil {\n\t\t\t\turequire.ErrorIs(t, err, tc.err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\turequire.NoError(t, err)\n\n\t\t\t_, found := dao.GetActiveProposal(p.ID())\n\t\t\turequire.True(t, found, \"proposal not found\")\n\t\t\tuassert.Equal(t, p.Creator(), tc.creator)\n\t\t})\n\t}\n}\n\nfunc TestCommonDAOVote(t *testing.T) {\n\tcases := []struct {\n\t\tname       string\n\t\tsetup      func() *CommonDAO\n\t\tmember     std.Address\n\t\tchoice     VoteChoice\n\t\tproposalID uint64\n\t\terr        error\n\t}{\n\t\t{\n\t\t\tname: \"success\",\n\t\t\tsetup: func() *CommonDAO {\n\t\t\t\tmember := std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n\t\t\t\tdao := New(WithMember(member))\n\t\t\t\tdao.Propose(member, testPropDef{})\n\t\t\t\treturn dao\n\t\t\t},\n\t\t\tmember:     \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\tchoice:     ChoiceYes,\n\t\t\tproposalID: 1,\n\t\t},\n\t\t{\n\t\t\tname: \"success with custom vote choice\",\n\t\t\tsetup: func() *CommonDAO {\n\t\t\t\tmember := std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n\t\t\t\tdao := New(WithMember(member))\n\t\t\t\tdao.Propose(member, testPropDef{\n\t\t\t\t\tvoteChoices: []VoteChoice{\"FOO\", \"BAR\"},\n\t\t\t\t})\n\t\t\t\treturn dao\n\t\t\t},\n\t\t\tmember:     \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\tchoice:     VoteChoice(\"BAR\"),\n\t\t\tproposalID: 1,\n\t\t},\n\t\t{\n\t\t\tname: \"invalid vote choice\",\n\t\t\tsetup: func() *CommonDAO {\n\t\t\t\tmember := std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n\t\t\t\tdao := New(WithMember(member))\n\t\t\t\tdao.Propose(member, testPropDef{})\n\t\t\t\treturn dao\n\t\t\t},\n\t\t\tmember:     \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\tchoice:     VoteChoice(\"invalid\"),\n\t\t\tproposalID: 1,\n\t\t\terr:        ErrInvalidVoteChoice,\n\t\t},\n\t\t{\n\t\t\tname:   \"not a member\",\n\t\t\tsetup:  func() *CommonDAO { return New() },\n\t\t\tmember: \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\tchoice: ChoiceAbstain,\n\t\t\terr:    ErrNotMember,\n\t\t},\n\t\t{\n\t\t\tname: \"proposal not found\",\n\t\t\tsetup: func() *CommonDAO {\n\t\t\t\treturn New(WithMember(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\"))\n\t\t\t},\n\t\t\tmember:     \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\tchoice:     ChoiceAbstain,\n\t\t\tproposalID: 42,\n\t\t\terr:        ErrProposalNotFound,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tdao := tc.setup()\n\n\t\t\terr := dao.Vote(tc.member, tc.proposalID, tc.choice, \"\")\n\n\t\t\tif tc.err != nil {\n\t\t\t\turequire.ErrorIs(t, err, tc.err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\turequire.NoError(t, err)\n\n\t\t\tp, found := dao.GetActiveProposal(tc.proposalID)\n\t\t\turequire.True(t, found, \"proposal not found\")\n\n\t\t\trecord := p.VotingRecord()\n\t\t\tuassert.True(t, record.HasVoted(tc.member))\n\t\t\tuassert.Equal(t, record.VoteCount(tc.choice), 1)\n\t\t})\n\t}\n}\n\nfunc TestCommonDAOTally(t *testing.T) {\n\terrTest := errors.New(\"test\")\n\tmember := std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\tcases := []struct {\n\t\tname   string\n\t\tsetup  func(*CommonDAO) (proposalID uint64)\n\t\tpasses bool\n\t\terr    error\n\t}{\n\t\t{\n\t\t\tname: \"pass\",\n\t\t\tsetup: func(dao *CommonDAO) uint64 {\n\t\t\t\treturn dao.MustPropose(member, testPropDef{tallyResult: true}).ID()\n\t\t\t},\n\t\t\tpasses: true,\n\t\t},\n\t\t{\n\t\t\tname: \"fail to pass\",\n\t\t\tsetup: func(dao *CommonDAO) uint64 {\n\t\t\t\treturn dao.MustPropose(member, testPropDef{tallyResult: false}).ID()\n\t\t\t},\n\t\t\tpasses: false,\n\t\t},\n\t\t{\n\t\t\tname:  \"proposal not found\",\n\t\t\tsetup: func(*CommonDAO) uint64 { return 404 },\n\t\t\terr:   ErrProposalNotFound,\n\t\t},\n\t\t{\n\t\t\tname: \"proposal status not active\",\n\t\t\tsetup: func(dao *CommonDAO) uint64 {\n\t\t\t\tp := dao.MustPropose(member, testPropDef{})\n\t\t\t\tp.status = StatusPassed\n\t\t\t\treturn p.ID()\n\t\t\t},\n\t\t\terr: ErrStatusIsNotActive,\n\t\t},\n\t\t{\n\t\t\tname: \"proposal failed error\",\n\t\t\tsetup: func(dao *CommonDAO) uint64 {\n\t\t\t\treturn dao.MustPropose(member, testPropDef{tallyErr: ErrProposalFailed}).ID()\n\t\t\t},\n\t\t\tpasses: false,\n\t\t},\n\t\t{\n\t\t\tname: \"error\",\n\t\t\tsetup: func(dao *CommonDAO) uint64 {\n\t\t\t\treturn dao.MustPropose(member, testPropDef{tallyErr: errTest}).ID()\n\t\t\t},\n\t\t\terr: errTest,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tdao := New(WithMember(member))\n\t\t\tproposalID := tc.setup(dao)\n\n\t\t\tpasses, err := dao.Tally(proposalID)\n\n\t\t\tif tc.err != nil {\n\t\t\t\tuassert.ErrorIs(t, err, tc.err, \"expect an error\")\n\t\t\t\tuassert.False(t, passes, \"expect tally to fail\")\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tuassert.NoError(t, err, \"expect no error\")\n\t\t\tuassert.Equal(t, tc.passes, passes, \"expect tally success value to match\")\n\t\t})\n\t}\n}\n\nfunc TestCommonDAOExecute(t *testing.T) {\n\terrTest := errors.New(\"test\")\n\tmember := std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n\tcases := []struct {\n\t\tname         string\n\t\tsetup        func() *CommonDAO\n\t\tproposalID   uint64\n\t\tstatus       ProposalStatus\n\t\tstatusReason string\n\t\terr          error\n\t}{\n\t\t{\n\t\t\tname: \"success\",\n\t\t\tsetup: func() *CommonDAO {\n\t\t\t\tdao := New(WithMember(member))\n\t\t\t\tdao.Propose(member, testPropDef{tallyResult: true})\n\t\t\t\treturn dao\n\t\t\t},\n\t\t\tstatus:     StatusPassed,\n\t\t\tproposalID: 1,\n\t\t},\n\t\t{\n\t\t\tname:       \"proposal not found\",\n\t\t\tsetup:      func() *CommonDAO { return New() },\n\t\t\tproposalID: 1,\n\t\t\terr:        ErrProposalNotFound,\n\t\t},\n\t\t{\n\t\t\tname: \"proposal not active\",\n\t\t\tsetup: func() *CommonDAO {\n\t\t\t\tdao := New(WithMember(member))\n\t\t\t\tp, _ := dao.Propose(member, testPropDef{})\n\t\t\t\tp.status = StatusPassed\n\t\t\t\treturn dao\n\t\t\t},\n\t\t\tproposalID: 1,\n\t\t\terr:        ErrStatusIsNotActive,\n\t\t},\n\t\t{\n\t\t\tname: \"voting deadline not met\",\n\t\t\tsetup: func() *CommonDAO {\n\t\t\t\tdao := New(WithMember(member))\n\t\t\t\tdao.Propose(member, testPropDef{votingPeriod: time.Minute * 5})\n\t\t\t\treturn dao\n\t\t\t},\n\t\t\tproposalID: 1,\n\t\t\terr:        ErrVotingDeadlineNotMet,\n\t\t},\n\t\t{\n\t\t\tname: \"validation error\",\n\t\t\tsetup: func() *CommonDAO {\n\t\t\t\tdao := New(WithMember(member))\n\t\t\t\tdao.Propose(member, testPropDef{validationErr: errTest})\n\t\t\t\treturn dao\n\t\t\t},\n\t\t\tproposalID:   1,\n\t\t\tstatus:       StatusFailed,\n\t\t\tstatusReason: errTest.Error(),\n\t\t},\n\t\t{\n\t\t\tname: \"tally error\",\n\t\t\tsetup: func() *CommonDAO {\n\t\t\t\tdao := New(WithMember(member))\n\t\t\t\tdao.Propose(member, testPropDef{tallyErr: errTest})\n\t\t\t\treturn dao\n\t\t\t},\n\t\t\tproposalID:   1,\n\t\t\tstatus:       StatusFailed,\n\t\t\tstatusReason: errTest.Error(),\n\t\t},\n\t\t{\n\t\t\tname: \"execution error\",\n\t\t\tsetup: func() *CommonDAO {\n\t\t\t\tdao := New(WithMember(member))\n\t\t\t\tdao.Propose(member, testPropDef{\n\t\t\t\t\ttallyResult:  true,\n\t\t\t\t\texecutionErr: errTest,\n\t\t\t\t})\n\t\t\t\treturn dao\n\t\t\t},\n\t\t\tproposalID:   1,\n\t\t\tstatus:       StatusFailed,\n\t\t\tstatusReason: errTest.Error(),\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tdao := tc.setup()\n\n\t\t\terr := dao.Execute(tc.proposalID)\n\n\t\t\tif tc.err != nil {\n\t\t\t\turequire.ErrorIs(t, err, tc.err, \"expect error to match\")\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\turequire.NoError(t, err, \"expect no error\")\n\n\t\t\t_, found := dao.GetActiveProposal(tc.proposalID)\n\t\t\turequire.False(t, found, \"proposal should not be active\")\n\n\t\t\tp, found := dao.GetFinishedProposal(tc.proposalID)\n\t\t\turequire.True(t, found, \"proposal must be found\")\n\t\t\tuassert.Equal(t, string(p.Status()), string(tc.status), \"status must match\")\n\t\t\tuassert.Equal(t, string(p.StatusReason()), string(tc.statusReason), \"status reason must match\")\n\t\t})\n\t}\n}\n"},{"name":"memberset.gno","body":"package commondao\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/moul/addrset\"\n)\n\n// NewMemberSet creates a new readonly memberset.\nfunc NewMemberSet(members addrset.Set) MemberSet { // TODO: Use an interface instead of addrset.Set\n\treturn MemberSet{members}\n}\n\n// MemberSet contains a readonly list of member addresses.\ntype MemberSet struct {\n\tmembers addrset.Set\n}\n\n// Size returns the number of addresses in the set.\nfunc (s MemberSet) Size() int {\n\treturn s.members.Size()\n}\n\n// Has checks if an address exists in the set.\nfunc (s MemberSet) Has(member std.Address) bool {\n\treturn s.members.Has(member)\n}\n\n// IterateByOffset walks through addresses starting at the given offset.\n// The callback should return true to stop iteration.\nfunc (s MemberSet) IterateByOffset(offset, count int, fn func(std.Address) bool) {\n\ts.members.IterateByOffset(offset, count, fn)\n}\n"},{"name":"memberset_test.gno","body":"package commondao\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/moul/addrset\"\n)\n\nfunc TestMemberSetSize(t *testing.T) {\n\tvar set addrset.Set\n\tmembers := NewMemberSet(set)\n\tuassert.Equal(t, 0, members.Size(), \"expect size 0\")\n\n\tset.Add(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\tmembers = NewMemberSet(set)\n\tuassert.Equal(t, 1, members.Size(), \"expect size 1\")\n\n\tset.Add(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n\tmembers = NewMemberSet(set)\n\tuassert.Equal(t, 2, members.Size(), \"expect size 2\")\n}\n\nfunc TestMemberSetHas(t *testing.T) {\n\tvar set addrset.Set\n\tset.Add(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\n\tmembers := NewMemberSet(set)\n\n\tuassert.True(t, members.Has(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"), \"expect member is found\")\n\tuassert.False(t, members.Has(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\"), \"expect member is not found\")\n}\n\nfunc TestMemberSetIterateByOffset(t *testing.T) {\n\tvar set addrset.Set\n\tset.Add(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\tset.Add(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\") // \u003c--\n\tset.Add(\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\")\n\n\tNewMemberSet(set).IterateByOffset(1, 1, func(addr std.Address) bool {\n\t\tuassert.Equal(t, \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", addr.String(), \"expect address to match\")\n\t\treturn true\n\t})\n}\n"},{"name":"options.gno","body":"package commondao\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/moul/addrset\"\n)\n\n// Option configures the CommonDAO.\ntype Option func(*CommonDAO)\n\n// WithID assigns a unique identifier to the DAO.\nfunc WithID(id uint64) Option {\n\treturn func(dao *CommonDAO) {\n\t\tdao.id = id\n\t}\n}\n\n// WithName assigns a name to the DAO.\nfunc WithName(name string) Option {\n\treturn func(dao *CommonDAO) {\n\t\tdao.name = name\n\t}\n}\n\n// WithDescription assigns a description to the DAO.\nfunc WithDescription(description string) Option {\n\treturn func(dao *CommonDAO) {\n\t\tdao.description = description\n\t}\n}\n\n// WithSlug assigns a URL slug to the DAO.\nfunc WithSlug(slug string) Option {\n\treturn func(dao *CommonDAO) {\n\t\tdao.slug = slug\n\t}\n}\n\n// WithParent assigns a parent DAO.\nfunc WithParent(p *CommonDAO) Option {\n\treturn func(dao *CommonDAO) {\n\t\tdao.parent = p\n\t}\n}\n\n// WithChildren assigns one or more direct child SubDAOs to the DAO.\nfunc WithChildren(children ...*CommonDAO) Option {\n\treturn func(dao *CommonDAO) {\n\t\tfor _, subDAO := range children {\n\t\t\tdao.children.Append(subDAO)\n\t\t}\n\t}\n}\n\n// WithMember assigns a member to the DAO.\nfunc WithMember(addr std.Address) Option {\n\treturn func(dao *CommonDAO) {\n\t\tdao.members.Add(addr)\n\t}\n}\n\n// WithMembers assigns multiple members to the DAO.\n// An empty member set is used by default when specified members set is nil.\nfunc WithMembers(members *addrset.Set) Option {\n\treturn func(dao *CommonDAO) {\n\t\tif members == nil {\n\t\t\tmembers = \u0026addrset.Set{}\n\t\t}\n\t\tdao.members = members\n\t}\n}\n"},{"name":"proposal.gno","body":"package commondao\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nconst (\n\tStatusActive ProposalStatus = \"active\"\n\tStatusFailed                = \"failed\"\n\tStatusPassed                = \"passed\"\n)\n\nconst (\n\tChoiceNone       VoteChoice = \"\"\n\tChoiceYes                   = \"YES\"\n\tChoiceNo                    = \"NO\"\n\tChoiceNoWithVeto            = \"NO WITH VETO\"\n\tChoiceAbstain               = \"ABSTAIN\"\n)\n\nconst (\n\tQuorumOneThird     float64 = 0.33 // percentage\n\tQuorumHalf                 = 0.5\n\tQuorumTwoThirds            = 0.66\n\tQuorumThreeFourths         = 0.75\n\tQuorumFull                 = 1\n)\n\nvar (\n\tErrInvalidCreatorAddress      = errors.New(\"invalid proposal creator address\")\n\tErrProposalDefinitionRequired = errors.New(\"proposal definition is required\")\n\tErrNoQuorum                   = errors.New(\"no quorum\")\n\tErrStatusIsNotActive          = errors.New(\"proposal status is not active\")\n)\n\ntype (\n\t// ProposalStatus defines a type for different proposal states.\n\tProposalStatus string\n\n\t// VoteChoice defines a type for proposal vote choices.\n\tVoteChoice string\n\n\t// Proposal defines a DAO proposal.\n\tProposal struct {\n\t\tid             uint64\n\t\tstatus         ProposalStatus\n\t\tdefinition     ProposalDefinition\n\t\tcreator        std.Address\n\t\trecord         *VotingRecord\n\t\tstatusReason   string\n\t\tvoteChoices    *avl.Tree // string(VoteChoice) -\u003e struct{}\n\t\tvotingDeadline time.Time\n\t\tcreatedAt      time.Time\n\t}\n\n\t// ProposalDefinition defines an interface for custom proposal definitions.\n\t// These definitions define proposal content and behavior, they esentially\n\t// allow the definition for different proposal types.\n\tProposalDefinition interface {\n\t\t// Title returns the proposal title.\n\t\tTitle() string\n\n\t\t// Body returns the proposal body.\n\t\t// It usually contains the proposal description and other elements like proposal parameters.\n\t\tBody() string\n\n\t\t// VotingPeriod returns the period where votes are allowed after proposal creation.\n\t\t// No more votes should be allowed once this period is met. It is used to calculate\n\t\t// the voting deadline from the proposal's creationd date.\n\t\tVotingPeriod() time.Duration\n\n\t\t// Tally counts the number of votes and verifies if proposal passes.\n\t\tTally(r ReadonlyVotingRecord, members MemberSet) (passes bool, _ error)\n\t}\n\n\t// Validable defines an interface for proposal definitions that require state validation.\n\t// Validation is done before execution and normally also during proposal rendering.\n\tValidable interface {\n\t\t// Validate validates that the proposal is valid for the current state.\n\t\tValidate() error\n\t}\n\n\t// Executable defines an interface for proposal definitions that modify state on approval.\n\t// Once proposals are executed they are archived and considered finished.\n\tExecutable interface {\n\t\t// Execute executes the proposal.\n\t\tExecute() error\n\t}\n\n\t// CustomizableVoteChoices defines an interface for proposal definitions that want\n\t// to customize the list of allowed voting choices.\n\tCustomizableVoteChoices interface {\n\t\t// CustomVoteChoices returns a list of valid voting choices.\n\t\t// Choices are considered valid only when there are at least two possible choices\n\t\t// otherwise proposal defaults to using YES, NO and ABSTAIN as valid choices.\n\t\tCustomVoteChoices() []VoteChoice\n\t}\n)\n\n// NewProposal creates a new DAO proposal.\nfunc NewProposal(id uint64, creator std.Address, d ProposalDefinition) (*Proposal, error) {\n\tif d == nil {\n\t\treturn nil, ErrProposalDefinitionRequired\n\t}\n\n\tif !creator.IsValid() {\n\t\treturn nil, ErrInvalidCreatorAddress\n\t}\n\n\tnow := time.Now()\n\tp := \u0026Proposal{\n\t\tid:             id,\n\t\tstatus:         StatusActive,\n\t\tdefinition:     d,\n\t\tcreator:        creator,\n\t\trecord:         \u0026VotingRecord{},\n\t\tvoteChoices:    avl.NewTree(),\n\t\tvotingDeadline: now.Add(d.VotingPeriod()),\n\t\tcreatedAt:      now,\n\t}\n\n\tif v, ok := d.(CustomizableVoteChoices); ok {\n\t\tfor _, c := range v.CustomVoteChoices() {\n\t\t\tp.voteChoices.Set(string(c), struct{}{})\n\t\t}\n\t}\n\n\t// Use default voting choices when the definition returns none or a single vote choice\n\tif p.voteChoices.Size() \u003c 2 {\n\t\tp.voteChoices.Set(string(ChoiceYes), struct{}{})\n\t\tp.voteChoices.Set(string(ChoiceNo), struct{}{})\n\t\tp.voteChoices.Set(string(ChoiceAbstain), struct{}{})\n\t}\n\n\treturn p, nil\n}\n\n// ID returns the unique proposal identifies.\nfunc (p Proposal) ID() uint64 {\n\treturn p.id\n}\n\n// Definition returns the proposal definition.\n// Proposal definitions define proposal content and behavior.\nfunc (p Proposal) Definition() ProposalDefinition {\n\treturn p.definition\n}\n\n// Status returns the current proposal status.\nfunc (p Proposal) Status() ProposalStatus {\n\treturn p.status\n}\n\n// Creator returns the address of the account that created the proposal.\nfunc (p Proposal) Creator() std.Address {\n\treturn p.creator\n}\n\n// CreatedAt returns the time that proposal was created.\nfunc (p Proposal) CreatedAt() time.Time {\n\treturn p.createdAt\n}\n\n// VotingRecord returns a record that contains all the votes submitted for the proposal.\nfunc (p Proposal) VotingRecord() *VotingRecord {\n\treturn p.record\n}\n\n// StatusReason returns an optional reason that lead to the current proposal status.\n// Reason is mostyl useful when a proposal fails.\nfunc (p Proposal) StatusReason() string {\n\treturn p.statusReason\n}\n\n// VotingDeadline returns the deadline after which no more votes should be allowed.\nfunc (p Proposal) VotingDeadline() time.Time {\n\treturn p.votingDeadline\n}\n\n// VoteChoices returns the list of vote choices allowed for the proposal.\nfunc (p Proposal) VoteChoices() []VoteChoice {\n\tvar (\n\t\ti       int\n\t\tchoices = make([]VoteChoice, p.voteChoices.Size())\n\t)\n\n\tp.voteChoices.Iterate(\"\", \"\", func(c string, _ any) bool {\n\t\tchoices[i] = VoteChoice(c)\n\t\ti++\n\t\treturn false\n\t})\n\treturn choices\n}\n\n// Validate validates that a proposal is valid for the current state.\n// Validation is done when proposal status is active and when the definition supports validation.\nfunc (p Proposal) Validate() error {\n\tif p.status != StatusActive {\n\t\treturn nil\n\t}\n\n\tif v, ok := p.definition.(Validable); ok {\n\t\treturn v.Validate()\n\t}\n\treturn nil\n}\n\n// IsValidVoteChoice checks if a vote choice is valid for the proposal.\nfunc (p Proposal) IsValidVoteChoice(c VoteChoice) bool {\n\treturn p.voteChoices.Has(string(c))\n}\n\n// IsQuorumReached checks if a participation quorum is reach.\nfunc IsQuorumReached(quorum float64, r ReadonlyVotingRecord, members MemberSet) bool {\n\tif members.Size() \u003c= 0 || quorum \u003c= 0 {\n\t\treturn false\n\t}\n\n\tvar votesCount int\n\tfor _, c := range r.Choices() {\n\t\t// Don't count explicit abstentions or invalid votes\n\t\tif c == ChoiceNone || c == ChoiceAbstain {\n\t\t\tcontinue\n\t\t}\n\n\t\tvotesCount += r.VoteCount(c)\n\t}\n\n\tpercentage := float64(votesCount) / float64(members.Size())\n\treturn percentage \u003e= quorum\n}\n"},{"name":"proposal_test.gno","body":"package commondao\n\nimport (\n\t\"std\"\n\t\"testing\"\n\t\"time\"\n\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/urequire\"\n\t\"gno.land/p/moul/addrset\"\n)\n\nfunc TestProposalNew(t *testing.T) {\n\tid := uint64(1)\n\tcreator := std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\tvotingPeriod := time.Minute * 10\n\n\tp, err := NewProposal(id, creator, testPropDef{votingPeriod: votingPeriod})\n\n\tuassert.NoError(t, err)\n\tuassert.Equal(t, p.ID(), id)\n\tuassert.NotEqual(t, p.Definition(), nil)\n\tuassert.True(t, p.Status() == StatusActive)\n\tuassert.Equal(t, p.Creator(), creator)\n\tuassert.False(t, p.CreatedAt().IsZero())\n\tuassert.NotEqual(t, p.VotingRecord(), nil)\n\tuassert.Empty(t, p.StatusReason())\n\tuassert.True(t, p.VotingDeadline() == p.CreatedAt().Add(votingPeriod))\n}\n\nfunc TestProposalVoteChoices(t *testing.T) {\n\tcases := []struct {\n\t\tname       string\n\t\tdefinition ProposalDefinition\n\t\tchoices    []VoteChoice\n\t}{\n\t\t{\n\t\t\tname:       \"custom choices\",\n\t\t\tdefinition: testPropDef{voteChoices: []VoteChoice{\"FOO\", \"BAR\", \"BAZ\"}},\n\t\t\tchoices:    []VoteChoice{\"BAR\", \"BAZ\", \"FOO\"},\n\t\t},\n\t\t{\n\t\t\tname:       \"defaults because of empty custom choice list\",\n\t\t\tdefinition: testPropDef{voteChoices: []VoteChoice{}},\n\t\t\tchoices:    []VoteChoice{ChoiceAbstain, ChoiceNo, ChoiceYes},\n\t\t},\n\t\t{\n\t\t\tname:       \"defaults because of single custom choice list\",\n\t\t\tdefinition: testPropDef{voteChoices: []VoteChoice{\"FOO\"}},\n\t\t\tchoices:    []VoteChoice{ChoiceAbstain, ChoiceNo, ChoiceYes},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tp, _ := NewProposal(1, \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", testPropDef{\n\t\t\t\tvoteChoices: tc.choices,\n\t\t\t})\n\n\t\t\tchoices := p.VoteChoices()\n\n\t\t\turequire.Equal(t, len(choices), len(tc.choices), \"expect vote choice count to match\")\n\t\t\tfor i, c := range choices {\n\t\t\t\turequire.True(t, tc.choices[i] == c, \"expect vote choice to match\")\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestIsQuorumReached(t *testing.T) {\n\tcases := []struct {\n\t\tname    string\n\t\tquorum  float64\n\t\tmembers []std.Address\n\t\tvotes   []Vote\n\t\tfail    bool\n\t}{\n\t\t{\n\t\t\tname:   \"one third\",\n\t\t\tquorum: QuorumOneThird,\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t\t\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\",\n\t\t\t},\n\t\t\tvotes: []Vote{\n\t\t\t\t{Address: \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", Choice: ChoiceYes},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:   \"one third no quorum\",\n\t\t\tquorum: QuorumOneThird,\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t\t\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\",\n\t\t\t},\n\t\t\tfail: true,\n\t\t},\n\t\t{\n\t\t\tname:   \"half\",\n\t\t\tquorum: QuorumHalf,\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t\t\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\",\n\t\t\t\t\"g125t352u4pmdrr57emc4pe04y40sknr5ztng5mt\",\n\t\t\t},\n\t\t\tvotes: []Vote{\n\t\t\t\t{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes},\n\t\t\t\t{Address: \"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\", Choice: ChoiceNo},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:   \"half no quorum\",\n\t\t\tquorum: QuorumHalf,\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t\t\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\",\n\t\t\t\t\"g125t352u4pmdrr57emc4pe04y40sknr5ztng5mt\",\n\t\t\t},\n\t\t\tvotes: []Vote{\n\t\t\t\t{Address: \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", Choice: ChoiceYes},\n\t\t\t},\n\t\t\tfail: true,\n\t\t},\n\t\t{\n\t\t\tname:   \"two thirds\",\n\t\t\tquorum: QuorumTwoThirds,\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t\t\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\",\n\t\t\t},\n\t\t\tvotes: []Vote{\n\t\t\t\t{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes},\n\t\t\t\t{Address: \"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\", Choice: ChoiceNo},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:   \"two thirds no quorum\",\n\t\t\tquorum: QuorumTwoThirds,\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t\t\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\",\n\t\t\t},\n\t\t\tvotes: []Vote{\n\t\t\t\t{Address: \"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\", Choice: ChoiceNo},\n\t\t\t},\n\t\t\tfail: true,\n\t\t},\n\t\t{\n\t\t\tname:   \"three fourths\",\n\t\t\tquorum: QuorumThreeFourths,\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t\t\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\",\n\t\t\t\t\"g125t352u4pmdrr57emc4pe04y40sknr5ztng5mt\",\n\t\t\t},\n\t\t\tvotes: []Vote{\n\t\t\t\t{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes},\n\t\t\t\t{Address: \"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\", Choice: ChoiceNo},\n\t\t\t\t{Address: \"g125t352u4pmdrr57emc4pe04y40sknr5ztng5mt\", Choice: ChoiceNo},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:   \"three fourths no quorum\",\n\t\t\tquorum: QuorumThreeFourths,\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t\t\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\",\n\t\t\t\t\"g125t352u4pmdrr57emc4pe04y40sknr5ztng5mt\",\n\t\t\t},\n\t\t\tvotes: []Vote{\n\t\t\t\t{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes},\n\t\t\t},\n\t\t\tfail: true,\n\t\t},\n\t\t{\n\t\t\tname:   \"full\",\n\t\t\tquorum: QuorumFull,\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t},\n\t\t\tvotes: []Vote{\n\t\t\t\t{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceNo},\n\t\t\t\t{Address: \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", Choice: ChoiceNo},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:   \"full no quorum\",\n\t\t\tquorum: QuorumFull,\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t},\n\t\t\tvotes: []Vote{\n\t\t\t\t{Address: \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", Choice: ChoiceNo},\n\t\t\t},\n\t\t\tfail: true,\n\t\t},\n\t\t{\n\t\t\tname:   \"no quorum with empty vote\",\n\t\t\tquorum: QuorumHalf,\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t},\n\t\t\tvotes: []Vote{\n\t\t\t\t{Address: \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", Choice: ChoiceNone},\n\t\t\t},\n\t\t\tfail: true,\n\t\t},\n\t\t{\n\t\t\tname:   \"no quorum with abstention\",\n\t\t\tquorum: QuorumHalf,\n\t\t\tmembers: []std.Address{\n\t\t\t\t\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\",\n\t\t\t},\n\t\t\tvotes: []Vote{\n\t\t\t\t{Address: \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", Choice: ChoiceAbstain},\n\t\t\t},\n\t\t\tfail: true,\n\t\t},\n\t\t{\n\t\t\tname:   \"invalid quorum percentage\",\n\t\t\tquorum: -1,\n\t\t\tfail:   true,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar members addrset.Set\n\t\t\tfor _, m := range tc.members {\n\t\t\t\tmembers.Add(m)\n\t\t\t}\n\n\t\t\tvar record VotingRecord\n\t\t\tfor _, v := range tc.votes {\n\t\t\t\trecord.AddVote(v)\n\t\t\t}\n\n\t\t\tsuccess := IsQuorumReached(tc.quorum, record.Readonly(), NewMemberSet(members))\n\n\t\t\tif tc.fail {\n\t\t\t\tuassert.False(t, success, \"expect quorum to fail\")\n\t\t\t} else {\n\t\t\t\tuassert.True(t, success, \"expect quorum to succeed\")\n\t\t\t}\n\t\t})\n\t}\n}\n\ntype testPropDef struct {\n\tvotingPeriod                          time.Duration\n\ttallyResult                           bool\n\tvalidationErr, tallyErr, executionErr error\n\tvoteChoices                           []VoteChoice\n}\n\nfunc (testPropDef) Title() string                 { return \"\" }\nfunc (testPropDef) Body() string                  { return \"\" }\nfunc (d testPropDef) VotingPeriod() time.Duration { return d.votingPeriod }\nfunc (d testPropDef) Validate() error             { return d.validationErr }\nfunc (d testPropDef) Execute() error              { return d.executionErr }\n\nfunc (d testPropDef) Tally(ReadonlyVotingRecord, MemberSet) (bool, error) {\n\treturn d.tallyResult, d.tallyErr\n}\n\nfunc (d testPropDef) CustomVoteChoices() []VoteChoice {\n\tif len(d.voteChoices) \u003e 0 {\n\t\treturn d.voteChoices\n\t}\n\treturn []VoteChoice{ChoiceYes, ChoiceNo, ChoiceAbstain}\n}\n"},{"name":"record.gno","body":"package commondao\n\nimport (\n\t\"errors\"\n\t\"math\"\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n// ErrVoteExists indicates that a user already voted.\nvar ErrVoteExists = errors.New(\"user already voted\")\n\ntype (\n\t// VoteIterFn defines a callback to iterate votes.\n\tVoteIterFn func(Vote) (stop bool)\n\n\t// Vote defines a single vote.\n\tVote struct {\n\t\t// Address is the address of the user that this vote belons to.\n\t\tAddress std.Address\n\n\t\t// Choice contains the voted choice.\n\t\tChoice VoteChoice\n\n\t\t// Reason contains the reason for the vote.\n\t\tReason string\n\n\t\t// Context can store any custom voting values related to the vote.\n\t\tContext any\n\t}\n)\n\n// ReadonlyVotingRecord defines an read only voting record.\ntype ReadonlyVotingRecord struct {\n\tvotes avl.Tree // string(address) -\u003e Vote\n\tcount avl.Tree // string(choice) -\u003e int\n}\n\n// Size returns the total number of votes that record contains.\nfunc (r ReadonlyVotingRecord) Size() int {\n\treturn r.votes.Size()\n}\n\n// Choices returns the voting choices that has been voted.\nfunc (r ReadonlyVotingRecord) Choices() []VoteChoice {\n\tvar choices []VoteChoice\n\tr.count.Iterate(\"\", \"\", func(k string, v any) bool {\n\t\tchoices = append(choices, VoteChoice(k))\n\t\treturn false\n\t})\n\treturn choices\n}\n\n// Iterate iterates voting record votes.\nfunc (r ReadonlyVotingRecord) Iterate(fn VoteIterFn) bool {\n\treturn r.votes.Iterate(\"\", \"\", func(_ string, v any) bool {\n\t\treturn fn(v.(Vote))\n\t})\n}\n\n// VoteCount returns the number of votes for a single voting choice.\nfunc (r ReadonlyVotingRecord) VoteCount(c VoteChoice) int {\n\tif v, found := r.count.Get(string(c)); found {\n\t\treturn v.(int)\n\t}\n\treturn 0\n}\n\n// HasVoted checks if an account already voted.\nfunc (r ReadonlyVotingRecord) HasVoted(user std.Address) bool {\n\treturn r.votes.Has(user.String())\n}\n\n// VotingRecord stores accounts that voted and vote choices.\ntype VotingRecord struct {\n\tReadonlyVotingRecord\n}\n\n// Readonly returns a read only voting record.\nfunc (r VotingRecord) Readonly() ReadonlyVotingRecord {\n\treturn r.ReadonlyVotingRecord\n}\n\n// AddVote adds a vote to the voting record.\n// If a vote for the same user already exists is overwritten.\nfunc (r *VotingRecord) AddVote(vote Vote) (updated bool) {\n\t// Get previous member vote if it exists\n\tv, _ := r.votes.Get(vote.Address.String())\n\n\t// When a previous vote exists update counter for the previous choice\n\tupdated = r.votes.Set(vote.Address.String(), vote)\n\tif updated {\n\t\tprev := v.(Vote)\n\t\tr.count.Set(string(prev.Choice), r.VoteCount(prev.Choice)-1)\n\t}\n\n\tr.count.Set(string(vote.Choice), r.VoteCount(vote.Choice)+1)\n\treturn\n}\n\n// FindMostVotedChoice returns the most voted choice.\n// ChoiceNone is returned when there is a tie between different\n// voting choices or when the voting record has are no votes.\nfunc FindMostVotedChoice(r ReadonlyVotingRecord) VoteChoice {\n\tvar (\n\t\tchoice                  VoteChoice\n\t\tcurrentCount, prevCount int\n\t)\n\n\tfor _, c := range r.Choices() {\n\t\tcount := r.VoteCount(c)\n\t\tif currentCount \u003c= count {\n\t\t\tchoice = c\n\t\t\tprevCount = currentCount\n\t\t\tcurrentCount = count\n\t\t}\n\t}\n\n\tif prevCount \u003c currentCount {\n\t\treturn choice\n\t}\n\treturn ChoiceNone\n}\n\n// SelectChoiceByAbsoluteMajority select the vote choice by absolute majority.\n// Vote choice is a majority when chosen by more than half of the votes.\n// Absolute majority considers abstentions when counting votes.\nfunc SelectChoiceByAbsoluteMajority(r ReadonlyVotingRecord, membersCount int) (VoteChoice, bool) {\n\tchoice := FindMostVotedChoice(r)\n\tif choice != ChoiceNone \u0026\u0026 r.VoteCount(choice) \u003e int(membersCount/2) {\n\t\treturn choice, true\n\t}\n\treturn ChoiceNone, false\n}\n\n// SelectChoiceBySuperMajority select the vote choice by super majority using a 2/3s threshold.\n// Abstentions are not considered when calculating the super majority choice.\nfunc SelectChoiceBySuperMajority(r ReadonlyVotingRecord, membersCount int) (VoteChoice, bool) {\n\tif membersCount \u003c 3 {\n\t\treturn ChoiceNone, false\n\t}\n\n\tchoice := FindMostVotedChoice(r)\n\tif choice != ChoiceNone \u0026\u0026 r.VoteCount(choice) \u003e= int(math.Ceil((2*float64(membersCount))/3)) {\n\t\treturn choice, true\n\t}\n\treturn ChoiceNone, false\n}\n\n// SelectChoiceByPlurality selects the vote choice by plurality.\n// The choice will be considered a majority if it has votes and if there is no other\n// choice with the same number of votes. A tie won't be considered majority.\nfunc SelectChoiceByPlurality(r ReadonlyVotingRecord) (VoteChoice, bool) {\n\tvar (\n\t\tchoice       VoteChoice\n\t\tcurrentCount int\n\t\tisMajority   bool\n\t)\n\n\tfor _, c := range r.Choices() {\n\t\tif c == ChoiceAbstain || c == ChoiceNone {\n\t\t\tcontinue\n\t\t}\n\n\t\tcount := r.VoteCount(c)\n\t\tif currentCount \u003c count {\n\t\t\tchoice = c\n\t\t\tcurrentCount = count\n\t\t\tisMajority = true\n\t\t} else if currentCount == count {\n\t\t\tisMajority = false\n\t\t}\n\t}\n\n\tif isMajority {\n\t\treturn choice, true\n\t}\n\treturn ChoiceNone, false\n}\n"},{"name":"record_test.gno","body":"package commondao\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/urequire\"\n)\n\nfunc TestVotingRecordDefaults(t *testing.T) {\n\tvar (\n\t\trecord VotingRecord\n\t\tuser   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t)\n\n\tuassert.Equal(t, record.Size(), 0)\n\tuassert.Equal(t, record.VoteCount(ChoiceYes), 0)\n\tuassert.Equal(t, record.VoteCount(ChoiceNo), 0)\n\tuassert.Equal(t, record.VoteCount(ChoiceAbstain), 0)\n\tuassert.False(t, record.HasVoted(user))\n}\n\nfunc TestVotingRecordAddVote(t *testing.T) {\n\tcases := []struct {\n\t\tname                            string\n\t\tsetup                           func(*VotingRecord)\n\t\tvotes                           []Vote\n\t\tyesCount, noCount, abstainCount int\n\t\tupdated                         bool\n\t}{\n\t\t{\n\t\t\tname: \"single vote\",\n\t\t\tvotes: []Vote{\n\t\t\t\t{\n\t\t\t\t\tAddress: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\tChoice:  ChoiceYes,\n\t\t\t\t},\n\t\t\t},\n\t\t\tyesCount: 1,\n\t\t},\n\t\t{\n\t\t\tname: \"multiple votes\",\n\t\t\tvotes: []Vote{\n\t\t\t\t{\n\t\t\t\t\tAddress: \"g125t352u4pmdrr57emc4pe04y40sknr5ztng5mt\",\n\t\t\t\t\tChoice:  ChoiceNo,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tAddress: \"g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk\",\n\t\t\t\t\tChoice:  ChoiceYes,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tAddress: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\tChoice:  ChoiceNo,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tAddress: \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\",\n\t\t\t\t\tChoice:  ChoiceAbstain,\n\t\t\t\t},\n\t\t\t},\n\t\t\tyesCount:     1,\n\t\t\tnoCount:      2,\n\t\t\tabstainCount: 1,\n\t\t},\n\t\t{\n\t\t\tname: \"vote exists\",\n\t\t\tvotes: []Vote{\n\t\t\t\t{\n\t\t\t\t\tAddress: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\t\t\tChoice:  ChoiceYes,\n\t\t\t\t},\n\t\t\t},\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceAbstain})\n\t\t\t},\n\t\t\tyesCount:     1,\n\t\t\tabstainCount: 0,\n\t\t\tupdated:      true,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar (\n\t\t\t\trecord  VotingRecord\n\t\t\t\tupdated bool\n\t\t\t)\n\n\t\t\tif tc.setup != nil {\n\t\t\t\ttc.setup(\u0026record)\n\t\t\t}\n\n\t\t\tfor _, v := range tc.votes {\n\t\t\t\tupdated = updated || record.AddVote(v)\n\t\t\t}\n\n\t\t\turequire.Equal(t, updated, tc.updated, \"expect vote to be updated\")\n\t\t\turequire.Equal(t, record.Size(), len(tc.votes), \"expect record size to match\")\n\n\t\t\tvar i int\n\t\t\trecord.Iterate(func(v Vote) bool {\n\t\t\t\tuassert.Equal(t, v.Address, tc.votes[i].Address)\n\t\t\t\tuassert.Equal(t, string(v.Choice), string(tc.votes[i].Choice))\n\t\t\t\tuassert.True(t, record.HasVoted(v.Address))\n\n\t\t\t\ti++\n\t\t\t\treturn i == record.Size()\n\t\t\t})\n\t\t\turequire.Equal(t, record.Size(), i, \"expect number of iterated votes to match\")\n\n\t\t\tuassert.Equal(t, record.VoteCount(ChoiceYes), tc.yesCount, \"expect YES vote count to match\")\n\t\t\tuassert.Equal(t, record.VoteCount(ChoiceNo), tc.noCount, \"expect NO vote count to match\")\n\t\t\tuassert.Equal(t, record.VoteCount(ChoiceAbstain), tc.abstainCount, \"expect ABSTAIN vote count to match\")\n\t\t})\n\t}\n}\n\nfunc TestFindMostVotedChoice(t *testing.T) {\n\tcases := []struct {\n\t\tname   string\n\t\tsetup  func(*VotingRecord)\n\t\tchoice VoteChoice\n\t}{\n\t\t{\n\t\t\tname:   \"no votes\",\n\t\t\tchoice: ChoiceNone,\n\t\t},\n\t\t{\n\t\t\tname: \"one vote\",\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes})\n\t\t\t},\n\t\t\tchoice: ChoiceYes,\n\t\t},\n\t\t{\n\t\t\tname: \"multiple votes\",\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceNo})\n\t\t\t\tr.AddVote(Vote{Address: \"g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", Choice: ChoiceNo})\n\t\t\t},\n\t\t\tchoice: ChoiceNo,\n\t\t},\n\t\t{\n\t\t\tname: \"tie\",\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk\", Choice: ChoiceNo})\n\t\t\t},\n\t\t\tchoice: ChoiceNone,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar record VotingRecord\n\n\t\t\tif tc.setup != nil {\n\t\t\t\ttc.setup(\u0026record)\n\t\t\t}\n\n\t\t\tchoice := FindMostVotedChoice(record.Readonly())\n\n\t\t\tuassert.Equal(t, string(choice), string(tc.choice))\n\t\t})\n\t}\n}\n\nfunc TestSelectChoiceByAbsoluteMajority(t *testing.T) {\n\tcases := []struct {\n\t\tname         string\n\t\tsetup        func(*VotingRecord)\n\t\tchoice       VoteChoice\n\t\tmembersCount int\n\t\tsuccess      bool\n\t}{\n\t\t{\n\t\t\tname:         \"no votes\",\n\t\t\tchoice:       ChoiceNone,\n\t\t\tmembersCount: 3,\n\t\t\tsuccess:      false,\n\t\t},\n\t\t{\n\t\t\tname: \"majority\",\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", Choice: ChoiceNo})\n\t\t\t},\n\t\t\tchoice:       ChoiceYes,\n\t\t\tmembersCount: 3,\n\t\t\tsuccess:      true,\n\t\t},\n\t\t{\n\t\t\tname: \"no majority\",\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk\", Choice: ChoiceNo})\n\t\t\t},\n\t\t\tchoice:       \"\",\n\t\t\tmembersCount: 3,\n\t\t\tsuccess:      false,\n\t\t},\n\t\t{\n\t\t\tname: \"majority with abstain vote\",\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", Choice: ChoiceAbstain})\n\t\t\t},\n\t\t\tchoice:       ChoiceYes,\n\t\t\tmembersCount: 3,\n\t\t\tsuccess:      true,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar record VotingRecord\n\n\t\t\tif tc.setup != nil {\n\t\t\t\ttc.setup(\u0026record)\n\t\t\t}\n\n\t\t\tchoice, success := SelectChoiceByAbsoluteMajority(record.Readonly(), tc.membersCount)\n\n\t\t\tuassert.Equal(t, string(tc.choice), string(choice), \"choice\")\n\t\t\tuassert.Equal(t, tc.success, success, \"success\")\n\t\t})\n\t}\n}\n\nfunc TestSelectChoiceBySuperMajority(t *testing.T) {\n\tcases := []struct {\n\t\tname         string\n\t\tsetup        func(*VotingRecord)\n\t\tchoice       VoteChoice\n\t\tmembersCount int\n\t\tsuccess      bool\n\t}{\n\t\t{\n\t\t\tname:         \"no votes\",\n\t\t\tchoice:       ChoiceNone,\n\t\t\tmembersCount: 3,\n\t\t\tsuccess:      false,\n\t\t},\n\t\t{\n\t\t\tname: \"majority\",\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", Choice: ChoiceNo})\n\t\t\t},\n\t\t\tchoice:       ChoiceYes,\n\t\t\tmembersCount: 3,\n\t\t\tsuccess:      true,\n\t\t},\n\t\t{\n\t\t\tname: \"no majority\",\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk\", Choice: ChoiceNo})\n\t\t\t},\n\t\t\tchoice:       \"\",\n\t\t\tmembersCount: 3,\n\t\t\tsuccess:      false,\n\t\t},\n\t\t{\n\t\t\tname: \"majority with abstain vote\",\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", Choice: ChoiceAbstain})\n\t\t\t},\n\t\t\tchoice:       ChoiceYes,\n\t\t\tmembersCount: 3,\n\t\t\tsuccess:      true,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar record VotingRecord\n\n\t\t\tif tc.setup != nil {\n\t\t\t\ttc.setup(\u0026record)\n\t\t\t}\n\n\t\t\tchoice, success := SelectChoiceBySuperMajority(record.Readonly(), tc.membersCount)\n\n\t\t\tuassert.Equal(t, string(tc.choice), string(choice), \"choice\")\n\t\t\tuassert.Equal(t, tc.success, success, \"success\")\n\t\t})\n\t}\n}\n\nfunc TestSelectChoiceByPlurality(t *testing.T) {\n\tcases := []struct {\n\t\tname    string\n\t\tsetup   func(*VotingRecord)\n\t\tchoice  VoteChoice\n\t\tsuccess bool\n\t}{\n\t\t{\n\t\t\tname:    \"no votes\",\n\t\t\tchoice:  ChoiceNone,\n\t\t\tsuccess: false,\n\t\t},\n\t\t{\n\t\t\tname: \"plurality\",\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", Choice: ChoiceNo})\n\t\t\t},\n\t\t\tchoice:  ChoiceYes,\n\t\t\tsuccess: true,\n\t\t},\n\t\t{\n\t\t\tname: \"no plurality\",\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk\", Choice: ChoiceNo})\n\t\t\t},\n\t\t\tchoice:  \"\",\n\t\t\tsuccess: false,\n\t\t},\n\t\t{\n\t\t\tname: \"plurality with abstain vote\",\n\t\t\tsetup: func(r *VotingRecord) {\n\t\t\t\tr.AddVote(Vote{Address: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk\", Choice: ChoiceYes})\n\t\t\t\tr.AddVote(Vote{Address: \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\", Choice: ChoiceNo})\n\t\t\t\tr.AddVote(Vote{Address: \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", Choice: ChoiceAbstain})\n\t\t\t},\n\t\t\tchoice:  ChoiceYes,\n\t\t\tsuccess: true,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar record VotingRecord\n\n\t\t\tif tc.setup != nil {\n\t\t\t\ttc.setup(\u0026record)\n\t\t\t}\n\n\t\t\tchoice, success := SelectChoiceByPlurality(record.Readonly())\n\n\t\t\tuassert.Equal(t, string(tc.choice), string(choice), \"choice\")\n\t\t\tuassert.Equal(t, tc.success, success, \"success\")\n\t\t})\n\t}\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"80000000","gas_fee":"800000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"AYp77CAzrUoflgkzXwQDfRBdcJFimQ6ZRLD5jAiRrPfZ5hBdNp2YYqG7rd30nAB1KwZZuZcaSVVh+lCwrbZAAg=="}],"memo":""},"metadata":{"timestamp":"1743087584"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","package":{"name":"boards2","path":"gno.land/r/devx000/gnoland/boards2/v1rc1","files":[{"name":"board.gno","body":"package boards2\n\nimport (\n\t\"net/url\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\ntype BoardID uint64\n\nfunc (id BoardID) String() string {\n\treturn strconv.Itoa(int(id))\n}\n\nfunc (id BoardID) Key() string {\n\treturn padZero(uint64(id), 10)\n}\n\ntype Board struct {\n\tid        BoardID // only set for public boards.\n\tname      string\n\taliases   []string\n\tcreator   std.Address\n\tthreads   avl.Tree // Post.id -\u003e *Post\n\tpostsCtr  uint64   // increments Post.id\n\tcreatedAt time.Time\n\tdeleted   avl.Tree // TODO reserved for fast-delete.\n\tperms     Permissions\n\treadonly  bool\n}\n\nfunc newBoard(id BoardID, name string, creator std.Address, p Permissions) *Board {\n\treturn \u0026Board{\n\t\tid:        id,\n\t\tname:      name,\n\t\tcreator:   creator,\n\t\tthreads:   avl.Tree{},\n\t\tcreatedAt: time.Now(),\n\t\tdeleted:   avl.Tree{},\n\t\tperms:     p,\n\t}\n}\n\nfunc (board *Board) GetID() BoardID {\n\treturn board.id\n}\n\n// GetName returns the name of the board.\nfunc (board *Board) GetName() string {\n\treturn board.name\n}\n\n// GetURL returns the relative URL of the board.\nfunc (board *Board) GetURL() string {\n\treturn strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\") + \":\" + url.PathEscape(board.name)\n}\n\n// GetURL returns relative board path relative.\n//\n// Note: returned result is not escaped. Use GetURL to get URL-encoded path.\nfunc (board *Board) GetPath() string {\n\treturn strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\") + \":\" + board.name\n}\n\nfunc (board *Board) GetPermissions() Permissions {\n\treturn board.perms\n}\n\n// SetReadonly updates board's read-only status.\nfunc (board *Board) SetReadonly(readonly bool) {\n\tboard.readonly = readonly\n}\n\n// IsReadonly checks if the board is a read-only board.\nfunc (board *Board) IsReadonly() bool {\n\treturn board.readonly\n}\n\nfunc (board *Board) GetThread(threadID PostID) (_ *Post, found bool) {\n\tv, found := board.threads.Get(threadID.Key())\n\tif !found {\n\t\treturn nil, false\n\t}\n\treturn v.(*Post), true\n}\n\nfunc (board *Board) AddThread(creator std.Address, title string, body string) *Post {\n\tpid := board.incGetPostID()\n\tthread := newPost(board, pid, creator, title, body, pid, 0, 0)\n\tboard.threads.Set(pid.Key(), thread)\n\treturn thread\n}\n\n// NOTE: this can be potentially very expensive for threads with many replies.\n// TODO: implement optional fast-delete where thread is simply moved.\nfunc (board *Board) DeleteThread(pid PostID) {\n\t_, removed := board.threads.Remove(pid.Key())\n\tif !removed {\n\t\tpanic(\"thread does not exist with ID \" + pid.String())\n\t}\n}\n\n// Render renders a board into Markdown.\nfunc (board *Board) Render(path, menu string) string {\n\tvar sb strings.Builder\n\n\tsb.WriteString(\"# \" + board.GetName() + \"  \\n\")\n\tsb.WriteString(\"_Board created by \" + newUserLink(board.creator) + \" \")\n\tsb.WriteString(\"on \" + board.createdAt.Format(dateFormat))\n\tsb.WriteString(\", #\" + board.id.String() + \"_\")\n\n\tif board.IsReadonly() {\n\t\tsb.WriteString(\"  \\n_**Starting new threads and commenting is disabled**_\")\n\t}\n\n\t// XXX: Menu is rendered by the caller to deal with links and sub-menus\n\t// TODO: We should have the render logic separated from boards so avoid sending menu as argument\n\tif menu != \"\" {\n\t\tsb.WriteString(\"\\n\\n\")\n\t\tsb.WriteString(menu)\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\tsb.WriteString(\"\\n\\n---\\n\")\n\n\tif board.threads.Size() == 0 {\n\t\tsb.WriteString(\"### This board doesn't have any threads\\n\")\n\t\tif !board.IsReadonly() {\n\t\t\turl := board.GetPostFormURL()\n\t\t\tsb.WriteString(\"Do you want to [start a new conversation](\" + url + \") in this board ?\")\n\t\t}\n\t\treturn sb.String()\n\t}\n\n\tp, err := pager.New(path, board.threads.Size(), pager.WithPageSize(pageSizeThreads))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\trender := func(_ string, v any) bool {\n\t\tthread := v.(*Post)\n\t\tif thread.isHidden {\n\t\t\treturn false\n\t\t}\n\n\t\tsb.WriteString(thread.RenderSummary())\n\t\tsb.WriteString(\"\\n\")\n\t\treturn false\n\t}\n\n\tsb.WriteString(\"_Sort by \")\n\tr := realmpath.Parse(path)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tsb.WriteString(newLink(\"newest first\", r.String()))\n\t\tsb.WriteString(\"_\\n\")\n\t\tboard.threads.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tsb.WriteString(newLink(\"oldest first\", r.String()))\n\t\tsb.WriteString(\"_\\n\")\n\t\tboard.threads.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tsb.WriteString(\"\\n---\\n\")\n\t\tsb.WriteString(pager.Picker(p))\n\t}\n\n\treturn sb.String()\n}\n\nfunc (board *Board) incGetPostID() PostID {\n\tboard.postsCtr++\n\treturn PostID(board.postsCtr)\n}\n\nfunc (board *Board) GetURLFromThreadID(threadID PostID) string {\n\treturn board.GetURL() + \"/\" + threadID.String()\n}\n\nfunc (board *Board) GetURLFromReplyID(threadID, replyID PostID) string {\n\treturn board.GetURL() + \"/\" + threadID.String() + \"/\" + replyID.String()\n}\n\nfunc (board *Board) GetRenameFormURL() string { // TODO: These type of functions shouldn't be part of Board type\n\treturn txlink.Call(\"RenameBoard\", \"name\", board.name)\n}\n\nfunc (board *Board) GetFreezeFormURL() string {\n\treturn txlink.Call(\"FreezeBoard\", \"boardID\", board.id.String())\n}\n\nfunc (board *Board) GetUnfreezeFormURL() string {\n\treturn txlink.Call(\"UnfreezeBoard\", \"boardID\", board.id.String())\n}\n\nfunc (board *Board) GetFlaggingThresholdFormURL() string {\n\treturn txlink.Call(\"SetFlaggingThreshold\", \"boardID\", board.id.String())\n}\n\nfunc (board *Board) GetInviteMemberFormURL() string {\n\treturn txlink.Call(\"InviteMember\", \"boardID\", board.id.String())\n}\n\nfunc (board *Board) GetPostFormURL() string {\n\treturn txlink.Call(\"CreateThread\", \"boardID\", board.id.String())\n}\n\nfunc (board *Board) GetMembersURL() string {\n\treturn board.GetURL() + \"/members\"\n}\n\nfunc createDefaultBoardPermissions(owner std.Address) *DefaultPermissions {\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.SetSuperRole(RoleOwner)\n\tperms.AddRole(\n\t\tRoleAdmin,\n\t\tPermissionBoardRename,\n\t\tPermissionBoardFlaggingUpdate,\n\t\tPermissionMemberInvite,\n\t\tPermissionMemberRemove,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadEdit,\n\t\tPermissionThreadDelete,\n\t\tPermissionThreadRepost,\n\t\tPermissionThreadFlag,\n\t\tPermissionThreadFreeze,\n\t\tPermissionReplyCreate,\n\t\tPermissionReplyDelete,\n\t\tPermissionReplyFlag,\n\t\tPermissionReplyFreeze,\n\t\tPermissionRoleChange,\n\t)\n\tperms.AddRole(\n\t\tRoleModerator,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadEdit,\n\t\tPermissionThreadRepost,\n\t\tPermissionThreadFlag,\n\t\tPermissionReplyCreate,\n\t\tPermissionReplyFlag,\n\t)\n\tperms.AddRole(\n\t\tRoleGuest,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadRepost,\n\t\tPermissionReplyCreate,\n\t)\n\tperms.AddUser(owner, RoleOwner)\n\treturn perms\n}\n"},{"name":"board_readonly.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"time\"\n)\n\n// ReadonlyBoard defines an interface for readonly boards.\ntype ReadonlyBoard interface {\n\t// ID returns the unique identifier of the board.\n\tID() BoardID\n\n\t// Name returns the name of the board.\n\tName() string\n\n\t// Aliases returns a list with previous names assigned to the board.\n\tAliases() []string\n\n\t// Creator returns board's creator address.\n\tCreator() std.Address\n\n\t// LastPostID returns the ID assigned to the last created thread.\n\tLastPostID() uint64\n\n\t// CreatedAt returns the time when board was created.\n\tCreatedAt() time.Time\n\n\t// IsReadonly returns true when board shouldn't allow the creation of threads and comments.\n\tIsReadonly() bool\n\n\t// MembersCount returns the number of invited board members.\n\tMembersCount() int\n\n\t// IterateMembers allows reading the list of invited board members.\n\tIterateMembers(offset, count int, fn UsersIterFn)\n}\n\ntype readonlyBoard struct {\n\tboard *Board\n}\n\nfunc (b readonlyBoard) ID() BoardID {\n\treturn b.board.id\n}\n\nfunc (b readonlyBoard) Name() string {\n\treturn b.board.name\n}\n\nfunc (b readonlyBoard) Aliases() []string {\n\taliases := make([]string, len(b.board.aliases))\n\tfor i, s := range b.board.aliases {\n\t\taliases[i] = s\n\t}\n\treturn aliases\n}\n\nfunc (b readonlyBoard) Creator() std.Address {\n\treturn b.board.creator\n}\n\nfunc (b readonlyBoard) LastPostID() uint64 {\n\treturn b.board.postsCtr\n}\n\nfunc (b readonlyBoard) CreatedAt() time.Time {\n\treturn b.board.createdAt\n}\n\nfunc (b readonlyBoard) IsReadonly() bool {\n\treturn b.board.readonly\n}\n\nfunc (b readonlyBoard) MembersCount() int {\n\treturn b.board.perms.UsersCount()\n}\n\nfunc (b readonlyBoard) IterateMembers(offset, count int, fn UsersIterFn) {\n\tb.board.perms.IterateUsers(offset, count, fn)\n}\n"},{"name":"board_test.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nfunc TestBoardID_String(t *testing.T) {\n\tinput := BoardID(32)\n\n\tuassert.Equal(t, \"32\", input.String())\n}\n\nfunc TestBoardID_Key(t *testing.T) {\n\tinput := BoardID(128)\n\twant := strings.Repeat(\"0\", 7) + \"128\"\n\tuassert.Equal(t, want, input.Key())\n}\n\nfunc TestBoard_GetID(t *testing.T) {\n\twant := int(92)\n\tb := new(Board)\n\tb.id = BoardID(want)\n\tgot := int(b.GetID())\n\n\tuassert.Equal(t, got, want)\n\tuassert.NotEqual(t, got, want*want)\n}\n\nfunc TestBoard_GetURL(t *testing.T) {\n\tpkgPath := strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\tname := \"foobar_test_get_url123\"\n\twant := pkgPath + \":\" + name\n\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tboard := newBoard(1, name, addr, perms)\n\tgot := board.GetURL()\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetThread(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(1, \"test123\", addr, perms)\n\n\t_, ok := b.GetThread(12345)\n\tuassert.False(t, ok)\n\n\tpost := b.AddThread(addr, \"foo\", \"bar\")\n\t_, ok = b.GetThread(post.GetPostID())\n\tuassert.True(t, ok)\n}\n\nfunc TestBoard_DeleteThread(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(1, \"test123\", addr, perms)\n\n\tpost := b.AddThread(addr, \"foo\", \"bar\")\n\tid := post.GetPostID()\n\n\tb.DeleteThread(id)\n\n\t_, ok := b.GetThread(id)\n\tuassert.False(t, ok)\n}\n\nvar boardUrlPrefix = strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\nfunc TestBoard_GetURLFromThreadID(t *testing.T) {\n\tboardName := \"test12345\"\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(BoardID(11), boardName, addr, perms)\n\twant := boardUrlPrefix + \":\" + boardName + \"/10\"\n\n\tgot := b.GetURLFromThreadID(10)\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetURLFromReplyID(t *testing.T) {\n\tboardName := \"test12345\"\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(BoardID(11), boardName, addr, perms)\n\twant := boardUrlPrefix + \":\" + boardName + \"/10/20\"\n\n\tgot := b.GetURLFromReplyID(10, 20)\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetPostFormURL(t *testing.T) {\n\tbid := BoardID(386)\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(bid, \"foo1234\", addr, perms)\n\texpect := txlink.Call(\"CreateThread\", \"boardID\", bid.String())\n\n\tgot := b.GetPostFormURL()\n\tuassert.Equal(t, expect, got)\n}\n"},{"name":"boards.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tgPerms        Permissions\n\tgNotice       string\n\tgHelp         string\n\tgLastBoardID  BoardID\n\tgBoardsByID   avl.Tree // string(id) -\u003e *Board\n\tgBoardsByName avl.Tree // string(name) -\u003e *Board\n\tgLocked       struct {\n\t\trealm        bool\n\t\trealmMembers bool\n\t}\n)\n\nfunc init() {\n\t// TODO: Define and change the default realm owner (or owners)\n\towner := std.Address(\"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq\") // @devx\n\n\t// Initialize default realm permissions\n\tgPerms = createDefaultPermissions(owner)\n}\n\n// incGetBoardID returns a new board ID.\nfunc incGetBoardID() BoardID {\n\tgLastBoardID++\n\treturn gLastBoardID\n}\n\n// getBoard returns a board for a specific ID.\nfunc getBoard(id BoardID) (_ *Board, found bool) {\n\tv, exists := gBoardsByID.Get(id.Key())\n\tif !exists {\n\t\treturn nil, false\n\t}\n\treturn v.(*Board), true\n}\n\n// mustGetBoardByName returns a board or panics when it's not found.\nfunc mustGetBoardByName(name string) *Board {\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tpanic(\"board does not exist with name: \" + name)\n\t}\n\treturn v.(*Board)\n}\n\n// mustGetBoard returns a board or panics when it's not found.\nfunc mustGetBoard(id BoardID) *Board {\n\tboard, found := getBoard(id)\n\tif !found {\n\t\tpanic(\"board does not exist with ID: \" + id.String())\n\t}\n\treturn board\n}\n\n// mustGetThread returns a thread or panics when it's not found.\nfunc mustGetThread(board *Board, threadID PostID) *Post {\n\tthread, found := board.GetThread(threadID)\n\tif !found {\n\t\tpanic(\"thread does not exist with ID: \" + threadID.String())\n\t}\n\treturn thread\n}\n\n// mustGetReply returns a reply or panics when it's not found.\nfunc mustGetReply(thread *Post, replyID PostID) *Post {\n\treply, found := thread.GetReply(replyID)\n\tif !found {\n\t\tpanic(\"reply does not exist with ID: \" + replyID.String())\n\t}\n\treturn reply\n}\n\nfunc mustGetPermissions(bid BoardID) Permissions {\n\tif bid != 0 {\n\t\tboard := mustGetBoard(bid)\n\t\treturn board.perms\n\t}\n\treturn gPerms\n}\n"},{"name":"flag.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n// DefaultFlaggingThreshold defines the default number of flags that hides flaggable items.\nconst DefaultFlaggingThreshold = 1\n\nvar gFlaggingThresholds avl.Tree // string(board ID) -\u003e int\n\ntype Flag struct {\n\tUser   std.Address\n\tReason string\n}\n\ntype Flaggable interface {\n\t// AddFlag adds a new flag to an item.\n\t//\n\t// Returns false if item was already flagged by user.\n\tAddFlag(flag Flag) bool\n\n\t// FlagsCount returns number of times item was flagged.\n\tFlagsCount() int\n}\n\n// flagItem adds a flag to a flaggable item (post, thread, etc).\n//\n// Returns whether flag count threshold is reached and item can be hidden.\n//\n// Panics if flag count threshold was already reached.\nfunc flagItem(item Flaggable, flag Flag, threshold int) bool {\n\tif item.FlagsCount() \u003e= threshold {\n\t\tpanic(\"item flag count threshold exceeded: \" + strconv.Itoa(threshold))\n\t}\n\n\tif !item.AddFlag(flag) {\n\t\tpanic(\"item has been already flagged by a current user\")\n\t}\n\n\treturn item.FlagsCount() == threshold\n}\n\nfunc getFlaggingThreshold(bid BoardID) int {\n\tif v, ok := gFlaggingThresholds.Get(bid.String()); ok {\n\t\treturn v.(int)\n\t}\n\treturn DefaultFlaggingThreshold\n}\n"},{"name":"format.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/r/sys/users\"\n)\n\nfunc padLeft(s string, length int) string {\n\tif len(s) \u003e= length {\n\t\treturn s\n\t}\n\treturn strings.Repeat(\" \", length-len(s)) + s\n}\n\nfunc padZero(u64 uint64, length int) string {\n\ts := strconv.Itoa(int(u64))\n\tif len(s) \u003e= length {\n\t\treturn s\n\t}\n\treturn strings.Repeat(\"0\", length-len(s)) + s\n}\n\nfunc indentBody(indent string, body string) string {\n\tvar (\n\t\tres   string\n\t\tlines = strings.Split(body, \"\\n\")\n\t)\n\tfor i, line := range lines {\n\t\tif i \u003e 0 {\n\t\t\tres += \"\\n\"\n\t\t}\n\t\tres += indent + line\n\t}\n\treturn res\n}\n\n// NOTE: length must be greater than 3.\nfunc summaryOf(text string, length int) string {\n\tlines := strings.SplitN(text, \"\\n\", 2)\n\tline := lines[0]\n\tif len(line) \u003e length {\n\t\tline = line[:(length-3)] + \"...\"\n\t} else if len(lines) \u003e 1 {\n\t\t// len(line) \u003c= 80\n\t\tline = line + \"...\"\n\t}\n\treturn line\n}\n\n// newLink returns a Markdown link.\nfunc newLink(label, uri string) string {\n\treturn \"[\" + label + \"](\" + uri + \")\"\n}\n\n// newButtonLink returns a Makdown link with label wrapped in brackets.\nfunc newButtonLink(label, uri string) string {\n\treturn `[\\[` + label + `\\]](` + uri + \")\"\n}\n\n// newUserLink returns a Markdown link for an account to the users\n// realm or the address as string when a user is not registered.\nfunc newUserLink(addr std.Address) string {\n\tuser := users.ResolveAddress(addr)\n\tif user != nil {\n\t\treturn user.RenderLink(\"\")\n\t}\n\treturn addr.String()\n}\n"},{"name":"permissions.gno","body":"package boards2\n\nimport \"std\"\n\nconst (\n\tPermissionRealmHelp           Permission = \"realm:help\"\n\tPermissionRealmLock                      = \"realm:lock\"\n\tPermissionRealmNotice                    = \"realm:notice\"\n\tPermissionBoardCreate                    = \"board:create\"\n\tPermissionBoardFlaggingUpdate            = \"board:flagging-update\"\n\tPermissionBoardFreeze                    = \"board:freeze\"\n\tPermissionBoardRename                    = \"board:rename\"\n\tPermissionThreadCreate                   = \"thread:create\"\n\tPermissionThreadDelete                   = \"thread:delete\"\n\tPermissionThreadEdit                     = \"thread:edit\"\n\tPermissionThreadFlag                     = \"thread:flag\"\n\tPermissionThreadFreeze                   = \"thread:freeze\"\n\tPermissionThreadRepost                   = \"thread:repost\"\n\tPermissionReplyCreate                    = \"reply:create\"\n\tPermissionReplyDelete                    = \"reply:delete\"\n\tPermissionReplyFlag                      = \"reply:flag\"\n\tPermissionReplyFreeze                    = \"reply:freeze\"\n\tPermissionMemberInvite                   = \"member:invite\"\n\tPermissionMemberRemove                   = \"member:remove\"\n\tPermissionRoleChange                     = \"role:change\"\n\tPermissionPermissionsUpdate              = \"permissions:update\"\n)\n\nconst (\n\tRoleGuest     Role = \"\"\n\tRoleOwner          = \"owner\"\n\tRoleAdmin          = \"admin\"\n\tRoleModerator      = \"moderator\"\n)\n\ntype (\n\t// Permission defines the type for permissions.\n\tPermission string\n\n\t// Role defines the type for user roles.\n\tRole string\n\n\t// Args is a list of generic arguments.\n\tArgs []interface{}\n\n\t// User contains user info.\n\tUser struct {\n\t\tAddress std.Address\n\t\tRoles   []Role\n\t}\n\n\t// UsersIterFn defines a function type to iterate users.\n\tUsersIterFn func(User) bool\n\n\t// Permissions define an interface to for permissioned execution.\n\tPermissions interface {\n\t\t// HasRole checks if a user has a specific role assigned.\n\t\tHasRole(std.Address, Role) bool\n\n\t\t// HasPermission checks if a user has a specific permission.\n\t\tHasPermission(std.Address, Permission) bool\n\n\t\t// WithPermission calls a callback when a user has a specific permission.\n\t\t// It panics on error.\n\t\tWithPermission(std.Address, Permission, Args, func(Args))\n\n\t\t// AddUser adds a new user to the permissioner.\n\t\tAddUser(std.Address, ...Role) error\n\n\t\t// SetUserRoles sets the roles of a user.\n\t\tSetUserRoles(std.Address, ...Role) error\n\n\t\t// RemoveUser removes a user from the permissioner.\n\t\tRemoveUser(std.Address) (removed bool)\n\n\t\t// HasUser checks if a user exists.\n\t\tHasUser(std.Address) bool\n\n\t\t// UsersCount returns the total number of users the permissioner contains.\n\t\tUsersCount() int\n\n\t\t// IterateUsers iterates permissions' users.\n\t\tIterateUsers(start, count int, fn UsersIterFn) bool\n\t}\n)\n"},{"name":"permissions_default.gno","body":"package boards2\n\nimport (\n\t\"errors\"\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\t\"gno.land/r/sys/users\"\n)\n\n// DefaultPermissions manages users, roles and permissions.\ntype DefaultPermissions struct {\n\tsuperRole Role\n\tdao       *commondao.CommonDAO\n\tusers     *avl.Tree // string(std.Address) -\u003e []Role\n\troles     *avl.Tree // string(role) -\u003e []Permission\n}\n\n// NewDefaultPermissions creates a new permissions type.\n// This type is a default implementation to handle users, roles and permissions.\nfunc NewDefaultPermissions(dao *commondao.CommonDAO) *DefaultPermissions {\n\tif dao == nil {\n\t\tpanic(\"default permissions require a DAO\")\n\t}\n\n\treturn \u0026DefaultPermissions{\n\t\tdao:   dao,\n\t\troles: avl.NewTree(),\n\t\tusers: avl.NewTree(),\n\t}\n}\n\n// SetSuperRole assigns a super role.\n// A super role is one that have all permissions.\n// These type of role doesn't need to be mapped to any permission.\nfunc (dp *DefaultPermissions) SetSuperRole(r Role) {\n\tdp.superRole = r\n}\n\n// AddRole add a role with one or more assigned permissions.\nfunc (dp *DefaultPermissions) AddRole(r Role, p Permission, extra ...Permission) {\n\tdp.roles.Set(string(r), append([]Permission{p}, extra...))\n}\n\n// RoleExists checks if a role exists.\nfunc (dp DefaultPermissions) RoleExists(r Role) bool {\n\tif dp.superRole != \"\" \u0026\u0026 r == dp.superRole {\n\t\treturn true\n\t}\n\n\treturn dp.roles.Iterate(\"\", \"\", func(name string, _ interface{}) bool {\n\t\treturn Role(name) == r\n\t})\n}\n\n// GetUserRoles returns the list of roles assigned to a user.\nfunc (dp DefaultPermissions) GetUserRoles(user std.Address) []Role {\n\tv, found := dp.users.Get(user.String())\n\tif !found {\n\t\treturn nil\n\t}\n\treturn v.([]Role)\n}\n\n// HasRole checks if a user has a specific role assigned.\nfunc (dp DefaultPermissions) HasRole(user std.Address, r Role) bool {\n\tfor _, role := range dp.GetUserRoles(user) {\n\t\tif role == r {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// HasPermission checks if a user has a specific permission.\nfunc (dp DefaultPermissions) HasPermission(user std.Address, perm Permission) bool {\n\tfor _, r := range dp.GetUserRoles(user) {\n\t\tif dp.superRole == r {\n\t\t\treturn true\n\t\t}\n\n\t\tv, found := dp.roles.Get(string(r))\n\t\tif !found {\n\t\t\tcontinue\n\t\t}\n\n\t\tfor _, p := range v.([]Permission) {\n\t\t\tif p == perm {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// AddUser adds a new user to permissions.\nfunc (dp *DefaultPermissions) AddUser(user std.Address, roles ...Role) error {\n\tif dp.users.Has(user.String()) {\n\t\treturn errors.New(\"user already exists\")\n\t}\n\n\tdp.dao.Members().Add(user)\n\treturn dp.setUserRoles(user, roles...)\n}\n\n// SetUserRoles sets the roles of a user.\nfunc (dp *DefaultPermissions) SetUserRoles(user std.Address, roles ...Role) error {\n\tif !dp.users.Has(user.String()) {\n\t\treturn errors.New(\"user not found\")\n\t}\n\treturn dp.setUserRoles(user, roles...)\n}\n\n// RemoveUser removes a user from permissions.\nfunc (dp *DefaultPermissions) RemoveUser(user std.Address) bool {\n\t_, removed := dp.users.Remove(user.String())\n\tdp.dao.Members().Remove(user)\n\treturn removed\n}\n\n// HasUser checks if a user exists.\nfunc (dp DefaultPermissions) HasUser(user std.Address) bool {\n\treturn dp.users.Has(user.String())\n}\n\n// UsersCount returns the total number of users the permissioner contains.\nfunc (dp DefaultPermissions) UsersCount() int {\n\treturn dp.users.Size()\n}\n\n// IterateUsers iterates permissions' users.\nfunc (dp DefaultPermissions) IterateUsers(start, count int, fn UsersIterFn) bool {\n\treturn dp.users.IterateByOffset(start, count, func(k string, v interface{}) bool {\n\t\treturn fn(User{\n\t\t\tAddress: std.Address(k),\n\t\t\tRoles:   v.([]Role),\n\t\t})\n\t})\n}\n\n// WithPermission calls a callback when a user has a specific permission.\n// It panics on error or when a handler panics.\n// Callbacks are by default called when there is no handle registered for the permission.\nfunc (dp *DefaultPermissions) WithPermission(user std.Address, perm Permission, args Args, cb func(Args)) {\n\tif !dp.HasPermission(user, perm) || !dp.dao.Members().Has(user) {\n\t\tpanic(\"unauthorized\")\n\t}\n\n\tswitch perm {\n\tcase PermissionBoardCreate:\n\t\tdp.handleBoardCreate(args, cb)\n\tcase PermissionBoardRename:\n\t\tdp.handleBoardRename(args, cb)\n\tcase PermissionMemberInvite:\n\t\tdp.handleMemberInvite(args, cb)\n\tcase PermissionRoleChange:\n\t\tdp.handleRoleChange(args, cb)\n\tdefault:\n\t\tcb(args)\n\t}\n}\n\nfunc (dp *DefaultPermissions) setUserRoles(user std.Address, roles ...Role) error {\n\tfor _, r := range roles {\n\t\tif !dp.RoleExists(r) {\n\t\t\treturn errors.New(\"invalid role: \" + string(r))\n\t\t}\n\t}\n\n\tdp.users.Set(user.String(), append([]Role(nil), roles...))\n\treturn nil\n}\n\nfunc (DefaultPermissions) handleBoardCreate(args Args, cb func(Args)) {\n\tname, ok := args[0].(string)\n\tif !ok {\n\t\tpanic(\"expected board name to be a string\")\n\t}\n\n\tassertBoardNameIsNotAddress(name)\n\tassertBoardNameBelongsToCaller(name)\n\n\tcb(args)\n}\n\nfunc (DefaultPermissions) handleBoardRename(args Args, cb func(Args)) {\n\tnewName, ok := args[2].(string)\n\tif !ok {\n\t\tpanic(\"expected new board name to be a string\")\n\t}\n\n\tassertBoardNameIsNotAddress(newName)\n\tassertBoardNameBelongsToCaller(newName)\n\n\tcb(args)\n}\n\nfunc (dp DefaultPermissions) handleMemberInvite(args Args, cb func(Args)) {\n\t// Make sure that only owners invite other owners\n\trole, ok := args[1].(Role)\n\tif !ok {\n\t\tpanic(\"expected a valid new member role\")\n\t}\n\n\tif role == RoleOwner {\n\t\tif !dp.HasRole(std.PreviousRealm().Address(), RoleOwner) {\n\t\t\tpanic(\"only owners are allowed to invite other owners\")\n\t\t}\n\t}\n\n\tcb(args)\n}\n\nfunc (dp DefaultPermissions) handleRoleChange(args Args, cb func(Args)) {\n\t// Owners and Admins can change roles.\n\t// Admins should not be able to assign or remove the Owner role from members.\n\tif dp.HasRole(std.PreviousRealm().Address(), RoleAdmin) {\n\t\trole, ok := args[2].(Role)\n\t\tif !ok {\n\t\t\tpanic(\"expected a valid member role\")\n\t\t}\n\n\t\tif role == RoleOwner {\n\t\t\tpanic(\"admins are not allowed to promote members to Owner\")\n\t\t} else {\n\t\t\tmember, ok := args[1].(std.Address)\n\t\t\tif !ok {\n\t\t\t\tpanic(\"expected a valid member address\")\n\t\t\t}\n\n\t\t\tif dp.HasRole(member, RoleOwner) {\n\t\t\t\tpanic(\"admins are not allowed to remove the Owner role\")\n\t\t\t}\n\t\t}\n\t}\n\n\tcb(args)\n}\n\nfunc createDefaultPermissions(owner std.Address) *DefaultPermissions {\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.SetSuperRole(RoleOwner)\n\tperms.AddRole(RoleAdmin, PermissionBoardCreate)\n\tperms.AddUser(owner, RoleOwner)\n\treturn perms\n}\n\nfunc assertBoardNameIsNotAddress(s string) {\n\tif std.Address(s).IsValid() {\n\t\tpanic(\"addresses are not allowed as board name\")\n\t}\n}\n\nfunc assertBoardNameBelongsToCaller(name string) {\n\t// When the board name is the name of a registered user\n\t// check that caller is the owner of the name.\n\tuser, _ := users.ResolveName(name)\n\tif user != nil \u0026\u0026 user.Addr() != std.PreviousRealm().Address() {\n\t\tpanic(\"board name is a user name registered to a different user\")\n\t}\n}\n"},{"name":"permissions_default_test.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/urequire\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n)\n\nvar _ Permissions = (*DefaultPermissions)(nil)\n\nfunc TestDefaultPermissionsWithPermission(t *testing.T) {\n\tcases := []struct {\n\t\tname       string\n\t\tuser       std.Address\n\t\tpermission Permission\n\t\targs       Args\n\t\tsetup      func() *DefaultPermissions\n\t\terr        string\n\t\tcalled     bool\n\t}{\n\t\t{\n\t\t\tname:       \"ok\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\tcalled: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with arguments\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\targs:       Args{\"a\", \"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\tcalled: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"no permission\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"unauthorized\",\n\t\t},\n\t\t{\n\t\t\tname:       \"is not a DAO member\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t\terr: \"unauthorized\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar (\n\t\t\t\tcalled bool\n\t\t\t\targs   Args\n\t\t\t)\n\n\t\t\tperms := tc.setup()\n\t\t\tcallback := func(a Args) {\n\t\t\t\targs = a\n\t\t\t\tcalled = true\n\t\t\t}\n\n\t\t\ttestCaseFn := func() {\n\t\t\t\tperms.WithPermission(tc.user, tc.permission, tc.args, callback)\n\t\t\t}\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.PanicsWithMessage(t, tc.err, testCaseFn, \"panic\")\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NotPanics(t, testCaseFn, \"no panic\")\n\t\t\t}\n\n\t\t\turequire.Equal(t, tc.called, called, \"callback called\")\n\t\t\turequire.Equal(t, len(tc.args), len(args), \"args count\")\n\t\t\tfor i, a := range args {\n\t\t\t\tuassert.Equal(t, tc.args[i].(string), a.(string))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsGetUserRoles(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []string\n\t\tsetup func() *DefaultPermissions\n\t}{\n\t\t{\n\t\t\tname:  \"single role\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple roles\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\", \"foo\", \"bar\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddRole(\"bar\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\", \"foo\", \"bar\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"without roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"not a user\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple users\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"bar\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"admin\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\", \"admin\", \"bar\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\troles := perms.GetUserRoles(tc.user)\n\n\t\t\turequire.Equal(t, len(tc.roles), len(roles), \"user role count\")\n\t\t\tfor i, r := range roles {\n\t\t\t\tuassert.Equal(t, tc.roles[i], string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsHasRole(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\trole  Role\n\t\tsetup func() *DefaultPermissions\n\t\twant  bool\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"admin\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"ok with multiple roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"foo\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"user without roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"has no role\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.HasRole(tc.user, tc.role)\n\t\t\tuassert.Equal(t, got, tc.want)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsHasPermission(t *testing.T) {\n\tcases := []struct {\n\t\tname       string\n\t\tuser       std.Address\n\t\tpermission Permission\n\t\tsetup      func() *DefaultPermissions\n\t\twant       bool\n\t}{\n\t\t{\n\t\t\tname:       \"ok\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with multiple users\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with multiple roles\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"other\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddRole(\"baz\", \"other\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\", \"baz\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"no permission\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"other\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.HasPermission(tc.user, tc.permission)\n\t\t\tuassert.Equal(t, got, tc.want)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsAddUser(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []Role\n\t\tsetup func() *DefaultPermissions\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname:  \"single user\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple users\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"a\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"duplicated user\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"user already exists\",\n\t\t},\n\t\t{\n\t\t\tname:  \"duplicated user\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"foo\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"invalid role: foo\",\n\t\t},\n\t\t{\n\t\t\tname: \"already a DAO member\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(\n\t\t\t\t\tcommondao.New(commondao.WithMember(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")),\n\t\t\t\t)\n\t\t\t},\n\t\t\terr: \"member already exist\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\n\t\t\terr := perms.AddUser(tc.user, tc.roles...)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.True(t, err != nil, \"expected an error\")\n\t\t\t\tuassert.Equal(t, tc.err, err.Error())\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NoError(t, err)\n\t\t\t}\n\n\t\t\troles := perms.GetUserRoles(tc.user)\n\t\t\tuassert.Equal(t, len(tc.roles), len(roles))\n\t\t\tfor i, r := range roles {\n\t\t\t\turequire.Equal(t, string(tc.roles[i]), string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsSetUserRoles(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []Role\n\t\tsetup func() *DefaultPermissions\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname:  \"single role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple roles\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"b\", \"c\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddRole(\"c\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"duplicated role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"c\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddRole(\"c\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\", \"c\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"remove roles\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\", \"b\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"x\", \"a\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"invalid role: x\",\n\t\t},\n\t\t{\n\t\t\tname: \"user not found\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t\terr: \"user not found\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\n\t\t\terr := perms.SetUserRoles(tc.user, tc.roles...)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.True(t, err != nil, \"expected an error\")\n\t\t\t\tuassert.Equal(t, tc.err, err.Error())\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NoError(t, err)\n\t\t\t}\n\n\t\t\troles := perms.GetUserRoles(tc.user)\n\t\t\tuassert.Equal(t, len(tc.roles), len(roles))\n\t\t\tfor i, r := range roles {\n\t\t\t\turequire.Equal(t, string(tc.roles[i]), string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsRemoveUser(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\tsetup func() *DefaultPermissions\n\t\twant  bool\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"user not found\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.RemoveUser(tc.user)\n\t\t\tuassert.Equal(t, tc.want, got)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsIterateUsers(t *testing.T) {\n\tusers := []User{\n\t\t{\n\t\t\tAddress: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tRoles:   []Role{\"foo\"},\n\t\t},\n\t\t{\n\t\t\tAddress: \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\",\n\t\t\tRoles:   []Role{\"foo\", \"bar\"},\n\t\t},\n\t\t{\n\t\t\tAddress: \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\",\n\t\t\tRoles:   []Role{\"bar\"},\n\t\t},\n\t}\n\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.AddRole(\"foo\", \"perm1\")\n\tperms.AddRole(\"bar\", \"perm2\")\n\tfor _, u := range users {\n\t\tperms.AddUser(u.Address, u.Roles...)\n\t}\n\n\tcases := []struct {\n\t\tname               string\n\t\tstart, count, want int\n\t}{\n\t\t{\n\t\t\tname:  \"exceed users count\",\n\t\t\tcount: 50,\n\t\t\twant:  3,\n\t\t},\n\t\t{\n\t\t\tname:  \"exact users count\",\n\t\t\tcount: 3,\n\t\t\twant:  3,\n\t\t},\n\t\t{\n\t\t\tname:  \"two users\",\n\t\t\tstart: 1,\n\t\t\tcount: 2,\n\t\t\twant:  2,\n\t\t},\n\t\t{\n\t\t\tname:  \"one user\",\n\t\t\tstart: 1,\n\t\t\tcount: 1,\n\t\t\twant:  1,\n\t\t},\n\t\t{\n\t\t\tname:  \"no iteration\",\n\t\t\tstart: 50,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar i int\n\t\t\tperms.IterateUsers(0, len(users), func(u User) bool {\n\t\t\t\turequire.True(t, i \u003c len(users), \"expect iterator to respect number of users\")\n\t\t\t\tuassert.Equal(t, users[i].Address, u.Address)\n\n\t\t\t\turequire.Equal(t, len(users[i].Roles), len(u.Roles), \"expect number of roles to match\")\n\t\t\t\tfor j, r := range u.Roles {\n\t\t\t\t\tuassert.Equal(t, string(users[i].Roles[j]), string(u.Roles[j]))\n\t\t\t\t}\n\n\t\t\t\ti++\n\t\t\t})\n\n\t\t\tuassert.Equal(t, i, len(users), \"expect iterator to iterate all users\")\n\t\t})\n\t}\n}\n"},{"name":"post.gno","body":"package boards2\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nconst dateFormat = \"2006-01-02 3:04pm MST\"\n\ntype PostID uint64\n\nfunc (id PostID) String() string {\n\treturn strconv.Itoa(int(id))\n}\n\nfunc (id PostID) Key() string {\n\treturn padZero(uint64(id), 10)\n}\n\n// A Post is a \"thread\" or a \"reply\" depending on context.\n// A thread is a Post of a Board that holds other replies.\ntype Post struct {\n\tboard         *Board\n\tid            PostID\n\tcreator       std.Address\n\ttitle         string // optional\n\tbody          string\n\tisHidden      bool\n\tisReadonly    bool\n\treplies       avl.Tree // Post.id -\u003e *Post\n\trepliesAll    avl.Tree // Post.id -\u003e *Post (all replies, for top-level posts)\n\treposts       avl.Tree // Board.id -\u003e Post.id\n\tflags         []Flag\n\tthreadID      PostID  // original Post.id\n\tparentID      PostID  // parent Post.id (if reply or repost)\n\trepostBoardID BoardID // original Board.id (if repost)\n\trepostsCount  uint64\n\tcreatedAt     time.Time\n\tupdatedAt     time.Time\n}\n\nfunc newPost(board *Board, id PostID, creator std.Address, title, body string, threadID, parentID PostID, repostBoardID BoardID) *Post {\n\treturn \u0026Post{\n\t\tboard:         board,\n\t\tid:            id,\n\t\tcreator:       creator,\n\t\ttitle:         title,\n\t\tbody:          body,\n\t\treplies:       avl.Tree{},\n\t\trepliesAll:    avl.Tree{},\n\t\treposts:       avl.Tree{},\n\t\tthreadID:      threadID,\n\t\tparentID:      parentID,\n\t\trepostBoardID: repostBoardID,\n\t\tcreatedAt:     time.Now(),\n\t}\n}\n\nfunc (post *Post) IsRepost() bool {\n\treturn post.repostBoardID != 0\n}\n\nfunc (post *Post) IsThread() bool {\n\t// repost threads also have parent ID\n\treturn post.parentID == 0 || post.IsRepost()\n}\n\nfunc (post *Post) GetBoard() *Board {\n\treturn post.board\n}\n\nfunc (post *Post) GetPostID() PostID {\n\treturn post.id\n}\n\nfunc (post *Post) GetParentID() PostID {\n\treturn post.parentID\n}\n\nfunc (post *Post) GetRepostBoardID() BoardID {\n\treturn post.repostBoardID\n}\n\nfunc (post *Post) GetCreator() std.Address {\n\treturn post.creator\n}\n\nfunc (post *Post) GetTitle() string {\n\treturn post.title\n}\n\nfunc (post *Post) GetBody() string {\n\treturn post.body\n}\n\nfunc (post *Post) GetCreatedAt() time.Time {\n\treturn post.createdAt\n}\n\nfunc (post *Post) GetUpdatedAt() time.Time {\n\treturn post.updatedAt\n}\n\nfunc (post *Post) AddFlag(flag Flag) bool {\n\t// TODO: sort flags for fast search in case of big thresholds\n\tfor _, v := range post.flags {\n\t\tif v.User == flag.User {\n\t\t\treturn false\n\t\t}\n\t}\n\n\tpost.flags = append(post.flags, flag)\n\treturn true\n}\n\nfunc (post *Post) FlagsCount() int {\n\treturn len(post.flags)\n}\n\nfunc (post *Post) SetVisible(isVisible bool) {\n\tpost.isHidden = !isVisible\n}\n\nfunc (post *Post) IsHidden() bool {\n\treturn post.isHidden\n}\n\nfunc (post *Post) SetReadonly(isReadonly bool) {\n\tpost.isReadonly = isReadonly\n}\n\nfunc (post *Post) IsReadonly() bool {\n\treturn post.isReadonly\n}\n\nfunc (post *Post) AddReply(creator std.Address, body string) *Post {\n\tboard := post.board\n\tpid := board.incGetPostID()\n\tpKey := pid.Key()\n\treply := newPost(board, pid, creator, \"\", body, post.threadID, post.id, 0)\n\t// TODO: Figure out how to remove this redundancy of data \"replies==repliesAll\" in threads\n\tpost.replies.Set(pKey, reply)\n\tif post.threadID == post.id {\n\t\tpost.repliesAll.Set(pKey, reply)\n\t} else {\n\t\tthread, _ := board.GetThread(post.threadID)\n\t\tthread.repliesAll.Set(pKey, reply)\n\t}\n\treturn reply\n}\n\nfunc (post *Post) Update(title string, body string) {\n\tpost.title = title\n\tpost.body = body\n\tpost.updatedAt = time.Now()\n}\n\nfunc (post *Post) HasReplies() bool {\n\treturn post.replies.Size() \u003e 0\n}\n\nfunc (thread *Post) GetReply(pid PostID) (_ *Post, found bool) {\n\tv, found := thread.repliesAll.Get(pid.Key())\n\tif !found {\n\t\treturn nil, false\n\t}\n\treturn v.(*Post), true\n}\n\nfunc (post *Post) AddRepostTo(creator std.Address, repost *Post, dst *Board) {\n\tif !post.IsThread() {\n\t\tpanic(\"cannot repost non-thread post\")\n\t}\n\n\tpost.repostsCount++\n\tdst.threads.Set(repost.id.Key(), repost)\n\tpost.reposts.Set(dst.id.Key(), repost.id)\n}\n\nfunc (post *Post) DeleteReply(replyID PostID) error {\n\tif !post.IsThread() {\n\t\t// TODO: Allow removing replies from parent replies too\n\t\tpanic(\"cannot delete reply from a non-thread post\")\n\t}\n\n\tif post.id == replyID {\n\t\treturn errors.New(\"expected an ID of an inner reply\")\n\t}\n\n\tkey := replyID.Key()\n\tv, removed := post.repliesAll.Remove(key)\n\tif !removed {\n\t\treturn errors.New(\"reply not found in thread\")\n\t}\n\n\t// TODO: Shouldn't reply be hidden instead of deleted? Maybe replace reply by a deleted message.\n\treply := v.(*Post)\n\tif reply.parentID != post.id {\n\t\tparent, _ := post.GetReply(reply.parentID)\n\t\tparent.replies.Remove(key)\n\t} else {\n\t\tpost.replies.Remove(key)\n\t}\n\treturn nil\n}\n\nfunc (post *Post) GetSummary() string {\n\treturn summaryOf(post.body, 80)\n}\n\nfunc (post *Post) GetURL() string {\n\tif post.IsThread() {\n\t\treturn post.board.GetURLFromThreadID(post.id)\n\t}\n\treturn post.board.GetURLFromReplyID(post.threadID, post.id)\n}\n\nfunc (post *Post) GetReplyFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\"CreateReply\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"replyID\", \"0\",\n\t\t)\n\t}\n\treturn txlink.Call(\"CreateReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t)\n}\n\nfunc (post *Post) GetRepostFormURL() string {\n\treturn txlink.Call(\"CreateRepost\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.id.String(),\n\t)\n}\n\nfunc (post *Post) GetDeleteFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\"DeleteThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t)\n\t}\n\treturn txlink.Call(\"DeleteReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t)\n}\n\nfunc (post *Post) GetEditFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\"EditThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"title\", post.GetTitle(),\n\t\t\t\"body\", post.GetBody(),\n\t\t)\n\t}\n\n\treturn txlink.Call(\"EditReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t\t\"body\", post.GetBody(),\n\t)\n}\n\nfunc (post *Post) GetFlagFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\"FlagThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t)\n\t}\n\n\treturn txlink.Call(\"FlagReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t)\n}\n\nfunc (post *Post) RenderSummary() string {\n\tvar (\n\t\tb       strings.Builder\n\t\tpostURL = post.GetURL()\n\t\ttitle   = post.title\n\t)\n\n\tb.WriteString(\"## ≡ \" + newLink(summaryOf(title, 80), postURL) + \"\\n\\n\")\n\tb.WriteString(\"Created by \" + newUserLink(post.creator) + \" on \" + post.createdAt.Format(dateFormat))\n\tb.WriteString(\"  \\n\")\n\tb.WriteString(strconv.Itoa(post.repliesAll.Size()) + \" replies • \")\n\tb.WriteString(strconv.Itoa(post.reposts.Size()) + \" reposts\" + \"\\n\")\n\treturn b.String()\n}\n\nfunc (post *Post) renderSourcePost(indent string) (string, *Post) {\n\tif !post.IsRepost() {\n\t\treturn \"\", nil\n\t}\n\n\tindent += \"\u003e \"\n\n\t// TODO: figure out a way to decouple posts from a global storage.\n\tboard, ok := getBoard(post.repostBoardID)\n\tif !ok {\n\t\treturn indentBody(indent, \"*⚠ Source board has been deleted*\\n\\n\"), nil\n\t}\n\n\tsrcPost, ok := board.GetThread(post.parentID)\n\tif !ok {\n\t\treturn indentBody(indent, \"*⚠ Source post has been deleted*\\n\\n\"), nil\n\t}\n\n\tif srcPost.isHidden {\n\t\treturn indentBody(indent, \"*⚠ Source post has been flagged as inappropriate*\\n\\n\"), nil\n\t}\n\n\treturn indentBody(indent, srcPost.GetSummary()) + \"\\n\\n\", srcPost\n}\n\n// renderPostContent renders post text content (including repost body).\n// Function will dump a predefined message instead of a body if post is hidden.\nfunc (post *Post) renderPostContent(sb *strings.Builder, indent string, levels int) {\n\tif post.isHidden {\n\t\t// Flagged comment should be hidden, but replies still visible (see: #3480)\n\t\t// Flagged threads will be hidden by render function caller.\n\t\tsb.WriteString(indentBody(indent, \"_⚠ Reply is hidden as it has been flagged as inappropriate_\"))\n\t\tsb.WriteString(\"\\n\")\n\t\treturn\n\t}\n\n\tsrcContent, srcPost := post.renderSourcePost(indent)\n\tif post.IsRepost() \u0026\u0026 srcPost != nil {\n\t\tsb.WriteString(\"  \\nThis thread is a repost of [another thread](\" + srcPost.GetURL() + \"): \\n\")\n\t}\n\n\tsb.WriteString(srcContent)\n\n\tif post.IsRepost() \u0026\u0026 srcPost == nil \u0026\u0026 len(post.body) \u003e 0 {\n\t\t// Add a newline to separate source deleted message from repost body content\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\tsb.WriteString(indentBody(indent, post.body))\n\tsb.WriteString(\"\\n\")\n\n\tif post.IsThread() {\n\t\t// Split content and controls for threads.\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\t// Buttons \u0026 counters\n\tsb.WriteString(indent)\n\tif !post.IsThread() {\n\t\tsb.WriteString(\"  \\n\")\n\t\tsb.WriteString(indent)\n\t}\n\n\tsb.WriteString(\"Created by \")\n\tsb.WriteString(newUserLink(post.creator))\n\tsb.WriteString(\" on \")\n\tsb.WriteString(post.createdAt.Format(dateFormat))\n\n\t// Add a reply view link to each top level reply\n\tif !post.IsThread() {\n\t\tsb.WriteString(\", \")\n\t\tsb.WriteString(newLink(\"#\"+post.id.String(), post.GetURL()))\n\t}\n\n\tif post.repostsCount \u003e 0 {\n\t\tsb.WriteString(\", \")\n\t\tsb.WriteString(strconv.FormatUint(post.repostsCount, 10))\n\t\tsb.WriteString(\" repost(s)\")\n\t}\n\n\tsb.WriteString(\"  \\n\")\n\tsb.WriteString(newLink(\"Flag\", post.GetFlagFormURL()))\n\n\tif post.IsThread() {\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Repost\", post.GetRepostFormURL()))\n\t}\n\n\tisReadonly := post.IsReadonly() || post.GetBoard().IsReadonly()\n\tif !isReadonly {\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Reply\", post.GetReplyFormURL()))\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Edit\", post.GetEditFormURL()))\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Delete\", post.GetDeleteFormURL()))\n\t}\n\n\tif levels == 0 {\n\t\tsb.WriteString(\" • \")\n\t\tif post.IsThread() {\n\t\t\tsb.WriteString(newLink(\"Show all Replies\", post.board.GetURLFromThreadID(post.GetPostID())))\n\t\t} else {\n\t\t\tsb.WriteString(newLink(\"View Thread\", post.board.GetURLFromThreadID(post.threadID)))\n\t\t}\n\t}\n\n\tsb.WriteString(\" \\n\")\n}\n\nfunc (post *Post) Render(path string, indent string, levels int) string {\n\tif post == nil {\n\t\treturn \"nil post\"\n\t}\n\n\t// TODO: pass a builder as arg into Render.\n\tvar sb strings.Builder\n\n\t// Thread reposts might not have a title, if so get title from source thread\n\ttitle := post.title\n\tif post.IsRepost() \u0026\u0026 title == \"\" {\n\t\tif board, ok := getBoard(post.repostBoardID); ok {\n\t\t\tif src, ok := board.GetThread(post.parentID); ok {\n\t\t\t\ttitle = src.GetTitle()\n\t\t\t}\n\t\t}\n\t}\n\n\tsb.WriteString(indent)\n\tsb.WriteString(\"## \" + title + \"\\n\")\n\tsb.WriteString(indent + \"\\n\")\n\n\tpost.renderPostContent(\u0026sb, indent, levels)\n\n\tif post.replies.Size() == 0 {\n\t\treturn sb.String()\n\t}\n\n\t// XXX: This triggers for reply views\n\tif levels == 0 {\n\t\tsb.WriteString(indent + \"\\n\")\n\t\tsb.WriteString(indent)\n\t\tsb.WriteString(\"\\n\")\n\t\treturn sb.String()\n\t}\n\n\tif path != \"\" {\n\t\tsb.WriteString(post.renderTopLevelReplies(path, indent, levels-1))\n\t} else {\n\t\tsb.WriteString(post.renderSubReplies(indent, levels-1))\n\t}\n\treturn sb.String()\n}\n\nfunc (post *Post) renderTopLevelReplies(path, indent string, levels int) string {\n\tp, err := pager.New(path, post.replies.Size(), pager.WithPageSize(pageSizeReplies))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tvar (\n\t\tb              strings.Builder\n\t\tcommentsIndent = indent + \"\u003e \"\n\t)\n\n\trender := func(_ string, v any) bool {\n\t\treply := v.(*Post)\n\n\t\tb.WriteString(indent)\n\t\tb.WriteString(\"\\n\")\n\t\tb.WriteString(reply.Render(\"\", commentsIndent, levels-1))\n\t\treturn false\n\t}\n\n\tb.WriteString(\"\\n_Sort by \")\n\tr := realmpath.Parse(path)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tb.WriteString(newLink(\"newest first\", r.String()))\n\t\tb.WriteString(\"_\\n\")\n\t\tpost.replies.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tb.WriteString(newLink(\"oldest first\", r.String()))\n\t\tb.WriteString(\"_\\n\")\n\t\tpost.replies.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tb.WriteString(\"\\n---\\n\")\n\t\tb.WriteString(pager.Picker(p))\n\t}\n\n\treturn b.String()\n}\n\nfunc (post *Post) renderSubReplies(indent string, levels int) string {\n\tvar (\n\t\tb              strings.Builder\n\t\tcommentsIndent = indent + \"\u003e \"\n\t)\n\n\tpost.replies.Iterate(\"\", \"\", func(_ string, v any) bool {\n\t\treply := v.(*Post)\n\n\t\tb.WriteString(indent)\n\t\tb.WriteString(\"\\n\")\n\t\tb.WriteString(reply.Render(\"\", commentsIndent, levels-1))\n\t\treturn false\n\t})\n\n\treturn b.String()\n}\n\nfunc (post *Post) RenderInner() string {\n\tif post.IsThread() {\n\t\tpanic(\"unexpected thread\")\n\t}\n\n\tvar (\n\t\ts         string\n\t\tthreadID  = post.threadID\n\t\tthread, _ = post.board.GetThread(threadID) // TODO: This seems redundant (post == thread)\n\t)\n\n\t// Fully render parent if it's not a repost.\n\tif !post.IsRepost() {\n\t\tvar (\n\t\t\tparent   *Post\n\t\t\tparentID = post.parentID\n\t\t)\n\n\t\tif thread.id == parentID {\n\t\t\tparent = thread\n\t\t} else {\n\t\t\tparent, _ = thread.GetReply(parentID)\n\t\t}\n\n\t\ts += parent.Render(\"\", \"\", 0) + \"\\n\"\n\t}\n\n\ts += post.Render(\"\", \"\u003e \", 5)\n\treturn s\n}\n"},{"name":"post_test.gno","body":"package boards2\n\nimport (\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nfunc TestPostUpdate(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tboard := newBoard(1, \"test123\", addr, perms)\n\tcreator := testutils.TestAddress(\"creator\")\n\tpost := newPost(board, 1, creator, \"Title\", \"Body\", 1, 0, 0)\n\ttitle := \"New Title\"\n\tbody := \"New body\"\n\n\tpost.Update(title, body)\n\n\tuassert.Equal(t, title, post.GetTitle())\n\tuassert.Equal(t, body, post.GetBody())\n\tuassert.False(t, post.GetUpdatedAt().IsZero())\n}\n\nfunc TestPostAddFlag(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tpost := createTestThread(t)\n\n\tflag := Flag{\n\t\tUser:   addr,\n\t\tReason: \"foobar\",\n\t}\n\tuassert.True(t, post.AddFlag(flag))\n\tuassert.False(t, post.AddFlag(flag), \"should reject flag from duplicate user\")\n\tuassert.Equal(t, post.FlagsCount(), 1)\n}\n\nfunc TestPostSetVisible(t *testing.T) {\n\tpost := createTestThread(t)\n\tuassert.False(t, post.IsHidden(), \"post should be visible by default\")\n\n\tpost.SetVisible(false)\n\tuassert.True(t, post.IsHidden(), \"post should be hidden\")\n\n\tpost.SetVisible(true)\n\tuassert.False(t, post.IsHidden(), \"post should be visible\")\n}\n\nfunc TestPostAddRepostTo(t *testing.T) {\n\t// TODO: Improve this unit test\n\taddr := testutils.TestAddress(\"creatorDstBoard\")\n\tperms := createDefaultBoardPermissions(addr)\n\tcases := []struct {\n\t\tname, title, body string\n\t\tdstBoard          *Board\n\t\tthread            *Post\n\t\tsetup             func() *Post\n\t\terr               string\n\t}{\n\t\t{\n\t\t\tname:     \"repost thread\",\n\t\t\ttitle:    \"Repost Title\",\n\t\t\tbody:     \"Repost body\",\n\t\t\tdstBoard: newBoard(42, \"dst123\", addr, perms),\n\t\t\tsetup:    func() *Post { return createTestThread(t) },\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid repost from reply\",\n\t\t\tsetup: func() *Post { return createTestReply(t) },\n\t\t\terr:   \"cannot repost non-thread post\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar (\n\t\t\t\trepost  *Post\n\t\t\t\tcreator = testutils.TestAddress(\"repostCreator\")\n\t\t\t\tthread  = tc.setup()\n\t\t\t)\n\n\t\t\tcreateRepost := func() {\n\t\t\t\tvar repostId PostID\n\t\t\t\tif tc.dstBoard != nil {\n\t\t\t\t\trepostId = tc.dstBoard.incGetPostID()\n\t\t\t\t}\n\n\t\t\t\trepost = newPost(tc.dstBoard, repostId, creator, tc.title, tc.body, repostId, thread.GetPostID(), thread.GetBoard().GetID())\n\t\t\t\tthread.AddRepostTo(creator, repost, tc.dstBoard)\n\t\t\t}\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\tuassert.PanicsWithMessage(t, tc.err, createRepost)\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\tuassert.NotPanics(t, createRepost)\n\t\t\t}\n\n\t\t\tr, found := tc.dstBoard.GetThread(repost.GetPostID())\n\t\t\tuassert.True(t, found)\n\t\t\tuassert.True(t, repost == r)\n\t\t\tuassert.Equal(t, tc.title, repost.GetTitle())\n\t\t\tuassert.Equal(t, tc.body, repost.GetBody())\n\t\t\tuassert.Equal(t, uint(thread.GetBoard().GetID()), uint(repost.GetRepostBoardID()))\n\t\t})\n\t}\n}\n\nfunc TestNewThread(t *testing.T) {\n\tcreator := testutils.TestAddress(\"creator\")\n\tmember := testutils.TestAddress(\"member\")\n\ttitle := \"Test Title\"\n\tbody := strings.Repeat(\"A\", 82)\n\tboardID := BoardID(1)\n\tthreadID := PostID(42)\n\tboardName := \"test123\"\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(boardID, boardName, creator, perms)\n\turl := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc1:%s/%d\",\n\t\tboardName,\n\t\tuint(threadID),\n\t)\n\treplyURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc1$help\u0026func=CreateReply\u0026boardID=%d\u0026replyID=0\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\teditURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc1$help\u0026func=EditThread\u0026boardID=%d\u0026body=%s\u0026threadID=%d\u0026title=%s\",\n\t\tuint(boardID),\n\t\tbody,\n\t\tuint(threadID),\n\t\tstrings.ReplaceAll(title, \" \", \"+\"),\n\t)\n\trepostURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc1$help\u0026func=CreateRepost\u0026boardID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\tdeleteURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc1$help\u0026func=DeleteThread\u0026boardID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\tflagURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc1$help\u0026func=FlagThread\u0026boardID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\n\tthread := newPost(board, threadID, creator, title, body, threadID, 0, 0)\n\n\tuassert.True(t, thread.IsThread())\n\tuassert.Equal(t, uint(threadID), uint(thread.GetPostID()))\n\tuassert.False(t, thread.GetCreatedAt().IsZero())\n\tuassert.True(t, thread.GetUpdatedAt().IsZero())\n\tuassert.Equal(t, title, thread.GetTitle())\n\tuassert.Equal(t, body[:77]+\"...\", thread.GetSummary())\n\tuassert.False(t, thread.HasReplies())\n\tuassert.Equal(t, url, thread.GetURL())\n\tuassert.Equal(t, replyURL, thread.GetReplyFormURL())\n\tuassert.Equal(t, editURL, thread.GetEditFormURL())\n\tuassert.Equal(t, repostURL, thread.GetRepostFormURL())\n\tuassert.Equal(t, deleteURL, thread.GetDeleteFormURL())\n\tuassert.Equal(t, flagURL, thread.GetFlagFormURL())\n}\n\nfunc TestThreadAddReply(t *testing.T) {\n\treplier := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\tthreadID := uint(thread.GetPostID())\n\tbody := \"A reply\"\n\n\treply := thread.AddReply(replier, body)\n\n\tr, found := thread.GetReply(reply.GetPostID())\n\tuassert.True(t, found)\n\tuassert.True(t, reply == r)\n\tuassert.Equal(t, threadID+1, uint(reply.GetPostID()))\n\tuassert.Equal(t, reply.GetCreator(), replier)\n\tuassert.Equal(t, reply.GetBody(), body)\n\tuassert.True(t, thread.HasReplies())\n}\n\nfunc TestThreadGetReply(t *testing.T) {\n\tcases := []struct {\n\t\tname   string\n\t\tthread *Post\n\t\tsetup  func(thread *Post) (replyID PostID)\n\t\tfound  bool\n\t}{\n\t\t{\n\t\t\tname:   \"found\",\n\t\t\tthread: createTestThread(t),\n\t\t\tsetup: func(thread *Post) PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t\tfound: true,\n\t\t},\n\t\t{\n\t\t\tname:   \"not found\",\n\t\t\tthread: createTestThread(t),\n\t\t\tsetup:  func(*Post) PostID { return 42 },\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup(tc.thread)\n\n\t\t\treply, found := tc.thread.GetReply(replyID)\n\n\t\t\tuassert.Equal(t, tc.found, found)\n\t\t\tif reply != nil {\n\t\t\t\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestThreadDeleteReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tcases := []struct {\n\t\tname  string\n\t\tsetup func() PostID\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"ok nested\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.AddReply(testutils.TestAddress(\"replier2\"), \"\").GetPostID()\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid\",\n\t\t\tsetup: func() PostID { return thread.GetPostID() },\n\t\t\terr:   \"expected an ID of an inner reply\",\n\t\t},\n\t\t{\n\t\t\tname:  \"not found\",\n\t\t\tsetup: func() PostID { return 42 },\n\t\t\terr:   \"reply not found in thread\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup()\n\n\t\t\terr := thread.DeleteReply(replyID)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\tuassert.ErrorContains(t, err, tc.err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tuassert.NoError(t, err)\n\t\t\t_, found := thread.GetReply(replyID)\n\t\t\tuassert.False(t, found)\n\t\t})\n\t}\n}\n\nfunc TestThreadRenderSummary(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestThreadRender(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestThreadRenderInner(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestNewReply(t *testing.T) {\n\tcreator := testutils.TestAddress(\"creator\")\n\tmember := testutils.TestAddress(\"member\")\n\tbody := strings.Repeat(\"A\", 82)\n\tboardID := BoardID(1)\n\tthreadID := PostID(42)\n\tparentID := PostID(1)\n\treplyID := PostID(2)\n\tboardName := \"test123\"\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(boardID, boardName, creator, perms)\n\turl := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc1:%s/%d/%d\",\n\t\tboardName,\n\t\tuint(threadID),\n\t\tuint(replyID),\n\t)\n\treplyURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc1$help\u0026func=CreateReply\u0026boardID=%d\u0026replyID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(replyID),\n\t\tuint(threadID),\n\t)\n\tdeleteURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc1$help\u0026func=DeleteReply\u0026boardID=%d\u0026replyID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(replyID),\n\t\tuint(threadID),\n\t)\n\n\treply := newPost(board, replyID, creator, \"\", body, threadID, parentID, 0)\n\n\tuassert.False(t, reply.IsThread())\n\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\tuassert.False(t, reply.GetCreatedAt().IsZero())\n\tuassert.True(t, reply.GetUpdatedAt().IsZero())\n\tuassert.False(t, reply.HasReplies())\n\tuassert.Equal(t, body[:77]+\"...\", reply.GetSummary())\n\tuassert.Equal(t, url, reply.GetURL())\n\tuassert.Equal(t, replyURL, reply.GetReplyFormURL())\n\tuassert.Equal(t, deleteURL, reply.GetDeleteFormURL())\n}\n\nfunc TestReplyAddReply(t *testing.T) {\n\treplier := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"parentReplier\"), \"\")\n\tthreadID := uint(thread.GetPostID())\n\tparentReplyID := uint(parentReply.GetPostID())\n\tbody := \"A child reply\"\n\n\treply := parentReply.AddReply(replier, body)\n\n\tr, found := thread.GetReply(reply.GetPostID())\n\tuassert.True(t, found)\n\tuassert.True(t, reply == r)\n\tuassert.Equal(t, parentReplyID, uint(reply.GetParentID()))\n\tuassert.Equal(t, parentReplyID+1, uint(reply.GetPostID()))\n\tuassert.Equal(t, reply.GetCreator(), replier)\n\tuassert.Equal(t, reply.GetBody(), body)\n\tuassert.False(t, reply.HasReplies())\n\tuassert.True(t, parentReply.HasReplies())\n}\n\nfunc TestReplyGetReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"parentReplier\"), \"\")\n\tcases := []struct {\n\t\tname  string\n\t\tsetup func() PostID\n\t\tfound bool\n\t}{\n\t\t{\n\t\t\tname: \"found\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := parentReply.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t\tfound: true,\n\t\t},\n\t\t{\n\t\t\tname:  \"not found\",\n\t\t\tsetup: func() PostID { return 42 },\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup()\n\n\t\t\treply, found := thread.GetReply(replyID)\n\n\t\t\tuassert.Equal(t, tc.found, found)\n\t\t\tif reply != nil {\n\t\t\t\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestReplyDeleteReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\treply := parentReply.AddReply(testutils.TestAddress(\"replier2\"), \"\")\n\n\t// NOTE: Deleting a reply from a parent reply should eventually be suported\n\tuassert.PanicsWithMessage(t, \"cannot delete reply from a non-thread post\", func() {\n\t\tparentReply.DeleteReply(reply.GetPostID())\n\t})\n}\n\nfunc TestReplyRender(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc createTestThread(t *testing.T) *Post {\n\tt.Helper()\n\n\tcreator := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(1, \"test_board_123\", creator, perms)\n\treturn board.AddThread(creator, \"Title\", \"Body\")\n}\n\nfunc createTestReply(t *testing.T) *Post {\n\tt.Helper()\n\n\tcreator := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\treturn thread.AddReply(creator, \"Test message\")\n}\n"},{"name":"public.gno","body":"package boards2\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nconst (\n\t// MaxBoardNameLength defines the maximum length allowed for board names.\n\tMaxBoardNameLength = 50\n\n\t// MaxThreadTitleLength defines the maximum length allowed for thread titles.\n\tMaxThreadTitleLength = 100\n\n\t// MaxReplyLength defines the maximum length allowed for replies.\n\tMaxReplyLength = 300\n)\n\nvar (\n\treBoardName = regexp.MustCompile(`(?i)^[a-z]+[a-z0-9_\\-]{2,50}$`)\n\n\t// Minimalistic Markdown line prefix checks that if allowed would\n\t// break the current UI when submitting a reply. It denies replies\n\t// with headings, blockquotes or horizontal lines.\n\treDeniedReplyLinePrefixes = regexp.MustCompile(`(?m)^\\s*(#|---|\u003e)+`)\n)\n\n// SetHelp sets or updates boards realm help content.\nfunc SetHelp(content string) {\n\tcontent = strings.TrimSpace(content)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{content}\n\tgPerms.WithPermission(caller, PermissionRealmHelp, args, func(Args) {\n\t\tgHelp = content\n\t})\n}\n\n// SetPermissions sets a permissions implementation for boards2 realm or a board.\nfunc SetPermissions(bid BoardID, p Permissions) {\n\tassertRealmIsNotLocked()\n\n\tif p == nil {\n\t\tpanic(\"permissions is required\")\n\t}\n\n\tif bid != 0 {\n\t\tassertBoardExists(bid)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{bid}\n\tgPerms.WithPermission(caller, PermissionPermissionsUpdate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\n\t\t// When board ID is zero it means that realm permissions are being updated\n\t\tif bid == 0 {\n\t\t\tgPerms = p\n\n\t\t\tstd.Emit(\n\t\t\t\t\"RealmPermissionsUpdated\",\n\t\t\t\t\"caller\", caller.String(),\n\t\t\t)\n\t\t\treturn\n\t\t}\n\n\t\t// Otherwise update the permissions of a single board\n\t\tboard := mustGetBoard(bid)\n\t\tboard.perms = p\n\n\t\tstd.Emit(\n\t\t\t\"BoardPermissionsUpdated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", bid.String(),\n\t\t)\n\t})\n}\n\n// SetRealmNotice sets a notice to be displayed globally by the realm.\n// An empty message removes the realm notice.\nfunc SetRealmNotice(message string) {\n\tmessage = strings.TrimSpace(message)\n\tcaller := std.PreviousRealm().Address()\n\tgPerms.WithPermission(caller, PermissionRealmNotice, nil, func(Args) {\n\t\tgNotice = message\n\n\t\tstd.Emit(\n\t\t\t\"RealmNoticeChanged\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"message\", message,\n\t\t)\n\t})\n}\n\n// GetBoardIDFromName searches a board by name and returns it's ID.\nfunc GetBoardIDFromName(name string) (_ BoardID, found bool) {\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\treturn 0, false\n\t}\n\treturn v.(*Board).id, true\n}\n\n// CreateBoard creates a new board.\nfunc CreateBoard(name string) BoardID {\n\tassertRealmIsNotLocked()\n\n\tname = strings.TrimSpace(name)\n\tassertIsValidBoardName(name)\n\tassertBoardNameNotExists(name)\n\n\tcaller := std.PreviousRealm().Address()\n\tid := incGetBoardID()\n\targs := Args{name, id}\n\tgPerms.WithPermission(caller, PermissionBoardCreate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardNameNotExists(name)\n\n\t\tperms := createDefaultBoardPermissions(caller)\n\t\tboard := newBoard(id, name, caller, perms)\n\t\tgBoardsByID.Set(id.Key(), board)\n\t\tgBoardsByName.Set(name, board)\n\n\t\tstd.Emit(\n\t\t\t\"BoardCreated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", id.String(),\n\t\t\t\"name\", name,\n\t\t)\n\t})\n\treturn id\n}\n\n// RenameBoard changes the name of an existing board.\n//\n// A history of previous board names is kept when boards are renamed.\n// Because of that boards are also accesible using previous name(s).\nfunc RenameBoard(name, newName string) {\n\tassertRealmIsNotLocked()\n\n\tnewName = strings.TrimSpace(newName)\n\tassertIsValidBoardName(newName)\n\tassertBoardNameNotExists(newName)\n\n\tboard := mustGetBoardByName(name)\n\tassertBoardIsNotFrozen(board)\n\n\tbid := board.GetID()\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{bid, name, newName}\n\tboard.perms.WithPermission(caller, PermissionBoardRename, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardNameNotExists(newName)\n\n\t\tboard := mustGetBoard(bid)\n\t\tboard.aliases = append(board.aliases, board.name)\n\t\tboard.name = newName\n\n\t\t// Index board for the new name keeping previous indexes for older names\n\t\tgBoardsByName.Set(newName, board)\n\n\t\tstd.Emit(\n\t\t\t\"BoardRenamed\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", bid.String(),\n\t\t\t\"name\", name,\n\t\t\t\"newName\", newName,\n\t\t)\n\t})\n}\n\n// CreateThread creates a new thread within a board.\nfunc CreateThread(boardID BoardID, title, body string) PostID {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tbody = strings.TrimSpace(body)\n\tassertBodyIsNotEmpty(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionThreadCreate)\n\n\tthread := board.AddThread(caller, title, body)\n\n\tstd.Emit(\n\t\t\"ThreadCreated\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", thread.GetPostID().String(),\n\t\t\"title\", title,\n\t)\n\n\treturn thread.id\n}\n\n// CreateReply creates a new comment or reply within a thread.\n//\n// The value of `replyID` is only required when creating a reply of another reply.\nfunc CreateReply(boardID BoardID, threadID, replyID PostID, body string) PostID {\n\tassertRealmIsNotLocked()\n\n\tbody = strings.TrimSpace(body)\n\tassertReplyBodyIsValid(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionReplyCreate)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\tassertThreadIsNotFrozen(thread)\n\n\tvar reply *Post\n\tif replyID == 0 {\n\t\t// When the parent reply is the thread just add reply to thread\n\t\treply = thread.AddReply(caller, body)\n\t} else {\n\t\t// Try to get parent reply and add a new child reply\n\t\tparent := mustGetReply(thread, replyID)\n\t\tif parent.IsHidden() || parent.IsReadonly() {\n\t\t\tpanic(\"replying to a hidden or frozen reply is not allowed\")\n\t\t}\n\n\t\treply = parent.AddReply(caller, body)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyCreate\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", reply.GetPostID().String(),\n\t)\n\n\treturn reply.id\n}\n\n// CreateRepost reposts a thread into another board.\nfunc CreateRepost(boardID BoardID, threadID PostID, title, body string, dstBoardID BoardID) PostID {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tcaller := std.PreviousRealm().Address()\n\tdst := mustGetBoard(dstBoardID)\n\tassertBoardIsNotFrozen(dst)\n\tassertHasBoardPermission(dst, caller, PermissionThreadRepost)\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\tif thread.IsRepost() {\n\t\tpanic(\"reposting a thread that is a repost is not allowed\")\n\t}\n\n\trepostId := dst.incGetPostID()\n\tbody = strings.TrimSpace(body)\n\trepost := newPost(dst, repostId, caller, title, body, repostId, thread.GetPostID(), thread.GetBoard().GetID())\n\tthread.AddRepostTo(caller, repost, dst)\n\n\tstd.Emit(\n\t\t\"Repost\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"destinationBoardID\", dstBoardID.String(),\n\t\t\"title\", title,\n\t)\n\n\treturn repostId\n}\n\n// DeleteThread deletes a thread from a board.\n//\n// Threads can be deleted by the users who created them or otherwise by users with special permissions.\nfunc DeleteThread(boardID BoardID, threadID PostID) {\n\t// Council members should always be able to delete\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner) // TODO: Add DeleteThread filetest cases for realm owners\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\n\tif !isRealmOwner {\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertThreadIsNotFrozen(thread)\n\n\t\tif caller != thread.GetCreator() {\n\t\t\tassertHasBoardPermission(board, caller, PermissionThreadDelete)\n\t\t}\n\t}\n\n\t// Hard delete thread and all its replies\n\tboard.DeleteThread(threadID)\n\n\tstd.Emit(\n\t\t\"ThreadDeleted\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t)\n}\n\n// DeleteReply deletes a reply from a thread.\n//\n// Replies can be deleted by the users who created them or otherwise by users with special permissions.\n// Soft deletion is used when the deleted reply contains sub replies, in which case the reply content\n// is replaced by a text informing that reply has been deleted to avoid deleting sub-replies.\nfunc DeleteReply(boardID BoardID, threadID, replyID PostID) {\n\t// Council members should always be able to delete\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner) // TODO: Add DeleteReply filetest cases for realm owners\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\treply := mustGetReply(thread, replyID)\n\n\tif !isRealmOwner {\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertThreadIsNotFrozen(thread)\n\t\tassertReplyIsVisible(reply)\n\t\tassertReplyIsNotFrozen(reply)\n\n\t\tif caller != reply.GetCreator() {\n\t\t\tassertHasBoardPermission(board, caller, PermissionReplyDelete)\n\t\t}\n\t}\n\n\t// Soft delete reply by changing its body when it contains\n\t// sub-replies, otherwise hard delete it.\n\tif reply.HasReplies() {\n\t\treply.Update(reply.GetTitle(), \"This reply has been deleted\")\n\t} else {\n\t\tthread.DeleteReply(replyID)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyDeleted\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t)\n}\n\n// EditThread updates the title and body of thread.\n//\n// Threads can be updated by the users who created them or otherwise by users with special permissions.\nfunc EditThread(boardID BoardID, threadID PostID, title, body string) {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\tbody = strings.TrimSpace(body)\n\tif !thread.IsRepost() {\n\t\tassertBodyIsNotEmpty(body)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tif caller != thread.GetCreator() {\n\t\tassertHasBoardPermission(board, caller, PermissionThreadEdit)\n\t}\n\n\tthread.Update(title, body)\n\n\tstd.Emit(\n\t\t\"ThreadEdited\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"title\", title,\n\t)\n}\n\n// EditReply updates the body of comment or reply.\n//\n// Replies can be updated only by the users who created them.\nfunc EditReply(boardID BoardID, threadID, replyID PostID, body string) {\n\tassertRealmIsNotLocked()\n\n\tbody = strings.TrimSpace(body)\n\tassertReplyBodyIsValid(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\tassertReplyIsNotFrozen(reply)\n\n\tcaller := std.PreviousRealm().Address()\n\tif caller != reply.GetCreator() {\n\t\tpanic(\"only the reply creator is allowed to edit it\")\n\t}\n\n\treply.Update(\"\", body)\n\n\tstd.Emit(\n\t\t\"ReplyEdited\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"body\", body,\n\t)\n}\n\n// InviteMember adds a member to the realm or to a boards.\n//\n// A role can optionally be specified to be assigned to the new member.\n// Board ID is only required when inviting a member to a board.\nfunc InviteMember(boardID BoardID, user std.Address, role Role) {\n\tassertMembersUpdateIsEnabled(boardID)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{user, role}\n\tperms.WithPermission(caller, PermissionMemberInvite, args, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif err := perms.AddUser(user, role); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"MemberInvited\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", user.String(),\n\t\t\t\"role\", string(role),\n\t\t)\n\t})\n}\n\n// RemoveMember removes a member from the realm or a boards.\n//\n// Board ID is only required when removing a member from board.\nfunc RemoveMember(boardID BoardID, member std.Address) {\n\tassertMembersUpdateIsEnabled(boardID)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\tperms.WithPermission(caller, PermissionMemberRemove, Args{member}, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif !perms.RemoveUser(member) {\n\t\t\tpanic(\"member not found\")\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"MemberRemoved\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", member.String(),\n\t\t)\n\t})\n}\n\n// IsMember checks if an user is a member of the realm or a board.\n//\n// Board ID is only required when checking if a user is a member of a board.\nfunc IsMember(boardID BoardID, user std.Address) bool {\n\tif boardID != 0 {\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tperms := mustGetPermissions(boardID)\n\treturn perms.HasUser(user)\n}\n\n// HasMemberRole checks if a realm or board member has a specific role assigned.\n//\n// Board ID is only required when checking a member of a board.\nfunc HasMemberRole(boardID BoardID, member std.Address, role Role) bool {\n\tif boardID != 0 {\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tperms := mustGetPermissions(boardID)\n\treturn perms.HasRole(member, role)\n}\n\n// ChangeMemberRole changes the role of a realm or board member.\n//\n// Board ID is only required when changing the role for a member of a board.\nfunc ChangeMemberRole(boardID BoardID, member std.Address, role Role) {\n\tassertMembersUpdateIsEnabled(boardID)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{boardID, member, role}\n\tperms.WithPermission(caller, PermissionRoleChange, args, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif err := perms.SetUserRoles(member, role); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"RoleChanged\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", member.String(),\n\t\t\t\"newRole\", string(role),\n\t\t)\n\t})\n}\n\n// IterateRealmMembers iterates realm members.\n// The iteration is done only for realm members, board members are not iterated.\nfunc IterateRealmMembers(offset int, fn UsersIterFn) (halted bool) {\n\tcount := gPerms.UsersCount() - offset\n\treturn gPerms.IterateUsers(offset, count, fn)\n}\n\n// IterateBoards iterates realm boards.\nfunc IterateBoards(offset int, fn func(ReadonlyBoard) bool) (halted bool) {\n\tcount := gBoardsByID.Size() - offset\n\treturn gBoardsByID.IterateByOffset(offset, count, func(_ string, v any) bool {\n\t\tboard, _ := v.(*Board)\n\t\treturn fn(readonlyBoard{board})\n\t})\n}\n\nfunc assertHasBoardPermission(b *Board, user std.Address, p Permission) {\n\tif !b.perms.HasPermission(user, p) {\n\t\tpanic(\"unauthorized\")\n\t}\n}\n\nfunc assertBoardExists(id BoardID) {\n\tif _, found := getBoard(id); !found {\n\t\tpanic(\"board not found: \" + id.String())\n\t}\n}\n\nfunc assertBoardIsNotFrozen(b *Board) {\n\tif b.IsReadonly() {\n\t\tpanic(\"board is frozen\")\n\t}\n}\n\nfunc assertIsValidBoardName(name string) {\n\tsize := len(name)\n\tif size == 0 {\n\t\tpanic(\"board name is empty\")\n\t}\n\n\tif size \u003e MaxBoardNameLength {\n\t\tn := strconv.Itoa(MaxBoardNameLength)\n\t\tpanic(\"board name is too long, maximum allowed is \" + n + \" characters\")\n\t}\n\n\tif !reBoardName.MatchString(name) {\n\t\tpanic(\"board name contains invalid characters\")\n\t}\n}\n\nfunc assertThreadIsNotFrozen(t *Post) {\n\tif t.IsReadonly() {\n\t\tpanic(\"thread is frozen\")\n\t}\n}\n\nfunc assertReplyIsNotFrozen(r *Post) {\n\tif r.IsReadonly() {\n\t\tpanic(\"reply is frozen\")\n\t}\n}\n\nfunc assertNameIsNotEmpty(name string) {\n\tif name == \"\" {\n\t\tpanic(\"name is empty\")\n\t}\n}\n\nfunc assertTitleIsValid(title string) {\n\tif title == \"\" {\n\t\tpanic(\"title is empty\")\n\t}\n\n\tif len(title) \u003e MaxThreadTitleLength {\n\t\tn := strconv.Itoa(MaxThreadTitleLength)\n\t\tpanic(\"thread title is too long, maximum allowed is \" + n + \" characters\")\n\t}\n}\n\nfunc assertBodyIsNotEmpty(body string) {\n\tif body == \"\" {\n\t\tpanic(\"body is empty\")\n\t}\n}\n\nfunc assertBoardNameNotExists(name string) {\n\tif gBoardsByName.Has(name) {\n\t\tpanic(\"board already exists\")\n\t}\n}\n\nfunc assertThreadExists(b *Board, threadID PostID) {\n\tif _, found := b.GetThread(threadID); !found {\n\t\tpanic(\"thread not found: \" + threadID.String())\n\t}\n}\n\nfunc assertReplyExists(thread *Post, replyID PostID) {\n\tif _, found := thread.GetReply(replyID); !found {\n\t\tpanic(\"reply not found: \" + replyID.String())\n\t}\n}\n\nfunc assertThreadIsVisible(thread *Post) {\n\tif thread.IsHidden() {\n\t\tpanic(\"thread is hidden\")\n\t}\n}\n\nfunc assertReplyIsVisible(thread *Post) {\n\tif thread.IsHidden() {\n\t\tpanic(\"reply is hidden\")\n\t}\n}\n\nfunc assertReplyBodyIsValid(body string) {\n\tassertBodyIsNotEmpty(body)\n\n\tif len(body) \u003e MaxReplyLength {\n\t\tn := strconv.Itoa(MaxReplyLength)\n\t\tpanic(\"reply is too long, maximum allowed is \" + n + \" characters\")\n\t}\n\n\tif reDeniedReplyLinePrefixes.MatchString(body) {\n\t\tpanic(\"using Markdown headings, blockquotes or horizontal lines is not allowed in replies\")\n\t}\n}\n\nfunc assertMembersUpdateIsEnabled(boardID BoardID) {\n\tif boardID != 0 {\n\t\tassertRealmIsNotLocked()\n\t} else {\n\t\tassertRealmMembersAreNotLocked()\n\t}\n}\n"},{"name":"public_flag.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// SetFlaggingThreshold sets the number of flags required to hide a thread or comment.\n//\n// Threshold is only applicable within the board where it's setted.\nfunc SetFlaggingThreshold(boardID BoardID, threshold int) {\n\tif threshold \u003c 1 {\n\t\tpanic(\"invalid flagging threshold\")\n\t}\n\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{boardID, threshold}\n\tboard.perms.WithPermission(caller, PermissionBoardFlaggingUpdate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\n\t\tgFlaggingThresholds.Set(boardID.String(), threshold)\n\t\tstd.Emit(\n\t\t\t\"FlaggingThresholdUpdated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"threshold\", strconv.Itoa(threshold),\n\t\t)\n\t})\n}\n\n// GetFlaggingThreshold returns the number of flags required to hide a thread or comment within a board.\nfunc GetFlaggingThreshold(boardID BoardID) int {\n\tassertBoardExists(boardID)\n\treturn getFlaggingThreshold(boardID)\n}\n\n// FlagThread adds a new flag to a thread.\n//\n// Flagging requires special permissions and hides the thread when\n// the number of flags reaches a pre-defined flagging threshold.\nfunc FlagThread(boardID BoardID, threadID PostID, reason string) {\n\tboard := mustGetBoard(boardID)\n\n\t// Realm owners should be able to flag without permissions even when board is frozen\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner)\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertHasBoardPermission(board, caller, PermissionThreadFlag)\n\t}\n\n\tt, ok := board.GetThread(threadID)\n\tif !ok {\n\t\tpanic(\"post doesn't exist\")\n\t}\n\tassertThreadIsNotFrozen(t)\n\n\tf := Flag{\n\t\tUser:   caller,\n\t\tReason: reason,\n\t}\n\n\t// Realm owners can hide with a single flag\n\thide := flagItem(t, f, getFlaggingThreshold(boardID))\n\tif hide || isRealmOwner {\n\t\tt.SetVisible(false)\n\t}\n\n\tstd.Emit(\n\t\t\"ThreadFlagged\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"reason\", reason,\n\t)\n}\n\n// FlagReply adds a new flag to a comment or reply.\n//\n// Flagging requires special permissions and hides the comment or reply\n// when the number of flags reaches a pre-defined flagging threshold.\nfunc FlagReply(boardID BoardID, threadID, replyID PostID, reason string) {\n\tboard := mustGetBoard(boardID)\n\n\t// Realm owners should be able to flag without permissions even when board is frozen\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner)\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertHasBoardPermission(board, caller, PermissionReplyFlag)\n\t}\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsNotFrozen(thread)\n\n\tf := Flag{\n\t\tUser:   caller,\n\t\tReason: reason,\n\t}\n\n\t// Realm owners can hide with a single flag\n\thide := flagItem(reply, f, getFlaggingThreshold(boardID))\n\tif hide || isRealmOwner {\n\t\treply.SetVisible(false)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyFlagged\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"reason\", reason,\n\t)\n}\n"},{"name":"public_freeze.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// FreezeBoard freezes a board so no more threads and comments can be created or modified.\nfunc FreezeBoard(boardID BoardID) {\n\tsetBoardReadonly(boardID, true)\n}\n\n// UnfreezeBoard removes frozen status from a board.\nfunc UnfreezeBoard(boardID BoardID) {\n\tsetBoardReadonly(boardID, false)\n}\n\n// IsBoardFrozen checks if a board has been frozen.\nfunc IsBoardFrozen(boardID BoardID) bool {\n\tboard := mustGetBoard(boardID)\n\treturn board.IsReadonly()\n}\n\n// FreezeThread freezes a thread so thread cannot be replied, modified or deleted.\n//\n// Fails if board is frozen.\nfunc FreezeThread(boardID BoardID, threadID PostID) {\n\tsetThreadReadonly(boardID, threadID, true)\n}\n\n// UnfreezeThread removes frozen status from a thread.\n//\n// Fails if board is frozen.\nfunc UnfreezeThread(boardID BoardID, threadID PostID) {\n\tsetThreadReadonly(boardID, threadID, false)\n}\n\n// IsThreadFrozen checks if a thread has been frozen.\n//\n// Returns true if board is frozen.\nfunc IsThreadFrozen(boardID BoardID, threadID PostID) bool {\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\treturn board.IsReadonly() || thread.IsReadonly()\n}\n\n// UnfreezeReply removes frozen status from a reply.\n//\n// Fails when parent thread or board are frozen.\nfunc UnfreezeReply(boardID BoardID, threadID, replyID PostID) {\n\t// XXX: Is there a use case for also freezing replies?\n\tsetReplyReadonly(boardID, threadID, replyID, false)\n}\n\n// FreezeReply freezes a thread reply so it cannot be modified or deleted.\n//\n// Fails when parent thread or board are frozen.\nfunc FreezeReply(boardID BoardID, threadID, replyID PostID) {\n\tsetReplyReadonly(boardID, threadID, replyID, true)\n}\n\n// IsReplyFrozen checks if a thread reply has been frozen.\n//\n// Returns true when board or a parent thread is frozen.\nfunc IsReplyFrozen(boardID BoardID, threadID, replyID PostID) bool {\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\n\treturn board.IsReadonly() || thread.IsReadonly() || reply.IsReadonly()\n}\n\nfunc setReplyReadonly(boardID BoardID, threadID, replyID PostID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionReplyFreeze)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\n\tif isReadonly {\n\t\tassertReplyIsNotFrozen(reply)\n\t}\n\n\treply.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"ReplyFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n\nfunc setThreadReadonly(boardID BoardID, threadID PostID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionThreadFreeze)\n\n\tthread := mustGetThread(board, threadID)\n\tif isReadonly {\n\t\tassertThreadIsNotFrozen(thread)\n\t}\n\n\tthread.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"ThreadFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n\nfunc setBoardReadonly(boardID BoardID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tif isReadonly {\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionBoardFreeze)\n\n\tboard.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"BoardFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n"},{"name":"public_lock.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// LockRealm locks the realm making it readonly.\n//\n// WARNING: Realm can't be unlocked once locked.\n//\n// Realm can also be locked without locking realm members.\n// Realm members can be locked when locking the realm or afterwards.\n// This is relevant for two reasons, one so members can be modified after lock.\n// The other is for realm owners, which can delete threads and comments after lock.\nfunc LockRealm(lockRealmMembers bool) {\n\tassertRealmMembersAreNotLocked()\n\n\t// If realm members are not being locked assert that realm is no locked.\n\t// Members can be locked after locking the realm, in a second `LockRealm` call.\n\tif !lockRealmMembers {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tgPerms.WithPermission(caller, PermissionRealmLock, nil, func(Args) {\n\t\tgLocked.realm = true\n\t\tgLocked.realmMembers = lockRealmMembers\n\n\t\tstd.Emit(\n\t\t\t\"RealmLocked\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"lockRealmMembers\", strconv.FormatBool(lockRealmMembers),\n\t\t)\n\t})\n}\n\n// IsRealmLocked checks if boards realm has been locked.\nfunc IsRealmLocked() bool {\n\treturn gLocked.realm\n}\n\n// AreRealmMembersLocked checks if realm members has been locked.\nfunc AreRealmMembersLocked() bool {\n\treturn gLocked.realmMembers\n}\n\nfunc assertRealmIsNotLocked() { // TODO: Add filtests for locked realm case to all public functions\n\tif gLocked.realm {\n\t\tpanic(\"realm is locked\")\n\t}\n}\n\nfunc assertRealmMembersAreNotLocked() { // TODO: Add filtests for locked members case to all public member functions\n\tif gLocked.realmMembers {\n\t\tpanic(\"realm and members are locked\")\n\t}\n}\n"},{"name":"render.gno","body":"package boards2\n\nimport (\n\t\"net/url\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/mux\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nconst (\n\tpageSizeBoards  = 6\n\tpageSizeThreads = 6\n\tpageSizeReplies = 10\n)\n\nconst menuManageBoard = \"manageBoard\"\n\nfunc Render(path string) string {\n\trouter := mux.NewRouter()\n\trouter.HandleFunc(\"\", renderBoardsList)\n\trouter.HandleFunc(\"help\", renderHelp)\n\trouter.HandleFunc(\"admin-users\", renderMembers)\n\trouter.HandleFunc(\"{board}\", renderBoard)\n\trouter.HandleFunc(\"{board}/members\", renderMembers)\n\trouter.HandleFunc(\"{board}/{thread}\", renderThread)\n\trouter.HandleFunc(\"{board}/{thread}/{reply}\", renderReply)\n\n\trouter.NotFoundHandler = func(res *mux.ResponseWriter, _ *mux.Request) {\n\t\tres.Write(\"Path not found\")\n\t}\n\n\treturn router.Render(path)\n}\n\nfunc renderHelp(res *mux.ResponseWriter, _ *mux.Request) {\n\tres.Write(\"# Boards Help\\n\")\n\tif gHelp != \"\" {\n\t\tres.Write(gHelp)\n\t} else {\n\t\tres.Write(\"### Help content has not been uploaded\\n\")\n\t\tres.Write(\"Do you want to \")\n\t\tres.Write(newLink(\"upload boards help\", txlink.Call(\"SetHelp\")))\n\t\tres.Write(\" ?\")\n\t}\n}\n\nfunc renderBoardsList(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tres.Write(\"# Boards\\n\\n\")\n\trenderBoardListMenu(res, req)\n\tres.Write(\"\\n\\n---\\n\")\n\n\tif gBoardsByID.Size() == 0 {\n\t\tres.Write(\"### Currently there are no boards\\n\")\n\t\tres.Write(\"Be the first to \" + newLink(\"create a new board\", txlink.Call(\"CreateBoard\")) + \" !\")\n\n\t\treturn\n\t}\n\n\tp, err := pager.New(req.RawPath, gBoardsByID.Size(), pager.WithPageSize(pageSizeBoards))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\trender := func(_ string, v any) bool {\n\t\tboard := v.(*Board)\n\n\t\tres.Write(\"## \" + newLink(board.GetName(), board.GetURL()) + \"  \\n\")\n\t\tres.Write(\"_Created by \" + newUserLink(board.creator) + \" \")\n\t\tres.Write(\"on \" + board.createdAt.Format(dateFormat))\n\t\tres.Write(\", #\" + board.id.String() + \"_  \\n\")\n\t\tres.Write(\"_\" + strconv.Itoa(board.threads.Size()) + \" threads\")\n\t\tif board.IsReadonly() {\n\t\t\tres.Write(\", **read-only**\")\n\t\t}\n\n\t\tres.Write(\"_\\n\")\n\t\treturn false\n\t}\n\n\tres.Write(\"_Sort by \")\n\tr := realmpath.Parse(req.RawPath)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tres.Write(newLink(\"newest first\", r.String()))\n\t\tres.Write(\"_\\n\")\n\t\tgBoardsByID.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tres.Write(newLink(\"oldest first\", r.String()))\n\t\tres.Write(\"_\\n\")\n\t\tgBoardsByID.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tres.Write(\"\\n---\\n\")\n\t\tres.Write(pager.Picker(p))\n\t}\n}\n\nfunc renderBoardListMenu(res *mux.ResponseWriter, req *mux.Request) {\n\tpath := strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\n\tres.Write(newLink(\"Create Board\", txlink.Call(\"CreateBoard\")))\n\tres.Write(\" • \")\n\tres.Write(newLink(\"List Admin Users\", path+\":admin-users\"))\n\tres.Write(\" • \")\n\tres.Write(newLink(\"Help\", path+\":help\"))\n\tres.Write(\"\\n\\n\")\n}\n\nfunc renderBoard(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tres.Write(\"### The board you are looking for does not exist\\n\")\n\t\tres.Write(\"Do you want to [create a new board](\" + txlink.Call(\"CreateBoard\", \"name\", name) + \") ?\")\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tmenu := renderBoardMenu(board, req)\n\n\tres.Write(board.Render(req.RawPath, menu))\n}\n\nfunc renderBoardMenu(board *Board, req *mux.Request) string {\n\tvar (\n\t\tb               strings.Builder\n\t\tboardMembersURL = board.GetPath() + \"/members\"\n\t)\n\n\tif board.IsReadonly() {\n\t\tb.WriteString(newLink(\"List Members\", boardMembersURL))\n\t\tb.WriteString(\" • \")\n\t\tb.WriteString(newLink(\"Unfreeze Board\", board.GetUnfreezeFormURL()))\n\t\tb.WriteString(\"\\n\")\n\t} else {\n\t\tb.WriteString(newLink(\"Create Thread\", board.GetPostFormURL()))\n\t\tb.WriteString(\" • \")\n\n\t\tmenu := getCurrentMenu(req.RawPath)\n\t\tif menu == menuManageBoard {\n\t\t\tb.WriteString(\"**Manage Board**\")\n\t\t} else {\n\t\t\tb.WriteString(newLink(\"Manage Board\", menuURL(menuManageBoard)))\n\t\t}\n\n\t\tb.WriteString(\"  \\n\")\n\n\t\tif menu == menuManageBoard {\n\t\t\tb.WriteString(\"↳\")\n\t\t\tb.WriteString(newLink(\"Invite Member\", board.GetInviteMemberFormURL()))\n\t\t\tb.WriteString(\" • \")\n\t\t\tb.WriteString(newLink(\"List Members\", boardMembersURL))\n\t\t\tb.WriteString(\" • \")\n\t\t\tb.WriteString(newLink(\"Freeze Board\", board.GetFreezeFormURL()))\n\t\t\tb.WriteString(\"\\n\\n\")\n\t\t}\n\t}\n\n\treturn b.String()\n}\n\nfunc renderThread(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tres.Write(\"Board does not exist: \" + name)\n\t\treturn\n\t}\n\n\trawID := req.GetVar(\"thread\")\n\ttID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid thread ID: \" + rawID)\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tthread, found := board.GetThread(PostID(tID))\n\tif !found {\n\t\tres.Write(\"Thread does not exist with ID: \" + rawID)\n\t} else if thread.IsHidden() {\n\t\tres.Write(\"Thread with ID: \" + rawID + \" has been flagged as inappropriate\")\n\t} else {\n\t\tres.Write(thread.Render(req.RawPath, \"\", 5))\n\t}\n}\n\nfunc renderReply(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tres.Write(\"Board does not exist: \" + name)\n\t\treturn\n\t}\n\n\trawID := req.GetVar(\"thread\")\n\ttID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid thread ID: \" + rawID)\n\t\treturn\n\t}\n\n\trawID = req.GetVar(\"reply\")\n\trID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid reply ID: \" + rawID)\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tthread, found := board.GetThread(PostID(tID))\n\tif !found {\n\t\tres.Write(\"Thread does not exist with ID: \" + req.GetVar(\"thread\"))\n\t\treturn\n\t}\n\n\treply, found := thread.GetReply(PostID(rID))\n\tif !found {\n\t\tres.Write(\"Reply does not exist with ID: \" + rawID)\n\t\treturn\n\t}\n\n\t// Call render even for hidden replies to display children.\n\t// Original comment content will be hidden under the hood.\n\t// See: #3480\n\tres.Write(reply.RenderInner())\n}\n\nfunc renderMembers(res *mux.ResponseWriter, req *mux.Request) {\n\tboardID := BoardID(0)\n\tperms := gPerms\n\tname := req.GetVar(\"board\")\n\tif name != \"\" {\n\t\tv, found := gBoardsByName.Get(name)\n\t\tif !found {\n\t\t\tres.Write(\"### Board not found\")\n\t\t\treturn\n\t\t}\n\n\t\tboard := v.(*Board)\n\t\tboardID = board.GetID()\n\t\tperms = board.perms\n\n\t\tres.Write(\"# \" + board.GetName() + \" Members\\n\")\n\t\tres.Write(\"### These are the board members\\n\\n\")\n\t} else {\n\t\tres.Write(\"# Admin Users\\n\")\n\t\tres.Write(\"### These are the admin users of the realm\\n\\n\")\n\t}\n\n\t// Create a pager with a small page size to reduce\n\t// the number of username lookups per page.\n\tp, err := pager.New(req.RawPath, perms.UsersCount(), pager.WithPageSize(5))\n\tif err != nil {\n\t\tres.Write(err.Error())\n\t\treturn\n\t}\n\n\tres.Write(\"| Member | Role | Actions |\\n| --- | --- | --- |\\n\")\n\tperms.IterateUsers(p.Offset(), p.PageSize(), func(u User) bool {\n\t\tres.Write(\"| \")\n\t\tres.Write(newUserLink(u.Address))\n\t\tres.Write(\" | \")\n\t\tres.Write(rolesToString(u.Roles))\n\t\tres.Write(\" | \")\n\t\tres.Write(newLink(\"remove\", txlink.Call(\n\t\t\t\"RemoveMember\",\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", u.Address.String(),\n\t\t)))\n\t\tres.Write(\" • \")\n\t\tres.Write(newLink(\"change role\", txlink.Call(\n\t\t\t\"ChangeMemberRole\",\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", u.Address.String(),\n\t\t)))\n\t\tres.Write(\" |\\n\")\n\t\treturn false\n\t})\n\n\tif p.HasPages() {\n\t\tres.Write(\"\\n\\n\" + pager.Picker(p))\n\t}\n}\n\nfunc renderNotice(res *mux.ResponseWriter) {\n\tif gNotice == \"\" {\n\t\treturn\n\t}\n\n\tres.Write(\"\u003e \")\n\tres.Write(gNotice)\n\tres.Write(\"\\n\\n\")\n}\n\nfunc rolesToString(roles []Role) string {\n\tif len(roles) == 0 {\n\t\treturn \"\"\n\t}\n\n\tnames := make([]string, len(roles))\n\tfor i, r := range roles {\n\t\tnames[i] = string(r)\n\t}\n\treturn strings.Join(names, \", \")\n}\n\nfunc menuURL(name string) string {\n\t// TODO: Menu URL works because no other GET arguments are being used\n\treturn \"?menu=\" + name\n}\n\nfunc getCurrentMenu(rawURL string) string {\n\t_, rawQuery, found := strings.Cut(rawURL, \"?\")\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\tquery, _ := url.ParseQuery(rawQuery)\n\treturn query.Get(\"menu\")\n}\n"},{"name":"z_0_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tbid := boards2.CreateBoard(\"test123\")\n\tprintln(\"ID =\", bid)\n}\n\n// Output:\n// ID = 1\n"},{"name":"z_0_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"\")\n}\n\n// Error:\n// board name is empty\n"},{"name":"z_0_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tboardName = \"test123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(boardName)\n}\n\nfunc main() {\n\tboards2.CreateBoard(boardName)\n}\n\n// Error:\n// board already exists\n"},{"name":"z_0_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n}\n\n// Error:\n// addresses are not allowed as board name\n"},{"name":"z_0_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"gnoland\")\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_0_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar name = strings.Repeat(\"X\", boards2.MaxBoardNameLength+1)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(name)\n}\n\n// Error:\n// board name is too long, maximum allowed is 50 characters\n"},{"name":"z_0_h_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname   = \"test123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\tboards2.InviteMember(0, member, boards2.RoleOwner) // Operate on realm DAO members instead of individual boards\n\ttesting.SetOriginCaller(member)\n\tusers.Register(name)\n}\n\nfunc main() {\n\tbid := boards2.CreateBoard(name)\n\tprintln(\"ID =\", bid)\n}\n\n// Output:\n// ID = 1\n"},{"name":"z_0_i_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"test123\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_10_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\n\t// Invite a moderator to the new board\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\n\t// Create a new thread as a moderator\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_10_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.FlagThread(404, 1, \"\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_10_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Make the next call as an uninvited user\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_10_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, 404, \"\")\n}\n\n// Error:\n// post doesn't exist\n"},{"name":"z_10_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// item flag count threshold exceeded: 1\n"},{"name":"z_10_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to flag threads\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\ttesting.SetOriginCaller(moderator)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_10_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with a specific flagging threshold\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Invite a moderator to the new board\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\n\t// Create a new thread and flag it as a moderator\n\ttesting.SetOriginCaller(moderator)\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// item has been already flagged by a current user\n"},{"name":"z_10_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with flagging threshold greater than 1\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Create a thread so the realm owner can flag and hide it with a single flag\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\t// Also freeze board to make sure that realm owner can still flag the thread\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_11_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, body)\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_11_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"\", \"bar\")\n}\n\n// Error:\n// title is empty\n"},{"name":"z_11_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_11_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.EditThread(404, 1, \"Foo\", \"bar\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_11_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_11_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"bar\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_11_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to edit threads\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, body)\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_11_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid   boards2.BoardID\n\tpid   boards2.PostID\n\ttitle = strings.Repeat(\"X\", boards2.MaxThreadTitleLength+1)\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, \"bar\")\n}\n\n// Error:\n// thread title is too long, maximum allowed is 100 characters\n"},{"name":"z_12_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbody  = \"Test reply\"\n\tpath  = \"test-board/1/2\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, body)\n\n\t// Render content must contain the modified reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \"+body+\"\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_12_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbody  = \"Test reply\"\n\tpath  = \"test-board/1/2\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Create a reply and a sub reply\n\tparentRID := boards2.CreateReply(bid, tid, 0, \"Parent\")\n\trid = boards2.CreateReply(bid, tid, parentRID, \"Child\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, body)\n\n\t// Render content must contain the modified reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e \"+body+\"\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_12_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.EditReply(404, 1, 0, \"body\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_12_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, 404, 0, \"body\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_12_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, 404, \"body\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_12_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"new body\")\n}\n\n// Error:\n// only the reply creator is allowed to edit it\n"},{"name":"z_12_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Flag the reply so it's hidden\n\tboards2.FlagReply(bid, tid, rid, \"reason\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"body\")\n}\n\n// Error:\n// reply is hidden\n"},{"name":"z_12_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_13_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_13_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.FlagReply(404, 1, 1, \"\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_13_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, 404, 1, \"\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_13_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, 404, \"\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_13_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// item flag count threshold exceeded: 1\n"},{"name":"z_13_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_13_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Invite a member using a role with permission to flag replies\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\ttesting.SetOriginCaller(moderator)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_13_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with flagging threshold greater than 1\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Create a reply so the realm owner can flag and hide it with a single flag\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\t// Also freeze board to make sure that realm owner can still flag the reply\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\"))\n}\n\n// Output:\n// true\n"},{"name":"z_14_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Ensure reply doesn't exist\n\tprintln(boards2.Render(\"test-board/1/2\"))\n}\n\n// Output:\n// Reply does not exist with ID: 2\n"},{"name":"z_14_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.DeleteReply(404, 1, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_14_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, 404, 1)\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_14_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, 404)\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_14_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\trid = boards2.CreateReply(bid, tid, 0, \"Parent\")\n\tboards2.CreateReply(bid, tid, rid, \"Child reply\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Render content must contain the releted message instead of reply's body\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e This reply has been deleted\\n\"))\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e Child reply\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_14_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Call using a user that has not permission to delete replies\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_14_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Invite a member using a role with permission to delete replies\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(member)\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Ensure reply doesn't exist\n\tprintln(boards2.Render(\"test-board/1/2\"))\n}\n\n// Output:\n// Reply does not exist with ID: 2\n"},{"name":"z_15_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"Foo\", \"bar\")\n\tboards2.FlagThread(srcBID, srcTID, \"idk\")\n}\n\nfunc main() {\n\t// Repost should fail if source thread is flagged\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_15_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID = 1024\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n}\n\nfunc main() {\n\t// Repost should fail if source thread doesn't exist\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// thread does not exist with ID: 1024\n"},{"name":"z_15_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"Foo\", \"bar\")\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_15_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/ufmt\"\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"original title\", \"original text\")\n}\n\nfunc main() {\n\t// Success case\n\ttID := boards2.CreateRepost(srcBID, srcTID, \"repost title\", \"repost text\", dstBID)\n\tp := ufmt.Sprintf(\"dst-board/%s\", tID)\n\tout := boards2.Render(p)\n\n\tprintln(strings.Contains(out, \"original text\"))\n\tprintln(strings.Contains(out, \"repost title\"))\n\tprintln(strings.Contains(out, \"repost text\"))\n}\n\n// Output:\n// true\n// true\n// true\n"},{"name":"z_15_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Create a board with a thread\n\torigBID := boards2.CreateBoard(\"origin-board\")\n\torigTID := boards2.CreateThread(origBID, \"title\", \"text\")\n\n\t// Create a second board and repost a thread using an empty title\n\tsrcBID = boards2.CreateBoard(\"source-board\")\n\tsrcTID = boards2.CreateRepost(origBID, origTID, \"original title\", \"original text\", srcBID)\n\n\t// Create a third board to try reposting the repost\n\tdstBID = boards2.CreateBoard(\"destination-board\")\n}\n\nfunc main() {\n\tboards2.CreateRepost(srcBID, srcTID, \"repost title\", \"repost text\", dstBID)\n}\n\n// Error:\n// reposting a thread that is a repost is not allowed\n"},{"name":"z_16_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(bid, 4)\n\n\t// Ensure that flagging threshold changed\n\tprintln(boards2.GetFlaggingThreshold(bid))\n}\n\n// Output:\n// 4\n"},{"name":"z_16_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nconst bid boards2.BoardID = 404\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(bid, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_16_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(1, 0)\n}\n\n// Error:\n// invalid flagging threshold\n"},{"name":"z_17_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.FreezeBoard(bid)\n\tprintln(boards2.IsBoardFrozen(bid))\n}\n\n// Output:\n// true\n"},{"name":"z_17_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FreezeBoard(bid)\n}\n\n// Error:\n// board is frozen\n"},{"name":"z_18_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbid   = boards2.BoardID(0)                                      // Operate on realm instead of individual boards\n)\n\nvar perms boards2.Permissions\n\nfunc init() {\n\t// Create a new permissions instance without users\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n\n\t// Owner that setted new permissions is not a member of the new permissions\n\tprintln(boards2.IsMember(bid, owner))\n}\n\n// Output:\n// false\n"},{"name":"z_18_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\tuser = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid  = boards2.BoardID(0)                                      // Operate on realm instead of individual boards\n)\n\nvar perms boards2.Permissions\n\nfunc init() {\n\t// Create a new permissions instance\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_18_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tperms boards2.Permissions\n\tbid   boards2.BoardID\n)\n\nfunc init() {\n\t// Create a new permissions instance without users\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foobar\")\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n\n\t// Owner that setted new board permissions is not a member of the new permissions\n\tprintln(boards2.IsMember(bid, owner))\n}\n\n// Output:\n// false\n"},{"name":"z_19_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\t// Attempt to freeze a thread on frozen board\n\tboards2.FreezeThread(bid, tid)\n}\n\n// Error:\n// board is frozen\n"},{"name":"z_19_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// Attempt to freeze a frozen thread\n\tboards2.FreezeThread(bid, tid)\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_19_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FreezeThread(bid, tid)\n\tprintln(boards2.IsThreadFrozen(bid, tid))\n}\n\n// Output:\n// true\n"},{"name":"z_1_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// true\n"},{"name":"z_1_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tuser  = std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\t// Add an admin member\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\t// Next call will be done by the admin member\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, boards2.RoleOwner)\n}\n\n// Error:\n// only owners are allowed to invite other owners\n"},{"name":"z_1_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tuser  = std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n\trole  = boards2.RoleAdmin\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\t// Add an admin member\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\t// Next call will be done by the admin member\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// true\n"},{"name":"z_1_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(0, user, boards2.Role(\"foobar\")) // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// invalid role: foobar\n"},{"name":"z_1_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\trole  = boards2.RoleOwner\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foo123\") // Operate on board DAO members\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(0, user, role)) // Operate on realm DAO\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_1_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, user, role)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n}\n\n// Error:\n// user already exists\n"},{"name":"z_1_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(0, \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", boards2.RoleGuest)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_20_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// Attempt to freeze a reply on frozen thread\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_20_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\nfunc main() {\n\t// Attempt to freeze already frozen reply\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\n// Error:\n// reply is frozen\n"},{"name":"z_20_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n}\n\nfunc main() {\n\t// reply frozen\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.FreezeReply(bid, tid, rid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeReply(bid, tid, rid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\n\t// thread frozen\n\tboards2.FreezeThread(bid, tid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeThread(bid, tid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\n\t// board frozen\n\tboards2.FreezeBoard(bid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeBoard(bid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n}\n\n// Output:\n// false\n// true\n// false\n// true\n// false\n// true\n// false\n"},{"name":"z_20_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n}\n\nfunc main() {\n\t// unfrozen thread - should work\n\tr2 := boards2.CreateReply(bid, tid, rid, \"child 1\")\n\n\t// frozen thread - can't reply\n\tboards2.FreezeReply(bid, tid, rid)\n\tboards2.CreateReply(bid, tid, r2, \"child 2\")\n}\n\n// Error:\n// reply is frozen\n"},{"name":"z_21_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"This is a test realm message\")\n\n\t// Render content must contain the message\n\tcontent := boards2.Render(\"\")\n\tprintln(strings.HasPrefix(content, \"\u003e This is a test realm message\\n\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_21_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Set an initial message so it can be cleared\n\tboards2.SetRealmNotice(\"This is a test realm message\")\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"\")\n\n\t// Render content must contain the message\n\tcontent := boards2.Render(\"\")\n\tprintln(strings.HasPrefix(content, \"\u003e This is a test realm message\\n\\n\"))\n\tprintln(strings.HasPrefix(content, \"# Boards\"))\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_21_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\t// Call realm with a user that has not permission to set realm notice\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"Foo\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_22_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(false)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// false\n"},{"name":"z_22_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.LockRealm(false)\n}\n\nfunc main() {\n\t// Should fail because realm is already locked\n\tboards2.LockRealm(false)\n}\n\n// Error:\n// realm is locked\n"},{"name":"z_22_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\t// Call realm with a user that has not permission to lock the realm\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(false)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_22_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(true)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_22_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.LockRealm(true)\n}\n\nfunc main() {\n\t// Should fail because realm is already locked\n\tboards2.LockRealm(true)\n}\n\n// Error:\n// realm and members are locked\n"},{"name":"z_22_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Lock the realm without locking realm members\n\tboards2.LockRealm(false)\n}\n\nfunc main() {\n\tboards2.LockRealm(true)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_23_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleOwner)\n\tboards2.InviteMember(bid, \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\", boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.IterateRealmMembers(0, func(u boards2.User) bool {\n\t\tprintln(u.Address, string(u.Roles[0]))\n\t\treturn false\n\t})\n}\n\n// Output:\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj owner\n// g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5 admin\n"},{"name":"z_24_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid := boards2.CreateBoard(\"test123\")\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleAdmin)\n\n\tbid = boards2.CreateBoard(\"foo123\")\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleOwner)\n\tboards2.InviteMember(bid, \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\", boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.IterateBoards(0, func(b boards2.ReadonlyBoard) bool {\n\t\tprintln(b.ID().String())\n\t\tprintln(b.Name())\n\n\t\tb.IterateMembers(0, b.MembersCount(), func(u boards2.User) bool {\n\t\t\tprintln(u.Address, string(u.Roles[0]))\n\t\t\treturn false\n\t\t})\n\t})\n}\n\n// Output:\n// 1\n// test123\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj admin\n// 2\n// foo123\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj owner\n// g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5 admin\n"},{"name":"z_2_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tpath    = \"test-board/1/2\"\n\tcomment = \"Test comment\"\n)\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\trid := boards2.CreateReply(bid, tid, 0, comment)\n\n\t// Ensure that returned ID is right\n\tprintln(rid == 2)\n\n\t// Render content must contain the reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \"+comment+\"\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_2_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateReply(404, 1, 0, \"comment\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_2_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, 404, 0, \"comment\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_2_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 404, \"comment\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_2_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Hide thread by flagging it so reply can't be submitted\n\tboards2.FlagThread(bid, tid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"Test reply\")\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_2_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply1\")\n\n\t// Hide thread by flagging it so reply of a reply can't be submitted\n\tboards2.FlagThread(bid, tid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"reply1.1\")\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_2_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"thread\", \"thread\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply1\")\n\n\t// Hide reply by flagging it so sub reply can't be submitted\n\tboards2.FlagReply(bid, tid, rid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"reply1.1\")\n}\n\n// Error:\n// replying to a hidden or frozen reply is not allowed\n"},{"name":"z_2_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"Test reply\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_2_i_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_2_j_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tpath    = \"test-board/1/2\"\n\tcomment = \"Second comment\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"First comment\")\n}\n\nfunc main() {\n\trid2 := boards2.CreateReply(bid, tid, rid, comment)\n\n\t// Ensure that returned ID is right\n\tprintln(rid2 == 3)\n\n\t// Render content must contain the sub-reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e \"+comment+\"\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_2_k_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tcomment = \"Second comment\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"Parent comment\")\n\n\t// Flag parent post so it's hidden\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"Sub comment\")\n}\n\n// Error:\n// replying to a hidden or frozen reply is not allowed\n"},{"name":"z_2_l_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// cannot reply to a frozen thread\n\tboards2.CreateReply(bid, tid, 0, \"foobar\")\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_2_m_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, strings.Repeat(\"x\", boards2.MaxReplyLength+1))\n}\n\n// Error:\n// reply is too long, maximum allowed is 300 characters\n"},{"name":"z_2_n_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"\u003e Markdown blockquote\")\n}\n\n// Error:\n// using Markdown headings, blockquotes or horizontal lines is not allowed in replies\n"},{"name":"z_3_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname    = \"foo123\"\n\tnewName = \"bar123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n\n\t// Ensure board is renamed by the default board owner\n\tbid2, _ := boards2.GetBoardIDFromName(newName)\n\tprintln(\"IDs match =\", bid == bid2)\n}\n\n// Output:\n// IDs match = true\n"},{"name":"z_3_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"\")\n}\n\n// Error:\n// board name is empty\n"},{"name":"z_3_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, name)\n}\n\n// Error:\n// board already exists\n"},{"name":"z_3_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RenameBoard(\"unexisting\", \"foo\")\n}\n\n// Error:\n// board does not exist with name: unexisting\n"},{"name":"z_3_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n}\n\n// Error:\n// addresses are not allowed as board name\n"},{"name":"z_3_f_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n\n\t// Ensure board is renamed by another board owner\n\tbid2, _ := boards2.GetBoardIDFromName(newName)\n\tprintln(\"IDs match =\", bid == bid2)\n}\n\n// Output:\n// IDs match = true\n"},{"name":"z_3_g_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tmember2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n\n\t// Invite a new member that doesn't own the user that matches the new board name\n\tboards2.InviteMember(bid, member2, boards2.RoleOwner)\n\ttesting.SetOriginCaller(member2)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_3_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"short\")\n}\n\n// Error:\n// the minimum allowed board name length is 6 characters\n"},{"name":"z_3_i_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tmember2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n\n\t// Invite a new member that doesn't own the user that matches the new board name\n\tboards2.InviteMember(bid, member2, boards2.RoleOwner)\n\ttesting.SetOriginCaller(member2)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_3_j_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"barbaz\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_4_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tnewRole = boards2.RoleOwner\n\tbid     = boards2.BoardID(0) // Operate on realm DAO instead of individual boards\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole)\n\n\t// Ensure that new role has been changed\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tnewRole = boards2.RoleAdmin\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foo123\")\n\tboards2.InviteMember(bid, member, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole)\n\n\t// Ensure that new role has been changed\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\towner2 = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tadmin  = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, owner2, boards2.RoleOwner)\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, owner2, boards2.RoleAdmin)\n}\n\n// Error:\n// admins are not allowed to remove the Owner role\n"},{"name":"z_4_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tadmin2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\tboards2.InviteMember(bid, admin2, boards2.RoleAdmin)\n\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, admin2, boards2.RoleOwner)\n}\n\n// Error:\n// admins are not allowed to promote members to Owner\n"},{"name":"z_4_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid     = boards2.BoardID(0)                                      // Operate on realm DAO members instead of individual boards\n\tnewRole = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole) // Owner can promote other members to Owner\n\n\t// Ensure that new role has been changed to owner\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, admin, boards2.Role(\"foo\"))\n}\n\n// Error:\n// invalid role: foo\n"},{"name":"z_4_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, \"invalid address\", boards2.RoleModerator)\n}\n\n// Error:\n// user not found\n"},{"name":"z_4_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(0, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleGuest)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_5_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, user, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.RemoveMember(bid, user)\n\n\t// Check that user is not a member\n\tprintln(boards2.IsMember(bid, user))\n}\n\n// Output:\n// false\n"},{"name":"z_5_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RemoveMember(0, \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\") // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_5_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RemoveMember(0, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// member not found\n"},{"name":"z_6_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\trole   = boards2.RoleGuest\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, member, role)\n}\n\nfunc main() {\n\tprintln(boards2.HasMemberRole(bid, member, role))\n\tprintln(boards2.HasMemberRole(bid, member, \"invalid\"))\n\tprintln(boards2.IsMember(bid, member))\n}\n\n// Output:\n// true\n// false\n// true\n"},{"name":"z_6_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleGuest\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tprintln(boards2.HasMemberRole(bid, user, role))\n\tprintln(boards2.IsMember(bid, user))\n}\n\n// Output:\n// false\n// false\n"},{"name":"z_7_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"test123\"\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(name)\n}\n\nfunc main() {\n\tbid2, found := boards2.GetBoardIDFromName(name)\n\tprintln(found)\n\tprintln(bid2 == bid)\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_7_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tbid, found := boards2.GetBoardIDFromName(\"foobar\")\n\tprintln(found)\n\tprintln(bid == 0)\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_8_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\ttid := boards2.CreateThread(bid, title, body)\n\n\t// Ensure that returned ID is right\n\tprintln(tid == 1)\n\n\t// Thread should not be frozen by default\n\tprintln(boards2.IsThreadFrozen(bid, tid))\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// false\n// true\n// true\n"},{"name":"z_8_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateThread(404, \"Foo\", \"bar\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_8_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_8_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"\", \"bar\")\n}\n\n// Error:\n// title is empty\n"},{"name":"z_8_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_9_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, title, body)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n\n\t// Ensure thread doesn't exist\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread does not exist with ID: 1\n"},{"name":"z_9_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.DeleteThread(404, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_9_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, 404)\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_9_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Call using a user that has not permission to delete threads\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_9_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to delete threads\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(member)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n\n\t// Ensure thread doesn't exist\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread does not exist with ID: 1\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"80000000","gas_fee":"800000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"UpCvBTEBB1I18dY9NxxDTFscpnEJ7EGmRSwVvrezIDHaVdiqYo41z4jRZIkmfwyNBzjXFI7HUyUiVG8qLW8PCg=="}],"memo":""},"metadata":{"timestamp":"1743088266"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":["EmptyWithManyMembers"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"scMfShiVOn9Yta1u2EwuIhdRZUMCS6JsOk1hCf8maLST8fyfNvy5NqjUSTrigOl9PDdPw8pOAWSrozHtdpd7Ag=="}],"memo":""},"metadata":{"timestamp":"1743088542"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["1","g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","owner"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"5jeezE1zySVWx7EITbwVq7uH0Xd4YRb892Zj4/IuzR0cOMmQeI4z1/CCNDSOaCI8Gs5jO9BpBEBNqWLinU5rDA=="}],"memo":""},"metadata":{"timestamp":"1743088547"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["1","g1e5hud66rs7ye4zgeqmqvwfhurs2mnf408hdqcl","owner"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"pPecxurKu/GsEfy5hzYJtsFYeZocJOOKCtO6AITIQqiuLpnTpeZH6JhK9BwXR+oF2BxdxnCcv0zxfRwYFsz9DQ=="}],"memo":""},"metadata":{"timestamp":"1743088552"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["1","g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5","admin"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"M3ios3FSUn4QhWEzjk5522ylu2/NDM6l23BzFAX9FutCyVSPVOCcfUL3dilXBJssbE/ua85YbxX4oKQhIXlZCw=="}],"memo":""},"metadata":{"timestamp":"1743088557"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["1","g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk","moderator"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"9guww1ebnPYbi6Ga3kWiMNGADgxhgQhfqJ/jO4yXox4lu3e+F1OuzY3pv2k0bx08BgDNxlcQiPAl9tnD0pE4DQ=="}],"memo":""},"metadata":{"timestamp":"1743088562"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["1","g1ym6zxff3xq7wfldcs3uyu7x7z40gstggcx8zdj","moderator"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"iB0QqjoRMz9RINjdZl/KwFigZp2gwu4nRzYEzYytNZ3pSmEiW1U5XKkVa1a4F9cgnb6i0D/hRaO6PM3sbcj/DQ=="}],"memo":""},"metadata":{"timestamp":"1743088567"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":["TheNumber42"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"yDnBKZl/N0OA57TUE9CYuaOmsq4CngzSJTz998+xPupn3e+ZowH/6LPHzT/KMD6RpV0NhXfFcKGfabdwrVp9CA=="}],"memo":""},"metadata":{"timestamp":"1743088572"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateThread","args":["2","What's your take on it\\?","Seen in many places, unknown to many"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"eO/CDQ2BpqRfgbEU+hjFCfT2ZfLSjdVHsUQFkQPg9uMeLPt+6dspcvNwdGMyKyjLpX/XJLUYhB5lRiGFEobdBQ=="}],"memo":""},"metadata":{"timestamp":"1743088577"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateReply","args":["2","1","0","What do you mean\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"SllyWZJEiwZ2CXsqxt9oKLmOH9avCUYAMOmo4mhZjY/1fmme/KVF4tMzFalVL2ET8xtz4vt3LV9X7akE/AZyBQ=="}],"memo":""},"metadata":{"timestamp":"1743088582"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateReply","args":["2","1","0","よんじゅうに\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"2gX/Xz81RrWriDMiPFrdvMYTv/f3Zstm04aS3pFKgQLA+YYI9lmvBoHeUqG7kJHqYQB5UH+gvub6jYFWChQmBQ=="}],"memo":""},"metadata":{"timestamp":"1743088587"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateReply","args":["2","1","2","Cuarenta y dos\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"I7b9T9ySM++D/ljkcDMZaTDD+busyeGWqy20meKnjed4Y0Vpfwn0MPDHLTHVHR/YvLkh9pSg5TusKBovAnvRAQ=="}],"memo":""},"metadata":{"timestamp":"1743088592"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":["ThreadsExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"G05v1EIxgEzw6x/uDdzVGVScbkarDA45IH1/4h88z5bwUdnxPTu+m6xIscF4q9QMj30YUub+gxrbjZRNsBY3Bg=="}],"memo":""},"metadata":{"timestamp":"1743088597"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"TGWslXzdNOGeWEgsuoacsYO/12F1Oc2+uUIPWCWsZTU04agRN2Q5spfDaMTWqyLOJmTXD2ZuCTaouslHvlqiDQ=="}],"memo":""},"metadata":{"timestamp":"1743088687"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateThread","args":["3","Seventh","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"kgUd8OKqQ6VxzlmuQCGaNuannlBkggo+lVewX0qYuHkmXGB2hv6567PR3EETwzBnr5WnDXIJqy3KZOnRqyobDg=="}],"memo":""},"metadata":{"timestamp":"1743088732"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateThread","args":["3","Sixth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"GJGsfy+ilLZD/X2ZoVLUg3sX+IIl0GQ7/F4OsVpmtuJTMKBksj+Wq1IcApACXrY5UcGPECd4senkiufoway2Bg=="}],"memo":""},"metadata":{"timestamp":"1743088737"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateThread","args":["3","Fifth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"kPOglUqGSCpwjQFL/3bzJrVW0OLrat8foZKFUDxSeocwp5YFGKF6nF+vZexQ73l64Sp0Gy3Dq6oNrbQtrtUtBA=="}],"memo":""},"metadata":{"timestamp":"1743088742"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateThread","args":["3","Fourth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"KkcRphH0QgLr7TVjxbI9K9ugmNTQrdqzipD6ZMIWm+8JMZxEmc2ZnlTMxSvV7Kfna4lKHglXG1uwPaf4+GS+Dg=="}],"memo":""},"metadata":{"timestamp":"1743088748"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateThread","args":["3","Third","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"WdBaoKWCKTQkpeoFZDp2i0akcSzXwLhYiUsy+UZHHeH6ts0Yrgo1pbJ5DQ0DU84Oa+4LqQSACg20IlKxEU+LDw=="}],"memo":""},"metadata":{"timestamp":"1743088753"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateThread","args":["3","Second","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"BHwkfU7hKOnJLSFo9jzgSMpR9Ph/AN4aEPS9765/AXtsgonMhLP/3hqaKbwMJDBnOZGA3NLLzsEixkWkAUiXCA=="}],"memo":""},"metadata":{"timestamp":"1743088758"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateThread","args":["3","First with many Replies","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"YwzTOqsSHFpqbkxe7Lbgs/YG0AJ2VEET8WcLYTDcLIDdcgXU9/qWxcgvHU2Zj0SlWZ/MQxlwqodxS8vNW1vBCA=="}],"memo":""},"metadata":{"timestamp":"1743088763"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateReply","args":["3","7","0","First"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"i+jQrSugXLoepYuOI61s9nz4/8IBe9PTg2f0cY8q/a6brmY2mVGpiAl/cdXfE9iV+SJd93wKmN9dZ05cR/CMBw=="}],"memo":""},"metadata":{"timestamp":"1743088768"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"TGWslXzdNOGeWEgsuoacsYO/12F1Oc2+uUIPWCWsZTU04agRN2Q5spfDaMTWqyLOJmTXD2ZuCTaouslHvlqiDQ=="}],"memo":""},"metadata":{"timestamp":"1743088768"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateReply","args":["3","7","8","Sub First"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"rMGW+7NTnMyb5vNRwokQ4EzPDlNHlZPVWyocA7WeTQFdxf5aFa0le60H5VVs2HaMVPzsIp487WHoGDQK6MdICg=="}],"memo":""},"metadata":{"timestamp":"1743088773"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateReply","args":["3","7","0","Second"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"s0OkaCIGbsJNisogv2Zky1STEu90kocAzdBcTE4jgzgHb911hK635utl2E0rMkHNTWOmeUkq7hAmQfLgvT4QDg=="}],"memo":""},"metadata":{"timestamp":"1743088778"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateReply","args":["3","7","0","Third"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"jDHGdyQvBqEgOG/MkI8gaB768tD4TOD7N5dEcE/4zlo2r1bTZ+yRlAssJ0hyI26ZtL84fIsAF0OJqXBFcbtPBA=="}],"memo":""},"metadata":{"timestamp":"1743088783"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateReply","args":["3","7","0","Fourth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"RH3RT+iPFcV3PK9hW4V2cj6y0hyWO/m0+LF7kyFUj8kh89GhTl8Y+PZlSg1+hgLTvXysNalcQ7gcCa31ioqAAA=="}],"memo":""},"metadata":{"timestamp":"1743088788"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateReply","args":["3","7","0","Fifth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"N7QdWOHZ00zTpC1gUlDeWpqksm5bEa0E8kIG7US0RoJlfJoA6bYJnKvYLfWLT3rjAd+WjCrYGEL3x99k1b+xBA=="}],"memo":""},"metadata":{"timestamp":"1743088793"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateReply","args":["3","7","0","Sixth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Tc+9Pfq3bXB9/iWft9WdDkZCyZqIt/cj0I5mjPTJUBkEU9it6DlbWBtoX/I41ZMhl/8pGWZE3Pk2Xf6PYKpGCg=="}],"memo":""},"metadata":{"timestamp":"1743088798"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateReply","args":["3","7","0","Seventh"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"FsndRxleuoPcBtJsWwmiMbprc23f0MLdTYey8ODwxVgPixCblfsQUutoJlS+0vi8LWrXiGcljZRhodWpulm1Aw=="}],"memo":""},"metadata":{"timestamp":"1743088803"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateReply","args":["3","7","0","Eigth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"l19kAOOXOqokE5AwuzrvipkDZa0JRnMwtwDj6KCvdQWLg+waC/MIwJQreyQXmmLCAHZT0OqT+9v7dlSHbTOKAQ=="}],"memo":""},"metadata":{"timestamp":"1743088808"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateReply","args":["3","7","0","Ninth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"aAR182ffO2DUJq0pPk+A+NbdoZQoypHaw1sDHd5G+9vUry5xMDim1HsdFW3QShNBLqZXvQ3qoxv6iSaZL0ODAg=="}],"memo":""},"metadata":{"timestamp":"1743088813"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateReply","args":["3","7","0","Tenth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"xiIp/D646n9lzbcibPnYgzFmPTazymWGhN92iTWaFeHI4wTLpyYIJKsPUdw+KQlFNuHa2y9aKBd4yQlvVsdjAw=="}],"memo":""},"metadata":{"timestamp":"1743088818"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateReply","args":["3","7","0","Eleventh"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"yOKfb31908ul+yRphxZ88e0zOyPULG42OC1CpuZ10/RXHIHNYX1PvmR7QNSz7rqys/wfOiPw5qB922Nr0XLSAQ=="}],"memo":""},"metadata":{"timestamp":"1743088823"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":["ReadOnlyExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"9m9EHDFKaLcJER1huUdRr+08Nm3/vgGfS2jJ0Oyl+cTpWSY7CfTzAfaxNKF//ZGI3ZaxJ2lCXtEq09Turai+Bg=="}],"memo":""},"metadata":{"timestamp":"1743088828"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"TGWslXzdNOGeWEgsuoacsYO/12F1Oc2+uUIPWCWsZTU04agRN2Q5spfDaMTWqyLOJmTXD2ZuCTaouslHvlqiDQ=="}],"memo":""},"metadata":{"timestamp":"1743088828"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateThread","args":["4","Example Thread","This thread shouldn't be writable"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Cu5zP7ljE0oHtImrnKMP/AgnL2qewUGaeYKbH2jvRrVJvYRuZjxqMKIt4zDo87Bq9yafbxOP0FvC5mH6M5j3Dg=="}],"memo":""},"metadata":{"timestamp":"1743088833"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"FreezeBoard","args":["4"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"WEDE5jj5zdaPgW34QPv2vLcALNbfaxW8aCh8XYl0rfOtTpAk1+KkbVcPrT00+L//rLfVZO0COkld0XznaviNBQ=="}],"memo":""},"metadata":{"timestamp":"1743088838"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":["RepostExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"BJdWaWdbstlqzqNpDB0NLEx3uPEhBXFszXquYMYaM2vKd03XKGnIblZSpO3kxNyPh+d38Gv9d9zqklemFIPMCg=="}],"memo":""},"metadata":{"timestamp":"1743088843"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateRepost","args":["2","1","Custom repost title","Custom repost body","5"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"NLxVsFGXVhZjHNMx3dzcQR3uV1DPgWzEnCSERLjKWt8vXt3bTBYcwfZRHEScd/EOhwJQuMCL+ongrFNhGbXYAQ=="}],"memo":""},"metadata":{"timestamp":"1743088848"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1w3m47vguq5jmhrga6zmsfsta59zdfez862wpqm","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"kUvKjL7MWbAN/Yd1ZA8JXWriUGEz44sTKkJtXOluXhBJ/WpXKFTjlHRzlXyPeJ9ZeWiw2rsFmstRZS4aZa4lBA=="}],"memo":""},"metadata":{"timestamp":"1743114911"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w3m47vguq5jmhrga6zmsfsta59zdfez862wpqm","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["Carat"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2242500ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"oK4AiP/hD/K9F/BSBGtOqDqsnK4sNQgZqdj0LA2+T06+lbtR1CTlgd32EYrxr6lHFO4/WXZPKOogYrj1wFEGCg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743114971"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w3m47vguq5jmhrga6zmsfsta59zdfez862wpqm","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["Carat"]}],"fee":{"gas_wanted":"20000000","gas_fee":"6727500ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"G3sIdjYhZd4vGSHLFKB7lX7jyKPUc7k/Nm4AQmjvpHp4+ZeZzbfkZLIn41j8ZPlol5aL7wWAXSE9HegvYi2EDA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743115026"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1w3m47vguq5jmhrga6zmsfsta59zdfez862wpqm","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"gMMekCP61oU1AYd599yDtLwYlzMreAWbnNHwqgiLCSJ60nQe5/2ZlWupF71iZkPM3FQo+ZMaHpjQZr63osxpDQ=="}],"memo":""},"metadata":{"timestamp":"1743115137"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w3m47vguq5jmhrga6zmsfsta59zdfez862wpqm","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["Carat2030"]}],"fee":{"gas_wanted":"20000000","gas_fee":"6727500ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ILrkf6XHMRX7ZTi89/NG3CNlQoQINXPX8t5TZqRes/8wLOZdRWX/jmuOA9IdmxTpLOUkD8agytKg3qrKtt3sDw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743115533"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1h96guwnyx0ft9fwquzrrr85t5jah8x733n9hzt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"377mTdkMA+zMXgKvpo9mOSKcDDNjj8t4emFi6DtPAYUkY38DaFXGU91SCp4H9t7IJZjHfHYL9Ywz1cV1JcgRAw=="}],"memo":""},"metadata":{"timestamp":"1743123288"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1h96guwnyx0ft9fwquzrrr85t5jah8x733n9hzt","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"OR8HdD0KfrSQ8JQSYPqYVnUBMpHTySmlcanmYNIXcxaSqARfYkVV2jPx7fkwb8WKVL0Zah+6OxKvwJEPNhTNBA=="}],"memo":""},"metadata":{"timestamp":"1743123323"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1h96guwnyx0ft9fwquzrrr85t5jah8x733n9hzt","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"REyz6VR4VyzYu6nsv/RzlTLD0Hl3rp8QaVQrOoKLqYKljMpQhx/4ERwHHEFeQ255a4Cal8KqWBu9AGWm+miIAg=="}],"memo":""},"metadata":{"timestamp":"1743123363"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1h96guwnyx0ft9fwquzrrr85t5jah8x733n9hzt","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["beyondgold001"]}],"fee":{"gas_wanted":"14401069","gas_fee":"144011ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"NRsQAE/eEeq24YrCgrrE805S7DQiArZk598n1rIADR9213UN9Xi+a5w5lYwSLVpyLhDOGGcxOtuDEpCPua2VAA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743124181"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1raq9sp87ltcs6gq2k87sfnclrttaccawtwpmwz","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"iCP4Wa2hmbWjRy5/yqqvKkv292GnXqo+4ptsqMRIvmdOcqzM9Qb3maXQYL3YI8hYhLPW+tjFgSJWwXyMGHT6AA=="}],"memo":""},"metadata":{"timestamp":"1743124877"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1raq9sp87ltcs6gq2k87sfnclrttaccawtwpmwz","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"eJ0vUm120w4vTPA2aB0UIINcvtRUvOY6pVN3yxG2IB7yrHpHED7cv9WvdWzrKjTwQXJZRBBsJb3cy+S/3gTPAQ=="}],"memo":""},"metadata":{"timestamp":"1743124908"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1raq9sp87ltcs6gq2k87sfnclrttaccawtwpmwz","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["goldk003"]}],"fee":{"gas_wanted":"12000000","gas_fee":"359970ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"2XnI6NyWtv52/tLoGLEW0+ro6wgswRqa+Li4FAYGHMyypWw3cFypv1rcDYB05iGeRZUOt7KdV5gZFMc77NTaBQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743125028"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1w3m47vguq5jmhrga6zmsfsta59zdfez862wpqm","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"gMMekCP61oU1AYd599yDtLwYlzMreAWbnNHwqgiLCSJ60nQe5/2ZlWupF71iZkPM3FQo+ZMaHpjQZr63osxpDQ=="}],"memo":""},"metadata":{"timestamp":"1743127263"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g164zxxczngsawut0jvlccqqxj6s4z2nyhl4g7lq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"T++hV8/lYjmGKWEC5WTG5ZfkYNkP5kS8ZwqQyewh3+tRmNk9yC7T+qKQE9sPpIhZSGieyV+YTXlDmpLRfkOuBQ=="}],"memo":""},"metadata":{"timestamp":"1743136217"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g164zxxczngsawut0jvlccqqxj6s4z2nyhl4g7lq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"T++hV8/lYjmGKWEC5WTG5ZfkYNkP5kS8ZwqQyewh3+tRmNk9yC7T+qKQE9sPpIhZSGieyV+YTXlDmpLRfkOuBQ=="}],"memo":""},"metadata":{"timestamp":"1743136744"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g164zxxczngsawut0jvlccqqxj6s4z2nyhl4g7lq","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["ryujh770404"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"kALPbO6hLSGXL2cbk7XRc51k4J8Z64AMJaThSNR0MBdeVy7zosEb4KThpxZGQZj6ZBPY3B56YC3Ap4fGsng0Ag=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743136929"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1xq3vcj86kcyyfr54qrrkmyfukhfh983n50hrfc","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"o87d4pq8L2OCaiWOJ4nezV20h3q/A7EbJNZnoIXpcqUOnGBLy+d7apaF9Pu0vcNXqTY396lKQmVEOsycLSoJDA=="}],"memo":""},"metadata":{"timestamp":"1743137581"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1xq3vcj86kcyyfr54qrrkmyfukhfh983n50hrfc","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["ryujh760404"]}],"fee":{"gas_wanted":"12000000","gas_fee":"75000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"sR9ouKz3n2x1dkkP/r7NLzLfVYVpwKWNd6+DJIsqN9wU+a7INzoVK9b9pSuP+81iJVW3qvM0v0jf2JPLFi94Bw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743137847"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g150gdvn780ws7a3s9qpdvv7h4d9hq6vh672ely0","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"QdSHZ4u3jqdlBTtHSIES74qwyF/OYdZMIJskX4jNg8/2F6U6hTck0hY2SSV+dPKWOn2QhbCiKiFd5Cg2deAbDA=="}],"memo":""},"metadata":{"timestamp":"1743139792"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1m5ernzpt3pjjeu2yfz69r2ts4dxm69842gjad7","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"hE9uxvJ70ShKbZ8wVEInn7JEc6lVXJpBWUX1QxAMIMKKzemZEUng4bo8//ZdIUvuF9TDyzAesQQWmoBW8I9TDQ=="}],"memo":""},"metadata":{"timestamp":"1743149181"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1m5ernzpt3pjjeu2yfz69r2ts4dxm69842gjad7","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ORDBp1YHhb2D7pmt/AKUL4uxDSl/zm+iTtVj0XPASqe1jRWPm8w+JIsT4iqvj5qT2kOqLE0YGmMnXoejMWtCCg=="}],"memo":""},"metadata":{"timestamp":"1743149261"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1m5ernzpt3pjjeu2yfz69r2ts4dxm69842gjad7","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["COSMOSIBC0"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"u3XrnFelNxlr8oXCpc+PQhibXfal8Fpf2ttWO0A2ijO2SBMVRhlDAfL6hSbGr10J554GTF/AWp+gGULhsDjiBg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743149482"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1m5ernzpt3pjjeu2yfz69r2ts4dxm69842gjad7","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["Cosmosibc0"]}],"fee":{"gas_wanted":"20000000","gas_fee":"120000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"0vys7EDEF70tuHkbtBTDB04z2aoHAFnZjW8LhqJHmmbDYn3RD27ldz9vxN19Yog39bG9XnIpyYzjRC3aWyRxDw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743149582"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1m5ernzpt3pjjeu2yfz69r2ts4dxm69842gjad7","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["cosmosibc0"]}],"fee":{"gas_wanted":"20000000","gas_fee":"120000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"MXWHbNtEXT0l1MJ9chrdCt7scLj/IokwT0nyjCUnI+cirhbjVc/xu8or7hkk6kPdlTEs9I5U5K+AkxW+81GGDw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743149642"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1m5ernzpt3pjjeu2yfz69r2ts4dxm69842gjad7","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["cosmosibc000"]}],"fee":{"gas_wanted":"13977456","gas_fee":"139775ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lXw6KQTw0wF6yye49gOAawBoq9GkdEcFji2Q6jLirycR65twD3In6zdLD1Toj7hweyFpvOdtvL+i1pVssXrhBQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743149708"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g14p5s6hltglhf5cpsew52x90daszrghe6nvu9ut","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"+fbpocawG7h1NKzlzMhhKwNu4tlE3xzKFBtZmT+xBP3eIcTkOotnuW84efmKhGz8jF2O2dzT4UeU82acwkmWAQ=="}],"memo":""},"metadata":{"timestamp":"1743149958"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14p5s6hltglhf5cpsew52x90daszrghe6nvu9ut","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["akkk_0101"]}],"fee":{"gas_wanted":"12000000","gas_fee":"359970ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"sYPCSVvvo0Xo0keP4ibZljJ68yXCI8z+F0kka/MCpbC//94GO8qD2kxcg8BeqHmkIXnMmwq4BYrqifmVovN1Bg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743150023"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g152mreazrjaursjtt906j6hrp62xclqy70z77fa","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"jYDlk0eL67iKaWJ3TwnQwAHKUvx83i1K0+wVKg4V1J9gaLJ6xKZugey4Yp8IwWGoLSA/Tt+lABZ6LNWQRqSOAw=="}],"memo":""},"metadata":{"timestamp":"1743152833"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g152mreazrjaursjtt906j6hrp62xclqy70z77fa","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["kkkoii001"]}],"fee":{"gas_wanted":"12000000","gas_fee":"120000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"RMDT0P+0AWsU7Rfxx9aj6qMmItBHiSlkzM90C+EjUfU2zMlJi3qaNOonuJr6fOoIhIQMdV3qhYTQK/bydV7OCw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743152923"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1m0fum2agr0luxvsfsc5dsuz7t64w5z2p55tw3t","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"v8Nnhw/6EzWAm7A8hqNgpu1jawkcB8VO6qwEBT03QtQ83NAg2J+p4jkX45LRKenb8Xuf8UXriX6FedRTqGYyDg=="}],"memo":""},"metadata":{"timestamp":"1743154783"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1m0fum2agr0luxvsfsc5dsuz7t64w5z2p55tw3t","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["djujuj001"]}],"fee":{"gas_wanted":"12000000","gas_fee":"104510ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"+AYqnaAEI5cXvCzN8alSINe/Us53Kz0aTYrYt//+F4R273hn1XR0O01/ugUrv2ndj6x/bgUUaBUbxPTbJ+y5Aw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743154838"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1mqtxlj7tgzvcqyeftl9ztaw5xslfc5v3u8u8jj","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"NPLj5THD7rgqNZwpaFxKO1YAVA587iKse698EUu+apZLiu6BBWI7WjtPBLULi9YcYfFc4BOO7d5zsXnaP3/5Ag=="}],"memo":""},"metadata":{"timestamp":"1743160282"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1dzdz6hwegce4p00z58jnufklzdmfcr5m4clev7","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"w1WPH57JURAqrXPup0VG0nnGYXhQcUhipMvfOfHiYmb4e+bNpiE5stXK+Wwx4FpFATdiY4XiO6fN1ZR6+j/lCQ=="}],"memo":""},"metadata":{"timestamp":"1743160338"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1dzdz6hwegce4p00z58jnufklzdmfcr5m4clev7","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["Gra_001"]}],"fee":{"gas_wanted":"12000000","gas_fee":"6695070ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Y5BIc5zBKI555EwQ3s81re8jor5tngYCcxiCl20NdmwBnpUFGQ0I6e5eoG3XrVs4tvIzVTIL23AnIU2bR4sZBQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743160418"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1dzdz6hwegce4p00z58jnufklzdmfcr5m4clev7","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["gra_001"]}],"fee":{"gas_wanted":"13346047","gas_fee":"27805ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"IyNZI5hDlEW5vk9tEhZW5WD+vkShriLEdZ++258J9PZMZ+PPH2eqWK+zjmp0wxuQ60Bn0XCO/ZMlYgFDfAiKCw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743160493"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1mqtxlj7tgzvcqyeftl9ztaw5xslfc5v3u8u8jj","send":"999994ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["LSM123"]}],"fee":{"gas_wanted":"12000000","gas_fee":"75000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"6IxTCIB4fOKebCrDFQbD7iyefCM7ANImrZoINajyYTsp54Q1Q+ZHPHsF+U8jSQan1eZOjyBOxV8soygwJDOXBg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743160528"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1mqtxlj7tgzvcqyeftl9ztaw5xslfc5v3u8u8jj","send":"999998ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["whitetry5829"]}],"fee":{"gas_wanted":"20000000","gas_fee":"75000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"RgoSqCgg8EeFX9ecA55L9MiWGL30vHmaXJXxOlnfaIrkzE13rgkUXPLRRBVq02Ac0kbF8b6PGGzgtBXGyFHDDg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743160643"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1v5s42qmh7zy8l0y3nnnf76kfkltfsvr7sqewxw","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"R9h0ERwYu26UWTbn6S8LNMwhQDbP+k2g6URqkDBxCkJt3aU5elNezPZbp+InynGsk6rFsMK/S7KXhoeK2y1YAA=="}],"memo":""},"metadata":{"timestamp":"1743160754"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1mqtxlj7tgzvcqyeftl9ztaw5xslfc5v3u8u8jj","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["whitetry5829"]}],"fee":{"gas_wanted":"13999401","gas_fee":"87497ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"itXeSDLB8DpbcroaEmzmWpj36Apov36o/Ity4PwdtPe+noa4YTsBob8bPg5quOSpWqLPnBsnyS5wEnl1/Kd/BQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743160774"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1v5s42qmh7zy8l0y3nnnf76kfkltfsvr7sqewxw","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["nft_002"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"fNakhHvDQEr5XTN4K6mIHpxDLHKzKug+anVwuQxcqx7YVYdMsjKL/02iX7nW3DXZOmLgistFXPlOi9x+JCKuDw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743160899"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1xspr9c0e032zr8j4er79fw3vm85exsg2lm67se","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"nDpBiYt36k6cDdcaioPcuID7Y+F24HDY8yCoM7u0xTl3K9xe7tFe6K+YoL/rG9HpXe2SN6Uj0pd67RQWxL8VCg=="}],"memo":""},"metadata":{"timestamp":"1743161074"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1xspr9c0e032zr8j4er79fw3vm85exsg2lm67se","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["bts_003"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"zSOvfne91kBKt8xCZcbDpfcdClhtBOEDnEjzxLN/0RFFO5LhVUnfQc/7UZFsANfD94oYeEKeTeOULYYhBbLaDg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743161135"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1x9au3m6xwp6u3wrvl64jrxd9tdq5mwk8f4n0g4","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"nG3h5s1X5mS0VCx+JEgJnqR+94ZMifii2zzu5w15aXeInBtcjSuJPiFsLTYqupE4ygCpyqv8HxGy032aL0ApBg=="}],"memo":""},"metadata":{"timestamp":"1743161355"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1x9au3m6xwp6u3wrvl64jrxd9tdq5mwk8f4n0g4","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["led_0468"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"1+0OGkVHG5+Jghk16073QxAJKNVjCQDcUaESdFV7ToCh1z8kywQRdC3PxV32UmBrrBDz8Viquv97TE7AT2/EAg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743161521"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1xn6ayqyefzckhfg7fnsd2sacq5ks09a3q60ddh","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"SIyY+ySsnVpTqxkixnyCeOsq/LGDOtVVydILnxE0n84CuSKhyaUl/BTc8x/PVHQoWTHjGaup2/WRG4B5FlyrCw=="}],"memo":""},"metadata":{"timestamp":"1743162122"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1xn6ayqyefzckhfg7fnsd2sacq5ks09a3q60ddh","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["ger_3429"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tIXTkGQbXH6M2rAhwL+gkzMKyXLRnCLZxsq2EZWHlUDjXlM/Fyx4u6JsXAiNbqC81yRS1bFnJG5PEzTT4IyCAQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743162218"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1ft92z9xr8tyaa9n7ulsc3hkn09e5m9esw8z3jr","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Njxm4+mEgtsluhS3TZFPRPeKFljeSyG+Jqh9Lruc6iBNdhYp2iOjYggpMatwMFqDDs5kam287bDJmqgcgrloAw=="}],"memo":""},"metadata":{"timestamp":"1743162408"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1nzr770ueh2zkdlu5kjq0t53vtzdg98smxk4vd6","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ZuH306lGvjibzT13MhRhHVUcorlIr3u2h9eDDnMf4hAepsb8FCnK4XFJCI1Xm/i6G5cBLbLD1K8uguk+NGEPAQ=="}],"memo":""},"metadata":{"timestamp":"1743162483"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ft92z9xr8tyaa9n7ulsc3hkn09e5m9esw8z3jr","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["torii_2807"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"LnyeSFcRhKot2B1CeWKgnpX6DPvTZrgg7pc1V4DVpS8VRu37sD0P4jvtrWDOqabGh+W0oQvLukHxQuEqUBoRAQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743162553"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1nzr770ueh2zkdlu5kjq0t53vtzdg98smxk4vd6","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["dotorii_006"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"bfYXdLVXbpgymN0+sg0Cgwt8z9bXmdrufMcSKxg955Y5R+yi5/wa/G81AAZJn/KDf3pydtGBz/KoH52FIptYBA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743162614"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1xk8nag6l3fka6lpz6r4949ak9uv57y7cek7ar2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"4U3unsgZ8DF+mkHZa1mL7hhSqnPPo7BFHDXMcZ5uwB4vd0lm2hDGq1wJkMu3JDD29eRvAN8/cIEzjYJSb5GSAQ=="}],"memo":""},"metadata":{"timestamp":"1743170800"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1xk8nag6l3fka6lpz6r4949ak9uv57y7cek7ar2","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["kiuuj0123"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"UGNt7ssQeAv1L1b9I6CmQbNWKcN7p8p+RKgS79/Bprn0xhWAOl3GWah//J/oijrkJLvUZr8XK3TPG+L6GGziCg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743170850"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g150jcyf7uluqa6my8fcw6ku635626l6vlvz3wce","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"i5jGZfjfgCAvtPoNgoouoXJKnzsSsM0eP/QA5UVtCs5nTDsr8Y1HCROW50ieXmpKmaGAN6mogbHclGUGaZ7CDA=="}],"memo":""},"metadata":{"timestamp":"1743171452"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g150jcyf7uluqa6my8fcw6ku635626l6vlvz3wce","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["kmkeeerr01"]}],"fee":{"gas_wanted":"12000000","gas_fee":"63810ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"14YbCqEM3VxZ5mMMqLfUa4eO/I5xxqEbeT/hKTfVkp38Q/2AbhVzmG17dz+JTwKDHr3I3V/6jvy2EhBlxhrkAQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743171492"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g150jcyf7uluqa6my8fcw6ku635626l6vlvz3wce","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["okiirr01101"]}],"fee":{"gas_wanted":"14405067","gas_fee":"90032ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"0ydnCwADolhAY3AqBPZKPq83pd05JKPjOEI5FPE3r2/LAo/3+LgYPpZw7KAm35+r7aBo53Xeu1rI0rPOjv3LBw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743171542"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1e72wcq4vzuk7ag4gy9h2mjzaxvl6meag6dl7tj","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"H8tvFIN+YnTMSTrbebfuuEN+yaV3RIPwNAAsrDP6JK/UShElaDyZhoqP7HKftpM5ckx9PS+y0Q9M7xTrJZy7CQ=="}],"memo":""},"metadata":{"timestamp":"1743201216"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1d7y375usd6f7jqgkz7am0ddrn5fygn6lezml4v","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"vcMy5OOh9FDL4HyBIr0lvUE53vl5EmsppVGMB+EdfTo752gfEDfER5YBWFz5eFmpLFgrUF3KiisquGjeFmojDg=="}],"memo":""},"metadata":{"timestamp":"1743201241"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1zsq8w5fwsn0l5azk6xaglxsphfrpayjt8x5477","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"D4YOEJDYXPXD8GWW/5ohkfQPbBTO5IkqXHy+/iQL+mNYhuQcC6oHw55PMbBa11Di9ubO95g1EFNnludHEgqODg=="}],"memo":""},"metadata":{"timestamp":"1743201246"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1t0qd7ngz4gdwa7thqk42yy30ld7c9v5d7en3zx","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"/KOCoCkCwBQ2AQLmfUbsfT5rtcIZmpKMEi4l3LxWb84xoGNgicEGoFNmjnxGlUXhxGyMkQ4v8WvDVh5oulJRDg=="}],"memo":""},"metadata":{"timestamp":"1743201376"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1t0qd7ngz4gdwa7thqk42yy30ld7c9v5d7en3zx","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["fog112"]}],"fee":{"gas_wanted":"12000000","gas_fee":"6327390ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"/8x65RRk1w2w5/ze2NrowabN6SCwOpQ78wxlR6kO+SUGIsLUBhVJq2tIM8aEVci17Knfa0RqRfUvQEsyrryyCQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743201441"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g17p4fluwrat40h3g0nam8gnnsppmm6fz928n7lt","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"oY7OD4DdYI+Q4YXSQGwqsnT09JTiWbmw5NOf2eAF224XesM5XYbHxSxr4Ivnnw9oquMxYEzLvpktbQGQy/lsCQ=="}],"memo":""},"metadata":{"timestamp":"1743201592"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17p4fluwrat40h3g0nam8gnnsppmm6fz928n7lt","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["fog111"]}],"fee":{"gas_wanted":"12000000","gas_fee":"6327390ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"PxWJH+4t3lCb2hoKFOrxs/vr/jPZsWaWCpnARvbgr1gs0ADVeS466q+X8Ga7YMv0MZC5IHkmJ8GqSZT9YSKuBA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743201647"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g16q20g5hc498kn2ts02cpqu76aq7tppvf3rnnnq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"VGX8csUdPrOwlvzGFzpyf5yl5rOk6T+jbNXi0aXVekOKbwZYNH724k6oIS5HRFOA4yzMoMQcCGCo6LCE6yHuBg=="}],"memo":""},"metadata":{"timestamp":"1743217293"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g16q20g5hc498kn2ts02cpqu76aq7tppvf3rnnnq","to_address":"g17p4fluwrat40h3g0nam8gnnsppmm6fz928n7lt","amount":"1ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"cDZg+m4bpMVfwS+qBcUS3KIQ1z9N9+UZ2w3zTUU6ZQp/b8wYtmcbawHzggoTgOO3wdEHY0Q2gQcSu8tgjuG0AQ=="}],"memo":""},"metadata":{"timestamp":"1743217514"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16q20g5hc498kn2ts02cpqu76aq7tppvf3rnnnq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ovZIWmikZA91mrBWOyGyGMKq+cpc9McImc/vz5H9Kwho2cQX90KOLsFzzMeI8uE+z6roO5lDX2y0T+SJts4wBQ=="}],"memo":""},"metadata":{"timestamp":"1743218441"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16q20g5hc498kn2ts02cpqu76aq7tppvf3rnnnq","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"BWQRmH29NR3M0seJH82ibhJtTXNeoIMoUzQJrUqTBMOOALJAkFRM6GggxjeNpz3CDTgTuuIQlykxIprwwiHtDQ=="}],"memo":""},"metadata":{"timestamp":"1743218642"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16q20g5hc498kn2ts02cpqu76aq7tppvf3rnnnq","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"20000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"rzkRxFN8vMRTDjoBNYrXk6RyWvw53U0uQxBxfv7Nal+3eehsxIPznbiAhWO3pIvayoQks7P61CGwezl37+CGCw=="}],"memo":""},"metadata":{"timestamp":"1743218712"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16q20g5hc498kn2ts02cpqu76aq7tppvf3rnnnq","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["eds123"]}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"sMDlbimNxG9unrAAkWhGo4+JffUC/hixubmw5a5nfvCAS+ZPt1pdu+8PsdIMGJ8i3qslLQclHjphNPej5Lm/Cw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743218933"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16q20g5hc498kn2ts02cpqu76aq7tppvf3rnnnq","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["eds777"]}],"fee":{"gas_wanted":"13204390","gas_fee":"27510ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"9PJOy3Vh6mu3WdjVtXfvyIl1uFgjz2v9K4Zjh4DTjjPDpNdlnc6vRrtKYJUPUHp9dq0hAPsxB/nB9cHGMIfGDw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743218993"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1wk0q6cfjuch8x76kkylv5fjd9kmtn0kfanz9vr","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"mqHGwsyCrYzdC5uD53FsnKxx7gviL26uGQad7DnNFBKUIHC10h9vg2UPTHhDxcVulqxzd+iZ1sK/B4Z2icbqAg=="}],"memo":""},"metadata":{"timestamp":"1743220146"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1wk0q6cfjuch8x76kkylv5fjd9kmtn0kfanz9vr","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["mmm731677_2025"]}],"fee":{"gas_wanted":"12000000","gas_fee":"75000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"PzLF2dLTCnTkaiNUVJHtIvupdUJuCdPfjbq2QO42f3OPG73w492nNmr5AZDT7Mau4XvOZzOOfGAIjLwrV+xXAQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743220427"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1wk0q6cfjuch8x76kkylv5fjd9kmtn0kfanz9vr","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["mmm731677_2025"]}],"fee":{"gas_wanted":"20000000","gas_fee":"75000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"1xDTznfOyu4wZw5e6Q2KSZgrKvun6yfEnHsoK9nYAEMZXFHe9x7DyUO/13ixlGrrWjZbvOizCRx6QMCp8YuWBA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743220502"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1wk0q6cfjuch8x76kkylv5fjd9kmtn0kfanz9vr","send":"13000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["mmm731677_2025"]}],"fee":{"gas_wanted":"20000000","gas_fee":"75000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"xrjSvf1vG/PvQd0MZbqT6YYmfKvlMYiqTNBm2Ffp8LWjJbgZQdomnlss2O64KwIQaqJGfu6DPBRH2YztklydAg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743220552"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1wk0q6cfjuch8x76kkylv5fjd9kmtn0kfanz9vr","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["mmm731677_2025"]}],"fee":{"gas_wanted":"14669814","gas_fee":"91687ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"0faMQwGjcK6J8Z5tWkomh2epzZlbubtQqh1ZrPHq8krPy/Hx5OcwOKn6gVffbwvzBlVVQnvxNUXA4DMB/492Bw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743220712"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16q20g5hc498kn2ts02cpqu76aq7tppvf3rnnnq","send":"","pkg_path":"gno.land/r/demo/profile","func":"SetStringField","args":["Bio"]}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ULLTiIKeT0n2Ke8XcrfSTBIRT8ChYlcyYnmOrnMpPWKLo//acC2Lz+a8cbqHT3qc+NZElVbYBScs1lvpX4UVBg=="}],"memo":""},"metadata":{"timestamp":"1743221088"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ktupnj4fcyhnlnedmrxhwgm2ea3cc3g0va59m7","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"BbBempY/InuP8nEs8QucsWGIQu+IzAsWtzLbNc5JyOT2tG2IDIKKSNJKnLwCHbOKxPRbslGFy6fm4Si1RbfADg=="}],"memo":""},"metadata":{"timestamp":"1743221154"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ktupnj4fcyhnlnedmrxhwgm2ea3cc3g0va59m7","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["jhs9629_2025"]}],"fee":{"gas_wanted":"12000000","gas_fee":"75000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"g6Qn4dd9pC/LY68jSvG7thI3XPXwcLtRIw1ofBabMa72oabsMIkqMxxteEvRpbEWwuJd2HDy2DQKf3va5heYDA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743221189"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16q20g5hc498kn2ts02cpqu76aq7tppvf3rnnnq","send":"","pkg_path":"gno.land/r/demo/profile","func":"SetStringField","args":["Bio","Neo"]}],"fee":{"gas_wanted":"2044622","gas_fee":"4260ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"w0n2CTC1X86d3+gsqGG5T6qwSO6nvtadJue3qe81/5A5ywqUkw70Pk+Sbd1ne7gZzWLHmXzwu12UJg2SSINKAA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743221369"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16q20g5hc498kn2ts02cpqu76aq7tppvf3rnnnq","send":"","pkg_path":"gno.land/r/demo/profile","func":"SetStringField","args":["Bio","\u003cimg src=\"https://static.wikia.nocookie.net/character-stats-and-profiles/images/2/2b/Dexfn2w-8a8ba5c8-3cc8-4432-b6ec-16a33c236e7b.png/revision/latest/scale-to-width-down/310?cb=20230519054925\" decoding=\"async\" loading=\"lazy\" width=\"310\" height=\"543\" data-image-name=\"Dexfn2w-8a8ba5c8-3cc8-4432-b6ec-16a33c236e7b.png\" data-image-key=\"Dexfn2w-8a8ba5c8-3cc8-4432-b6ec-16a33c236e7b.png\" data-relevant=\"1\" style=\"transform: scale(1); transition: transform 0.3s ease-in-out;\"\u003e\n\u003cp\u003eSung Jin-Woo is a protagonist in the popular South Korean web novel and manhwa series, \"Solo Leveling.\" He starts off as an E-rank Hunter, considered the weakest category of Hunters in a world where supernatural creatures and dungeons threaten humanity. However, everything changes when Sung Jin-Woo mysteriously becomes a Player, someone who can see the System messages and embark on quests to level up.And after leveling up a ton by episode 15 he is officially s-rank\n\u003c/p\u003e"]}],"fee":{"gas_wanted":"1930010","gas_fee":"4021ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Vvdf33YIpRjyuAXfErV2W7hypwojQBHWWai1fXpGpdZ74KhdrgE66Dht/H7kOnod4LPkuHUWwjfehrgL1kVyCQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743221640"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16q20g5hc498kn2ts02cpqu76aq7tppvf3rnnnq","send":"","pkg_path":"gno.land/r/demo/profile","func":"SetStringField","args":["Bio"]}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ULLTiIKeT0n2Ke8XcrfSTBIRT8ChYlcyYnmOrnMpPWKLo//acC2Lz+a8cbqHT3qc+NZElVbYBScs1lvpX4UVBg=="}],"memo":""},"metadata":{"timestamp":"1743221670"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g59gus6264wpdllv32cwh6ye62kc0mwtf06fha","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"dz5a++KoHnp57uo14scdtQd+LStXP48rkS9C+WHyU69jx4SQuzseirNX7z4pIsjxznf4mdTM98+CuG1BSOSIAA=="}],"memo":""},"metadata":{"timestamp":"1743221700"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16q20g5hc498kn2ts02cpqu76aq7tppvf3rnnnq","send":"","pkg_path":"gno.land/r/demo/profile","func":"SetStringField","args":["Bio","\u003cp\u003eSung Jin-Woo is a protagonist in the popular South Korean web novel and manhwa series, \"Solo Leveling.\" He starts off as an E-rank Hunter, considered the weakest category of Hunters in a world where supernatural creatures and dungeons threaten humanity. However, everything changes when Sung Jin-Woo mysteriously becomes a Player, someone who can see the System messages and embark on quests to level up.And after leveling up a ton by episode 15 he is officially s-rank\n\u003c/p\u003e"]}],"fee":{"gas_wanted":"1933920","gas_fee":"4029ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ELojDQf664Uiyiu9km0xSJ9ixSWs6ViONkDBkZd3pMj/hSDnFu+BCeu16ChQlnlY0jO1Cbku9EaqfXWbQa+cAg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743221750"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1g59gus6264wpdllv32cwh6ye62kc0mwtf06fha","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["kms4726_123"]}],"fee":{"gas_wanted":"12000000","gas_fee":"24980ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"NjdB6xqkx1kguxNmrmShk+Zi8R7yyp/9VAvWvWW9/GEbxRKgpk2xlWCHESRagqSb+6cU+VWnjjVgDF3a44akDA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743221765"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16q20g5hc498kn2ts02cpqu76aq7tppvf3rnnnq","send":"","pkg_path":"gno.land/r/demo/profile","func":"SetStringField","args":["Bio","\u003chtml\u003ea\u003c/html\u003e"]}],"fee":{"gas_wanted":"1911024","gas_fee":"3982ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"+XxQjuEuVN1mhE49Wrur7mJo+lu64y/9Yq3JOTKQPwSBdtwXucyms3QfzihrXDGkk/7xm0vygm14amA/clc6BQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743221840"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16q20g5hc498kn2ts02cpqu76aq7tppvf3rnnnq","send":"","pkg_path":"gno.land/r/demo/profile","func":"SetStringField","args":["Bio","\u003cimg src=\"/public/imgs/gnoland.svg\" alt=\"Gno username profile pic\" width=\"40px\" height=\"40px\"\u003e"]}],"fee":{"gas_wanted":"1905321","gas_fee":"3970ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"PTmwVNj0QUeBOfRINOMZbZ82gIJIO67WYMpU3XcJ+yBBXk0URYgBYf0TgkYG6sX9TcSXzOGPAj33v2xiulX3DA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743221941"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16q20g5hc498kn2ts02cpqu76aq7tppvf3rnnnq","send":"","pkg_path":"gno.land/r/demo/profile","func":"SetStringField","args":["Bio","Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum."]}],"fee":{"gas_wanted":"1921941","gas_fee":"4005ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"4S4H+F+510HOyh5DM25E3YonXomB6TpKlYDpFUlJgv9kRWJHxeiNt/rpzmB2kwdhfeR4Wx0Y5XiYuR5fJ+y5Bg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743222001"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16q20g5hc498kn2ts02cpqu76aq7tppvf3rnnnq","send":"","pkg_path":"gno.land/r/demo/profile","func":"SetStringField","args":["Avatar","https://cdn.discordapp.com/avatars/682266266110918705/5a6f5bc9520931a2de4241a778bf2fc4.webp?size=80"]}],"fee":{"gas_wanted":"2079130","gas_fee":"4332ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"VuONrntxOaPdBFYuh+HWkynmM7hWIpCFf4AWmjO70HmRCEcW3AORas456aX7MzjMCL2q0GWDb3lW6VTfAd8/CA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743222201"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16q20g5hc498kn2ts02cpqu76aq7tppvf3rnnnq","send":"","pkg_path":"gno.land/r/demo/profile","func":"GetStringField","args":["g16q20g5hc498kn2ts02cpqu76aq7tppvf3rnnnq","Avatar",""]}],"fee":{"gas_wanted":"1637856","gas_fee":"3413ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"F/33zCS/XWh9kWQ1S+GBFPWtA6IwCmf7MmX9eaWrO9SRNw83DJBMsuZwpkIF/Z+HZOR4aMQv4PkCOZLnrC3hBg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743222267"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1z82rqx0vnc7m87d2825y0dmf4z89k7kqvk7h2f","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"LFmnyvnfl6kImlS+PbrHt+pL/Q32UWhP38HzuQXxmQUy4EtBQE/oKrWyFPeJhNb6rQSS+9uKsi+6bAM6ihyrBg=="}],"memo":""},"metadata":{"timestamp":"1743222307"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16q20g5hc498kn2ts02cpqu76aq7tppvf3rnnnq","send":"","pkg_path":"gno.land/r/demo/profile","func":"SetStringField","args":["DisplayName","John Doe"]}],"fee":{"gas_wanted":"2059710","gas_fee":"4292ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"uElPu5IXUgVBbyUv0m2nIV1/bo23w5XrKy1EkoHxdma+VJqfFT5tbB2gxOoD2E/3kWtsYFPFG+3LAY6Z7eSUDw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743222372"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1z82rqx0vnc7m87d2825y0dmf4z89k7kqvk7h2f","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["abc_123"]}],"fee":{"gas_wanted":"12000000","gas_fee":"64110ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"qTyw41CXp4rG7B37WQB/ITftb2AtAoF36l9aScpougff6gabdC4+64ahdXWrEMIFG8DpLgOAa1s23D9VN55pAA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743222377"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1e0r7k9gjdhctgyyax85zw5ljptzyvjf270a0ea","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"LQsREUhxsQHcTpEuwMwhWbgg5S/jciT5x0p9LksaW2gZ6dgqn1IT40iRIdEU64qa+VyqD8ZyUSqhIDzYxH2xBg=="}],"memo":""},"metadata":{"timestamp":"1743222437"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1e0r7k9gjdhctgyyax85zw5ljptzyvjf270a0ea","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["qwe_12345"]}],"fee":{"gas_wanted":"12000000","gas_fee":"64110ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"+3lm85iXFn//4jKORNNmSkwVMFeAlIJSw1YuVJ66w2tgVoKxvReGz22gIR5XJlgdYpCns7aoaXnIfU14j4alBQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743222532"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1l6tj2tzetngrrurnhew04rdganqwrxl69gn9ch","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"rU2ZnCPPhz0mZ1LGRwabFS3OQXhuieEaExAyGPn8E8vwa9eeMFL3QSHZtos2XQyaEnjdOSXnLMwnDEDu7RLjCQ=="}],"memo":""},"metadata":{"timestamp":"1743222572"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1l6tj2tzetngrrurnhew04rdganqwrxl69gn9ch","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["zxc987"]}],"fee":{"gas_wanted":"12000000","gas_fee":"64110ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"VYHDevENdOTWsuz6qKBJR0mUbqpKph4toAMVmeuY2jBW+nygRhlwLoPEqIg2hKlFVo4yzqIB8EB0p5AJZZbcCQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743222638"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1v26grn3mw9u8rdqm0cjue6306q2r02wy475rad","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"MJsJAlZgncpljbBV9W1zUN1Pb2H5yerj2h/awUYJw0LN5pcCSsv+9HAp1JiCr2dTiQ59z+kmZFOSk05VD4nmDg=="}],"memo":""},"metadata":{"timestamp":"1743222683"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1v26grn3mw9u8rdqm0cjue6306q2r02wy475rad","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["qaz456"]}],"fee":{"gas_wanted":"12000000","gas_fee":"21370ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"K0QvcUqpuTS+Nf84l5Fcr07qg5eSbMfK9fjPca2JQGv7a35liSuLUhZQ70K7fv5e9ErEKWcIdKKee70pX6ErBg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743222723"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1nzdpdvh6y336sxt35yz26f5je9ndy6vdsnvjhs","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"1P10dS1Fpf1x9KuR9ZxplftR3xAvxuWauL4mY02F4lNMVSGQgdpQpfZvB/CQPiOE4jU3pW/rwTR8YDHAMT5qAA=="}],"memo":""},"metadata":{"timestamp":"1743222828"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1nzdpdvh6y336sxt35yz26f5je9ndy6vdsnvjhs","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["hjh246"]}],"fee":{"gas_wanted":"12000000","gas_fee":"19480ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"bHaA1EZuYf5bURgcUUI+34kd+b63zBlOLswrXurnV1oYAtuKsSIvvIJIC6118RLDDGuHULjSoq3/i8o2ENWVCw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743222868"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ee0eekx2e4c5crwftgancx0as5402cu32dnzk8","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"KwzwFDzlKefT1fF7snVf5C60pyYjLIy22P0IiWz7sDPuwtERzIRfUcw7a/L0U4eDemkzqTp038hxpTml7TuBCQ=="}],"memo":""},"metadata":{"timestamp":"1743222948"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ee0eekx2e4c5crwftgancx0as5402cu32dnzk8","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["vbn567"]}],"fee":{"gas_wanted":"12000000","gas_fee":"18110ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"KBp+s6+2Ps5aPhv12hcaF2TR8zPCwh4BJP0byHBMmaDvAn5uip3pqz/audQTuwTuc7Acx9EGEVxiP1RFvRqVCg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743222989"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1q8mzg6aq23fcaw88y0r2ackmq682h85ena298h","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lHNH7CXo2H9PGZnUOjsfDWgVG/ywD3DONL1xol23qUiq+yEv+S4qLdqdqT1TEXWC7WZozzZRXNYENk2IG5aTCg=="}],"memo":""},"metadata":{"timestamp":"1743223024"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1q8mzg6aq23fcaw88y0r2ackmq682h85ena298h","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["rty579"]}],"fee":{"gas_wanted":"12000000","gas_fee":"48810ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"RJqzY9VIW1/bETccltERXpAomjy6hVMsruuQmMAUybWRyILdDxUMbuQ49EiVTwGplt1H59dZm85j1YMwYLBUBA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743223064"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15nw3tn7623tr48j0awzhg2757lf5yf4mxf9htg","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ZSin2HErjB1d/O2Pj3TDnShyEt69Wgl/KOLIc8mHV8ldZACznvwOgWmKiKfhbOt80k+yAm66NrEOCj670UYEAw=="}],"memo":""},"metadata":{"timestamp":"1743229911"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15nw3tn7623tr48j0awzhg2757lf5yf4mxf9htg","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ZSin2HErjB1d/O2Pj3TDnShyEt69Wgl/KOLIc8mHV8ldZACznvwOgWmKiKfhbOt80k+yAm66NrEOCj670UYEAw=="}],"memo":""},"metadata":{"timestamp":"1743229916"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15nw3tn7623tr48j0awzhg2757lf5yf4mxf9htg","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tFzNI/BjesC2WIKe9rXlmtZm/Nkg5Eg/+V9Jt0SymTXZsyy7nVfjg4bUmnGxHXuoD9Gmqb7yB9abi2326z00Cg=="}],"memo":""},"metadata":{"timestamp":"1743229986"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1j72w5s6hrug893pp96lrjyw40jkygj5f0s6jnw","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"mWXfwC7hLYOhNZZEki7FYujvd+6siG2Kjd35oEZOee4u+ouzUIUGeOsaYS00sadCDna0d5wmuvovL1crYEjwDw=="}],"memo":""},"metadata":{"timestamp":"1743250624"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1j72w5s6hrug893pp96lrjyw40jkygj5f0s6jnw","to_address":"g1ezv7qt9xaqx9un6cjq8u4n0jx6y43js6ya8f7r","amount":"1000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"HH+uIirUOQX5a29Jf93QdFl62jdv3yhqqrllvQEbF+T+gC7+Y/TCnRHYs411sVt0+Vw2xi00MrfMvBBPs9g1DQ=="}],"memo":""},"metadata":{"timestamp":"1743250734"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1w3saysjxdlsyczysnyfd55tuvhhz5533nef8y7","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"/SghRherbcbnb7p2XSIwyxC2wPmf4zMoIUgebwS4wqj+SIx0wRFw818N/s5ilfib4/dhcfaaKAmFG7b4ZdMiDg=="}],"memo":""},"metadata":{"timestamp":"1743266230"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1w3saysjxdlsyczysnyfd55tuvhhz5533nef8y7","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"hRq4l1wEQ0yZ466IvRnBgyyalOejHplZjQ+o/umoIEM3uegPYaMqliQ9j3BdghtWX/uLNkQcBNesxvXiZw84BA=="}],"memo":""},"metadata":{"timestamp":"1743266500"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w3saysjxdlsyczysnyfd55tuvhhz5533nef8y7","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["tom101"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"4nyp4lQC0JeBJMEExs5GlCR/pzNFREkW/4BLQa8ppuFpci0luAJb+tjLxShQVPSoXy8WbKDWytKr4dO6aKeOAw=="}],"memo":""},"metadata":{"timestamp":"1743266545"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1y0cugky82hz79ht074ls8jhn4avgzxk2xh5xxz","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"1z3u5qs3uYv46z+AgqBpKVZLHDC4HcrR+4O1oPWmiE0awHJBs1FvifpH/dqsquVZFL1GIWnAiA7ujdfksg7aCQ=="}],"memo":""},"metadata":{"timestamp":"1743268260"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1y0cugky82hz79ht074ls8jhn4avgzxk2xh5xxz","to_address":"g1ezv7qt9xaqx9un6cjq8u4n0jx6y43js6ya8f7r","amount":"1000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Et9kb2Nq7LQK/iu9pY9lAjrfXjXU1xyK5WpEcI2chX3ndO6WI1jvRnScR9AzyI7trpbx6uFHrW1IO09rKDkCAw=="}],"memo":""},"metadata":{"timestamp":"1743268320"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1m8f2zk2s2wg00zteheez2tnyjwjnwgkqfxaf29","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"zJOJiWNRtRJ/V1kUcUhF6FwjMU3gGgPkt+zgpJM/Mgb4wnTwMauEYyLwXoG+ivqqrRNMn3Ra2vvAMRqc36ELDw=="}],"memo":""},"metadata":{"timestamp":"1743306633"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1m8f2zk2s2wg00zteheez2tnyjwjnwgkqfxaf29","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"jKmwrmp8h8n8MS3SKkraQsNACNfBbjZ/XuWdyqIdsRaBZrcMgU2VCoT30cY8djRFEapBD/t24UOl/t+u6VEBDw=="}],"memo":""},"metadata":{"timestamp":"1743306738"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1m8f2zk2s2wg00zteheez2tnyjwjnwgkqfxaf29","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"jKmwrmp8h8n8MS3SKkraQsNACNfBbjZ/XuWdyqIdsRaBZrcMgU2VCoT30cY8djRFEapBD/t24UOl/t+u6VEBDw=="}],"memo":""},"metadata":{"timestamp":"1743306989"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1zh8l7ku6udandsez3952ux284408lgx7566rr5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"GttmfjksA1ypiEM4R7vaqIivSRN7QqD82pTNUBOQ3N1xd52rfRex6Tb/g60a+KGukooJ4F/0ToOKpikvnnGRDA=="}],"memo":""},"metadata":{"timestamp":"1743308011"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1zh8l7ku6udandsez3952ux284408lgx7566rr5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"GttmfjksA1ypiEM4R7vaqIivSRN7QqD82pTNUBOQ3N1xd52rfRex6Tb/g60a+KGukooJ4F/0ToOKpikvnnGRDA=="}],"memo":""},"metadata":{"timestamp":"1743308944"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1zh8l7ku6udandsez3952ux284408lgx7566rr5","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["gnolandvtow_123"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"6HnZq4n4g3mIbfQfJqVXPUDCuM8oHsHGnlOYFl1QXmc9FrVRMJ9Td/wjCDFpII+yY6UcX4imQs8VH2mQ5bZkDw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743309039"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1zh8l7ku6udandsez3952ux284408lgx7566rr5","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["gnolandvtow_123"]}],"fee":{"gas_wanted":"14896464","gas_fee":"31035ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"x3Df/FS2d6IZBk/LWNSlujE4cg4BL/KV0JxaBwyh+QStsOJb7Azt9jh52xPlCmMMh/1jyJzDFDmcsHKApte6DA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743309104"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1zh8l7ku6udandsez3952ux284408lgx7566rr5","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["gnolandvtow_123"]}],"fee":{"gas_wanted":"20000000","gas_fee":"75000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"4AfUXPcKdV5JMLn4BrP3Y02KXvpqPZfE/miy07S+UQddaFt34ilGx22TeNYBsCKJ67IVvMTtE81e8H9nIb7iAw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743309495"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1m8f2zk2s2wg00zteheez2tnyjwjnwgkqfxaf29","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"jKmwrmp8h8n8MS3SKkraQsNACNfBbjZ/XuWdyqIdsRaBZrcMgU2VCoT30cY8djRFEapBD/t24UOl/t+u6VEBDw=="}],"memo":""},"metadata":{"timestamp":"1743309746"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"+G8fRk00xB4TRAXEtYNth3cZaYkiber2UARztqvxXHOOvVcSnRU9fE9DrdJzmQGbSa8kxHXiRn8wotQWALr8AQ=="}],"memo":""},"metadata":{"timestamp":"1743325526"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","send":"","pkg_path":"gno.land/r/demo/boards","func":"DeletePost","args":["1","2","2"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"bYp8UQAwajz9Xlpb52YaEB7vM38+6FO5pEtJEOmtQrb8EbCEGJTEYucbzO03IvuM++BkHtwP1XfptdtsSIidDQ=="}],"memo":""},"metadata":{"timestamp":"1743337356"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1jp4h2lwd90gahczsxkwgxx79n0hz7dy743xxck","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"/CYh8Q0Licwp4PznPeAZMbjPF4QnMIIpQ4DVXP+dV5Zjtqg5L48bOCpH4qHvDlf0RXhoF8HpBWrb3OVLS5g1BA=="}],"memo":""},"metadata":{"timestamp":"1743339762"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"8989209","gas_fee":"1579951ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"b4zYoQX96Vecxj4hYokonN5Ftd7S2PiiYnmqQbIjriXPgP1o7A6nDxVrSZzQnOL1R3wxyQ7i9VnNGzztwOuICQ=="}],"memo":""},"metadata":{"timestamp":"1743340003"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jp4h2lwd90gahczsxkwgxx79n0hz7dy743xxck","send":"","pkg_path":"gno.land/r/demo/boards","func":"DeletePost","args":["","",""]}],"fee":{"gas_wanted":"12000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Df9us4mbDZ7HYmnOJivJdUST9QJ503VvqVaNiP0TEQXJ49dhiJbdDHLI1kLal5Mz0QUOv2Qfhwx7juDdaDx/Aw=="}],"memo":""},"metadata":{"timestamp":"1743340103"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","200000"]}],"fee":{"gas_wanted":"10161022","gas_fee":"1785910ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Vhr1AM8siE/lY1jmPiNl3FGWaMAs2iqak/JvGXxBsJkUEJXXDvL3cdjZ/ov5ma0VrXFM9Evd4rXPqAySjj8JDw=="}],"memo":""},"metadata":{"timestamp":"1743340153"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jp4h2lwd90gahczsxkwgxx79n0hz7dy743xxck","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Transfer","args":["g1vjwm0zjcupx4rn72r38en7pdsped6hwxx3y96c","1000000"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"9EUxylXMWfj7x78LF3LSrds0oMXHLyHDqw1WGdeRc5/AAjg3zxQnIvXnkol6l8xM/TTRIYeq5BTVNB6M5vZkAg=="}],"memo":""},"metadata":{"timestamp":"1743340464"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jp4h2lwd90gahczsxkwgxx79n0hz7dy743xxck","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"8934388","gas_fee":"1570316ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"72j/Xhhqvleerwc7otsSCahZs+vaHMFLr3rS7U1ZlAl1eYbkdck3wiMqizqFhO08m+Lomu+wbix56fcHf8ahBg=="}],"memo":""},"metadata":{"timestamp":"1743340504"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jp4h2lwd90gahczsxkwgxx79n0hz7dy743xxck","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Transfer","args":["g1vjwm0zjcupx4rn72r38en7pdsped6hwxx3y96c","100000"]}],"fee":{"gas_wanted":"10022604","gas_fee":"1761582ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Ipori1D1uum2cpHRpBHKA1C4bzzQ1ftLIAF2cVFMIpwf1KZAVGHFvDs0ubpBrY6/r14jDJel/P9Lb/1NmKx3Ag=="}],"memo":""},"metadata":{"timestamp":"1743340539"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16p8rlksl5xpaqem2z0k9gqz8u62gg9fy0mnunf","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"c2K/JAquGBa4uhHmZeikVJ6iElUGTn6fIMP6QH+mloizTsSu1OeWQmOxy0ZMK3pwV7EXMfqcJaTT7eEaxj1tDQ=="}],"memo":""},"metadata":{"timestamp":"1743387448"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1rx89p3sqvdn5vvlydqhar6nnxpmwpjrwmecc5n","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"XGprCR4DnDeIgyxN4fghRtetUTyIioZmwC8djlW2P7hnsUzkTOhjNRv/kSR75LpimXWaNcbSyggWJC1/ccd3BQ=="}],"memo":""},"metadata":{"timestamp":"1743387478"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16glwzkp63kammmx892f98s49qxqs45fwmwfs0c","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"R3Az9Lv4XbeDwOhIrj6LqezilwJdBMzB1I9eVZoAbWWbsOxGCrO3sRYB4jJfJrQ/6l5Z7nHG5eGdaTpdpKG1Ag=="}],"memo":""},"metadata":{"timestamp":"1743387523"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16p8rlksl5xpaqem2z0k9gqz8u62gg9fy0mnunf","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["gno999"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"5f/Hp60k9VkMjTexFhrLtTEQhnYUSjgBQudnQmES/RnPfZc3flZ/hdC3MkeQ6ZU2NVjCLzb5iacXaogTUj3/Cw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743387939"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16p8rlksl5xpaqem2z0k9gqz8u62gg9fy0mnunf","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["gno999"]}],"fee":{"gas_wanted":"13059912","gas_fee":"43534ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ipQu/VOQJbOa4P+R/vlvbFmuRErrRBw+RevfRcLSlNdxZGoZ8WcPmSfd+nSIN3nr3A3hGxqxKH4wBK+gA9xXBw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743388085"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1rx89p3sqvdn5vvlydqhar6nnxpmwpjrwmecc5n","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["cryptony5002"]}],"fee":{"gas_wanted":"12000000","gas_fee":"40000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"e4ictJlJwEkN4YtOsm/ieHXw51vnYD2YwwJVXHarHH/DPcz0aV9yy7GKNmIRaniVArf+MvIFjudrOOU3RXCRAw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743388185"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16glwzkp63kammmx892f98s49qxqs45fwmwfs0c","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["AnthonyO555"]}],"fee":{"gas_wanted":"12000000","gas_fee":"33680ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"2DyFkYfZOyAUdrTz/9da/LrhG3FclHqr+MOYOPAiaefgqi6HAZuoambLMhky88DY3iMrWSYoe962q7hRn3pZCg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743388295"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16glwzkp63kammmx892f98s49qxqs45fwmwfs0c","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["AnthonyO555"]}],"fee":{"gas_wanted":"20000000","gas_fee":"101040ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"vB5NQHTM2JBG4zTj97sJr9qa+sIQiC7umwYJugC4gE0eRv78105SyXT74JgCAW8mOsswQwwK6Dhujj3KyNjYDg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743388340"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16glwzkp63kammmx892f98s49qxqs45fwmwfs0c","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["macbook999"]}],"fee":{"gas_wanted":"13934736","gas_fee":"117331ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"vXGO9KPrBQk2u3clZv6z6Ib7PlunRsMO8SPg57t0AaSA/kZnWLOnQzHPgOit+HB/KbaKKu0hAAY+78Sj2G2IBw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743388436"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g188jmrvvpscd8pfe2jlldnharg3h3ed3w5r8x7k","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"E5pZSzIRT8lT01mHbpfEp7DnDiCzT2hnBCV7f12guGU9ZNWHb5EEsEaQizJqqL3qBQ8KLkDjI3B6hvGQePHDDA=="}],"memo":""},"metadata":{"timestamp":"1743388481"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g148gnqljly02e28es9w9x4kxjddnljj3cq4uyw3","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tuye2/ZrRm31t01Yy+ajVL0B25NPMfTks/4zLV4hxstvpRNnI0IJ0SqRWGqB6mva/bf1LpFJi9qEC41zMNgDDw=="}],"memo":""},"metadata":{"timestamp":"1743388506"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g170mqehwvv3m4af9l458esfsffdgnmvt9rrntjz","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"a+4EwL6T6xapd/z+pPm8rXxvlWyZ3nFGajugindLfeImItTKqQZVL9HObMHMb9xF6tuO8lDwYnDRHfAVSL+ADg=="}],"memo":""},"metadata":{"timestamp":"1743388536"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g17d7pa340sdz4zcyhxlenavhsj06l8xuhng4vgk","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"sUziPRfmmh4bXpddLWJFym/jN/cjYTWKmEhjRrFOTap5bc2uF6+uDt2b7hCrukBv5bV21xQljRxjs7+Pp0WECQ=="}],"memo":""},"metadata":{"timestamp":"1743388566"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1v6v8w2w3yaw9c9k73vcf26q6r2prvjjqqeqpjq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"+AcWATPyQALK4g3KustzIFcqVX8ZmnRwuIf0qV7/bP2yuFjHuKHkJZtUS/04Dmod0Tv/VXJsRLnCFcwdiSBmCQ=="}],"memo":""},"metadata":{"timestamp":"1743388586"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g188jmrvvpscd8pfe2jlldnharg3h3ed3w5r8x7k","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["atomone999"]}],"fee":{"gas_wanted":"12000000","gas_fee":"101040ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"GfCBExpFCFww8ZuexF0u6kiX9jCY5WddHdf/NytgV26WF1JSmcoxmAGfXAqex43eJrTFZXhnBf5wrNYku+6GDw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743388641"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g148gnqljly02e28es9w9x4kxjddnljj3cq4uyw3","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["atomhub999"]}],"fee":{"gas_wanted":"12000000","gas_fee":"33680ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"7sTCqjsBBKolmYsPILD7ZZdhNzprdRjgJmNWiXrgGNfYGVcHcdQQXLDvOeW08p1aFTAwmoIETTc5DBJw5kaxAg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743388696"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g170mqehwvv3m4af9l458esfsffdgnmvt9rrntjz","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["cosmostation001"]}],"fee":{"gas_wanted":"12000000","gas_fee":"29130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"DWjiohbQ5URrnN+0GtT0l6wmVvxkKr9Q04IzX+cDvIuXC4YRte/fOaW00p1IGJ9XqCsQfXc2gmiNb3iPDaSjCQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743388747"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g170mqehwvv3m4af9l458esfsffdgnmvt9rrntjz","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["cosmostation001"]}],"fee":{"gas_wanted":"14876992","gas_fee":"108342ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"bSrcNUtM4TXO7yLiQxGtZUIliAXzlzPj682giCFCjqa5CPe61dT9OU3q7YZJeBqBN0eZ8lW8CrKaNO+7VPk4Cw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743388772"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17d7pa340sdz4zcyhxlenavhsj06l8xuhng4vgk","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["gnochain999"]}],"fee":{"gas_wanted":"12000000","gas_fee":"87390ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"t/mJoSTtDl9WJUQwNkS4IcvPywudHOjWSzu94Al2t62+K7WgMXdh+5ne1kTh6La2lgbBOwzgMOdzZVLTkXgKCQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743388817"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1v6v8w2w3yaw9c9k73vcf26q6r2prvjjqqeqpjq","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["mintscan999"]}],"fee":{"gas_wanted":"12000000","gas_fee":"29130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"T47pYpmK+I2Q5mp/q8uGmQ8x1uZbm3k9PU1JYYacZWs+gw0mkrvndo8ECq7v4JfYDS+K1BDLVsp96PTKE/7kDA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743388867"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"daokit","path":"gno.land/r/meeshell222/daokit","files":[{"name":"package.gno","body":"package daokit\n\nimport (\n\t\"time\"\n\n\t\"gno.land/p/zenao/daocond\"\n)\n\ntype DAO interface {\n\tPropose(req ProposalRequest) uint64\n\tExecute(id uint64)\n\tVote(id uint64, vote daocond.Vote)\n}\n\nfunc InstantExecute(d DAO, req ProposalRequest) uint64 {\n\tid := d.Propose(req)\n\td.Vote(id, daocond.VoteYes)\n\td.Execute(id)\n\treturn id\n}\n\ntype Core struct {\n\tResources *ResourcesStore\n\tProposals *ProposalsStore\n\tNoEvents  bool\n}\n\nfunc NewCore() *Core {\n\treturn \u0026Core{\n\t\tResources: NewResourcesStore(),\n\t\tProposals: NewProposalsStore(),\n\t}\n}\n\nfunc (d *Core) Vote(voterID string, proposalID uint64, vote daocond.Vote) {\n\tproposal := d.Proposals.GetProposal(proposalID)\n\tif proposal == nil {\n\t\tpanic(\"proposal not found\")\n\t}\n\n\tif proposal.Status != ProposalStatusOpen {\n\t\tpanic(\"proposal is not open\")\n\t}\n\n\tif !d.NoEvents {\n\t\te := \u0026daocond.EventVote{\n\t\t\tVoterID: voterID,\n\t\t\tVote:    daocond.Vote(vote),\n\t\t}\n\t\tproposal.ConditionState.HandleEvent(e, proposal.Votes)\n\t}\n\n\tproposal.Votes[voterID] = daocond.Vote(vote)\n\n}\n\nfunc (d *Core) Execute(proposalID uint64) {\n\tproposal := d.Proposals.GetProposal(proposalID)\n\tif proposal == nil {\n\t\tpanic(\"proposal not found\")\n\t}\n\n\tif proposal.Status != ProposalStatusOpen {\n\t\tpanic(\"proposal is not open\")\n\t}\n\n\tif !proposal.ConditionState.Eval(proposal.Votes) {\n\t\tpanic(\"proposal condition is not met\")\n\t}\n\n\tproposal.UpdateStatus()\n\tif proposal.Status != ProposalStatusPassed {\n\t\tpanic(\"proposal does not meet the condition(s) or is already closed/executed\")\n\t}\n\n\td.Resources.Get(proposal.Message.Type()).Handler.Execute(proposal.Message)\n\tproposal.Status = ProposalStatusExecuted\n\tproposal.ExecutedAt = time.Now()\n}\n\nfunc (d *Core) Propose(proposerID string, req ProposalRequest) uint64 {\n\tmessageType := req.Message.Type()\n\n\tresource := d.Resources.Get(messageType)\n\tif resource == nil {\n\t\tpanic(\"message type is not registered as a resource\")\n\t}\n\n\tprop := d.Proposals.newProposal(proposerID, req, resource.Condition.NewState())\n\treturn uint64(prop.ID)\n}\n\nfunc (d *Core) ResourcesCount() int {\n\treturn d.Resources.Tree.Size()\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"yjO5XbsWDi5gCQN60G3bcaiUECDC1uWkFMQrJvdroCNZDQjeJLCBD4cm3TC8yKGn9q91z480n3OqkaDqVJGVDg=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743410910"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1f95dmun7ldnyzymrja6qjy063nfug0kzr63l7c","send":"100000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["jyp1464"]}],"fee":{"gas_wanted":"12000000","gas_fee":"120000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"SXaB9e1rP+SubH2Xri+OBMscElFncGRElmlFq+v/NA5yx2QwNQc8+7WLueB8b2DDUfnghFuaviXsq8VVJUvZBg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743420666"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders","path":"gno.land/r/meeshell222/snakesandladders","files":[{"name":"package.gno","body":"package snakesandladders\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// --- Game Types ---\n\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  std.Address\n\tLogs    []string\n}\n\n// --- Global State ---\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// --- Helper Functions ---\n\nfunc findPlayer(addr std.Address) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\nfunc logEvent(msg string) {\n\tgame.Logs = append(game.Logs, msg)\n\tstd.Emit(\"GameLog\", \"msg\", msg)\n}\n\n// --- Game Functions ---\n\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif _, exists := findPlayer(caller); exists {\n\t\treturn \"Already joined.\"\n\t}\n\tgame.Players = append(game.Players, Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t})\n\tmsg := \"Player \" + caller.String() + \" joined the game.\"\n\tlogEvent(msg)\n\treturn msg\n}\n\nfunc StartGame(opponent std.Address) string {\n\tcaller := std.OriginCaller()\n\n\tif game.Start\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"g/T3FaJzeSdzCLr5sLyxcS5Pka60L5rxSQyKupiH/tPo6uJ84JIOA7F/AcF9nB48+jD3jyvlyioEKXN+j45bCQ=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743426175"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders4","path":"gno.land/r/meeshell222/snakesandladders4","files":[{"name":"package.gno","body":"package snakesandladders4\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// --- Game Types ---\n\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  std.Address\n\tLogs    []string\n}\n\n// --- Global State ---\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// --- Helper Functions ---\n\nfunc findPlayer(addr std.Address) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\nfunc logEvent(msg string) {\n\tgame.Logs = append(game.Logs, msg)\n\tstd.Emit(\"GameLog\", \"msg\", msg)\n}\n\n// --- Game Functions ---\n\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif _, exists := findPlayer(caller); exists {\n\t\treturn \"Already joined.\"\n\t}\n\tgame.Players = append(game.Players, Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t})\n\tmsg := \"Player \" + caller.String() + \" joined the game.\"\n\tlogEvent(msg)\n\treturn msg\n}\n\nfunc StartGame(opponent std.Address) string {\n\tcaller := std.OriginCaller()\n\n\tif game.Start\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"0VCjQ/L5Czw7FJM32Y6bLCse0vf7mB4/MB8MPgUrAtZwhPZ7MG5xB9Y6c2CPNjeQmvOp0rFRsvV/VFwh2ZDaCA=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743426230"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders7","path":"gno.land/r/meeshell222/snakesandladders7","files":[{"name":"package.gno","body":"package snakesandladders7\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// --- Game Types ---\n\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  std.Address\n\tLogs    []string\n}\n\n// --- Global State ---\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// --- Helper Functions ---\n\nfunc findPlayer(addr std.Address) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\nfunc logEvent(msg string) {\n\tgame.Logs = append(game.Logs, msg)\n\tstd.Emit(\"GameLog\", \"msg\", msg)\n}\n\n// --- Game Functions ---\n\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif _, exists := findPlayer(caller); exists {\n\t\treturn \"Already joined.\"\n\t}\n\tgame.Players = append(game.Players, Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t})\n\tmsg := \"Player \" + caller.String() + \" joined the game.\"\n\tlogEvent(msg)\n\treturn msg\n}\n\nfunc StartGame(opponent std.Address) string {\n\tcaller := std.OriginCaller()\n\n\tif game.Start\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"PsYFPnHVYc44RklPOS8BVsP6ZjlgiMe1CnfWkw5Gr8+dLAy3nwLoSu5btroRUNZ+hPLIL97w69D9XL7XnOfFDQ=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743426245"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"snakesandladders7","path":"gno.land/r/meeshell222/snakesandladders7","files":[{"name":"package.gno","body":"package snakesandladders7\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\n// --- Game Types ---\n\ntype Player struct {\n\tAddress  std.Address\n\tPosition int\n}\n\ntype Game struct {\n\tPlayers []Player\n\tTurn    int\n\tStarted bool\n\tWinner  std.Address\n\tLogs    []string\n}\n\n// --- Global State ---\n\nvar game Game\n\nvar snakes = map[int]int{\n\t16: 6, 49: 11, 62: 19, 64: 60,\n\t87: 24, 93: 73, 95: 75, 98: 78,\n}\n\nvar ladders = map[int]int{\n\t1: 38, 4: 14, 9: 31, 21: 42,\n\t28: 84, 36: 44, 51: 67, 71: 91, 80: 100,\n}\n\n// --- Helper Functions ---\n\nfunc findPlayer(addr std.Address) (int, bool) {\n\tfor i, p := range game.Players {\n\t\tif p.Address == addr {\n\t\t\treturn i, true\n\t\t}\n\t}\n\treturn -1, false\n}\n\nfunc applySnakesAndLadders(pos int) int {\n\tif newPos, ok := snakes[pos]; ok {\n\t\treturn newPos\n\t}\n\tif newPos, ok := ladders[pos]; ok {\n\t\treturn newPos\n\t}\n\treturn pos\n}\n\nfunc logEvent(msg string) {\n\tgame.Logs = append(game.Logs, msg)\n\tstd.Emit(\"GameLog\", \"msg\", msg)\n}\n\n// --- Game Functions ---\n\nfunc JoinGame() string {\n\tcaller := std.OriginCaller()\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif _, exists := findPlayer(caller); exists {\n\t\treturn \"Already joined.\"\n\t}\n\tgame.Players = append(game.Players, Player{\n\t\tAddress:  caller,\n\t\tPosition: 0,\n\t})\n\tmsg := \"Player \" + caller.String() + \" joined the game.\"\n\tlogEvent(msg)\n\treturn msg\n}\n\nfunc StartGame(opponent std.Address) string {\n\tcaller := std.OriginCaller()\n\tif game.Started {\n\t\treturn \"Game already started.\"\n\t}\n\tif len(game.Players) \u003e 0 {\n\t\treturn \"Game already has players.\"\n\t}\n\tif opponent == caller {\n\t\t// Solo play\n\t\tgame.Players = append(game.Players, Player{Address: caller})\n\t\tgame.Players = append(game.Players, Player{Address: caller})\n\t} else {\n\t\tgame.Players = append(game.Players, Player{Address: caller})\n\t\tgame.Players = append(game.Players, Player{Address: opponent})\n\t}\n\tgame.Started = true\n\tgame.Turn = 0\n\tlogEvent(\"Game started between \" + game.Players[0].Address.String() + \" and \" + game.Players[1].Address.String())\n\treturn \"Game started!\"\n}\n\nfunc RollDice(roll int) string {\n\tcaller := std.OriginCaller()\n\tif !game.Started {\n\t\treturn \"Game not started yet.\"\n\t}\n\tif game.Winner != \"\" {\n\t\treturn \"Game already finished. Winner: \" + game.Winner.String()\n\t}\n\n\tcurrPlayer := \u0026game.Players[game.Turn]\n\tif currPlayer.Address != caller {\n\t\treturn \"Not your turn.\"\n\t}\n\n\tpos := currPlayer.Position + roll\n\tif pos \u003e 100 {\n\t\tpos = currPlayer.Position // no move\n\t}\n\tfinalPos := applySnakesAndLadders(pos)\n\tcurrPlayer.Position = finalPos\n\n\tmsg := caller.String() + \" rolled \" + strconv.Itoa(roll) + \" → \" + strconv.Itoa(finalPos)\n\tif finalPos == 100 {\n\t\tgame.Winner = caller\n\t\tmsg += \" 🎉 WINNER!\"\n\t}\n\tlogEvent(msg)\n\n\tgame.Turn = (game.Turn + 1) % len(game.Players)\n\treturn msg\n}\n\nfunc GetGameState() string {\n\tvar out []string\n\tfor i, p := range game.Players {\n\t\tline := p.Address.String() + \" at \" + strconv.Itoa(p.Position)\n\t\tif game.Winner == \"\" \u0026\u0026 i == game.Turn {\n\t\t\tline += \" 👈\"\n\t\t}\n\t\tout = append(out, line)\n\t}\n\treturn strings.Join(out, \"\\n\")\n}\n\nfunc GetLog() string {\n\tlogs := game.Logs\n\tif len(logs) \u003e 5 {\n\t\tlogs = logs[len(logs)-5:]\n\t}\n\treturn strings.Join(logs, \"\\n\")\n}\n\n// --- GnoWeb Render Function ---\n\nfunc Render(_ string) string {\n\tvar b strings.Builder\n\tb.WriteString(\"# 🐍 Snakes and Ladders\\n\\n\")\n\n\tif !game.Started {\n\t\tb.WriteString(\"Game not started yet. Use `StartGame(opponent)` to begin.\\n\\n\")\n\t} else {\n\t\tb.WriteString(\"## 🎲 Game State\\n\\n\")\n\t\tb.WriteString(GetGameState() + \"\\n\\n\")\n\t}\n\n\tif game.Winner != \"\" {\n\t\tb.WriteString(\"🎉 Winner: `\" + game.Winner.String() + \"`\\n\\n\")\n\t}\n\n\tb.WriteString(\"## 📜 Last Moves\\n\\n\")\n\tb.WriteString(GetLog())\n\treturn b.String()\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"15834283","gas_fee":"32989ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"fCcUayYAJFja4azjyw8pm7HWZ+gi/GYy52w6klHJ8c7ROxDCpKhbjkI8tT1Krrk3yDtaQNs0Z9CR+Udfmg6VDA=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743426526"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders7","func":"StartGame","args":["g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5"]}],"fee":{"gas_wanted":"1086925","gas_fee":"2265ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"QuMdHtRz7+6NOkOKr4LevlOJT+m83tTz02ZpjmVg30x+PQl7uYTh2Aswav4oma+SO1zIIXmNOFUmMH+JsdcuAw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743426566"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders7","func":"RollDice","args":["0"]}],"fee":{"gas_wanted":"2455706","gas_fee":"5117ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"VLVIaMe4kI14HtkF/9owdks6PblruLdJzjolQU7KAgSHA/fcDk8D+MIHXd7sHEZx/ctMrIFyb+K5jyjzgxPRBw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743426591"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders7","func":"RollDice","args":["5"]}],"fee":{"gas_wanted":"2460199","gas_fee":"5126ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Ks/dxc/fb5sIk4k6UZn+4Pmmf85U+yl0S6fJEsZ/AzoHV3/X4qC0bDa/YKoNJ1zA4D656JzgXX8FcG4oxFRWAA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743426616"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders7","func":"RollDice","args":["6"]}],"fee":{"gas_wanted":"2464730","gas_fee":"5135ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tZYDUmJ6QIR9QD+IgNcQv6AeoJ6TUISEfTZKXlpv4A7lTdGAbMi+qBjsnQcio4sUo77uu1HkwXLClCmhXMSGAg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743426641"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders7","func":"GetGameState","args":null}],"fee":{"gas_wanted":"3453162","gas_fee":"7195ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"63rN9WfmlrW6b2XsCfbS2Kfz1sWugP+/0DHjml0hFa2bc1TGnaTP/dZvqFmXwK4Hnsho5NK12XFaXz206NmYAA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743426667"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders7","func":"JoinGame","args":null}],"fee":{"gas_wanted":"982239","gas_fee":"2047ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"d3gxGcLxV8qR0j3mLXhhH1pA2dOzheZCyJq1FQQCe5Si/62frONW+/IQnC9cXD1UoAEF9ytBYC85VWfbsxihCQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743426697"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/meeshell222/snakesandladders7","func":"GetLog","args":null}],"fee":{"gas_wanted":"1412385","gas_fee":"2943ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"D7LFNKSI9Ofo9OY8UF4PTHRVw0gPVQiQUqz8Ph9YgPKsDKGspxnXjj773XBt090ICAXl25rNlU2mLiu9nySDCw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743426777"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"DEaaE/OkpY0v+34jwtpeC8oyQ4acP/P+x76juG4JmYiostTEdZuI7s9NW2vBBJdmyGYSLrv2d3+rBEK3Z8r5Aw=="}],"memo":""},"metadata":{"timestamp":"1743427143"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"IXsQKeXg+O6aYEtjpJUD7Nv0pJ6gazTJfe+wwhnBhu4eJ3+Fq7tOlUHoQWvoIwK9iz7qAjK6iIrsfhp5h4S7Aw=="}],"memo":""},"metadata":{"timestamp":"1743427178"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateThread","args":["1"]}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"RXV95Ju5S5Quqg/+LJOpAvvyq6WW/glWZy2VhxOFTAEbsR1b/DmjNer38IRlNWLWIhVVsaETUGVgqXrOBTY5CQ=="}],"memo":""},"metadata":{"timestamp":"1743427233"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["1"]}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"EQ/ouR1V5sVlv9SJuKgtDSIWFU2aSHICyM1cufxnV8wFp1J01PBgxNjzN8c8sXxWeFP9IUUJre8zT6ddjYI3BA=="}],"memo":""},"metadata":{"timestamp":"1743427253"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"RemoveMember","args":["1","g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk"]}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ozD3cd+eTlnGBVmRybWXe9RiA2ln9fwhXEiILMI3QEdyNYLVe8w+JpDJw1BZoOBuL5OSnVFSsCm4JFlvCamGCQ=="}],"memo":""},"metadata":{"timestamp":"1743427258"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":["NyanCat"]}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"179cndSHGXxQn/+qq3rFBabaQCT6shaTWLcxdymJp84tIXAk1R5HJme7n9SjgO27Vjxsu2e7eK87K0jPXDLrBw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743427368"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hn235r2escw72x68kwdzetjhnwrcfv58kk053e","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"nRVcvHThY0ElicERAKjaW8uQkjPHoy4ZyVkLm0WTxU1i4kdNF10XvJKBpCyfWd05dDnlVzNVVe2FlPtH66VECw=="}],"memo":""},"metadata":{"timestamp":"1743427539"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hn235r2escw72x68kwdzetjhnwrcfv58kk053e","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"nRVcvHThY0ElicERAKjaW8uQkjPHoy4ZyVkLm0WTxU1i4kdNF10XvJKBpCyfWd05dDnlVzNVVe2FlPtH66VECw=="}],"memo":""},"metadata":{"timestamp":"1743427554"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"tutorial2","path":"gno.land/r/meeshell222/tutorial2","files":[{"name":"package.gno","body":"package tutorial2\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/ecodev/gnome/renderproxy\"\n\t\"gno.land/p/yourusername/boards2\"\n)\n\n// --- Proxy Setup ---\n\nvar proxy = renderproxy.New(\n\trenderproxy.WithDomain(\"devx\", \"dev.gnodevx.network\"),\n\trenderproxy.WithDomain(\"dev\", \"http://127.0.0.1:8888\"),\n)\n\nfunc ProxyRender(fn renderproxy.RenderFn) {\n\tproxy.MustRegister(std.PreviousRealm().PkgPath(), fn)\n}\n\nfunc ProxyRealmPath() string {\n\treturn proxy.RealmPath()\n}\n\nfunc URL(renderPath string) string {\n\treturn proxy.URL(renderPath)\n}\n\nfunc RenderPage(path string) string {\n\treturn proxy.MustRender(path)\n}\n\n// --- Forum Board Setup ---\n\nvar tutorialBoard *boards2.Board\n\nfunc init() {\n\t// Initialize forum board with default permissions\n\towner := std.GetCaller()\n\tperms := boards2.CreateDefaultBoardPermissions(owner)\n\ttutorialBoard = boards2.NewBoard(1, \"Tutorial Discussions\", owner, perms)\n}\n\nfunc RenderDiscussion(path string) string {\n\treturn tutorialBoard.Render(path, \"\")\n}\n\n// --- Unified Render ---\n\nfunc Render(path string) string {\n\tswitch path {\n\tcase \"discussion\":\n\t\treturn RenderDiscussion(path)\n\tdefault:\n\t\treturn RenderPage(path)\n\t}\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"00oMxShqUPS0vz/fTMLbxp4LiONrM/n1lWY0IJ9amMyQs4X2tbdgJY/ygxEbJCvd/ntr8Uf+dqMFWFF9ks/zCw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743427619"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"tutorialv2","path":"gno.land/r/meeshell222/tutorialv2","files":[{"name":"package.gno","body":"package tutorialv2\n\nimport (\n\t\"net/url\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/r/meeshell222/renderproxy\"\n)\n\n// --- Proxy Setup ---\n\nvar proxy = renderproxy.New(\n\trenderproxy.WithDomain(\"devx\", \"dev.gnodevx.network\"),\n\trenderproxy.WithDomain(\"dev\", \"http://127.0.0.1:8888\"),\n)\n\nfunc ProxyRender(fn renderproxy.RenderFn) {\n\tproxy.MustRegister(std.PreviousRealm().PkgPath(), fn)\n}\n\nfunc ProxyRealmPath() string {\n\treturn proxy.RealmPath()\n}\n\nfunc URL(renderPath string) string {\n\treturn proxy.URL(renderPath)\n}\n\nfunc RenderPage(path string) string {\n\treturn proxy.MustRender(path)\n}\n\n// --- Boards logic (simplified inline version) ---\n\ntype PostID uint64\n\ntype Post struct {\n\tID      PostID\n\tTitle   string\n\tBody    string\n\tCreator std.Address\n\tCreated time.Time\n}\n\ntype Board struct {\n\tName     string\n\tPosts    []Post\n\tReadonly bool\n\tCounter  uint64\n\tCreator  std.Address\n\tCreated  time.Time\n}\n\nvar tutorialBoard *Board\n\nfunc init() {\n\ttutorialBoard = \u0026Board{\n\t\tName:    \"Tutorial Discussions\",\n\t\tCreator: std.GetOrigSender(),\n\t\tCreated: time.Now(),\n\t\tPosts:   []Post{},\n\t}\n}\n\nfunc (b *Board) AddPost(title, body string) {\n\tb.Counter++\n\tb.Posts = append(b.Posts, Post{\n\t\tID:      PostID(b.Counter),\n\t\tTitle:   title,\n\t\tBody:    body,\n\t\tCreator: std.GetOrigSender(),\n\t\tCreated: time.Now(),\n\t})\n}\n\nfunc (b *Board) Render(path string) string {\n\tvar sb strings.Builder\n\tsb.WriteString(\"# \" + b.Name + \"\\n\")\n\tsb.WriteString(\"_Board created by \" + b.Creator.String() + \" on \" + b.Created.Format(time.RFC1123) + \"_\\n\\n\")\n\n\tif len(b.Posts) == 0 {\n\t\tsb.WriteString(\"No posts yet.\\n\")\n\t\treturn sb.String()\n\t}\n\n\tfor _, post := range b.Posts {\n\t\tsb.WriteString(\"## \" + post.Title + \"\\n\")\n\t\tsb.WriteString(\"_By \" + post.Creator.String() + \" at \" + post.Created.Format(time.RFC822) + \"_\\n\")\n\t\tsb.WriteString(post.Body + \"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n\nfunc RenderDiscussion(path string) string {\n\treturn tutorialBoard.Render(path)\n}\n\n// --- Unified Render ---\n\nfunc Render(path string) string {\n\tswitch path {\n\tcase \"discussion\":\n\t\treturn RenderDiscussion(path)\n\tdefault:\n\t\treturn RenderPage(path)\n\t}\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"C7SiH6yoGd5LJbKrGGvuIf4utHucVPqJRg1zXJ0GkOzCbmvUK42+4fvpNWrpjvEXYH4vACiN2IIJhGPkRT6PCA=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743427835"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"name":"tutorialv2","path":"gno.land/r/meeshell222/tutorialv2","files":[{"name":"package.gno","body":"package tutorialv2\n\nimport (\n\t\"net/url\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/r/meeshell222/renderproxy\"\n)\n\n// --- Proxy Setup ---\n\nvar proxy = renderproxy.New(\n\trenderproxy.WithDomain(\"devx\", \"dev.gnodevx.network\"),\n\trenderproxy.WithDomain(\"dev\", \"http://127.0.0.1:8888\"),\n)\n\nfunc ProxyRender(fn renderproxy.RenderFn) {\n\tproxy.MustRegister(std.PreviousRealm().PkgPath(), fn)\n}\n\nfunc ProxyRealmPath() string {\n\treturn proxy.RealmPath()\n}\n\nfunc URL(renderPath string) string {\n\treturn proxy.URL(renderPath)\n}\n\nfunc RenderPage(path string) string {\n\treturn proxy.MustRender(path)\n}\n\n// --- Boards logic (simplified inline version) ---\n\ntype PostID uint64\n\ntype Post struct {\n\tID      PostID\n\tTitle   string\n\tBody    string\n\tCreator std.Address\n\tCreated time.Time\n}\n\ntype Board struct {\n\tName     string\n\tPosts    []Post\n\tReadonly bool\n\tCounter  uint64\n\tCreator  std.Address\n\tCreated  time.Time\n}\n\nvar tutorialBoard *Board\n\nfunc init() {\n\ttutorialBoard = \u0026Board{\n\t\tName:    \"Tutorial Discussions\",\n\t\tCreator: std.GetOrigSender(),\n\t\tCreated: time.Now(),\n\t\tPosts:   []Post{},\n\t}\n}\n\nfunc (b *Board) AddPost(title, body string) {\n\tb.Counter++\n\tb.Posts = append(b.Posts, Post{\n\t\tID:      PostID(b.Counter),\n\t\tTitle:   title,\n\t\tBody:    body,\n\t\tCreator: std.GetOrigSender(),\n\t\tCreated: time.Now(),\n\t})\n}\n\nfunc (b *Board) Render(path string) string {\n\tvar sb strings.Builder\n\tsb.WriteString(\"# \" + b.Name + \"\\n\")\n\tsb.WriteString(\"_Board created by \" + b.Creator.String() + \" on \" + b.Created.Format(time.RFC1123) + \"_\\n\\n\")\n\n\tif len(b.Posts) == 0 {\n\t\tsb.WriteString(\"No posts yet.\\n\")\n\t\treturn sb.String()\n\t}\n\n\tfor _, post := range b.Posts {\n\t\tsb.WriteString(\"## \" + post.Title + \"\\n\")\n\t\tsb.WriteString(\"_By \" + post.Creator.String() + \" at \" + post.Created.Format(time.RFC822) + \"_\\n\")\n\t\tsb.WriteString(post.Body + \"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n\nfunc RenderDiscussion(path string) string {\n\treturn tutorialBoard.Render(path)\n}\n\n// --- Unified Render ---\n\nfunc Render(path string) string {\n\tswitch path {\n\tcase \"discussion\":\n\t\treturn RenderDiscussion(path)\n\tdefault:\n\t\treturn RenderPage(path)\n\t}\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"C7SiH6yoGd5LJbKrGGvuIf4utHucVPqJRg1zXJ0GkOzCbmvUK42+4fvpNWrpjvEXYH4vACiN2IIJhGPkRT6PCA=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743427855"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hn235r2escw72x68kwdzetjhnwrcfv58kk053e","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"nRVcvHThY0ElicERAKjaW8uQkjPHoy4ZyVkLm0WTxU1i4kdNF10XvJKBpCyfWd05dDnlVzNVVe2FlPtH66VECw=="}],"memo":""},"metadata":{"timestamp":"1743427895"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hn235r2escw72x68kwdzetjhnwrcfv58kk053e","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"nRVcvHThY0ElicERAKjaW8uQkjPHoy4ZyVkLm0WTxU1i4kdNF10XvJKBpCyfWd05dDnlVzNVVe2FlPtH66VECw=="}],"memo":""},"metadata":{"timestamp":"1743431692"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1j39fhg29uehm7twwnhvnpz3ggrm6tprhq65t0t","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Nyq8V6DtnQs30v7xjTgGzfej3CZ5AOtOzalhDwpItrAnyjYfAOdagWIPGKxILWPHBN3Z1tf7XbBbqYfOxw9jCA=="}],"memo":""},"metadata":{"timestamp":"1743433477"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1j39fhg29uehm7twwnhvnpz3ggrm6tprhq65t0t","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"oA8k2/0A0MnCrjquRNk9kw8Qy8TmGTCpuW/FNKCE7+2E4Q+Uhf4Zbrfq1ColOAHrmxEzjvIhhuNMVW1EHSRADA=="}],"memo":""},"metadata":{"timestamp":"1743433522"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"m2NJww372YdfZy63sU5EfnFni5Hr5KJM2WTbdoWqvPqbOOo9GEemvxze/OaC64aVudhmO+k3uzLDWCSGP4x5Cw=="}],"memo":""},"metadata":{"timestamp":"1743436294"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"OGbdndqNT4LL9QoXgTg5uMavZ2xeSf7E4asoL78v4vpxvk08/I+TZXJ0k7xarQMwzzfxjTiAT1NgsHA+xShZDA=="}],"memo":""},"metadata":{"timestamp":"1743436320"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"2+SMRkLMJU63tAGzBXUcEYyAxsCsndGLWHDxVp2s3YDpyNxS6Gp58M4dGealj+i6fmWDRNWcCO+cpsurIIjcDg=="}],"memo":""},"metadata":{"timestamp":"1743436365"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"0hyoups9Hx2r1iHXOMyQBioUYhvfVZPupuF4dGoPKg2laTJtyjSUiXEZiDXjygwJ+T2k/3MywH/AoxdAMQD8CQ=="}],"memo":""},"metadata":{"timestamp":"1743436510"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"RemoveMember","args":["0","g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"GaJG9hbP0h5jVjMqyTMLmQpmeBeqUPZ3eN/cK2FTN3a8GPQaw7JoqLgmeluQWtdv92QP4S2oiKtMevrqG5oCBw=="}],"memo":""},"metadata":{"timestamp":"1743436615"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1c5k6r9nlafv74uwlyewlplv9agquxhc5a3rrwx","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"70guJVf02pzauWAADqMgDQKWTQei94T+N+arWSgrarUd/DFsnAleIjlaLG5thllJTFNhUncg0HNrRDDUFYVfDw=="}],"memo":""},"metadata":{"timestamp":"1743440786"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1j39fhg29uehm7twwnhvnpz3ggrm6tprhq65t0t","send":"","pkg_path":"gno.land/r/morgan/guestbook","func":"Sign","args":["such wow."]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Ba60MNKTaVQmhwUabcsJgNzvNokWAd5LOZqk72CFKGt8fsauzQCQROECVqPH7hMJQFPLcblP6dpEuAl0gckyDQ=="}],"memo":""},"metadata":{"timestamp":"1743441929"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1nq0wn4wrkwp5qcn4x6agqz2clyzhjue4glzgrc","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"+x+xItYPtOx6Qmy1lCrzrBwoAXNSrtYgrWNKqAF9UTQqTAYYSh10jq2ArobfkeX2Xe4+LDyieviZ1J/vs0QUBQ=="}],"memo":""},"metadata":{"timestamp":"1743459024"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1nq0wn4wrkwp5qcn4x6agqz2clyzhjue4glzgrc","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"WxMEOkuRV7nkQ/+4+MdwapSTfrUIe+QW9b1v6C4ALentC+wMOMB8VcfTmgofjghDCJdZenJBOU60Q0kftCGhBQ=="}],"memo":""},"metadata":{"timestamp":"1743459044"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1nq0wn4wrkwp5qcn4x6agqz2clyzhjue4glzgrc","send":"","pkg_path":"gno.land/r/morgan/guestbook","func":"Sign","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"RkYlfZEdbIwX40r2Gf2kXQe6DoC65icdLiabK0in/RJ5tDtg8C+1JTgx8y5WYqhqb/9wJ+cJ/X5GzjisVGtlAA=="}],"memo":""},"metadata":{"timestamp":"1743459074"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":["gnome-AMA"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"GmYmUCvi3NSwiFshRSwXH/rC8RPwGmAsASTOmOjd1BCvCWF/9KlysZkzO7WoGbwm9qjuESqzT3sWbCrAXQQwBg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743498286"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"gsEuEyrqTLGV8CTNVQLGBTF6ZGf+hkBK0Gqb8I8+xasSQPNS+mWUA0Hy0J+j5lL1vbC0ih4rac7ONCodSpBBAQ=="}],"memo":""},"metadata":{"timestamp":"1743498697"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"TGWslXzdNOGeWEgsuoacsYO/12F1Oc2+uUIPWCWsZTU04agRN2Q5spfDaMTWqyLOJmTXD2ZuCTaouslHvlqiDQ=="}],"memo":""},"metadata":{"timestamp":"1743498857"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1manfred47kzduec920z88wfr64ylksmdcedlf5","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"zmtbd/YPfrUtljkI+rx6sA/uKQ9o5PAeAJBnEgLVEbYj6QTnScqHiu0JdswtxYYlzm8Bychb4Kc6K63gG7NjDw=="}],"memo":""},"metadata":{"timestamp":"1743498867"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15nw3tn7623tr48j0awzhg2757lf5yf4mxf9htg","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ZSin2HErjB1d/O2Pj3TDnShyEt69Wgl/KOLIc8mHV8ldZACznvwOgWmKiKfhbOt80k+yAm66NrEOCj670UYEAw=="}],"memo":""},"metadata":{"timestamp":"1743503018"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":["gnome-AMA"]}],"fee":{"gas_wanted":"18872133","gas_fee":"39317ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"XKFsZx1OSQ2mUo4MNnysY8eT8lSwa80PGYj992xvBCcbXR4e1CUrdVzeyWXHYnudx80Ph9AlOJCf12iKrnMwCg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743503464"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateThread","args":["6"]}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Z5LHvSf/yEzK0EkHeEtsZMEgCa+WbVxAFDUqiys4Ek30UH8WMDQl2MCfe1PY0qkK5k1LyaPoDVidV9x086CUBQ=="}],"memo":""},"metadata":{"timestamp":"1743503735"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateThread","args":["6"]}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Z5LHvSf/yEzK0EkHeEtsZMEgCa+WbVxAFDUqiys4Ek30UH8WMDQl2MCfe1PY0qkK5k1LyaPoDVidV9x086CUBQ=="}],"memo":""},"metadata":{"timestamp":"1743503750"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateThread","args":["6"]}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Z5LHvSf/yEzK0EkHeEtsZMEgCa+WbVxAFDUqiys4Ek30UH8WMDQl2MCfe1PY0qkK5k1LyaPoDVidV9x086CUBQ=="}],"memo":""},"metadata":{"timestamp":"1743503790"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateThread","args":["6"]}],"fee":{"gas_wanted":"20000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Z5LHvSf/yEzK0EkHeEtsZMEgCa+WbVxAFDUqiys4Ek30UH8WMDQl2MCfe1PY0qkK5k1LyaPoDVidV9x086CUBQ=="}],"memo":""},"metadata":{"timestamp":"1743503970"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["leon123"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"31isgxPeADWvfClur/Rk+oqey6+aFE1PEjJto8Ryq2E2QbVxsWNMSgECuYWP1mCL0MmgB7SWGJHQhwTA5FgFCQ=="}],"memo":""},"metadata":{"timestamp":"1743504542"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateThread","args":["6","why a gnome?","A gnome is a builder, protector and value creator "]}],"fee":{"gas_wanted":"9755284","gas_fee":"20324ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"agI5NqZYivm4uaN5V0G/5EzxKST9sCn7A4A7noUR48tetvQ8Cc8sKQBtf6SErytA0YrLChEDzZrf09e5/Fa9Ag=="}],"memo":""},"metadata":{"timestamp":"1743504948"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1xwkue9t2pht4lt79n206jtpz4yex8l2dyv3s63","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"mUVRdBO5NXbPu4D0Usj5hMdMfiXfBCIfx8hECQ1x4Xx+b5kekz6g9JeEFZH7Gbi1yXDoi0AQONm2VW6gKEUAAg=="}],"memo":""},"metadata":{"timestamp":"1743506286"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1xwkue9t2pht4lt79n206jtpz4yex8l2dyv3s63","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["zaku"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Rn9Pagc0Z6FMRzcq8Au9wW0cjQhMjS5XzW82x78Rjic7pBGqiWdLytYVh9NYn0hbnm4nbAOob/yHQ2uE4It7Bw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743506306"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1xwkue9t2pht4lt79n206jtpz4yex8l2dyv3s63","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["func(zaku)"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"7nYTGpnJkfo7fdARVjIW0QxtUEkmkqVObRsAt/eyPb16Z44VevuzkRCOTRa5I6QVk5nWf+reydkI7INvqXE8Bg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743506772"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1xwkue9t2pht4lt79n206jtpz4yex8l2dyv3s63","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["zaku777"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"0xL26OU02xm1jA/obeSP2EtZTvrGqzXOGQb1Xjv1GVYrSGPKPVakNUAWH0Zde5mMk+L43bDE4wrzd4jFomu5Cg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743506883"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1xwkue9t2pht4lt79n206jtpz4yex8l2dyv3s63","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"VL1q3FZTMhqpOifP5iDi+F11vUNOVTuvfTrVYQwKOMpDLB+0v4YDmlTLuQFQRJMPDHNtvRE77oHCUB7fjetnCw=="}],"memo":""},"metadata":{"timestamp":"1743506933"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15dz69sch7fkhc9gk57hpe4qea77thmy20apu9x","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"6HMRUujXoTxUXW2jUlHQB9gknIqYDEGZZNDX5NDtkwvty6NVp0m04U4B0rdDrMcqLCaToJRddDi4lDmiw5SMDA=="}],"memo":""},"metadata":{"timestamp":"1743507023"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g14tp40xtsyulln8kpld0k4l7zcqa7qcklm05tjm","amount":"5000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"5SbcTm+QT4XB5VRAvZtKSrAQCQbbnTQF8ra4LGLXDraVUmmE7IAQ0oy0xcWeKcJj4XNmR+xAG1fUOm1+tK8TAw=="}],"memo":""},"metadata":{"timestamp":"1743509369"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1dzzx5qwcmawqnhhd76ehkteas5v2dg42hqnd7g","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3K2do5SHBF/u+bU7RO0ezAWORlbBXqz7z7BIO97a5fyrc6H6F4G0TaLGW76PpLlC0LuiR1A3Democ+5zjm6lAA=="}],"memo":""},"metadata":{"timestamp":"1743510719"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","package":{"name":"weird","path":"gno.land/r/leon000/issue/hello/gas/is/weird","files":[{"name":"package.gno","body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"GfsQ0I5SSXZm074k4iuGlEgSY/WEQDMI8MQgltqLuMG28trIKD9cJB/QrE5axZwbsaJaYfF6SdfRGUeDb7wsCw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743511431"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","package":{"name":"weird","path":"gno.land/r/leon000/issue/hello/gas/is/weird","files":[{"name":"package.gno","body":"package weird\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"3327924","gas_fee":"6934ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"aAuyHTRJJzEFGqQihgehNRTXesv8kma8e01IibGA4wRJJARuror2WxT6XvcaHtnnKA75xqWZ25WcK8NX3cncCw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743511447"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"A+lgaw1vC1kZXPXBZhZ3m2rU9L5RZFRp/WavKjgy1whmZVzVxNCDmRpblFLy2UNCb/rPVdfEdlJ7loNKIyrtCw=="}],"memo":""},"metadata":{"timestamp":"1743511597"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1lrsrj4auaffjk538w3x2c9gzyth2m0n39zcg6d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"cBPqOlEFpwnbdsnFx1159Pa1rSjZZCkueaXHczPk/MqqF4pUmHujmvSEH1U7YB9/qIVl2bdUUvlGB/BNyvBPBg=="}],"memo":""},"metadata":{"timestamp":"1743511602"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","package":{"name":"hello","path":"gno.land/r/prout/hello","files":[{"name":"package.gno","body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"2231690ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"z0x9dvcO+hOsgqcjkf4LPjIkuMaz/7ujWEZQjBmMbpGB6o40iXTPSEC3j72Iv0M4i9AcSlgHtEkkSAXMzytZAQ=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743511607"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lrsrj4auaffjk538w3x2c9gzyth2m0n39zcg6d","package":{"name":"hello","path":"gno.land/r//hello","files":[{"name":"package.gno","body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"2231690ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"6S5urKXavcoaM6rzPYoL9yXqSBlDYvxBRW8+aZ+GeiZXH6p+bKjixMyGFQHE3Y8+jsMJ0N5Q23zRP/DJGvuqDw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743511617"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"S+zxEd6ulJWj/dzNCS3R1S4RrIN7u7R9xBHs1Pk+GzQ9iMTy37Yh3/qc7jWc311Uds9ZIKcy6I5DGt++6vmkBQ=="}],"memo":""},"metadata":{"timestamp":"1743511777"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g15dz69sch7fkhc9gk57hpe4qea77thmy20apu9x","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"o+uwvdQbBn/HkHU987z9a5S4/kmAoABIwIW7OVNASd87nCmmwNa4MGOPm2tRb/7hH2sjq40BQQpCuZX+obY+Cg=="}],"memo":""},"metadata":{"timestamp":"1743511782"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g15dz69sch7fkhc9gk57hpe4qea77thmy20apu9x","package":{"name":"hello","path":"gno.land/r//hello","files":[{"name":"package.gno","body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n\n\n--= /Error =--\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"2233340ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"BwWC2toBCwvF7bpQ92m/a9twpwFVgt+NCTGLhjL1t4fVnnnybr1koCA8V2DmMfg8fVipmoYMMmvCdwwD3C+WDQ=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743511792"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lrsrj4auaffjk538w3x2c9gzyth2m0n39zcg6d","package":{"name":"hello","path":"gno.land/r/eva/hello","files":[{"name":"package.gno","body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"2000000000","gas_fee":"2233340ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"qRMpgLs8fpp5cDPc2nPQpn1tcDkWlcpjhjiOMwmax64PI8g3shlgSxb/19eVGOR1cuvuLW7tk/Sa3Fk2RA33Cw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743511843"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","package":{"name":"test","path":"gno.land/r/paulogarithm/test","files":[{"name":"package.gno","body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"2000000000","gas_fee":"2233340ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"wLMg5brrNqEUyy/62mnjjj2+mmcJ6Ks1lHXNtJzAg6UDuA5p87VAvdb10gSiHy2RKvLDUMM+urklO4/8nGFRDw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743511873"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15dz69sch7fkhc9gk57hpe4qea77thmy20apu9x","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"6HMRUujXoTxUXW2jUlHQB9gknIqYDEGZZNDX5NDtkwvty6NVp0m04U4B0rdDrMcqLCaToJRddDi4lDmiw5SMDA=="}],"memo":""},"metadata":{"timestamp":"1743512259"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","package":{"name":"test","path":"gno.land/r/paulogarithm/test","files":[{"name":"package.gno","body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"2000000000","gas_fee":"2233340ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"wLMg5brrNqEUyy/62mnjjj2+mmcJ6Ks1lHXNtJzAg6UDuA5p87VAvdb10gSiHy2RKvLDUMM+urklO4/8nGFRDw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743512264"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15dz69sch7fkhc9gk57hpe4qea77thmy20apu9x","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"VOB7lochh6szp7fzpzTlve6EpprFWCee+T8Rv304uBhG3j7Z/rMSIFJnnC2PDHM2jw0ZTSqNjxo3oi43j/C+Cg=="}],"memo":""},"metadata":{"timestamp":"1743512314"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1lrsrj4auaffjk538w3x2c9gzyth2m0n39zcg6d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"5MkCzkgXmPNv9f9ekdSjXDwd6Un+UJ6Ii6K0jpSxnanpBnXafmVQr/eKDtcqtlSLLXpLfikXhjBuZoyaNNi4CQ=="}],"memo":""},"metadata":{"timestamp":"1743512439"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"5000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"2cNvvYSj5AkC69xpVskJu6KqCxn7pSa8BXmsQakeCmvnGJfgY7oHaXJxKRw+bfrv7AVbqvX0k8+7516O+60KDg=="}],"memo":""},"metadata":{"timestamp":"1743512896"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14n0zsnsk054uxwvnwmmqyrq6e87ynk5vq98qqp","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"5LWQQjwoLe8Y1J3f481pjIwxoYyYu/uQuxRAj+JV+wqq0OoWdWH+Rb6NHgEsFa1DJLCB64lHO+ZEDqN4MpLXCA=="}],"memo":""},"metadata":{"timestamp":"1743587748"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1dzzx5qwcmawqnhhd76ehkteas5v2dg42hqnd7g","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3K2do5SHBF/u+bU7RO0ezAWORlbBXqz7z7BIO97a5fyrc6H6F4G0TaLGW76PpLlC0LuiR1A3Democ+5zjm6lAA=="}],"memo":""},"metadata":{"timestamp":"1743587759"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743587914"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743587924"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743587939"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743587980"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743588120"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743588221"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743591981"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743591991"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"k3NdhAvtHHXQVwo4xqtUV2Wf/LPbAfJVUkz7DlsuixJm+UiW2XGg7bqVbDeN8iJHrZmqMizEmAERt0jz9Dt/Bg=="}],"memo":""},"metadata":{"timestamp":"1743597359"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2231690ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"SncBkDW/CDY43AvtWCXlvuzUwcLtxINLa1MkGOeuKZhnqT0oqzt6ySslxlsaUlVFrptndkUYjmOioQzL8w+GCA=="}],"memo":""},"metadata":{"timestamp":"1743597379"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"887428","gas_fee":"165039ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"uIrRR7fJCY8dnrBO8A9XpoXsWDne+2L/TUDpAnUZtO5IgJNaU3oZkqLMXsFXAbgrwz5MnjtmpOn4AmNf5HojBg=="}],"memo":""},"metadata":{"timestamp":"1743597384"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["42"]}],"fee":{"gas_wanted":"3059175","gas_fee":"6374ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"EVgaJD/bBirIuxmvT71eNu75Nr/B3/VSTfL/pKCw8ux57owH7QmEhJRYHSIPOpbpHV6Rsy/5LruQswbYYJyGBg=="}],"memo":""},"metadata":{"timestamp":"1743597409"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"RhG54kLP2B1mjRm5+dWDE67w5H2W4wA887cqXT/mfIIegiICQFnETKTioZPpXU375y6NPfxsJ0sbjLzIFV4wAw=="}],"memo":""},"metadata":{"timestamp":"1743606306"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"bD5+VR6A4q87Mpz+SX1fnhUnySq57KIZQeZ/OKM4jgY4KcTyajHtaek37W6PzP2bW3WOTTGjy1oWYyGcJCdyDQ=="}],"memo":""},"metadata":{"timestamp":"1743606668"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"35TjLg82N3/oUHSlGp6J+OAQs+4KtT4Ea4PeCKSlVgQ2YBe7jQKmPTknNtM6ZJd19QJG2IkNwferWrZWiOmNCw=="}],"memo":""},"metadata":{"timestamp":"1743607723"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"CW2IHVm66hsIOg/IGO0RpOmBedl9kD2l4Onpl+yEeYcnFzAygg/lG/5aO/L2Du4MX4uVZ/G1KnPQWpklr9uIBg=="}],"memo":""},"metadata":{"timestamp":"1743608020"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"BDBTc0acXpFrvoiTK0cVRqEaAz9n3dR8lz8o6Wve1Bmu9YJ9y+3xfZCV/hru2vszYA+6k2Q7Ix4E+PMlOMBhCg=="}],"memo":""},"metadata":{"timestamp":"1743608226"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\n","admin"]}],"fee":{"gas_wanted":"8066534","gas_fee":"16806ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"pB4ok9z2I+0NVPOhH9GhrHW+iZEixOAVZReuz9Qo/F60s9BHbTS7R/ljuIhIirVjm+sJF2qhApa94vMGoDIYCg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743608291"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"8967781","gas_fee":"18683ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"6Rj8b2dVSbJrCMY+YbX3hJp750MzerPbDcafdtyFvy7KV0bNRxwve1kD2KhbRaoSTgSKVV8Xs84N4IDevVeWBA=="}],"memo":""},"metadata":{"timestamp":"1743608301"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15dz69sch7fkhc9gk57hpe4qea77thmy20apu9x","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"VOB7lochh6szp7fzpzTlve6EpprFWCee+T8Rv304uBhG3j7Z/rMSIFJnnC2PDHM2jw0ZTSqNjxo3oi43j/C+Cg=="}],"memo":""},"metadata":{"timestamp":"1743610126"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"DeleteTodo","args":["0"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"35+iZ2GB+Y1rkeTxPCCIDr3Vv2nfLg1gcswyZPYlrYpoq3b3b8gOM18BxY8POnJVrD4sO7SZV70ul5vXDczsCQ=="}],"memo":""},"metadata":{"timestamp":"1743611628"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g14gvmle0a5hln0ct7wv857gucr7lmeust35736r","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"8o7uLt1N6UdcF18N4RsKHxeRTNJML8jkZEnCphttJ0i07RWs51buzu0JChdW37PDRHKRbBMMig3GYmyY83YpCQ=="}],"memo":""},"metadata":{"timestamp":"1743662226"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"D3gA083Wird7NyA5rVob1L6Gy3QUuvbjG1zaQb2L79OvgMKhXdGC1cH2fACIkj97R72VztbY9GuOCDRARxv3AQ=="}],"memo":""},"metadata":{"timestamp":"1743663236"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","send":"","pkg_path":"gno.land/r/demo/foo721","func":"BalanceOf","args":["g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"un0B0pU1N1y+fRVnDyvGcyRr/eMaD/o5hYlzU9l8yevkcrW6Ea8yyn9fWqVijrZYxtHMKdXN04UvcFn5Y6MfAw=="}],"memo":""},"metadata":{"timestamp":"1743663533"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","send":"","pkg_path":"gno.land/r/demo/foo721","func":"BalanceOf","args":["g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj"]}],"fee":{"gas_wanted":"10000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"dmtkLTHHHTogXTL/yEMCQ/Y1GwocZoP8/ywMfIxBuApU7XqBCLkBu4XDjK5IjoMNEDjOPimT6Roa9hV0J4KMCA=="}],"memo":""},"metadata":{"timestamp":"1743663709"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"A+lgaw1vC1kZXPXBZhZ3m2rU9L5RZFRp/WavKjgy1whmZVzVxNCDmRpblFLy2UNCb/rPVdfEdlJ7loNKIyrtCw=="}],"memo":""},"metadata":{"timestamp":"1743666971"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["42"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2233340ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"HauKKdAUVL40GDmLeJaPvPfgc3lVACObGnAweQkUS5TpD7UbPYrXw/lVOQPkMrdALYjNZXfKT0sFQIOieuePBA=="}],"memo":""},"metadata":{"timestamp":"1743666986"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14n0zsnsk054uxwvnwmmqyrq6e87ynk5vq98qqp","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"5LWQQjwoLe8Y1J3f481pjIwxoYyYu/uQuxRAj+JV+wqq0OoWdWH+Rb6NHgEsFa1DJLCB64lHO+ZEDqN4MpLXCA=="}],"memo":""},"metadata":{"timestamp":"1743587748"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1dzzx5qwcmawqnhhd76ehkteas5v2dg42hqnd7g","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3K2do5SHBF/u+bU7RO0ezAWORlbBXqz7z7BIO97a5fyrc6H6F4G0TaLGW76PpLlC0LuiR1A3Democ+5zjm6lAA=="}],"memo":""},"metadata":{"timestamp":"1743587759"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743587914"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743587924"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743587939"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743587980"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743588120"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743588221"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743591981"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743591991"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"k3NdhAvtHHXQVwo4xqtUV2Wf/LPbAfJVUkz7DlsuixJm+UiW2XGg7bqVbDeN8iJHrZmqMizEmAERt0jz9Dt/Bg=="}],"memo":""},"metadata":{"timestamp":"1743597359"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2231690ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"SncBkDW/CDY43AvtWCXlvuzUwcLtxINLa1MkGOeuKZhnqT0oqzt6ySslxlsaUlVFrptndkUYjmOioQzL8w+GCA=="}],"memo":""},"metadata":{"timestamp":"1743597379"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"887428","gas_fee":"165039ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"uIrRR7fJCY8dnrBO8A9XpoXsWDne+2L/TUDpAnUZtO5IgJNaU3oZkqLMXsFXAbgrwz5MnjtmpOn4AmNf5HojBg=="}],"memo":""},"metadata":{"timestamp":"1743597384"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["42"]}],"fee":{"gas_wanted":"3059175","gas_fee":"6374ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"EVgaJD/bBirIuxmvT71eNu75Nr/B3/VSTfL/pKCw8ux57owH7QmEhJRYHSIPOpbpHV6Rsy/5LruQswbYYJyGBg=="}],"memo":""},"metadata":{"timestamp":"1743597409"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"RhG54kLP2B1mjRm5+dWDE67w5H2W4wA887cqXT/mfIIegiICQFnETKTioZPpXU375y6NPfxsJ0sbjLzIFV4wAw=="}],"memo":""},"metadata":{"timestamp":"1743606306"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"bD5+VR6A4q87Mpz+SX1fnhUnySq57KIZQeZ/OKM4jgY4KcTyajHtaek37W6PzP2bW3WOTTGjy1oWYyGcJCdyDQ=="}],"memo":""},"metadata":{"timestamp":"1743606668"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"35TjLg82N3/oUHSlGp6J+OAQs+4KtT4Ea4PeCKSlVgQ2YBe7jQKmPTknNtM6ZJd19QJG2IkNwferWrZWiOmNCw=="}],"memo":""},"metadata":{"timestamp":"1743607723"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"CW2IHVm66hsIOg/IGO0RpOmBedl9kD2l4Onpl+yEeYcnFzAygg/lG/5aO/L2Du4MX4uVZ/G1KnPQWpklr9uIBg=="}],"memo":""},"metadata":{"timestamp":"1743608020"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"BDBTc0acXpFrvoiTK0cVRqEaAz9n3dR8lz8o6Wve1Bmu9YJ9y+3xfZCV/hru2vszYA+6k2Q7Ix4E+PMlOMBhCg=="}],"memo":""},"metadata":{"timestamp":"1743608226"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\n","admin"]}],"fee":{"gas_wanted":"8066534","gas_fee":"16806ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"pB4ok9z2I+0NVPOhH9GhrHW+iZEixOAVZReuz9Qo/F60s9BHbTS7R/ljuIhIirVjm+sJF2qhApa94vMGoDIYCg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743608291"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"8967781","gas_fee":"18683ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"6Rj8b2dVSbJrCMY+YbX3hJp750MzerPbDcafdtyFvy7KV0bNRxwve1kD2KhbRaoSTgSKVV8Xs84N4IDevVeWBA=="}],"memo":""},"metadata":{"timestamp":"1743608301"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15dz69sch7fkhc9gk57hpe4qea77thmy20apu9x","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"VOB7lochh6szp7fzpzTlve6EpprFWCee+T8Rv304uBhG3j7Z/rMSIFJnnC2PDHM2jw0ZTSqNjxo3oi43j/C+Cg=="}],"memo":""},"metadata":{"timestamp":"1743610126"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"DeleteTodo","args":["0"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"35+iZ2GB+Y1rkeTxPCCIDr3Vv2nfLg1gcswyZPYlrYpoq3b3b8gOM18BxY8POnJVrD4sO7SZV70ul5vXDczsCQ=="}],"memo":""},"metadata":{"timestamp":"1743611628"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g14gvmle0a5hln0ct7wv857gucr7lmeust35736r","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"8o7uLt1N6UdcF18N4RsKHxeRTNJML8jkZEnCphttJ0i07RWs51buzu0JChdW37PDRHKRbBMMig3GYmyY83YpCQ=="}],"memo":""},"metadata":{"timestamp":"1743662226"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"D3gA083Wird7NyA5rVob1L6Gy3QUuvbjG1zaQb2L79OvgMKhXdGC1cH2fACIkj97R72VztbY9GuOCDRARxv3AQ=="}],"memo":""},"metadata":{"timestamp":"1743663236"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","send":"","pkg_path":"gno.land/r/demo/foo721","func":"BalanceOf","args":["g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"un0B0pU1N1y+fRVnDyvGcyRr/eMaD/o5hYlzU9l8yevkcrW6Ea8yyn9fWqVijrZYxtHMKdXN04UvcFn5Y6MfAw=="}],"memo":""},"metadata":{"timestamp":"1743663533"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","send":"","pkg_path":"gno.land/r/demo/foo721","func":"BalanceOf","args":["g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj"]}],"fee":{"gas_wanted":"10000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"dmtkLTHHHTogXTL/yEMCQ/Y1GwocZoP8/ywMfIxBuApU7XqBCLkBu4XDjK5IjoMNEDjOPimT6Roa9hV0J4KMCA=="}],"memo":""},"metadata":{"timestamp":"1743663709"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"A+lgaw1vC1kZXPXBZhZ3m2rU9L5RZFRp/WavKjgy1whmZVzVxNCDmRpblFLy2UNCb/rPVdfEdlJ7loNKIyrtCw=="}],"memo":""},"metadata":{"timestamp":"1743666971"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["42"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2233340ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"HauKKdAUVL40GDmLeJaPvPfgc3lVACObGnAweQkUS5TpD7UbPYrXw/lVOQPkMrdALYjNZXfKT0sFQIOieuePBA=="}],"memo":""},"metadata":{"timestamp":"1743666986"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["keyboard_worrier"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"+3mIPIe18QEQGSUrtvOzXd5+uNyD39Ap4ZfFWH4LTz3BZ1BjntNitygNpe/MrD7R0Qru4oCpJESEvYOoIRpaBQ=="}],"memo":""},"metadata":{"timestamp":"1743672162"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743674585"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743675500"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676274"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676415"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676425"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676440"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676450"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676465"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","send":"","pkg_path":"gno.land/r/demo/userbook","func":"SignUp","args":null}],"fee":{"gas_wanted":"3000000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Nsrr9ntlSB2d5G6NUS+t/9/x5y1aemtYDYdBmuIYreBcVsjQ4tOaULgFBDwj4eQTLA3D9bt0K2UTnXIW3mA3BA=="}],"memo":""},"metadata":{"timestamp":"1743676600"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"RemoveMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\n"]}],"fee":{"gas_wanted":"7891622","gas_fee":"16441ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"N8XRKji1icpDGOk+CeTfLnSMOIK3L1Jm5yF4d+VdLN1/eXJ7o7xbqEx820eHAlVR+AbPSV5yPCu9t2uxyEJ2Cw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743677621"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","admin"]}],"fee":{"gas_wanted":"8066714","gas_fee":"16806ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3vxQTzFmJpLVPAE/KzFfXSFBd63mlmZe06/a/Dcq8jgZv7lA9IuprE96wr20XjnAjeebgmAPGdIqa8BeGbNoAw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743677721"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"887404","gas_fee":"1849ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"oMS3JBmGucIA3MquuQDsFxpTaTgTrwUrXL1hQLiVrzRi+ahBpd0c9J9Uq2U+st5G/1+ZpTsF3rMxNE2PWsVXAA=="}],"memo":""},"metadata":{"timestamp":"1743677742"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["hello !"]}],"fee":{"gas_wanted":"887311","gas_fee":"1849ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"+my44dCnUer8cIVbHjkPaN4Fj7g3UKZEQeHmgpigl29K3H/qY5UUmV/iWs5Z0ePVysQ6u8wEYOL5zkxqrfjzCA=="}],"memo":""},"metadata":{"timestamp":"1743677757"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"LxKecWSuzORnFdZNE6NEB4ev7skwerS3aKFMjAY7+lfrgavZngIOttAmSzXKNqjI6e6PKT0Xg2AlISxfbA+IAg=="}],"memo":""},"metadata":{"timestamp":"1743680159"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"ChangeMemberRole","args":["0","g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"jZnWeopjWqv3BMn/ACWO/tD9oc/BAiLolGd06UgFswmtLEufcNudmkCIz7FlloGpkSDaTQhApfEt6VVsIh9bAg=="}],"memo":""},"metadata":{"timestamp":"1743680391"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/leon/hof","func":"Upvote","args":["gno.land%2Fr%2Fursulovic%2Fhome"]}],"fee":{"gas_wanted":"12000000","gas_fee":"1721880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Fb8QgDrjGxFwf2ga2FrmZ63CHor0upQqWYDHcx2MZoiYoYCshNXNITEwZl7tXK6vzFhhNlUSrI0Tx4xqHYUiDA=="}],"memo":""},"metadata":{"timestamp":"1743682979"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1d2hvkqhqckhzpaum09c002fesdw89qrcg9zqws","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ld8kqSH00V2d0yxuGtA7G9pdtdxeEENrLxEDCTVQPwEJS4v5myzmTo1tdm9oyYA+CpJ7Std/c6yUOVU2Ir5ZCw=="}],"memo":""},"metadata":{"timestamp":"1743683221"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14n0zsnsk054uxwvnwmmqyrq6e87ynk5vq98qqp","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"5LWQQjwoLe8Y1J3f481pjIwxoYyYu/uQuxRAj+JV+wqq0OoWdWH+Rb6NHgEsFa1DJLCB64lHO+ZEDqN4MpLXCA=="}],"memo":""},"metadata":{"timestamp":"1743587748"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1dzzx5qwcmawqnhhd76ehkteas5v2dg42hqnd7g","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3K2do5SHBF/u+bU7RO0ezAWORlbBXqz7z7BIO97a5fyrc6H6F4G0TaLGW76PpLlC0LuiR1A3Democ+5zjm6lAA=="}],"memo":""},"metadata":{"timestamp":"1743587759"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743587914"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743587924"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743587939"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743587980"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743588120"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743588221"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743591981"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743591991"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"k3NdhAvtHHXQVwo4xqtUV2Wf/LPbAfJVUkz7DlsuixJm+UiW2XGg7bqVbDeN8iJHrZmqMizEmAERt0jz9Dt/Bg=="}],"memo":""},"metadata":{"timestamp":"1743597359"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2231690ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"SncBkDW/CDY43AvtWCXlvuzUwcLtxINLa1MkGOeuKZhnqT0oqzt6ySslxlsaUlVFrptndkUYjmOioQzL8w+GCA=="}],"memo":""},"metadata":{"timestamp":"1743597379"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"887428","gas_fee":"165039ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"uIrRR7fJCY8dnrBO8A9XpoXsWDne+2L/TUDpAnUZtO5IgJNaU3oZkqLMXsFXAbgrwz5MnjtmpOn4AmNf5HojBg=="}],"memo":""},"metadata":{"timestamp":"1743597384"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["42"]}],"fee":{"gas_wanted":"3059175","gas_fee":"6374ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"EVgaJD/bBirIuxmvT71eNu75Nr/B3/VSTfL/pKCw8ux57owH7QmEhJRYHSIPOpbpHV6Rsy/5LruQswbYYJyGBg=="}],"memo":""},"metadata":{"timestamp":"1743597409"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"RhG54kLP2B1mjRm5+dWDE67w5H2W4wA887cqXT/mfIIegiICQFnETKTioZPpXU375y6NPfxsJ0sbjLzIFV4wAw=="}],"memo":""},"metadata":{"timestamp":"1743606306"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"bD5+VR6A4q87Mpz+SX1fnhUnySq57KIZQeZ/OKM4jgY4KcTyajHtaek37W6PzP2bW3WOTTGjy1oWYyGcJCdyDQ=="}],"memo":""},"metadata":{"timestamp":"1743606668"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"35TjLg82N3/oUHSlGp6J+OAQs+4KtT4Ea4PeCKSlVgQ2YBe7jQKmPTknNtM6ZJd19QJG2IkNwferWrZWiOmNCw=="}],"memo":""},"metadata":{"timestamp":"1743607723"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"CW2IHVm66hsIOg/IGO0RpOmBedl9kD2l4Onpl+yEeYcnFzAygg/lG/5aO/L2Du4MX4uVZ/G1KnPQWpklr9uIBg=="}],"memo":""},"metadata":{"timestamp":"1743608020"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"BDBTc0acXpFrvoiTK0cVRqEaAz9n3dR8lz8o6Wve1Bmu9YJ9y+3xfZCV/hru2vszYA+6k2Q7Ix4E+PMlOMBhCg=="}],"memo":""},"metadata":{"timestamp":"1743608226"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\n","admin"]}],"fee":{"gas_wanted":"8066534","gas_fee":"16806ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"pB4ok9z2I+0NVPOhH9GhrHW+iZEixOAVZReuz9Qo/F60s9BHbTS7R/ljuIhIirVjm+sJF2qhApa94vMGoDIYCg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743608291"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"8967781","gas_fee":"18683ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"6Rj8b2dVSbJrCMY+YbX3hJp750MzerPbDcafdtyFvy7KV0bNRxwve1kD2KhbRaoSTgSKVV8Xs84N4IDevVeWBA=="}],"memo":""},"metadata":{"timestamp":"1743608301"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15dz69sch7fkhc9gk57hpe4qea77thmy20apu9x","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"VOB7lochh6szp7fzpzTlve6EpprFWCee+T8Rv304uBhG3j7Z/rMSIFJnnC2PDHM2jw0ZTSqNjxo3oi43j/C+Cg=="}],"memo":""},"metadata":{"timestamp":"1743610126"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"DeleteTodo","args":["0"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"35+iZ2GB+Y1rkeTxPCCIDr3Vv2nfLg1gcswyZPYlrYpoq3b3b8gOM18BxY8POnJVrD4sO7SZV70ul5vXDczsCQ=="}],"memo":""},"metadata":{"timestamp":"1743611628"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g14gvmle0a5hln0ct7wv857gucr7lmeust35736r","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"8o7uLt1N6UdcF18N4RsKHxeRTNJML8jkZEnCphttJ0i07RWs51buzu0JChdW37PDRHKRbBMMig3GYmyY83YpCQ=="}],"memo":""},"metadata":{"timestamp":"1743662226"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"D3gA083Wird7NyA5rVob1L6Gy3QUuvbjG1zaQb2L79OvgMKhXdGC1cH2fACIkj97R72VztbY9GuOCDRARxv3AQ=="}],"memo":""},"metadata":{"timestamp":"1743663236"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","send":"","pkg_path":"gno.land/r/demo/foo721","func":"BalanceOf","args":["g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"un0B0pU1N1y+fRVnDyvGcyRr/eMaD/o5hYlzU9l8yevkcrW6Ea8yyn9fWqVijrZYxtHMKdXN04UvcFn5Y6MfAw=="}],"memo":""},"metadata":{"timestamp":"1743663533"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","send":"","pkg_path":"gno.land/r/demo/foo721","func":"BalanceOf","args":["g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj"]}],"fee":{"gas_wanted":"10000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"dmtkLTHHHTogXTL/yEMCQ/Y1GwocZoP8/ywMfIxBuApU7XqBCLkBu4XDjK5IjoMNEDjOPimT6Roa9hV0J4KMCA=="}],"memo":""},"metadata":{"timestamp":"1743663709"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"A+lgaw1vC1kZXPXBZhZ3m2rU9L5RZFRp/WavKjgy1whmZVzVxNCDmRpblFLy2UNCb/rPVdfEdlJ7loNKIyrtCw=="}],"memo":""},"metadata":{"timestamp":"1743666971"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["42"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2233340ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"HauKKdAUVL40GDmLeJaPvPfgc3lVACObGnAweQkUS5TpD7UbPYrXw/lVOQPkMrdALYjNZXfKT0sFQIOieuePBA=="}],"memo":""},"metadata":{"timestamp":"1743666986"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["keyboard_worrier"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"+3mIPIe18QEQGSUrtvOzXd5+uNyD39Ap4ZfFWH4LTz3BZ1BjntNitygNpe/MrD7R0Qru4oCpJESEvYOoIRpaBQ=="}],"memo":""},"metadata":{"timestamp":"1743672162"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743674585"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743675500"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676274"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676415"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676425"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676440"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676450"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676465"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","send":"","pkg_path":"gno.land/r/demo/userbook","func":"SignUp","args":null}],"fee":{"gas_wanted":"3000000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Nsrr9ntlSB2d5G6NUS+t/9/x5y1aemtYDYdBmuIYreBcVsjQ4tOaULgFBDwj4eQTLA3D9bt0K2UTnXIW3mA3BA=="}],"memo":""},"metadata":{"timestamp":"1743676600"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"RemoveMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\n"]}],"fee":{"gas_wanted":"7891622","gas_fee":"16441ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"N8XRKji1icpDGOk+CeTfLnSMOIK3L1Jm5yF4d+VdLN1/eXJ7o7xbqEx820eHAlVR+AbPSV5yPCu9t2uxyEJ2Cw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743677621"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","admin"]}],"fee":{"gas_wanted":"8066714","gas_fee":"16806ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3vxQTzFmJpLVPAE/KzFfXSFBd63mlmZe06/a/Dcq8jgZv7lA9IuprE96wr20XjnAjeebgmAPGdIqa8BeGbNoAw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743677721"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"887404","gas_fee":"1849ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"oMS3JBmGucIA3MquuQDsFxpTaTgTrwUrXL1hQLiVrzRi+ahBpd0c9J9Uq2U+st5G/1+ZpTsF3rMxNE2PWsVXAA=="}],"memo":""},"metadata":{"timestamp":"1743677742"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["hello !"]}],"fee":{"gas_wanted":"887311","gas_fee":"1849ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"+my44dCnUer8cIVbHjkPaN4Fj7g3UKZEQeHmgpigl29K3H/qY5UUmV/iWs5Z0ePVysQ6u8wEYOL5zkxqrfjzCA=="}],"memo":""},"metadata":{"timestamp":"1743677757"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"LxKecWSuzORnFdZNE6NEB4ev7skwerS3aKFMjAY7+lfrgavZngIOttAmSzXKNqjI6e6PKT0Xg2AlISxfbA+IAg=="}],"memo":""},"metadata":{"timestamp":"1743680159"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"ChangeMemberRole","args":["0","g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"jZnWeopjWqv3BMn/ACWO/tD9oc/BAiLolGd06UgFswmtLEufcNudmkCIz7FlloGpkSDaTQhApfEt6VVsIh9bAg=="}],"memo":""},"metadata":{"timestamp":"1743680391"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/leon/hof","func":"Upvote","args":["gno.land%2Fr%2Fursulovic%2Fhome"]}],"fee":{"gas_wanted":"12000000","gas_fee":"1721880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Fb8QgDrjGxFwf2ga2FrmZ63CHor0upQqWYDHcx2MZoiYoYCshNXNITEwZl7tXK6vzFhhNlUSrI0Tx4xqHYUiDA=="}],"memo":""},"metadata":{"timestamp":"1743682979"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1d2hvkqhqckhzpaum09c002fesdw89qrcg9zqws","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ld8kqSH00V2d0yxuGtA7G9pdtdxeEENrLxEDCTVQPwEJS4v5myzmTo1tdm9oyYA+CpJ7Std/c6yUOVU2Ir5ZCw=="}],"memo":""},"metadata":{"timestamp":"1743683221"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14n0zsnsk054uxwvnwmmqyrq6e87ynk5vq98qqp","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"5LWQQjwoLe8Y1J3f481pjIwxoYyYu/uQuxRAj+JV+wqq0OoWdWH+Rb6NHgEsFa1DJLCB64lHO+ZEDqN4MpLXCA=="}],"memo":""},"metadata":{"timestamp":"1743587748"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1dzzx5qwcmawqnhhd76ehkteas5v2dg42hqnd7g","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3K2do5SHBF/u+bU7RO0ezAWORlbBXqz7z7BIO97a5fyrc6H6F4G0TaLGW76PpLlC0LuiR1A3Democ+5zjm6lAA=="}],"memo":""},"metadata":{"timestamp":"1743587759"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743587914"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743587924"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743587939"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743587980"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743588120"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743588221"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743591981"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743591991"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"k3NdhAvtHHXQVwo4xqtUV2Wf/LPbAfJVUkz7DlsuixJm+UiW2XGg7bqVbDeN8iJHrZmqMizEmAERt0jz9Dt/Bg=="}],"memo":""},"metadata":{"timestamp":"1743597359"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2231690ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"SncBkDW/CDY43AvtWCXlvuzUwcLtxINLa1MkGOeuKZhnqT0oqzt6ySslxlsaUlVFrptndkUYjmOioQzL8w+GCA=="}],"memo":""},"metadata":{"timestamp":"1743597379"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"887428","gas_fee":"165039ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"uIrRR7fJCY8dnrBO8A9XpoXsWDne+2L/TUDpAnUZtO5IgJNaU3oZkqLMXsFXAbgrwz5MnjtmpOn4AmNf5HojBg=="}],"memo":""},"metadata":{"timestamp":"1743597384"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["42"]}],"fee":{"gas_wanted":"3059175","gas_fee":"6374ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"EVgaJD/bBirIuxmvT71eNu75Nr/B3/VSTfL/pKCw8ux57owH7QmEhJRYHSIPOpbpHV6Rsy/5LruQswbYYJyGBg=="}],"memo":""},"metadata":{"timestamp":"1743597409"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"RhG54kLP2B1mjRm5+dWDE67w5H2W4wA887cqXT/mfIIegiICQFnETKTioZPpXU375y6NPfxsJ0sbjLzIFV4wAw=="}],"memo":""},"metadata":{"timestamp":"1743606306"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"bD5+VR6A4q87Mpz+SX1fnhUnySq57KIZQeZ/OKM4jgY4KcTyajHtaek37W6PzP2bW3WOTTGjy1oWYyGcJCdyDQ=="}],"memo":""},"metadata":{"timestamp":"1743606668"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"35TjLg82N3/oUHSlGp6J+OAQs+4KtT4Ea4PeCKSlVgQ2YBe7jQKmPTknNtM6ZJd19QJG2IkNwferWrZWiOmNCw=="}],"memo":""},"metadata":{"timestamp":"1743607723"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"CW2IHVm66hsIOg/IGO0RpOmBedl9kD2l4Onpl+yEeYcnFzAygg/lG/5aO/L2Du4MX4uVZ/G1KnPQWpklr9uIBg=="}],"memo":""},"metadata":{"timestamp":"1743608020"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"BDBTc0acXpFrvoiTK0cVRqEaAz9n3dR8lz8o6Wve1Bmu9YJ9y+3xfZCV/hru2vszYA+6k2Q7Ix4E+PMlOMBhCg=="}],"memo":""},"metadata":{"timestamp":"1743608226"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\n","admin"]}],"fee":{"gas_wanted":"8066534","gas_fee":"16806ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"pB4ok9z2I+0NVPOhH9GhrHW+iZEixOAVZReuz9Qo/F60s9BHbTS7R/ljuIhIirVjm+sJF2qhApa94vMGoDIYCg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743608291"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"8967781","gas_fee":"18683ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"6Rj8b2dVSbJrCMY+YbX3hJp750MzerPbDcafdtyFvy7KV0bNRxwve1kD2KhbRaoSTgSKVV8Xs84N4IDevVeWBA=="}],"memo":""},"metadata":{"timestamp":"1743608301"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15dz69sch7fkhc9gk57hpe4qea77thmy20apu9x","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"VOB7lochh6szp7fzpzTlve6EpprFWCee+T8Rv304uBhG3j7Z/rMSIFJnnC2PDHM2jw0ZTSqNjxo3oi43j/C+Cg=="}],"memo":""},"metadata":{"timestamp":"1743610126"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"DeleteTodo","args":["0"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"35+iZ2GB+Y1rkeTxPCCIDr3Vv2nfLg1gcswyZPYlrYpoq3b3b8gOM18BxY8POnJVrD4sO7SZV70ul5vXDczsCQ=="}],"memo":""},"metadata":{"timestamp":"1743611628"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g14gvmle0a5hln0ct7wv857gucr7lmeust35736r","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"8o7uLt1N6UdcF18N4RsKHxeRTNJML8jkZEnCphttJ0i07RWs51buzu0JChdW37PDRHKRbBMMig3GYmyY83YpCQ=="}],"memo":""},"metadata":{"timestamp":"1743662226"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"D3gA083Wird7NyA5rVob1L6Gy3QUuvbjG1zaQb2L79OvgMKhXdGC1cH2fACIkj97R72VztbY9GuOCDRARxv3AQ=="}],"memo":""},"metadata":{"timestamp":"1743663236"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","send":"","pkg_path":"gno.land/r/demo/foo721","func":"BalanceOf","args":["g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"un0B0pU1N1y+fRVnDyvGcyRr/eMaD/o5hYlzU9l8yevkcrW6Ea8yyn9fWqVijrZYxtHMKdXN04UvcFn5Y6MfAw=="}],"memo":""},"metadata":{"timestamp":"1743663533"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","send":"","pkg_path":"gno.land/r/demo/foo721","func":"BalanceOf","args":["g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj"]}],"fee":{"gas_wanted":"10000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"dmtkLTHHHTogXTL/yEMCQ/Y1GwocZoP8/ywMfIxBuApU7XqBCLkBu4XDjK5IjoMNEDjOPimT6Roa9hV0J4KMCA=="}],"memo":""},"metadata":{"timestamp":"1743663709"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"A+lgaw1vC1kZXPXBZhZ3m2rU9L5RZFRp/WavKjgy1whmZVzVxNCDmRpblFLy2UNCb/rPVdfEdlJ7loNKIyrtCw=="}],"memo":""},"metadata":{"timestamp":"1743666971"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["42"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2233340ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"HauKKdAUVL40GDmLeJaPvPfgc3lVACObGnAweQkUS5TpD7UbPYrXw/lVOQPkMrdALYjNZXfKT0sFQIOieuePBA=="}],"memo":""},"metadata":{"timestamp":"1743666986"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["keyboard_worrier"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"+3mIPIe18QEQGSUrtvOzXd5+uNyD39Ap4ZfFWH4LTz3BZ1BjntNitygNpe/MrD7R0Qru4oCpJESEvYOoIRpaBQ=="}],"memo":""},"metadata":{"timestamp":"1743672162"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743674585"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743675500"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676274"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676415"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676425"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676440"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676450"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676465"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","send":"","pkg_path":"gno.land/r/demo/userbook","func":"SignUp","args":null}],"fee":{"gas_wanted":"3000000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Nsrr9ntlSB2d5G6NUS+t/9/x5y1aemtYDYdBmuIYreBcVsjQ4tOaULgFBDwj4eQTLA3D9bt0K2UTnXIW3mA3BA=="}],"memo":""},"metadata":{"timestamp":"1743676600"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"RemoveMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\n"]}],"fee":{"gas_wanted":"7891622","gas_fee":"16441ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"N8XRKji1icpDGOk+CeTfLnSMOIK3L1Jm5yF4d+VdLN1/eXJ7o7xbqEx820eHAlVR+AbPSV5yPCu9t2uxyEJ2Cw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743677621"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","admin"]}],"fee":{"gas_wanted":"8066714","gas_fee":"16806ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3vxQTzFmJpLVPAE/KzFfXSFBd63mlmZe06/a/Dcq8jgZv7lA9IuprE96wr20XjnAjeebgmAPGdIqa8BeGbNoAw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743677721"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"887404","gas_fee":"1849ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"oMS3JBmGucIA3MquuQDsFxpTaTgTrwUrXL1hQLiVrzRi+ahBpd0c9J9Uq2U+st5G/1+ZpTsF3rMxNE2PWsVXAA=="}],"memo":""},"metadata":{"timestamp":"1743677742"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["hello !"]}],"fee":{"gas_wanted":"887311","gas_fee":"1849ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"+my44dCnUer8cIVbHjkPaN4Fj7g3UKZEQeHmgpigl29K3H/qY5UUmV/iWs5Z0ePVysQ6u8wEYOL5zkxqrfjzCA=="}],"memo":""},"metadata":{"timestamp":"1743677757"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"LxKecWSuzORnFdZNE6NEB4ev7skwerS3aKFMjAY7+lfrgavZngIOttAmSzXKNqjI6e6PKT0Xg2AlISxfbA+IAg=="}],"memo":""},"metadata":{"timestamp":"1743680159"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"ChangeMemberRole","args":["0","g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"jZnWeopjWqv3BMn/ACWO/tD9oc/BAiLolGd06UgFswmtLEufcNudmkCIz7FlloGpkSDaTQhApfEt6VVsIh9bAg=="}],"memo":""},"metadata":{"timestamp":"1743680391"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/leon/hof","func":"Upvote","args":["gno.land%2Fr%2Fursulovic%2Fhome"]}],"fee":{"gas_wanted":"12000000","gas_fee":"1721880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Fb8QgDrjGxFwf2ga2FrmZ63CHor0upQqWYDHcx2MZoiYoYCshNXNITEwZl7tXK6vzFhhNlUSrI0Tx4xqHYUiDA=="}],"memo":""},"metadata":{"timestamp":"1743682979"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1d2hvkqhqckhzpaum09c002fesdw89qrcg9zqws","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ld8kqSH00V2d0yxuGtA7G9pdtdxeEENrLxEDCTVQPwEJS4v5myzmTo1tdm9oyYA+CpJ7Std/c6yUOVU2Ir5ZCw=="}],"memo":""},"metadata":{"timestamp":"1743683221"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1lrsrj4auaffjk538w3x2c9gzyth2m0n39zcg6d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"5MkCzkgXmPNv9f9ekdSjXDwd6Un+UJ6Ii6K0jpSxnanpBnXafmVQr/eKDtcqtlSLLXpLfikXhjBuZoyaNNi4CQ=="}],"memo":""},"metadata":{"timestamp":"1743704885"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["2","1","1","Hey hey hey"]}],"fee":{"gas_wanted":"60000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"CimPnVhuqAEqqSApH5rVTxXEorJwdjWA5876tCSCaKKSexjojIicDD4hpQUi3Xql5a6jnrAfBb17flUc3UAiBA=="}],"memo":""},"metadata":{"timestamp":"1743711043"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["aeddi"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"2q9MkSk7mZGKAOPZKlApbpwGReLud/us7X6MHoKSgOtrLFy4v5Im5tMCuAg4NEx1KSY8ci93sCrAQz16TnWfDg=="}],"memo":""},"metadata":{"timestamp":"1743711163"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g16znvp6wxupkkds8mmmtxhvmdly08xpa4rqagp3","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"DKbiJAf8yy6x2aN46wAIcPmaFZhHgqdGX/Aa8MM3bx+tVoKQVKC1io8iS49wZtWruEk218jqNk1FgbFnPSObBA=="}],"memo":""},"metadata":{"timestamp":"1743712058"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["3","This is a test","Hello World"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"gz8xLsHOlm3KgTbMLZHULlEXYNQvHHyyurwp3BMvzUhwAnA5+eUZLguT5KoB070p/NkewrIAMy4dTfX/Z6U6AQ=="}],"memo":""},"metadata":{"timestamp":"1743712737"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"1648310ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"eP3yIVSRgR6yQJOv5h2TUvb0YjsP0kTJIoy7eMM8D9qNGKzYdWBaXP/Q16E4htrelZWvxyMc/kaBi+rQA5OkAA=="}],"memo":""},"metadata":{"timestamp":"1743715914"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"o3o7DbJf6G+LcRH+iRKT89iQ6nyTEqk+iUEVL/A8s7jj1CG9MMucPjO6jNdPzxSEZM7fXFxCRHbgZSNsfae3AQ=="}],"memo":""},"metadata":{"timestamp":"1743738197"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["1","1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"mqZgvx2CCHv3dUNNSD+n88jFQYItW7klK/4Mwx+87JroMy50R6TRsXBsF7gVjtT7vsZg36bEd5Wzbhis5KdqBA=="}],"memo":""},"metadata":{"timestamp":"1743738288"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"DeletePost","args":["1","2","2"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"MUvvQiy/3718kgycKVKamoodgAQ5QNr/ANiAnT2RrbrDOnIIRyyxmXtgRzasiu8yyNtQxU6wTK5gOwcmpWSHDA=="}],"memo":""},"metadata":{"timestamp":"1743738333"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/leon/hof","func":"Upvote","args":["gno.land%2Fr%2Fursulovic%2Fhome"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"uSYEDBtBGRTDnHgogSGegpLkqL/2A1taUcjaC5qgHO/bdA/V4tXfDGUxaxDk6l5ITqpgrY0U2bbC9vbpZ9DfDA=="}],"memo":""},"metadata":{"timestamp":"1743738469"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["1","2"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lK0oWzYVhP1fdOI7rZlaTzRKO3tm0+oiR991gjivYT0WE+Su1NABU10EbfoRrMLiEyfJUdBPu7FZk+ntk6XSDw=="}],"memo":""},"metadata":{"timestamp":"1743738680"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1nnl20472w0effzcexuqmk4ntn20wg95ytygy55","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"iipZSkqtkr17A3C5DhLb5PMWpu6AFWlh+xgyr6FR2gN6JVeNGsZ7nQwVGC8PEihR4HaNaI5+kIhD2NPJ7OOfBA=="}],"memo":""},"metadata":{"timestamp":"1743739027"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1nnl20472w0effzcexuqmk4ntn20wg95ytygy55","to_address":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","amount":"9000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"uTCxprNYW1bynLRFSlbY3R2C9d1htOt7ATN03Deazmxtl+OCy2NlQyfu3P9j1N96i9ypWW30MRJOn6p0C/VEBA=="}],"memo":""},"metadata":{"timestamp":"1743739047"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1zeq4hn2hd2azde6p9x2ya9gp3ug30vuuv56pym","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"GUGACDLsNHR04L7sL2wA6yZN1Ujy1P+hm0G8jgh7vZWg8JHs8MjwxGhz50z5kYrHZmVf68R1f2zNchYoYKXaDA=="}],"memo":""},"metadata":{"timestamp":"1743739590"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1zeq4hn2hd2azde6p9x2ya9gp3ug30vuuv56pym","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["2","2"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"XpjuXG0sxPRREVNem1ST5D9UAU6wvnSehwVkYkiE7o4gtK0xQa2LDSx1YS4IEziMIa7aqWmt5YLu7Y/1wGJ1Dg=="}],"memo":""},"metadata":{"timestamp":"1743739625"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1p5pa2sp4elcja2u8wn36zv3plsyp8xrqgz0usf","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"4qzupQ35Elm3J9Kw8ywsZVVqtoQema07OW6XzT9ORes408fOdkh5Vdaji4fHcUh2JLLjO8a6JZZjNPLQY4QDCg=="}],"memo":""},"metadata":{"timestamp":"1743750714"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"5KQEAVjunxy5S1a8XctQM33/kGpmoZvynCfD9YT2Hkz/L32yb9birF6Bt7y+EpdQ4GUtFcCzYSZObRIB5J5eCw=="}],"memo":""},"metadata":{"timestamp":"1743750895"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":["aeddi-testing"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"NJVQ1B8M3CNO3CSUat6+G6qhGtuKBsQjVDFDzjlyMrmtrcmoxH21yFjVh/wb8N1QPOdJUuzcL4H98s8NdNYJBA=="}],"memo":""},"metadata":{"timestamp":"1743751141"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14n0zsnsk054uxwvnwmmqyrq6e87ynk5vq98qqp","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"5LWQQjwoLe8Y1J3f481pjIwxoYyYu/uQuxRAj+JV+wqq0OoWdWH+Rb6NHgEsFa1DJLCB64lHO+ZEDqN4MpLXCA=="}],"memo":""},"metadata":{"timestamp":"1743587748"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1dzzx5qwcmawqnhhd76ehkteas5v2dg42hqnd7g","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3K2do5SHBF/u+bU7RO0ezAWORlbBXqz7z7BIO97a5fyrc6H6F4G0TaLGW76PpLlC0LuiR1A3Democ+5zjm6lAA=="}],"memo":""},"metadata":{"timestamp":"1743587759"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743587914"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743587924"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743587939"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743587980"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743588120"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743588221"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743591981"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743591991"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"k3NdhAvtHHXQVwo4xqtUV2Wf/LPbAfJVUkz7DlsuixJm+UiW2XGg7bqVbDeN8iJHrZmqMizEmAERt0jz9Dt/Bg=="}],"memo":""},"metadata":{"timestamp":"1743597359"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2231690ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"SncBkDW/CDY43AvtWCXlvuzUwcLtxINLa1MkGOeuKZhnqT0oqzt6ySslxlsaUlVFrptndkUYjmOioQzL8w+GCA=="}],"memo":""},"metadata":{"timestamp":"1743597379"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"887428","gas_fee":"165039ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"uIrRR7fJCY8dnrBO8A9XpoXsWDne+2L/TUDpAnUZtO5IgJNaU3oZkqLMXsFXAbgrwz5MnjtmpOn4AmNf5HojBg=="}],"memo":""},"metadata":{"timestamp":"1743597384"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["42"]}],"fee":{"gas_wanted":"3059175","gas_fee":"6374ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"EVgaJD/bBirIuxmvT71eNu75Nr/B3/VSTfL/pKCw8ux57owH7QmEhJRYHSIPOpbpHV6Rsy/5LruQswbYYJyGBg=="}],"memo":""},"metadata":{"timestamp":"1743597409"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"RhG54kLP2B1mjRm5+dWDE67w5H2W4wA887cqXT/mfIIegiICQFnETKTioZPpXU375y6NPfxsJ0sbjLzIFV4wAw=="}],"memo":""},"metadata":{"timestamp":"1743606306"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"bD5+VR6A4q87Mpz+SX1fnhUnySq57KIZQeZ/OKM4jgY4KcTyajHtaek37W6PzP2bW3WOTTGjy1oWYyGcJCdyDQ=="}],"memo":""},"metadata":{"timestamp":"1743606668"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"35TjLg82N3/oUHSlGp6J+OAQs+4KtT4Ea4PeCKSlVgQ2YBe7jQKmPTknNtM6ZJd19QJG2IkNwferWrZWiOmNCw=="}],"memo":""},"metadata":{"timestamp":"1743607723"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"CW2IHVm66hsIOg/IGO0RpOmBedl9kD2l4Onpl+yEeYcnFzAygg/lG/5aO/L2Du4MX4uVZ/G1KnPQWpklr9uIBg=="}],"memo":""},"metadata":{"timestamp":"1743608020"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"BDBTc0acXpFrvoiTK0cVRqEaAz9n3dR8lz8o6Wve1Bmu9YJ9y+3xfZCV/hru2vszYA+6k2Q7Ix4E+PMlOMBhCg=="}],"memo":""},"metadata":{"timestamp":"1743608226"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\n","admin"]}],"fee":{"gas_wanted":"8066534","gas_fee":"16806ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"pB4ok9z2I+0NVPOhH9GhrHW+iZEixOAVZReuz9Qo/F60s9BHbTS7R/ljuIhIirVjm+sJF2qhApa94vMGoDIYCg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743608291"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"8967781","gas_fee":"18683ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"6Rj8b2dVSbJrCMY+YbX3hJp750MzerPbDcafdtyFvy7KV0bNRxwve1kD2KhbRaoSTgSKVV8Xs84N4IDevVeWBA=="}],"memo":""},"metadata":{"timestamp":"1743608301"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15dz69sch7fkhc9gk57hpe4qea77thmy20apu9x","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"VOB7lochh6szp7fzpzTlve6EpprFWCee+T8Rv304uBhG3j7Z/rMSIFJnnC2PDHM2jw0ZTSqNjxo3oi43j/C+Cg=="}],"memo":""},"metadata":{"timestamp":"1743610126"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"DeleteTodo","args":["0"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"35+iZ2GB+Y1rkeTxPCCIDr3Vv2nfLg1gcswyZPYlrYpoq3b3b8gOM18BxY8POnJVrD4sO7SZV70ul5vXDczsCQ=="}],"memo":""},"metadata":{"timestamp":"1743611628"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g14gvmle0a5hln0ct7wv857gucr7lmeust35736r","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"8o7uLt1N6UdcF18N4RsKHxeRTNJML8jkZEnCphttJ0i07RWs51buzu0JChdW37PDRHKRbBMMig3GYmyY83YpCQ=="}],"memo":""},"metadata":{"timestamp":"1743662226"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"D3gA083Wird7NyA5rVob1L6Gy3QUuvbjG1zaQb2L79OvgMKhXdGC1cH2fACIkj97R72VztbY9GuOCDRARxv3AQ=="}],"memo":""},"metadata":{"timestamp":"1743663236"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","send":"","pkg_path":"gno.land/r/demo/foo721","func":"BalanceOf","args":["g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"un0B0pU1N1y+fRVnDyvGcyRr/eMaD/o5hYlzU9l8yevkcrW6Ea8yyn9fWqVijrZYxtHMKdXN04UvcFn5Y6MfAw=="}],"memo":""},"metadata":{"timestamp":"1743663533"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","send":"","pkg_path":"gno.land/r/demo/foo721","func":"BalanceOf","args":["g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj"]}],"fee":{"gas_wanted":"10000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"dmtkLTHHHTogXTL/yEMCQ/Y1GwocZoP8/ywMfIxBuApU7XqBCLkBu4XDjK5IjoMNEDjOPimT6Roa9hV0J4KMCA=="}],"memo":""},"metadata":{"timestamp":"1743663709"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"A+lgaw1vC1kZXPXBZhZ3m2rU9L5RZFRp/WavKjgy1whmZVzVxNCDmRpblFLy2UNCb/rPVdfEdlJ7loNKIyrtCw=="}],"memo":""},"metadata":{"timestamp":"1743666971"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["42"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2233340ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"HauKKdAUVL40GDmLeJaPvPfgc3lVACObGnAweQkUS5TpD7UbPYrXw/lVOQPkMrdALYjNZXfKT0sFQIOieuePBA=="}],"memo":""},"metadata":{"timestamp":"1743666986"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["keyboard_worrier"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"+3mIPIe18QEQGSUrtvOzXd5+uNyD39Ap4ZfFWH4LTz3BZ1BjntNitygNpe/MrD7R0Qru4oCpJESEvYOoIRpaBQ=="}],"memo":""},"metadata":{"timestamp":"1743672162"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743674585"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743675500"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676274"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676415"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676425"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676440"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676450"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676465"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","send":"","pkg_path":"gno.land/r/demo/userbook","func":"SignUp","args":null}],"fee":{"gas_wanted":"3000000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Nsrr9ntlSB2d5G6NUS+t/9/x5y1aemtYDYdBmuIYreBcVsjQ4tOaULgFBDwj4eQTLA3D9bt0K2UTnXIW3mA3BA=="}],"memo":""},"metadata":{"timestamp":"1743676600"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"RemoveMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\n"]}],"fee":{"gas_wanted":"7891622","gas_fee":"16441ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"N8XRKji1icpDGOk+CeTfLnSMOIK3L1Jm5yF4d+VdLN1/eXJ7o7xbqEx820eHAlVR+AbPSV5yPCu9t2uxyEJ2Cw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743677621"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","admin"]}],"fee":{"gas_wanted":"8066714","gas_fee":"16806ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3vxQTzFmJpLVPAE/KzFfXSFBd63mlmZe06/a/Dcq8jgZv7lA9IuprE96wr20XjnAjeebgmAPGdIqa8BeGbNoAw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743677721"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"887404","gas_fee":"1849ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"oMS3JBmGucIA3MquuQDsFxpTaTgTrwUrXL1hQLiVrzRi+ahBpd0c9J9Uq2U+st5G/1+ZpTsF3rMxNE2PWsVXAA=="}],"memo":""},"metadata":{"timestamp":"1743677742"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["hello !"]}],"fee":{"gas_wanted":"887311","gas_fee":"1849ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"+my44dCnUer8cIVbHjkPaN4Fj7g3UKZEQeHmgpigl29K3H/qY5UUmV/iWs5Z0ePVysQ6u8wEYOL5zkxqrfjzCA=="}],"memo":""},"metadata":{"timestamp":"1743677757"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"LxKecWSuzORnFdZNE6NEB4ev7skwerS3aKFMjAY7+lfrgavZngIOttAmSzXKNqjI6e6PKT0Xg2AlISxfbA+IAg=="}],"memo":""},"metadata":{"timestamp":"1743680159"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"ChangeMemberRole","args":["0","g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"jZnWeopjWqv3BMn/ACWO/tD9oc/BAiLolGd06UgFswmtLEufcNudmkCIz7FlloGpkSDaTQhApfEt6VVsIh9bAg=="}],"memo":""},"metadata":{"timestamp":"1743680391"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/leon/hof","func":"Upvote","args":["gno.land%2Fr%2Fursulovic%2Fhome"]}],"fee":{"gas_wanted":"12000000","gas_fee":"1721880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Fb8QgDrjGxFwf2ga2FrmZ63CHor0upQqWYDHcx2MZoiYoYCshNXNITEwZl7tXK6vzFhhNlUSrI0Tx4xqHYUiDA=="}],"memo":""},"metadata":{"timestamp":"1743682979"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1d2hvkqhqckhzpaum09c002fesdw89qrcg9zqws","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ld8kqSH00V2d0yxuGtA7G9pdtdxeEENrLxEDCTVQPwEJS4v5myzmTo1tdm9oyYA+CpJ7Std/c6yUOVU2Ir5ZCw=="}],"memo":""},"metadata":{"timestamp":"1743683221"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1lrsrj4auaffjk538w3x2c9gzyth2m0n39zcg6d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"5MkCzkgXmPNv9f9ekdSjXDwd6Un+UJ6Ii6K0jpSxnanpBnXafmVQr/eKDtcqtlSLLXpLfikXhjBuZoyaNNi4CQ=="}],"memo":""},"metadata":{"timestamp":"1743704885"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["2","1","1","Hey hey hey"]}],"fee":{"gas_wanted":"60000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"CimPnVhuqAEqqSApH5rVTxXEorJwdjWA5876tCSCaKKSexjojIicDD4hpQUi3Xql5a6jnrAfBb17flUc3UAiBA=="}],"memo":""},"metadata":{"timestamp":"1743711043"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["aeddi"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"2q9MkSk7mZGKAOPZKlApbpwGReLud/us7X6MHoKSgOtrLFy4v5Im5tMCuAg4NEx1KSY8ci93sCrAQz16TnWfDg=="}],"memo":""},"metadata":{"timestamp":"1743711163"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g16znvp6wxupkkds8mmmtxhvmdly08xpa4rqagp3","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"DKbiJAf8yy6x2aN46wAIcPmaFZhHgqdGX/Aa8MM3bx+tVoKQVKC1io8iS49wZtWruEk218jqNk1FgbFnPSObBA=="}],"memo":""},"metadata":{"timestamp":"1743712058"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["3","This is a test","Hello World"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"gz8xLsHOlm3KgTbMLZHULlEXYNQvHHyyurwp3BMvzUhwAnA5+eUZLguT5KoB070p/NkewrIAMy4dTfX/Z6U6AQ=="}],"memo":""},"metadata":{"timestamp":"1743712737"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"1648310ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"eP3yIVSRgR6yQJOv5h2TUvb0YjsP0kTJIoy7eMM8D9qNGKzYdWBaXP/Q16E4htrelZWvxyMc/kaBi+rQA5OkAA=="}],"memo":""},"metadata":{"timestamp":"1743715914"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"o3o7DbJf6G+LcRH+iRKT89iQ6nyTEqk+iUEVL/A8s7jj1CG9MMucPjO6jNdPzxSEZM7fXFxCRHbgZSNsfae3AQ=="}],"memo":""},"metadata":{"timestamp":"1743738197"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["1","1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"mqZgvx2CCHv3dUNNSD+n88jFQYItW7klK/4Mwx+87JroMy50R6TRsXBsF7gVjtT7vsZg36bEd5Wzbhis5KdqBA=="}],"memo":""},"metadata":{"timestamp":"1743738288"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"DeletePost","args":["1","2","2"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"MUvvQiy/3718kgycKVKamoodgAQ5QNr/ANiAnT2RrbrDOnIIRyyxmXtgRzasiu8yyNtQxU6wTK5gOwcmpWSHDA=="}],"memo":""},"metadata":{"timestamp":"1743738333"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/leon/hof","func":"Upvote","args":["gno.land%2Fr%2Fursulovic%2Fhome"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"uSYEDBtBGRTDnHgogSGegpLkqL/2A1taUcjaC5qgHO/bdA/V4tXfDGUxaxDk6l5ITqpgrY0U2bbC9vbpZ9DfDA=="}],"memo":""},"metadata":{"timestamp":"1743738469"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["1","2"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lK0oWzYVhP1fdOI7rZlaTzRKO3tm0+oiR991gjivYT0WE+Su1NABU10EbfoRrMLiEyfJUdBPu7FZk+ntk6XSDw=="}],"memo":""},"metadata":{"timestamp":"1743738680"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1nnl20472w0effzcexuqmk4ntn20wg95ytygy55","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"iipZSkqtkr17A3C5DhLb5PMWpu6AFWlh+xgyr6FR2gN6JVeNGsZ7nQwVGC8PEihR4HaNaI5+kIhD2NPJ7OOfBA=="}],"memo":""},"metadata":{"timestamp":"1743739027"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1nnl20472w0effzcexuqmk4ntn20wg95ytygy55","to_address":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","amount":"9000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"uTCxprNYW1bynLRFSlbY3R2C9d1htOt7ATN03Deazmxtl+OCy2NlQyfu3P9j1N96i9ypWW30MRJOn6p0C/VEBA=="}],"memo":""},"metadata":{"timestamp":"1743739047"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1zeq4hn2hd2azde6p9x2ya9gp3ug30vuuv56pym","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"GUGACDLsNHR04L7sL2wA6yZN1Ujy1P+hm0G8jgh7vZWg8JHs8MjwxGhz50z5kYrHZmVf68R1f2zNchYoYKXaDA=="}],"memo":""},"metadata":{"timestamp":"1743739590"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1zeq4hn2hd2azde6p9x2ya9gp3ug30vuuv56pym","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["2","2"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"XpjuXG0sxPRREVNem1ST5D9UAU6wvnSehwVkYkiE7o4gtK0xQa2LDSx1YS4IEziMIa7aqWmt5YLu7Y/1wGJ1Dg=="}],"memo":""},"metadata":{"timestamp":"1743739625"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1p5pa2sp4elcja2u8wn36zv3plsyp8xrqgz0usf","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"4qzupQ35Elm3J9Kw8ywsZVVqtoQema07OW6XzT9ORes408fOdkh5Vdaji4fHcUh2JLLjO8a6JZZjNPLQY4QDCg=="}],"memo":""},"metadata":{"timestamp":"1743750714"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"5KQEAVjunxy5S1a8XctQM33/kGpmoZvynCfD9YT2Hkz/L32yb9birF6Bt7y+EpdQ4GUtFcCzYSZObRIB5J5eCw=="}],"memo":""},"metadata":{"timestamp":"1743750895"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":["aeddi-testing"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"NJVQ1B8M3CNO3CSUat6+G6qhGtuKBsQjVDFDzjlyMrmtrcmoxH21yFjVh/wb8N1QPOdJUuzcL4H98s8NdNYJBA=="}],"memo":""},"metadata":{"timestamp":"1743751141"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","to_address":"g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","amount":"1000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Y+NhVxZFPeXnxFxFiQ9AjTS/gDSliN/mPDFWSj+KNM5BA96fsPi8x2H/hPTOmC16JZm5NkT1WhUb3E7C4/OQAQ=="}],"memo":""},"metadata":{"timestamp":"1743755182"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1etcvlu8zyuwnd7w0x0lcu4g2r7yzllyy62gpa5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Q/Kcv4x104VQVi3UC+dkBTpMGWfT2SCYiLzVtzkm8qQ9NVe6sIr5JlzkCAGvqyf8CWBbSBBpnoNK1hP15QxIDg=="}],"memo":""},"metadata":{"timestamp":"1743760782"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1etcvlu8zyuwnd7w0x0lcu4g2r7yzllyy62gpa5","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","-1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"JBX6/1cwN1Hy2FQkUYTR7BShiuJrtjVUe7vYpWwrwJMzBPB9jIlR+26ko2OiwGzmbZCDNFg78mtPtmlCKB7PDA=="}],"memo":""},"metadata":{"timestamp":"1743760847"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"TGWslXzdNOGeWEgsuoacsYO/12F1Oc2+uUIPWCWsZTU04agRN2Q5spfDaMTWqyLOJmTXD2ZuCTaouslHvlqiDQ=="}],"memo":""},"metadata":{"timestamp":"1743761662"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","package":{"name":"boards2","path":"gno.land/r/devx000/gnoland/boards2/v1rc2","files":[{"name":"board.gno","body":"package boards2\n\nimport (\n\t\"net/url\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\ntype BoardID uint64\n\nfunc (id BoardID) String() string {\n\treturn strconv.Itoa(int(id))\n}\n\nfunc (id BoardID) Key() string {\n\treturn padZero(uint64(id), 10)\n}\n\ntype Board struct {\n\tid        BoardID // only set for public boards.\n\tname      string\n\taliases   []string\n\tcreator   std.Address\n\tthreads   avl.Tree // Post.id -\u003e *Post\n\tpostsCtr  uint64   // increments Post.id\n\tcreatedAt time.Time\n\tdeleted   avl.Tree // TODO reserved for fast-delete.\n\tperms     Permissions\n\treadonly  bool\n}\n\nfunc newBoard(id BoardID, name string, creator std.Address, p Permissions) *Board {\n\treturn \u0026Board{\n\t\tid:        id,\n\t\tname:      name,\n\t\tcreator:   creator,\n\t\tthreads:   avl.Tree{},\n\t\tcreatedAt: time.Now(),\n\t\tdeleted:   avl.Tree{},\n\t\tperms:     p,\n\t}\n}\n\nfunc (board *Board) GetID() BoardID {\n\treturn board.id\n}\n\n// GetName returns the name of the board.\nfunc (board *Board) GetName() string {\n\treturn board.name\n}\n\n// GetURL returns the relative URL of the board.\nfunc (board *Board) GetURL() string {\n\treturn strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\") + \":\" + url.PathEscape(board.name)\n}\n\n// GetURL returns relative board path relative.\n//\n// Note: returned result is not escaped. Use GetURL to get URL-encoded path.\nfunc (board *Board) GetPath() string {\n\treturn strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\") + \":\" + board.name\n}\n\nfunc (board *Board) GetPermissions() Permissions {\n\treturn board.perms\n}\n\n// SetReadonly updates board's read-only status.\nfunc (board *Board) SetReadonly(readonly bool) {\n\tboard.readonly = readonly\n}\n\n// IsReadonly checks if the board is a read-only board.\nfunc (board *Board) IsReadonly() bool {\n\treturn board.readonly\n}\n\nfunc (board *Board) GetThread(threadID PostID) (_ *Post, found bool) {\n\tv, found := board.threads.Get(threadID.Key())\n\tif !found {\n\t\treturn nil, false\n\t}\n\treturn v.(*Post), true\n}\n\nfunc (board *Board) AddThread(creator std.Address, title string, body string) *Post {\n\tpid := board.incGetPostID()\n\tthread := newPost(board, pid, creator, title, body, pid, 0, 0)\n\tboard.threads.Set(pid.Key(), thread)\n\treturn thread\n}\n\n// NOTE: this can be potentially very expensive for threads with many replies.\n// TODO: implement optional fast-delete where thread is simply moved.\nfunc (board *Board) DeleteThread(pid PostID) {\n\t_, removed := board.threads.Remove(pid.Key())\n\tif !removed {\n\t\tpanic(\"thread does not exist with ID \" + pid.String())\n\t}\n}\n\n// Render renders a board into Markdown.\nfunc (board *Board) Render(path, menu string) string {\n\tvar sb strings.Builder\n\n\tsb.WriteString(\"# \" + board.GetName() + \"  \\n\")\n\tsb.WriteString(\"Board created by \" + newUserLink(board.creator) + \" \")\n\tsb.WriteString(\"on \" + board.createdAt.Format(dateFormat))\n\tsb.WriteString(\", #\" + board.id.String())\n\n\tif board.IsReadonly() {\n\t\tsb.WriteString(\"  \\n_**Starting new threads and commenting is disabled**_\")\n\t}\n\n\t// XXX: Menu is rendered by the caller to deal with links and sub-menus\n\t// TODO: We should have the render logic separated from boards so avoid sending menu as argument\n\tif menu != \"\" {\n\t\tsb.WriteString(\"\\n\\n\")\n\t\tsb.WriteString(menu)\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\tsb.WriteString(\"\\n\\n---\\n\")\n\n\tif board.threads.Size() == 0 {\n\t\tsb.WriteString(\"### This board doesn't have any threads\\n\")\n\t\tif !board.IsReadonly() {\n\t\t\turl := board.GetPostFormURL()\n\t\t\tsb.WriteString(\"Do you want to [start a new conversation](\" + url + \") in this board ?\")\n\t\t}\n\t\treturn sb.String()\n\t}\n\n\tp, err := pager.New(path, board.threads.Size(), pager.WithPageSize(pageSizeThreads))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\trender := func(_ string, v any) bool {\n\t\tthread := v.(*Post)\n\t\tif thread.isHidden {\n\t\t\treturn false\n\t\t}\n\n\t\tsb.WriteString(thread.RenderSummary())\n\t\tsb.WriteString(\"\\n\")\n\t\treturn false\n\t}\n\n\tsb.WriteString(\"Sort by: \")\n\tr := realmpath.Parse(path)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tsb.WriteString(newLink(\"newest first\", r.String()))\n\t\tsb.WriteString(\"\\n\\n\")\n\t\tboard.threads.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tsb.WriteString(newLink(\"oldest first\", r.String()))\n\t\tsb.WriteString(\"\\n\\n\")\n\t\tboard.threads.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tsb.WriteString(\"\\n---\\n\")\n\t\tsb.WriteString(pager.Picker(p))\n\t}\n\n\treturn sb.String()\n}\n\nfunc (board *Board) incGetPostID() PostID {\n\tboard.postsCtr++\n\treturn PostID(board.postsCtr)\n}\n\nfunc (board *Board) GetURLFromThreadID(threadID PostID) string {\n\treturn board.GetURL() + \"/\" + threadID.String()\n}\n\nfunc (board *Board) GetURLFromReplyID(threadID, replyID PostID) string {\n\treturn board.GetURL() + \"/\" + threadID.String() + \"/\" + replyID.String()\n}\n\nfunc (board *Board) GetRenameFormURL() string { // TODO: These type of functions shouldn't be part of Board type\n\treturn txlink.Call(\n\t\t\"RenameBoard\",\n\t\t\"name\", board.name,\n\t\t\"newName\", \"\",\n\t)\n}\n\nfunc (board *Board) GetFreezeFormURL() string {\n\treturn txlink.Call(\n\t\t\"FreezeBoard\",\n\t\t\"boardID\", board.id.String(),\n\t)\n}\n\nfunc (board *Board) GetUnfreezeFormURL() string {\n\treturn txlink.Call(\n\t\t\"UnfreezeBoard\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"threadID\", \"\",\n\t\t\"replyID\", \"\",\n\t)\n}\n\nfunc (board *Board) GetFlaggingThresholdFormURL() string {\n\treturn txlink.Call(\n\t\t\"SetFlaggingThreshold\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"threshold\", \"\",\n\t)\n}\n\nfunc (board *Board) GetInviteMemberFormURL() string {\n\treturn txlink.Call(\n\t\t\"InviteMember\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"user\", \"\",\n\t\t\"role\", \"\",\n\t)\n}\n\nfunc (board *Board) GetPostFormURL() string {\n\treturn txlink.Call(\n\t\t\"CreateThread\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"title\", \"\",\n\t\t\"body\", \"\",\n\t)\n}\n\nfunc (board *Board) GetMembersURL() string {\n\treturn board.GetURL() + \"/members\"\n}\n\nfunc createDefaultBoardPermissions(owner std.Address) *DefaultPermissions {\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.SetSuperRole(RoleOwner)\n\tperms.AddRole(\n\t\tRoleAdmin,\n\t\tPermissionBoardRename,\n\t\tPermissionBoardFlaggingUpdate,\n\t\tPermissionMemberInvite,\n\t\tPermissionMemberRemove,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadEdit,\n\t\tPermissionThreadDelete,\n\t\tPermissionThreadRepost,\n\t\tPermissionThreadFlag,\n\t\tPermissionThreadFreeze,\n\t\tPermissionReplyCreate,\n\t\tPermissionReplyDelete,\n\t\tPermissionReplyFlag,\n\t\tPermissionReplyFreeze,\n\t\tPermissionRoleChange,\n\t)\n\tperms.AddRole(\n\t\tRoleModerator,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadEdit,\n\t\tPermissionThreadRepost,\n\t\tPermissionThreadFlag,\n\t\tPermissionReplyCreate,\n\t\tPermissionReplyFlag,\n\t)\n\tperms.AddRole(\n\t\tRoleGuest,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadRepost,\n\t\tPermissionReplyCreate,\n\t)\n\tperms.AddUser(owner, RoleOwner)\n\treturn perms\n}\n"},{"name":"board_readonly.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"time\"\n)\n\n// ReadonlyBoard defines an interface for readonly boards.\ntype ReadonlyBoard interface {\n\t// ID returns the unique identifier of the board.\n\tID() BoardID\n\n\t// Name returns the name of the board.\n\tName() string\n\n\t// Aliases returns a list with previous names assigned to the board.\n\tAliases() []string\n\n\t// Creator returns board's creator address.\n\tCreator() std.Address\n\n\t// LastPostID returns the ID assigned to the last created thread.\n\tLastPostID() uint64\n\n\t// CreatedAt returns the time when board was created.\n\tCreatedAt() time.Time\n\n\t// IsReadonly returns true when board shouldn't allow the creation of threads and comments.\n\tIsReadonly() bool\n\n\t// MembersCount returns the number of invited board members.\n\tMembersCount() int\n\n\t// IterateMembers allows reading the list of invited board members.\n\tIterateMembers(offset, count int, fn UsersIterFn)\n}\n\ntype readonlyBoard struct {\n\tboard *Board\n}\n\nfunc (b readonlyBoard) ID() BoardID {\n\treturn b.board.id\n}\n\nfunc (b readonlyBoard) Name() string {\n\treturn b.board.name\n}\n\nfunc (b readonlyBoard) Aliases() []string {\n\taliases := make([]string, len(b.board.aliases))\n\tfor i, s := range b.board.aliases {\n\t\taliases[i] = s\n\t}\n\treturn aliases\n}\n\nfunc (b readonlyBoard) Creator() std.Address {\n\treturn b.board.creator\n}\n\nfunc (b readonlyBoard) LastPostID() uint64 {\n\treturn b.board.postsCtr\n}\n\nfunc (b readonlyBoard) CreatedAt() time.Time {\n\treturn b.board.createdAt\n}\n\nfunc (b readonlyBoard) IsReadonly() bool {\n\treturn b.board.readonly\n}\n\nfunc (b readonlyBoard) MembersCount() int {\n\treturn b.board.perms.UsersCount()\n}\n\nfunc (b readonlyBoard) IterateMembers(offset, count int, fn UsersIterFn) {\n\tb.board.perms.IterateUsers(offset, count, fn)\n}\n"},{"name":"board_test.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nfunc TestBoardID_String(t *testing.T) {\n\tinput := BoardID(32)\n\n\tuassert.Equal(t, \"32\", input.String())\n}\n\nfunc TestBoardID_Key(t *testing.T) {\n\tinput := BoardID(128)\n\twant := strings.Repeat(\"0\", 7) + \"128\"\n\tuassert.Equal(t, want, input.Key())\n}\n\nfunc TestBoard_GetID(t *testing.T) {\n\twant := int(92)\n\tb := new(Board)\n\tb.id = BoardID(want)\n\tgot := int(b.GetID())\n\n\tuassert.Equal(t, got, want)\n\tuassert.NotEqual(t, got, want*want)\n}\n\nfunc TestBoard_GetURL(t *testing.T) {\n\tpkgPath := strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\tname := \"foobar_test_get_url123\"\n\twant := pkgPath + \":\" + name\n\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tboard := newBoard(1, name, addr, perms)\n\tgot := board.GetURL()\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetThread(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(1, \"test123\", addr, perms)\n\n\t_, ok := b.GetThread(12345)\n\tuassert.False(t, ok)\n\n\tpost := b.AddThread(addr, \"foo\", \"bar\")\n\t_, ok = b.GetThread(post.GetPostID())\n\tuassert.True(t, ok)\n}\n\nfunc TestBoard_DeleteThread(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(1, \"test123\", addr, perms)\n\n\tpost := b.AddThread(addr, \"foo\", \"bar\")\n\tid := post.GetPostID()\n\n\tb.DeleteThread(id)\n\n\t_, ok := b.GetThread(id)\n\tuassert.False(t, ok)\n}\n\nvar boardUrlPrefix = strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\nfunc TestBoard_GetURLFromThreadID(t *testing.T) {\n\tboardName := \"test12345\"\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(BoardID(11), boardName, addr, perms)\n\twant := boardUrlPrefix + \":\" + boardName + \"/10\"\n\n\tgot := b.GetURLFromThreadID(10)\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetURLFromReplyID(t *testing.T) {\n\tboardName := \"test12345\"\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(BoardID(11), boardName, addr, perms)\n\twant := boardUrlPrefix + \":\" + boardName + \"/10/20\"\n\n\tgot := b.GetURLFromReplyID(10, 20)\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetPostFormURL(t *testing.T) {\n\tbid := BoardID(386)\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(bid, \"foo1234\", addr, perms)\n\texpect := txlink.Call(\"CreateThread\", \"boardID\", bid.String(), \"title\", \"\", \"body\", \"\")\n\n\tgot := b.GetPostFormURL()\n\tuassert.Equal(t, expect, got)\n}\n"},{"name":"boards.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tgPerms        Permissions\n\tgNotice       string\n\tgHelp         string\n\tgLastBoardID  BoardID\n\tgBoardsByID   avl.Tree // string(id) -\u003e *Board\n\tgBoardsByName avl.Tree // string(name) -\u003e *Board\n\tgLocked       struct {\n\t\trealm        bool\n\t\trealmMembers bool\n\t}\n)\n\nfunc init() {\n\t// TODO: Define and change the default realm owner (or owners)\n\towner := std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\n\t// Initialize default realm permissions\n\tgPerms = createDefaultPermissions(owner)\n\n\t// Import relevant initial state from previous version\n\tinitFromPrevVersion()\n}\n\n// incGetBoardID returns a new board ID.\nfunc incGetBoardID() BoardID {\n\tgLastBoardID++\n\treturn gLastBoardID\n}\n\n// getBoard returns a board for a specific ID.\nfunc getBoard(id BoardID) (_ *Board, found bool) {\n\tv, exists := gBoardsByID.Get(id.Key())\n\tif !exists {\n\t\treturn nil, false\n\t}\n\treturn v.(*Board), true\n}\n\n// mustGetBoardByName returns a board or panics when it's not found.\nfunc mustGetBoardByName(name string) *Board {\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tpanic(\"board does not exist with name: \" + name)\n\t}\n\treturn v.(*Board)\n}\n\n// mustGetBoard returns a board or panics when it's not found.\nfunc mustGetBoard(id BoardID) *Board {\n\tboard, found := getBoard(id)\n\tif !found {\n\t\tpanic(\"board does not exist with ID: \" + id.String())\n\t}\n\treturn board\n}\n\n// mustGetThread returns a thread or panics when it's not found.\nfunc mustGetThread(board *Board, threadID PostID) *Post {\n\tthread, found := board.GetThread(threadID)\n\tif !found {\n\t\tpanic(\"thread does not exist with ID: \" + threadID.String())\n\t}\n\treturn thread\n}\n\n// mustGetReply returns a reply or panics when it's not found.\nfunc mustGetReply(thread *Post, replyID PostID) *Post {\n\treply, found := thread.GetReply(replyID)\n\tif !found {\n\t\tpanic(\"reply does not exist with ID: \" + replyID.String())\n\t}\n\treturn reply\n}\n\nfunc mustGetPermissions(bid BoardID) Permissions {\n\tif bid != 0 {\n\t\tboard := mustGetBoard(bid)\n\t\treturn board.perms\n\t}\n\treturn gPerms\n}\n"},{"name":"flag.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n// DefaultFlaggingThreshold defines the default number of flags that hides flaggable items.\nconst DefaultFlaggingThreshold = 1\n\nvar gFlaggingThresholds avl.Tree // string(board ID) -\u003e int\n\ntype Flag struct {\n\tUser   std.Address\n\tReason string\n}\n\ntype Flaggable interface {\n\t// AddFlag adds a new flag to an item.\n\t//\n\t// Returns false if item was already flagged by user.\n\tAddFlag(flag Flag) bool\n\n\t// FlagsCount returns number of times item was flagged.\n\tFlagsCount() int\n}\n\n// flagItem adds a flag to a flaggable item (post, thread, etc).\n//\n// Returns whether flag count threshold is reached and item can be hidden.\n//\n// Panics if flag count threshold was already reached.\nfunc flagItem(item Flaggable, flag Flag, threshold int) bool {\n\tif item.FlagsCount() \u003e= threshold {\n\t\tpanic(\"item flag count threshold exceeded: \" + strconv.Itoa(threshold))\n\t}\n\n\tif !item.AddFlag(flag) {\n\t\tpanic(\"item has been already flagged by a current user\")\n\t}\n\n\treturn item.FlagsCount() == threshold\n}\n\nfunc getFlaggingThreshold(bid BoardID) int {\n\tif v, ok := gFlaggingThresholds.Get(bid.String()); ok {\n\t\treturn v.(int)\n\t}\n\treturn DefaultFlaggingThreshold\n}\n"},{"name":"format.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/r/sys/users\"\n)\n\nfunc padLeft(s string, length int) string {\n\tif len(s) \u003e= length {\n\t\treturn s\n\t}\n\treturn strings.Repeat(\" \", length-len(s)) + s\n}\n\nfunc padZero(u64 uint64, length int) string {\n\ts := strconv.Itoa(int(u64))\n\tif len(s) \u003e= length {\n\t\treturn s\n\t}\n\treturn strings.Repeat(\"0\", length-len(s)) + s\n}\n\nfunc indentBody(indent string, body string) string {\n\tvar (\n\t\tres   string\n\t\tlines = strings.Split(body, \"\\n\")\n\t)\n\tfor i, line := range lines {\n\t\tif i \u003e 0 {\n\t\t\tres += \"\\n\"\n\t\t}\n\t\tres += indent + line\n\t}\n\treturn res\n}\n\n// NOTE: length must be greater than 3.\nfunc summaryOf(text string, length int) string {\n\tlines := strings.SplitN(text, \"\\n\", 2)\n\tline := lines[0]\n\tif len(line) \u003e length {\n\t\tline = line[:(length-3)] + \"...\"\n\t} else if len(lines) \u003e 1 {\n\t\t// len(line) \u003c= 80\n\t\tline = line + \"...\"\n\t}\n\treturn line\n}\n\n// newLink returns a Markdown link.\nfunc newLink(label, uri string) string {\n\treturn \"[\" + label + \"](\" + uri + \")\"\n}\n\n// newButtonLink returns a Makdown link with label wrapped in brackets.\nfunc newButtonLink(label, uri string) string {\n\treturn `[\\[` + label + `\\]](` + uri + \")\"\n}\n\n// newUserLink returns a Markdown link for an account to the users\n// realm or the address as string when a user is not registered.\nfunc newUserLink(addr std.Address) string {\n\tuser := users.ResolveAddress(addr)\n\tif user != nil {\n\t\treturn user.RenderLink(\"\")\n\t}\n\treturn addr.String()\n}\n"},{"name":"migrations.gno","body":"package boards2\n\nimport (\n\tv1rc1 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nfunc initFromPrevVersion() {\n\timportRealmMembers()\n}\n\nfunc importRealmMembers() {\n\tv1rc1.IterateRealmMembers(0, func(member v1rc1.User) bool {\n\t\t// XXX: This wouldn't be required if a boards2 package is created\n\t\troles := make([]Role, len(member.Roles))\n\t\tfor i, r := range member.Roles {\n\t\t\troles[i] = Role(r)\n\t\t}\n\n\t\tgPerms.AddUser(member.Address, roles...)\n\t\treturn false\n\t})\n}\n"},{"name":"permissions.gno","body":"package boards2\n\nimport \"std\"\n\nconst (\n\tPermissionRealmHelp           Permission = \"realm:help\"\n\tPermissionRealmLock                      = \"realm:lock\"\n\tPermissionRealmNotice                    = \"realm:notice\"\n\tPermissionBoardCreate                    = \"board:create\"\n\tPermissionBoardFlaggingUpdate            = \"board:flagging-update\"\n\tPermissionBoardFreeze                    = \"board:freeze\"\n\tPermissionBoardRename                    = \"board:rename\"\n\tPermissionThreadCreate                   = \"thread:create\"\n\tPermissionThreadDelete                   = \"thread:delete\"\n\tPermissionThreadEdit                     = \"thread:edit\"\n\tPermissionThreadFlag                     = \"thread:flag\"\n\tPermissionThreadFreeze                   = \"thread:freeze\"\n\tPermissionThreadRepost                   = \"thread:repost\"\n\tPermissionReplyCreate                    = \"reply:create\"\n\tPermissionReplyDelete                    = \"reply:delete\"\n\tPermissionReplyFlag                      = \"reply:flag\"\n\tPermissionReplyFreeze                    = \"reply:freeze\"\n\tPermissionMemberInvite                   = \"member:invite\"\n\tPermissionMemberRemove                   = \"member:remove\"\n\tPermissionRoleChange                     = \"role:change\"\n\tPermissionPermissionsUpdate              = \"permissions:update\"\n)\n\nconst (\n\tRoleGuest     Role = \"\"\n\tRoleOwner          = \"owner\"\n\tRoleAdmin          = \"admin\"\n\tRoleModerator      = \"moderator\"\n)\n\ntype (\n\t// Permission defines the type for permissions.\n\tPermission string\n\n\t// Role defines the type for user roles.\n\tRole string\n\n\t// Args is a list of generic arguments.\n\tArgs []interface{}\n\n\t// User contains user info.\n\tUser struct {\n\t\tAddress std.Address\n\t\tRoles   []Role\n\t}\n\n\t// UsersIterFn defines a function type to iterate users.\n\tUsersIterFn func(User) bool\n\n\t// Permissions define an interface to for permissioned execution.\n\tPermissions interface {\n\t\t// HasRole checks if a user has a specific role assigned.\n\t\tHasRole(std.Address, Role) bool\n\n\t\t// HasPermission checks if a user has a specific permission.\n\t\tHasPermission(std.Address, Permission) bool\n\n\t\t// WithPermission calls a callback when a user has a specific permission.\n\t\t// It panics on error.\n\t\tWithPermission(std.Address, Permission, Args, func(Args))\n\n\t\t// AddUser adds a new user to the permissioner.\n\t\tAddUser(std.Address, ...Role) error\n\n\t\t// SetUserRoles sets the roles of a user.\n\t\tSetUserRoles(std.Address, ...Role) error\n\n\t\t// RemoveUser removes a user from the permissioner.\n\t\tRemoveUser(std.Address) (removed bool)\n\n\t\t// HasUser checks if a user exists.\n\t\tHasUser(std.Address) bool\n\n\t\t// UsersCount returns the total number of users the permissioner contains.\n\t\tUsersCount() int\n\n\t\t// IterateUsers iterates permissions' users.\n\t\tIterateUsers(start, count int, fn UsersIterFn) bool\n\t}\n)\n"},{"name":"permissions_default.gno","body":"package boards2\n\nimport (\n\t\"errors\"\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\t\"gno.land/r/sys/users\"\n)\n\n// DefaultPermissions manages users, roles and permissions.\ntype DefaultPermissions struct {\n\tsuperRole Role\n\tdao       *commondao.CommonDAO\n\tusers     *avl.Tree // string(std.Address) -\u003e []Role\n\troles     *avl.Tree // string(role) -\u003e []Permission\n}\n\n// NewDefaultPermissions creates a new permissions type.\n// This type is a default implementation to handle users, roles and permissions.\nfunc NewDefaultPermissions(dao *commondao.CommonDAO) *DefaultPermissions {\n\tif dao == nil {\n\t\tpanic(\"default permissions require a DAO\")\n\t}\n\n\tdp := \u0026DefaultPermissions{\n\t\tdao:   dao,\n\t\troles: avl.NewTree(),\n\t\tusers: avl.NewTree(),\n\t}\n\n\t// Make sure that DAO users are indexed when DAO has members\n\tdao.Members().IterateByOffset(0, dao.Members().Size(), func(m std.Address) bool {\n\t\tdp.users.Set(m.String(), []Role(nil))\n\t\treturn false\n\t})\n\n\treturn dp\n}\n\n// SetSuperRole assigns a super role.\n// A super role is one that have all permissions.\n// These type of role doesn't need to be mapped to any permission.\nfunc (dp *DefaultPermissions) SetSuperRole(r Role) {\n\tdp.superRole = r\n}\n\n// AddRole add a role with one or more assigned permissions.\nfunc (dp *DefaultPermissions) AddRole(r Role, p Permission, extra ...Permission) {\n\tdp.roles.Set(string(r), append([]Permission{p}, extra...))\n}\n\n// RoleExists checks if a role exists.\nfunc (dp DefaultPermissions) RoleExists(r Role) bool {\n\tif dp.superRole != \"\" \u0026\u0026 r == dp.superRole {\n\t\treturn true\n\t}\n\n\treturn dp.roles.Iterate(\"\", \"\", func(name string, _ interface{}) bool {\n\t\treturn Role(name) == r\n\t})\n}\n\n// GetUserRoles returns the list of roles assigned to a user.\nfunc (dp DefaultPermissions) GetUserRoles(user std.Address) []Role {\n\tv, found := dp.users.Get(user.String())\n\tif !found {\n\t\treturn nil\n\t}\n\treturn v.([]Role)\n}\n\n// HasRole checks if a user has a specific role assigned.\nfunc (dp DefaultPermissions) HasRole(user std.Address, r Role) bool {\n\tfor _, role := range dp.GetUserRoles(user) {\n\t\tif role == r {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// HasPermission checks if a user has a specific permission.\nfunc (dp DefaultPermissions) HasPermission(user std.Address, perm Permission) bool {\n\tfor _, r := range dp.GetUserRoles(user) {\n\t\tif dp.superRole == r {\n\t\t\treturn true\n\t\t}\n\n\t\tv, found := dp.roles.Get(string(r))\n\t\tif !found {\n\t\t\tcontinue\n\t\t}\n\n\t\tfor _, p := range v.([]Permission) {\n\t\t\tif p == perm {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// AddUser adds a new user to permissions.\nfunc (dp *DefaultPermissions) AddUser(user std.Address, roles ...Role) error {\n\tif dp.users.Has(user.String()) {\n\t\treturn errors.New(\"user already exists\")\n\t}\n\n\tdp.dao.Members().Add(user)\n\treturn dp.setUserRoles(user, roles...)\n}\n\n// SetUserRoles sets the roles of a user.\nfunc (dp *DefaultPermissions) SetUserRoles(user std.Address, roles ...Role) error {\n\tif !dp.users.Has(user.String()) {\n\t\treturn errors.New(\"user not found\")\n\t}\n\treturn dp.setUserRoles(user, roles...)\n}\n\n// RemoveUser removes a user from permissions.\nfunc (dp *DefaultPermissions) RemoveUser(user std.Address) bool {\n\t_, removed := dp.users.Remove(user.String())\n\tdp.dao.Members().Remove(user)\n\treturn removed\n}\n\n// HasUser checks if a user exists.\nfunc (dp DefaultPermissions) HasUser(user std.Address) bool {\n\treturn dp.users.Has(user.String())\n}\n\n// UsersCount returns the total number of users the permissioner contains.\nfunc (dp DefaultPermissions) UsersCount() int {\n\treturn dp.users.Size()\n}\n\n// IterateUsers iterates permissions' users.\nfunc (dp DefaultPermissions) IterateUsers(start, count int, fn UsersIterFn) bool {\n\treturn dp.users.IterateByOffset(start, count, func(k string, v interface{}) bool {\n\t\treturn fn(User{\n\t\t\tAddress: std.Address(k),\n\t\t\tRoles:   v.([]Role),\n\t\t})\n\t})\n}\n\n// WithPermission calls a callback when a user has a specific permission.\n// It panics on error or when a handler panics.\n// Callbacks are by default called when there is no handle registered for the permission.\nfunc (dp *DefaultPermissions) WithPermission(user std.Address, perm Permission, args Args, cb func(Args)) {\n\tif !dp.HasPermission(user, perm) || !dp.dao.Members().Has(user) {\n\t\tpanic(\"unauthorized\")\n\t}\n\n\tswitch perm {\n\tcase PermissionBoardCreate:\n\t\tdp.handleBoardCreate(args, cb)\n\tcase PermissionBoardRename:\n\t\tdp.handleBoardRename(args, cb)\n\tcase PermissionMemberInvite:\n\t\tdp.handleMemberInvite(args, cb)\n\tcase PermissionRoleChange:\n\t\tdp.handleRoleChange(args, cb)\n\tdefault:\n\t\tcb(args)\n\t}\n}\n\nfunc (dp *DefaultPermissions) setUserRoles(user std.Address, roles ...Role) error {\n\tfor _, r := range roles {\n\t\tif !dp.RoleExists(r) {\n\t\t\treturn errors.New(\"invalid role: \" + string(r))\n\t\t}\n\t}\n\n\tdp.users.Set(user.String(), append([]Role(nil), roles...))\n\treturn nil\n}\n\nfunc (DefaultPermissions) handleBoardCreate(args Args, cb func(Args)) {\n\tname, ok := args[0].(string)\n\tif !ok {\n\t\tpanic(\"expected board name to be a string\")\n\t}\n\n\tassertBoardNameIsNotAddress(name)\n\tassertBoardNameBelongsToCaller(name)\n\n\tcb(args)\n}\n\nfunc (DefaultPermissions) handleBoardRename(args Args, cb func(Args)) {\n\tnewName, ok := args[2].(string)\n\tif !ok {\n\t\tpanic(\"expected new board name to be a string\")\n\t}\n\n\tassertBoardNameIsNotAddress(newName)\n\tassertBoardNameBelongsToCaller(newName)\n\n\tcb(args)\n}\n\nfunc (dp DefaultPermissions) handleMemberInvite(args Args, cb func(Args)) {\n\t// Make sure that only owners invite other owners\n\trole, ok := args[1].(Role)\n\tif !ok {\n\t\tpanic(\"expected a valid new member role\")\n\t}\n\n\tif role == RoleOwner {\n\t\tif !dp.HasRole(std.PreviousRealm().Address(), RoleOwner) {\n\t\t\tpanic(\"only owners are allowed to invite other owners\")\n\t\t}\n\t}\n\n\tcb(args)\n}\n\nfunc (dp DefaultPermissions) handleRoleChange(args Args, cb func(Args)) {\n\t// Owners and Admins can change roles.\n\t// Admins should not be able to assign or remove the Owner role from members.\n\tif dp.HasRole(std.PreviousRealm().Address(), RoleAdmin) {\n\t\trole, ok := args[2].(Role)\n\t\tif !ok {\n\t\t\tpanic(\"expected a valid member role\")\n\t\t}\n\n\t\tif role == RoleOwner {\n\t\t\tpanic(\"admins are not allowed to promote members to Owner\")\n\t\t} else {\n\t\t\tmember, ok := args[1].(std.Address)\n\t\t\tif !ok {\n\t\t\t\tpanic(\"expected a valid member address\")\n\t\t\t}\n\n\t\t\tif dp.HasRole(member, RoleOwner) {\n\t\t\t\tpanic(\"admins are not allowed to remove the Owner role\")\n\t\t\t}\n\t\t}\n\t}\n\n\tcb(args)\n}\n\nfunc createDefaultPermissions(owner std.Address) *DefaultPermissions {\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.SetSuperRole(RoleOwner)\n\tperms.AddRole(RoleAdmin, PermissionBoardCreate)\n\tperms.AddUser(owner, RoleOwner)\n\treturn perms\n}\n\nfunc assertBoardNameIsNotAddress(s string) {\n\tif std.Address(s).IsValid() {\n\t\tpanic(\"addresses are not allowed as board name\")\n\t}\n}\n\nfunc assertBoardNameBelongsToCaller(name string) {\n\t// When the board name is the name of a registered user\n\t// check that caller is the owner of the name.\n\tuser, _ := users.ResolveName(name)\n\tif user != nil \u0026\u0026 user.Addr() != std.PreviousRealm().Address() {\n\t\tpanic(\"board name is a user name registered to a different user\")\n\t}\n}\n"},{"name":"permissions_default_test.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/urequire\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n)\n\nvar _ Permissions = (*DefaultPermissions)(nil)\n\nfunc TestDefaultPermissionsWithPermission(t *testing.T) {\n\tcases := []struct {\n\t\tname       string\n\t\tuser       std.Address\n\t\tpermission Permission\n\t\targs       Args\n\t\tsetup      func() *DefaultPermissions\n\t\terr        string\n\t\tcalled     bool\n\t}{\n\t\t{\n\t\t\tname:       \"ok\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\tcalled: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with arguments\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\targs:       Args{\"a\", \"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\tcalled: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"no permission\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"unauthorized\",\n\t\t},\n\t\t{\n\t\t\tname:       \"is not a DAO member\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t\terr: \"unauthorized\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar (\n\t\t\t\tcalled bool\n\t\t\t\targs   Args\n\t\t\t)\n\n\t\t\tperms := tc.setup()\n\t\t\tcallback := func(a Args) {\n\t\t\t\targs = a\n\t\t\t\tcalled = true\n\t\t\t}\n\n\t\t\ttestCaseFn := func() {\n\t\t\t\tperms.WithPermission(tc.user, tc.permission, tc.args, callback)\n\t\t\t}\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.PanicsWithMessage(t, tc.err, testCaseFn, \"panic\")\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NotPanics(t, testCaseFn, \"no panic\")\n\t\t\t}\n\n\t\t\turequire.Equal(t, tc.called, called, \"callback called\")\n\t\t\turequire.Equal(t, len(tc.args), len(args), \"args count\")\n\t\t\tfor i, a := range args {\n\t\t\t\tuassert.Equal(t, tc.args[i].(string), a.(string))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsGetUserRoles(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []string\n\t\tsetup func() *DefaultPermissions\n\t}{\n\t\t{\n\t\t\tname:  \"single role\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple roles\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\", \"foo\", \"bar\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddRole(\"bar\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\", \"foo\", \"bar\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"without roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"not a user\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple users\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"bar\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"admin\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\", \"admin\", \"bar\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\troles := perms.GetUserRoles(tc.user)\n\n\t\t\turequire.Equal(t, len(tc.roles), len(roles), \"user role count\")\n\t\t\tfor i, r := range roles {\n\t\t\t\tuassert.Equal(t, tc.roles[i], string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsHasRole(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\trole  Role\n\t\tsetup func() *DefaultPermissions\n\t\twant  bool\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"admin\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"ok with multiple roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"foo\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"user without roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"has no role\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.HasRole(tc.user, tc.role)\n\t\t\tuassert.Equal(t, got, tc.want)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsHasPermission(t *testing.T) {\n\tcases := []struct {\n\t\tname       string\n\t\tuser       std.Address\n\t\tpermission Permission\n\t\tsetup      func() *DefaultPermissions\n\t\twant       bool\n\t}{\n\t\t{\n\t\t\tname:       \"ok\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with multiple users\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with multiple roles\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"other\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddRole(\"baz\", \"other\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\", \"baz\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"no permission\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"other\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.HasPermission(tc.user, tc.permission)\n\t\t\tuassert.Equal(t, got, tc.want)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsAddUser(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []Role\n\t\tsetup func() *DefaultPermissions\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname:  \"single user\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple users\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"a\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"duplicated user\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"user already exists\",\n\t\t},\n\t\t{\n\t\t\tname:  \"duplicated user\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"foo\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"invalid role: foo\",\n\t\t},\n\t\t{\n\t\t\tname: \"already a DAO member\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(\n\t\t\t\t\tcommondao.New(commondao.WithMember(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")),\n\t\t\t\t)\n\t\t\t},\n\t\t\terr: \"user already exists\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\n\t\t\terr := perms.AddUser(tc.user, tc.roles...)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.Error(t, err, \"expected an error\")\n\t\t\t\tuassert.Equal(t, tc.err, err.Error())\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NoError(t, err)\n\t\t\t}\n\n\t\t\troles := perms.GetUserRoles(tc.user)\n\t\t\tuassert.Equal(t, len(tc.roles), len(roles))\n\t\t\tfor i, r := range roles {\n\t\t\t\turequire.Equal(t, string(tc.roles[i]), string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsSetUserRoles(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []Role\n\t\tsetup func() *DefaultPermissions\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname:  \"single role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple roles\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"b\", \"c\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddRole(\"c\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"duplicated role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"c\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddRole(\"c\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\", \"c\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"remove roles\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\", \"b\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"x\", \"a\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"invalid role: x\",\n\t\t},\n\t\t{\n\t\t\tname: \"user not found\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t\terr: \"user not found\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\n\t\t\terr := perms.SetUserRoles(tc.user, tc.roles...)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.True(t, err != nil, \"expected an error\")\n\t\t\t\tuassert.Equal(t, tc.err, err.Error())\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NoError(t, err)\n\t\t\t}\n\n\t\t\troles := perms.GetUserRoles(tc.user)\n\t\t\tuassert.Equal(t, len(tc.roles), len(roles))\n\t\t\tfor i, r := range roles {\n\t\t\t\turequire.Equal(t, string(tc.roles[i]), string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsRemoveUser(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\tsetup func() *DefaultPermissions\n\t\twant  bool\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"user not found\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.RemoveUser(tc.user)\n\t\t\tuassert.Equal(t, tc.want, got)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsIterateUsers(t *testing.T) {\n\tusers := []User{\n\t\t{\n\t\t\tAddress: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tRoles:   []Role{\"foo\"},\n\t\t},\n\t\t{\n\t\t\tAddress: \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\",\n\t\t\tRoles:   []Role{\"foo\", \"bar\"},\n\t\t},\n\t\t{\n\t\t\tAddress: \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\",\n\t\t\tRoles:   []Role{\"bar\"},\n\t\t},\n\t}\n\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.AddRole(\"foo\", \"perm1\")\n\tperms.AddRole(\"bar\", \"perm2\")\n\tfor _, u := range users {\n\t\tperms.AddUser(u.Address, u.Roles...)\n\t}\n\n\tcases := []struct {\n\t\tname               string\n\t\tstart, count, want int\n\t}{\n\t\t{\n\t\t\tname:  \"exceed users count\",\n\t\t\tcount: 50,\n\t\t\twant:  3,\n\t\t},\n\t\t{\n\t\t\tname:  \"exact users count\",\n\t\t\tcount: 3,\n\t\t\twant:  3,\n\t\t},\n\t\t{\n\t\t\tname:  \"two users\",\n\t\t\tstart: 1,\n\t\t\tcount: 2,\n\t\t\twant:  2,\n\t\t},\n\t\t{\n\t\t\tname:  \"one user\",\n\t\t\tstart: 1,\n\t\t\tcount: 1,\n\t\t\twant:  1,\n\t\t},\n\t\t{\n\t\t\tname:  \"no iteration\",\n\t\t\tstart: 50,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar i int\n\t\t\tperms.IterateUsers(0, len(users), func(u User) bool {\n\t\t\t\turequire.True(t, i \u003c len(users), \"expect iterator to respect number of users\")\n\t\t\t\tuassert.Equal(t, users[i].Address, u.Address)\n\n\t\t\t\turequire.Equal(t, len(users[i].Roles), len(u.Roles), \"expect number of roles to match\")\n\t\t\t\tfor j, r := range u.Roles {\n\t\t\t\t\tuassert.Equal(t, string(users[i].Roles[j]), string(u.Roles[j]))\n\t\t\t\t}\n\n\t\t\t\ti++\n\t\t\t})\n\n\t\t\tuassert.Equal(t, i, len(users), \"expect iterator to iterate all users\")\n\t\t})\n\t}\n}\n"},{"name":"post.gno","body":"package boards2\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nconst dateFormat = \"2006-01-02 3:04pm MST\"\n\ntype PostID uint64\n\nfunc (id PostID) String() string {\n\treturn strconv.Itoa(int(id))\n}\n\nfunc (id PostID) Key() string {\n\treturn padZero(uint64(id), 10)\n}\n\n// A Post is a \"thread\" or a \"reply\" depending on context.\n// A thread is a Post of a Board that holds other replies.\ntype Post struct {\n\tboard         *Board\n\tid            PostID\n\tcreator       std.Address\n\ttitle         string // optional\n\tbody          string\n\tisHidden      bool\n\tisReadonly    bool\n\treplies       avl.Tree // Post.id -\u003e *Post\n\trepliesAll    avl.Tree // Post.id -\u003e *Post (all replies, for top-level posts)\n\treposts       avl.Tree // Board.id -\u003e Post.id\n\tflags         []Flag\n\tthreadID      PostID  // original Post.id\n\tparentID      PostID  // parent Post.id (if reply or repost)\n\trepostBoardID BoardID // original Board.id (if repost)\n\trepostsCount  uint64\n\tcreatedAt     time.Time\n\tupdatedAt     time.Time\n}\n\nfunc newPost(board *Board, id PostID, creator std.Address, title, body string, threadID, parentID PostID, repostBoardID BoardID) *Post {\n\treturn \u0026Post{\n\t\tboard:         board,\n\t\tid:            id,\n\t\tcreator:       creator,\n\t\ttitle:         title,\n\t\tbody:          body,\n\t\treplies:       avl.Tree{},\n\t\trepliesAll:    avl.Tree{},\n\t\treposts:       avl.Tree{},\n\t\tthreadID:      threadID,\n\t\tparentID:      parentID,\n\t\trepostBoardID: repostBoardID,\n\t\tcreatedAt:     time.Now(),\n\t}\n}\n\nfunc (post *Post) IsRepost() bool {\n\treturn post.repostBoardID != 0\n}\n\nfunc (post *Post) IsThread() bool {\n\t// repost threads also have parent ID\n\treturn post.parentID == 0 || post.IsRepost()\n}\n\nfunc (post *Post) GetBoard() *Board {\n\treturn post.board\n}\n\nfunc (post *Post) GetPostID() PostID {\n\treturn post.id\n}\n\nfunc (post *Post) GetParentID() PostID {\n\treturn post.parentID\n}\n\nfunc (post *Post) GetRepostBoardID() BoardID {\n\treturn post.repostBoardID\n}\n\nfunc (post *Post) GetCreator() std.Address {\n\treturn post.creator\n}\n\nfunc (post *Post) GetTitle() string {\n\treturn post.title\n}\n\nfunc (post *Post) GetBody() string {\n\treturn post.body\n}\n\nfunc (post *Post) GetCreatedAt() time.Time {\n\treturn post.createdAt\n}\n\nfunc (post *Post) GetUpdatedAt() time.Time {\n\treturn post.updatedAt\n}\n\nfunc (post *Post) AddFlag(flag Flag) bool {\n\t// TODO: sort flags for fast search in case of big thresholds\n\tfor _, v := range post.flags {\n\t\tif v.User == flag.User {\n\t\t\treturn false\n\t\t}\n\t}\n\n\tpost.flags = append(post.flags, flag)\n\treturn true\n}\n\nfunc (post *Post) FlagsCount() int {\n\treturn len(post.flags)\n}\n\nfunc (post *Post) SetVisible(isVisible bool) {\n\tpost.isHidden = !isVisible\n}\n\nfunc (post *Post) IsHidden() bool {\n\treturn post.isHidden\n}\n\nfunc (post *Post) SetReadonly(isReadonly bool) {\n\tpost.isReadonly = isReadonly\n}\n\nfunc (post *Post) IsReadonly() bool {\n\treturn post.isReadonly\n}\n\nfunc (post *Post) AddReply(creator std.Address, body string) *Post {\n\tboard := post.board\n\tpid := board.incGetPostID()\n\tpKey := pid.Key()\n\treply := newPost(board, pid, creator, \"\", body, post.threadID, post.id, 0)\n\t// TODO: Figure out how to remove this redundancy of data \"replies==repliesAll\" in threads\n\tpost.replies.Set(pKey, reply)\n\tif post.threadID == post.id {\n\t\tpost.repliesAll.Set(pKey, reply)\n\t} else {\n\t\tthread, _ := board.GetThread(post.threadID)\n\t\tthread.repliesAll.Set(pKey, reply)\n\t}\n\treturn reply\n}\n\nfunc (post *Post) Update(title string, body string) {\n\tpost.title = title\n\tpost.body = body\n\tpost.updatedAt = time.Now()\n}\n\nfunc (post *Post) HasReplies() bool {\n\treturn post.replies.Size() \u003e 0\n}\n\nfunc (thread *Post) GetReply(pid PostID) (_ *Post, found bool) {\n\tv, found := thread.repliesAll.Get(pid.Key())\n\tif !found {\n\t\treturn nil, false\n\t}\n\treturn v.(*Post), true\n}\n\nfunc (post *Post) AddRepostTo(creator std.Address, repost *Post, dst *Board) {\n\tif !post.IsThread() {\n\t\tpanic(\"cannot repost non-thread post\")\n\t}\n\n\tpost.repostsCount++\n\tdst.threads.Set(repost.id.Key(), repost)\n\tpost.reposts.Set(dst.id.Key(), repost.id)\n}\n\nfunc (post *Post) DeleteReply(replyID PostID) error {\n\tif !post.IsThread() {\n\t\t// TODO: Allow removing replies from parent replies too\n\t\tpanic(\"cannot delete reply from a non-thread post\")\n\t}\n\n\tif post.id == replyID {\n\t\treturn errors.New(\"expected an ID of an inner reply\")\n\t}\n\n\tkey := replyID.Key()\n\tv, removed := post.repliesAll.Remove(key)\n\tif !removed {\n\t\treturn errors.New(\"reply not found in thread\")\n\t}\n\n\t// TODO: Shouldn't reply be hidden instead of deleted? Maybe replace reply by a deleted message.\n\treply := v.(*Post)\n\tif reply.parentID != post.id {\n\t\tparent, _ := post.GetReply(reply.parentID)\n\t\tparent.replies.Remove(key)\n\t} else {\n\t\tpost.replies.Remove(key)\n\t}\n\treturn nil\n}\n\nfunc (post *Post) GetSummary() string {\n\treturn summaryOf(post.body, 80)\n}\n\nfunc (post *Post) GetURL() string {\n\tif post.IsThread() {\n\t\treturn post.board.GetURLFromThreadID(post.id)\n\t}\n\treturn post.board.GetURLFromReplyID(post.threadID, post.id)\n}\n\nfunc (post *Post) GetReplyFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"CreateReply\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"replyID\", \"0\",\n\t\t\t\"body\", \"\",\n\t\t)\n\t}\n\treturn txlink.Call(\n\t\t\"CreateReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t\t\"body\", \"\",\n\t)\n}\n\nfunc (post *Post) GetRepostFormURL() string {\n\treturn txlink.Call(\n\t\t\"CreateRepost\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.id.String(),\n\t\t\"title\", \"\",\n\t\t\"body\", \"\",\n\t\t\"destinationBoardID\", \"\",\n\t)\n}\n\nfunc (post *Post) GetDeleteFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"DeleteThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t)\n\t}\n\treturn txlink.Call(\n\t\t\"DeleteReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t)\n}\n\nfunc (post *Post) GetEditFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"EditThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"title\", post.GetTitle(),\n\t\t\t\"body\", post.GetBody(),\n\t\t)\n\t}\n\n\treturn txlink.Call(\n\t\t\"EditReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t\t\"body\", post.GetBody(),\n\t)\n}\n\nfunc (post *Post) GetFlagFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"FlagThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"reason\", \"\",\n\t\t)\n\t}\n\n\treturn txlink.Call(\n\t\t\"FlagReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t\t\"reason\", \"\",\n\t)\n}\n\nfunc (post *Post) RenderSummary() string {\n\tvar (\n\t\tb       strings.Builder\n\t\tpostURL = post.GetURL()\n\t\ttitle   = post.title\n\t)\n\n\tb.WriteString(\"**≡ \" + newLink(summaryOf(title, 80), postURL) + \"**  \\n\")\n\tb.WriteString(\"Created by \" + newUserLink(post.creator) + \" on \" + post.createdAt.Format(dateFormat))\n\tb.WriteString(\"  \\n**\")\n\tb.WriteString(strconv.Itoa(post.repliesAll.Size()) + \" replies • \")\n\tb.WriteString(strconv.Itoa(post.reposts.Size()) + \" reposts**\\n\")\n\treturn b.String()\n}\n\nfunc (post *Post) renderSourcePost(indent string) (string, *Post) {\n\tif !post.IsRepost() {\n\t\treturn \"\", nil\n\t}\n\n\tindent += \"\u003e \"\n\n\t// TODO: figure out a way to decouple posts from a global storage.\n\tboard, ok := getBoard(post.repostBoardID)\n\tif !ok {\n\t\treturn indentBody(indent, \"*⚠ Source board has been deleted*\\n\\n\"), nil\n\t}\n\n\tsrcPost, ok := board.GetThread(post.parentID)\n\tif !ok {\n\t\treturn indentBody(indent, \"*⚠ Source post has been deleted*\\n\\n\"), nil\n\t}\n\n\tif srcPost.isHidden {\n\t\treturn indentBody(indent, \"*⚠ Source post has been flagged as inappropriate*\\n\\n\"), nil\n\t}\n\n\treturn indentBody(indent, srcPost.GetSummary()) + \"\\n\\n\", srcPost\n}\n\n// renderPostContent renders post text content (including repost body).\n// Function will dump a predefined message instead of a body if post is hidden.\nfunc (post *Post) renderPostContent(sb *strings.Builder, indent string, levels int) {\n\tif post.isHidden {\n\t\t// Flagged comment should be hidden, but replies still visible (see: #3480)\n\t\t// Flagged threads will be hidden by render function caller.\n\t\tsb.WriteString(indentBody(indent, \"_⚠ Reply is hidden as it has been flagged as inappropriate_\"))\n\t\tsb.WriteString(\"\\n\")\n\t\treturn\n\t}\n\n\tsrcContent, srcPost := post.renderSourcePost(indent)\n\tif post.IsRepost() \u0026\u0026 srcPost != nil {\n\t\tsb.WriteString(\"  \\nThis thread is a repost of [another thread](\" + srcPost.GetURL() + \"): \\n\")\n\t}\n\n\tsb.WriteString(srcContent)\n\n\tif post.IsRepost() \u0026\u0026 srcPost == nil \u0026\u0026 len(post.body) \u003e 0 {\n\t\t// Add a newline to separate source deleted message from repost body content\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\tsb.WriteString(indentBody(indent, post.body))\n\tsb.WriteString(\"\\n\")\n\n\tif post.IsThread() {\n\t\t// Split content and controls for threads.\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\t// Buttons \u0026 counters\n\tsb.WriteString(indent)\n\tif !post.IsThread() {\n\t\tsb.WriteString(\"  \\n\")\n\t\tsb.WriteString(indent)\n\t}\n\n\tsb.WriteString(\"Created by \")\n\tsb.WriteString(newUserLink(post.creator))\n\tsb.WriteString(\" on \")\n\tsb.WriteString(post.createdAt.Format(dateFormat))\n\n\t// Add a reply view link to each top level reply\n\tif !post.IsThread() {\n\t\tsb.WriteString(\", \")\n\t\tsb.WriteString(newLink(\"#\"+post.id.String(), post.GetURL()))\n\t}\n\n\tif post.repostsCount \u003e 0 {\n\t\tsb.WriteString(\", \")\n\t\tsb.WriteString(strconv.FormatUint(post.repostsCount, 10))\n\t\tsb.WriteString(\" repost(s)\")\n\t}\n\n\tsb.WriteString(\"  \\n\")\n\tsb.WriteString(newLink(\"Flag\", post.GetFlagFormURL()))\n\n\tif post.IsThread() {\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Repost\", post.GetRepostFormURL()))\n\t}\n\n\tisReadonly := post.IsReadonly() || post.GetBoard().IsReadonly()\n\tif !isReadonly {\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Reply\", post.GetReplyFormURL()))\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Edit\", post.GetEditFormURL()))\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Delete\", post.GetDeleteFormURL()))\n\t}\n\n\tif levels == 0 {\n\t\tsb.WriteString(\" • \")\n\t\tif post.IsThread() {\n\t\t\tsb.WriteString(newLink(\"Show all Replies\", post.board.GetURLFromThreadID(post.GetPostID())))\n\t\t} else {\n\t\t\tsb.WriteString(newLink(\"View Thread\", post.board.GetURLFromThreadID(post.threadID)))\n\t\t}\n\t}\n\n\tsb.WriteString(\" \\n\")\n}\n\nfunc (post *Post) Render(path string, indent string, levels int) string {\n\tif post == nil {\n\t\treturn \"nil post\"\n\t}\n\n\t// TODO: pass a builder as arg into Render.\n\tvar sb strings.Builder\n\n\t// Thread reposts might not have a title, if so get title from source thread\n\ttitle := post.title\n\tif post.IsRepost() \u0026\u0026 title == \"\" {\n\t\tif board, ok := getBoard(post.repostBoardID); ok {\n\t\t\tif src, ok := board.GetThread(post.parentID); ok {\n\t\t\t\ttitle = src.GetTitle()\n\t\t\t}\n\t\t}\n\t}\n\n\tsb.WriteString(indent)\n\tif title != \"\" { // Replies don't have a title\n\t\tsb.WriteString(\"## \" + title + \"\\n\")\n\t}\n\tsb.WriteString(indent + \"\\n\")\n\n\tpost.renderPostContent(\u0026sb, indent, levels)\n\n\tif post.replies.Size() == 0 {\n\t\treturn sb.String()\n\t}\n\n\t// XXX: This triggers for reply views\n\tif levels == 0 {\n\t\tsb.WriteString(indent + \"\\n\")\n\t\tsb.WriteString(indent)\n\t\tsb.WriteString(\"\\n\")\n\t\treturn sb.String()\n\t}\n\n\tif path != \"\" {\n\t\tsb.WriteString(post.renderTopLevelReplies(path, indent, levels-1))\n\t} else {\n\t\tsb.WriteString(post.renderSubReplies(indent, levels-1))\n\t}\n\treturn sb.String()\n}\n\nfunc (post *Post) renderTopLevelReplies(path, indent string, levels int) string {\n\tp, err := pager.New(path, post.replies.Size(), pager.WithPageSize(pageSizeReplies))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tvar (\n\t\tb              strings.Builder\n\t\tcommentsIndent = indent + \"\u003e \"\n\t)\n\n\trender := func(_ string, v any) bool {\n\t\treply := v.(*Post)\n\n\t\tb.WriteString(indent)\n\t\tb.WriteString(\"\\n\")\n\t\tb.WriteString(reply.Render(\"\", commentsIndent, levels-1))\n\t\treturn false\n\t}\n\n\tb.WriteString(\"\\n\\n---\\nSort by: \")\n\tr := realmpath.Parse(path)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tb.WriteString(newLink(\"newest first\", r.String()))\n\t\tb.WriteString(\"\\n\")\n\t\tpost.replies.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tb.WriteString(newLink(\"oldest first\", r.String()))\n\t\tb.WriteString(\"\\n\")\n\t\tpost.replies.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tb.WriteString(\"\\n---\\n\")\n\t\tb.WriteString(pager.Picker(p))\n\t}\n\n\treturn b.String()\n}\n\nfunc (post *Post) renderSubReplies(indent string, levels int) string {\n\tvar (\n\t\tb              strings.Builder\n\t\tcommentsIndent = indent + \"\u003e \"\n\t)\n\n\tpost.replies.Iterate(\"\", \"\", func(_ string, v any) bool {\n\t\treply := v.(*Post)\n\n\t\tb.WriteString(indent)\n\t\tb.WriteString(\"\\n\")\n\t\tb.WriteString(reply.Render(\"\", commentsIndent, levels-1))\n\t\treturn false\n\t})\n\n\treturn b.String()\n}\n\nfunc (post *Post) RenderInner() string {\n\tif post.IsThread() {\n\t\tpanic(\"unexpected thread\")\n\t}\n\n\tvar (\n\t\ts         string\n\t\tthreadID  = post.threadID\n\t\tthread, _ = post.board.GetThread(threadID) // TODO: This seems redundant (post == thread)\n\t)\n\n\t// Fully render parent if it's not a repost.\n\tif !post.IsRepost() {\n\t\tvar (\n\t\t\tparent   *Post\n\t\t\tparentID = post.parentID\n\t\t)\n\n\t\tif thread.id == parentID {\n\t\t\tparent = thread\n\t\t} else {\n\t\t\tparent, _ = thread.GetReply(parentID)\n\t\t}\n\n\t\ts += parent.Render(\"\", \"\", 0) + \"\\n\"\n\t}\n\n\ts += post.Render(\"\", \"\u003e \", 5)\n\treturn s\n}\n"},{"name":"post_test.gno","body":"package boards2\n\nimport (\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nfunc TestPostUpdate(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tboard := newBoard(1, \"test123\", addr, perms)\n\tcreator := testutils.TestAddress(\"creator\")\n\tpost := newPost(board, 1, creator, \"Title\", \"Body\", 1, 0, 0)\n\ttitle := \"New Title\"\n\tbody := \"New body\"\n\n\tpost.Update(title, body)\n\n\tuassert.Equal(t, title, post.GetTitle())\n\tuassert.Equal(t, body, post.GetBody())\n\tuassert.False(t, post.GetUpdatedAt().IsZero())\n}\n\nfunc TestPostAddFlag(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tpost := createTestThread(t)\n\n\tflag := Flag{\n\t\tUser:   addr,\n\t\tReason: \"foobar\",\n\t}\n\tuassert.True(t, post.AddFlag(flag))\n\tuassert.False(t, post.AddFlag(flag), \"should reject flag from duplicate user\")\n\tuassert.Equal(t, post.FlagsCount(), 1)\n}\n\nfunc TestPostSetVisible(t *testing.T) {\n\tpost := createTestThread(t)\n\tuassert.False(t, post.IsHidden(), \"post should be visible by default\")\n\n\tpost.SetVisible(false)\n\tuassert.True(t, post.IsHidden(), \"post should be hidden\")\n\n\tpost.SetVisible(true)\n\tuassert.False(t, post.IsHidden(), \"post should be visible\")\n}\n\nfunc TestPostAddRepostTo(t *testing.T) {\n\t// TODO: Improve this unit test\n\taddr := testutils.TestAddress(\"creatorDstBoard\")\n\tperms := createDefaultBoardPermissions(addr)\n\tcases := []struct {\n\t\tname, title, body string\n\t\tdstBoard          *Board\n\t\tthread            *Post\n\t\tsetup             func() *Post\n\t\terr               string\n\t}{\n\t\t{\n\t\t\tname:     \"repost thread\",\n\t\t\ttitle:    \"Repost Title\",\n\t\t\tbody:     \"Repost body\",\n\t\t\tdstBoard: newBoard(42, \"dst123\", addr, perms),\n\t\t\tsetup:    func() *Post { return createTestThread(t) },\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid repost from reply\",\n\t\t\tsetup: func() *Post { return createTestReply(t) },\n\t\t\terr:   \"cannot repost non-thread post\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar (\n\t\t\t\trepost  *Post\n\t\t\t\tcreator = testutils.TestAddress(\"repostCreator\")\n\t\t\t\tthread  = tc.setup()\n\t\t\t)\n\n\t\t\tcreateRepost := func() {\n\t\t\t\tvar repostId PostID\n\t\t\t\tif tc.dstBoard != nil {\n\t\t\t\t\trepostId = tc.dstBoard.incGetPostID()\n\t\t\t\t}\n\n\t\t\t\trepost = newPost(tc.dstBoard, repostId, creator, tc.title, tc.body, repostId, thread.GetPostID(), thread.GetBoard().GetID())\n\t\t\t\tthread.AddRepostTo(creator, repost, tc.dstBoard)\n\t\t\t}\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\tuassert.PanicsWithMessage(t, tc.err, createRepost)\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\tuassert.NotPanics(t, createRepost)\n\t\t\t}\n\n\t\t\tr, found := tc.dstBoard.GetThread(repost.GetPostID())\n\t\t\tuassert.True(t, found)\n\t\t\tuassert.True(t, repost == r)\n\t\t\tuassert.Equal(t, tc.title, repost.GetTitle())\n\t\t\tuassert.Equal(t, tc.body, repost.GetBody())\n\t\t\tuassert.Equal(t, uint(thread.GetBoard().GetID()), uint(repost.GetRepostBoardID()))\n\t\t})\n\t}\n}\n\nfunc TestNewThread(t *testing.T) {\n\tcreator := testutils.TestAddress(\"creator\")\n\ttitle := \"Test Title\"\n\tbody := strings.Repeat(\"A\", 82)\n\tboardID := BoardID(1)\n\tthreadID := PostID(42)\n\tboardName := \"test123\"\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(boardID, boardName, creator, perms)\n\turl := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2:%s/%d\",\n\t\tboardName,\n\t\tuint(threadID),\n\t)\n\treplyURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=CreateReply\u0026boardID=%d\u0026body=\u0026replyID=0\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\teditURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=EditThread\u0026boardID=%d\u0026body=%s\u0026threadID=%d\u0026title=%s\",\n\t\tuint(boardID),\n\t\tbody,\n\t\tuint(threadID),\n\t\tstrings.ReplaceAll(title, \" \", \"+\"),\n\t)\n\trepostURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=CreateRepost\u0026boardID=%d\u0026body=\u0026destinationBoardID=\u0026threadID=%d\u0026title=\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\tdeleteURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=DeleteThread\u0026boardID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\tflagURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=FlagThread\u0026boardID=%d\u0026reason=\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\n\tthread := newPost(board, threadID, creator, title, body, threadID, 0, 0)\n\n\tuassert.True(t, thread.IsThread())\n\tuassert.Equal(t, uint(threadID), uint(thread.GetPostID()))\n\tuassert.False(t, thread.GetCreatedAt().IsZero())\n\tuassert.True(t, thread.GetUpdatedAt().IsZero())\n\tuassert.Equal(t, title, thread.GetTitle())\n\tuassert.Equal(t, body[:77]+\"...\", thread.GetSummary())\n\tuassert.False(t, thread.HasReplies())\n\tuassert.Equal(t, url, thread.GetURL())\n\tuassert.Equal(t, replyURL, thread.GetReplyFormURL())\n\tuassert.Equal(t, editURL, thread.GetEditFormURL())\n\tuassert.Equal(t, repostURL, thread.GetRepostFormURL())\n\tuassert.Equal(t, deleteURL, thread.GetDeleteFormURL())\n\tuassert.Equal(t, flagURL, thread.GetFlagFormURL())\n}\n\nfunc TestThreadAddReply(t *testing.T) {\n\treplier := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\tthreadID := uint(thread.GetPostID())\n\tbody := \"A reply\"\n\n\treply := thread.AddReply(replier, body)\n\n\tr, found := thread.GetReply(reply.GetPostID())\n\tuassert.True(t, found)\n\tuassert.True(t, reply == r)\n\tuassert.Equal(t, threadID+1, uint(reply.GetPostID()))\n\tuassert.Equal(t, reply.GetCreator(), replier)\n\tuassert.Equal(t, reply.GetBody(), body)\n\tuassert.True(t, thread.HasReplies())\n}\n\nfunc TestThreadGetReply(t *testing.T) {\n\tcases := []struct {\n\t\tname   string\n\t\tthread *Post\n\t\tsetup  func(thread *Post) (replyID PostID)\n\t\tfound  bool\n\t}{\n\t\t{\n\t\t\tname:   \"found\",\n\t\t\tthread: createTestThread(t),\n\t\t\tsetup: func(thread *Post) PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t\tfound: true,\n\t\t},\n\t\t{\n\t\t\tname:   \"not found\",\n\t\t\tthread: createTestThread(t),\n\t\t\tsetup:  func(*Post) PostID { return 42 },\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup(tc.thread)\n\n\t\t\treply, found := tc.thread.GetReply(replyID)\n\n\t\t\tuassert.Equal(t, tc.found, found)\n\t\t\tif reply != nil {\n\t\t\t\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestThreadDeleteReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tcases := []struct {\n\t\tname  string\n\t\tsetup func() PostID\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"ok nested\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.AddReply(testutils.TestAddress(\"replier2\"), \"\").GetPostID()\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid\",\n\t\t\tsetup: func() PostID { return thread.GetPostID() },\n\t\t\terr:   \"expected an ID of an inner reply\",\n\t\t},\n\t\t{\n\t\t\tname:  \"not found\",\n\t\t\tsetup: func() PostID { return 42 },\n\t\t\terr:   \"reply not found in thread\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup()\n\n\t\t\terr := thread.DeleteReply(replyID)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\tuassert.ErrorContains(t, err, tc.err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tuassert.NoError(t, err)\n\t\t\t_, found := thread.GetReply(replyID)\n\t\t\tuassert.False(t, found)\n\t\t})\n\t}\n}\n\nfunc TestThreadRenderSummary(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestThreadRender(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestThreadRenderInner(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestNewReply(t *testing.T) {\n\tcreator := testutils.TestAddress(\"creator\")\n\tbody := strings.Repeat(\"A\", 82)\n\tboardID := BoardID(1)\n\tthreadID := PostID(42)\n\tparentID := PostID(1)\n\treplyID := PostID(2)\n\tboardName := \"test123\"\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(boardID, boardName, creator, perms)\n\turl := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2:%s/%d/%d\",\n\t\tboardName,\n\t\tuint(threadID),\n\t\tuint(replyID),\n\t)\n\treplyURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=CreateReply\u0026boardID=%d\u0026body=\u0026replyID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(replyID),\n\t\tuint(threadID),\n\t)\n\tdeleteURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=DeleteReply\u0026boardID=%d\u0026replyID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(replyID),\n\t\tuint(threadID),\n\t)\n\n\treply := newPost(board, replyID, creator, \"\", body, threadID, parentID, 0)\n\n\tuassert.False(t, reply.IsThread())\n\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\tuassert.False(t, reply.GetCreatedAt().IsZero())\n\tuassert.True(t, reply.GetUpdatedAt().IsZero())\n\tuassert.False(t, reply.HasReplies())\n\tuassert.Equal(t, body[:77]+\"...\", reply.GetSummary())\n\tuassert.Equal(t, url, reply.GetURL())\n\tuassert.Equal(t, replyURL, reply.GetReplyFormURL())\n\tuassert.Equal(t, deleteURL, reply.GetDeleteFormURL())\n}\n\nfunc TestReplyAddReply(t *testing.T) {\n\treplier := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"parentReplier\"), \"\")\n\tparentReplyID := uint(parentReply.GetPostID())\n\tbody := \"A child reply\"\n\n\treply := parentReply.AddReply(replier, body)\n\n\tr, found := thread.GetReply(reply.GetPostID())\n\tuassert.True(t, found)\n\tuassert.True(t, reply == r)\n\tuassert.Equal(t, parentReplyID, uint(reply.GetParentID()))\n\tuassert.Equal(t, parentReplyID+1, uint(reply.GetPostID()))\n\tuassert.Equal(t, reply.GetCreator(), replier)\n\tuassert.Equal(t, reply.GetBody(), body)\n\tuassert.False(t, reply.HasReplies())\n\tuassert.True(t, parentReply.HasReplies())\n}\n\nfunc TestReplyGetReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"parentReplier\"), \"\")\n\tcases := []struct {\n\t\tname  string\n\t\tsetup func() PostID\n\t\tfound bool\n\t}{\n\t\t{\n\t\t\tname: \"found\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := parentReply.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t\tfound: true,\n\t\t},\n\t\t{\n\t\t\tname:  \"not found\",\n\t\t\tsetup: func() PostID { return 42 },\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup()\n\n\t\t\treply, found := thread.GetReply(replyID)\n\n\t\t\tuassert.Equal(t, tc.found, found)\n\t\t\tif reply != nil {\n\t\t\t\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestReplyDeleteReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\treply := parentReply.AddReply(testutils.TestAddress(\"replier2\"), \"\")\n\n\t// NOTE: Deleting a reply from a parent reply should eventually be suported\n\tuassert.PanicsWithMessage(t, \"cannot delete reply from a non-thread post\", func() {\n\t\tparentReply.DeleteReply(reply.GetPostID())\n\t})\n}\n\nfunc TestReplyRender(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc createTestThread(t *testing.T) *Post {\n\tt.Helper()\n\n\tcreator := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(1, \"test_board_123\", creator, perms)\n\treturn board.AddThread(creator, \"Title\", \"Body\")\n}\n\nfunc createTestReply(t *testing.T) *Post {\n\tt.Helper()\n\n\tcreator := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\treturn thread.AddReply(creator, \"Test message\")\n}\n"},{"name":"public.gno","body":"package boards2\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nconst (\n\t// MaxBoardNameLength defines the maximum length allowed for board names.\n\tMaxBoardNameLength = 50\n\n\t// MaxThreadTitleLength defines the maximum length allowed for thread titles.\n\tMaxThreadTitleLength = 100\n\n\t// MaxReplyLength defines the maximum length allowed for replies.\n\tMaxReplyLength = 300\n)\n\nvar (\n\treBoardName = regexp.MustCompile(`(?i)^[a-z]+[a-z0-9_\\-]{2,50}$`)\n\n\t// Minimalistic Markdown line prefix checks that if allowed would\n\t// break the current UI when submitting a reply. It denies replies\n\t// with headings, blockquotes or horizontal lines.\n\treDeniedReplyLinePrefixes = regexp.MustCompile(`(?m)^\\s*(#|---|\u003e)+`)\n)\n\n// SetHelp sets or updates boards realm help content.\nfunc SetHelp(content string) {\n\tcontent = strings.TrimSpace(content)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{content}\n\tgPerms.WithPermission(caller, PermissionRealmHelp, args, func(Args) {\n\t\tgHelp = content\n\t})\n}\n\n// SetPermissions sets a permissions implementation for boards2 realm or a board.\nfunc SetPermissions(bid BoardID, p Permissions) {\n\tassertRealmIsNotLocked()\n\n\tif p == nil {\n\t\tpanic(\"permissions is required\")\n\t}\n\n\tif bid != 0 {\n\t\tassertBoardExists(bid)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{bid}\n\tgPerms.WithPermission(caller, PermissionPermissionsUpdate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\n\t\t// When board ID is zero it means that realm permissions are being updated\n\t\tif bid == 0 {\n\t\t\tgPerms = p\n\n\t\t\tstd.Emit(\n\t\t\t\t\"RealmPermissionsUpdated\",\n\t\t\t\t\"caller\", caller.String(),\n\t\t\t)\n\t\t\treturn\n\t\t}\n\n\t\t// Otherwise update the permissions of a single board\n\t\tboard := mustGetBoard(bid)\n\t\tboard.perms = p\n\n\t\tstd.Emit(\n\t\t\t\"BoardPermissionsUpdated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", bid.String(),\n\t\t)\n\t})\n}\n\n// SetRealmNotice sets a notice to be displayed globally by the realm.\n// An empty message removes the realm notice.\nfunc SetRealmNotice(message string) {\n\tmessage = strings.TrimSpace(message)\n\tcaller := std.PreviousRealm().Address()\n\tgPerms.WithPermission(caller, PermissionRealmNotice, nil, func(Args) {\n\t\tgNotice = message\n\n\t\tstd.Emit(\n\t\t\t\"RealmNoticeChanged\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"message\", message,\n\t\t)\n\t})\n}\n\n// GetBoardIDFromName searches a board by name and returns it's ID.\nfunc GetBoardIDFromName(name string) (_ BoardID, found bool) {\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\treturn 0, false\n\t}\n\treturn v.(*Board).id, true\n}\n\n// CreateBoard creates a new board.\nfunc CreateBoard(name string) BoardID {\n\tassertRealmIsNotLocked()\n\n\tname = strings.TrimSpace(name)\n\tassertIsValidBoardName(name)\n\tassertBoardNameNotExists(name)\n\n\tcaller := std.PreviousRealm().Address()\n\tid := incGetBoardID()\n\targs := Args{name, id}\n\tgPerms.WithPermission(caller, PermissionBoardCreate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardNameNotExists(name)\n\n\t\tperms := createDefaultBoardPermissions(caller)\n\t\tboard := newBoard(id, name, caller, perms)\n\t\tgBoardsByID.Set(id.Key(), board)\n\t\tgBoardsByName.Set(name, board)\n\n\t\tstd.Emit(\n\t\t\t\"BoardCreated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", id.String(),\n\t\t\t\"name\", name,\n\t\t)\n\t})\n\treturn id\n}\n\n// RenameBoard changes the name of an existing board.\n//\n// A history of previous board names is kept when boards are renamed.\n// Because of that boards are also accesible using previous name(s).\nfunc RenameBoard(name, newName string) {\n\tassertRealmIsNotLocked()\n\n\tnewName = strings.TrimSpace(newName)\n\tassertIsValidBoardName(newName)\n\tassertBoardNameNotExists(newName)\n\n\tboard := mustGetBoardByName(name)\n\tassertBoardIsNotFrozen(board)\n\n\tbid := board.GetID()\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{bid, name, newName}\n\tboard.perms.WithPermission(caller, PermissionBoardRename, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardNameNotExists(newName)\n\n\t\tboard := mustGetBoard(bid)\n\t\tboard.aliases = append(board.aliases, board.name)\n\t\tboard.name = newName\n\n\t\t// Index board for the new name keeping previous indexes for older names\n\t\tgBoardsByName.Set(newName, board)\n\n\t\tstd.Emit(\n\t\t\t\"BoardRenamed\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", bid.String(),\n\t\t\t\"name\", name,\n\t\t\t\"newName\", newName,\n\t\t)\n\t})\n}\n\n// CreateThread creates a new thread within a board.\nfunc CreateThread(boardID BoardID, title, body string) PostID {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tbody = strings.TrimSpace(body)\n\tassertBodyIsNotEmpty(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionThreadCreate)\n\n\tthread := board.AddThread(caller, title, body)\n\n\tstd.Emit(\n\t\t\"ThreadCreated\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", thread.GetPostID().String(),\n\t\t\"title\", title,\n\t)\n\n\treturn thread.id\n}\n\n// CreateReply creates a new comment or reply within a thread.\n//\n// The value of `replyID` is only required when creating a reply of another reply.\nfunc CreateReply(boardID BoardID, threadID, replyID PostID, body string) PostID {\n\tassertRealmIsNotLocked()\n\n\tbody = strings.TrimSpace(body)\n\tassertReplyBodyIsValid(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionReplyCreate)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\tassertThreadIsNotFrozen(thread)\n\n\tvar reply *Post\n\tif replyID == 0 {\n\t\t// When the parent reply is the thread just add reply to thread\n\t\treply = thread.AddReply(caller, body)\n\t} else {\n\t\t// Try to get parent reply and add a new child reply\n\t\tparent := mustGetReply(thread, replyID)\n\t\tif parent.IsHidden() || parent.IsReadonly() {\n\t\t\tpanic(\"replying to a hidden or frozen reply is not allowed\")\n\t\t}\n\n\t\treply = parent.AddReply(caller, body)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyCreate\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", reply.GetPostID().String(),\n\t)\n\n\treturn reply.id\n}\n\n// CreateRepost reposts a thread into another board.\nfunc CreateRepost(boardID BoardID, threadID PostID, title, body string, destinationBoardID BoardID) PostID {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tcaller := std.PreviousRealm().Address()\n\tdst := mustGetBoard(destinationBoardID)\n\tassertBoardIsNotFrozen(dst)\n\tassertHasBoardPermission(dst, caller, PermissionThreadRepost)\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\tif thread.IsRepost() {\n\t\tpanic(\"reposting a thread that is a repost is not allowed\")\n\t}\n\n\trepostId := dst.incGetPostID()\n\tbody = strings.TrimSpace(body)\n\trepost := newPost(dst, repostId, caller, title, body, repostId, thread.GetPostID(), thread.GetBoard().GetID())\n\tthread.AddRepostTo(caller, repost, dst)\n\n\tstd.Emit(\n\t\t\"Repost\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"destinationBoardID\", destinationBoardID.String(),\n\t\t\"title\", title,\n\t)\n\n\treturn repostId\n}\n\n// DeleteThread deletes a thread from a board.\n//\n// Threads can be deleted by the users who created them or otherwise by users with special permissions.\nfunc DeleteThread(boardID BoardID, threadID PostID) {\n\t// Council members should always be able to delete\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner) // TODO: Add DeleteThread filetest cases for realm owners\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\n\tif !isRealmOwner {\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertThreadIsNotFrozen(thread)\n\n\t\tif caller != thread.GetCreator() {\n\t\t\tassertHasBoardPermission(board, caller, PermissionThreadDelete)\n\t\t}\n\t}\n\n\t// Hard delete thread and all its replies\n\tboard.DeleteThread(threadID)\n\n\tstd.Emit(\n\t\t\"ThreadDeleted\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t)\n}\n\n// DeleteReply deletes a reply from a thread.\n//\n// Replies can be deleted by the users who created them or otherwise by users with special permissions.\n// Soft deletion is used when the deleted reply contains sub replies, in which case the reply content\n// is replaced by a text informing that reply has been deleted to avoid deleting sub-replies.\nfunc DeleteReply(boardID BoardID, threadID, replyID PostID) {\n\t// Council members should always be able to delete\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner) // TODO: Add DeleteReply filetest cases for realm owners\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\treply := mustGetReply(thread, replyID)\n\n\tif !isRealmOwner {\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertThreadIsNotFrozen(thread)\n\t\tassertReplyIsVisible(reply)\n\t\tassertReplyIsNotFrozen(reply)\n\n\t\tif caller != reply.GetCreator() {\n\t\t\tassertHasBoardPermission(board, caller, PermissionReplyDelete)\n\t\t}\n\t}\n\n\t// Soft delete reply by changing its body when it contains\n\t// sub-replies, otherwise hard delete it.\n\tif reply.HasReplies() {\n\t\treply.Update(reply.GetTitle(), \"This reply has been deleted\")\n\t} else {\n\t\tthread.DeleteReply(replyID)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyDeleted\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t)\n}\n\n// EditThread updates the title and body of thread.\n//\n// Threads can be updated by the users who created them or otherwise by users with special permissions.\nfunc EditThread(boardID BoardID, threadID PostID, title, body string) {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\tbody = strings.TrimSpace(body)\n\tif !thread.IsRepost() {\n\t\tassertBodyIsNotEmpty(body)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tif caller != thread.GetCreator() {\n\t\tassertHasBoardPermission(board, caller, PermissionThreadEdit)\n\t}\n\n\tthread.Update(title, body)\n\n\tstd.Emit(\n\t\t\"ThreadEdited\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"title\", title,\n\t)\n}\n\n// EditReply updates the body of comment or reply.\n//\n// Replies can be updated only by the users who created them.\nfunc EditReply(boardID BoardID, threadID, replyID PostID, body string) {\n\tassertRealmIsNotLocked()\n\n\tbody = strings.TrimSpace(body)\n\tassertReplyBodyIsValid(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\tassertReplyIsNotFrozen(reply)\n\n\tcaller := std.PreviousRealm().Address()\n\tif caller != reply.GetCreator() {\n\t\tpanic(\"only the reply creator is allowed to edit it\")\n\t}\n\n\treply.Update(\"\", body)\n\n\tstd.Emit(\n\t\t\"ReplyEdited\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"body\", body,\n\t)\n}\n\n// InviteMember adds a member to the realm or to a boards.\n//\n// A role can optionally be specified to be assigned to the new member.\n// Board ID is only required when inviting a member to a board.\nfunc InviteMember(boardID BoardID, user std.Address, role Role) {\n\tassertUserAddressIsValid(user)\n\tassertMembersUpdateIsEnabled(boardID)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{user, role}\n\tperms.WithPermission(caller, PermissionMemberInvite, args, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif err := perms.AddUser(user, role); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"MemberInvited\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", user.String(),\n\t\t\t\"role\", string(role),\n\t\t)\n\t})\n}\n\n// RemoveMember removes a member from the realm or a boards.\n//\n// Board ID is only required when removing a member from board.\nfunc RemoveMember(boardID BoardID, member std.Address) {\n\tassertMembersUpdateIsEnabled(boardID)\n\tassertMemberAddressIsValid(member)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\tperms.WithPermission(caller, PermissionMemberRemove, Args{member}, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif !perms.RemoveUser(member) {\n\t\t\tpanic(\"member not found\")\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"MemberRemoved\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", member.String(),\n\t\t)\n\t})\n}\n\n// IsMember checks if an user is a member of the realm or a board.\n//\n// Board ID is only required when checking if a user is a member of a board.\nfunc IsMember(boardID BoardID, user std.Address) bool {\n\tassertUserAddressIsValid(user)\n\n\tif boardID != 0 {\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tperms := mustGetPermissions(boardID)\n\treturn perms.HasUser(user)\n}\n\n// HasMemberRole checks if a realm or board member has a specific role assigned.\n//\n// Board ID is only required when checking a member of a board.\nfunc HasMemberRole(boardID BoardID, member std.Address, role Role) bool {\n\tassertMemberAddressIsValid(member)\n\n\tif boardID != 0 {\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tperms := mustGetPermissions(boardID)\n\treturn perms.HasRole(member, role)\n}\n\n// ChangeMemberRole changes the role of a realm or board member.\n//\n// Board ID is only required when changing the role for a member of a board.\nfunc ChangeMemberRole(boardID BoardID, member std.Address, role Role) {\n\tassertMemberAddressIsValid(member)\n\tassertMembersUpdateIsEnabled(boardID)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{boardID, member, role}\n\tperms.WithPermission(caller, PermissionRoleChange, args, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif err := perms.SetUserRoles(member, role); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"RoleChanged\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", member.String(),\n\t\t\t\"newRole\", string(role),\n\t\t)\n\t})\n}\n\n// IterateRealmMembers iterates realm members.\n// The iteration is done only for realm members, board members are not iterated.\nfunc IterateRealmMembers(offset int, fn UsersIterFn) (halted bool) {\n\tcount := gPerms.UsersCount() - offset\n\treturn gPerms.IterateUsers(offset, count, fn)\n}\n\n// IterateBoards iterates realm boards.\nfunc IterateBoards(offset int, fn func(ReadonlyBoard) bool) (halted bool) {\n\tcount := gBoardsByID.Size() - offset\n\treturn gBoardsByID.IterateByOffset(offset, count, func(_ string, v any) bool {\n\t\tboard, _ := v.(*Board)\n\t\treturn fn(readonlyBoard{board})\n\t})\n}\n\nfunc assertMemberAddressIsValid(member std.Address) {\n\tif !member.IsValid() {\n\t\tpanic(\"invalid member address\")\n\t}\n}\n\nfunc assertUserAddressIsValid(user std.Address) {\n\tif !user.IsValid() {\n\t\tpanic(\"invalid user address\")\n\t}\n}\n\nfunc assertHasBoardPermission(b *Board, user std.Address, p Permission) {\n\tif !b.perms.HasPermission(user, p) {\n\t\tpanic(\"unauthorized\")\n\t}\n}\n\nfunc assertBoardExists(id BoardID) {\n\tif _, found := getBoard(id); !found {\n\t\tpanic(\"board not found: \" + id.String())\n\t}\n}\n\nfunc assertBoardIsNotFrozen(b *Board) {\n\tif b.IsReadonly() {\n\t\tpanic(\"board is frozen\")\n\t}\n}\n\nfunc assertIsValidBoardName(name string) {\n\tsize := len(name)\n\tif size == 0 {\n\t\tpanic(\"board name is empty\")\n\t}\n\n\tif size \u003e MaxBoardNameLength {\n\t\tn := strconv.Itoa(MaxBoardNameLength)\n\t\tpanic(\"board name is too long, maximum allowed is \" + n + \" characters\")\n\t}\n\n\tif !reBoardName.MatchString(name) {\n\t\tpanic(\"board name contains invalid characters\")\n\t}\n}\n\nfunc assertThreadIsNotFrozen(t *Post) {\n\tif t.IsReadonly() {\n\t\tpanic(\"thread is frozen\")\n\t}\n}\n\nfunc assertReplyIsNotFrozen(r *Post) {\n\tif r.IsReadonly() {\n\t\tpanic(\"reply is frozen\")\n\t}\n}\n\nfunc assertNameIsNotEmpty(name string) {\n\tif name == \"\" {\n\t\tpanic(\"name is empty\")\n\t}\n}\n\nfunc assertTitleIsValid(title string) {\n\tif title == \"\" {\n\t\tpanic(\"title is empty\")\n\t}\n\n\tif len(title) \u003e MaxThreadTitleLength {\n\t\tn := strconv.Itoa(MaxThreadTitleLength)\n\t\tpanic(\"thread title is too long, maximum allowed is \" + n + \" characters\")\n\t}\n}\n\nfunc assertBodyIsNotEmpty(body string) {\n\tif body == \"\" {\n\t\tpanic(\"body is empty\")\n\t}\n}\n\nfunc assertBoardNameNotExists(name string) {\n\tif gBoardsByName.Has(name) {\n\t\tpanic(\"board already exists\")\n\t}\n}\n\nfunc assertThreadExists(b *Board, threadID PostID) {\n\tif _, found := b.GetThread(threadID); !found {\n\t\tpanic(\"thread not found: \" + threadID.String())\n\t}\n}\n\nfunc assertReplyExists(thread *Post, replyID PostID) {\n\tif _, found := thread.GetReply(replyID); !found {\n\t\tpanic(\"reply not found: \" + replyID.String())\n\t}\n}\n\nfunc assertThreadIsVisible(thread *Post) {\n\tif thread.IsHidden() {\n\t\tpanic(\"thread is hidden\")\n\t}\n}\n\nfunc assertReplyIsVisible(thread *Post) {\n\tif thread.IsHidden() {\n\t\tpanic(\"reply is hidden\")\n\t}\n}\n\nfunc assertReplyBodyIsValid(body string) {\n\tassertBodyIsNotEmpty(body)\n\n\tif len(body) \u003e MaxReplyLength {\n\t\tn := strconv.Itoa(MaxReplyLength)\n\t\tpanic(\"reply is too long, maximum allowed is \" + n + \" characters\")\n\t}\n\n\tif reDeniedReplyLinePrefixes.MatchString(body) {\n\t\tpanic(\"using Markdown headings, blockquotes or horizontal lines is not allowed in replies\")\n\t}\n}\n\nfunc assertMembersUpdateIsEnabled(boardID BoardID) {\n\tif boardID != 0 {\n\t\tassertRealmIsNotLocked()\n\t} else {\n\t\tassertRealmMembersAreNotLocked()\n\t}\n}\n"},{"name":"public_flag.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// SetFlaggingThreshold sets the number of flags required to hide a thread or comment.\n//\n// Threshold is only applicable within the board where it's setted.\nfunc SetFlaggingThreshold(boardID BoardID, threshold int) {\n\tif threshold \u003c 1 {\n\t\tpanic(\"invalid flagging threshold\")\n\t}\n\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{boardID, threshold}\n\tboard.perms.WithPermission(caller, PermissionBoardFlaggingUpdate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\n\t\tgFlaggingThresholds.Set(boardID.String(), threshold)\n\t\tstd.Emit(\n\t\t\t\"FlaggingThresholdUpdated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"threshold\", strconv.Itoa(threshold),\n\t\t)\n\t})\n}\n\n// GetFlaggingThreshold returns the number of flags required to hide a thread or comment within a board.\nfunc GetFlaggingThreshold(boardID BoardID) int {\n\tassertBoardExists(boardID)\n\treturn getFlaggingThreshold(boardID)\n}\n\n// FlagThread adds a new flag to a thread.\n//\n// Flagging requires special permissions and hides the thread when\n// the number of flags reaches a pre-defined flagging threshold.\nfunc FlagThread(boardID BoardID, threadID PostID, reason string) {\n\tboard := mustGetBoard(boardID)\n\n\t// Realm owners should be able to flag without permissions even when board is frozen\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner)\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertHasBoardPermission(board, caller, PermissionThreadFlag)\n\t}\n\n\tt, ok := board.GetThread(threadID)\n\tif !ok {\n\t\tpanic(\"post doesn't exist\")\n\t}\n\tassertThreadIsNotFrozen(t)\n\n\tf := Flag{\n\t\tUser:   caller,\n\t\tReason: reason,\n\t}\n\n\t// Realm owners can hide with a single flag\n\thide := flagItem(t, f, getFlaggingThreshold(boardID))\n\tif hide || isRealmOwner {\n\t\tt.SetVisible(false)\n\t}\n\n\tstd.Emit(\n\t\t\"ThreadFlagged\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"reason\", reason,\n\t)\n}\n\n// FlagReply adds a new flag to a comment or reply.\n//\n// Flagging requires special permissions and hides the comment or reply\n// when the number of flags reaches a pre-defined flagging threshold.\nfunc FlagReply(boardID BoardID, threadID, replyID PostID, reason string) {\n\tboard := mustGetBoard(boardID)\n\n\t// Realm owners should be able to flag without permissions even when board is frozen\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner)\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertHasBoardPermission(board, caller, PermissionReplyFlag)\n\t}\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsNotFrozen(thread)\n\n\tf := Flag{\n\t\tUser:   caller,\n\t\tReason: reason,\n\t}\n\n\t// Realm owners can hide with a single flag\n\thide := flagItem(reply, f, getFlaggingThreshold(boardID))\n\tif hide || isRealmOwner {\n\t\treply.SetVisible(false)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyFlagged\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"reason\", reason,\n\t)\n}\n"},{"name":"public_freeze.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// FreezeBoard freezes a board so no more threads and comments can be created or modified.\nfunc FreezeBoard(boardID BoardID) {\n\tsetBoardReadonly(boardID, true)\n}\n\n// UnfreezeBoard removes frozen status from a board.\nfunc UnfreezeBoard(boardID BoardID) {\n\tsetBoardReadonly(boardID, false)\n}\n\n// IsBoardFrozen checks if a board has been frozen.\nfunc IsBoardFrozen(boardID BoardID) bool {\n\tboard := mustGetBoard(boardID)\n\treturn board.IsReadonly()\n}\n\n// FreezeThread freezes a thread so thread cannot be replied, modified or deleted.\n//\n// Fails if board is frozen.\nfunc FreezeThread(boardID BoardID, threadID PostID) {\n\tsetThreadReadonly(boardID, threadID, true)\n}\n\n// UnfreezeThread removes frozen status from a thread.\n//\n// Fails if board is frozen.\nfunc UnfreezeThread(boardID BoardID, threadID PostID) {\n\tsetThreadReadonly(boardID, threadID, false)\n}\n\n// IsThreadFrozen checks if a thread has been frozen.\n//\n// Returns true if board is frozen.\nfunc IsThreadFrozen(boardID BoardID, threadID PostID) bool {\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\treturn board.IsReadonly() || thread.IsReadonly()\n}\n\n// UnfreezeReply removes frozen status from a reply.\n//\n// Fails when parent thread or board are frozen.\nfunc UnfreezeReply(boardID BoardID, threadID, replyID PostID) {\n\t// XXX: Is there a use case for also freezing replies?\n\tsetReplyReadonly(boardID, threadID, replyID, false)\n}\n\n// FreezeReply freezes a thread reply so it cannot be modified or deleted.\n//\n// Fails when parent thread or board are frozen.\nfunc FreezeReply(boardID BoardID, threadID, replyID PostID) {\n\tsetReplyReadonly(boardID, threadID, replyID, true)\n}\n\n// IsReplyFrozen checks if a thread reply has been frozen.\n//\n// Returns true when board or a parent thread is frozen.\nfunc IsReplyFrozen(boardID BoardID, threadID, replyID PostID) bool {\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\n\treturn board.IsReadonly() || thread.IsReadonly() || reply.IsReadonly()\n}\n\nfunc setReplyReadonly(boardID BoardID, threadID, replyID PostID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionReplyFreeze)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\n\tif isReadonly {\n\t\tassertReplyIsNotFrozen(reply)\n\t}\n\n\treply.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"ReplyFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n\nfunc setThreadReadonly(boardID BoardID, threadID PostID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionThreadFreeze)\n\n\tthread := mustGetThread(board, threadID)\n\tif isReadonly {\n\t\tassertThreadIsNotFrozen(thread)\n\t}\n\n\tthread.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"ThreadFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n\nfunc setBoardReadonly(boardID BoardID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tif isReadonly {\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionBoardFreeze)\n\n\tboard.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"BoardFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n"},{"name":"public_lock.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// LockRealm locks the realm making it readonly.\n//\n// WARNING: Realm can't be unlocked once locked.\n//\n// Realm can also be locked without locking realm members.\n// Realm members can be locked when locking the realm or afterwards.\n// This is relevant for two reasons, one so members can be modified after lock.\n// The other is for realm owners, which can delete threads and comments after lock.\nfunc LockRealm(lockRealmMembers bool) {\n\tassertRealmMembersAreNotLocked()\n\n\t// If realm members are not being locked assert that realm is no locked.\n\t// Members can be locked after locking the realm, in a second `LockRealm` call.\n\tif !lockRealmMembers {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tgPerms.WithPermission(caller, PermissionRealmLock, nil, func(Args) {\n\t\tgLocked.realm = true\n\t\tgLocked.realmMembers = lockRealmMembers\n\n\t\tstd.Emit(\n\t\t\t\"RealmLocked\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"lockRealmMembers\", strconv.FormatBool(lockRealmMembers),\n\t\t)\n\t})\n}\n\n// IsRealmLocked checks if boards realm has been locked.\nfunc IsRealmLocked() bool {\n\treturn gLocked.realm\n}\n\n// AreRealmMembersLocked checks if realm members has been locked.\nfunc AreRealmMembersLocked() bool {\n\treturn gLocked.realmMembers\n}\n\nfunc assertRealmIsNotLocked() { // TODO: Add filtests for locked realm case to all public functions\n\tif gLocked.realm {\n\t\tpanic(\"realm is locked\")\n\t}\n}\n\nfunc assertRealmMembersAreNotLocked() { // TODO: Add filtests for locked members case to all public member functions\n\tif gLocked.realmMembers {\n\t\tpanic(\"realm and members are locked\")\n\t}\n}\n"},{"name":"render.gno","body":"package boards2\n\nimport (\n\t\"net/url\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/mux\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nconst (\n\tpageSizeBoards  = 6\n\tpageSizeThreads = 6\n\tpageSizeReplies = 10\n)\n\nconst menuManageBoard = \"manageBoard\"\n\nfunc Render(path string) string {\n\trouter := mux.NewRouter()\n\trouter.HandleFunc(\"\", renderBoardsList)\n\trouter.HandleFunc(\"help\", renderHelp)\n\trouter.HandleFunc(\"admin-users\", renderMembers)\n\trouter.HandleFunc(\"{board}\", renderBoard)\n\trouter.HandleFunc(\"{board}/members\", renderMembers)\n\trouter.HandleFunc(\"{board}/{thread}\", renderThread)\n\trouter.HandleFunc(\"{board}/{thread}/{reply}\", renderReply)\n\n\trouter.NotFoundHandler = func(res *mux.ResponseWriter, _ *mux.Request) {\n\t\tres.Write(\"Path not found\")\n\t}\n\n\treturn router.Render(path)\n}\n\nfunc renderHelp(res *mux.ResponseWriter, _ *mux.Request) {\n\tres.Write(\"# Boards Help\\n\")\n\tif gHelp != \"\" {\n\t\tres.Write(gHelp)\n\t} else {\n\t\tres.Write(\"### Help content has not been uploaded\\n\")\n\t\tres.Write(\"Do you want to \")\n\t\tres.Write(newLink(\"upload boards help\", txlink.Call(\"SetHelp\", \"content\", \"\")))\n\t\tres.Write(\" ?\")\n\t}\n}\n\nfunc renderBoardsList(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tres.Write(\"# Boards\\n\\n\")\n\trenderBoardListMenu(res, req)\n\tres.Write(\"\\n\\n---\\n\")\n\n\tif gBoardsByID.Size() == 0 {\n\t\tlink := txlink.Call(\"CreateBoard\", \"name\", \"\")\n\t\tres.Write(\"### Currently there are no boards\\n\")\n\t\tres.Write(\"Be the first to \")\n\t\tres.Write(newLink(\"create a new board\", link))\n\t\tres.Write(\" !\")\n\n\t\treturn\n\t}\n\n\tp, err := pager.New(req.RawPath, gBoardsByID.Size(), pager.WithPageSize(pageSizeBoards))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\trender := func(_ string, v any) bool {\n\t\tboard := v.(*Board)\n\n\t\tres.Write(\"**\" + newLink(board.GetName(), board.GetURL()) + \"**  \\n\")\n\t\tres.Write(\"Created by \" + newUserLink(board.creator) + \" \")\n\t\tres.Write(\"on \" + board.createdAt.Format(dateFormat))\n\t\tres.Write(\", #\" + board.id.String() + \"  \\n\")\n\t\tres.Write(\"**\" + strconv.Itoa(board.threads.Size()) + \" threads\")\n\t\tif board.IsReadonly() {\n\t\t\tres.Write(\", read-only\")\n\t\t}\n\n\t\tres.Write(\"**\\n\\n\")\n\t\treturn false\n\t}\n\n\tres.Write(\"Sort by: \")\n\tr := realmpath.Parse(req.RawPath)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tres.Write(newLink(\"newest first\", r.String()))\n\t\tres.Write(\"\\n\\n\")\n\t\tgBoardsByID.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tres.Write(newLink(\"oldest first\", r.String()))\n\t\tres.Write(\"\\n\\n\")\n\t\tgBoardsByID.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tres.Write(\"\\n---\\n\")\n\t\tres.Write(pager.Picker(p))\n\t}\n}\n\nfunc renderBoardListMenu(res *mux.ResponseWriter, req *mux.Request) {\n\tpath := strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\n\tres.Write(newLink(\"Create Board\", txlink.Call(\"CreateBoard\", \"name\", \"\")))\n\tres.Write(\" • \")\n\tres.Write(newLink(\"List Admin Users\", path+\":admin-users\"))\n\tres.Write(\" • \")\n\tres.Write(newLink(\"Help\", path+\":help\"))\n\tres.Write(\"\\n\\n\")\n}\n\nfunc renderBoard(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tlink := newLink(\"create a new board\", txlink.Call(\"CreateBoard\", \"name\", name))\n\t\tres.Write(\"### The board you are looking for does not exist\\n\")\n\t\tres.Write(\"Do you want to \")\n\t\tres.Write(link)\n\t\tres.Write(\" ?\")\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tmenu := renderBoardMenu(board, req)\n\n\tres.Write(board.Render(req.RawPath, menu))\n}\n\nfunc renderBoardMenu(board *Board, req *mux.Request) string {\n\tvar (\n\t\tb               strings.Builder\n\t\tboardMembersURL = board.GetPath() + \"/members\"\n\t)\n\n\tif board.IsReadonly() {\n\t\tb.WriteString(newLink(\"List Members\", boardMembersURL))\n\t\tb.WriteString(\" • \")\n\t\tb.WriteString(newLink(\"Unfreeze Board\", board.GetUnfreezeFormURL()))\n\t\tb.WriteString(\"\\n\")\n\t} else {\n\t\tb.WriteString(newLink(\"Create Thread\", board.GetPostFormURL()))\n\t\tb.WriteString(\" • \")\n\n\t\tmenu := getCurrentMenu(req.RawPath)\n\t\tif menu == menuManageBoard {\n\t\t\tb.WriteString(\"**Manage Board**\")\n\t\t} else {\n\t\t\tb.WriteString(newLink(\"Manage Board\", menuURL(menuManageBoard)))\n\t\t}\n\n\t\tb.WriteString(\"  \\n\")\n\n\t\tif menu == menuManageBoard {\n\t\t\tb.WriteString(\"↳\")\n\t\t\tb.WriteString(newLink(\"Invite Member\", board.GetInviteMemberFormURL()))\n\t\t\tb.WriteString(\" • \")\n\t\t\tb.WriteString(newLink(\"List Members\", boardMembersURL))\n\t\t\tb.WriteString(\" • \")\n\t\t\tb.WriteString(newLink(\"Freeze Board\", board.GetFreezeFormURL()))\n\t\t\tb.WriteString(\"\\n\\n\")\n\t\t}\n\t}\n\n\treturn b.String()\n}\n\nfunc renderThread(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tres.Write(\"Board does not exist: \" + name)\n\t\treturn\n\t}\n\n\trawID := req.GetVar(\"thread\")\n\ttID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid thread ID: \" + rawID)\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tthread, found := board.GetThread(PostID(tID))\n\tif !found {\n\t\tres.Write(\"Thread does not exist with ID: \" + rawID)\n\t} else if thread.IsHidden() {\n\t\tres.Write(\"Thread with ID: \" + rawID + \" has been flagged as inappropriate\")\n\t} else {\n\t\tres.Write(thread.Render(req.RawPath, \"\", 5))\n\t}\n}\n\nfunc renderReply(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tres.Write(\"Board does not exist: \" + name)\n\t\treturn\n\t}\n\n\trawID := req.GetVar(\"thread\")\n\ttID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid thread ID: \" + rawID)\n\t\treturn\n\t}\n\n\trawID = req.GetVar(\"reply\")\n\trID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid reply ID: \" + rawID)\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tthread, found := board.GetThread(PostID(tID))\n\tif !found {\n\t\tres.Write(\"Thread does not exist with ID: \" + req.GetVar(\"thread\"))\n\t\treturn\n\t}\n\n\treply, found := thread.GetReply(PostID(rID))\n\tif !found {\n\t\tres.Write(\"Reply does not exist with ID: \" + rawID)\n\t\treturn\n\t}\n\n\t// Call render even for hidden replies to display children.\n\t// Original comment content will be hidden under the hood.\n\t// See: #3480\n\tres.Write(reply.RenderInner())\n}\n\nfunc renderMembers(res *mux.ResponseWriter, req *mux.Request) {\n\tboardID := BoardID(0)\n\tperms := gPerms\n\tname := req.GetVar(\"board\")\n\tif name != \"\" {\n\t\tv, found := gBoardsByName.Get(name)\n\t\tif !found {\n\t\t\tres.Write(\"### Board not found\")\n\t\t\treturn\n\t\t}\n\n\t\tboard := v.(*Board)\n\t\tboardID = board.GetID()\n\t\tperms = board.perms\n\n\t\tres.Write(\"# \" + board.GetName() + \" Members\\n\")\n\t\tres.Write(\"### These are the board members\\n\\n\")\n\t} else {\n\t\tres.Write(\"# Admin Users\\n\")\n\t\tres.Write(\"### These are the admin users of the realm\\n\\n\")\n\t}\n\n\t// Create a pager with a small page size to reduce\n\t// the number of username lookups per page.\n\tp, err := pager.New(req.RawPath, perms.UsersCount(), pager.WithPageSize(5))\n\tif err != nil {\n\t\tres.Write(err.Error())\n\t\treturn\n\t}\n\n\tres.Write(\"| Member | Role | Actions |\\n| --- | --- | --- |\\n\")\n\tperms.IterateUsers(p.Offset(), p.PageSize(), func(u User) bool {\n\t\tres.Write(\"| \")\n\t\tres.Write(newUserLink(u.Address))\n\t\tres.Write(\" | \")\n\t\tres.Write(rolesToString(u.Roles))\n\t\tres.Write(\" | \")\n\t\tres.Write(newLink(\"remove\", txlink.Call(\n\t\t\t\"RemoveMember\",\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", u.Address.String(),\n\t\t)))\n\t\tres.Write(\" • \")\n\t\tres.Write(newLink(\"change role\", txlink.Call(\n\t\t\t\"ChangeMemberRole\",\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", u.Address.String(),\n\t\t\t\"role\", \"\",\n\t\t)))\n\t\tres.Write(\" |\\n\")\n\t\treturn false\n\t})\n\n\tif p.HasPages() {\n\t\tres.Write(\"\\n\\n\" + pager.Picker(p))\n\t}\n}\n\nfunc renderNotice(res *mux.ResponseWriter) {\n\tif gNotice == \"\" {\n\t\treturn\n\t}\n\n\tres.Write(\"\u003e \")\n\tres.Write(gNotice)\n\tres.Write(\"\\n\\n\")\n}\n\nfunc rolesToString(roles []Role) string {\n\tif len(roles) == 0 {\n\t\treturn \"\"\n\t}\n\n\tnames := make([]string, len(roles))\n\tfor i, r := range roles {\n\t\tnames[i] = string(r)\n\t}\n\treturn strings.Join(names, \", \")\n}\n\nfunc menuURL(name string) string {\n\t// TODO: Menu URL works because no other GET arguments are being used\n\treturn \"?menu=\" + name\n}\n\nfunc getCurrentMenu(rawURL string) string {\n\t_, rawQuery, found := strings.Cut(rawURL, \"?\")\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\tquery, _ := url.ParseQuery(rawQuery)\n\treturn query.Get(\"menu\")\n}\n"},{"name":"z_0_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tbid := boards2.CreateBoard(\"test123\")\n\tprintln(\"ID =\", bid)\n}\n\n// Output:\n// ID = 1\n"},{"name":"z_0_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"\")\n}\n\n// Error:\n// board name is empty\n"},{"name":"z_0_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tboardName = \"test123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(boardName)\n}\n\nfunc main() {\n\tboards2.CreateBoard(boardName)\n}\n\n// Error:\n// board already exists\n"},{"name":"z_0_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n}\n\n// Error:\n// addresses are not allowed as board name\n"},{"name":"z_0_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"gnoland\")\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_0_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar name = strings.Repeat(\"X\", boards2.MaxBoardNameLength+1)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(name)\n}\n\n// Error:\n// board name is too long, maximum allowed is 50 characters\n"},{"name":"z_0_h_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname   = \"test123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\tboards2.InviteMember(0, member, boards2.RoleOwner) // Operate on realm DAO members instead of individual boards\n\ttesting.SetOriginCaller(member)\n\tusers.Register(name)\n}\n\nfunc main() {\n\tbid := boards2.CreateBoard(name)\n\tprintln(\"ID =\", bid)\n}\n\n// Output:\n// ID = 1\n"},{"name":"z_0_i_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"test123\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_10_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\n\t// Invite a moderator to the new board\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\n\t// Create a new thread as a moderator\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_10_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.FlagThread(404, 1, \"\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_10_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Make the next call as an uninvited user\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_10_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, 404, \"\")\n}\n\n// Error:\n// post doesn't exist\n"},{"name":"z_10_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// item flag count threshold exceeded: 1\n"},{"name":"z_10_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to flag threads\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\ttesting.SetOriginCaller(moderator)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_10_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with a specific flagging threshold\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Invite a moderator to the new board\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\n\t// Create a new thread and flag it as a moderator\n\ttesting.SetOriginCaller(moderator)\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// item has been already flagged by a current user\n"},{"name":"z_10_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with flagging threshold greater than 1\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Create a thread so the realm owner can flag and hide it with a single flag\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\t// Also freeze board to make sure that realm owner can still flag the thread\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_11_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, body)\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_11_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"\", \"bar\")\n}\n\n// Error:\n// title is empty\n"},{"name":"z_11_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_11_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.EditThread(404, 1, \"Foo\", \"bar\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_11_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_11_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"bar\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_11_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to edit threads\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, body)\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_11_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid   boards2.BoardID\n\tpid   boards2.PostID\n\ttitle = strings.Repeat(\"X\", boards2.MaxThreadTitleLength+1)\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, \"bar\")\n}\n\n// Error:\n// thread title is too long, maximum allowed is 100 characters\n"},{"name":"z_12_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbody  = \"Test reply\"\n\tpath  = \"test-board/1/2\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, body)\n\n\t// Render content must contain the modified reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \"+body+\"\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_12_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbody  = \"Test reply\"\n\tpath  = \"test-board/1/2\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Create a reply and a sub reply\n\tparentRID := boards2.CreateReply(bid, tid, 0, \"Parent\")\n\trid = boards2.CreateReply(bid, tid, parentRID, \"Child\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, body)\n\n\t// Render content must contain the modified reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e \"+body+\"\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_12_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.EditReply(404, 1, 0, \"body\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_12_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, 404, 0, \"body\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_12_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, 404, \"body\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_12_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"new body\")\n}\n\n// Error:\n// only the reply creator is allowed to edit it\n"},{"name":"z_12_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Flag the reply so it's hidden\n\tboards2.FlagReply(bid, tid, rid, \"reason\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"body\")\n}\n\n// Error:\n// reply is hidden\n"},{"name":"z_12_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_13_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_13_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.FlagReply(404, 1, 1, \"\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_13_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, 404, 1, \"\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_13_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, 404, \"\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_13_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// item flag count threshold exceeded: 1\n"},{"name":"z_13_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_13_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Invite a member using a role with permission to flag replies\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\ttesting.SetOriginCaller(moderator)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_13_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with flagging threshold greater than 1\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Create a reply so the realm owner can flag and hide it with a single flag\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\t// Also freeze board to make sure that realm owner can still flag the reply\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\"))\n}\n\n// Output:\n// true\n"},{"name":"z_14_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Ensure reply doesn't exist\n\tprintln(boards2.Render(\"test-board/1/2\"))\n}\n\n// Output:\n// Reply does not exist with ID: 2\n"},{"name":"z_14_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.DeleteReply(404, 1, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_14_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, 404, 1)\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_14_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, 404)\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_14_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\trid = boards2.CreateReply(bid, tid, 0, \"Parent\")\n\tboards2.CreateReply(bid, tid, rid, \"Child reply\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Render content must contain the releted message instead of reply's body\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e This reply has been deleted\\n\"))\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e Child reply\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_14_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Call using a user that has not permission to delete replies\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_14_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Invite a member using a role with permission to delete replies\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(member)\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Ensure reply doesn't exist\n\tprintln(boards2.Render(\"test-board/1/2\"))\n}\n\n// Output:\n// Reply does not exist with ID: 2\n"},{"name":"z_15_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"Foo\", \"bar\")\n\tboards2.FlagThread(srcBID, srcTID, \"idk\")\n}\n\nfunc main() {\n\t// Repost should fail if source thread is flagged\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_15_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID = 1024\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n}\n\nfunc main() {\n\t// Repost should fail if source thread doesn't exist\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// thread does not exist with ID: 1024\n"},{"name":"z_15_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"Foo\", \"bar\")\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_15_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/ufmt\"\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"original title\", \"original text\")\n}\n\nfunc main() {\n\t// Success case\n\ttID := boards2.CreateRepost(srcBID, srcTID, \"repost title\", \"repost text\", dstBID)\n\tp := ufmt.Sprintf(\"dst-board/%s\", tID)\n\tout := boards2.Render(p)\n\n\tprintln(strings.Contains(out, \"original text\"))\n\tprintln(strings.Contains(out, \"repost title\"))\n\tprintln(strings.Contains(out, \"repost text\"))\n}\n\n// Output:\n// true\n// true\n// true\n"},{"name":"z_15_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Create a board with a thread\n\torigBID := boards2.CreateBoard(\"origin-board\")\n\torigTID := boards2.CreateThread(origBID, \"title\", \"text\")\n\n\t// Create a second board and repost a thread using an empty title\n\tsrcBID = boards2.CreateBoard(\"source-board\")\n\tsrcTID = boards2.CreateRepost(origBID, origTID, \"original title\", \"original text\", srcBID)\n\n\t// Create a third board to try reposting the repost\n\tdstBID = boards2.CreateBoard(\"destination-board\")\n}\n\nfunc main() {\n\tboards2.CreateRepost(srcBID, srcTID, \"repost title\", \"repost text\", dstBID)\n}\n\n// Error:\n// reposting a thread that is a repost is not allowed\n"},{"name":"z_16_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(bid, 4)\n\n\t// Ensure that flagging threshold changed\n\tprintln(boards2.GetFlaggingThreshold(bid))\n}\n\n// Output:\n// 4\n"},{"name":"z_16_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nconst bid boards2.BoardID = 404\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(bid, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_16_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(1, 0)\n}\n\n// Error:\n// invalid flagging threshold\n"},{"name":"z_17_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.FreezeBoard(bid)\n\tprintln(boards2.IsBoardFrozen(bid))\n}\n\n// Output:\n// true\n"},{"name":"z_17_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FreezeBoard(bid)\n}\n\n// Error:\n// board is frozen\n"},{"name":"z_18_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbid   = boards2.BoardID(0)                                      // Operate on realm instead of individual boards\n)\n\nvar perms boards2.Permissions\n\nfunc init() {\n\t// Create a new permissions instance without users\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n\n\t// Owner that setted new permissions is not a member of the new permissions\n\tprintln(boards2.IsMember(bid, owner))\n}\n\n// Output:\n// false\n"},{"name":"z_18_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\tuser = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid  = boards2.BoardID(0)                                      // Operate on realm instead of individual boards\n)\n\nvar perms boards2.Permissions\n\nfunc init() {\n\t// Create a new permissions instance\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_18_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tperms boards2.Permissions\n\tbid   boards2.BoardID\n)\n\nfunc init() {\n\t// Create a new permissions instance without users\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foobar\")\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n\n\t// Owner that setted new board permissions is not a member of the new permissions\n\tprintln(boards2.IsMember(bid, owner))\n}\n\n// Output:\n// false\n"},{"name":"z_19_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\t// Attempt to freeze a thread on frozen board\n\tboards2.FreezeThread(bid, tid)\n}\n\n// Error:\n// board is frozen\n"},{"name":"z_19_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// Attempt to freeze a frozen thread\n\tboards2.FreezeThread(bid, tid)\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_19_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FreezeThread(bid, tid)\n\tprintln(boards2.IsThreadFrozen(bid, tid))\n}\n\n// Output:\n// true\n"},{"name":"z_1_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// true\n"},{"name":"z_1_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tuser  = std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\t// Add an admin member\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\t// Next call will be done by the admin member\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, boards2.RoleOwner)\n}\n\n// Error:\n// only owners are allowed to invite other owners\n"},{"name":"z_1_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tuser  = std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n\trole  = boards2.RoleAdmin\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\t// Add an admin member\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\t// Next call will be done by the admin member\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// true\n"},{"name":"z_1_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(0, user, boards2.Role(\"foobar\")) // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// invalid role: foobar\n"},{"name":"z_1_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\trole  = boards2.RoleOwner\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foo123\") // Operate on board DAO members\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(0, user, role)) // Operate on realm DAO\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_1_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, user, role)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n}\n\n// Error:\n// user already exists\n"},{"name":"z_1_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(0, \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", boards2.RoleGuest)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_20_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// Attempt to freeze a reply on frozen thread\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_20_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\nfunc main() {\n\t// Attempt to freeze already frozen reply\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\n// Error:\n// reply is frozen\n"},{"name":"z_20_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n}\n\nfunc main() {\n\t// reply frozen\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.FreezeReply(bid, tid, rid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeReply(bid, tid, rid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\n\t// thread frozen\n\tboards2.FreezeThread(bid, tid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeThread(bid, tid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\n\t// board frozen\n\tboards2.FreezeBoard(bid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeBoard(bid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n}\n\n// Output:\n// false\n// true\n// false\n// true\n// false\n// true\n// false\n"},{"name":"z_20_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n}\n\nfunc main() {\n\t// unfrozen thread - should work\n\tr2 := boards2.CreateReply(bid, tid, rid, \"child 1\")\n\n\t// frozen thread - can't reply\n\tboards2.FreezeReply(bid, tid, rid)\n\tboards2.CreateReply(bid, tid, r2, \"child 2\")\n}\n\n// Error:\n// reply is frozen\n"},{"name":"z_21_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"This is a test realm message\")\n\n\t// Render content must contain the message\n\tcontent := boards2.Render(\"\")\n\tprintln(strings.HasPrefix(content, \"\u003e This is a test realm message\\n\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_21_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Set an initial message so it can be cleared\n\tboards2.SetRealmNotice(\"This is a test realm message\")\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"\")\n\n\t// Render content must contain the message\n\tcontent := boards2.Render(\"\")\n\tprintln(strings.HasPrefix(content, \"\u003e This is a test realm message\\n\\n\"))\n\tprintln(strings.HasPrefix(content, \"# Boards\"))\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_21_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\t// Call realm with a user that has not permission to set realm notice\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"Foo\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_22_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(false)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// false\n"},{"name":"z_22_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.LockRealm(false)\n}\n\nfunc main() {\n\t// Should fail because realm is already locked\n\tboards2.LockRealm(false)\n}\n\n// Error:\n// realm is locked\n"},{"name":"z_22_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\t// Call realm with a user that has not permission to lock the realm\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(false)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_22_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(true)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_22_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.LockRealm(true)\n}\n\nfunc main() {\n\t// Should fail because realm is already locked\n\tboards2.LockRealm(true)\n}\n\n// Error:\n// realm and members are locked\n"},{"name":"z_22_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Lock the realm without locking realm members\n\tboards2.LockRealm(false)\n}\n\nfunc main() {\n\tboards2.LockRealm(true)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_23_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleOwner)\n\tboards2.InviteMember(bid, \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\", boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.IterateRealmMembers(0, func(u boards2.User) bool {\n\t\tprintln(u.Address, string(u.Roles[0]))\n\t\treturn false\n\t})\n}\n\n// Output:\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj owner\n// g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5 admin\n"},{"name":"z_24_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid := boards2.CreateBoard(\"test123\")\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleAdmin)\n\n\tbid = boards2.CreateBoard(\"foo123\")\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleOwner)\n\tboards2.InviteMember(bid, \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\", boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.IterateBoards(0, func(b boards2.ReadonlyBoard) bool {\n\t\tprintln(b.ID().String())\n\t\tprintln(b.Name())\n\n\t\tb.IterateMembers(0, b.MembersCount(), func(u boards2.User) bool {\n\t\t\tprintln(u.Address, string(u.Roles[0]))\n\t\t\treturn false\n\t\t})\n\t})\n}\n\n// Output:\n// 1\n// test123\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj admin\n// 2\n// foo123\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj owner\n// g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5 admin\n"},{"name":"z_2_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tpath    = \"test-board/1/2\"\n\tcomment = \"Test comment\"\n)\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\trid := boards2.CreateReply(bid, tid, 0, comment)\n\n\t// Ensure that returned ID is right\n\tprintln(rid == 2)\n\n\t// Render content must contain the reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \"+comment+\"\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_2_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateReply(404, 1, 0, \"comment\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_2_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, 404, 0, \"comment\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_2_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 404, \"comment\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_2_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Hide thread by flagging it so reply can't be submitted\n\tboards2.FlagThread(bid, tid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"Test reply\")\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_2_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply1\")\n\n\t// Hide thread by flagging it so reply of a reply can't be submitted\n\tboards2.FlagThread(bid, tid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"reply1.1\")\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_2_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"thread\", \"thread\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply1\")\n\n\t// Hide reply by flagging it so sub reply can't be submitted\n\tboards2.FlagReply(bid, tid, rid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"reply1.1\")\n}\n\n// Error:\n// replying to a hidden or frozen reply is not allowed\n"},{"name":"z_2_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"Test reply\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_2_i_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_2_j_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tpath    = \"test-board/1/2\"\n\tcomment = \"Second comment\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"First comment\")\n}\n\nfunc main() {\n\trid2 := boards2.CreateReply(bid, tid, rid, comment)\n\n\t// Ensure that returned ID is right\n\tprintln(rid2 == 3)\n\n\t// Render content must contain the sub-reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e \"+comment+\"\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_2_k_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tcomment = \"Second comment\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"Parent comment\")\n\n\t// Flag parent post so it's hidden\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"Sub comment\")\n}\n\n// Error:\n// replying to a hidden or frozen reply is not allowed\n"},{"name":"z_2_l_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// cannot reply to a frozen thread\n\tboards2.CreateReply(bid, tid, 0, \"foobar\")\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_2_m_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, strings.Repeat(\"x\", boards2.MaxReplyLength+1))\n}\n\n// Error:\n// reply is too long, maximum allowed is 300 characters\n"},{"name":"z_2_n_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"\u003e Markdown blockquote\")\n}\n\n// Error:\n// using Markdown headings, blockquotes or horizontal lines is not allowed in replies\n"},{"name":"z_3_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname    = \"foo123\"\n\tnewName = \"bar123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n\n\t// Ensure board is renamed by the default board owner\n\tbid2, _ := boards2.GetBoardIDFromName(newName)\n\tprintln(\"IDs match =\", bid == bid2)\n}\n\n// Output:\n// IDs match = true\n"},{"name":"z_3_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"\")\n}\n\n// Error:\n// board name is empty\n"},{"name":"z_3_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, name)\n}\n\n// Error:\n// board already exists\n"},{"name":"z_3_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RenameBoard(\"unexisting\", \"foo\")\n}\n\n// Error:\n// board does not exist with name: unexisting\n"},{"name":"z_3_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n}\n\n// Error:\n// addresses are not allowed as board name\n"},{"name":"z_3_f_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n\n\t// Ensure board is renamed by another board owner\n\tbid2, _ := boards2.GetBoardIDFromName(newName)\n\tprintln(\"IDs match =\", bid == bid2)\n}\n\n// Output:\n// IDs match = true\n"},{"name":"z_3_g_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tmember2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n\n\t// Invite a new member that doesn't own the user that matches the new board name\n\tboards2.InviteMember(bid, member2, boards2.RoleOwner)\n\ttesting.SetOriginCaller(member2)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_3_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"short\")\n}\n\n// Error:\n// the minimum allowed board name length is 6 characters\n"},{"name":"z_3_i_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tmember2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n\n\t// Invite a new member that doesn't own the user that matches the new board name\n\tboards2.InviteMember(bid, member2, boards2.RoleOwner)\n\ttesting.SetOriginCaller(member2)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_3_j_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"barbaz\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_4_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tnewRole = boards2.RoleOwner\n\tbid     = boards2.BoardID(0) // Operate on realm DAO instead of individual boards\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole)\n\n\t// Ensure that new role has been changed\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tnewRole = boards2.RoleAdmin\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foo123\")\n\tboards2.InviteMember(bid, member, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole)\n\n\t// Ensure that new role has been changed\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\towner2 = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tadmin  = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, owner2, boards2.RoleOwner)\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, owner2, boards2.RoleAdmin)\n}\n\n// Error:\n// admins are not allowed to remove the Owner role\n"},{"name":"z_4_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tadmin2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\tboards2.InviteMember(bid, admin2, boards2.RoleAdmin)\n\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, admin2, boards2.RoleOwner)\n}\n\n// Error:\n// admins are not allowed to promote members to Owner\n"},{"name":"z_4_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid     = boards2.BoardID(0)                                      // Operate on realm DAO members instead of individual boards\n\tnewRole = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole) // Owner can promote other members to Owner\n\n\t// Ensure that new role has been changed to owner\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, admin, boards2.Role(\"foo\"))\n}\n\n// Error:\n// invalid role: foo\n"},{"name":"z_4_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, \"invalid address\", boards2.RoleModerator)\n}\n\n// Error:\n// invalid member address\n"},{"name":"z_4_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(0, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleGuest)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_5_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, user, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.RemoveMember(bid, user)\n\n\t// Check that user is not a member\n\tprintln(boards2.IsMember(bid, user))\n}\n\n// Output:\n// false\n"},{"name":"z_5_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RemoveMember(0, \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\") // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_5_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RemoveMember(0, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// member not found\n"},{"name":"z_6_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\trole   = boards2.RoleGuest\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, member, role)\n}\n\nfunc main() {\n\tprintln(boards2.HasMemberRole(bid, member, role))\n\tprintln(boards2.HasMemberRole(bid, member, \"invalid\"))\n\tprintln(boards2.IsMember(bid, member))\n}\n\n// Output:\n// true\n// false\n// true\n"},{"name":"z_6_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleGuest\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tprintln(boards2.HasMemberRole(bid, user, role))\n\tprintln(boards2.IsMember(bid, user))\n}\n\n// Output:\n// false\n// false\n"},{"name":"z_7_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"test123\"\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(name)\n}\n\nfunc main() {\n\tbid2, found := boards2.GetBoardIDFromName(name)\n\tprintln(found)\n\tprintln(bid2 == bid)\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_7_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tbid, found := boards2.GetBoardIDFromName(\"foobar\")\n\tprintln(found)\n\tprintln(bid == 0)\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_8_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\ttid := boards2.CreateThread(bid, title, body)\n\n\t// Ensure that returned ID is right\n\tprintln(tid == 1)\n\n\t// Thread should not be frozen by default\n\tprintln(boards2.IsThreadFrozen(bid, tid))\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// false\n// true\n// true\n"},{"name":"z_8_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateThread(404, \"Foo\", \"bar\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_8_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_8_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"\", \"bar\")\n}\n\n// Error:\n// title is empty\n"},{"name":"z_8_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_9_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, title, body)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n\n\t// Ensure thread doesn't exist\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread does not exist with ID: 1\n"},{"name":"z_9_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.DeleteThread(404, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_9_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, 404)\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_9_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Call using a user that has not permission to delete threads\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_9_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to delete threads\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(member)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n\n\t// Ensure thread doesn't exist\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread does not exist with ID: 1\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"90000000","gas_fee":"900000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"gnJ8ujjv5sZ2BRs9+o9H1pwPssdx7HMIuVFxglK29nscd2/Mvno1njD62W34l0HDylMaZi0ZQvuEoc3UvJoVDg=="}],"memo":""},"metadata":{"timestamp":"1743761702"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"RemoveMember","args":["0","g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"M1Ymz+sc6Ah+cXI4w3jPs42+VfeMM0rvUiuCYRi7ijSH0O+hFlo8PddM/tKP6hFE9KvxVcUAHEJ4dCcUPc0sDg=="}],"memo":""},"metadata":{"timestamp":"1743761807"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["EmptyWithManyMembers"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"FI9PELceRDvc7jgz/0a956F+E99yblupgpWGITLrjNPUIfmFUcd/OgvwZExSVtAWQzKfzxiRcbsp5VKl71asAQ=="}],"memo":""},"metadata":{"timestamp":"1743761888"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","owner"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"WHEC5gokamcHxoFgivNuo7lCfbXYvvngVlVBW6j0/cnhPieildjfDrP4lNjSp1Ranjszj/OW+zcujYuYoRCvDw=="}],"memo":""},"metadata":{"timestamp":"1743761893"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1e5hud66rs7ye4zgeqmqvwfhurs2mnf408hdqcl","owner"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"eP+1pHZjo0w5PPiytl+8J2OS6lPW0HJM6zPyqyVSM5QJPtYwdc1KZCUUlaBUuEAgxPnGhRHPK6DL/p1VKeutBg=="}],"memo":""},"metadata":{"timestamp":"1743761898"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5","admin"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"wWLEIyJ/NFW/EE0dCOOJJEjb9W9IoQJ6r9Gw5HNoCSiC/akWB+iX7XFUJ0b8iRgZC+RRIz3HfYrIJYvEckLBBw=="}],"memo":""},"metadata":{"timestamp":"1743761903"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk","moderator"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"4YYuEkQbudHlbHJiH94uRCP135S8wY4+vepmsJrOteRx1BxQDS8dJ6ULluVv+mzpjGNeLWsT8+A3FspSE2WhAg=="}],"memo":""},"metadata":{"timestamp":"1743761908"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1ym6zxff3xq7wfldcs3uyu7x7z40gstggcx8zdj","moderator"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"TfPGfEyK4rUTpc0BOknLykfMc+fCvWfnvnlV4Q+OniEKgKGnthDfeAL4COKyp5l1TYLIYYIvXLfj7i3Yz3BMAA=="}],"memo":""},"metadata":{"timestamp":"1743761913"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["TheNumber42"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"/E9jvQEjrmf8TQpRZuz2VPfGyh9RR/l2yXq6jtG9v9JWgxSLKgF13GzLqQk2/9kvJLWY8TCJwmb9Ij/VnYErAw=="}],"memo":""},"metadata":{"timestamp":"1743761918"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"TGWslXzdNOGeWEgsuoacsYO/12F1Oc2+uUIPWCWsZTU04agRN2Q5spfDaMTWqyLOJmTXD2ZuCTaouslHvlqiDQ=="}],"memo":""},"metadata":{"timestamp":"1743761918"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["2","What's your take on it\\?","Seen in many places, unknown to many"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"dutGYC9pHpI0TjDmBHh0AZDK5leriKaeJWTpdAC00p/Ik+5C3iUqpdNsodv9Kjf+xGNCO2q+v0xUCIrdoX6lCQ=="}],"memo":""},"metadata":{"timestamp":"1743761923"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["2","1","0","What do you mean\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"64qfuiDCsCiKcpM9YTZOWgcLxDI6sBCQyAA1JazuLZSwJEG4mow45VKUDu5H/wNQHovJw1lYCjuZxh1USTFoCQ=="}],"memo":""},"metadata":{"timestamp":"1743761928"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["2","1","0","よんじゅうに\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"b7YvD4Fwp8Uuo8oZrAe/vEM/PwFgB72a36CdNFOiy1qmqLSy7kcgMJ2mKFlS8XFgEqLdWTih3T0LI+HwKTUUDA=="}],"memo":""},"metadata":{"timestamp":"1743761933"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["2","1","2","Cuarenta y dos\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"RUPColJok5Mll5yAzY5YSZJTksOLMTuUCjF9Deh9fYaYpM8aYQ8OZ1gDtaUHgXEqHGNWf20J3XJn+38gYulGBw=="}],"memo":""},"metadata":{"timestamp":"1743761938"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["ThreadsExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lo6RAzFECaWg4V4ufdm0iyGUk1BECuoH2Z50IasYRO+Le36JMVqV244ybdgY9aKEUSMTt6TXKHBwLFXm8kHLCA=="}],"memo":""},"metadata":{"timestamp":"1743761943"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Seventh","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"JNLUtfHuMzHuKihYeo6YP+eeI83Kf1tqiLm3P3Ut3j5HLAHrUTzRhPCOZWfj02kFDMXFQCxhopDjH6IHpJc+Cw=="}],"memo":""},"metadata":{"timestamp":"1743761948"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Sixth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"wChF1AOQSLiH70+nfqr724NPS6ncM+9/MUI7snB+9oo90qdZTLpykRb2Vw3M4QlXaklKpyZa6e68JxwAbcAGDg=="}],"memo":""},"metadata":{"timestamp":"1743761953"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"TGWslXzdNOGeWEgsuoacsYO/12F1Oc2+uUIPWCWsZTU04agRN2Q5spfDaMTWqyLOJmTXD2ZuCTaouslHvlqiDQ=="}],"memo":""},"metadata":{"timestamp":"1743761953"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Fifth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ce7gZCweZZsVveSrctB1MFzQy+A42yVXKrb6eE1AQ6LC9xNYX7u/NMZ8jlBf7CY9bVKQjizmAGn4d4VS/c8QBw=="}],"memo":""},"metadata":{"timestamp":"1743761958"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Fourth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ONK458F4olsd1viauM8ltT9cChS9f0Cjsr0yddI+zD82FY0z66eHTEChizTBJuSTqobwR9IOy2RBYRIOd2b7BQ=="}],"memo":""},"metadata":{"timestamp":"1743761963"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Third","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"HkvgZ9qbjUvfdvPVhZtC4hZ2Moq/60EySnKPjwIIF0hMcOaX2Vp0a4/Px1TV9OlPP947BCdiGCgMs5VrclIxAQ=="}],"memo":""},"metadata":{"timestamp":"1743761968"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Second","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Vlh9vrbUPcyT82ggDxKdPf2YP15Qeq8Rxi7VdKEonEqzIIBDpE1GeEC46jDLwPjCjh0/lZrVoO/wiPNOtgqNAg=="}],"memo":""},"metadata":{"timestamp":"1743761973"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","First with many Replies","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"C23wmPhcRk0+N1r9uJCLooLumVO5oKbFXSPkDA28FL5YL7RnG+n3egMDQ+5ORci60kt/acy9YeLBemIG1nORCA=="}],"memo":""},"metadata":{"timestamp":"1743761978"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","First"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"+bv+0B0W1C77jLnUKUYosrUGGx7dqRtNnUCQUkj+NXbtJkRzp1em5hb4mzUKXe8/LOJCU6LaMk4RXkXMSeKEBw=="}],"memo":""},"metadata":{"timestamp":"1743761983"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","8","Sub First"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"SyRqCIAtRugUUjcvZHnDpM+xNHYCKhuaFjvAl/WkyyAmaox8S1iNPrEu440qyXAIycMTxKE1Okd7K4Xfvl5uBw=="}],"memo":""},"metadata":{"timestamp":"1743761988"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Second"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"wXngkn3sb9dOjedC5epIdtAWZFMh9tlfLVEQ+6JS/bWKXBSZuygmv30MZL+NpndHNWYOVQ9dY4D2vFJt4f+KCg=="}],"memo":""},"metadata":{"timestamp":"1743761993"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Third"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"/aLvz+Ck1qtC4FYDzN+DNw9kyCU/yHO2h9SGgQDwKPxkcFrJ4roPx/ijQMduenXk1zQWGjhzQhFL3ZLoHOIVBw=="}],"memo":""},"metadata":{"timestamp":"1743761998"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Fourth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"0VUVSqkKEyCdatSQqul+Dtrco5fyQCyqVUewzQwL/iM4OsBnKi2Xm/hddfPWVP4ikssl8M9bqbOg/wm6VtUMCQ=="}],"memo":""},"metadata":{"timestamp":"1743762003"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Fifth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Y4As5R5Ku9yC4l9p2KcKt28Mv4E781m0+8JZltuF+VESbxUO4bvoHxYFrXFF+4cJq3nlOKYfuIZeRGR8T15zBw=="}],"memo":""},"metadata":{"timestamp":"1743762008"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Sixth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"2sYJlBf3hnyFOYvceFtJHAZS4iV72AXWcxvhmsDYHuuJYAnmqo8Tqohbzw9Apz8zaV4G68hv0hObin8zYEJjDg=="}],"memo":""},"metadata":{"timestamp":"1743762013"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Seventh"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"bciLzjH0yqYkv0N/DROgJ6fKoTlntsSacclOal1SbTkPhbwKx1fzUZdzFUX2pqpUYbWCHfPqejELC3f3JqiHDw=="}],"memo":""},"metadata":{"timestamp":"1743762018"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Eigth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"T/9W3ONdAEJebO4OfnBAsx5KuEzmy1SRJlYGZbDbhEBMm9weVvcJsdyhsjDv43yzvNMi5TPvAEypAysM5SFUDg=="}],"memo":""},"metadata":{"timestamp":"1743762023"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Ninth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lBww/JJY5jAe6Yp9d7bMzTYzEyXLw8CwhJu1MGfEVeH6NBNVKQQChZ4Bw6+6Xf/U6nXGX3fZBZlgU23pYfZRDQ=="}],"memo":""},"metadata":{"timestamp":"1743762028"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Tenth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"FNOV19k/KZcAZiLnnj9dL5I/Z2H9uy78q4hEfqCyQorP4IQWBadQ33lb9v0UTysAEYdN5SFH9twXLa3hwt5uCg=="}],"memo":""},"metadata":{"timestamp":"1743762033"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Eleventh"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"c5rsN2ShhdgGV/QFkgjPYwoFz+nZzTN5D6O5Sc34hVw/65a/AYJ9pFNN7cgGrrhM92F/eyc+o1bogiTe3jG2AQ=="}],"memo":""},"metadata":{"timestamp":"1743762039"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["ReadOnlyExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Uh4cCbvD5LjfujyapBeI8cpVr878AQz9fulL4RtVqD9WkM87+VJZmX1sUBrlK2c/aiSWL3IvXvi4AaKDW3RTCQ=="}],"memo":""},"metadata":{"timestamp":"1743762044"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["4","Example Thread","This thread shouldn't be writable"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"SuviHYxOJW6qzH2Vs2CNmf/BmTzkEEw4DWruYbAXI93071HjJr3ihEOa9CK+FUxqwhbk9WUOUqxahUk+X8+pDg=="}],"memo":""},"metadata":{"timestamp":"1743762049"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"FreezeBoard","args":["4"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"oSE+5FxIYQscnX45WWpb9aCXE1ggMq7sB5bPS3Xa0qgatoBqbmocmY+Ysl/BcizTbi8h+xPko2HCkUVdGuqpCg=="}],"memo":""},"metadata":{"timestamp":"1743762054"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["RepostExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"uzJpZh/vVC+97Rl3m5WqNaQ9TlsBjEalM2YvZv7nIyALNvXTSdsS4vsEDq6aiTrSmV4RbA5I9L2oL0ha+ooHCQ=="}],"memo":""},"metadata":{"timestamp":"1743762059"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"TGWslXzdNOGeWEgsuoacsYO/12F1Oc2+uUIPWCWsZTU04agRN2Q5spfDaMTWqyLOJmTXD2ZuCTaouslHvlqiDQ=="}],"memo":""},"metadata":{"timestamp":"1743762059"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateRepost","args":["2","1","Custom repost title","Custom repost body","5"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tS/qoqaOeO0EBIZEucJtutazkgQig4hpfxYWpDYmZxIoMUIeB0jDOQabz2S9Z+WWoWeFima9iBuwByLUrN40BA=="}],"memo":""},"metadata":{"timestamp":"1743762064"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"SetRealmNotice","args":["A new [version](https://gno.land/r/devx000/gnoland/boards2/v1rc2) is available which fixes a couple of issues and explores a UI which is is more in line with classic Reddit"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"7gTJdYty5Cv0DaDjSATERd3qoXButVcEXkeRKjVLKhJuCeB00j+ypjNfua/NeoR5qP0TW9+o9mWkGlMSRxjqDw=="}],"memo":""},"metadata":{"timestamp":"1743762325"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"SetRealmNotice","args":["A new boards [version](https://gno.land/r/devx000/gnoland/boards2/v1rc2) is available which fixes a couple of issues and explores a UI which is is more in line with classic Reddit"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"mPl6StBd85ySY9dRxqROvZ4XNubqqHLJm14j2LJrXgaXL27pRGYD/L+Itj6VVd7MIDMikKTzgLuG0mp9wfadDA=="}],"memo":""},"metadata":{"timestamp":"1743762441"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"SetRealmNotice","args":["A new boards [version](https://gno.land/r/devx000/gnoland/boards2/v1rc2) is available which fixes a couple of issues and explores a UI which is more in line with classic Reddit"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"5KkcKraUgNGIZFxBPAPUOqeuhZI20b5XyOcQQ49vwiQ7VJGv3zW7mnoNO7OU/YpJ+3l0znz47MxvFgfFQeDZDQ=="}],"memo":""},"metadata":{"timestamp":"1743762466"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15dz69sch7fkhc9gk57hpe4qea77thmy20apu9x","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"VOB7lochh6szp7fzpzTlve6EpprFWCee+T8Rv304uBhG3j7Z/rMSIFJnnC2PDHM2jw0ZTSqNjxo3oi43j/C+Cg=="}],"memo":""},"metadata":{"timestamp":"1743762511"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"fyl8ho7k6wBs1e/2oviUBtw+6XXKqL1asv2ShDh8NaiJk7BtnlZvogzcPAlQzk+/5HE00Nmuoup+l34r/McCCw=="}],"memo":""},"metadata":{"timestamp":"1743762858"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"fyl8ho7k6wBs1e/2oviUBtw+6XXKqL1asv2ShDh8NaiJk7BtnlZvogzcPAlQzk+/5HE00Nmuoup+l34r/McCCw=="}],"memo":""},"metadata":{"timestamp":"1743762953"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1aykqe5ddemku5mwd3elmwtpj8jgss47xrqpag4","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"0ShwpG1mE9/t3ITmwO9tYQKM/7g2d91VFtjKBFnAddZeuhc80vDTjSU48huRm5/RlnnP6MReAD46SQidAb6LCQ=="}],"memo":""},"metadata":{"timestamp":"1743767985"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1dtuj65mgja87gh0c45pd3rt4cah0kkw9lzld4y","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"0s02zIJw9VO4+5U7asxJNnovMkCZllGQizbLOkDT1ZJF1cJfMriuy49XIzXeeweGqD0L4wVn79qxVta0Qyy2DA=="}],"memo":""},"metadata":{"timestamp":"1743768151"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"fyl8ho7k6wBs1e/2oviUBtw+6XXKqL1asv2ShDh8NaiJk7BtnlZvogzcPAlQzk+/5HE00Nmuoup+l34r/McCCw=="}],"memo":""},"metadata":{"timestamp":"1743769312"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1manfred47kzduec920z88wfr64ylksmdcedlf5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["test-manfred"]}],"fee":{"gas_wanted":"50000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"HCUoHp0ettEndXT1Lz3/G7wJjdj1G1pxJWCkmhFI7fo9Uq6mRDGDJE/1Db6YqAKE2AjoXgxMKbEkpVZ07xbpCw=="}],"memo":""},"metadata":{"timestamp":"1743774399"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1manfred47kzduec920z88wfr64ylksmdcedlf5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["6","testing testing","👋"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"G4roDfW4Y2Ja1pzuuSY72G5zebZ21n+IXBG9ke6vr9akFxpVjX5H7e5YJxTODCsNZ3ZfA4QUt4elOPQtNF02Bw=="}],"memo":""},"metadata":{"timestamp":"1743774450"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1etcvlu8zyuwnd7w0x0lcu4g2r7yzllyy62gpa5","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"9104212","gas_fee":"4742446ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"O0QUBaaAaAG0c3i/IzylrbwAguO2Q7+o9DpYEPNqPWjFASrxjR8m/tKnfShDymVNE6gTLtQoK3mwnmEkSQg2DQ=="}],"memo":""},"metadata":{"timestamp":"1743775038"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14n0zsnsk054uxwvnwmmqyrq6e87ynk5vq98qqp","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"5LWQQjwoLe8Y1J3f481pjIwxoYyYu/uQuxRAj+JV+wqq0OoWdWH+Rb6NHgEsFa1DJLCB64lHO+ZEDqN4MpLXCA=="}],"memo":""},"metadata":{"timestamp":"1743587748"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1dzzx5qwcmawqnhhd76ehkteas5v2dg42hqnd7g","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3K2do5SHBF/u+bU7RO0ezAWORlbBXqz7z7BIO97a5fyrc6H6F4G0TaLGW76PpLlC0LuiR1A3Democ+5zjm6lAA=="}],"memo":""},"metadata":{"timestamp":"1743587759"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743587914"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743587924"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743587939"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743587980"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743588120"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743588221"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743591981"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743591991"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"k3NdhAvtHHXQVwo4xqtUV2Wf/LPbAfJVUkz7DlsuixJm+UiW2XGg7bqVbDeN8iJHrZmqMizEmAERt0jz9Dt/Bg=="}],"memo":""},"metadata":{"timestamp":"1743597359"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2231690ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"SncBkDW/CDY43AvtWCXlvuzUwcLtxINLa1MkGOeuKZhnqT0oqzt6ySslxlsaUlVFrptndkUYjmOioQzL8w+GCA=="}],"memo":""},"metadata":{"timestamp":"1743597379"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"887428","gas_fee":"165039ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"uIrRR7fJCY8dnrBO8A9XpoXsWDne+2L/TUDpAnUZtO5IgJNaU3oZkqLMXsFXAbgrwz5MnjtmpOn4AmNf5HojBg=="}],"memo":""},"metadata":{"timestamp":"1743597384"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["42"]}],"fee":{"gas_wanted":"3059175","gas_fee":"6374ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"EVgaJD/bBirIuxmvT71eNu75Nr/B3/VSTfL/pKCw8ux57owH7QmEhJRYHSIPOpbpHV6Rsy/5LruQswbYYJyGBg=="}],"memo":""},"metadata":{"timestamp":"1743597409"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"RhG54kLP2B1mjRm5+dWDE67w5H2W4wA887cqXT/mfIIegiICQFnETKTioZPpXU375y6NPfxsJ0sbjLzIFV4wAw=="}],"memo":""},"metadata":{"timestamp":"1743606306"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"bD5+VR6A4q87Mpz+SX1fnhUnySq57KIZQeZ/OKM4jgY4KcTyajHtaek37W6PzP2bW3WOTTGjy1oWYyGcJCdyDQ=="}],"memo":""},"metadata":{"timestamp":"1743606668"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"35TjLg82N3/oUHSlGp6J+OAQs+4KtT4Ea4PeCKSlVgQ2YBe7jQKmPTknNtM6ZJd19QJG2IkNwferWrZWiOmNCw=="}],"memo":""},"metadata":{"timestamp":"1743607723"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"CW2IHVm66hsIOg/IGO0RpOmBedl9kD2l4Onpl+yEeYcnFzAygg/lG/5aO/L2Du4MX4uVZ/G1KnPQWpklr9uIBg=="}],"memo":""},"metadata":{"timestamp":"1743608020"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"BDBTc0acXpFrvoiTK0cVRqEaAz9n3dR8lz8o6Wve1Bmu9YJ9y+3xfZCV/hru2vszYA+6k2Q7Ix4E+PMlOMBhCg=="}],"memo":""},"metadata":{"timestamp":"1743608226"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\n","admin"]}],"fee":{"gas_wanted":"8066534","gas_fee":"16806ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"pB4ok9z2I+0NVPOhH9GhrHW+iZEixOAVZReuz9Qo/F60s9BHbTS7R/ljuIhIirVjm+sJF2qhApa94vMGoDIYCg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743608291"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"8967781","gas_fee":"18683ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"6Rj8b2dVSbJrCMY+YbX3hJp750MzerPbDcafdtyFvy7KV0bNRxwve1kD2KhbRaoSTgSKVV8Xs84N4IDevVeWBA=="}],"memo":""},"metadata":{"timestamp":"1743608301"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15dz69sch7fkhc9gk57hpe4qea77thmy20apu9x","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"VOB7lochh6szp7fzpzTlve6EpprFWCee+T8Rv304uBhG3j7Z/rMSIFJnnC2PDHM2jw0ZTSqNjxo3oi43j/C+Cg=="}],"memo":""},"metadata":{"timestamp":"1743610126"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"DeleteTodo","args":["0"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"35+iZ2GB+Y1rkeTxPCCIDr3Vv2nfLg1gcswyZPYlrYpoq3b3b8gOM18BxY8POnJVrD4sO7SZV70ul5vXDczsCQ=="}],"memo":""},"metadata":{"timestamp":"1743611628"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g14gvmle0a5hln0ct7wv857gucr7lmeust35736r","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"8o7uLt1N6UdcF18N4RsKHxeRTNJML8jkZEnCphttJ0i07RWs51buzu0JChdW37PDRHKRbBMMig3GYmyY83YpCQ=="}],"memo":""},"metadata":{"timestamp":"1743662226"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"D3gA083Wird7NyA5rVob1L6Gy3QUuvbjG1zaQb2L79OvgMKhXdGC1cH2fACIkj97R72VztbY9GuOCDRARxv3AQ=="}],"memo":""},"metadata":{"timestamp":"1743663236"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","send":"","pkg_path":"gno.land/r/demo/foo721","func":"BalanceOf","args":["g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"un0B0pU1N1y+fRVnDyvGcyRr/eMaD/o5hYlzU9l8yevkcrW6Ea8yyn9fWqVijrZYxtHMKdXN04UvcFn5Y6MfAw=="}],"memo":""},"metadata":{"timestamp":"1743663533"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","send":"","pkg_path":"gno.land/r/demo/foo721","func":"BalanceOf","args":["g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj"]}],"fee":{"gas_wanted":"10000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"dmtkLTHHHTogXTL/yEMCQ/Y1GwocZoP8/ywMfIxBuApU7XqBCLkBu4XDjK5IjoMNEDjOPimT6Roa9hV0J4KMCA=="}],"memo":""},"metadata":{"timestamp":"1743663709"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"A+lgaw1vC1kZXPXBZhZ3m2rU9L5RZFRp/WavKjgy1whmZVzVxNCDmRpblFLy2UNCb/rPVdfEdlJ7loNKIyrtCw=="}],"memo":""},"metadata":{"timestamp":"1743666971"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["42"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2233340ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"HauKKdAUVL40GDmLeJaPvPfgc3lVACObGnAweQkUS5TpD7UbPYrXw/lVOQPkMrdALYjNZXfKT0sFQIOieuePBA=="}],"memo":""},"metadata":{"timestamp":"1743666986"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["keyboard_worrier"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"+3mIPIe18QEQGSUrtvOzXd5+uNyD39Ap4ZfFWH4LTz3BZ1BjntNitygNpe/MrD7R0Qru4oCpJESEvYOoIRpaBQ=="}],"memo":""},"metadata":{"timestamp":"1743672162"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743674585"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743675500"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676274"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676415"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676425"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676440"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676450"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676465"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","send":"","pkg_path":"gno.land/r/demo/userbook","func":"SignUp","args":null}],"fee":{"gas_wanted":"3000000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Nsrr9ntlSB2d5G6NUS+t/9/x5y1aemtYDYdBmuIYreBcVsjQ4tOaULgFBDwj4eQTLA3D9bt0K2UTnXIW3mA3BA=="}],"memo":""},"metadata":{"timestamp":"1743676600"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"RemoveMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\n"]}],"fee":{"gas_wanted":"7891622","gas_fee":"16441ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"N8XRKji1icpDGOk+CeTfLnSMOIK3L1Jm5yF4d+VdLN1/eXJ7o7xbqEx820eHAlVR+AbPSV5yPCu9t2uxyEJ2Cw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743677621"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","admin"]}],"fee":{"gas_wanted":"8066714","gas_fee":"16806ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3vxQTzFmJpLVPAE/KzFfXSFBd63mlmZe06/a/Dcq8jgZv7lA9IuprE96wr20XjnAjeebgmAPGdIqa8BeGbNoAw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743677721"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"887404","gas_fee":"1849ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"oMS3JBmGucIA3MquuQDsFxpTaTgTrwUrXL1hQLiVrzRi+ahBpd0c9J9Uq2U+st5G/1+ZpTsF3rMxNE2PWsVXAA=="}],"memo":""},"metadata":{"timestamp":"1743677742"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["hello !"]}],"fee":{"gas_wanted":"887311","gas_fee":"1849ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"+my44dCnUer8cIVbHjkPaN4Fj7g3UKZEQeHmgpigl29K3H/qY5UUmV/iWs5Z0ePVysQ6u8wEYOL5zkxqrfjzCA=="}],"memo":""},"metadata":{"timestamp":"1743677757"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"LxKecWSuzORnFdZNE6NEB4ev7skwerS3aKFMjAY7+lfrgavZngIOttAmSzXKNqjI6e6PKT0Xg2AlISxfbA+IAg=="}],"memo":""},"metadata":{"timestamp":"1743680159"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"ChangeMemberRole","args":["0","g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"jZnWeopjWqv3BMn/ACWO/tD9oc/BAiLolGd06UgFswmtLEufcNudmkCIz7FlloGpkSDaTQhApfEt6VVsIh9bAg=="}],"memo":""},"metadata":{"timestamp":"1743680391"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/leon/hof","func":"Upvote","args":["gno.land%2Fr%2Fursulovic%2Fhome"]}],"fee":{"gas_wanted":"12000000","gas_fee":"1721880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Fb8QgDrjGxFwf2ga2FrmZ63CHor0upQqWYDHcx2MZoiYoYCshNXNITEwZl7tXK6vzFhhNlUSrI0Tx4xqHYUiDA=="}],"memo":""},"metadata":{"timestamp":"1743682979"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1d2hvkqhqckhzpaum09c002fesdw89qrcg9zqws","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ld8kqSH00V2d0yxuGtA7G9pdtdxeEENrLxEDCTVQPwEJS4v5myzmTo1tdm9oyYA+CpJ7Std/c6yUOVU2Ir5ZCw=="}],"memo":""},"metadata":{"timestamp":"1743683221"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1lrsrj4auaffjk538w3x2c9gzyth2m0n39zcg6d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"5MkCzkgXmPNv9f9ekdSjXDwd6Un+UJ6Ii6K0jpSxnanpBnXafmVQr/eKDtcqtlSLLXpLfikXhjBuZoyaNNi4CQ=="}],"memo":""},"metadata":{"timestamp":"1743704885"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["2","1","1","Hey hey hey"]}],"fee":{"gas_wanted":"60000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"CimPnVhuqAEqqSApH5rVTxXEorJwdjWA5876tCSCaKKSexjojIicDD4hpQUi3Xql5a6jnrAfBb17flUc3UAiBA=="}],"memo":""},"metadata":{"timestamp":"1743711043"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["aeddi"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"2q9MkSk7mZGKAOPZKlApbpwGReLud/us7X6MHoKSgOtrLFy4v5Im5tMCuAg4NEx1KSY8ci93sCrAQz16TnWfDg=="}],"memo":""},"metadata":{"timestamp":"1743711163"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g16znvp6wxupkkds8mmmtxhvmdly08xpa4rqagp3","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"DKbiJAf8yy6x2aN46wAIcPmaFZhHgqdGX/Aa8MM3bx+tVoKQVKC1io8iS49wZtWruEk218jqNk1FgbFnPSObBA=="}],"memo":""},"metadata":{"timestamp":"1743712058"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["3","This is a test","Hello World"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"gz8xLsHOlm3KgTbMLZHULlEXYNQvHHyyurwp3BMvzUhwAnA5+eUZLguT5KoB070p/NkewrIAMy4dTfX/Z6U6AQ=="}],"memo":""},"metadata":{"timestamp":"1743712737"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"1648310ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"eP3yIVSRgR6yQJOv5h2TUvb0YjsP0kTJIoy7eMM8D9qNGKzYdWBaXP/Q16E4htrelZWvxyMc/kaBi+rQA5OkAA=="}],"memo":""},"metadata":{"timestamp":"1743715914"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"o3o7DbJf6G+LcRH+iRKT89iQ6nyTEqk+iUEVL/A8s7jj1CG9MMucPjO6jNdPzxSEZM7fXFxCRHbgZSNsfae3AQ=="}],"memo":""},"metadata":{"timestamp":"1743738197"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["1","1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"mqZgvx2CCHv3dUNNSD+n88jFQYItW7klK/4Mwx+87JroMy50R6TRsXBsF7gVjtT7vsZg36bEd5Wzbhis5KdqBA=="}],"memo":""},"metadata":{"timestamp":"1743738288"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"DeletePost","args":["1","2","2"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"MUvvQiy/3718kgycKVKamoodgAQ5QNr/ANiAnT2RrbrDOnIIRyyxmXtgRzasiu8yyNtQxU6wTK5gOwcmpWSHDA=="}],"memo":""},"metadata":{"timestamp":"1743738333"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/leon/hof","func":"Upvote","args":["gno.land%2Fr%2Fursulovic%2Fhome"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"uSYEDBtBGRTDnHgogSGegpLkqL/2A1taUcjaC5qgHO/bdA/V4tXfDGUxaxDk6l5ITqpgrY0U2bbC9vbpZ9DfDA=="}],"memo":""},"metadata":{"timestamp":"1743738469"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["1","2"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lK0oWzYVhP1fdOI7rZlaTzRKO3tm0+oiR991gjivYT0WE+Su1NABU10EbfoRrMLiEyfJUdBPu7FZk+ntk6XSDw=="}],"memo":""},"metadata":{"timestamp":"1743738680"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1nnl20472w0effzcexuqmk4ntn20wg95ytygy55","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"iipZSkqtkr17A3C5DhLb5PMWpu6AFWlh+xgyr6FR2gN6JVeNGsZ7nQwVGC8PEihR4HaNaI5+kIhD2NPJ7OOfBA=="}],"memo":""},"metadata":{"timestamp":"1743739027"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1nnl20472w0effzcexuqmk4ntn20wg95ytygy55","to_address":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","amount":"9000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"uTCxprNYW1bynLRFSlbY3R2C9d1htOt7ATN03Deazmxtl+OCy2NlQyfu3P9j1N96i9ypWW30MRJOn6p0C/VEBA=="}],"memo":""},"metadata":{"timestamp":"1743739047"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1zeq4hn2hd2azde6p9x2ya9gp3ug30vuuv56pym","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"GUGACDLsNHR04L7sL2wA6yZN1Ujy1P+hm0G8jgh7vZWg8JHs8MjwxGhz50z5kYrHZmVf68R1f2zNchYoYKXaDA=="}],"memo":""},"metadata":{"timestamp":"1743739590"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1zeq4hn2hd2azde6p9x2ya9gp3ug30vuuv56pym","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["2","2"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"XpjuXG0sxPRREVNem1ST5D9UAU6wvnSehwVkYkiE7o4gtK0xQa2LDSx1YS4IEziMIa7aqWmt5YLu7Y/1wGJ1Dg=="}],"memo":""},"metadata":{"timestamp":"1743739625"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1p5pa2sp4elcja2u8wn36zv3plsyp8xrqgz0usf","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"4qzupQ35Elm3J9Kw8ywsZVVqtoQema07OW6XzT9ORes408fOdkh5Vdaji4fHcUh2JLLjO8a6JZZjNPLQY4QDCg=="}],"memo":""},"metadata":{"timestamp":"1743750714"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"5KQEAVjunxy5S1a8XctQM33/kGpmoZvynCfD9YT2Hkz/L32yb9birF6Bt7y+EpdQ4GUtFcCzYSZObRIB5J5eCw=="}],"memo":""},"metadata":{"timestamp":"1743750895"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":["aeddi-testing"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"NJVQ1B8M3CNO3CSUat6+G6qhGtuKBsQjVDFDzjlyMrmtrcmoxH21yFjVh/wb8N1QPOdJUuzcL4H98s8NdNYJBA=="}],"memo":""},"metadata":{"timestamp":"1743751141"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","to_address":"g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","amount":"1000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Y+NhVxZFPeXnxFxFiQ9AjTS/gDSliN/mPDFWSj+KNM5BA96fsPi8x2H/hPTOmC16JZm5NkT1WhUb3E7C4/OQAQ=="}],"memo":""},"metadata":{"timestamp":"1743755182"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1etcvlu8zyuwnd7w0x0lcu4g2r7yzllyy62gpa5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Q/Kcv4x104VQVi3UC+dkBTpMGWfT2SCYiLzVtzkm8qQ9NVe6sIr5JlzkCAGvqyf8CWBbSBBpnoNK1hP15QxIDg=="}],"memo":""},"metadata":{"timestamp":"1743760782"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1etcvlu8zyuwnd7w0x0lcu4g2r7yzllyy62gpa5","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","-1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"JBX6/1cwN1Hy2FQkUYTR7BShiuJrtjVUe7vYpWwrwJMzBPB9jIlR+26ko2OiwGzmbZCDNFg78mtPtmlCKB7PDA=="}],"memo":""},"metadata":{"timestamp":"1743760847"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"TGWslXzdNOGeWEgsuoacsYO/12F1Oc2+uUIPWCWsZTU04agRN2Q5spfDaMTWqyLOJmTXD2ZuCTaouslHvlqiDQ=="}],"memo":""},"metadata":{"timestamp":"1743761662"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","package":{"name":"boards2","path":"gno.land/r/devx000/gnoland/boards2/v1rc2","files":[{"name":"board.gno","body":"package boards2\n\nimport (\n\t\"net/url\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\ntype BoardID uint64\n\nfunc (id BoardID) String() string {\n\treturn strconv.Itoa(int(id))\n}\n\nfunc (id BoardID) Key() string {\n\treturn padZero(uint64(id), 10)\n}\n\ntype Board struct {\n\tid        BoardID // only set for public boards.\n\tname      string\n\taliases   []string\n\tcreator   std.Address\n\tthreads   avl.Tree // Post.id -\u003e *Post\n\tpostsCtr  uint64   // increments Post.id\n\tcreatedAt time.Time\n\tdeleted   avl.Tree // TODO reserved for fast-delete.\n\tperms     Permissions\n\treadonly  bool\n}\n\nfunc newBoard(id BoardID, name string, creator std.Address, p Permissions) *Board {\n\treturn \u0026Board{\n\t\tid:        id,\n\t\tname:      name,\n\t\tcreator:   creator,\n\t\tthreads:   avl.Tree{},\n\t\tcreatedAt: time.Now(),\n\t\tdeleted:   avl.Tree{},\n\t\tperms:     p,\n\t}\n}\n\nfunc (board *Board) GetID() BoardID {\n\treturn board.id\n}\n\n// GetName returns the name of the board.\nfunc (board *Board) GetName() string {\n\treturn board.name\n}\n\n// GetURL returns the relative URL of the board.\nfunc (board *Board) GetURL() string {\n\treturn strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\") + \":\" + url.PathEscape(board.name)\n}\n\n// GetURL returns relative board path relative.\n//\n// Note: returned result is not escaped. Use GetURL to get URL-encoded path.\nfunc (board *Board) GetPath() string {\n\treturn strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\") + \":\" + board.name\n}\n\nfunc (board *Board) GetPermissions() Permissions {\n\treturn board.perms\n}\n\n// SetReadonly updates board's read-only status.\nfunc (board *Board) SetReadonly(readonly bool) {\n\tboard.readonly = readonly\n}\n\n// IsReadonly checks if the board is a read-only board.\nfunc (board *Board) IsReadonly() bool {\n\treturn board.readonly\n}\n\nfunc (board *Board) GetThread(threadID PostID) (_ *Post, found bool) {\n\tv, found := board.threads.Get(threadID.Key())\n\tif !found {\n\t\treturn nil, false\n\t}\n\treturn v.(*Post), true\n}\n\nfunc (board *Board) AddThread(creator std.Address, title string, body string) *Post {\n\tpid := board.incGetPostID()\n\tthread := newPost(board, pid, creator, title, body, pid, 0, 0)\n\tboard.threads.Set(pid.Key(), thread)\n\treturn thread\n}\n\n// NOTE: this can be potentially very expensive for threads with many replies.\n// TODO: implement optional fast-delete where thread is simply moved.\nfunc (board *Board) DeleteThread(pid PostID) {\n\t_, removed := board.threads.Remove(pid.Key())\n\tif !removed {\n\t\tpanic(\"thread does not exist with ID \" + pid.String())\n\t}\n}\n\n// Render renders a board into Markdown.\nfunc (board *Board) Render(path, menu string) string {\n\tvar sb strings.Builder\n\n\tsb.WriteString(\"# \" + board.GetName() + \"  \\n\")\n\tsb.WriteString(\"Board created by \" + newUserLink(board.creator) + \" \")\n\tsb.WriteString(\"on \" + board.createdAt.Format(dateFormat))\n\tsb.WriteString(\", #\" + board.id.String())\n\n\tif board.IsReadonly() {\n\t\tsb.WriteString(\"  \\n_**Starting new threads and commenting is disabled**_\")\n\t}\n\n\t// XXX: Menu is rendered by the caller to deal with links and sub-menus\n\t// TODO: We should have the render logic separated from boards so avoid sending menu as argument\n\tif menu != \"\" {\n\t\tsb.WriteString(\"\\n\\n\")\n\t\tsb.WriteString(menu)\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\tsb.WriteString(\"\\n\\n---\\n\")\n\n\tif board.threads.Size() == 0 {\n\t\tsb.WriteString(\"### This board doesn't have any threads\\n\")\n\t\tif !board.IsReadonly() {\n\t\t\turl := board.GetPostFormURL()\n\t\t\tsb.WriteString(\"Do you want to [start a new conversation](\" + url + \") in this board ?\")\n\t\t}\n\t\treturn sb.String()\n\t}\n\n\tp, err := pager.New(path, board.threads.Size(), pager.WithPageSize(pageSizeThreads))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\trender := func(_ string, v any) bool {\n\t\tthread := v.(*Post)\n\t\tif thread.isHidden {\n\t\t\treturn false\n\t\t}\n\n\t\tsb.WriteString(thread.RenderSummary())\n\t\tsb.WriteString(\"\\n\")\n\t\treturn false\n\t}\n\n\tsb.WriteString(\"Sort by: \")\n\tr := realmpath.Parse(path)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tsb.WriteString(newLink(\"newest first\", r.String()))\n\t\tsb.WriteString(\"\\n\\n\")\n\t\tboard.threads.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tsb.WriteString(newLink(\"oldest first\", r.String()))\n\t\tsb.WriteString(\"\\n\\n\")\n\t\tboard.threads.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tsb.WriteString(\"\\n---\\n\")\n\t\tsb.WriteString(pager.Picker(p))\n\t}\n\n\treturn sb.String()\n}\n\nfunc (board *Board) incGetPostID() PostID {\n\tboard.postsCtr++\n\treturn PostID(board.postsCtr)\n}\n\nfunc (board *Board) GetURLFromThreadID(threadID PostID) string {\n\treturn board.GetURL() + \"/\" + threadID.String()\n}\n\nfunc (board *Board) GetURLFromReplyID(threadID, replyID PostID) string {\n\treturn board.GetURL() + \"/\" + threadID.String() + \"/\" + replyID.String()\n}\n\nfunc (board *Board) GetRenameFormURL() string { // TODO: These type of functions shouldn't be part of Board type\n\treturn txlink.Call(\n\t\t\"RenameBoard\",\n\t\t\"name\", board.name,\n\t\t\"newName\", \"\",\n\t)\n}\n\nfunc (board *Board) GetFreezeFormURL() string {\n\treturn txlink.Call(\n\t\t\"FreezeBoard\",\n\t\t\"boardID\", board.id.String(),\n\t)\n}\n\nfunc (board *Board) GetUnfreezeFormURL() string {\n\treturn txlink.Call(\n\t\t\"UnfreezeBoard\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"threadID\", \"\",\n\t\t\"replyID\", \"\",\n\t)\n}\n\nfunc (board *Board) GetFlaggingThresholdFormURL() string {\n\treturn txlink.Call(\n\t\t\"SetFlaggingThreshold\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"threshold\", \"\",\n\t)\n}\n\nfunc (board *Board) GetInviteMemberFormURL() string {\n\treturn txlink.Call(\n\t\t\"InviteMember\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"user\", \"\",\n\t\t\"role\", \"\",\n\t)\n}\n\nfunc (board *Board) GetPostFormURL() string {\n\treturn txlink.Call(\n\t\t\"CreateThread\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"title\", \"\",\n\t\t\"body\", \"\",\n\t)\n}\n\nfunc (board *Board) GetMembersURL() string {\n\treturn board.GetURL() + \"/members\"\n}\n\nfunc createDefaultBoardPermissions(owner std.Address) *DefaultPermissions {\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.SetSuperRole(RoleOwner)\n\tperms.AddRole(\n\t\tRoleAdmin,\n\t\tPermissionBoardRename,\n\t\tPermissionBoardFlaggingUpdate,\n\t\tPermissionMemberInvite,\n\t\tPermissionMemberRemove,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadEdit,\n\t\tPermissionThreadDelete,\n\t\tPermissionThreadRepost,\n\t\tPermissionThreadFlag,\n\t\tPermissionThreadFreeze,\n\t\tPermissionReplyCreate,\n\t\tPermissionReplyDelete,\n\t\tPermissionReplyFlag,\n\t\tPermissionReplyFreeze,\n\t\tPermissionRoleChange,\n\t)\n\tperms.AddRole(\n\t\tRoleModerator,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadEdit,\n\t\tPermissionThreadRepost,\n\t\tPermissionThreadFlag,\n\t\tPermissionReplyCreate,\n\t\tPermissionReplyFlag,\n\t)\n\tperms.AddRole(\n\t\tRoleGuest,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadRepost,\n\t\tPermissionReplyCreate,\n\t)\n\tperms.AddUser(owner, RoleOwner)\n\treturn perms\n}\n"},{"name":"board_readonly.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"time\"\n)\n\n// ReadonlyBoard defines an interface for readonly boards.\ntype ReadonlyBoard interface {\n\t// ID returns the unique identifier of the board.\n\tID() BoardID\n\n\t// Name returns the name of the board.\n\tName() string\n\n\t// Aliases returns a list with previous names assigned to the board.\n\tAliases() []string\n\n\t// Creator returns board's creator address.\n\tCreator() std.Address\n\n\t// LastPostID returns the ID assigned to the last created thread.\n\tLastPostID() uint64\n\n\t// CreatedAt returns the time when board was created.\n\tCreatedAt() time.Time\n\n\t// IsReadonly returns true when board shouldn't allow the creation of threads and comments.\n\tIsReadonly() bool\n\n\t// MembersCount returns the number of invited board members.\n\tMembersCount() int\n\n\t// IterateMembers allows reading the list of invited board members.\n\tIterateMembers(offset, count int, fn UsersIterFn)\n}\n\ntype readonlyBoard struct {\n\tboard *Board\n}\n\nfunc (b readonlyBoard) ID() BoardID {\n\treturn b.board.id\n}\n\nfunc (b readonlyBoard) Name() string {\n\treturn b.board.name\n}\n\nfunc (b readonlyBoard) Aliases() []string {\n\taliases := make([]string, len(b.board.aliases))\n\tfor i, s := range b.board.aliases {\n\t\taliases[i] = s\n\t}\n\treturn aliases\n}\n\nfunc (b readonlyBoard) Creator() std.Address {\n\treturn b.board.creator\n}\n\nfunc (b readonlyBoard) LastPostID() uint64 {\n\treturn b.board.postsCtr\n}\n\nfunc (b readonlyBoard) CreatedAt() time.Time {\n\treturn b.board.createdAt\n}\n\nfunc (b readonlyBoard) IsReadonly() bool {\n\treturn b.board.readonly\n}\n\nfunc (b readonlyBoard) MembersCount() int {\n\treturn b.board.perms.UsersCount()\n}\n\nfunc (b readonlyBoard) IterateMembers(offset, count int, fn UsersIterFn) {\n\tb.board.perms.IterateUsers(offset, count, fn)\n}\n"},{"name":"board_test.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nfunc TestBoardID_String(t *testing.T) {\n\tinput := BoardID(32)\n\n\tuassert.Equal(t, \"32\", input.String())\n}\n\nfunc TestBoardID_Key(t *testing.T) {\n\tinput := BoardID(128)\n\twant := strings.Repeat(\"0\", 7) + \"128\"\n\tuassert.Equal(t, want, input.Key())\n}\n\nfunc TestBoard_GetID(t *testing.T) {\n\twant := int(92)\n\tb := new(Board)\n\tb.id = BoardID(want)\n\tgot := int(b.GetID())\n\n\tuassert.Equal(t, got, want)\n\tuassert.NotEqual(t, got, want*want)\n}\n\nfunc TestBoard_GetURL(t *testing.T) {\n\tpkgPath := strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\tname := \"foobar_test_get_url123\"\n\twant := pkgPath + \":\" + name\n\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tboard := newBoard(1, name, addr, perms)\n\tgot := board.GetURL()\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetThread(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(1, \"test123\", addr, perms)\n\n\t_, ok := b.GetThread(12345)\n\tuassert.False(t, ok)\n\n\tpost := b.AddThread(addr, \"foo\", \"bar\")\n\t_, ok = b.GetThread(post.GetPostID())\n\tuassert.True(t, ok)\n}\n\nfunc TestBoard_DeleteThread(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(1, \"test123\", addr, perms)\n\n\tpost := b.AddThread(addr, \"foo\", \"bar\")\n\tid := post.GetPostID()\n\n\tb.DeleteThread(id)\n\n\t_, ok := b.GetThread(id)\n\tuassert.False(t, ok)\n}\n\nvar boardUrlPrefix = strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\nfunc TestBoard_GetURLFromThreadID(t *testing.T) {\n\tboardName := \"test12345\"\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(BoardID(11), boardName, addr, perms)\n\twant := boardUrlPrefix + \":\" + boardName + \"/10\"\n\n\tgot := b.GetURLFromThreadID(10)\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetURLFromReplyID(t *testing.T) {\n\tboardName := \"test12345\"\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(BoardID(11), boardName, addr, perms)\n\twant := boardUrlPrefix + \":\" + boardName + \"/10/20\"\n\n\tgot := b.GetURLFromReplyID(10, 20)\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetPostFormURL(t *testing.T) {\n\tbid := BoardID(386)\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(bid, \"foo1234\", addr, perms)\n\texpect := txlink.Call(\"CreateThread\", \"boardID\", bid.String(), \"title\", \"\", \"body\", \"\")\n\n\tgot := b.GetPostFormURL()\n\tuassert.Equal(t, expect, got)\n}\n"},{"name":"boards.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tgPerms        Permissions\n\tgNotice       string\n\tgHelp         string\n\tgLastBoardID  BoardID\n\tgBoardsByID   avl.Tree // string(id) -\u003e *Board\n\tgBoardsByName avl.Tree // string(name) -\u003e *Board\n\tgLocked       struct {\n\t\trealm        bool\n\t\trealmMembers bool\n\t}\n)\n\nfunc init() {\n\t// TODO: Define and change the default realm owner (or owners)\n\towner := std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\n\t// Initialize default realm permissions\n\tgPerms = createDefaultPermissions(owner)\n\n\t// Import relevant initial state from previous version\n\tinitFromPrevVersion()\n}\n\n// incGetBoardID returns a new board ID.\nfunc incGetBoardID() BoardID {\n\tgLastBoardID++\n\treturn gLastBoardID\n}\n\n// getBoard returns a board for a specific ID.\nfunc getBoard(id BoardID) (_ *Board, found bool) {\n\tv, exists := gBoardsByID.Get(id.Key())\n\tif !exists {\n\t\treturn nil, false\n\t}\n\treturn v.(*Board), true\n}\n\n// mustGetBoardByName returns a board or panics when it's not found.\nfunc mustGetBoardByName(name string) *Board {\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tpanic(\"board does not exist with name: \" + name)\n\t}\n\treturn v.(*Board)\n}\n\n// mustGetBoard returns a board or panics when it's not found.\nfunc mustGetBoard(id BoardID) *Board {\n\tboard, found := getBoard(id)\n\tif !found {\n\t\tpanic(\"board does not exist with ID: \" + id.String())\n\t}\n\treturn board\n}\n\n// mustGetThread returns a thread or panics when it's not found.\nfunc mustGetThread(board *Board, threadID PostID) *Post {\n\tthread, found := board.GetThread(threadID)\n\tif !found {\n\t\tpanic(\"thread does not exist with ID: \" + threadID.String())\n\t}\n\treturn thread\n}\n\n// mustGetReply returns a reply or panics when it's not found.\nfunc mustGetReply(thread *Post, replyID PostID) *Post {\n\treply, found := thread.GetReply(replyID)\n\tif !found {\n\t\tpanic(\"reply does not exist with ID: \" + replyID.String())\n\t}\n\treturn reply\n}\n\nfunc mustGetPermissions(bid BoardID) Permissions {\n\tif bid != 0 {\n\t\tboard := mustGetBoard(bid)\n\t\treturn board.perms\n\t}\n\treturn gPerms\n}\n"},{"name":"flag.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n// DefaultFlaggingThreshold defines the default number of flags that hides flaggable items.\nconst DefaultFlaggingThreshold = 1\n\nvar gFlaggingThresholds avl.Tree // string(board ID) -\u003e int\n\ntype Flag struct {\n\tUser   std.Address\n\tReason string\n}\n\ntype Flaggable interface {\n\t// AddFlag adds a new flag to an item.\n\t//\n\t// Returns false if item was already flagged by user.\n\tAddFlag(flag Flag) bool\n\n\t// FlagsCount returns number of times item was flagged.\n\tFlagsCount() int\n}\n\n// flagItem adds a flag to a flaggable item (post, thread, etc).\n//\n// Returns whether flag count threshold is reached and item can be hidden.\n//\n// Panics if flag count threshold was already reached.\nfunc flagItem(item Flaggable, flag Flag, threshold int) bool {\n\tif item.FlagsCount() \u003e= threshold {\n\t\tpanic(\"item flag count threshold exceeded: \" + strconv.Itoa(threshold))\n\t}\n\n\tif !item.AddFlag(flag) {\n\t\tpanic(\"item has been already flagged by a current user\")\n\t}\n\n\treturn item.FlagsCount() == threshold\n}\n\nfunc getFlaggingThreshold(bid BoardID) int {\n\tif v, ok := gFlaggingThresholds.Get(bid.String()); ok {\n\t\treturn v.(int)\n\t}\n\treturn DefaultFlaggingThreshold\n}\n"},{"name":"format.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/r/sys/users\"\n)\n\nfunc padLeft(s string, length int) string {\n\tif len(s) \u003e= length {\n\t\treturn s\n\t}\n\treturn strings.Repeat(\" \", length-len(s)) + s\n}\n\nfunc padZero(u64 uint64, length int) string {\n\ts := strconv.Itoa(int(u64))\n\tif len(s) \u003e= length {\n\t\treturn s\n\t}\n\treturn strings.Repeat(\"0\", length-len(s)) + s\n}\n\nfunc indentBody(indent string, body string) string {\n\tvar (\n\t\tres   string\n\t\tlines = strings.Split(body, \"\\n\")\n\t)\n\tfor i, line := range lines {\n\t\tif i \u003e 0 {\n\t\t\tres += \"\\n\"\n\t\t}\n\t\tres += indent + line\n\t}\n\treturn res\n}\n\n// NOTE: length must be greater than 3.\nfunc summaryOf(text string, length int) string {\n\tlines := strings.SplitN(text, \"\\n\", 2)\n\tline := lines[0]\n\tif len(line) \u003e length {\n\t\tline = line[:(length-3)] + \"...\"\n\t} else if len(lines) \u003e 1 {\n\t\t// len(line) \u003c= 80\n\t\tline = line + \"...\"\n\t}\n\treturn line\n}\n\n// newLink returns a Markdown link.\nfunc newLink(label, uri string) string {\n\treturn \"[\" + label + \"](\" + uri + \")\"\n}\n\n// newButtonLink returns a Makdown link with label wrapped in brackets.\nfunc newButtonLink(label, uri string) string {\n\treturn `[\\[` + label + `\\]](` + uri + \")\"\n}\n\n// newUserLink returns a Markdown link for an account to the users\n// realm or the address as string when a user is not registered.\nfunc newUserLink(addr std.Address) string {\n\tuser := users.ResolveAddress(addr)\n\tif user != nil {\n\t\treturn user.RenderLink(\"\")\n\t}\n\treturn addr.String()\n}\n"},{"name":"migrations.gno","body":"package boards2\n\nimport (\n\tv1rc1 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nfunc initFromPrevVersion() {\n\timportRealmMembers()\n}\n\nfunc importRealmMembers() {\n\tv1rc1.IterateRealmMembers(0, func(member v1rc1.User) bool {\n\t\t// XXX: This wouldn't be required if a boards2 package is created\n\t\troles := make([]Role, len(member.Roles))\n\t\tfor i, r := range member.Roles {\n\t\t\troles[i] = Role(r)\n\t\t}\n\n\t\tgPerms.AddUser(member.Address, roles...)\n\t\treturn false\n\t})\n}\n"},{"name":"permissions.gno","body":"package boards2\n\nimport \"std\"\n\nconst (\n\tPermissionRealmHelp           Permission = \"realm:help\"\n\tPermissionRealmLock                      = \"realm:lock\"\n\tPermissionRealmNotice                    = \"realm:notice\"\n\tPermissionBoardCreate                    = \"board:create\"\n\tPermissionBoardFlaggingUpdate            = \"board:flagging-update\"\n\tPermissionBoardFreeze                    = \"board:freeze\"\n\tPermissionBoardRename                    = \"board:rename\"\n\tPermissionThreadCreate                   = \"thread:create\"\n\tPermissionThreadDelete                   = \"thread:delete\"\n\tPermissionThreadEdit                     = \"thread:edit\"\n\tPermissionThreadFlag                     = \"thread:flag\"\n\tPermissionThreadFreeze                   = \"thread:freeze\"\n\tPermissionThreadRepost                   = \"thread:repost\"\n\tPermissionReplyCreate                    = \"reply:create\"\n\tPermissionReplyDelete                    = \"reply:delete\"\n\tPermissionReplyFlag                      = \"reply:flag\"\n\tPermissionReplyFreeze                    = \"reply:freeze\"\n\tPermissionMemberInvite                   = \"member:invite\"\n\tPermissionMemberRemove                   = \"member:remove\"\n\tPermissionRoleChange                     = \"role:change\"\n\tPermissionPermissionsUpdate              = \"permissions:update\"\n)\n\nconst (\n\tRoleGuest     Role = \"\"\n\tRoleOwner          = \"owner\"\n\tRoleAdmin          = \"admin\"\n\tRoleModerator      = \"moderator\"\n)\n\ntype (\n\t// Permission defines the type for permissions.\n\tPermission string\n\n\t// Role defines the type for user roles.\n\tRole string\n\n\t// Args is a list of generic arguments.\n\tArgs []interface{}\n\n\t// User contains user info.\n\tUser struct {\n\t\tAddress std.Address\n\t\tRoles   []Role\n\t}\n\n\t// UsersIterFn defines a function type to iterate users.\n\tUsersIterFn func(User) bool\n\n\t// Permissions define an interface to for permissioned execution.\n\tPermissions interface {\n\t\t// HasRole checks if a user has a specific role assigned.\n\t\tHasRole(std.Address, Role) bool\n\n\t\t// HasPermission checks if a user has a specific permission.\n\t\tHasPermission(std.Address, Permission) bool\n\n\t\t// WithPermission calls a callback when a user has a specific permission.\n\t\t// It panics on error.\n\t\tWithPermission(std.Address, Permission, Args, func(Args))\n\n\t\t// AddUser adds a new user to the permissioner.\n\t\tAddUser(std.Address, ...Role) error\n\n\t\t// SetUserRoles sets the roles of a user.\n\t\tSetUserRoles(std.Address, ...Role) error\n\n\t\t// RemoveUser removes a user from the permissioner.\n\t\tRemoveUser(std.Address) (removed bool)\n\n\t\t// HasUser checks if a user exists.\n\t\tHasUser(std.Address) bool\n\n\t\t// UsersCount returns the total number of users the permissioner contains.\n\t\tUsersCount() int\n\n\t\t// IterateUsers iterates permissions' users.\n\t\tIterateUsers(start, count int, fn UsersIterFn) bool\n\t}\n)\n"},{"name":"permissions_default.gno","body":"package boards2\n\nimport (\n\t\"errors\"\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\t\"gno.land/r/sys/users\"\n)\n\n// DefaultPermissions manages users, roles and permissions.\ntype DefaultPermissions struct {\n\tsuperRole Role\n\tdao       *commondao.CommonDAO\n\tusers     *avl.Tree // string(std.Address) -\u003e []Role\n\troles     *avl.Tree // string(role) -\u003e []Permission\n}\n\n// NewDefaultPermissions creates a new permissions type.\n// This type is a default implementation to handle users, roles and permissions.\nfunc NewDefaultPermissions(dao *commondao.CommonDAO) *DefaultPermissions {\n\tif dao == nil {\n\t\tpanic(\"default permissions require a DAO\")\n\t}\n\n\tdp := \u0026DefaultPermissions{\n\t\tdao:   dao,\n\t\troles: avl.NewTree(),\n\t\tusers: avl.NewTree(),\n\t}\n\n\t// Make sure that DAO users are indexed when DAO has members\n\tdao.Members().IterateByOffset(0, dao.Members().Size(), func(m std.Address) bool {\n\t\tdp.users.Set(m.String(), []Role(nil))\n\t\treturn false\n\t})\n\n\treturn dp\n}\n\n// SetSuperRole assigns a super role.\n// A super role is one that have all permissions.\n// These type of role doesn't need to be mapped to any permission.\nfunc (dp *DefaultPermissions) SetSuperRole(r Role) {\n\tdp.superRole = r\n}\n\n// AddRole add a role with one or more assigned permissions.\nfunc (dp *DefaultPermissions) AddRole(r Role, p Permission, extra ...Permission) {\n\tdp.roles.Set(string(r), append([]Permission{p}, extra...))\n}\n\n// RoleExists checks if a role exists.\nfunc (dp DefaultPermissions) RoleExists(r Role) bool {\n\tif dp.superRole != \"\" \u0026\u0026 r == dp.superRole {\n\t\treturn true\n\t}\n\n\treturn dp.roles.Iterate(\"\", \"\", func(name string, _ interface{}) bool {\n\t\treturn Role(name) == r\n\t})\n}\n\n// GetUserRoles returns the list of roles assigned to a user.\nfunc (dp DefaultPermissions) GetUserRoles(user std.Address) []Role {\n\tv, found := dp.users.Get(user.String())\n\tif !found {\n\t\treturn nil\n\t}\n\treturn v.([]Role)\n}\n\n// HasRole checks if a user has a specific role assigned.\nfunc (dp DefaultPermissions) HasRole(user std.Address, r Role) bool {\n\tfor _, role := range dp.GetUserRoles(user) {\n\t\tif role == r {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// HasPermission checks if a user has a specific permission.\nfunc (dp DefaultPermissions) HasPermission(user std.Address, perm Permission) bool {\n\tfor _, r := range dp.GetUserRoles(user) {\n\t\tif dp.superRole == r {\n\t\t\treturn true\n\t\t}\n\n\t\tv, found := dp.roles.Get(string(r))\n\t\tif !found {\n\t\t\tcontinue\n\t\t}\n\n\t\tfor _, p := range v.([]Permission) {\n\t\t\tif p == perm {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// AddUser adds a new user to permissions.\nfunc (dp *DefaultPermissions) AddUser(user std.Address, roles ...Role) error {\n\tif dp.users.Has(user.String()) {\n\t\treturn errors.New(\"user already exists\")\n\t}\n\n\tdp.dao.Members().Add(user)\n\treturn dp.setUserRoles(user, roles...)\n}\n\n// SetUserRoles sets the roles of a user.\nfunc (dp *DefaultPermissions) SetUserRoles(user std.Address, roles ...Role) error {\n\tif !dp.users.Has(user.String()) {\n\t\treturn errors.New(\"user not found\")\n\t}\n\treturn dp.setUserRoles(user, roles...)\n}\n\n// RemoveUser removes a user from permissions.\nfunc (dp *DefaultPermissions) RemoveUser(user std.Address) bool {\n\t_, removed := dp.users.Remove(user.String())\n\tdp.dao.Members().Remove(user)\n\treturn removed\n}\n\n// HasUser checks if a user exists.\nfunc (dp DefaultPermissions) HasUser(user std.Address) bool {\n\treturn dp.users.Has(user.String())\n}\n\n// UsersCount returns the total number of users the permissioner contains.\nfunc (dp DefaultPermissions) UsersCount() int {\n\treturn dp.users.Size()\n}\n\n// IterateUsers iterates permissions' users.\nfunc (dp DefaultPermissions) IterateUsers(start, count int, fn UsersIterFn) bool {\n\treturn dp.users.IterateByOffset(start, count, func(k string, v interface{}) bool {\n\t\treturn fn(User{\n\t\t\tAddress: std.Address(k),\n\t\t\tRoles:   v.([]Role),\n\t\t})\n\t})\n}\n\n// WithPermission calls a callback when a user has a specific permission.\n// It panics on error or when a handler panics.\n// Callbacks are by default called when there is no handle registered for the permission.\nfunc (dp *DefaultPermissions) WithPermission(user std.Address, perm Permission, args Args, cb func(Args)) {\n\tif !dp.HasPermission(user, perm) || !dp.dao.Members().Has(user) {\n\t\tpanic(\"unauthorized\")\n\t}\n\n\tswitch perm {\n\tcase PermissionBoardCreate:\n\t\tdp.handleBoardCreate(args, cb)\n\tcase PermissionBoardRename:\n\t\tdp.handleBoardRename(args, cb)\n\tcase PermissionMemberInvite:\n\t\tdp.handleMemberInvite(args, cb)\n\tcase PermissionRoleChange:\n\t\tdp.handleRoleChange(args, cb)\n\tdefault:\n\t\tcb(args)\n\t}\n}\n\nfunc (dp *DefaultPermissions) setUserRoles(user std.Address, roles ...Role) error {\n\tfor _, r := range roles {\n\t\tif !dp.RoleExists(r) {\n\t\t\treturn errors.New(\"invalid role: \" + string(r))\n\t\t}\n\t}\n\n\tdp.users.Set(user.String(), append([]Role(nil), roles...))\n\treturn nil\n}\n\nfunc (DefaultPermissions) handleBoardCreate(args Args, cb func(Args)) {\n\tname, ok := args[0].(string)\n\tif !ok {\n\t\tpanic(\"expected board name to be a string\")\n\t}\n\n\tassertBoardNameIsNotAddress(name)\n\tassertBoardNameBelongsToCaller(name)\n\n\tcb(args)\n}\n\nfunc (DefaultPermissions) handleBoardRename(args Args, cb func(Args)) {\n\tnewName, ok := args[2].(string)\n\tif !ok {\n\t\tpanic(\"expected new board name to be a string\")\n\t}\n\n\tassertBoardNameIsNotAddress(newName)\n\tassertBoardNameBelongsToCaller(newName)\n\n\tcb(args)\n}\n\nfunc (dp DefaultPermissions) handleMemberInvite(args Args, cb func(Args)) {\n\t// Make sure that only owners invite other owners\n\trole, ok := args[1].(Role)\n\tif !ok {\n\t\tpanic(\"expected a valid new member role\")\n\t}\n\n\tif role == RoleOwner {\n\t\tif !dp.HasRole(std.PreviousRealm().Address(), RoleOwner) {\n\t\t\tpanic(\"only owners are allowed to invite other owners\")\n\t\t}\n\t}\n\n\tcb(args)\n}\n\nfunc (dp DefaultPermissions) handleRoleChange(args Args, cb func(Args)) {\n\t// Owners and Admins can change roles.\n\t// Admins should not be able to assign or remove the Owner role from members.\n\tif dp.HasRole(std.PreviousRealm().Address(), RoleAdmin) {\n\t\trole, ok := args[2].(Role)\n\t\tif !ok {\n\t\t\tpanic(\"expected a valid member role\")\n\t\t}\n\n\t\tif role == RoleOwner {\n\t\t\tpanic(\"admins are not allowed to promote members to Owner\")\n\t\t} else {\n\t\t\tmember, ok := args[1].(std.Address)\n\t\t\tif !ok {\n\t\t\t\tpanic(\"expected a valid member address\")\n\t\t\t}\n\n\t\t\tif dp.HasRole(member, RoleOwner) {\n\t\t\t\tpanic(\"admins are not allowed to remove the Owner role\")\n\t\t\t}\n\t\t}\n\t}\n\n\tcb(args)\n}\n\nfunc createDefaultPermissions(owner std.Address) *DefaultPermissions {\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.SetSuperRole(RoleOwner)\n\tperms.AddRole(RoleAdmin, PermissionBoardCreate)\n\tperms.AddUser(owner, RoleOwner)\n\treturn perms\n}\n\nfunc assertBoardNameIsNotAddress(s string) {\n\tif std.Address(s).IsValid() {\n\t\tpanic(\"addresses are not allowed as board name\")\n\t}\n}\n\nfunc assertBoardNameBelongsToCaller(name string) {\n\t// When the board name is the name of a registered user\n\t// check that caller is the owner of the name.\n\tuser, _ := users.ResolveName(name)\n\tif user != nil \u0026\u0026 user.Addr() != std.PreviousRealm().Address() {\n\t\tpanic(\"board name is a user name registered to a different user\")\n\t}\n}\n"},{"name":"permissions_default_test.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/urequire\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n)\n\nvar _ Permissions = (*DefaultPermissions)(nil)\n\nfunc TestDefaultPermissionsWithPermission(t *testing.T) {\n\tcases := []struct {\n\t\tname       string\n\t\tuser       std.Address\n\t\tpermission Permission\n\t\targs       Args\n\t\tsetup      func() *DefaultPermissions\n\t\terr        string\n\t\tcalled     bool\n\t}{\n\t\t{\n\t\t\tname:       \"ok\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\tcalled: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with arguments\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\targs:       Args{\"a\", \"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\tcalled: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"no permission\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"unauthorized\",\n\t\t},\n\t\t{\n\t\t\tname:       \"is not a DAO member\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t\terr: \"unauthorized\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar (\n\t\t\t\tcalled bool\n\t\t\t\targs   Args\n\t\t\t)\n\n\t\t\tperms := tc.setup()\n\t\t\tcallback := func(a Args) {\n\t\t\t\targs = a\n\t\t\t\tcalled = true\n\t\t\t}\n\n\t\t\ttestCaseFn := func() {\n\t\t\t\tperms.WithPermission(tc.user, tc.permission, tc.args, callback)\n\t\t\t}\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.PanicsWithMessage(t, tc.err, testCaseFn, \"panic\")\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NotPanics(t, testCaseFn, \"no panic\")\n\t\t\t}\n\n\t\t\turequire.Equal(t, tc.called, called, \"callback called\")\n\t\t\turequire.Equal(t, len(tc.args), len(args), \"args count\")\n\t\t\tfor i, a := range args {\n\t\t\t\tuassert.Equal(t, tc.args[i].(string), a.(string))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsGetUserRoles(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []string\n\t\tsetup func() *DefaultPermissions\n\t}{\n\t\t{\n\t\t\tname:  \"single role\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple roles\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\", \"foo\", \"bar\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddRole(\"bar\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\", \"foo\", \"bar\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"without roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"not a user\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple users\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"bar\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"admin\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\", \"admin\", \"bar\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\troles := perms.GetUserRoles(tc.user)\n\n\t\t\turequire.Equal(t, len(tc.roles), len(roles), \"user role count\")\n\t\t\tfor i, r := range roles {\n\t\t\t\tuassert.Equal(t, tc.roles[i], string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsHasRole(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\trole  Role\n\t\tsetup func() *DefaultPermissions\n\t\twant  bool\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"admin\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"ok with multiple roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"foo\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"user without roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"has no role\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.HasRole(tc.user, tc.role)\n\t\t\tuassert.Equal(t, got, tc.want)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsHasPermission(t *testing.T) {\n\tcases := []struct {\n\t\tname       string\n\t\tuser       std.Address\n\t\tpermission Permission\n\t\tsetup      func() *DefaultPermissions\n\t\twant       bool\n\t}{\n\t\t{\n\t\t\tname:       \"ok\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with multiple users\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with multiple roles\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"other\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddRole(\"baz\", \"other\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\", \"baz\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"no permission\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"other\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.HasPermission(tc.user, tc.permission)\n\t\t\tuassert.Equal(t, got, tc.want)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsAddUser(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []Role\n\t\tsetup func() *DefaultPermissions\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname:  \"single user\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple users\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"a\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"duplicated user\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"user already exists\",\n\t\t},\n\t\t{\n\t\t\tname:  \"duplicated user\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"foo\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"invalid role: foo\",\n\t\t},\n\t\t{\n\t\t\tname: \"already a DAO member\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(\n\t\t\t\t\tcommondao.New(commondao.WithMember(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")),\n\t\t\t\t)\n\t\t\t},\n\t\t\terr: \"user already exists\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\n\t\t\terr := perms.AddUser(tc.user, tc.roles...)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.Error(t, err, \"expected an error\")\n\t\t\t\tuassert.Equal(t, tc.err, err.Error())\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NoError(t, err)\n\t\t\t}\n\n\t\t\troles := perms.GetUserRoles(tc.user)\n\t\t\tuassert.Equal(t, len(tc.roles), len(roles))\n\t\t\tfor i, r := range roles {\n\t\t\t\turequire.Equal(t, string(tc.roles[i]), string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsSetUserRoles(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []Role\n\t\tsetup func() *DefaultPermissions\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname:  \"single role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple roles\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"b\", \"c\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddRole(\"c\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"duplicated role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"c\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddRole(\"c\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\", \"c\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"remove roles\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\", \"b\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"x\", \"a\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"invalid role: x\",\n\t\t},\n\t\t{\n\t\t\tname: \"user not found\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t\terr: \"user not found\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\n\t\t\terr := perms.SetUserRoles(tc.user, tc.roles...)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.True(t, err != nil, \"expected an error\")\n\t\t\t\tuassert.Equal(t, tc.err, err.Error())\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NoError(t, err)\n\t\t\t}\n\n\t\t\troles := perms.GetUserRoles(tc.user)\n\t\t\tuassert.Equal(t, len(tc.roles), len(roles))\n\t\t\tfor i, r := range roles {\n\t\t\t\turequire.Equal(t, string(tc.roles[i]), string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsRemoveUser(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\tsetup func() *DefaultPermissions\n\t\twant  bool\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"user not found\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.RemoveUser(tc.user)\n\t\t\tuassert.Equal(t, tc.want, got)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsIterateUsers(t *testing.T) {\n\tusers := []User{\n\t\t{\n\t\t\tAddress: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tRoles:   []Role{\"foo\"},\n\t\t},\n\t\t{\n\t\t\tAddress: \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\",\n\t\t\tRoles:   []Role{\"foo\", \"bar\"},\n\t\t},\n\t\t{\n\t\t\tAddress: \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\",\n\t\t\tRoles:   []Role{\"bar\"},\n\t\t},\n\t}\n\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.AddRole(\"foo\", \"perm1\")\n\tperms.AddRole(\"bar\", \"perm2\")\n\tfor _, u := range users {\n\t\tperms.AddUser(u.Address, u.Roles...)\n\t}\n\n\tcases := []struct {\n\t\tname               string\n\t\tstart, count, want int\n\t}{\n\t\t{\n\t\t\tname:  \"exceed users count\",\n\t\t\tcount: 50,\n\t\t\twant:  3,\n\t\t},\n\t\t{\n\t\t\tname:  \"exact users count\",\n\t\t\tcount: 3,\n\t\t\twant:  3,\n\t\t},\n\t\t{\n\t\t\tname:  \"two users\",\n\t\t\tstart: 1,\n\t\t\tcount: 2,\n\t\t\twant:  2,\n\t\t},\n\t\t{\n\t\t\tname:  \"one user\",\n\t\t\tstart: 1,\n\t\t\tcount: 1,\n\t\t\twant:  1,\n\t\t},\n\t\t{\n\t\t\tname:  \"no iteration\",\n\t\t\tstart: 50,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar i int\n\t\t\tperms.IterateUsers(0, len(users), func(u User) bool {\n\t\t\t\turequire.True(t, i \u003c len(users), \"expect iterator to respect number of users\")\n\t\t\t\tuassert.Equal(t, users[i].Address, u.Address)\n\n\t\t\t\turequire.Equal(t, len(users[i].Roles), len(u.Roles), \"expect number of roles to match\")\n\t\t\t\tfor j, r := range u.Roles {\n\t\t\t\t\tuassert.Equal(t, string(users[i].Roles[j]), string(u.Roles[j]))\n\t\t\t\t}\n\n\t\t\t\ti++\n\t\t\t})\n\n\t\t\tuassert.Equal(t, i, len(users), \"expect iterator to iterate all users\")\n\t\t})\n\t}\n}\n"},{"name":"post.gno","body":"package boards2\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nconst dateFormat = \"2006-01-02 3:04pm MST\"\n\ntype PostID uint64\n\nfunc (id PostID) String() string {\n\treturn strconv.Itoa(int(id))\n}\n\nfunc (id PostID) Key() string {\n\treturn padZero(uint64(id), 10)\n}\n\n// A Post is a \"thread\" or a \"reply\" depending on context.\n// A thread is a Post of a Board that holds other replies.\ntype Post struct {\n\tboard         *Board\n\tid            PostID\n\tcreator       std.Address\n\ttitle         string // optional\n\tbody          string\n\tisHidden      bool\n\tisReadonly    bool\n\treplies       avl.Tree // Post.id -\u003e *Post\n\trepliesAll    avl.Tree // Post.id -\u003e *Post (all replies, for top-level posts)\n\treposts       avl.Tree // Board.id -\u003e Post.id\n\tflags         []Flag\n\tthreadID      PostID  // original Post.id\n\tparentID      PostID  // parent Post.id (if reply or repost)\n\trepostBoardID BoardID // original Board.id (if repost)\n\trepostsCount  uint64\n\tcreatedAt     time.Time\n\tupdatedAt     time.Time\n}\n\nfunc newPost(board *Board, id PostID, creator std.Address, title, body string, threadID, parentID PostID, repostBoardID BoardID) *Post {\n\treturn \u0026Post{\n\t\tboard:         board,\n\t\tid:            id,\n\t\tcreator:       creator,\n\t\ttitle:         title,\n\t\tbody:          body,\n\t\treplies:       avl.Tree{},\n\t\trepliesAll:    avl.Tree{},\n\t\treposts:       avl.Tree{},\n\t\tthreadID:      threadID,\n\t\tparentID:      parentID,\n\t\trepostBoardID: repostBoardID,\n\t\tcreatedAt:     time.Now(),\n\t}\n}\n\nfunc (post *Post) IsRepost() bool {\n\treturn post.repostBoardID != 0\n}\n\nfunc (post *Post) IsThread() bool {\n\t// repost threads also have parent ID\n\treturn post.parentID == 0 || post.IsRepost()\n}\n\nfunc (post *Post) GetBoard() *Board {\n\treturn post.board\n}\n\nfunc (post *Post) GetPostID() PostID {\n\treturn post.id\n}\n\nfunc (post *Post) GetParentID() PostID {\n\treturn post.parentID\n}\n\nfunc (post *Post) GetRepostBoardID() BoardID {\n\treturn post.repostBoardID\n}\n\nfunc (post *Post) GetCreator() std.Address {\n\treturn post.creator\n}\n\nfunc (post *Post) GetTitle() string {\n\treturn post.title\n}\n\nfunc (post *Post) GetBody() string {\n\treturn post.body\n}\n\nfunc (post *Post) GetCreatedAt() time.Time {\n\treturn post.createdAt\n}\n\nfunc (post *Post) GetUpdatedAt() time.Time {\n\treturn post.updatedAt\n}\n\nfunc (post *Post) AddFlag(flag Flag) bool {\n\t// TODO: sort flags for fast search in case of big thresholds\n\tfor _, v := range post.flags {\n\t\tif v.User == flag.User {\n\t\t\treturn false\n\t\t}\n\t}\n\n\tpost.flags = append(post.flags, flag)\n\treturn true\n}\n\nfunc (post *Post) FlagsCount() int {\n\treturn len(post.flags)\n}\n\nfunc (post *Post) SetVisible(isVisible bool) {\n\tpost.isHidden = !isVisible\n}\n\nfunc (post *Post) IsHidden() bool {\n\treturn post.isHidden\n}\n\nfunc (post *Post) SetReadonly(isReadonly bool) {\n\tpost.isReadonly = isReadonly\n}\n\nfunc (post *Post) IsReadonly() bool {\n\treturn post.isReadonly\n}\n\nfunc (post *Post) AddReply(creator std.Address, body string) *Post {\n\tboard := post.board\n\tpid := board.incGetPostID()\n\tpKey := pid.Key()\n\treply := newPost(board, pid, creator, \"\", body, post.threadID, post.id, 0)\n\t// TODO: Figure out how to remove this redundancy of data \"replies==repliesAll\" in threads\n\tpost.replies.Set(pKey, reply)\n\tif post.threadID == post.id {\n\t\tpost.repliesAll.Set(pKey, reply)\n\t} else {\n\t\tthread, _ := board.GetThread(post.threadID)\n\t\tthread.repliesAll.Set(pKey, reply)\n\t}\n\treturn reply\n}\n\nfunc (post *Post) Update(title string, body string) {\n\tpost.title = title\n\tpost.body = body\n\tpost.updatedAt = time.Now()\n}\n\nfunc (post *Post) HasReplies() bool {\n\treturn post.replies.Size() \u003e 0\n}\n\nfunc (thread *Post) GetReply(pid PostID) (_ *Post, found bool) {\n\tv, found := thread.repliesAll.Get(pid.Key())\n\tif !found {\n\t\treturn nil, false\n\t}\n\treturn v.(*Post), true\n}\n\nfunc (post *Post) AddRepostTo(creator std.Address, repost *Post, dst *Board) {\n\tif !post.IsThread() {\n\t\tpanic(\"cannot repost non-thread post\")\n\t}\n\n\tpost.repostsCount++\n\tdst.threads.Set(repost.id.Key(), repost)\n\tpost.reposts.Set(dst.id.Key(), repost.id)\n}\n\nfunc (post *Post) DeleteReply(replyID PostID) error {\n\tif !post.IsThread() {\n\t\t// TODO: Allow removing replies from parent replies too\n\t\tpanic(\"cannot delete reply from a non-thread post\")\n\t}\n\n\tif post.id == replyID {\n\t\treturn errors.New(\"expected an ID of an inner reply\")\n\t}\n\n\tkey := replyID.Key()\n\tv, removed := post.repliesAll.Remove(key)\n\tif !removed {\n\t\treturn errors.New(\"reply not found in thread\")\n\t}\n\n\t// TODO: Shouldn't reply be hidden instead of deleted? Maybe replace reply by a deleted message.\n\treply := v.(*Post)\n\tif reply.parentID != post.id {\n\t\tparent, _ := post.GetReply(reply.parentID)\n\t\tparent.replies.Remove(key)\n\t} else {\n\t\tpost.replies.Remove(key)\n\t}\n\treturn nil\n}\n\nfunc (post *Post) GetSummary() string {\n\treturn summaryOf(post.body, 80)\n}\n\nfunc (post *Post) GetURL() string {\n\tif post.IsThread() {\n\t\treturn post.board.GetURLFromThreadID(post.id)\n\t}\n\treturn post.board.GetURLFromReplyID(post.threadID, post.id)\n}\n\nfunc (post *Post) GetReplyFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"CreateReply\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"replyID\", \"0\",\n\t\t\t\"body\", \"\",\n\t\t)\n\t}\n\treturn txlink.Call(\n\t\t\"CreateReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t\t\"body\", \"\",\n\t)\n}\n\nfunc (post *Post) GetRepostFormURL() string {\n\treturn txlink.Call(\n\t\t\"CreateRepost\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.id.String(),\n\t\t\"title\", \"\",\n\t\t\"body\", \"\",\n\t\t\"destinationBoardID\", \"\",\n\t)\n}\n\nfunc (post *Post) GetDeleteFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"DeleteThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t)\n\t}\n\treturn txlink.Call(\n\t\t\"DeleteReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t)\n}\n\nfunc (post *Post) GetEditFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"EditThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"title\", post.GetTitle(),\n\t\t\t\"body\", post.GetBody(),\n\t\t)\n\t}\n\n\treturn txlink.Call(\n\t\t\"EditReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t\t\"body\", post.GetBody(),\n\t)\n}\n\nfunc (post *Post) GetFlagFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"FlagThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"reason\", \"\",\n\t\t)\n\t}\n\n\treturn txlink.Call(\n\t\t\"FlagReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t\t\"reason\", \"\",\n\t)\n}\n\nfunc (post *Post) RenderSummary() string {\n\tvar (\n\t\tb       strings.Builder\n\t\tpostURL = post.GetURL()\n\t\ttitle   = post.title\n\t)\n\n\tb.WriteString(\"**≡ \" + newLink(summaryOf(title, 80), postURL) + \"**  \\n\")\n\tb.WriteString(\"Created by \" + newUserLink(post.creator) + \" on \" + post.createdAt.Format(dateFormat))\n\tb.WriteString(\"  \\n**\")\n\tb.WriteString(strconv.Itoa(post.repliesAll.Size()) + \" replies • \")\n\tb.WriteString(strconv.Itoa(post.reposts.Size()) + \" reposts**\\n\")\n\treturn b.String()\n}\n\nfunc (post *Post) renderSourcePost(indent string) (string, *Post) {\n\tif !post.IsRepost() {\n\t\treturn \"\", nil\n\t}\n\n\tindent += \"\u003e \"\n\n\t// TODO: figure out a way to decouple posts from a global storage.\n\tboard, ok := getBoard(post.repostBoardID)\n\tif !ok {\n\t\treturn indentBody(indent, \"*⚠ Source board has been deleted*\\n\\n\"), nil\n\t}\n\n\tsrcPost, ok := board.GetThread(post.parentID)\n\tif !ok {\n\t\treturn indentBody(indent, \"*⚠ Source post has been deleted*\\n\\n\"), nil\n\t}\n\n\tif srcPost.isHidden {\n\t\treturn indentBody(indent, \"*⚠ Source post has been flagged as inappropriate*\\n\\n\"), nil\n\t}\n\n\treturn indentBody(indent, srcPost.GetSummary()) + \"\\n\\n\", srcPost\n}\n\n// renderPostContent renders post text content (including repost body).\n// Function will dump a predefined message instead of a body if post is hidden.\nfunc (post *Post) renderPostContent(sb *strings.Builder, indent string, levels int) {\n\tif post.isHidden {\n\t\t// Flagged comment should be hidden, but replies still visible (see: #3480)\n\t\t// Flagged threads will be hidden by render function caller.\n\t\tsb.WriteString(indentBody(indent, \"_⚠ Reply is hidden as it has been flagged as inappropriate_\"))\n\t\tsb.WriteString(\"\\n\")\n\t\treturn\n\t}\n\n\tsrcContent, srcPost := post.renderSourcePost(indent)\n\tif post.IsRepost() \u0026\u0026 srcPost != nil {\n\t\tsb.WriteString(\"  \\nThis thread is a repost of [another thread](\" + srcPost.GetURL() + \"): \\n\")\n\t}\n\n\tsb.WriteString(srcContent)\n\n\tif post.IsRepost() \u0026\u0026 srcPost == nil \u0026\u0026 len(post.body) \u003e 0 {\n\t\t// Add a newline to separate source deleted message from repost body content\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\tsb.WriteString(indentBody(indent, post.body))\n\tsb.WriteString(\"\\n\")\n\n\tif post.IsThread() {\n\t\t// Split content and controls for threads.\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\t// Buttons \u0026 counters\n\tsb.WriteString(indent)\n\tif !post.IsThread() {\n\t\tsb.WriteString(\"  \\n\")\n\t\tsb.WriteString(indent)\n\t}\n\n\tsb.WriteString(\"Created by \")\n\tsb.WriteString(newUserLink(post.creator))\n\tsb.WriteString(\" on \")\n\tsb.WriteString(post.createdAt.Format(dateFormat))\n\n\t// Add a reply view link to each top level reply\n\tif !post.IsThread() {\n\t\tsb.WriteString(\", \")\n\t\tsb.WriteString(newLink(\"#\"+post.id.String(), post.GetURL()))\n\t}\n\n\tif post.repostsCount \u003e 0 {\n\t\tsb.WriteString(\", \")\n\t\tsb.WriteString(strconv.FormatUint(post.repostsCount, 10))\n\t\tsb.WriteString(\" repost(s)\")\n\t}\n\n\tsb.WriteString(\"  \\n\")\n\tsb.WriteString(newLink(\"Flag\", post.GetFlagFormURL()))\n\n\tif post.IsThread() {\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Repost\", post.GetRepostFormURL()))\n\t}\n\n\tisReadonly := post.IsReadonly() || post.GetBoard().IsReadonly()\n\tif !isReadonly {\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Reply\", post.GetReplyFormURL()))\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Edit\", post.GetEditFormURL()))\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Delete\", post.GetDeleteFormURL()))\n\t}\n\n\tif levels == 0 {\n\t\tsb.WriteString(\" • \")\n\t\tif post.IsThread() {\n\t\t\tsb.WriteString(newLink(\"Show all Replies\", post.board.GetURLFromThreadID(post.GetPostID())))\n\t\t} else {\n\t\t\tsb.WriteString(newLink(\"View Thread\", post.board.GetURLFromThreadID(post.threadID)))\n\t\t}\n\t}\n\n\tsb.WriteString(\" \\n\")\n}\n\nfunc (post *Post) Render(path string, indent string, levels int) string {\n\tif post == nil {\n\t\treturn \"nil post\"\n\t}\n\n\t// TODO: pass a builder as arg into Render.\n\tvar sb strings.Builder\n\n\t// Thread reposts might not have a title, if so get title from source thread\n\ttitle := post.title\n\tif post.IsRepost() \u0026\u0026 title == \"\" {\n\t\tif board, ok := getBoard(post.repostBoardID); ok {\n\t\t\tif src, ok := board.GetThread(post.parentID); ok {\n\t\t\t\ttitle = src.GetTitle()\n\t\t\t}\n\t\t}\n\t}\n\n\tsb.WriteString(indent)\n\tif title != \"\" { // Replies don't have a title\n\t\tsb.WriteString(\"## \" + title + \"\\n\")\n\t}\n\tsb.WriteString(indent + \"\\n\")\n\n\tpost.renderPostContent(\u0026sb, indent, levels)\n\n\tif post.replies.Size() == 0 {\n\t\treturn sb.String()\n\t}\n\n\t// XXX: This triggers for reply views\n\tif levels == 0 {\n\t\tsb.WriteString(indent + \"\\n\")\n\t\tsb.WriteString(indent)\n\t\tsb.WriteString(\"\\n\")\n\t\treturn sb.String()\n\t}\n\n\tif path != \"\" {\n\t\tsb.WriteString(post.renderTopLevelReplies(path, indent, levels-1))\n\t} else {\n\t\tsb.WriteString(post.renderSubReplies(indent, levels-1))\n\t}\n\treturn sb.String()\n}\n\nfunc (post *Post) renderTopLevelReplies(path, indent string, levels int) string {\n\tp, err := pager.New(path, post.replies.Size(), pager.WithPageSize(pageSizeReplies))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tvar (\n\t\tb              strings.Builder\n\t\tcommentsIndent = indent + \"\u003e \"\n\t)\n\n\trender := func(_ string, v any) bool {\n\t\treply := v.(*Post)\n\n\t\tb.WriteString(indent)\n\t\tb.WriteString(\"\\n\")\n\t\tb.WriteString(reply.Render(\"\", commentsIndent, levels-1))\n\t\treturn false\n\t}\n\n\tb.WriteString(\"\\n\\n---\\nSort by: \")\n\tr := realmpath.Parse(path)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tb.WriteString(newLink(\"newest first\", r.String()))\n\t\tb.WriteString(\"\\n\")\n\t\tpost.replies.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tb.WriteString(newLink(\"oldest first\", r.String()))\n\t\tb.WriteString(\"\\n\")\n\t\tpost.replies.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tb.WriteString(\"\\n---\\n\")\n\t\tb.WriteString(pager.Picker(p))\n\t}\n\n\treturn b.String()\n}\n\nfunc (post *Post) renderSubReplies(indent string, levels int) string {\n\tvar (\n\t\tb              strings.Builder\n\t\tcommentsIndent = indent + \"\u003e \"\n\t)\n\n\tpost.replies.Iterate(\"\", \"\", func(_ string, v any) bool {\n\t\treply := v.(*Post)\n\n\t\tb.WriteString(indent)\n\t\tb.WriteString(\"\\n\")\n\t\tb.WriteString(reply.Render(\"\", commentsIndent, levels-1))\n\t\treturn false\n\t})\n\n\treturn b.String()\n}\n\nfunc (post *Post) RenderInner() string {\n\tif post.IsThread() {\n\t\tpanic(\"unexpected thread\")\n\t}\n\n\tvar (\n\t\ts         string\n\t\tthreadID  = post.threadID\n\t\tthread, _ = post.board.GetThread(threadID) // TODO: This seems redundant (post == thread)\n\t)\n\n\t// Fully render parent if it's not a repost.\n\tif !post.IsRepost() {\n\t\tvar (\n\t\t\tparent   *Post\n\t\t\tparentID = post.parentID\n\t\t)\n\n\t\tif thread.id == parentID {\n\t\t\tparent = thread\n\t\t} else {\n\t\t\tparent, _ = thread.GetReply(parentID)\n\t\t}\n\n\t\ts += parent.Render(\"\", \"\", 0) + \"\\n\"\n\t}\n\n\ts += post.Render(\"\", \"\u003e \", 5)\n\treturn s\n}\n"},{"name":"post_test.gno","body":"package boards2\n\nimport (\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nfunc TestPostUpdate(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tboard := newBoard(1, \"test123\", addr, perms)\n\tcreator := testutils.TestAddress(\"creator\")\n\tpost := newPost(board, 1, creator, \"Title\", \"Body\", 1, 0, 0)\n\ttitle := \"New Title\"\n\tbody := \"New body\"\n\n\tpost.Update(title, body)\n\n\tuassert.Equal(t, title, post.GetTitle())\n\tuassert.Equal(t, body, post.GetBody())\n\tuassert.False(t, post.GetUpdatedAt().IsZero())\n}\n\nfunc TestPostAddFlag(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tpost := createTestThread(t)\n\n\tflag := Flag{\n\t\tUser:   addr,\n\t\tReason: \"foobar\",\n\t}\n\tuassert.True(t, post.AddFlag(flag))\n\tuassert.False(t, post.AddFlag(flag), \"should reject flag from duplicate user\")\n\tuassert.Equal(t, post.FlagsCount(), 1)\n}\n\nfunc TestPostSetVisible(t *testing.T) {\n\tpost := createTestThread(t)\n\tuassert.False(t, post.IsHidden(), \"post should be visible by default\")\n\n\tpost.SetVisible(false)\n\tuassert.True(t, post.IsHidden(), \"post should be hidden\")\n\n\tpost.SetVisible(true)\n\tuassert.False(t, post.IsHidden(), \"post should be visible\")\n}\n\nfunc TestPostAddRepostTo(t *testing.T) {\n\t// TODO: Improve this unit test\n\taddr := testutils.TestAddress(\"creatorDstBoard\")\n\tperms := createDefaultBoardPermissions(addr)\n\tcases := []struct {\n\t\tname, title, body string\n\t\tdstBoard          *Board\n\t\tthread            *Post\n\t\tsetup             func() *Post\n\t\terr               string\n\t}{\n\t\t{\n\t\t\tname:     \"repost thread\",\n\t\t\ttitle:    \"Repost Title\",\n\t\t\tbody:     \"Repost body\",\n\t\t\tdstBoard: newBoard(42, \"dst123\", addr, perms),\n\t\t\tsetup:    func() *Post { return createTestThread(t) },\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid repost from reply\",\n\t\t\tsetup: func() *Post { return createTestReply(t) },\n\t\t\terr:   \"cannot repost non-thread post\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar (\n\t\t\t\trepost  *Post\n\t\t\t\tcreator = testutils.TestAddress(\"repostCreator\")\n\t\t\t\tthread  = tc.setup()\n\t\t\t)\n\n\t\t\tcreateRepost := func() {\n\t\t\t\tvar repostId PostID\n\t\t\t\tif tc.dstBoard != nil {\n\t\t\t\t\trepostId = tc.dstBoard.incGetPostID()\n\t\t\t\t}\n\n\t\t\t\trepost = newPost(tc.dstBoard, repostId, creator, tc.title, tc.body, repostId, thread.GetPostID(), thread.GetBoard().GetID())\n\t\t\t\tthread.AddRepostTo(creator, repost, tc.dstBoard)\n\t\t\t}\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\tuassert.PanicsWithMessage(t, tc.err, createRepost)\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\tuassert.NotPanics(t, createRepost)\n\t\t\t}\n\n\t\t\tr, found := tc.dstBoard.GetThread(repost.GetPostID())\n\t\t\tuassert.True(t, found)\n\t\t\tuassert.True(t, repost == r)\n\t\t\tuassert.Equal(t, tc.title, repost.GetTitle())\n\t\t\tuassert.Equal(t, tc.body, repost.GetBody())\n\t\t\tuassert.Equal(t, uint(thread.GetBoard().GetID()), uint(repost.GetRepostBoardID()))\n\t\t})\n\t}\n}\n\nfunc TestNewThread(t *testing.T) {\n\tcreator := testutils.TestAddress(\"creator\")\n\ttitle := \"Test Title\"\n\tbody := strings.Repeat(\"A\", 82)\n\tboardID := BoardID(1)\n\tthreadID := PostID(42)\n\tboardName := \"test123\"\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(boardID, boardName, creator, perms)\n\turl := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2:%s/%d\",\n\t\tboardName,\n\t\tuint(threadID),\n\t)\n\treplyURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=CreateReply\u0026boardID=%d\u0026body=\u0026replyID=0\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\teditURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=EditThread\u0026boardID=%d\u0026body=%s\u0026threadID=%d\u0026title=%s\",\n\t\tuint(boardID),\n\t\tbody,\n\t\tuint(threadID),\n\t\tstrings.ReplaceAll(title, \" \", \"+\"),\n\t)\n\trepostURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=CreateRepost\u0026boardID=%d\u0026body=\u0026destinationBoardID=\u0026threadID=%d\u0026title=\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\tdeleteURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=DeleteThread\u0026boardID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\tflagURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=FlagThread\u0026boardID=%d\u0026reason=\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\n\tthread := newPost(board, threadID, creator, title, body, threadID, 0, 0)\n\n\tuassert.True(t, thread.IsThread())\n\tuassert.Equal(t, uint(threadID), uint(thread.GetPostID()))\n\tuassert.False(t, thread.GetCreatedAt().IsZero())\n\tuassert.True(t, thread.GetUpdatedAt().IsZero())\n\tuassert.Equal(t, title, thread.GetTitle())\n\tuassert.Equal(t, body[:77]+\"...\", thread.GetSummary())\n\tuassert.False(t, thread.HasReplies())\n\tuassert.Equal(t, url, thread.GetURL())\n\tuassert.Equal(t, replyURL, thread.GetReplyFormURL())\n\tuassert.Equal(t, editURL, thread.GetEditFormURL())\n\tuassert.Equal(t, repostURL, thread.GetRepostFormURL())\n\tuassert.Equal(t, deleteURL, thread.GetDeleteFormURL())\n\tuassert.Equal(t, flagURL, thread.GetFlagFormURL())\n}\n\nfunc TestThreadAddReply(t *testing.T) {\n\treplier := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\tthreadID := uint(thread.GetPostID())\n\tbody := \"A reply\"\n\n\treply := thread.AddReply(replier, body)\n\n\tr, found := thread.GetReply(reply.GetPostID())\n\tuassert.True(t, found)\n\tuassert.True(t, reply == r)\n\tuassert.Equal(t, threadID+1, uint(reply.GetPostID()))\n\tuassert.Equal(t, reply.GetCreator(), replier)\n\tuassert.Equal(t, reply.GetBody(), body)\n\tuassert.True(t, thread.HasReplies())\n}\n\nfunc TestThreadGetReply(t *testing.T) {\n\tcases := []struct {\n\t\tname   string\n\t\tthread *Post\n\t\tsetup  func(thread *Post) (replyID PostID)\n\t\tfound  bool\n\t}{\n\t\t{\n\t\t\tname:   \"found\",\n\t\t\tthread: createTestThread(t),\n\t\t\tsetup: func(thread *Post) PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t\tfound: true,\n\t\t},\n\t\t{\n\t\t\tname:   \"not found\",\n\t\t\tthread: createTestThread(t),\n\t\t\tsetup:  func(*Post) PostID { return 42 },\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup(tc.thread)\n\n\t\t\treply, found := tc.thread.GetReply(replyID)\n\n\t\t\tuassert.Equal(t, tc.found, found)\n\t\t\tif reply != nil {\n\t\t\t\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestThreadDeleteReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tcases := []struct {\n\t\tname  string\n\t\tsetup func() PostID\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"ok nested\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.AddReply(testutils.TestAddress(\"replier2\"), \"\").GetPostID()\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid\",\n\t\t\tsetup: func() PostID { return thread.GetPostID() },\n\t\t\terr:   \"expected an ID of an inner reply\",\n\t\t},\n\t\t{\n\t\t\tname:  \"not found\",\n\t\t\tsetup: func() PostID { return 42 },\n\t\t\terr:   \"reply not found in thread\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup()\n\n\t\t\terr := thread.DeleteReply(replyID)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\tuassert.ErrorContains(t, err, tc.err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tuassert.NoError(t, err)\n\t\t\t_, found := thread.GetReply(replyID)\n\t\t\tuassert.False(t, found)\n\t\t})\n\t}\n}\n\nfunc TestThreadRenderSummary(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestThreadRender(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestThreadRenderInner(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestNewReply(t *testing.T) {\n\tcreator := testutils.TestAddress(\"creator\")\n\tbody := strings.Repeat(\"A\", 82)\n\tboardID := BoardID(1)\n\tthreadID := PostID(42)\n\tparentID := PostID(1)\n\treplyID := PostID(2)\n\tboardName := \"test123\"\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(boardID, boardName, creator, perms)\n\turl := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2:%s/%d/%d\",\n\t\tboardName,\n\t\tuint(threadID),\n\t\tuint(replyID),\n\t)\n\treplyURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=CreateReply\u0026boardID=%d\u0026body=\u0026replyID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(replyID),\n\t\tuint(threadID),\n\t)\n\tdeleteURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=DeleteReply\u0026boardID=%d\u0026replyID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(replyID),\n\t\tuint(threadID),\n\t)\n\n\treply := newPost(board, replyID, creator, \"\", body, threadID, parentID, 0)\n\n\tuassert.False(t, reply.IsThread())\n\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\tuassert.False(t, reply.GetCreatedAt().IsZero())\n\tuassert.True(t, reply.GetUpdatedAt().IsZero())\n\tuassert.False(t, reply.HasReplies())\n\tuassert.Equal(t, body[:77]+\"...\", reply.GetSummary())\n\tuassert.Equal(t, url, reply.GetURL())\n\tuassert.Equal(t, replyURL, reply.GetReplyFormURL())\n\tuassert.Equal(t, deleteURL, reply.GetDeleteFormURL())\n}\n\nfunc TestReplyAddReply(t *testing.T) {\n\treplier := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"parentReplier\"), \"\")\n\tparentReplyID := uint(parentReply.GetPostID())\n\tbody := \"A child reply\"\n\n\treply := parentReply.AddReply(replier, body)\n\n\tr, found := thread.GetReply(reply.GetPostID())\n\tuassert.True(t, found)\n\tuassert.True(t, reply == r)\n\tuassert.Equal(t, parentReplyID, uint(reply.GetParentID()))\n\tuassert.Equal(t, parentReplyID+1, uint(reply.GetPostID()))\n\tuassert.Equal(t, reply.GetCreator(), replier)\n\tuassert.Equal(t, reply.GetBody(), body)\n\tuassert.False(t, reply.HasReplies())\n\tuassert.True(t, parentReply.HasReplies())\n}\n\nfunc TestReplyGetReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"parentReplier\"), \"\")\n\tcases := []struct {\n\t\tname  string\n\t\tsetup func() PostID\n\t\tfound bool\n\t}{\n\t\t{\n\t\t\tname: \"found\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := parentReply.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t\tfound: true,\n\t\t},\n\t\t{\n\t\t\tname:  \"not found\",\n\t\t\tsetup: func() PostID { return 42 },\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup()\n\n\t\t\treply, found := thread.GetReply(replyID)\n\n\t\t\tuassert.Equal(t, tc.found, found)\n\t\t\tif reply != nil {\n\t\t\t\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestReplyDeleteReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\treply := parentReply.AddReply(testutils.TestAddress(\"replier2\"), \"\")\n\n\t// NOTE: Deleting a reply from a parent reply should eventually be suported\n\tuassert.PanicsWithMessage(t, \"cannot delete reply from a non-thread post\", func() {\n\t\tparentReply.DeleteReply(reply.GetPostID())\n\t})\n}\n\nfunc TestReplyRender(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc createTestThread(t *testing.T) *Post {\n\tt.Helper()\n\n\tcreator := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(1, \"test_board_123\", creator, perms)\n\treturn board.AddThread(creator, \"Title\", \"Body\")\n}\n\nfunc createTestReply(t *testing.T) *Post {\n\tt.Helper()\n\n\tcreator := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\treturn thread.AddReply(creator, \"Test message\")\n}\n"},{"name":"public.gno","body":"package boards2\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nconst (\n\t// MaxBoardNameLength defines the maximum length allowed for board names.\n\tMaxBoardNameLength = 50\n\n\t// MaxThreadTitleLength defines the maximum length allowed for thread titles.\n\tMaxThreadTitleLength = 100\n\n\t// MaxReplyLength defines the maximum length allowed for replies.\n\tMaxReplyLength = 300\n)\n\nvar (\n\treBoardName = regexp.MustCompile(`(?i)^[a-z]+[a-z0-9_\\-]{2,50}$`)\n\n\t// Minimalistic Markdown line prefix checks that if allowed would\n\t// break the current UI when submitting a reply. It denies replies\n\t// with headings, blockquotes or horizontal lines.\n\treDeniedReplyLinePrefixes = regexp.MustCompile(`(?m)^\\s*(#|---|\u003e)+`)\n)\n\n// SetHelp sets or updates boards realm help content.\nfunc SetHelp(content string) {\n\tcontent = strings.TrimSpace(content)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{content}\n\tgPerms.WithPermission(caller, PermissionRealmHelp, args, func(Args) {\n\t\tgHelp = content\n\t})\n}\n\n// SetPermissions sets a permissions implementation for boards2 realm or a board.\nfunc SetPermissions(bid BoardID, p Permissions) {\n\tassertRealmIsNotLocked()\n\n\tif p == nil {\n\t\tpanic(\"permissions is required\")\n\t}\n\n\tif bid != 0 {\n\t\tassertBoardExists(bid)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{bid}\n\tgPerms.WithPermission(caller, PermissionPermissionsUpdate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\n\t\t// When board ID is zero it means that realm permissions are being updated\n\t\tif bid == 0 {\n\t\t\tgPerms = p\n\n\t\t\tstd.Emit(\n\t\t\t\t\"RealmPermissionsUpdated\",\n\t\t\t\t\"caller\", caller.String(),\n\t\t\t)\n\t\t\treturn\n\t\t}\n\n\t\t// Otherwise update the permissions of a single board\n\t\tboard := mustGetBoard(bid)\n\t\tboard.perms = p\n\n\t\tstd.Emit(\n\t\t\t\"BoardPermissionsUpdated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", bid.String(),\n\t\t)\n\t})\n}\n\n// SetRealmNotice sets a notice to be displayed globally by the realm.\n// An empty message removes the realm notice.\nfunc SetRealmNotice(message string) {\n\tmessage = strings.TrimSpace(message)\n\tcaller := std.PreviousRealm().Address()\n\tgPerms.WithPermission(caller, PermissionRealmNotice, nil, func(Args) {\n\t\tgNotice = message\n\n\t\tstd.Emit(\n\t\t\t\"RealmNoticeChanged\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"message\", message,\n\t\t)\n\t})\n}\n\n// GetBoardIDFromName searches a board by name and returns it's ID.\nfunc GetBoardIDFromName(name string) (_ BoardID, found bool) {\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\treturn 0, false\n\t}\n\treturn v.(*Board).id, true\n}\n\n// CreateBoard creates a new board.\nfunc CreateBoard(name string) BoardID {\n\tassertRealmIsNotLocked()\n\n\tname = strings.TrimSpace(name)\n\tassertIsValidBoardName(name)\n\tassertBoardNameNotExists(name)\n\n\tcaller := std.PreviousRealm().Address()\n\tid := incGetBoardID()\n\targs := Args{name, id}\n\tgPerms.WithPermission(caller, PermissionBoardCreate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardNameNotExists(name)\n\n\t\tperms := createDefaultBoardPermissions(caller)\n\t\tboard := newBoard(id, name, caller, perms)\n\t\tgBoardsByID.Set(id.Key(), board)\n\t\tgBoardsByName.Set(name, board)\n\n\t\tstd.Emit(\n\t\t\t\"BoardCreated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", id.String(),\n\t\t\t\"name\", name,\n\t\t)\n\t})\n\treturn id\n}\n\n// RenameBoard changes the name of an existing board.\n//\n// A history of previous board names is kept when boards are renamed.\n// Because of that boards are also accesible using previous name(s).\nfunc RenameBoard(name, newName string) {\n\tassertRealmIsNotLocked()\n\n\tnewName = strings.TrimSpace(newName)\n\tassertIsValidBoardName(newName)\n\tassertBoardNameNotExists(newName)\n\n\tboard := mustGetBoardByName(name)\n\tassertBoardIsNotFrozen(board)\n\n\tbid := board.GetID()\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{bid, name, newName}\n\tboard.perms.WithPermission(caller, PermissionBoardRename, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardNameNotExists(newName)\n\n\t\tboard := mustGetBoard(bid)\n\t\tboard.aliases = append(board.aliases, board.name)\n\t\tboard.name = newName\n\n\t\t// Index board for the new name keeping previous indexes for older names\n\t\tgBoardsByName.Set(newName, board)\n\n\t\tstd.Emit(\n\t\t\t\"BoardRenamed\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", bid.String(),\n\t\t\t\"name\", name,\n\t\t\t\"newName\", newName,\n\t\t)\n\t})\n}\n\n// CreateThread creates a new thread within a board.\nfunc CreateThread(boardID BoardID, title, body string) PostID {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tbody = strings.TrimSpace(body)\n\tassertBodyIsNotEmpty(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionThreadCreate)\n\n\tthread := board.AddThread(caller, title, body)\n\n\tstd.Emit(\n\t\t\"ThreadCreated\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", thread.GetPostID().String(),\n\t\t\"title\", title,\n\t)\n\n\treturn thread.id\n}\n\n// CreateReply creates a new comment or reply within a thread.\n//\n// The value of `replyID` is only required when creating a reply of another reply.\nfunc CreateReply(boardID BoardID, threadID, replyID PostID, body string) PostID {\n\tassertRealmIsNotLocked()\n\n\tbody = strings.TrimSpace(body)\n\tassertReplyBodyIsValid(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionReplyCreate)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\tassertThreadIsNotFrozen(thread)\n\n\tvar reply *Post\n\tif replyID == 0 {\n\t\t// When the parent reply is the thread just add reply to thread\n\t\treply = thread.AddReply(caller, body)\n\t} else {\n\t\t// Try to get parent reply and add a new child reply\n\t\tparent := mustGetReply(thread, replyID)\n\t\tif parent.IsHidden() || parent.IsReadonly() {\n\t\t\tpanic(\"replying to a hidden or frozen reply is not allowed\")\n\t\t}\n\n\t\treply = parent.AddReply(caller, body)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyCreate\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", reply.GetPostID().String(),\n\t)\n\n\treturn reply.id\n}\n\n// CreateRepost reposts a thread into another board.\nfunc CreateRepost(boardID BoardID, threadID PostID, title, body string, destinationBoardID BoardID) PostID {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tcaller := std.PreviousRealm().Address()\n\tdst := mustGetBoard(destinationBoardID)\n\tassertBoardIsNotFrozen(dst)\n\tassertHasBoardPermission(dst, caller, PermissionThreadRepost)\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\tif thread.IsRepost() {\n\t\tpanic(\"reposting a thread that is a repost is not allowed\")\n\t}\n\n\trepostId := dst.incGetPostID()\n\tbody = strings.TrimSpace(body)\n\trepost := newPost(dst, repostId, caller, title, body, repostId, thread.GetPostID(), thread.GetBoard().GetID())\n\tthread.AddRepostTo(caller, repost, dst)\n\n\tstd.Emit(\n\t\t\"Repost\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"destinationBoardID\", destinationBoardID.String(),\n\t\t\"title\", title,\n\t)\n\n\treturn repostId\n}\n\n// DeleteThread deletes a thread from a board.\n//\n// Threads can be deleted by the users who created them or otherwise by users with special permissions.\nfunc DeleteThread(boardID BoardID, threadID PostID) {\n\t// Council members should always be able to delete\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner) // TODO: Add DeleteThread filetest cases for realm owners\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\n\tif !isRealmOwner {\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertThreadIsNotFrozen(thread)\n\n\t\tif caller != thread.GetCreator() {\n\t\t\tassertHasBoardPermission(board, caller, PermissionThreadDelete)\n\t\t}\n\t}\n\n\t// Hard delete thread and all its replies\n\tboard.DeleteThread(threadID)\n\n\tstd.Emit(\n\t\t\"ThreadDeleted\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t)\n}\n\n// DeleteReply deletes a reply from a thread.\n//\n// Replies can be deleted by the users who created them or otherwise by users with special permissions.\n// Soft deletion is used when the deleted reply contains sub replies, in which case the reply content\n// is replaced by a text informing that reply has been deleted to avoid deleting sub-replies.\nfunc DeleteReply(boardID BoardID, threadID, replyID PostID) {\n\t// Council members should always be able to delete\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner) // TODO: Add DeleteReply filetest cases for realm owners\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\treply := mustGetReply(thread, replyID)\n\n\tif !isRealmOwner {\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertThreadIsNotFrozen(thread)\n\t\tassertReplyIsVisible(reply)\n\t\tassertReplyIsNotFrozen(reply)\n\n\t\tif caller != reply.GetCreator() {\n\t\t\tassertHasBoardPermission(board, caller, PermissionReplyDelete)\n\t\t}\n\t}\n\n\t// Soft delete reply by changing its body when it contains\n\t// sub-replies, otherwise hard delete it.\n\tif reply.HasReplies() {\n\t\treply.Update(reply.GetTitle(), \"This reply has been deleted\")\n\t} else {\n\t\tthread.DeleteReply(replyID)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyDeleted\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t)\n}\n\n// EditThread updates the title and body of thread.\n//\n// Threads can be updated by the users who created them or otherwise by users with special permissions.\nfunc EditThread(boardID BoardID, threadID PostID, title, body string) {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\tbody = strings.TrimSpace(body)\n\tif !thread.IsRepost() {\n\t\tassertBodyIsNotEmpty(body)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tif caller != thread.GetCreator() {\n\t\tassertHasBoardPermission(board, caller, PermissionThreadEdit)\n\t}\n\n\tthread.Update(title, body)\n\n\tstd.Emit(\n\t\t\"ThreadEdited\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"title\", title,\n\t)\n}\n\n// EditReply updates the body of comment or reply.\n//\n// Replies can be updated only by the users who created them.\nfunc EditReply(boardID BoardID, threadID, replyID PostID, body string) {\n\tassertRealmIsNotLocked()\n\n\tbody = strings.TrimSpace(body)\n\tassertReplyBodyIsValid(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\tassertReplyIsNotFrozen(reply)\n\n\tcaller := std.PreviousRealm().Address()\n\tif caller != reply.GetCreator() {\n\t\tpanic(\"only the reply creator is allowed to edit it\")\n\t}\n\n\treply.Update(\"\", body)\n\n\tstd.Emit(\n\t\t\"ReplyEdited\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"body\", body,\n\t)\n}\n\n// InviteMember adds a member to the realm or to a boards.\n//\n// A role can optionally be specified to be assigned to the new member.\n// Board ID is only required when inviting a member to a board.\nfunc InviteMember(boardID BoardID, user std.Address, role Role) {\n\tassertUserAddressIsValid(user)\n\tassertMembersUpdateIsEnabled(boardID)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{user, role}\n\tperms.WithPermission(caller, PermissionMemberInvite, args, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif err := perms.AddUser(user, role); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"MemberInvited\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", user.String(),\n\t\t\t\"role\", string(role),\n\t\t)\n\t})\n}\n\n// RemoveMember removes a member from the realm or a boards.\n//\n// Board ID is only required when removing a member from board.\nfunc RemoveMember(boardID BoardID, member std.Address) {\n\tassertMembersUpdateIsEnabled(boardID)\n\tassertMemberAddressIsValid(member)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\tperms.WithPermission(caller, PermissionMemberRemove, Args{member}, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif !perms.RemoveUser(member) {\n\t\t\tpanic(\"member not found\")\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"MemberRemoved\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", member.String(),\n\t\t)\n\t})\n}\n\n// IsMember checks if an user is a member of the realm or a board.\n//\n// Board ID is only required when checking if a user is a member of a board.\nfunc IsMember(boardID BoardID, user std.Address) bool {\n\tassertUserAddressIsValid(user)\n\n\tif boardID != 0 {\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tperms := mustGetPermissions(boardID)\n\treturn perms.HasUser(user)\n}\n\n// HasMemberRole checks if a realm or board member has a specific role assigned.\n//\n// Board ID is only required when checking a member of a board.\nfunc HasMemberRole(boardID BoardID, member std.Address, role Role) bool {\n\tassertMemberAddressIsValid(member)\n\n\tif boardID != 0 {\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tperms := mustGetPermissions(boardID)\n\treturn perms.HasRole(member, role)\n}\n\n// ChangeMemberRole changes the role of a realm or board member.\n//\n// Board ID is only required when changing the role for a member of a board.\nfunc ChangeMemberRole(boardID BoardID, member std.Address, role Role) {\n\tassertMemberAddressIsValid(member)\n\tassertMembersUpdateIsEnabled(boardID)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{boardID, member, role}\n\tperms.WithPermission(caller, PermissionRoleChange, args, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif err := perms.SetUserRoles(member, role); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"RoleChanged\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", member.String(),\n\t\t\t\"newRole\", string(role),\n\t\t)\n\t})\n}\n\n// IterateRealmMembers iterates realm members.\n// The iteration is done only for realm members, board members are not iterated.\nfunc IterateRealmMembers(offset int, fn UsersIterFn) (halted bool) {\n\tcount := gPerms.UsersCount() - offset\n\treturn gPerms.IterateUsers(offset, count, fn)\n}\n\n// IterateBoards iterates realm boards.\nfunc IterateBoards(offset int, fn func(ReadonlyBoard) bool) (halted bool) {\n\tcount := gBoardsByID.Size() - offset\n\treturn gBoardsByID.IterateByOffset(offset, count, func(_ string, v any) bool {\n\t\tboard, _ := v.(*Board)\n\t\treturn fn(readonlyBoard{board})\n\t})\n}\n\nfunc assertMemberAddressIsValid(member std.Address) {\n\tif !member.IsValid() {\n\t\tpanic(\"invalid member address\")\n\t}\n}\n\nfunc assertUserAddressIsValid(user std.Address) {\n\tif !user.IsValid() {\n\t\tpanic(\"invalid user address\")\n\t}\n}\n\nfunc assertHasBoardPermission(b *Board, user std.Address, p Permission) {\n\tif !b.perms.HasPermission(user, p) {\n\t\tpanic(\"unauthorized\")\n\t}\n}\n\nfunc assertBoardExists(id BoardID) {\n\tif _, found := getBoard(id); !found {\n\t\tpanic(\"board not found: \" + id.String())\n\t}\n}\n\nfunc assertBoardIsNotFrozen(b *Board) {\n\tif b.IsReadonly() {\n\t\tpanic(\"board is frozen\")\n\t}\n}\n\nfunc assertIsValidBoardName(name string) {\n\tsize := len(name)\n\tif size == 0 {\n\t\tpanic(\"board name is empty\")\n\t}\n\n\tif size \u003e MaxBoardNameLength {\n\t\tn := strconv.Itoa(MaxBoardNameLength)\n\t\tpanic(\"board name is too long, maximum allowed is \" + n + \" characters\")\n\t}\n\n\tif !reBoardName.MatchString(name) {\n\t\tpanic(\"board name contains invalid characters\")\n\t}\n}\n\nfunc assertThreadIsNotFrozen(t *Post) {\n\tif t.IsReadonly() {\n\t\tpanic(\"thread is frozen\")\n\t}\n}\n\nfunc assertReplyIsNotFrozen(r *Post) {\n\tif r.IsReadonly() {\n\t\tpanic(\"reply is frozen\")\n\t}\n}\n\nfunc assertNameIsNotEmpty(name string) {\n\tif name == \"\" {\n\t\tpanic(\"name is empty\")\n\t}\n}\n\nfunc assertTitleIsValid(title string) {\n\tif title == \"\" {\n\t\tpanic(\"title is empty\")\n\t}\n\n\tif len(title) \u003e MaxThreadTitleLength {\n\t\tn := strconv.Itoa(MaxThreadTitleLength)\n\t\tpanic(\"thread title is too long, maximum allowed is \" + n + \" characters\")\n\t}\n}\n\nfunc assertBodyIsNotEmpty(body string) {\n\tif body == \"\" {\n\t\tpanic(\"body is empty\")\n\t}\n}\n\nfunc assertBoardNameNotExists(name string) {\n\tif gBoardsByName.Has(name) {\n\t\tpanic(\"board already exists\")\n\t}\n}\n\nfunc assertThreadExists(b *Board, threadID PostID) {\n\tif _, found := b.GetThread(threadID); !found {\n\t\tpanic(\"thread not found: \" + threadID.String())\n\t}\n}\n\nfunc assertReplyExists(thread *Post, replyID PostID) {\n\tif _, found := thread.GetReply(replyID); !found {\n\t\tpanic(\"reply not found: \" + replyID.String())\n\t}\n}\n\nfunc assertThreadIsVisible(thread *Post) {\n\tif thread.IsHidden() {\n\t\tpanic(\"thread is hidden\")\n\t}\n}\n\nfunc assertReplyIsVisible(thread *Post) {\n\tif thread.IsHidden() {\n\t\tpanic(\"reply is hidden\")\n\t}\n}\n\nfunc assertReplyBodyIsValid(body string) {\n\tassertBodyIsNotEmpty(body)\n\n\tif len(body) \u003e MaxReplyLength {\n\t\tn := strconv.Itoa(MaxReplyLength)\n\t\tpanic(\"reply is too long, maximum allowed is \" + n + \" characters\")\n\t}\n\n\tif reDeniedReplyLinePrefixes.MatchString(body) {\n\t\tpanic(\"using Markdown headings, blockquotes or horizontal lines is not allowed in replies\")\n\t}\n}\n\nfunc assertMembersUpdateIsEnabled(boardID BoardID) {\n\tif boardID != 0 {\n\t\tassertRealmIsNotLocked()\n\t} else {\n\t\tassertRealmMembersAreNotLocked()\n\t}\n}\n"},{"name":"public_flag.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// SetFlaggingThreshold sets the number of flags required to hide a thread or comment.\n//\n// Threshold is only applicable within the board where it's setted.\nfunc SetFlaggingThreshold(boardID BoardID, threshold int) {\n\tif threshold \u003c 1 {\n\t\tpanic(\"invalid flagging threshold\")\n\t}\n\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{boardID, threshold}\n\tboard.perms.WithPermission(caller, PermissionBoardFlaggingUpdate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\n\t\tgFlaggingThresholds.Set(boardID.String(), threshold)\n\t\tstd.Emit(\n\t\t\t\"FlaggingThresholdUpdated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"threshold\", strconv.Itoa(threshold),\n\t\t)\n\t})\n}\n\n// GetFlaggingThreshold returns the number of flags required to hide a thread or comment within a board.\nfunc GetFlaggingThreshold(boardID BoardID) int {\n\tassertBoardExists(boardID)\n\treturn getFlaggingThreshold(boardID)\n}\n\n// FlagThread adds a new flag to a thread.\n//\n// Flagging requires special permissions and hides the thread when\n// the number of flags reaches a pre-defined flagging threshold.\nfunc FlagThread(boardID BoardID, threadID PostID, reason string) {\n\tboard := mustGetBoard(boardID)\n\n\t// Realm owners should be able to flag without permissions even when board is frozen\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner)\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertHasBoardPermission(board, caller, PermissionThreadFlag)\n\t}\n\n\tt, ok := board.GetThread(threadID)\n\tif !ok {\n\t\tpanic(\"post doesn't exist\")\n\t}\n\tassertThreadIsNotFrozen(t)\n\n\tf := Flag{\n\t\tUser:   caller,\n\t\tReason: reason,\n\t}\n\n\t// Realm owners can hide with a single flag\n\thide := flagItem(t, f, getFlaggingThreshold(boardID))\n\tif hide || isRealmOwner {\n\t\tt.SetVisible(false)\n\t}\n\n\tstd.Emit(\n\t\t\"ThreadFlagged\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"reason\", reason,\n\t)\n}\n\n// FlagReply adds a new flag to a comment or reply.\n//\n// Flagging requires special permissions and hides the comment or reply\n// when the number of flags reaches a pre-defined flagging threshold.\nfunc FlagReply(boardID BoardID, threadID, replyID PostID, reason string) {\n\tboard := mustGetBoard(boardID)\n\n\t// Realm owners should be able to flag without permissions even when board is frozen\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner)\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertHasBoardPermission(board, caller, PermissionReplyFlag)\n\t}\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsNotFrozen(thread)\n\n\tf := Flag{\n\t\tUser:   caller,\n\t\tReason: reason,\n\t}\n\n\t// Realm owners can hide with a single flag\n\thide := flagItem(reply, f, getFlaggingThreshold(boardID))\n\tif hide || isRealmOwner {\n\t\treply.SetVisible(false)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyFlagged\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"reason\", reason,\n\t)\n}\n"},{"name":"public_freeze.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// FreezeBoard freezes a board so no more threads and comments can be created or modified.\nfunc FreezeBoard(boardID BoardID) {\n\tsetBoardReadonly(boardID, true)\n}\n\n// UnfreezeBoard removes frozen status from a board.\nfunc UnfreezeBoard(boardID BoardID) {\n\tsetBoardReadonly(boardID, false)\n}\n\n// IsBoardFrozen checks if a board has been frozen.\nfunc IsBoardFrozen(boardID BoardID) bool {\n\tboard := mustGetBoard(boardID)\n\treturn board.IsReadonly()\n}\n\n// FreezeThread freezes a thread so thread cannot be replied, modified or deleted.\n//\n// Fails if board is frozen.\nfunc FreezeThread(boardID BoardID, threadID PostID) {\n\tsetThreadReadonly(boardID, threadID, true)\n}\n\n// UnfreezeThread removes frozen status from a thread.\n//\n// Fails if board is frozen.\nfunc UnfreezeThread(boardID BoardID, threadID PostID) {\n\tsetThreadReadonly(boardID, threadID, false)\n}\n\n// IsThreadFrozen checks if a thread has been frozen.\n//\n// Returns true if board is frozen.\nfunc IsThreadFrozen(boardID BoardID, threadID PostID) bool {\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\treturn board.IsReadonly() || thread.IsReadonly()\n}\n\n// UnfreezeReply removes frozen status from a reply.\n//\n// Fails when parent thread or board are frozen.\nfunc UnfreezeReply(boardID BoardID, threadID, replyID PostID) {\n\t// XXX: Is there a use case for also freezing replies?\n\tsetReplyReadonly(boardID, threadID, replyID, false)\n}\n\n// FreezeReply freezes a thread reply so it cannot be modified or deleted.\n//\n// Fails when parent thread or board are frozen.\nfunc FreezeReply(boardID BoardID, threadID, replyID PostID) {\n\tsetReplyReadonly(boardID, threadID, replyID, true)\n}\n\n// IsReplyFrozen checks if a thread reply has been frozen.\n//\n// Returns true when board or a parent thread is frozen.\nfunc IsReplyFrozen(boardID BoardID, threadID, replyID PostID) bool {\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\n\treturn board.IsReadonly() || thread.IsReadonly() || reply.IsReadonly()\n}\n\nfunc setReplyReadonly(boardID BoardID, threadID, replyID PostID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionReplyFreeze)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\n\tif isReadonly {\n\t\tassertReplyIsNotFrozen(reply)\n\t}\n\n\treply.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"ReplyFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n\nfunc setThreadReadonly(boardID BoardID, threadID PostID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionThreadFreeze)\n\n\tthread := mustGetThread(board, threadID)\n\tif isReadonly {\n\t\tassertThreadIsNotFrozen(thread)\n\t}\n\n\tthread.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"ThreadFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n\nfunc setBoardReadonly(boardID BoardID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tif isReadonly {\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionBoardFreeze)\n\n\tboard.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"BoardFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n"},{"name":"public_lock.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// LockRealm locks the realm making it readonly.\n//\n// WARNING: Realm can't be unlocked once locked.\n//\n// Realm can also be locked without locking realm members.\n// Realm members can be locked when locking the realm or afterwards.\n// This is relevant for two reasons, one so members can be modified after lock.\n// The other is for realm owners, which can delete threads and comments after lock.\nfunc LockRealm(lockRealmMembers bool) {\n\tassertRealmMembersAreNotLocked()\n\n\t// If realm members are not being locked assert that realm is no locked.\n\t// Members can be locked after locking the realm, in a second `LockRealm` call.\n\tif !lockRealmMembers {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tgPerms.WithPermission(caller, PermissionRealmLock, nil, func(Args) {\n\t\tgLocked.realm = true\n\t\tgLocked.realmMembers = lockRealmMembers\n\n\t\tstd.Emit(\n\t\t\t\"RealmLocked\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"lockRealmMembers\", strconv.FormatBool(lockRealmMembers),\n\t\t)\n\t})\n}\n\n// IsRealmLocked checks if boards realm has been locked.\nfunc IsRealmLocked() bool {\n\treturn gLocked.realm\n}\n\n// AreRealmMembersLocked checks if realm members has been locked.\nfunc AreRealmMembersLocked() bool {\n\treturn gLocked.realmMembers\n}\n\nfunc assertRealmIsNotLocked() { // TODO: Add filtests for locked realm case to all public functions\n\tif gLocked.realm {\n\t\tpanic(\"realm is locked\")\n\t}\n}\n\nfunc assertRealmMembersAreNotLocked() { // TODO: Add filtests for locked members case to all public member functions\n\tif gLocked.realmMembers {\n\t\tpanic(\"realm and members are locked\")\n\t}\n}\n"},{"name":"render.gno","body":"package boards2\n\nimport (\n\t\"net/url\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/mux\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nconst (\n\tpageSizeBoards  = 6\n\tpageSizeThreads = 6\n\tpageSizeReplies = 10\n)\n\nconst menuManageBoard = \"manageBoard\"\n\nfunc Render(path string) string {\n\trouter := mux.NewRouter()\n\trouter.HandleFunc(\"\", renderBoardsList)\n\trouter.HandleFunc(\"help\", renderHelp)\n\trouter.HandleFunc(\"admin-users\", renderMembers)\n\trouter.HandleFunc(\"{board}\", renderBoard)\n\trouter.HandleFunc(\"{board}/members\", renderMembers)\n\trouter.HandleFunc(\"{board}/{thread}\", renderThread)\n\trouter.HandleFunc(\"{board}/{thread}/{reply}\", renderReply)\n\n\trouter.NotFoundHandler = func(res *mux.ResponseWriter, _ *mux.Request) {\n\t\tres.Write(\"Path not found\")\n\t}\n\n\treturn router.Render(path)\n}\n\nfunc renderHelp(res *mux.ResponseWriter, _ *mux.Request) {\n\tres.Write(\"# Boards Help\\n\")\n\tif gHelp != \"\" {\n\t\tres.Write(gHelp)\n\t} else {\n\t\tres.Write(\"### Help content has not been uploaded\\n\")\n\t\tres.Write(\"Do you want to \")\n\t\tres.Write(newLink(\"upload boards help\", txlink.Call(\"SetHelp\", \"content\", \"\")))\n\t\tres.Write(\" ?\")\n\t}\n}\n\nfunc renderBoardsList(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tres.Write(\"# Boards\\n\\n\")\n\trenderBoardListMenu(res, req)\n\tres.Write(\"\\n\\n---\\n\")\n\n\tif gBoardsByID.Size() == 0 {\n\t\tlink := txlink.Call(\"CreateBoard\", \"name\", \"\")\n\t\tres.Write(\"### Currently there are no boards\\n\")\n\t\tres.Write(\"Be the first to \")\n\t\tres.Write(newLink(\"create a new board\", link))\n\t\tres.Write(\" !\")\n\n\t\treturn\n\t}\n\n\tp, err := pager.New(req.RawPath, gBoardsByID.Size(), pager.WithPageSize(pageSizeBoards))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\trender := func(_ string, v any) bool {\n\t\tboard := v.(*Board)\n\n\t\tres.Write(\"**\" + newLink(board.GetName(), board.GetURL()) + \"**  \\n\")\n\t\tres.Write(\"Created by \" + newUserLink(board.creator) + \" \")\n\t\tres.Write(\"on \" + board.createdAt.Format(dateFormat))\n\t\tres.Write(\", #\" + board.id.String() + \"  \\n\")\n\t\tres.Write(\"**\" + strconv.Itoa(board.threads.Size()) + \" threads\")\n\t\tif board.IsReadonly() {\n\t\t\tres.Write(\", read-only\")\n\t\t}\n\n\t\tres.Write(\"**\\n\\n\")\n\t\treturn false\n\t}\n\n\tres.Write(\"Sort by: \")\n\tr := realmpath.Parse(req.RawPath)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tres.Write(newLink(\"newest first\", r.String()))\n\t\tres.Write(\"\\n\\n\")\n\t\tgBoardsByID.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tres.Write(newLink(\"oldest first\", r.String()))\n\t\tres.Write(\"\\n\\n\")\n\t\tgBoardsByID.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tres.Write(\"\\n---\\n\")\n\t\tres.Write(pager.Picker(p))\n\t}\n}\n\nfunc renderBoardListMenu(res *mux.ResponseWriter, req *mux.Request) {\n\tpath := strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\n\tres.Write(newLink(\"Create Board\", txlink.Call(\"CreateBoard\", \"name\", \"\")))\n\tres.Write(\" • \")\n\tres.Write(newLink(\"List Admin Users\", path+\":admin-users\"))\n\tres.Write(\" • \")\n\tres.Write(newLink(\"Help\", path+\":help\"))\n\tres.Write(\"\\n\\n\")\n}\n\nfunc renderBoard(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tlink := newLink(\"create a new board\", txlink.Call(\"CreateBoard\", \"name\", name))\n\t\tres.Write(\"### The board you are looking for does not exist\\n\")\n\t\tres.Write(\"Do you want to \")\n\t\tres.Write(link)\n\t\tres.Write(\" ?\")\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tmenu := renderBoardMenu(board, req)\n\n\tres.Write(board.Render(req.RawPath, menu))\n}\n\nfunc renderBoardMenu(board *Board, req *mux.Request) string {\n\tvar (\n\t\tb               strings.Builder\n\t\tboardMembersURL = board.GetPath() + \"/members\"\n\t)\n\n\tif board.IsReadonly() {\n\t\tb.WriteString(newLink(\"List Members\", boardMembersURL))\n\t\tb.WriteString(\" • \")\n\t\tb.WriteString(newLink(\"Unfreeze Board\", board.GetUnfreezeFormURL()))\n\t\tb.WriteString(\"\\n\")\n\t} else {\n\t\tb.WriteString(newLink(\"Create Thread\", board.GetPostFormURL()))\n\t\tb.WriteString(\" • \")\n\n\t\tmenu := getCurrentMenu(req.RawPath)\n\t\tif menu == menuManageBoard {\n\t\t\tb.WriteString(\"**Manage Board**\")\n\t\t} else {\n\t\t\tb.WriteString(newLink(\"Manage Board\", menuURL(menuManageBoard)))\n\t\t}\n\n\t\tb.WriteString(\"  \\n\")\n\n\t\tif menu == menuManageBoard {\n\t\t\tb.WriteString(\"↳\")\n\t\t\tb.WriteString(newLink(\"Invite Member\", board.GetInviteMemberFormURL()))\n\t\t\tb.WriteString(\" • \")\n\t\t\tb.WriteString(newLink(\"List Members\", boardMembersURL))\n\t\t\tb.WriteString(\" • \")\n\t\t\tb.WriteString(newLink(\"Freeze Board\", board.GetFreezeFormURL()))\n\t\t\tb.WriteString(\"\\n\\n\")\n\t\t}\n\t}\n\n\treturn b.String()\n}\n\nfunc renderThread(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tres.Write(\"Board does not exist: \" + name)\n\t\treturn\n\t}\n\n\trawID := req.GetVar(\"thread\")\n\ttID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid thread ID: \" + rawID)\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tthread, found := board.GetThread(PostID(tID))\n\tif !found {\n\t\tres.Write(\"Thread does not exist with ID: \" + rawID)\n\t} else if thread.IsHidden() {\n\t\tres.Write(\"Thread with ID: \" + rawID + \" has been flagged as inappropriate\")\n\t} else {\n\t\tres.Write(thread.Render(req.RawPath, \"\", 5))\n\t}\n}\n\nfunc renderReply(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tres.Write(\"Board does not exist: \" + name)\n\t\treturn\n\t}\n\n\trawID := req.GetVar(\"thread\")\n\ttID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid thread ID: \" + rawID)\n\t\treturn\n\t}\n\n\trawID = req.GetVar(\"reply\")\n\trID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid reply ID: \" + rawID)\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tthread, found := board.GetThread(PostID(tID))\n\tif !found {\n\t\tres.Write(\"Thread does not exist with ID: \" + req.GetVar(\"thread\"))\n\t\treturn\n\t}\n\n\treply, found := thread.GetReply(PostID(rID))\n\tif !found {\n\t\tres.Write(\"Reply does not exist with ID: \" + rawID)\n\t\treturn\n\t}\n\n\t// Call render even for hidden replies to display children.\n\t// Original comment content will be hidden under the hood.\n\t// See: #3480\n\tres.Write(reply.RenderInner())\n}\n\nfunc renderMembers(res *mux.ResponseWriter, req *mux.Request) {\n\tboardID := BoardID(0)\n\tperms := gPerms\n\tname := req.GetVar(\"board\")\n\tif name != \"\" {\n\t\tv, found := gBoardsByName.Get(name)\n\t\tif !found {\n\t\t\tres.Write(\"### Board not found\")\n\t\t\treturn\n\t\t}\n\n\t\tboard := v.(*Board)\n\t\tboardID = board.GetID()\n\t\tperms = board.perms\n\n\t\tres.Write(\"# \" + board.GetName() + \" Members\\n\")\n\t\tres.Write(\"### These are the board members\\n\\n\")\n\t} else {\n\t\tres.Write(\"# Admin Users\\n\")\n\t\tres.Write(\"### These are the admin users of the realm\\n\\n\")\n\t}\n\n\t// Create a pager with a small page size to reduce\n\t// the number of username lookups per page.\n\tp, err := pager.New(req.RawPath, perms.UsersCount(), pager.WithPageSize(5))\n\tif err != nil {\n\t\tres.Write(err.Error())\n\t\treturn\n\t}\n\n\tres.Write(\"| Member | Role | Actions |\\n| --- | --- | --- |\\n\")\n\tperms.IterateUsers(p.Offset(), p.PageSize(), func(u User) bool {\n\t\tres.Write(\"| \")\n\t\tres.Write(newUserLink(u.Address))\n\t\tres.Write(\" | \")\n\t\tres.Write(rolesToString(u.Roles))\n\t\tres.Write(\" | \")\n\t\tres.Write(newLink(\"remove\", txlink.Call(\n\t\t\t\"RemoveMember\",\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", u.Address.String(),\n\t\t)))\n\t\tres.Write(\" • \")\n\t\tres.Write(newLink(\"change role\", txlink.Call(\n\t\t\t\"ChangeMemberRole\",\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", u.Address.String(),\n\t\t\t\"role\", \"\",\n\t\t)))\n\t\tres.Write(\" |\\n\")\n\t\treturn false\n\t})\n\n\tif p.HasPages() {\n\t\tres.Write(\"\\n\\n\" + pager.Picker(p))\n\t}\n}\n\nfunc renderNotice(res *mux.ResponseWriter) {\n\tif gNotice == \"\" {\n\t\treturn\n\t}\n\n\tres.Write(\"\u003e \")\n\tres.Write(gNotice)\n\tres.Write(\"\\n\\n\")\n}\n\nfunc rolesToString(roles []Role) string {\n\tif len(roles) == 0 {\n\t\treturn \"\"\n\t}\n\n\tnames := make([]string, len(roles))\n\tfor i, r := range roles {\n\t\tnames[i] = string(r)\n\t}\n\treturn strings.Join(names, \", \")\n}\n\nfunc menuURL(name string) string {\n\t// TODO: Menu URL works because no other GET arguments are being used\n\treturn \"?menu=\" + name\n}\n\nfunc getCurrentMenu(rawURL string) string {\n\t_, rawQuery, found := strings.Cut(rawURL, \"?\")\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\tquery, _ := url.ParseQuery(rawQuery)\n\treturn query.Get(\"menu\")\n}\n"},{"name":"z_0_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tbid := boards2.CreateBoard(\"test123\")\n\tprintln(\"ID =\", bid)\n}\n\n// Output:\n// ID = 1\n"},{"name":"z_0_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"\")\n}\n\n// Error:\n// board name is empty\n"},{"name":"z_0_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tboardName = \"test123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(boardName)\n}\n\nfunc main() {\n\tboards2.CreateBoard(boardName)\n}\n\n// Error:\n// board already exists\n"},{"name":"z_0_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n}\n\n// Error:\n// addresses are not allowed as board name\n"},{"name":"z_0_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"gnoland\")\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_0_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar name = strings.Repeat(\"X\", boards2.MaxBoardNameLength+1)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(name)\n}\n\n// Error:\n// board name is too long, maximum allowed is 50 characters\n"},{"name":"z_0_h_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname   = \"test123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\tboards2.InviteMember(0, member, boards2.RoleOwner) // Operate on realm DAO members instead of individual boards\n\ttesting.SetOriginCaller(member)\n\tusers.Register(name)\n}\n\nfunc main() {\n\tbid := boards2.CreateBoard(name)\n\tprintln(\"ID =\", bid)\n}\n\n// Output:\n// ID = 1\n"},{"name":"z_0_i_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"test123\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_10_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\n\t// Invite a moderator to the new board\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\n\t// Create a new thread as a moderator\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_10_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.FlagThread(404, 1, \"\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_10_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Make the next call as an uninvited user\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_10_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, 404, \"\")\n}\n\n// Error:\n// post doesn't exist\n"},{"name":"z_10_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// item flag count threshold exceeded: 1\n"},{"name":"z_10_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to flag threads\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\ttesting.SetOriginCaller(moderator)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_10_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with a specific flagging threshold\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Invite a moderator to the new board\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\n\t// Create a new thread and flag it as a moderator\n\ttesting.SetOriginCaller(moderator)\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// item has been already flagged by a current user\n"},{"name":"z_10_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with flagging threshold greater than 1\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Create a thread so the realm owner can flag and hide it with a single flag\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\t// Also freeze board to make sure that realm owner can still flag the thread\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_11_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, body)\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_11_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"\", \"bar\")\n}\n\n// Error:\n// title is empty\n"},{"name":"z_11_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_11_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.EditThread(404, 1, \"Foo\", \"bar\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_11_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_11_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"bar\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_11_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to edit threads\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, body)\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_11_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid   boards2.BoardID\n\tpid   boards2.PostID\n\ttitle = strings.Repeat(\"X\", boards2.MaxThreadTitleLength+1)\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, \"bar\")\n}\n\n// Error:\n// thread title is too long, maximum allowed is 100 characters\n"},{"name":"z_12_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbody  = \"Test reply\"\n\tpath  = \"test-board/1/2\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, body)\n\n\t// Render content must contain the modified reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \"+body+\"\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_12_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbody  = \"Test reply\"\n\tpath  = \"test-board/1/2\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Create a reply and a sub reply\n\tparentRID := boards2.CreateReply(bid, tid, 0, \"Parent\")\n\trid = boards2.CreateReply(bid, tid, parentRID, \"Child\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, body)\n\n\t// Render content must contain the modified reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e \"+body+\"\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_12_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.EditReply(404, 1, 0, \"body\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_12_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, 404, 0, \"body\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_12_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, 404, \"body\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_12_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"new body\")\n}\n\n// Error:\n// only the reply creator is allowed to edit it\n"},{"name":"z_12_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Flag the reply so it's hidden\n\tboards2.FlagReply(bid, tid, rid, \"reason\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"body\")\n}\n\n// Error:\n// reply is hidden\n"},{"name":"z_12_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_13_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_13_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.FlagReply(404, 1, 1, \"\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_13_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, 404, 1, \"\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_13_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, 404, \"\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_13_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// item flag count threshold exceeded: 1\n"},{"name":"z_13_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_13_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Invite a member using a role with permission to flag replies\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\ttesting.SetOriginCaller(moderator)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_13_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with flagging threshold greater than 1\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Create a reply so the realm owner can flag and hide it with a single flag\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\t// Also freeze board to make sure that realm owner can still flag the reply\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\"))\n}\n\n// Output:\n// true\n"},{"name":"z_14_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Ensure reply doesn't exist\n\tprintln(boards2.Render(\"test-board/1/2\"))\n}\n\n// Output:\n// Reply does not exist with ID: 2\n"},{"name":"z_14_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.DeleteReply(404, 1, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_14_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, 404, 1)\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_14_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, 404)\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_14_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\trid = boards2.CreateReply(bid, tid, 0, \"Parent\")\n\tboards2.CreateReply(bid, tid, rid, \"Child reply\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Render content must contain the releted message instead of reply's body\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e This reply has been deleted\\n\"))\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e Child reply\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_14_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Call using a user that has not permission to delete replies\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_14_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Invite a member using a role with permission to delete replies\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(member)\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Ensure reply doesn't exist\n\tprintln(boards2.Render(\"test-board/1/2\"))\n}\n\n// Output:\n// Reply does not exist with ID: 2\n"},{"name":"z_15_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"Foo\", \"bar\")\n\tboards2.FlagThread(srcBID, srcTID, \"idk\")\n}\n\nfunc main() {\n\t// Repost should fail if source thread is flagged\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_15_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID = 1024\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n}\n\nfunc main() {\n\t// Repost should fail if source thread doesn't exist\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// thread does not exist with ID: 1024\n"},{"name":"z_15_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"Foo\", \"bar\")\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_15_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/ufmt\"\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"original title\", \"original text\")\n}\n\nfunc main() {\n\t// Success case\n\ttID := boards2.CreateRepost(srcBID, srcTID, \"repost title\", \"repost text\", dstBID)\n\tp := ufmt.Sprintf(\"dst-board/%s\", tID)\n\tout := boards2.Render(p)\n\n\tprintln(strings.Contains(out, \"original text\"))\n\tprintln(strings.Contains(out, \"repost title\"))\n\tprintln(strings.Contains(out, \"repost text\"))\n}\n\n// Output:\n// true\n// true\n// true\n"},{"name":"z_15_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Create a board with a thread\n\torigBID := boards2.CreateBoard(\"origin-board\")\n\torigTID := boards2.CreateThread(origBID, \"title\", \"text\")\n\n\t// Create a second board and repost a thread using an empty title\n\tsrcBID = boards2.CreateBoard(\"source-board\")\n\tsrcTID = boards2.CreateRepost(origBID, origTID, \"original title\", \"original text\", srcBID)\n\n\t// Create a third board to try reposting the repost\n\tdstBID = boards2.CreateBoard(\"destination-board\")\n}\n\nfunc main() {\n\tboards2.CreateRepost(srcBID, srcTID, \"repost title\", \"repost text\", dstBID)\n}\n\n// Error:\n// reposting a thread that is a repost is not allowed\n"},{"name":"z_16_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(bid, 4)\n\n\t// Ensure that flagging threshold changed\n\tprintln(boards2.GetFlaggingThreshold(bid))\n}\n\n// Output:\n// 4\n"},{"name":"z_16_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nconst bid boards2.BoardID = 404\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(bid, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_16_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(1, 0)\n}\n\n// Error:\n// invalid flagging threshold\n"},{"name":"z_17_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.FreezeBoard(bid)\n\tprintln(boards2.IsBoardFrozen(bid))\n}\n\n// Output:\n// true\n"},{"name":"z_17_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FreezeBoard(bid)\n}\n\n// Error:\n// board is frozen\n"},{"name":"z_18_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbid   = boards2.BoardID(0)                                      // Operate on realm instead of individual boards\n)\n\nvar perms boards2.Permissions\n\nfunc init() {\n\t// Create a new permissions instance without users\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n\n\t// Owner that setted new permissions is not a member of the new permissions\n\tprintln(boards2.IsMember(bid, owner))\n}\n\n// Output:\n// false\n"},{"name":"z_18_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\tuser = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid  = boards2.BoardID(0)                                      // Operate on realm instead of individual boards\n)\n\nvar perms boards2.Permissions\n\nfunc init() {\n\t// Create a new permissions instance\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_18_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tperms boards2.Permissions\n\tbid   boards2.BoardID\n)\n\nfunc init() {\n\t// Create a new permissions instance without users\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foobar\")\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n\n\t// Owner that setted new board permissions is not a member of the new permissions\n\tprintln(boards2.IsMember(bid, owner))\n}\n\n// Output:\n// false\n"},{"name":"z_19_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\t// Attempt to freeze a thread on frozen board\n\tboards2.FreezeThread(bid, tid)\n}\n\n// Error:\n// board is frozen\n"},{"name":"z_19_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// Attempt to freeze a frozen thread\n\tboards2.FreezeThread(bid, tid)\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_19_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FreezeThread(bid, tid)\n\tprintln(boards2.IsThreadFrozen(bid, tid))\n}\n\n// Output:\n// true\n"},{"name":"z_1_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// true\n"},{"name":"z_1_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tuser  = std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\t// Add an admin member\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\t// Next call will be done by the admin member\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, boards2.RoleOwner)\n}\n\n// Error:\n// only owners are allowed to invite other owners\n"},{"name":"z_1_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tuser  = std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n\trole  = boards2.RoleAdmin\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\t// Add an admin member\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\t// Next call will be done by the admin member\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// true\n"},{"name":"z_1_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(0, user, boards2.Role(\"foobar\")) // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// invalid role: foobar\n"},{"name":"z_1_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\trole  = boards2.RoleOwner\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foo123\") // Operate on board DAO members\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(0, user, role)) // Operate on realm DAO\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_1_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, user, role)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n}\n\n// Error:\n// user already exists\n"},{"name":"z_1_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(0, \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", boards2.RoleGuest)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_20_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// Attempt to freeze a reply on frozen thread\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_20_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\nfunc main() {\n\t// Attempt to freeze already frozen reply\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\n// Error:\n// reply is frozen\n"},{"name":"z_20_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n}\n\nfunc main() {\n\t// reply frozen\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.FreezeReply(bid, tid, rid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeReply(bid, tid, rid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\n\t// thread frozen\n\tboards2.FreezeThread(bid, tid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeThread(bid, tid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\n\t// board frozen\n\tboards2.FreezeBoard(bid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeBoard(bid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n}\n\n// Output:\n// false\n// true\n// false\n// true\n// false\n// true\n// false\n"},{"name":"z_20_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n}\n\nfunc main() {\n\t// unfrozen thread - should work\n\tr2 := boards2.CreateReply(bid, tid, rid, \"child 1\")\n\n\t// frozen thread - can't reply\n\tboards2.FreezeReply(bid, tid, rid)\n\tboards2.CreateReply(bid, tid, r2, \"child 2\")\n}\n\n// Error:\n// reply is frozen\n"},{"name":"z_21_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"This is a test realm message\")\n\n\t// Render content must contain the message\n\tcontent := boards2.Render(\"\")\n\tprintln(strings.HasPrefix(content, \"\u003e This is a test realm message\\n\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_21_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Set an initial message so it can be cleared\n\tboards2.SetRealmNotice(\"This is a test realm message\")\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"\")\n\n\t// Render content must contain the message\n\tcontent := boards2.Render(\"\")\n\tprintln(strings.HasPrefix(content, \"\u003e This is a test realm message\\n\\n\"))\n\tprintln(strings.HasPrefix(content, \"# Boards\"))\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_21_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\t// Call realm with a user that has not permission to set realm notice\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"Foo\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_22_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(false)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// false\n"},{"name":"z_22_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.LockRealm(false)\n}\n\nfunc main() {\n\t// Should fail because realm is already locked\n\tboards2.LockRealm(false)\n}\n\n// Error:\n// realm is locked\n"},{"name":"z_22_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\t// Call realm with a user that has not permission to lock the realm\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(false)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_22_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(true)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_22_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.LockRealm(true)\n}\n\nfunc main() {\n\t// Should fail because realm is already locked\n\tboards2.LockRealm(true)\n}\n\n// Error:\n// realm and members are locked\n"},{"name":"z_22_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Lock the realm without locking realm members\n\tboards2.LockRealm(false)\n}\n\nfunc main() {\n\tboards2.LockRealm(true)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_23_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleOwner)\n\tboards2.InviteMember(bid, \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\", boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.IterateRealmMembers(0, func(u boards2.User) bool {\n\t\tprintln(u.Address, string(u.Roles[0]))\n\t\treturn false\n\t})\n}\n\n// Output:\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj owner\n// g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5 admin\n"},{"name":"z_24_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid := boards2.CreateBoard(\"test123\")\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleAdmin)\n\n\tbid = boards2.CreateBoard(\"foo123\")\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleOwner)\n\tboards2.InviteMember(bid, \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\", boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.IterateBoards(0, func(b boards2.ReadonlyBoard) bool {\n\t\tprintln(b.ID().String())\n\t\tprintln(b.Name())\n\n\t\tb.IterateMembers(0, b.MembersCount(), func(u boards2.User) bool {\n\t\t\tprintln(u.Address, string(u.Roles[0]))\n\t\t\treturn false\n\t\t})\n\t})\n}\n\n// Output:\n// 1\n// test123\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj admin\n// 2\n// foo123\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj owner\n// g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5 admin\n"},{"name":"z_2_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tpath    = \"test-board/1/2\"\n\tcomment = \"Test comment\"\n)\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\trid := boards2.CreateReply(bid, tid, 0, comment)\n\n\t// Ensure that returned ID is right\n\tprintln(rid == 2)\n\n\t// Render content must contain the reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \"+comment+\"\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_2_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateReply(404, 1, 0, \"comment\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_2_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, 404, 0, \"comment\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_2_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 404, \"comment\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_2_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Hide thread by flagging it so reply can't be submitted\n\tboards2.FlagThread(bid, tid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"Test reply\")\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_2_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply1\")\n\n\t// Hide thread by flagging it so reply of a reply can't be submitted\n\tboards2.FlagThread(bid, tid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"reply1.1\")\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_2_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"thread\", \"thread\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply1\")\n\n\t// Hide reply by flagging it so sub reply can't be submitted\n\tboards2.FlagReply(bid, tid, rid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"reply1.1\")\n}\n\n// Error:\n// replying to a hidden or frozen reply is not allowed\n"},{"name":"z_2_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"Test reply\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_2_i_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_2_j_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tpath    = \"test-board/1/2\"\n\tcomment = \"Second comment\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"First comment\")\n}\n\nfunc main() {\n\trid2 := boards2.CreateReply(bid, tid, rid, comment)\n\n\t// Ensure that returned ID is right\n\tprintln(rid2 == 3)\n\n\t// Render content must contain the sub-reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e \"+comment+\"\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_2_k_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tcomment = \"Second comment\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"Parent comment\")\n\n\t// Flag parent post so it's hidden\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"Sub comment\")\n}\n\n// Error:\n// replying to a hidden or frozen reply is not allowed\n"},{"name":"z_2_l_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// cannot reply to a frozen thread\n\tboards2.CreateReply(bid, tid, 0, \"foobar\")\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_2_m_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, strings.Repeat(\"x\", boards2.MaxReplyLength+1))\n}\n\n// Error:\n// reply is too long, maximum allowed is 300 characters\n"},{"name":"z_2_n_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"\u003e Markdown blockquote\")\n}\n\n// Error:\n// using Markdown headings, blockquotes or horizontal lines is not allowed in replies\n"},{"name":"z_3_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname    = \"foo123\"\n\tnewName = \"bar123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n\n\t// Ensure board is renamed by the default board owner\n\tbid2, _ := boards2.GetBoardIDFromName(newName)\n\tprintln(\"IDs match =\", bid == bid2)\n}\n\n// Output:\n// IDs match = true\n"},{"name":"z_3_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"\")\n}\n\n// Error:\n// board name is empty\n"},{"name":"z_3_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, name)\n}\n\n// Error:\n// board already exists\n"},{"name":"z_3_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RenameBoard(\"unexisting\", \"foo\")\n}\n\n// Error:\n// board does not exist with name: unexisting\n"},{"name":"z_3_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n}\n\n// Error:\n// addresses are not allowed as board name\n"},{"name":"z_3_f_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n\n\t// Ensure board is renamed by another board owner\n\tbid2, _ := boards2.GetBoardIDFromName(newName)\n\tprintln(\"IDs match =\", bid == bid2)\n}\n\n// Output:\n// IDs match = true\n"},{"name":"z_3_g_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tmember2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n\n\t// Invite a new member that doesn't own the user that matches the new board name\n\tboards2.InviteMember(bid, member2, boards2.RoleOwner)\n\ttesting.SetOriginCaller(member2)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_3_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"short\")\n}\n\n// Error:\n// the minimum allowed board name length is 6 characters\n"},{"name":"z_3_i_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tmember2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n\n\t// Invite a new member that doesn't own the user that matches the new board name\n\tboards2.InviteMember(bid, member2, boards2.RoleOwner)\n\ttesting.SetOriginCaller(member2)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_3_j_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"barbaz\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_4_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tnewRole = boards2.RoleOwner\n\tbid     = boards2.BoardID(0) // Operate on realm DAO instead of individual boards\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole)\n\n\t// Ensure that new role has been changed\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tnewRole = boards2.RoleAdmin\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foo123\")\n\tboards2.InviteMember(bid, member, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole)\n\n\t// Ensure that new role has been changed\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\towner2 = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tadmin  = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, owner2, boards2.RoleOwner)\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, owner2, boards2.RoleAdmin)\n}\n\n// Error:\n// admins are not allowed to remove the Owner role\n"},{"name":"z_4_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tadmin2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\tboards2.InviteMember(bid, admin2, boards2.RoleAdmin)\n\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, admin2, boards2.RoleOwner)\n}\n\n// Error:\n// admins are not allowed to promote members to Owner\n"},{"name":"z_4_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid     = boards2.BoardID(0)                                      // Operate on realm DAO members instead of individual boards\n\tnewRole = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole) // Owner can promote other members to Owner\n\n\t// Ensure that new role has been changed to owner\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, admin, boards2.Role(\"foo\"))\n}\n\n// Error:\n// invalid role: foo\n"},{"name":"z_4_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, \"invalid address\", boards2.RoleModerator)\n}\n\n// Error:\n// invalid member address\n"},{"name":"z_4_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(0, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleGuest)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_5_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, user, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.RemoveMember(bid, user)\n\n\t// Check that user is not a member\n\tprintln(boards2.IsMember(bid, user))\n}\n\n// Output:\n// false\n"},{"name":"z_5_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RemoveMember(0, \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\") // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_5_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RemoveMember(0, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// member not found\n"},{"name":"z_6_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\trole   = boards2.RoleGuest\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, member, role)\n}\n\nfunc main() {\n\tprintln(boards2.HasMemberRole(bid, member, role))\n\tprintln(boards2.HasMemberRole(bid, member, \"invalid\"))\n\tprintln(boards2.IsMember(bid, member))\n}\n\n// Output:\n// true\n// false\n// true\n"},{"name":"z_6_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleGuest\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tprintln(boards2.HasMemberRole(bid, user, role))\n\tprintln(boards2.IsMember(bid, user))\n}\n\n// Output:\n// false\n// false\n"},{"name":"z_7_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"test123\"\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(name)\n}\n\nfunc main() {\n\tbid2, found := boards2.GetBoardIDFromName(name)\n\tprintln(found)\n\tprintln(bid2 == bid)\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_7_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tbid, found := boards2.GetBoardIDFromName(\"foobar\")\n\tprintln(found)\n\tprintln(bid == 0)\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_8_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\ttid := boards2.CreateThread(bid, title, body)\n\n\t// Ensure that returned ID is right\n\tprintln(tid == 1)\n\n\t// Thread should not be frozen by default\n\tprintln(boards2.IsThreadFrozen(bid, tid))\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// false\n// true\n// true\n"},{"name":"z_8_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateThread(404, \"Foo\", \"bar\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_8_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_8_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"\", \"bar\")\n}\n\n// Error:\n// title is empty\n"},{"name":"z_8_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_9_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, title, body)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n\n\t// Ensure thread doesn't exist\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread does not exist with ID: 1\n"},{"name":"z_9_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.DeleteThread(404, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_9_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, 404)\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_9_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Call using a user that has not permission to delete threads\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_9_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to delete threads\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(member)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n\n\t// Ensure thread doesn't exist\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread does not exist with ID: 1\n"}],"type":null,"info":null},"deposit":""}],"fee":{"gas_wanted":"90000000","gas_fee":"900000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"gnJ8ujjv5sZ2BRs9+o9H1pwPssdx7HMIuVFxglK29nscd2/Mvno1njD62W34l0HDylMaZi0ZQvuEoc3UvJoVDg=="}],"memo":""},"metadata":{"timestamp":"1743761702"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"RemoveMember","args":["0","g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"M1Ymz+sc6Ah+cXI4w3jPs42+VfeMM0rvUiuCYRi7ijSH0O+hFlo8PddM/tKP6hFE9KvxVcUAHEJ4dCcUPc0sDg=="}],"memo":""},"metadata":{"timestamp":"1743761807"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["EmptyWithManyMembers"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"FI9PELceRDvc7jgz/0a956F+E99yblupgpWGITLrjNPUIfmFUcd/OgvwZExSVtAWQzKfzxiRcbsp5VKl71asAQ=="}],"memo":""},"metadata":{"timestamp":"1743761888"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","owner"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"WHEC5gokamcHxoFgivNuo7lCfbXYvvngVlVBW6j0/cnhPieildjfDrP4lNjSp1Ranjszj/OW+zcujYuYoRCvDw=="}],"memo":""},"metadata":{"timestamp":"1743761893"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1e5hud66rs7ye4zgeqmqvwfhurs2mnf408hdqcl","owner"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"eP+1pHZjo0w5PPiytl+8J2OS6lPW0HJM6zPyqyVSM5QJPtYwdc1KZCUUlaBUuEAgxPnGhRHPK6DL/p1VKeutBg=="}],"memo":""},"metadata":{"timestamp":"1743761898"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5","admin"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"wWLEIyJ/NFW/EE0dCOOJJEjb9W9IoQJ6r9Gw5HNoCSiC/akWB+iX7XFUJ0b8iRgZC+RRIz3HfYrIJYvEckLBBw=="}],"memo":""},"metadata":{"timestamp":"1743761903"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk","moderator"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"4YYuEkQbudHlbHJiH94uRCP135S8wY4+vepmsJrOteRx1BxQDS8dJ6ULluVv+mzpjGNeLWsT8+A3FspSE2WhAg=="}],"memo":""},"metadata":{"timestamp":"1743761908"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1ym6zxff3xq7wfldcs3uyu7x7z40gstggcx8zdj","moderator"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"TfPGfEyK4rUTpc0BOknLykfMc+fCvWfnvnlV4Q+OniEKgKGnthDfeAL4COKyp5l1TYLIYYIvXLfj7i3Yz3BMAA=="}],"memo":""},"metadata":{"timestamp":"1743761913"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["TheNumber42"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"/E9jvQEjrmf8TQpRZuz2VPfGyh9RR/l2yXq6jtG9v9JWgxSLKgF13GzLqQk2/9kvJLWY8TCJwmb9Ij/VnYErAw=="}],"memo":""},"metadata":{"timestamp":"1743761918"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"TGWslXzdNOGeWEgsuoacsYO/12F1Oc2+uUIPWCWsZTU04agRN2Q5spfDaMTWqyLOJmTXD2ZuCTaouslHvlqiDQ=="}],"memo":""},"metadata":{"timestamp":"1743761918"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["2","What's your take on it\\?","Seen in many places, unknown to many"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"dutGYC9pHpI0TjDmBHh0AZDK5leriKaeJWTpdAC00p/Ik+5C3iUqpdNsodv9Kjf+xGNCO2q+v0xUCIrdoX6lCQ=="}],"memo":""},"metadata":{"timestamp":"1743761923"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["2","1","0","What do you mean\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"64qfuiDCsCiKcpM9YTZOWgcLxDI6sBCQyAA1JazuLZSwJEG4mow45VKUDu5H/wNQHovJw1lYCjuZxh1USTFoCQ=="}],"memo":""},"metadata":{"timestamp":"1743761928"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["2","1","0","よんじゅうに\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"b7YvD4Fwp8Uuo8oZrAe/vEM/PwFgB72a36CdNFOiy1qmqLSy7kcgMJ2mKFlS8XFgEqLdWTih3T0LI+HwKTUUDA=="}],"memo":""},"metadata":{"timestamp":"1743761933"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["2","1","2","Cuarenta y dos\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"RUPColJok5Mll5yAzY5YSZJTksOLMTuUCjF9Deh9fYaYpM8aYQ8OZ1gDtaUHgXEqHGNWf20J3XJn+38gYulGBw=="}],"memo":""},"metadata":{"timestamp":"1743761938"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["ThreadsExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lo6RAzFECaWg4V4ufdm0iyGUk1BECuoH2Z50IasYRO+Le36JMVqV244ybdgY9aKEUSMTt6TXKHBwLFXm8kHLCA=="}],"memo":""},"metadata":{"timestamp":"1743761943"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Seventh","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"JNLUtfHuMzHuKihYeo6YP+eeI83Kf1tqiLm3P3Ut3j5HLAHrUTzRhPCOZWfj02kFDMXFQCxhopDjH6IHpJc+Cw=="}],"memo":""},"metadata":{"timestamp":"1743761948"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Sixth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"wChF1AOQSLiH70+nfqr724NPS6ncM+9/MUI7snB+9oo90qdZTLpykRb2Vw3M4QlXaklKpyZa6e68JxwAbcAGDg=="}],"memo":""},"metadata":{"timestamp":"1743761953"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"TGWslXzdNOGeWEgsuoacsYO/12F1Oc2+uUIPWCWsZTU04agRN2Q5spfDaMTWqyLOJmTXD2ZuCTaouslHvlqiDQ=="}],"memo":""},"metadata":{"timestamp":"1743761953"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Fifth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ce7gZCweZZsVveSrctB1MFzQy+A42yVXKrb6eE1AQ6LC9xNYX7u/NMZ8jlBf7CY9bVKQjizmAGn4d4VS/c8QBw=="}],"memo":""},"metadata":{"timestamp":"1743761958"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Fourth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ONK458F4olsd1viauM8ltT9cChS9f0Cjsr0yddI+zD82FY0z66eHTEChizTBJuSTqobwR9IOy2RBYRIOd2b7BQ=="}],"memo":""},"metadata":{"timestamp":"1743761963"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Third","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"HkvgZ9qbjUvfdvPVhZtC4hZ2Moq/60EySnKPjwIIF0hMcOaX2Vp0a4/Px1TV9OlPP947BCdiGCgMs5VrclIxAQ=="}],"memo":""},"metadata":{"timestamp":"1743761968"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Second","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Vlh9vrbUPcyT82ggDxKdPf2YP15Qeq8Rxi7VdKEonEqzIIBDpE1GeEC46jDLwPjCjh0/lZrVoO/wiPNOtgqNAg=="}],"memo":""},"metadata":{"timestamp":"1743761973"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","First with many Replies","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"C23wmPhcRk0+N1r9uJCLooLumVO5oKbFXSPkDA28FL5YL7RnG+n3egMDQ+5ORci60kt/acy9YeLBemIG1nORCA=="}],"memo":""},"metadata":{"timestamp":"1743761978"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","First"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"+bv+0B0W1C77jLnUKUYosrUGGx7dqRtNnUCQUkj+NXbtJkRzp1em5hb4mzUKXe8/LOJCU6LaMk4RXkXMSeKEBw=="}],"memo":""},"metadata":{"timestamp":"1743761983"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","8","Sub First"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"SyRqCIAtRugUUjcvZHnDpM+xNHYCKhuaFjvAl/WkyyAmaox8S1iNPrEu440qyXAIycMTxKE1Okd7K4Xfvl5uBw=="}],"memo":""},"metadata":{"timestamp":"1743761988"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Second"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"wXngkn3sb9dOjedC5epIdtAWZFMh9tlfLVEQ+6JS/bWKXBSZuygmv30MZL+NpndHNWYOVQ9dY4D2vFJt4f+KCg=="}],"memo":""},"metadata":{"timestamp":"1743761993"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Third"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"/aLvz+Ck1qtC4FYDzN+DNw9kyCU/yHO2h9SGgQDwKPxkcFrJ4roPx/ijQMduenXk1zQWGjhzQhFL3ZLoHOIVBw=="}],"memo":""},"metadata":{"timestamp":"1743761998"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Fourth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"0VUVSqkKEyCdatSQqul+Dtrco5fyQCyqVUewzQwL/iM4OsBnKi2Xm/hddfPWVP4ikssl8M9bqbOg/wm6VtUMCQ=="}],"memo":""},"metadata":{"timestamp":"1743762003"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Fifth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Y4As5R5Ku9yC4l9p2KcKt28Mv4E781m0+8JZltuF+VESbxUO4bvoHxYFrXFF+4cJq3nlOKYfuIZeRGR8T15zBw=="}],"memo":""},"metadata":{"timestamp":"1743762008"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Sixth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"2sYJlBf3hnyFOYvceFtJHAZS4iV72AXWcxvhmsDYHuuJYAnmqo8Tqohbzw9Apz8zaV4G68hv0hObin8zYEJjDg=="}],"memo":""},"metadata":{"timestamp":"1743762013"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Seventh"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"bciLzjH0yqYkv0N/DROgJ6fKoTlntsSacclOal1SbTkPhbwKx1fzUZdzFUX2pqpUYbWCHfPqejELC3f3JqiHDw=="}],"memo":""},"metadata":{"timestamp":"1743762018"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Eigth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"T/9W3ONdAEJebO4OfnBAsx5KuEzmy1SRJlYGZbDbhEBMm9weVvcJsdyhsjDv43yzvNMi5TPvAEypAysM5SFUDg=="}],"memo":""},"metadata":{"timestamp":"1743762023"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Ninth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lBww/JJY5jAe6Yp9d7bMzTYzEyXLw8CwhJu1MGfEVeH6NBNVKQQChZ4Bw6+6Xf/U6nXGX3fZBZlgU23pYfZRDQ=="}],"memo":""},"metadata":{"timestamp":"1743762028"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Tenth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"FNOV19k/KZcAZiLnnj9dL5I/Z2H9uy78q4hEfqCyQorP4IQWBadQ33lb9v0UTysAEYdN5SFH9twXLa3hwt5uCg=="}],"memo":""},"metadata":{"timestamp":"1743762033"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Eleventh"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"c5rsN2ShhdgGV/QFkgjPYwoFz+nZzTN5D6O5Sc34hVw/65a/AYJ9pFNN7cgGrrhM92F/eyc+o1bogiTe3jG2AQ=="}],"memo":""},"metadata":{"timestamp":"1743762039"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["ReadOnlyExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Uh4cCbvD5LjfujyapBeI8cpVr878AQz9fulL4RtVqD9WkM87+VJZmX1sUBrlK2c/aiSWL3IvXvi4AaKDW3RTCQ=="}],"memo":""},"metadata":{"timestamp":"1743762044"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["4","Example Thread","This thread shouldn't be writable"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"SuviHYxOJW6qzH2Vs2CNmf/BmTzkEEw4DWruYbAXI93071HjJr3ihEOa9CK+FUxqwhbk9WUOUqxahUk+X8+pDg=="}],"memo":""},"metadata":{"timestamp":"1743762049"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"FreezeBoard","args":["4"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"oSE+5FxIYQscnX45WWpb9aCXE1ggMq7sB5bPS3Xa0qgatoBqbmocmY+Ysl/BcizTbi8h+xPko2HCkUVdGuqpCg=="}],"memo":""},"metadata":{"timestamp":"1743762054"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["RepostExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"uzJpZh/vVC+97Rl3m5WqNaQ9TlsBjEalM2YvZv7nIyALNvXTSdsS4vsEDq6aiTrSmV4RbA5I9L2oL0ha+ooHCQ=="}],"memo":""},"metadata":{"timestamp":"1743762059"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"TGWslXzdNOGeWEgsuoacsYO/12F1Oc2+uUIPWCWsZTU04agRN2Q5spfDaMTWqyLOJmTXD2ZuCTaouslHvlqiDQ=="}],"memo":""},"metadata":{"timestamp":"1743762059"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateRepost","args":["2","1","Custom repost title","Custom repost body","5"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tS/qoqaOeO0EBIZEucJtutazkgQig4hpfxYWpDYmZxIoMUIeB0jDOQabz2S9Z+WWoWeFima9iBuwByLUrN40BA=="}],"memo":""},"metadata":{"timestamp":"1743762064"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"SetRealmNotice","args":["A new [version](https://gno.land/r/devx000/gnoland/boards2/v1rc2) is available which fixes a couple of issues and explores a UI which is is more in line with classic Reddit"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"7gTJdYty5Cv0DaDjSATERd3qoXButVcEXkeRKjVLKhJuCeB00j+ypjNfua/NeoR5qP0TW9+o9mWkGlMSRxjqDw=="}],"memo":""},"metadata":{"timestamp":"1743762325"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"SetRealmNotice","args":["A new boards [version](https://gno.land/r/devx000/gnoland/boards2/v1rc2) is available which fixes a couple of issues and explores a UI which is is more in line with classic Reddit"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"mPl6StBd85ySY9dRxqROvZ4XNubqqHLJm14j2LJrXgaXL27pRGYD/L+Itj6VVd7MIDMikKTzgLuG0mp9wfadDA=="}],"memo":""},"metadata":{"timestamp":"1743762441"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"SetRealmNotice","args":["A new boards [version](https://gno.land/r/devx000/gnoland/boards2/v1rc2) is available which fixes a couple of issues and explores a UI which is more in line with classic Reddit"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"5KkcKraUgNGIZFxBPAPUOqeuhZI20b5XyOcQQ49vwiQ7VJGv3zW7mnoNO7OU/YpJ+3l0znz47MxvFgfFQeDZDQ=="}],"memo":""},"metadata":{"timestamp":"1743762466"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15dz69sch7fkhc9gk57hpe4qea77thmy20apu9x","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"VOB7lochh6szp7fzpzTlve6EpprFWCee+T8Rv304uBhG3j7Z/rMSIFJnnC2PDHM2jw0ZTSqNjxo3oi43j/C+Cg=="}],"memo":""},"metadata":{"timestamp":"1743762511"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"fyl8ho7k6wBs1e/2oviUBtw+6XXKqL1asv2ShDh8NaiJk7BtnlZvogzcPAlQzk+/5HE00Nmuoup+l34r/McCCw=="}],"memo":""},"metadata":{"timestamp":"1743762858"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"fyl8ho7k6wBs1e/2oviUBtw+6XXKqL1asv2ShDh8NaiJk7BtnlZvogzcPAlQzk+/5HE00Nmuoup+l34r/McCCw=="}],"memo":""},"metadata":{"timestamp":"1743762953"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1aykqe5ddemku5mwd3elmwtpj8jgss47xrqpag4","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"0ShwpG1mE9/t3ITmwO9tYQKM/7g2d91VFtjKBFnAddZeuhc80vDTjSU48huRm5/RlnnP6MReAD46SQidAb6LCQ=="}],"memo":""},"metadata":{"timestamp":"1743767985"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1dtuj65mgja87gh0c45pd3rt4cah0kkw9lzld4y","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"0s02zIJw9VO4+5U7asxJNnovMkCZllGQizbLOkDT1ZJF1cJfMriuy49XIzXeeweGqD0L4wVn79qxVta0Qyy2DA=="}],"memo":""},"metadata":{"timestamp":"1743768151"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"fyl8ho7k6wBs1e/2oviUBtw+6XXKqL1asv2ShDh8NaiJk7BtnlZvogzcPAlQzk+/5HE00Nmuoup+l34r/McCCw=="}],"memo":""},"metadata":{"timestamp":"1743769312"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1manfred47kzduec920z88wfr64ylksmdcedlf5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["test-manfred"]}],"fee":{"gas_wanted":"50000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"HCUoHp0ettEndXT1Lz3/G7wJjdj1G1pxJWCkmhFI7fo9Uq6mRDGDJE/1Db6YqAKE2AjoXgxMKbEkpVZ07xbpCw=="}],"memo":""},"metadata":{"timestamp":"1743774399"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1manfred47kzduec920z88wfr64ylksmdcedlf5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["6","testing testing","👋"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"G4roDfW4Y2Ja1pzuuSY72G5zebZ21n+IXBG9ke6vr9akFxpVjX5H7e5YJxTODCsNZ3ZfA4QUt4elOPQtNF02Bw=="}],"memo":""},"metadata":{"timestamp":"1743774450"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1etcvlu8zyuwnd7w0x0lcu4g2r7yzllyy62gpa5","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"9104212","gas_fee":"4742446ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"O0QUBaaAaAG0c3i/IzylrbwAguO2Q7+o9DpYEPNqPWjFASrxjR8m/tKnfShDymVNE6gTLtQoK3mwnmEkSQg2DQ=="}],"memo":""},"metadata":{"timestamp":"1743775038"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"FD0rOrehF5kVI3GjDvjSesctM65aT6B/uMqKX++ijrT298aquHuoU0AGzkvohCWNtAjiVSxYSM2VOCix2Z8mCw=="}],"memo":""},"metadata":{"timestamp":"1743775997"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"FD0rOrehF5kVI3GjDvjSesctM65aT6B/uMqKX++ijrT298aquHuoU0AGzkvohCWNtAjiVSxYSM2VOCix2Z8mCw=="}],"memo":""},"metadata":{"timestamp":"1743776002"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"FD0rOrehF5kVI3GjDvjSesctM65aT6B/uMqKX++ijrT298aquHuoU0AGzkvohCWNtAjiVSxYSM2VOCix2Z8mCw=="}],"memo":""},"metadata":{"timestamp":"1743776017"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"UpdateStatus","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"0qTPyHYUuk1zcfyVxCip3dwTs5dk+4maTcF5L0eaRxQIUZZZiPptrBS+zIJi+akA3e6Rd0EKE/JuiR5bR6IXCA=="}],"memo":""},"metadata":{"timestamp":"1743776022"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"FD0rOrehF5kVI3GjDvjSesctM65aT6B/uMqKX++ijrT298aquHuoU0AGzkvohCWNtAjiVSxYSM2VOCix2Z8mCw=="}],"memo":""},"metadata":{"timestamp":"1743776027"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"fyl8ho7k6wBs1e/2oviUBtw+6XXKqL1asv2ShDh8NaiJk7BtnlZvogzcPAlQzk+/5HE00Nmuoup+l34r/McCCw=="}],"memo":""},"metadata":{"timestamp":"1743776083"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14n0zsnsk054uxwvnwmmqyrq6e87ynk5vq98qqp","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"5LWQQjwoLe8Y1J3f481pjIwxoYyYu/uQuxRAj+JV+wqq0OoWdWH+Rb6NHgEsFa1DJLCB64lHO+ZEDqN4MpLXCA=="}],"memo":""},"metadata":{"timestamp":"1743587748"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1dzzx5qwcmawqnhhd76ehkteas5v2dg42hqnd7g","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3K2do5SHBF/u+bU7RO0ezAWORlbBXqz7z7BIO97a5fyrc6H6F4G0TaLGW76PpLlC0LuiR1A3Democ+5zjm6lAA=="}],"memo":""},"metadata":{"timestamp":"1743587759"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743587914"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743587924"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743587939"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743587980"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743588120"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"grbnhh1iiCemrGIOY5hwOU4xVRykYg2Xx/zZB12BHBcSXuuHMyEbeR6iSPDP3IRkuQIWuqnP7yWETByLxuRuDA=="}],"memo":""},"metadata":{"timestamp":"1743588221"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743591981"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"tEhN7KlsVfhw3mCzSvZTnSnJufwPsn1HJopID9Dm0p3gz6LStdnCTb+ZFqiFztcexYtfAkvRrKdn88Tn/V/NAQ=="}],"memo":""},"metadata":{"timestamp":"1743591991"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"k3NdhAvtHHXQVwo4xqtUV2Wf/LPbAfJVUkz7DlsuixJm+UiW2XGg7bqVbDeN8iJHrZmqMizEmAERt0jz9Dt/Bg=="}],"memo":""},"metadata":{"timestamp":"1743597359"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2231690ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"SncBkDW/CDY43AvtWCXlvuzUwcLtxINLa1MkGOeuKZhnqT0oqzt6ySslxlsaUlVFrptndkUYjmOioQzL8w+GCA=="}],"memo":""},"metadata":{"timestamp":"1743597379"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"887428","gas_fee":"165039ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"uIrRR7fJCY8dnrBO8A9XpoXsWDne+2L/TUDpAnUZtO5IgJNaU3oZkqLMXsFXAbgrwz5MnjtmpOn4AmNf5HojBg=="}],"memo":""},"metadata":{"timestamp":"1743597384"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["42"]}],"fee":{"gas_wanted":"3059175","gas_fee":"6374ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"EVgaJD/bBirIuxmvT71eNu75Nr/B3/VSTfL/pKCw8ux57owH7QmEhJRYHSIPOpbpHV6Rsy/5LruQswbYYJyGBg=="}],"memo":""},"metadata":{"timestamp":"1743597409"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"RhG54kLP2B1mjRm5+dWDE67w5H2W4wA887cqXT/mfIIegiICQFnETKTioZPpXU375y6NPfxsJ0sbjLzIFV4wAw=="}],"memo":""},"metadata":{"timestamp":"1743606306"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"bD5+VR6A4q87Mpz+SX1fnhUnySq57KIZQeZ/OKM4jgY4KcTyajHtaek37W6PzP2bW3WOTTGjy1oWYyGcJCdyDQ=="}],"memo":""},"metadata":{"timestamp":"1743606668"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"35TjLg82N3/oUHSlGp6J+OAQs+4KtT4Ea4PeCKSlVgQ2YBe7jQKmPTknNtM6ZJd19QJG2IkNwferWrZWiOmNCw=="}],"memo":""},"metadata":{"timestamp":"1743607723"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"CW2IHVm66hsIOg/IGO0RpOmBedl9kD2l4Onpl+yEeYcnFzAygg/lG/5aO/L2Du4MX4uVZ/G1KnPQWpklr9uIBg=="}],"memo":""},"metadata":{"timestamp":"1743608020"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"BDBTc0acXpFrvoiTK0cVRqEaAz9n3dR8lz8o6Wve1Bmu9YJ9y+3xfZCV/hru2vszYA+6k2Q7Ix4E+PMlOMBhCg=="}],"memo":""},"metadata":{"timestamp":"1743608226"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\n","admin"]}],"fee":{"gas_wanted":"8066534","gas_fee":"16806ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"pB4ok9z2I+0NVPOhH9GhrHW+iZEixOAVZReuz9Qo/F60s9BHbTS7R/ljuIhIirVjm+sJF2qhApa94vMGoDIYCg=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743608291"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"8967781","gas_fee":"18683ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"6Rj8b2dVSbJrCMY+YbX3hJp750MzerPbDcafdtyFvy7KV0bNRxwve1kD2KhbRaoSTgSKVV8Xs84N4IDevVeWBA=="}],"memo":""},"metadata":{"timestamp":"1743608301"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15dz69sch7fkhc9gk57hpe4qea77thmy20apu9x","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"VOB7lochh6szp7fzpzTlve6EpprFWCee+T8Rv304uBhG3j7Z/rMSIFJnnC2PDHM2jw0ZTSqNjxo3oi43j/C+Cg=="}],"memo":""},"metadata":{"timestamp":"1743610126"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"DeleteTodo","args":["0"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"35+iZ2GB+Y1rkeTxPCCIDr3Vv2nfLg1gcswyZPYlrYpoq3b3b8gOM18BxY8POnJVrD4sO7SZV70ul5vXDczsCQ=="}],"memo":""},"metadata":{"timestamp":"1743611628"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g14gvmle0a5hln0ct7wv857gucr7lmeust35736r","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"8o7uLt1N6UdcF18N4RsKHxeRTNJML8jkZEnCphttJ0i07RWs51buzu0JChdW37PDRHKRbBMMig3GYmyY83YpCQ=="}],"memo":""},"metadata":{"timestamp":"1743662226"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"D3gA083Wird7NyA5rVob1L6Gy3QUuvbjG1zaQb2L79OvgMKhXdGC1cH2fACIkj97R72VztbY9GuOCDRARxv3AQ=="}],"memo":""},"metadata":{"timestamp":"1743663236"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","send":"","pkg_path":"gno.land/r/demo/foo721","func":"BalanceOf","args":["g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"un0B0pU1N1y+fRVnDyvGcyRr/eMaD/o5hYlzU9l8yevkcrW6Ea8yyn9fWqVijrZYxtHMKdXN04UvcFn5Y6MfAw=="}],"memo":""},"metadata":{"timestamp":"1743663533"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","send":"","pkg_path":"gno.land/r/demo/foo721","func":"BalanceOf","args":["g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj"]}],"fee":{"gas_wanted":"10000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"dmtkLTHHHTogXTL/yEMCQ/Y1GwocZoP8/ywMfIxBuApU7XqBCLkBu4XDjK5IjoMNEDjOPimT6Roa9hV0J4KMCA=="}],"memo":""},"metadata":{"timestamp":"1743663709"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"A+lgaw1vC1kZXPXBZhZ3m2rU9L5RZFRp/WavKjgy1whmZVzVxNCDmRpblFLy2UNCb/rPVdfEdlJ7loNKIyrtCw=="}],"memo":""},"metadata":{"timestamp":"1743666971"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["42"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2233340ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"HauKKdAUVL40GDmLeJaPvPfgc3lVACObGnAweQkUS5TpD7UbPYrXw/lVOQPkMrdALYjNZXfKT0sFQIOieuePBA=="}],"memo":""},"metadata":{"timestamp":"1743666986"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["keyboard_worrier"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"+3mIPIe18QEQGSUrtvOzXd5+uNyD39Ap4ZfFWH4LTz3BZ1BjntNitygNpe/MrD7R0Qru4oCpJESEvYOoIRpaBQ=="}],"memo":""},"metadata":{"timestamp":"1743672162"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743674585"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743675500"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676274"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676415"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676425"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676440"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676450"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"lUEEkNObEOubO3Ge6aS36yVzNHcxG2aXUgdcPwA3kcCJZyEQwGC5LAZbcBYKlEm3x2FMmSyCt8nygHIKtH+0AA=="}],"memo":""},"metadata":{"timestamp":"1743676465"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","send":"","pkg_path":"gno.land/r/demo/userbook","func":"SignUp","args":null}],"fee":{"gas_wanted":"3000000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Nsrr9ntlSB2d5G6NUS+t/9/x5y1aemtYDYdBmuIYreBcVsjQ4tOaULgFBDwj4eQTLA3D9bt0K2UTnXIW3mA3BA=="}],"memo":""},"metadata":{"timestamp":"1743676600"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"RemoveMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\n"]}],"fee":{"gas_wanted":"7891622","gas_fee":"16441ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"N8XRKji1icpDGOk+CeTfLnSMOIK3L1Jm5yF4d+VdLN1/eXJ7o7xbqEx820eHAlVR+AbPSV5yPCu9t2uxyEJ2Cw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743677621"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","admin"]}],"fee":{"gas_wanted":"8066714","gas_fee":"16806ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"3vxQTzFmJpLVPAE/KzFfXSFBd63mlmZe06/a/Dcq8jgZv7lA9IuprE96wr20XjnAjeebgmAPGdIqa8BeGbNoAw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743677721"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"887404","gas_fee":"1849ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"oMS3JBmGucIA3MquuQDsFxpTaTgTrwUrXL1hQLiVrzRi+ahBpd0c9J9Uq2U+st5G/1+ZpTsF3rMxNE2PWsVXAA=="}],"memo":""},"metadata":{"timestamp":"1743677742"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["hello !"]}],"fee":{"gas_wanted":"887311","gas_fee":"1849ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"+my44dCnUer8cIVbHjkPaN4Fj7g3UKZEQeHmgpigl29K3H/qY5UUmV/iWs5Z0ePVysQ6u8wEYOL5zkxqrfjzCA=="}],"memo":""},"metadata":{"timestamp":"1743677757"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"LxKecWSuzORnFdZNE6NEB4ev7skwerS3aKFMjAY7+lfrgavZngIOttAmSzXKNqjI6e6PKT0Xg2AlISxfbA+IAg=="}],"memo":""},"metadata":{"timestamp":"1743680159"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"ChangeMemberRole","args":["0","g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"jZnWeopjWqv3BMn/ACWO/tD9oc/BAiLolGd06UgFswmtLEufcNudmkCIz7FlloGpkSDaTQhApfEt6VVsIh9bAg=="}],"memo":""},"metadata":{"timestamp":"1743680391"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/leon/hof","func":"Upvote","args":["gno.land%2Fr%2Fursulovic%2Fhome"]}],"fee":{"gas_wanted":"12000000","gas_fee":"1721880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"Fb8QgDrjGxFwf2ga2FrmZ63CHor0upQqWYDHcx2MZoiYoYCshNXNITEwZl7tXK6vzFhhNlUSrI0Tx4xqHYUiDA=="}],"memo":""},"metadata":{"timestamp":"1743682979"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1d2hvkqhqckhzpaum09c002fesdw89qrcg9zqws","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"ld8kqSH00V2d0yxuGtA7G9pdtdxeEENrLxEDCTVQPwEJS4v5myzmTo1tdm9oyYA+CpJ7Std/c6yUOVU2Ir5ZCw=="}],"memo":""},"metadata":{"timestamp":"1743683221"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1lrsrj4auaffjk538w3x2c9gzyth2m0n39zcg6d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"5MkCzkgXmPNv9f9ekdSjXDwd6Un+UJ6Ii6K0jpSxnanpBnXafmVQr/eKDtcqtlSLLXpLfikXhjBuZoyaNNi4CQ=="}],"memo":""},"metadata":{"timestamp":"1743704885"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["2","1","1","Hey hey hey"]}],"fee":{"gas_wanted":"60000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"CimPnVhuqAEqqSApH5rVTxXEorJwdjWA5876tCSCaKKSexjojIicDD4hpQUi3Xql5a6jnrAfBb17flUc3UAiBA=="}],"memo":""},"metadata":{"timestamp":"1743711043"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["aeddi"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"2q9MkSk7mZGKAOPZKlApbpwGReLud/us7X6MHoKSgOtrLFy4v5Im5tMCuAg4NEx1KSY8ci93sCrAQz16TnWfDg=="}],"memo":""},"metadata":{"timestamp":"1743711163"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g16znvp6wxupkkds8mmmtxhvmdly08xpa4rqagp3","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"DKbiJAf8yy6x2aN46wAIcPmaFZhHgqdGX/Aa8MM3bx+tVoKQVKC1io8iS49wZtWruEk218jqNk1FgbFnPSObBA=="}],"memo":""},"metadata":{"timestamp":"1743712058"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["3","This is a test","Hello World"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"gz8xLsHOlm3KgTbMLZHULlEXYNQvHHyyurwp3BMvzUhwAnA5+eUZLguT5KoB070p/NkewrIAMy4dTfX/Z6U6AQ=="}],"memo":""},"metadata":{"timestamp":"1743712737"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"1648310ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"/FcwHhLZvfELJK1iVdHBO0OWQdBm/mu+XFJaqP+IV48="},"signature":"eP3yIVSRgR6yQJOv5h2TUvb0YjsP0kTJIoy7eMM8D9qNGKzYdWBaXP/Q16E4htrelZWvxyMc/kaBi+rQA5OkAA=="}],"memo":""},"metadata":{"timestamp":"1743715914"}}
