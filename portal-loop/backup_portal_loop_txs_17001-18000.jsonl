{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"DeletePost","args":["1","2","2"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"TyJBvACuE8gHyNed5jeU2OGyhr+/0knJHIWBJmSCoY2Bk+O7O5BHus2ZqT2EKJVm6UwbFu1jtjMTJhkTy9TfBw=="}],"memo":""},"metadata":{"timestamp":"1743738333"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/leon/hof","func":"Upvote","args":["gno.land%2Fr%2Fursulovic%2Fhome"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"7w85qlNpnp4p/g8ld6Cg3B1tNTKr/jEbkmOkjkZGO19A56uN/1qTbsgdnIkLD+dIKW8LlP5b9/89tr8c1PZ1Ag=="}],"memo":""},"metadata":{"timestamp":"1743738469"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["1","2"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"tVowNVrP7Rk8tQ2rKYAkIhhXBOeKDV9XBo0/1HE4zX9ZcsBE+a7nKjqIxofQV6cUbRGE4x8P9A29Ks5KjpH6Bg=="}],"memo":""},"metadata":{"timestamp":"1743738680"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1nnl20472w0effzcexuqmk4ntn20wg95ytygy55","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"TtQ39YW0Ecf2merJzXjISiic48o1tc2YJegiC3SJm+OnAbYJEhJBNgAbLJZupSz0pl3HxAWoLIaNSftWGG8TAw=="}],"memo":""},"metadata":{"timestamp":"1743739027"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1nnl20472w0effzcexuqmk4ntn20wg95ytygy55","to_address":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","amount":"9000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"sX5sD9n5f/MQ7BhkmovbjAPmb9q0TEGDnsxy1exAJd265fJfMPpNbIARz6iJTbfjHnb6dmVuD/FBYELfocJrAQ=="}],"memo":""},"metadata":{"timestamp":"1743739047"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1zeq4hn2hd2azde6p9x2ya9gp3ug30vuuv56pym","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"WyfGApIENWM21BnfCCjLar/JmI1YIu5XyCAbW8RZ8uIr48YZZUenfn9OFS6uhDSgydFHEi4dGzkJnBNapTooCA=="}],"memo":""},"metadata":{"timestamp":"1743739590"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1zeq4hn2hd2azde6p9x2ya9gp3ug30vuuv56pym","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["2","2"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"HB9tk6ZVTE/MYUYpIhVbPLWSf5La5tT4Oily6u9oEypn5a7y6GZ3bRQH53PKVk0HE2KIyfw+J29M0rBa8fjbBQ=="}],"memo":""},"metadata":{"timestamp":"1743739625"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1p5pa2sp4elcja2u8wn36zv3plsyp8xrqgz0usf","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"HEdysJ0aqWgRYYCb7syiZ8D5AblFIRfXXWXhH3P3T5Dyxg1odHNQ2VwoYTQ9NX9FubLt6JItuMQ+8PlYtBNZAA=="}],"memo":""},"metadata":{"timestamp":"1743750714"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Rqf9NhUO3sQwKUmNU7GrX8d1pzZRaNjOWqAx/XL4psTx/txvDZWdPpvbwoZFvfuaZ99/Nd07Ht9HjmXOUQCyBw=="}],"memo":""},"metadata":{"timestamp":"1743750895"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":["aeddi-testing"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"j7ShULKK/MB8bsIL15PbOfQRCz34X7VpeVsv61YMZ9EsGEdv9rdy7NSXFf9BbKtU7acnTzc36bi8RXBqonWCAQ=="}],"memo":""},"metadata":{"timestamp":"1743751141"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","to_address":"g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","amount":"1000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"DeFguiM0qG5+CTtuNr1BM3z42UJAkDBg+7g+/7/2kLY21hC+Z2uWwpVpDehGEG9a0Pcs8e1OybcqYFKhHZ/RDg=="}],"memo":""},"metadata":{"timestamp":"1743755182"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1etcvlu8zyuwnd7w0x0lcu4g2r7yzllyy62gpa5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Ye42Dwic6f8nEQVxwxVg8DNVnlxMscInjIntiz5mOTFi4Edsqw8L1g7n4NfeQb62FOz6DiHZVoEurLEr6YhaDw=="}],"memo":""},"metadata":{"timestamp":"1743760782"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1etcvlu8zyuwnd7w0x0lcu4g2r7yzllyy62gpa5","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","-1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"E0mdmjXzFwUjU0DWIzTiQRys1zkvBJ7KYowkKTnJV83tGH56kvAGutHarfu/L1Sn3z2TgKls3XeI6xIrDBn+AQ=="}],"memo":""},"metadata":{"timestamp":"1743760847"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kuCtWj1TUpFzucoJ8iAhcnx9Kmvr629VZ2v3JFLL9O/GX4U97k2O0jpn4usPHV3W6RvsRihX+bXQSZHyYYkNDw=="}],"memo":""},"metadata":{"timestamp":"1743761662"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","package":{"name":"boards2","path":"gno.land/r/devx000/gnoland/boards2/v1rc2","files":[{"name":"board.gno","body":"package boards2\n\nimport (\n\t\"net/url\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\ntype BoardID uint64\n\nfunc (id BoardID) String() string {\n\treturn strconv.Itoa(int(id))\n}\n\nfunc (id BoardID) Key() string {\n\treturn padZero(uint64(id), 10)\n}\n\ntype Board struct {\n\tid        BoardID // only set for public boards.\n\tname      string\n\taliases   []string\n\tcreator   std.Address\n\tthreads   avl.Tree // Post.id -\u003e *Post\n\tpostsCtr  uint64   // increments Post.id\n\tcreatedAt time.Time\n\tdeleted   avl.Tree // TODO reserved for fast-delete.\n\tperms     Permissions\n\treadonly  bool\n}\n\nfunc newBoard(id BoardID, name string, creator std.Address, p Permissions) *Board {\n\treturn \u0026Board{\n\t\tid:        id,\n\t\tname:      name,\n\t\tcreator:   creator,\n\t\tthreads:   avl.Tree{},\n\t\tcreatedAt: time.Now(),\n\t\tdeleted:   avl.Tree{},\n\t\tperms:     p,\n\t}\n}\n\nfunc (board *Board) GetID() BoardID {\n\treturn board.id\n}\n\n// GetName returns the name of the board.\nfunc (board *Board) GetName() string {\n\treturn board.name\n}\n\n// GetURL returns the relative URL of the board.\nfunc (board *Board) GetURL() string {\n\treturn strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\") + \":\" + url.PathEscape(board.name)\n}\n\n// GetURL returns relative board path relative.\n//\n// Note: returned result is not escaped. Use GetURL to get URL-encoded path.\nfunc (board *Board) GetPath() string {\n\treturn strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\") + \":\" + board.name\n}\n\nfunc (board *Board) GetPermissions() Permissions {\n\treturn board.perms\n}\n\n// SetReadonly updates board's read-only status.\nfunc (board *Board) SetReadonly(readonly bool) {\n\tboard.readonly = readonly\n}\n\n// IsReadonly checks if the board is a read-only board.\nfunc (board *Board) IsReadonly() bool {\n\treturn board.readonly\n}\n\nfunc (board *Board) GetThread(threadID PostID) (_ *Post, found bool) {\n\tv, found := board.threads.Get(threadID.Key())\n\tif !found {\n\t\treturn nil, false\n\t}\n\treturn v.(*Post), true\n}\n\nfunc (board *Board) AddThread(creator std.Address, title string, body string) *Post {\n\tpid := board.incGetPostID()\n\tthread := newPost(board, pid, creator, title, body, pid, 0, 0)\n\tboard.threads.Set(pid.Key(), thread)\n\treturn thread\n}\n\n// NOTE: this can be potentially very expensive for threads with many replies.\n// TODO: implement optional fast-delete where thread is simply moved.\nfunc (board *Board) DeleteThread(pid PostID) {\n\t_, removed := board.threads.Remove(pid.Key())\n\tif !removed {\n\t\tpanic(\"thread does not exist with ID \" + pid.String())\n\t}\n}\n\n// Render renders a board into Markdown.\nfunc (board *Board) Render(path, menu string) string {\n\tvar sb strings.Builder\n\n\tsb.WriteString(\"# \" + board.GetName() + \"  \\n\")\n\tsb.WriteString(\"Board created by \" + newUserLink(board.creator) + \" \")\n\tsb.WriteString(\"on \" + board.createdAt.Format(dateFormat))\n\tsb.WriteString(\", #\" + board.id.String())\n\n\tif board.IsReadonly() {\n\t\tsb.WriteString(\"  \\n_**Starting new threads and commenting is disabled**_\")\n\t}\n\n\t// XXX: Menu is rendered by the caller to deal with links and sub-menus\n\t// TODO: We should have the render logic separated from boards so avoid sending menu as argument\n\tif menu != \"\" {\n\t\tsb.WriteString(\"\\n\\n\")\n\t\tsb.WriteString(menu)\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\tsb.WriteString(\"\\n\\n---\\n\")\n\n\tif board.threads.Size() == 0 {\n\t\tsb.WriteString(\"### This board doesn't have any threads\\n\")\n\t\tif !board.IsReadonly() {\n\t\t\turl := board.GetPostFormURL()\n\t\t\tsb.WriteString(\"Do you want to [start a new conversation](\" + url + \") in this board ?\")\n\t\t}\n\t\treturn sb.String()\n\t}\n\n\tp, err := pager.New(path, board.threads.Size(), pager.WithPageSize(pageSizeThreads))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\trender := func(_ string, v any) bool {\n\t\tthread := v.(*Post)\n\t\tif thread.isHidden {\n\t\t\treturn false\n\t\t}\n\n\t\tsb.WriteString(thread.RenderSummary())\n\t\tsb.WriteString(\"\\n\")\n\t\treturn false\n\t}\n\n\tsb.WriteString(\"Sort by: \")\n\tr := realmpath.Parse(path)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tsb.WriteString(newLink(\"newest first\", r.String()))\n\t\tsb.WriteString(\"\\n\\n\")\n\t\tboard.threads.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tsb.WriteString(newLink(\"oldest first\", r.String()))\n\t\tsb.WriteString(\"\\n\\n\")\n\t\tboard.threads.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tsb.WriteString(\"\\n---\\n\")\n\t\tsb.WriteString(pager.Picker(p))\n\t}\n\n\treturn sb.String()\n}\n\nfunc (board *Board) incGetPostID() PostID {\n\tboard.postsCtr++\n\treturn PostID(board.postsCtr)\n}\n\nfunc (board *Board) GetURLFromThreadID(threadID PostID) string {\n\treturn board.GetURL() + \"/\" + threadID.String()\n}\n\nfunc (board *Board) GetURLFromReplyID(threadID, replyID PostID) string {\n\treturn board.GetURL() + \"/\" + threadID.String() + \"/\" + replyID.String()\n}\n\nfunc (board *Board) GetRenameFormURL() string { // TODO: These type of functions shouldn't be part of Board type\n\treturn txlink.Call(\n\t\t\"RenameBoard\",\n\t\t\"name\", board.name,\n\t\t\"newName\", \"\",\n\t)\n}\n\nfunc (board *Board) GetFreezeFormURL() string {\n\treturn txlink.Call(\n\t\t\"FreezeBoard\",\n\t\t\"boardID\", board.id.String(),\n\t)\n}\n\nfunc (board *Board) GetUnfreezeFormURL() string {\n\treturn txlink.Call(\n\t\t\"UnfreezeBoard\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"threadID\", \"\",\n\t\t\"replyID\", \"\",\n\t)\n}\n\nfunc (board *Board) GetFlaggingThresholdFormURL() string {\n\treturn txlink.Call(\n\t\t\"SetFlaggingThreshold\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"threshold\", \"\",\n\t)\n}\n\nfunc (board *Board) GetInviteMemberFormURL() string {\n\treturn txlink.Call(\n\t\t\"InviteMember\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"user\", \"\",\n\t\t\"role\", \"\",\n\t)\n}\n\nfunc (board *Board) GetPostFormURL() string {\n\treturn txlink.Call(\n\t\t\"CreateThread\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"title\", \"\",\n\t\t\"body\", \"\",\n\t)\n}\n\nfunc (board *Board) GetMembersURL() string {\n\treturn board.GetURL() + \"/members\"\n}\n\nfunc createDefaultBoardPermissions(owner std.Address) *DefaultPermissions {\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.SetSuperRole(RoleOwner)\n\tperms.AddRole(\n\t\tRoleAdmin,\n\t\tPermissionBoardRename,\n\t\tPermissionBoardFlaggingUpdate,\n\t\tPermissionMemberInvite,\n\t\tPermissionMemberRemove,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadEdit,\n\t\tPermissionThreadDelete,\n\t\tPermissionThreadRepost,\n\t\tPermissionThreadFlag,\n\t\tPermissionThreadFreeze,\n\t\tPermissionReplyCreate,\n\t\tPermissionReplyDelete,\n\t\tPermissionReplyFlag,\n\t\tPermissionReplyFreeze,\n\t\tPermissionRoleChange,\n\t)\n\tperms.AddRole(\n\t\tRoleModerator,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadEdit,\n\t\tPermissionThreadRepost,\n\t\tPermissionThreadFlag,\n\t\tPermissionReplyCreate,\n\t\tPermissionReplyFlag,\n\t)\n\tperms.AddRole(\n\t\tRoleGuest,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadRepost,\n\t\tPermissionReplyCreate,\n\t)\n\tperms.AddUser(owner, RoleOwner)\n\treturn perms\n}\n"},{"name":"board_readonly.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"time\"\n)\n\n// ReadonlyBoard defines an interface for readonly boards.\ntype ReadonlyBoard interface {\n\t// ID returns the unique identifier of the board.\n\tID() BoardID\n\n\t// Name returns the name of the board.\n\tName() string\n\n\t// Aliases returns a list with previous names assigned to the board.\n\tAliases() []string\n\n\t// Creator returns board's creator address.\n\tCreator() std.Address\n\n\t// LastPostID returns the ID assigned to the last created thread.\n\tLastPostID() uint64\n\n\t// CreatedAt returns the time when board was created.\n\tCreatedAt() time.Time\n\n\t// IsReadonly returns true when board shouldn't allow the creation of threads and comments.\n\tIsReadonly() bool\n\n\t// MembersCount returns the number of invited board members.\n\tMembersCount() int\n\n\t// IterateMembers allows reading the list of invited board members.\n\tIterateMembers(offset, count int, fn UsersIterFn)\n}\n\ntype readonlyBoard struct {\n\tboard *Board\n}\n\nfunc (b readonlyBoard) ID() BoardID {\n\treturn b.board.id\n}\n\nfunc (b readonlyBoard) Name() string {\n\treturn b.board.name\n}\n\nfunc (b readonlyBoard) Aliases() []string {\n\taliases := make([]string, len(b.board.aliases))\n\tfor i, s := range b.board.aliases {\n\t\taliases[i] = s\n\t}\n\treturn aliases\n}\n\nfunc (b readonlyBoard) Creator() std.Address {\n\treturn b.board.creator\n}\n\nfunc (b readonlyBoard) LastPostID() uint64 {\n\treturn b.board.postsCtr\n}\n\nfunc (b readonlyBoard) CreatedAt() time.Time {\n\treturn b.board.createdAt\n}\n\nfunc (b readonlyBoard) IsReadonly() bool {\n\treturn b.board.readonly\n}\n\nfunc (b readonlyBoard) MembersCount() int {\n\treturn b.board.perms.UsersCount()\n}\n\nfunc (b readonlyBoard) IterateMembers(offset, count int, fn UsersIterFn) {\n\tb.board.perms.IterateUsers(offset, count, fn)\n}\n"},{"name":"board_test.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nfunc TestBoardID_String(t *testing.T) {\n\tinput := BoardID(32)\n\n\tuassert.Equal(t, \"32\", input.String())\n}\n\nfunc TestBoardID_Key(t *testing.T) {\n\tinput := BoardID(128)\n\twant := strings.Repeat(\"0\", 7) + \"128\"\n\tuassert.Equal(t, want, input.Key())\n}\n\nfunc TestBoard_GetID(t *testing.T) {\n\twant := int(92)\n\tb := new(Board)\n\tb.id = BoardID(want)\n\tgot := int(b.GetID())\n\n\tuassert.Equal(t, got, want)\n\tuassert.NotEqual(t, got, want*want)\n}\n\nfunc TestBoard_GetURL(t *testing.T) {\n\tpkgPath := strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\tname := \"foobar_test_get_url123\"\n\twant := pkgPath + \":\" + name\n\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tboard := newBoard(1, name, addr, perms)\n\tgot := board.GetURL()\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetThread(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(1, \"test123\", addr, perms)\n\n\t_, ok := b.GetThread(12345)\n\tuassert.False(t, ok)\n\n\tpost := b.AddThread(addr, \"foo\", \"bar\")\n\t_, ok = b.GetThread(post.GetPostID())\n\tuassert.True(t, ok)\n}\n\nfunc TestBoard_DeleteThread(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(1, \"test123\", addr, perms)\n\n\tpost := b.AddThread(addr, \"foo\", \"bar\")\n\tid := post.GetPostID()\n\n\tb.DeleteThread(id)\n\n\t_, ok := b.GetThread(id)\n\tuassert.False(t, ok)\n}\n\nvar boardUrlPrefix = strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\nfunc TestBoard_GetURLFromThreadID(t *testing.T) {\n\tboardName := \"test12345\"\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(BoardID(11), boardName, addr, perms)\n\twant := boardUrlPrefix + \":\" + boardName + \"/10\"\n\n\tgot := b.GetURLFromThreadID(10)\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetURLFromReplyID(t *testing.T) {\n\tboardName := \"test12345\"\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(BoardID(11), boardName, addr, perms)\n\twant := boardUrlPrefix + \":\" + boardName + \"/10/20\"\n\n\tgot := b.GetURLFromReplyID(10, 20)\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetPostFormURL(t *testing.T) {\n\tbid := BoardID(386)\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(bid, \"foo1234\", addr, perms)\n\texpect := txlink.Call(\"CreateThread\", \"boardID\", bid.String(), \"title\", \"\", \"body\", \"\")\n\n\tgot := b.GetPostFormURL()\n\tuassert.Equal(t, expect, got)\n}\n"},{"name":"boards.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tgPerms        Permissions\n\tgNotice       string\n\tgHelp         string\n\tgLastBoardID  BoardID\n\tgBoardsByID   avl.Tree // string(id) -\u003e *Board\n\tgBoardsByName avl.Tree // string(name) -\u003e *Board\n\tgLocked       struct {\n\t\trealm        bool\n\t\trealmMembers bool\n\t}\n)\n\nfunc init() {\n\t// TODO: Define and change the default realm owner (or owners)\n\towner := std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\n\t// Initialize default realm permissions\n\tgPerms = createDefaultPermissions(owner)\n\n\t// Import relevant initial state from previous version\n\tinitFromPrevVersion()\n}\n\n// incGetBoardID returns a new board ID.\nfunc incGetBoardID() BoardID {\n\tgLastBoardID++\n\treturn gLastBoardID\n}\n\n// getBoard returns a board for a specific ID.\nfunc getBoard(id BoardID) (_ *Board, found bool) {\n\tv, exists := gBoardsByID.Get(id.Key())\n\tif !exists {\n\t\treturn nil, false\n\t}\n\treturn v.(*Board), true\n}\n\n// mustGetBoardByName returns a board or panics when it's not found.\nfunc mustGetBoardByName(name string) *Board {\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tpanic(\"board does not exist with name: \" + name)\n\t}\n\treturn v.(*Board)\n}\n\n// mustGetBoard returns a board or panics when it's not found.\nfunc mustGetBoard(id BoardID) *Board {\n\tboard, found := getBoard(id)\n\tif !found {\n\t\tpanic(\"board does not exist with ID: \" + id.String())\n\t}\n\treturn board\n}\n\n// mustGetThread returns a thread or panics when it's not found.\nfunc mustGetThread(board *Board, threadID PostID) *Post {\n\tthread, found := board.GetThread(threadID)\n\tif !found {\n\t\tpanic(\"thread does not exist with ID: \" + threadID.String())\n\t}\n\treturn thread\n}\n\n// mustGetReply returns a reply or panics when it's not found.\nfunc mustGetReply(thread *Post, replyID PostID) *Post {\n\treply, found := thread.GetReply(replyID)\n\tif !found {\n\t\tpanic(\"reply does not exist with ID: \" + replyID.String())\n\t}\n\treturn reply\n}\n\nfunc mustGetPermissions(bid BoardID) Permissions {\n\tif bid != 0 {\n\t\tboard := mustGetBoard(bid)\n\t\treturn board.perms\n\t}\n\treturn gPerms\n}\n"},{"name":"flag.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n// DefaultFlaggingThreshold defines the default number of flags that hides flaggable items.\nconst DefaultFlaggingThreshold = 1\n\nvar gFlaggingThresholds avl.Tree // string(board ID) -\u003e int\n\ntype Flag struct {\n\tUser   std.Address\n\tReason string\n}\n\ntype Flaggable interface {\n\t// AddFlag adds a new flag to an item.\n\t//\n\t// Returns false if item was already flagged by user.\n\tAddFlag(flag Flag) bool\n\n\t// FlagsCount returns number of times item was flagged.\n\tFlagsCount() int\n}\n\n// flagItem adds a flag to a flaggable item (post, thread, etc).\n//\n// Returns whether flag count threshold is reached and item can be hidden.\n//\n// Panics if flag count threshold was already reached.\nfunc flagItem(item Flaggable, flag Flag, threshold int) bool {\n\tif item.FlagsCount() \u003e= threshold {\n\t\tpanic(\"item flag count threshold exceeded: \" + strconv.Itoa(threshold))\n\t}\n\n\tif !item.AddFlag(flag) {\n\t\tpanic(\"item has been already flagged by a current user\")\n\t}\n\n\treturn item.FlagsCount() == threshold\n}\n\nfunc getFlaggingThreshold(bid BoardID) int {\n\tif v, ok := gFlaggingThresholds.Get(bid.String()); ok {\n\t\treturn v.(int)\n\t}\n\treturn DefaultFlaggingThreshold\n}\n"},{"name":"format.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/r/sys/users\"\n)\n\nfunc padLeft(s string, length int) string {\n\tif len(s) \u003e= length {\n\t\treturn s\n\t}\n\treturn strings.Repeat(\" \", length-len(s)) + s\n}\n\nfunc padZero(u64 uint64, length int) string {\n\ts := strconv.Itoa(int(u64))\n\tif len(s) \u003e= length {\n\t\treturn s\n\t}\n\treturn strings.Repeat(\"0\", length-len(s)) + s\n}\n\nfunc indentBody(indent string, body string) string {\n\tvar (\n\t\tres   string\n\t\tlines = strings.Split(body, \"\\n\")\n\t)\n\tfor i, line := range lines {\n\t\tif i \u003e 0 {\n\t\t\tres += \"\\n\"\n\t\t}\n\t\tres += indent + line\n\t}\n\treturn res\n}\n\n// NOTE: length must be greater than 3.\nfunc summaryOf(text string, length int) string {\n\tlines := strings.SplitN(text, \"\\n\", 2)\n\tline := lines[0]\n\tif len(line) \u003e length {\n\t\tline = line[:(length-3)] + \"...\"\n\t} else if len(lines) \u003e 1 {\n\t\t// len(line) \u003c= 80\n\t\tline = line + \"...\"\n\t}\n\treturn line\n}\n\n// newLink returns a Markdown link.\nfunc newLink(label, uri string) string {\n\treturn \"[\" + label + \"](\" + uri + \")\"\n}\n\n// newButtonLink returns a Makdown link with label wrapped in brackets.\nfunc newButtonLink(label, uri string) string {\n\treturn `[\\[` + label + `\\]](` + uri + \")\"\n}\n\n// newUserLink returns a Markdown link for an account to the users\n// realm or the address as string when a user is not registered.\nfunc newUserLink(addr std.Address) string {\n\tuser := users.ResolveAddress(addr)\n\tif user != nil {\n\t\treturn user.RenderLink(\"\")\n\t}\n\treturn addr.String()\n}\n"},{"name":"migrations.gno","body":"package boards2\n\nimport (\n\tv1rc1 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nfunc initFromPrevVersion() {\n\timportRealmMembers()\n}\n\nfunc importRealmMembers() {\n\tv1rc1.IterateRealmMembers(0, func(member v1rc1.User) bool {\n\t\t// XXX: This wouldn't be required if a boards2 package is created\n\t\troles := make([]Role, len(member.Roles))\n\t\tfor i, r := range member.Roles {\n\t\t\troles[i] = Role(r)\n\t\t}\n\n\t\tgPerms.AddUser(member.Address, roles...)\n\t\treturn false\n\t})\n}\n"},{"name":"permissions.gno","body":"package boards2\n\nimport \"std\"\n\nconst (\n\tPermissionRealmHelp           Permission = \"realm:help\"\n\tPermissionRealmLock                      = \"realm:lock\"\n\tPermissionRealmNotice                    = \"realm:notice\"\n\tPermissionBoardCreate                    = \"board:create\"\n\tPermissionBoardFlaggingUpdate            = \"board:flagging-update\"\n\tPermissionBoardFreeze                    = \"board:freeze\"\n\tPermissionBoardRename                    = \"board:rename\"\n\tPermissionThreadCreate                   = \"thread:create\"\n\tPermissionThreadDelete                   = \"thread:delete\"\n\tPermissionThreadEdit                     = \"thread:edit\"\n\tPermissionThreadFlag                     = \"thread:flag\"\n\tPermissionThreadFreeze                   = \"thread:freeze\"\n\tPermissionThreadRepost                   = \"thread:repost\"\n\tPermissionReplyCreate                    = \"reply:create\"\n\tPermissionReplyDelete                    = \"reply:delete\"\n\tPermissionReplyFlag                      = \"reply:flag\"\n\tPermissionReplyFreeze                    = \"reply:freeze\"\n\tPermissionMemberInvite                   = \"member:invite\"\n\tPermissionMemberRemove                   = \"member:remove\"\n\tPermissionRoleChange                     = \"role:change\"\n\tPermissionPermissionsUpdate              = \"permissions:update\"\n)\n\nconst (\n\tRoleGuest     Role = \"\"\n\tRoleOwner          = \"owner\"\n\tRoleAdmin          = \"admin\"\n\tRoleModerator      = \"moderator\"\n)\n\ntype (\n\t// Permission defines the type for permissions.\n\tPermission string\n\n\t// Role defines the type for user roles.\n\tRole string\n\n\t// Args is a list of generic arguments.\n\tArgs []interface{}\n\n\t// User contains user info.\n\tUser struct {\n\t\tAddress std.Address\n\t\tRoles   []Role\n\t}\n\n\t// UsersIterFn defines a function type to iterate users.\n\tUsersIterFn func(User) bool\n\n\t// Permissions define an interface to for permissioned execution.\n\tPermissions interface {\n\t\t// HasRole checks if a user has a specific role assigned.\n\t\tHasRole(std.Address, Role) bool\n\n\t\t// HasPermission checks if a user has a specific permission.\n\t\tHasPermission(std.Address, Permission) bool\n\n\t\t// WithPermission calls a callback when a user has a specific permission.\n\t\t// It panics on error.\n\t\tWithPermission(std.Address, Permission, Args, func(Args))\n\n\t\t// AddUser adds a new user to the permissioner.\n\t\tAddUser(std.Address, ...Role) error\n\n\t\t// SetUserRoles sets the roles of a user.\n\t\tSetUserRoles(std.Address, ...Role) error\n\n\t\t// RemoveUser removes a user from the permissioner.\n\t\tRemoveUser(std.Address) (removed bool)\n\n\t\t// HasUser checks if a user exists.\n\t\tHasUser(std.Address) bool\n\n\t\t// UsersCount returns the total number of users the permissioner contains.\n\t\tUsersCount() int\n\n\t\t// IterateUsers iterates permissions' users.\n\t\tIterateUsers(start, count int, fn UsersIterFn) bool\n\t}\n)\n"},{"name":"permissions_default.gno","body":"package boards2\n\nimport (\n\t\"errors\"\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\t\"gno.land/r/sys/users\"\n)\n\n// DefaultPermissions manages users, roles and permissions.\ntype DefaultPermissions struct {\n\tsuperRole Role\n\tdao       *commondao.CommonDAO\n\tusers     *avl.Tree // string(std.Address) -\u003e []Role\n\troles     *avl.Tree // string(role) -\u003e []Permission\n}\n\n// NewDefaultPermissions creates a new permissions type.\n// This type is a default implementation to handle users, roles and permissions.\nfunc NewDefaultPermissions(dao *commondao.CommonDAO) *DefaultPermissions {\n\tif dao == nil {\n\t\tpanic(\"default permissions require a DAO\")\n\t}\n\n\tdp := \u0026DefaultPermissions{\n\t\tdao:   dao,\n\t\troles: avl.NewTree(),\n\t\tusers: avl.NewTree(),\n\t}\n\n\t// Make sure that DAO users are indexed when DAO has members\n\tdao.Members().IterateByOffset(0, dao.Members().Size(), func(m std.Address) bool {\n\t\tdp.users.Set(m.String(), []Role(nil))\n\t\treturn false\n\t})\n\n\treturn dp\n}\n\n// SetSuperRole assigns a super role.\n// A super role is one that have all permissions.\n// These type of role doesn't need to be mapped to any permission.\nfunc (dp *DefaultPermissions) SetSuperRole(r Role) {\n\tdp.superRole = r\n}\n\n// AddRole add a role with one or more assigned permissions.\nfunc (dp *DefaultPermissions) AddRole(r Role, p Permission, extra ...Permission) {\n\tdp.roles.Set(string(r), append([]Permission{p}, extra...))\n}\n\n// RoleExists checks if a role exists.\nfunc (dp DefaultPermissions) RoleExists(r Role) bool {\n\tif dp.superRole != \"\" \u0026\u0026 r == dp.superRole {\n\t\treturn true\n\t}\n\n\treturn dp.roles.Iterate(\"\", \"\", func(name string, _ interface{}) bool {\n\t\treturn Role(name) == r\n\t})\n}\n\n// GetUserRoles returns the list of roles assigned to a user.\nfunc (dp DefaultPermissions) GetUserRoles(user std.Address) []Role {\n\tv, found := dp.users.Get(user.String())\n\tif !found {\n\t\treturn nil\n\t}\n\treturn v.([]Role)\n}\n\n// HasRole checks if a user has a specific role assigned.\nfunc (dp DefaultPermissions) HasRole(user std.Address, r Role) bool {\n\tfor _, role := range dp.GetUserRoles(user) {\n\t\tif role == r {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// HasPermission checks if a user has a specific permission.\nfunc (dp DefaultPermissions) HasPermission(user std.Address, perm Permission) bool {\n\tfor _, r := range dp.GetUserRoles(user) {\n\t\tif dp.superRole == r {\n\t\t\treturn true\n\t\t}\n\n\t\tv, found := dp.roles.Get(string(r))\n\t\tif !found {\n\t\t\tcontinue\n\t\t}\n\n\t\tfor _, p := range v.([]Permission) {\n\t\t\tif p == perm {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// AddUser adds a new user to permissions.\nfunc (dp *DefaultPermissions) AddUser(user std.Address, roles ...Role) error {\n\tif dp.users.Has(user.String()) {\n\t\treturn errors.New(\"user already exists\")\n\t}\n\n\tdp.dao.Members().Add(user)\n\treturn dp.setUserRoles(user, roles...)\n}\n\n// SetUserRoles sets the roles of a user.\nfunc (dp *DefaultPermissions) SetUserRoles(user std.Address, roles ...Role) error {\n\tif !dp.users.Has(user.String()) {\n\t\treturn errors.New(\"user not found\")\n\t}\n\treturn dp.setUserRoles(user, roles...)\n}\n\n// RemoveUser removes a user from permissions.\nfunc (dp *DefaultPermissions) RemoveUser(user std.Address) bool {\n\t_, removed := dp.users.Remove(user.String())\n\tdp.dao.Members().Remove(user)\n\treturn removed\n}\n\n// HasUser checks if a user exists.\nfunc (dp DefaultPermissions) HasUser(user std.Address) bool {\n\treturn dp.users.Has(user.String())\n}\n\n// UsersCount returns the total number of users the permissioner contains.\nfunc (dp DefaultPermissions) UsersCount() int {\n\treturn dp.users.Size()\n}\n\n// IterateUsers iterates permissions' users.\nfunc (dp DefaultPermissions) IterateUsers(start, count int, fn UsersIterFn) bool {\n\treturn dp.users.IterateByOffset(start, count, func(k string, v interface{}) bool {\n\t\treturn fn(User{\n\t\t\tAddress: std.Address(k),\n\t\t\tRoles:   v.([]Role),\n\t\t})\n\t})\n}\n\n// WithPermission calls a callback when a user has a specific permission.\n// It panics on error or when a handler panics.\n// Callbacks are by default called when there is no handle registered for the permission.\nfunc (dp *DefaultPermissions) WithPermission(user std.Address, perm Permission, args Args, cb func(Args)) {\n\tif !dp.HasPermission(user, perm) || !dp.dao.Members().Has(user) {\n\t\tpanic(\"unauthorized\")\n\t}\n\n\tswitch perm {\n\tcase PermissionBoardCreate:\n\t\tdp.handleBoardCreate(args, cb)\n\tcase PermissionBoardRename:\n\t\tdp.handleBoardRename(args, cb)\n\tcase PermissionMemberInvite:\n\t\tdp.handleMemberInvite(args, cb)\n\tcase PermissionRoleChange:\n\t\tdp.handleRoleChange(args, cb)\n\tdefault:\n\t\tcb(args)\n\t}\n}\n\nfunc (dp *DefaultPermissions) setUserRoles(user std.Address, roles ...Role) error {\n\tfor _, r := range roles {\n\t\tif !dp.RoleExists(r) {\n\t\t\treturn errors.New(\"invalid role: \" + string(r))\n\t\t}\n\t}\n\n\tdp.users.Set(user.String(), append([]Role(nil), roles...))\n\treturn nil\n}\n\nfunc (DefaultPermissions) handleBoardCreate(args Args, cb func(Args)) {\n\tname, ok := args[0].(string)\n\tif !ok {\n\t\tpanic(\"expected board name to be a string\")\n\t}\n\n\tassertBoardNameIsNotAddress(name)\n\tassertBoardNameBelongsToCaller(name)\n\n\tcb(args)\n}\n\nfunc (DefaultPermissions) handleBoardRename(args Args, cb func(Args)) {\n\tnewName, ok := args[2].(string)\n\tif !ok {\n\t\tpanic(\"expected new board name to be a string\")\n\t}\n\n\tassertBoardNameIsNotAddress(newName)\n\tassertBoardNameBelongsToCaller(newName)\n\n\tcb(args)\n}\n\nfunc (dp DefaultPermissions) handleMemberInvite(args Args, cb func(Args)) {\n\t// Make sure that only owners invite other owners\n\trole, ok := args[1].(Role)\n\tif !ok {\n\t\tpanic(\"expected a valid new member role\")\n\t}\n\n\tif role == RoleOwner {\n\t\tif !dp.HasRole(std.PreviousRealm().Address(), RoleOwner) {\n\t\t\tpanic(\"only owners are allowed to invite other owners\")\n\t\t}\n\t}\n\n\tcb(args)\n}\n\nfunc (dp DefaultPermissions) handleRoleChange(args Args, cb func(Args)) {\n\t// Owners and Admins can change roles.\n\t// Admins should not be able to assign or remove the Owner role from members.\n\tif dp.HasRole(std.PreviousRealm().Address(), RoleAdmin) {\n\t\trole, ok := args[2].(Role)\n\t\tif !ok {\n\t\t\tpanic(\"expected a valid member role\")\n\t\t}\n\n\t\tif role == RoleOwner {\n\t\t\tpanic(\"admins are not allowed to promote members to Owner\")\n\t\t} else {\n\t\t\tmember, ok := args[1].(std.Address)\n\t\t\tif !ok {\n\t\t\t\tpanic(\"expected a valid member address\")\n\t\t\t}\n\n\t\t\tif dp.HasRole(member, RoleOwner) {\n\t\t\t\tpanic(\"admins are not allowed to remove the Owner role\")\n\t\t\t}\n\t\t}\n\t}\n\n\tcb(args)\n}\n\nfunc createDefaultPermissions(owner std.Address) *DefaultPermissions {\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.SetSuperRole(RoleOwner)\n\tperms.AddRole(RoleAdmin, PermissionBoardCreate)\n\tperms.AddUser(owner, RoleOwner)\n\treturn perms\n}\n\nfunc assertBoardNameIsNotAddress(s string) {\n\tif std.Address(s).IsValid() {\n\t\tpanic(\"addresses are not allowed as board name\")\n\t}\n}\n\nfunc assertBoardNameBelongsToCaller(name string) {\n\t// When the board name is the name of a registered user\n\t// check that caller is the owner of the name.\n\tuser, _ := users.ResolveName(name)\n\tif user != nil \u0026\u0026 user.Addr() != std.PreviousRealm().Address() {\n\t\tpanic(\"board name is a user name registered to a different user\")\n\t}\n}\n"},{"name":"permissions_default_test.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/urequire\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n)\n\nvar _ Permissions = (*DefaultPermissions)(nil)\n\nfunc TestDefaultPermissionsWithPermission(t *testing.T) {\n\tcases := []struct {\n\t\tname       string\n\t\tuser       std.Address\n\t\tpermission Permission\n\t\targs       Args\n\t\tsetup      func() *DefaultPermissions\n\t\terr        string\n\t\tcalled     bool\n\t}{\n\t\t{\n\t\t\tname:       \"ok\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\tcalled: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with arguments\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\targs:       Args{\"a\", \"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\tcalled: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"no permission\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"unauthorized\",\n\t\t},\n\t\t{\n\t\t\tname:       \"is not a DAO member\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t\terr: \"unauthorized\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar (\n\t\t\t\tcalled bool\n\t\t\t\targs   Args\n\t\t\t)\n\n\t\t\tperms := tc.setup()\n\t\t\tcallback := func(a Args) {\n\t\t\t\targs = a\n\t\t\t\tcalled = true\n\t\t\t}\n\n\t\t\ttestCaseFn := func() {\n\t\t\t\tperms.WithPermission(tc.user, tc.permission, tc.args, callback)\n\t\t\t}\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.PanicsWithMessage(t, tc.err, testCaseFn, \"panic\")\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NotPanics(t, testCaseFn, \"no panic\")\n\t\t\t}\n\n\t\t\turequire.Equal(t, tc.called, called, \"callback called\")\n\t\t\turequire.Equal(t, len(tc.args), len(args), \"args count\")\n\t\t\tfor i, a := range args {\n\t\t\t\tuassert.Equal(t, tc.args[i].(string), a.(string))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsGetUserRoles(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []string\n\t\tsetup func() *DefaultPermissions\n\t}{\n\t\t{\n\t\t\tname:  \"single role\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple roles\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\", \"foo\", \"bar\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddRole(\"bar\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\", \"foo\", \"bar\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"without roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"not a user\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple users\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"bar\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"admin\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\", \"admin\", \"bar\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\troles := perms.GetUserRoles(tc.user)\n\n\t\t\turequire.Equal(t, len(tc.roles), len(roles), \"user role count\")\n\t\t\tfor i, r := range roles {\n\t\t\t\tuassert.Equal(t, tc.roles[i], string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsHasRole(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\trole  Role\n\t\tsetup func() *DefaultPermissions\n\t\twant  bool\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"admin\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"ok with multiple roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"foo\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"user without roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"has no role\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.HasRole(tc.user, tc.role)\n\t\t\tuassert.Equal(t, got, tc.want)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsHasPermission(t *testing.T) {\n\tcases := []struct {\n\t\tname       string\n\t\tuser       std.Address\n\t\tpermission Permission\n\t\tsetup      func() *DefaultPermissions\n\t\twant       bool\n\t}{\n\t\t{\n\t\t\tname:       \"ok\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with multiple users\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with multiple roles\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"other\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddRole(\"baz\", \"other\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\", \"baz\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"no permission\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"other\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.HasPermission(tc.user, tc.permission)\n\t\t\tuassert.Equal(t, got, tc.want)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsAddUser(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []Role\n\t\tsetup func() *DefaultPermissions\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname:  \"single user\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple users\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"a\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"duplicated user\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"user already exists\",\n\t\t},\n\t\t{\n\t\t\tname:  \"duplicated user\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"foo\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"invalid role: foo\",\n\t\t},\n\t\t{\n\t\t\tname: \"already a DAO member\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(\n\t\t\t\t\tcommondao.New(commondao.WithMember(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")),\n\t\t\t\t)\n\t\t\t},\n\t\t\terr: \"user already exists\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\n\t\t\terr := perms.AddUser(tc.user, tc.roles...)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.Error(t, err, \"expected an error\")\n\t\t\t\tuassert.Equal(t, tc.err, err.Error())\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NoError(t, err)\n\t\t\t}\n\n\t\t\troles := perms.GetUserRoles(tc.user)\n\t\t\tuassert.Equal(t, len(tc.roles), len(roles))\n\t\t\tfor i, r := range roles {\n\t\t\t\turequire.Equal(t, string(tc.roles[i]), string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsSetUserRoles(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []Role\n\t\tsetup func() *DefaultPermissions\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname:  \"single role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple roles\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"b\", \"c\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddRole(\"c\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"duplicated role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"c\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddRole(\"c\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\", \"c\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"remove roles\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\", \"b\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"x\", \"a\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"invalid role: x\",\n\t\t},\n\t\t{\n\t\t\tname: \"user not found\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t\terr: \"user not found\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\n\t\t\terr := perms.SetUserRoles(tc.user, tc.roles...)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.True(t, err != nil, \"expected an error\")\n\t\t\t\tuassert.Equal(t, tc.err, err.Error())\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NoError(t, err)\n\t\t\t}\n\n\t\t\troles := perms.GetUserRoles(tc.user)\n\t\t\tuassert.Equal(t, len(tc.roles), len(roles))\n\t\t\tfor i, r := range roles {\n\t\t\t\turequire.Equal(t, string(tc.roles[i]), string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsRemoveUser(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\tsetup func() *DefaultPermissions\n\t\twant  bool\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"user not found\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.RemoveUser(tc.user)\n\t\t\tuassert.Equal(t, tc.want, got)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsIterateUsers(t *testing.T) {\n\tusers := []User{\n\t\t{\n\t\t\tAddress: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tRoles:   []Role{\"foo\"},\n\t\t},\n\t\t{\n\t\t\tAddress: \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\",\n\t\t\tRoles:   []Role{\"foo\", \"bar\"},\n\t\t},\n\t\t{\n\t\t\tAddress: \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\",\n\t\t\tRoles:   []Role{\"bar\"},\n\t\t},\n\t}\n\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.AddRole(\"foo\", \"perm1\")\n\tperms.AddRole(\"bar\", \"perm2\")\n\tfor _, u := range users {\n\t\tperms.AddUser(u.Address, u.Roles...)\n\t}\n\n\tcases := []struct {\n\t\tname               string\n\t\tstart, count, want int\n\t}{\n\t\t{\n\t\t\tname:  \"exceed users count\",\n\t\t\tcount: 50,\n\t\t\twant:  3,\n\t\t},\n\t\t{\n\t\t\tname:  \"exact users count\",\n\t\t\tcount: 3,\n\t\t\twant:  3,\n\t\t},\n\t\t{\n\t\t\tname:  \"two users\",\n\t\t\tstart: 1,\n\t\t\tcount: 2,\n\t\t\twant:  2,\n\t\t},\n\t\t{\n\t\t\tname:  \"one user\",\n\t\t\tstart: 1,\n\t\t\tcount: 1,\n\t\t\twant:  1,\n\t\t},\n\t\t{\n\t\t\tname:  \"no iteration\",\n\t\t\tstart: 50,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar i int\n\t\t\tperms.IterateUsers(0, len(users), func(u User) bool {\n\t\t\t\turequire.True(t, i \u003c len(users), \"expect iterator to respect number of users\")\n\t\t\t\tuassert.Equal(t, users[i].Address, u.Address)\n\n\t\t\t\turequire.Equal(t, len(users[i].Roles), len(u.Roles), \"expect number of roles to match\")\n\t\t\t\tfor j, r := range u.Roles {\n\t\t\t\t\tuassert.Equal(t, string(users[i].Roles[j]), string(u.Roles[j]))\n\t\t\t\t}\n\n\t\t\t\ti++\n\t\t\t})\n\n\t\t\tuassert.Equal(t, i, len(users), \"expect iterator to iterate all users\")\n\t\t})\n\t}\n}\n"},{"name":"post.gno","body":"package boards2\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nconst dateFormat = \"2006-01-02 3:04pm MST\"\n\ntype PostID uint64\n\nfunc (id PostID) String() string {\n\treturn strconv.Itoa(int(id))\n}\n\nfunc (id PostID) Key() string {\n\treturn padZero(uint64(id), 10)\n}\n\n// A Post is a \"thread\" or a \"reply\" depending on context.\n// A thread is a Post of a Board that holds other replies.\ntype Post struct {\n\tboard         *Board\n\tid            PostID\n\tcreator       std.Address\n\ttitle         string // optional\n\tbody          string\n\tisHidden      bool\n\tisReadonly    bool\n\treplies       avl.Tree // Post.id -\u003e *Post\n\trepliesAll    avl.Tree // Post.id -\u003e *Post (all replies, for top-level posts)\n\treposts       avl.Tree // Board.id -\u003e Post.id\n\tflags         []Flag\n\tthreadID      PostID  // original Post.id\n\tparentID      PostID  // parent Post.id (if reply or repost)\n\trepostBoardID BoardID // original Board.id (if repost)\n\trepostsCount  uint64\n\tcreatedAt     time.Time\n\tupdatedAt     time.Time\n}\n\nfunc newPost(board *Board, id PostID, creator std.Address, title, body string, threadID, parentID PostID, repostBoardID BoardID) *Post {\n\treturn \u0026Post{\n\t\tboard:         board,\n\t\tid:            id,\n\t\tcreator:       creator,\n\t\ttitle:         title,\n\t\tbody:          body,\n\t\treplies:       avl.Tree{},\n\t\trepliesAll:    avl.Tree{},\n\t\treposts:       avl.Tree{},\n\t\tthreadID:      threadID,\n\t\tparentID:      parentID,\n\t\trepostBoardID: repostBoardID,\n\t\tcreatedAt:     time.Now(),\n\t}\n}\n\nfunc (post *Post) IsRepost() bool {\n\treturn post.repostBoardID != 0\n}\n\nfunc (post *Post) IsThread() bool {\n\t// repost threads also have parent ID\n\treturn post.parentID == 0 || post.IsRepost()\n}\n\nfunc (post *Post) GetBoard() *Board {\n\treturn post.board\n}\n\nfunc (post *Post) GetPostID() PostID {\n\treturn post.id\n}\n\nfunc (post *Post) GetParentID() PostID {\n\treturn post.parentID\n}\n\nfunc (post *Post) GetRepostBoardID() BoardID {\n\treturn post.repostBoardID\n}\n\nfunc (post *Post) GetCreator() std.Address {\n\treturn post.creator\n}\n\nfunc (post *Post) GetTitle() string {\n\treturn post.title\n}\n\nfunc (post *Post) GetBody() string {\n\treturn post.body\n}\n\nfunc (post *Post) GetCreatedAt() time.Time {\n\treturn post.createdAt\n}\n\nfunc (post *Post) GetUpdatedAt() time.Time {\n\treturn post.updatedAt\n}\n\nfunc (post *Post) AddFlag(flag Flag) bool {\n\t// TODO: sort flags for fast search in case of big thresholds\n\tfor _, v := range post.flags {\n\t\tif v.User == flag.User {\n\t\t\treturn false\n\t\t}\n\t}\n\n\tpost.flags = append(post.flags, flag)\n\treturn true\n}\n\nfunc (post *Post) FlagsCount() int {\n\treturn len(post.flags)\n}\n\nfunc (post *Post) SetVisible(isVisible bool) {\n\tpost.isHidden = !isVisible\n}\n\nfunc (post *Post) IsHidden() bool {\n\treturn post.isHidden\n}\n\nfunc (post *Post) SetReadonly(isReadonly bool) {\n\tpost.isReadonly = isReadonly\n}\n\nfunc (post *Post) IsReadonly() bool {\n\treturn post.isReadonly\n}\n\nfunc (post *Post) AddReply(creator std.Address, body string) *Post {\n\tboard := post.board\n\tpid := board.incGetPostID()\n\tpKey := pid.Key()\n\treply := newPost(board, pid, creator, \"\", body, post.threadID, post.id, 0)\n\t// TODO: Figure out how to remove this redundancy of data \"replies==repliesAll\" in threads\n\tpost.replies.Set(pKey, reply)\n\tif post.threadID == post.id {\n\t\tpost.repliesAll.Set(pKey, reply)\n\t} else {\n\t\tthread, _ := board.GetThread(post.threadID)\n\t\tthread.repliesAll.Set(pKey, reply)\n\t}\n\treturn reply\n}\n\nfunc (post *Post) Update(title string, body string) {\n\tpost.title = title\n\tpost.body = body\n\tpost.updatedAt = time.Now()\n}\n\nfunc (post *Post) HasReplies() bool {\n\treturn post.replies.Size() \u003e 0\n}\n\nfunc (thread *Post) GetReply(pid PostID) (_ *Post, found bool) {\n\tv, found := thread.repliesAll.Get(pid.Key())\n\tif !found {\n\t\treturn nil, false\n\t}\n\treturn v.(*Post), true\n}\n\nfunc (post *Post) AddRepostTo(creator std.Address, repost *Post, dst *Board) {\n\tif !post.IsThread() {\n\t\tpanic(\"cannot repost non-thread post\")\n\t}\n\n\tpost.repostsCount++\n\tdst.threads.Set(repost.id.Key(), repost)\n\tpost.reposts.Set(dst.id.Key(), repost.id)\n}\n\nfunc (post *Post) DeleteReply(replyID PostID) error {\n\tif !post.IsThread() {\n\t\t// TODO: Allow removing replies from parent replies too\n\t\tpanic(\"cannot delete reply from a non-thread post\")\n\t}\n\n\tif post.id == replyID {\n\t\treturn errors.New(\"expected an ID of an inner reply\")\n\t}\n\n\tkey := replyID.Key()\n\tv, removed := post.repliesAll.Remove(key)\n\tif !removed {\n\t\treturn errors.New(\"reply not found in thread\")\n\t}\n\n\t// TODO: Shouldn't reply be hidden instead of deleted? Maybe replace reply by a deleted message.\n\treply := v.(*Post)\n\tif reply.parentID != post.id {\n\t\tparent, _ := post.GetReply(reply.parentID)\n\t\tparent.replies.Remove(key)\n\t} else {\n\t\tpost.replies.Remove(key)\n\t}\n\treturn nil\n}\n\nfunc (post *Post) GetSummary() string {\n\treturn summaryOf(post.body, 80)\n}\n\nfunc (post *Post) GetURL() string {\n\tif post.IsThread() {\n\t\treturn post.board.GetURLFromThreadID(post.id)\n\t}\n\treturn post.board.GetURLFromReplyID(post.threadID, post.id)\n}\n\nfunc (post *Post) GetReplyFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"CreateReply\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"replyID\", \"0\",\n\t\t\t\"body\", \"\",\n\t\t)\n\t}\n\treturn txlink.Call(\n\t\t\"CreateReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t\t\"body\", \"\",\n\t)\n}\n\nfunc (post *Post) GetRepostFormURL() string {\n\treturn txlink.Call(\n\t\t\"CreateRepost\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.id.String(),\n\t\t\"title\", \"\",\n\t\t\"body\", \"\",\n\t\t\"destinationBoardID\", \"\",\n\t)\n}\n\nfunc (post *Post) GetDeleteFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"DeleteThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t)\n\t}\n\treturn txlink.Call(\n\t\t\"DeleteReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t)\n}\n\nfunc (post *Post) GetEditFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"EditThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"title\", post.GetTitle(),\n\t\t\t\"body\", post.GetBody(),\n\t\t)\n\t}\n\n\treturn txlink.Call(\n\t\t\"EditReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t\t\"body\", post.GetBody(),\n\t)\n}\n\nfunc (post *Post) GetFlagFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"FlagThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"reason\", \"\",\n\t\t)\n\t}\n\n\treturn txlink.Call(\n\t\t\"FlagReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t\t\"reason\", \"\",\n\t)\n}\n\nfunc (post *Post) RenderSummary() string {\n\tvar (\n\t\tb       strings.Builder\n\t\tpostURL = post.GetURL()\n\t\ttitle   = post.title\n\t)\n\n\tb.WriteString(\"**≡ \" + newLink(summaryOf(title, 80), postURL) + \"**  \\n\")\n\tb.WriteString(\"Created by \" + newUserLink(post.creator) + \" on \" + post.createdAt.Format(dateFormat))\n\tb.WriteString(\"  \\n**\")\n\tb.WriteString(strconv.Itoa(post.repliesAll.Size()) + \" replies • \")\n\tb.WriteString(strconv.Itoa(post.reposts.Size()) + \" reposts**\\n\")\n\treturn b.String()\n}\n\nfunc (post *Post) renderSourcePost(indent string) (string, *Post) {\n\tif !post.IsRepost() {\n\t\treturn \"\", nil\n\t}\n\n\tindent += \"\u003e \"\n\n\t// TODO: figure out a way to decouple posts from a global storage.\n\tboard, ok := getBoard(post.repostBoardID)\n\tif !ok {\n\t\treturn indentBody(indent, \"*⚠ Source board has been deleted*\\n\\n\"), nil\n\t}\n\n\tsrcPost, ok := board.GetThread(post.parentID)\n\tif !ok {\n\t\treturn indentBody(indent, \"*⚠ Source post has been deleted*\\n\\n\"), nil\n\t}\n\n\tif srcPost.isHidden {\n\t\treturn indentBody(indent, \"*⚠ Source post has been flagged as inappropriate*\\n\\n\"), nil\n\t}\n\n\treturn indentBody(indent, srcPost.GetSummary()) + \"\\n\\n\", srcPost\n}\n\n// renderPostContent renders post text content (including repost body).\n// Function will dump a predefined message instead of a body if post is hidden.\nfunc (post *Post) renderPostContent(sb *strings.Builder, indent string, levels int) {\n\tif post.isHidden {\n\t\t// Flagged comment should be hidden, but replies still visible (see: #3480)\n\t\t// Flagged threads will be hidden by render function caller.\n\t\tsb.WriteString(indentBody(indent, \"_⚠ Reply is hidden as it has been flagged as inappropriate_\"))\n\t\tsb.WriteString(\"\\n\")\n\t\treturn\n\t}\n\n\tsrcContent, srcPost := post.renderSourcePost(indent)\n\tif post.IsRepost() \u0026\u0026 srcPost != nil {\n\t\tsb.WriteString(\"  \\nThis thread is a repost of [another thread](\" + srcPost.GetURL() + \"): \\n\")\n\t}\n\n\tsb.WriteString(srcContent)\n\n\tif post.IsRepost() \u0026\u0026 srcPost == nil \u0026\u0026 len(post.body) \u003e 0 {\n\t\t// Add a newline to separate source deleted message from repost body content\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\tsb.WriteString(indentBody(indent, post.body))\n\tsb.WriteString(\"\\n\")\n\n\tif post.IsThread() {\n\t\t// Split content and controls for threads.\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\t// Buttons \u0026 counters\n\tsb.WriteString(indent)\n\tif !post.IsThread() {\n\t\tsb.WriteString(\"  \\n\")\n\t\tsb.WriteString(indent)\n\t}\n\n\tsb.WriteString(\"Created by \")\n\tsb.WriteString(newUserLink(post.creator))\n\tsb.WriteString(\" on \")\n\tsb.WriteString(post.createdAt.Format(dateFormat))\n\n\t// Add a reply view link to each top level reply\n\tif !post.IsThread() {\n\t\tsb.WriteString(\", \")\n\t\tsb.WriteString(newLink(\"#\"+post.id.String(), post.GetURL()))\n\t}\n\n\tif post.repostsCount \u003e 0 {\n\t\tsb.WriteString(\", \")\n\t\tsb.WriteString(strconv.FormatUint(post.repostsCount, 10))\n\t\tsb.WriteString(\" repost(s)\")\n\t}\n\n\tsb.WriteString(\"  \\n\")\n\tsb.WriteString(newLink(\"Flag\", post.GetFlagFormURL()))\n\n\tif post.IsThread() {\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Repost\", post.GetRepostFormURL()))\n\t}\n\n\tisReadonly := post.IsReadonly() || post.GetBoard().IsReadonly()\n\tif !isReadonly {\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Reply\", post.GetReplyFormURL()))\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Edit\", post.GetEditFormURL()))\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Delete\", post.GetDeleteFormURL()))\n\t}\n\n\tif levels == 0 {\n\t\tsb.WriteString(\" • \")\n\t\tif post.IsThread() {\n\t\t\tsb.WriteString(newLink(\"Show all Replies\", post.board.GetURLFromThreadID(post.GetPostID())))\n\t\t} else {\n\t\t\tsb.WriteString(newLink(\"View Thread\", post.board.GetURLFromThreadID(post.threadID)))\n\t\t}\n\t}\n\n\tsb.WriteString(\" \\n\")\n}\n\nfunc (post *Post) Render(path string, indent string, levels int) string {\n\tif post == nil {\n\t\treturn \"nil post\"\n\t}\n\n\t// TODO: pass a builder as arg into Render.\n\tvar sb strings.Builder\n\n\t// Thread reposts might not have a title, if so get title from source thread\n\ttitle := post.title\n\tif post.IsRepost() \u0026\u0026 title == \"\" {\n\t\tif board, ok := getBoard(post.repostBoardID); ok {\n\t\t\tif src, ok := board.GetThread(post.parentID); ok {\n\t\t\t\ttitle = src.GetTitle()\n\t\t\t}\n\t\t}\n\t}\n\n\tsb.WriteString(indent)\n\tif title != \"\" { // Replies don't have a title\n\t\tsb.WriteString(\"## \" + title + \"\\n\")\n\t}\n\tsb.WriteString(indent + \"\\n\")\n\n\tpost.renderPostContent(\u0026sb, indent, levels)\n\n\tif post.replies.Size() == 0 {\n\t\treturn sb.String()\n\t}\n\n\t// XXX: This triggers for reply views\n\tif levels == 0 {\n\t\tsb.WriteString(indent + \"\\n\")\n\t\tsb.WriteString(indent)\n\t\tsb.WriteString(\"\\n\")\n\t\treturn sb.String()\n\t}\n\n\tif path != \"\" {\n\t\tsb.WriteString(post.renderTopLevelReplies(path, indent, levels-1))\n\t} else {\n\t\tsb.WriteString(post.renderSubReplies(indent, levels-1))\n\t}\n\treturn sb.String()\n}\n\nfunc (post *Post) renderTopLevelReplies(path, indent string, levels int) string {\n\tp, err := pager.New(path, post.replies.Size(), pager.WithPageSize(pageSizeReplies))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tvar (\n\t\tb              strings.Builder\n\t\tcommentsIndent = indent + \"\u003e \"\n\t)\n\n\trender := func(_ string, v any) bool {\n\t\treply := v.(*Post)\n\n\t\tb.WriteString(indent)\n\t\tb.WriteString(\"\\n\")\n\t\tb.WriteString(reply.Render(\"\", commentsIndent, levels-1))\n\t\treturn false\n\t}\n\n\tb.WriteString(\"\\n\\n---\\nSort by: \")\n\tr := realmpath.Parse(path)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tb.WriteString(newLink(\"newest first\", r.String()))\n\t\tb.WriteString(\"\\n\")\n\t\tpost.replies.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tb.WriteString(newLink(\"oldest first\", r.String()))\n\t\tb.WriteString(\"\\n\")\n\t\tpost.replies.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tb.WriteString(\"\\n---\\n\")\n\t\tb.WriteString(pager.Picker(p))\n\t}\n\n\treturn b.String()\n}\n\nfunc (post *Post) renderSubReplies(indent string, levels int) string {\n\tvar (\n\t\tb              strings.Builder\n\t\tcommentsIndent = indent + \"\u003e \"\n\t)\n\n\tpost.replies.Iterate(\"\", \"\", func(_ string, v any) bool {\n\t\treply := v.(*Post)\n\n\t\tb.WriteString(indent)\n\t\tb.WriteString(\"\\n\")\n\t\tb.WriteString(reply.Render(\"\", commentsIndent, levels-1))\n\t\treturn false\n\t})\n\n\treturn b.String()\n}\n\nfunc (post *Post) RenderInner() string {\n\tif post.IsThread() {\n\t\tpanic(\"unexpected thread\")\n\t}\n\n\tvar (\n\t\ts         string\n\t\tthreadID  = post.threadID\n\t\tthread, _ = post.board.GetThread(threadID) // TODO: This seems redundant (post == thread)\n\t)\n\n\t// Fully render parent if it's not a repost.\n\tif !post.IsRepost() {\n\t\tvar (\n\t\t\tparent   *Post\n\t\t\tparentID = post.parentID\n\t\t)\n\n\t\tif thread.id == parentID {\n\t\t\tparent = thread\n\t\t} else {\n\t\t\tparent, _ = thread.GetReply(parentID)\n\t\t}\n\n\t\ts += parent.Render(\"\", \"\", 0) + \"\\n\"\n\t}\n\n\ts += post.Render(\"\", \"\u003e \", 5)\n\treturn s\n}\n"},{"name":"post_test.gno","body":"package boards2\n\nimport (\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nfunc TestPostUpdate(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tboard := newBoard(1, \"test123\", addr, perms)\n\tcreator := testutils.TestAddress(\"creator\")\n\tpost := newPost(board, 1, creator, \"Title\", \"Body\", 1, 0, 0)\n\ttitle := \"New Title\"\n\tbody := \"New body\"\n\n\tpost.Update(title, body)\n\n\tuassert.Equal(t, title, post.GetTitle())\n\tuassert.Equal(t, body, post.GetBody())\n\tuassert.False(t, post.GetUpdatedAt().IsZero())\n}\n\nfunc TestPostAddFlag(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tpost := createTestThread(t)\n\n\tflag := Flag{\n\t\tUser:   addr,\n\t\tReason: \"foobar\",\n\t}\n\tuassert.True(t, post.AddFlag(flag))\n\tuassert.False(t, post.AddFlag(flag), \"should reject flag from duplicate user\")\n\tuassert.Equal(t, post.FlagsCount(), 1)\n}\n\nfunc TestPostSetVisible(t *testing.T) {\n\tpost := createTestThread(t)\n\tuassert.False(t, post.IsHidden(), \"post should be visible by default\")\n\n\tpost.SetVisible(false)\n\tuassert.True(t, post.IsHidden(), \"post should be hidden\")\n\n\tpost.SetVisible(true)\n\tuassert.False(t, post.IsHidden(), \"post should be visible\")\n}\n\nfunc TestPostAddRepostTo(t *testing.T) {\n\t// TODO: Improve this unit test\n\taddr := testutils.TestAddress(\"creatorDstBoard\")\n\tperms := createDefaultBoardPermissions(addr)\n\tcases := []struct {\n\t\tname, title, body string\n\t\tdstBoard          *Board\n\t\tthread            *Post\n\t\tsetup             func() *Post\n\t\terr               string\n\t}{\n\t\t{\n\t\t\tname:     \"repost thread\",\n\t\t\ttitle:    \"Repost Title\",\n\t\t\tbody:     \"Repost body\",\n\t\t\tdstBoard: newBoard(42, \"dst123\", addr, perms),\n\t\t\tsetup:    func() *Post { return createTestThread(t) },\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid repost from reply\",\n\t\t\tsetup: func() *Post { return createTestReply(t) },\n\t\t\terr:   \"cannot repost non-thread post\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar (\n\t\t\t\trepost  *Post\n\t\t\t\tcreator = testutils.TestAddress(\"repostCreator\")\n\t\t\t\tthread  = tc.setup()\n\t\t\t)\n\n\t\t\tcreateRepost := func() {\n\t\t\t\tvar repostId PostID\n\t\t\t\tif tc.dstBoard != nil {\n\t\t\t\t\trepostId = tc.dstBoard.incGetPostID()\n\t\t\t\t}\n\n\t\t\t\trepost = newPost(tc.dstBoard, repostId, creator, tc.title, tc.body, repostId, thread.GetPostID(), thread.GetBoard().GetID())\n\t\t\t\tthread.AddRepostTo(creator, repost, tc.dstBoard)\n\t\t\t}\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\tuassert.PanicsWithMessage(t, tc.err, createRepost)\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\tuassert.NotPanics(t, createRepost)\n\t\t\t}\n\n\t\t\tr, found := tc.dstBoard.GetThread(repost.GetPostID())\n\t\t\tuassert.True(t, found)\n\t\t\tuassert.True(t, repost == r)\n\t\t\tuassert.Equal(t, tc.title, repost.GetTitle())\n\t\t\tuassert.Equal(t, tc.body, repost.GetBody())\n\t\t\tuassert.Equal(t, uint(thread.GetBoard().GetID()), uint(repost.GetRepostBoardID()))\n\t\t})\n\t}\n}\n\nfunc TestNewThread(t *testing.T) {\n\tcreator := testutils.TestAddress(\"creator\")\n\ttitle := \"Test Title\"\n\tbody := strings.Repeat(\"A\", 82)\n\tboardID := BoardID(1)\n\tthreadID := PostID(42)\n\tboardName := \"test123\"\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(boardID, boardName, creator, perms)\n\turl := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2:%s/%d\",\n\t\tboardName,\n\t\tuint(threadID),\n\t)\n\treplyURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=CreateReply\u0026boardID=%d\u0026body=\u0026replyID=0\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\teditURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=EditThread\u0026boardID=%d\u0026body=%s\u0026threadID=%d\u0026title=%s\",\n\t\tuint(boardID),\n\t\tbody,\n\t\tuint(threadID),\n\t\tstrings.ReplaceAll(title, \" \", \"+\"),\n\t)\n\trepostURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=CreateRepost\u0026boardID=%d\u0026body=\u0026destinationBoardID=\u0026threadID=%d\u0026title=\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\tdeleteURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=DeleteThread\u0026boardID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\tflagURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=FlagThread\u0026boardID=%d\u0026reason=\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\n\tthread := newPost(board, threadID, creator, title, body, threadID, 0, 0)\n\n\tuassert.True(t, thread.IsThread())\n\tuassert.Equal(t, uint(threadID), uint(thread.GetPostID()))\n\tuassert.False(t, thread.GetCreatedAt().IsZero())\n\tuassert.True(t, thread.GetUpdatedAt().IsZero())\n\tuassert.Equal(t, title, thread.GetTitle())\n\tuassert.Equal(t, body[:77]+\"...\", thread.GetSummary())\n\tuassert.False(t, thread.HasReplies())\n\tuassert.Equal(t, url, thread.GetURL())\n\tuassert.Equal(t, replyURL, thread.GetReplyFormURL())\n\tuassert.Equal(t, editURL, thread.GetEditFormURL())\n\tuassert.Equal(t, repostURL, thread.GetRepostFormURL())\n\tuassert.Equal(t, deleteURL, thread.GetDeleteFormURL())\n\tuassert.Equal(t, flagURL, thread.GetFlagFormURL())\n}\n\nfunc TestThreadAddReply(t *testing.T) {\n\treplier := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\tthreadID := uint(thread.GetPostID())\n\tbody := \"A reply\"\n\n\treply := thread.AddReply(replier, body)\n\n\tr, found := thread.GetReply(reply.GetPostID())\n\tuassert.True(t, found)\n\tuassert.True(t, reply == r)\n\tuassert.Equal(t, threadID+1, uint(reply.GetPostID()))\n\tuassert.Equal(t, reply.GetCreator(), replier)\n\tuassert.Equal(t, reply.GetBody(), body)\n\tuassert.True(t, thread.HasReplies())\n}\n\nfunc TestThreadGetReply(t *testing.T) {\n\tcases := []struct {\n\t\tname   string\n\t\tthread *Post\n\t\tsetup  func(thread *Post) (replyID PostID)\n\t\tfound  bool\n\t}{\n\t\t{\n\t\t\tname:   \"found\",\n\t\t\tthread: createTestThread(t),\n\t\t\tsetup: func(thread *Post) PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t\tfound: true,\n\t\t},\n\t\t{\n\t\t\tname:   \"not found\",\n\t\t\tthread: createTestThread(t),\n\t\t\tsetup:  func(*Post) PostID { return 42 },\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup(tc.thread)\n\n\t\t\treply, found := tc.thread.GetReply(replyID)\n\n\t\t\tuassert.Equal(t, tc.found, found)\n\t\t\tif reply != nil {\n\t\t\t\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestThreadDeleteReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tcases := []struct {\n\t\tname  string\n\t\tsetup func() PostID\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"ok nested\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.AddReply(testutils.TestAddress(\"replier2\"), \"\").GetPostID()\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid\",\n\t\t\tsetup: func() PostID { return thread.GetPostID() },\n\t\t\terr:   \"expected an ID of an inner reply\",\n\t\t},\n\t\t{\n\t\t\tname:  \"not found\",\n\t\t\tsetup: func() PostID { return 42 },\n\t\t\terr:   \"reply not found in thread\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup()\n\n\t\t\terr := thread.DeleteReply(replyID)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\tuassert.ErrorContains(t, err, tc.err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tuassert.NoError(t, err)\n\t\t\t_, found := thread.GetReply(replyID)\n\t\t\tuassert.False(t, found)\n\t\t})\n\t}\n}\n\nfunc TestThreadRenderSummary(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestThreadRender(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestThreadRenderInner(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestNewReply(t *testing.T) {\n\tcreator := testutils.TestAddress(\"creator\")\n\tbody := strings.Repeat(\"A\", 82)\n\tboardID := BoardID(1)\n\tthreadID := PostID(42)\n\tparentID := PostID(1)\n\treplyID := PostID(2)\n\tboardName := \"test123\"\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(boardID, boardName, creator, perms)\n\turl := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2:%s/%d/%d\",\n\t\tboardName,\n\t\tuint(threadID),\n\t\tuint(replyID),\n\t)\n\treplyURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=CreateReply\u0026boardID=%d\u0026body=\u0026replyID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(replyID),\n\t\tuint(threadID),\n\t)\n\tdeleteURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=DeleteReply\u0026boardID=%d\u0026replyID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(replyID),\n\t\tuint(threadID),\n\t)\n\n\treply := newPost(board, replyID, creator, \"\", body, threadID, parentID, 0)\n\n\tuassert.False(t, reply.IsThread())\n\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\tuassert.False(t, reply.GetCreatedAt().IsZero())\n\tuassert.True(t, reply.GetUpdatedAt().IsZero())\n\tuassert.False(t, reply.HasReplies())\n\tuassert.Equal(t, body[:77]+\"...\", reply.GetSummary())\n\tuassert.Equal(t, url, reply.GetURL())\n\tuassert.Equal(t, replyURL, reply.GetReplyFormURL())\n\tuassert.Equal(t, deleteURL, reply.GetDeleteFormURL())\n}\n\nfunc TestReplyAddReply(t *testing.T) {\n\treplier := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"parentReplier\"), \"\")\n\tparentReplyID := uint(parentReply.GetPostID())\n\tbody := \"A child reply\"\n\n\treply := parentReply.AddReply(replier, body)\n\n\tr, found := thread.GetReply(reply.GetPostID())\n\tuassert.True(t, found)\n\tuassert.True(t, reply == r)\n\tuassert.Equal(t, parentReplyID, uint(reply.GetParentID()))\n\tuassert.Equal(t, parentReplyID+1, uint(reply.GetPostID()))\n\tuassert.Equal(t, reply.GetCreator(), replier)\n\tuassert.Equal(t, reply.GetBody(), body)\n\tuassert.False(t, reply.HasReplies())\n\tuassert.True(t, parentReply.HasReplies())\n}\n\nfunc TestReplyGetReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"parentReplier\"), \"\")\n\tcases := []struct {\n\t\tname  string\n\t\tsetup func() PostID\n\t\tfound bool\n\t}{\n\t\t{\n\t\t\tname: \"found\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := parentReply.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t\tfound: true,\n\t\t},\n\t\t{\n\t\t\tname:  \"not found\",\n\t\t\tsetup: func() PostID { return 42 },\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup()\n\n\t\t\treply, found := thread.GetReply(replyID)\n\n\t\t\tuassert.Equal(t, tc.found, found)\n\t\t\tif reply != nil {\n\t\t\t\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestReplyDeleteReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\treply := parentReply.AddReply(testutils.TestAddress(\"replier2\"), \"\")\n\n\t// NOTE: Deleting a reply from a parent reply should eventually be suported\n\tuassert.PanicsWithMessage(t, \"cannot delete reply from a non-thread post\", func() {\n\t\tparentReply.DeleteReply(reply.GetPostID())\n\t})\n}\n\nfunc TestReplyRender(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc createTestThread(t *testing.T) *Post {\n\tt.Helper()\n\n\tcreator := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(1, \"test_board_123\", creator, perms)\n\treturn board.AddThread(creator, \"Title\", \"Body\")\n}\n\nfunc createTestReply(t *testing.T) *Post {\n\tt.Helper()\n\n\tcreator := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\treturn thread.AddReply(creator, \"Test message\")\n}\n"},{"name":"public.gno","body":"package boards2\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nconst (\n\t// MaxBoardNameLength defines the maximum length allowed for board names.\n\tMaxBoardNameLength = 50\n\n\t// MaxThreadTitleLength defines the maximum length allowed for thread titles.\n\tMaxThreadTitleLength = 100\n\n\t// MaxReplyLength defines the maximum length allowed for replies.\n\tMaxReplyLength = 300\n)\n\nvar (\n\treBoardName = regexp.MustCompile(`(?i)^[a-z]+[a-z0-9_\\-]{2,50}$`)\n\n\t// Minimalistic Markdown line prefix checks that if allowed would\n\t// break the current UI when submitting a reply. It denies replies\n\t// with headings, blockquotes or horizontal lines.\n\treDeniedReplyLinePrefixes = regexp.MustCompile(`(?m)^\\s*(#|---|\u003e)+`)\n)\n\n// SetHelp sets or updates boards realm help content.\nfunc SetHelp(content string) {\n\tcontent = strings.TrimSpace(content)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{content}\n\tgPerms.WithPermission(caller, PermissionRealmHelp, args, func(Args) {\n\t\tgHelp = content\n\t})\n}\n\n// SetPermissions sets a permissions implementation for boards2 realm or a board.\nfunc SetPermissions(bid BoardID, p Permissions) {\n\tassertRealmIsNotLocked()\n\n\tif p == nil {\n\t\tpanic(\"permissions is required\")\n\t}\n\n\tif bid != 0 {\n\t\tassertBoardExists(bid)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{bid}\n\tgPerms.WithPermission(caller, PermissionPermissionsUpdate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\n\t\t// When board ID is zero it means that realm permissions are being updated\n\t\tif bid == 0 {\n\t\t\tgPerms = p\n\n\t\t\tstd.Emit(\n\t\t\t\t\"RealmPermissionsUpdated\",\n\t\t\t\t\"caller\", caller.String(),\n\t\t\t)\n\t\t\treturn\n\t\t}\n\n\t\t// Otherwise update the permissions of a single board\n\t\tboard := mustGetBoard(bid)\n\t\tboard.perms = p\n\n\t\tstd.Emit(\n\t\t\t\"BoardPermissionsUpdated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", bid.String(),\n\t\t)\n\t})\n}\n\n// SetRealmNotice sets a notice to be displayed globally by the realm.\n// An empty message removes the realm notice.\nfunc SetRealmNotice(message string) {\n\tmessage = strings.TrimSpace(message)\n\tcaller := std.PreviousRealm().Address()\n\tgPerms.WithPermission(caller, PermissionRealmNotice, nil, func(Args) {\n\t\tgNotice = message\n\n\t\tstd.Emit(\n\t\t\t\"RealmNoticeChanged\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"message\", message,\n\t\t)\n\t})\n}\n\n// GetBoardIDFromName searches a board by name and returns it's ID.\nfunc GetBoardIDFromName(name string) (_ BoardID, found bool) {\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\treturn 0, false\n\t}\n\treturn v.(*Board).id, true\n}\n\n// CreateBoard creates a new board.\nfunc CreateBoard(name string) BoardID {\n\tassertRealmIsNotLocked()\n\n\tname = strings.TrimSpace(name)\n\tassertIsValidBoardName(name)\n\tassertBoardNameNotExists(name)\n\n\tcaller := std.PreviousRealm().Address()\n\tid := incGetBoardID()\n\targs := Args{name, id}\n\tgPerms.WithPermission(caller, PermissionBoardCreate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardNameNotExists(name)\n\n\t\tperms := createDefaultBoardPermissions(caller)\n\t\tboard := newBoard(id, name, caller, perms)\n\t\tgBoardsByID.Set(id.Key(), board)\n\t\tgBoardsByName.Set(name, board)\n\n\t\tstd.Emit(\n\t\t\t\"BoardCreated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", id.String(),\n\t\t\t\"name\", name,\n\t\t)\n\t})\n\treturn id\n}\n\n// RenameBoard changes the name of an existing board.\n//\n// A history of previous board names is kept when boards are renamed.\n// Because of that boards are also accesible using previous name(s).\nfunc RenameBoard(name, newName string) {\n\tassertRealmIsNotLocked()\n\n\tnewName = strings.TrimSpace(newName)\n\tassertIsValidBoardName(newName)\n\tassertBoardNameNotExists(newName)\n\n\tboard := mustGetBoardByName(name)\n\tassertBoardIsNotFrozen(board)\n\n\tbid := board.GetID()\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{bid, name, newName}\n\tboard.perms.WithPermission(caller, PermissionBoardRename, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardNameNotExists(newName)\n\n\t\tboard := mustGetBoard(bid)\n\t\tboard.aliases = append(board.aliases, board.name)\n\t\tboard.name = newName\n\n\t\t// Index board for the new name keeping previous indexes for older names\n\t\tgBoardsByName.Set(newName, board)\n\n\t\tstd.Emit(\n\t\t\t\"BoardRenamed\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", bid.String(),\n\t\t\t\"name\", name,\n\t\t\t\"newName\", newName,\n\t\t)\n\t})\n}\n\n// CreateThread creates a new thread within a board.\nfunc CreateThread(boardID BoardID, title, body string) PostID {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tbody = strings.TrimSpace(body)\n\tassertBodyIsNotEmpty(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionThreadCreate)\n\n\tthread := board.AddThread(caller, title, body)\n\n\tstd.Emit(\n\t\t\"ThreadCreated\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", thread.GetPostID().String(),\n\t\t\"title\", title,\n\t)\n\n\treturn thread.id\n}\n\n// CreateReply creates a new comment or reply within a thread.\n//\n// The value of `replyID` is only required when creating a reply of another reply.\nfunc CreateReply(boardID BoardID, threadID, replyID PostID, body string) PostID {\n\tassertRealmIsNotLocked()\n\n\tbody = strings.TrimSpace(body)\n\tassertReplyBodyIsValid(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionReplyCreate)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\tassertThreadIsNotFrozen(thread)\n\n\tvar reply *Post\n\tif replyID == 0 {\n\t\t// When the parent reply is the thread just add reply to thread\n\t\treply = thread.AddReply(caller, body)\n\t} else {\n\t\t// Try to get parent reply and add a new child reply\n\t\tparent := mustGetReply(thread, replyID)\n\t\tif parent.IsHidden() || parent.IsReadonly() {\n\t\t\tpanic(\"replying to a hidden or frozen reply is not allowed\")\n\t\t}\n\n\t\treply = parent.AddReply(caller, body)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyCreate\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", reply.GetPostID().String(),\n\t)\n\n\treturn reply.id\n}\n\n// CreateRepost reposts a thread into another board.\nfunc CreateRepost(boardID BoardID, threadID PostID, title, body string, destinationBoardID BoardID) PostID {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tcaller := std.PreviousRealm().Address()\n\tdst := mustGetBoard(destinationBoardID)\n\tassertBoardIsNotFrozen(dst)\n\tassertHasBoardPermission(dst, caller, PermissionThreadRepost)\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\tif thread.IsRepost() {\n\t\tpanic(\"reposting a thread that is a repost is not allowed\")\n\t}\n\n\trepostId := dst.incGetPostID()\n\tbody = strings.TrimSpace(body)\n\trepost := newPost(dst, repostId, caller, title, body, repostId, thread.GetPostID(), thread.GetBoard().GetID())\n\tthread.AddRepostTo(caller, repost, dst)\n\n\tstd.Emit(\n\t\t\"Repost\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"destinationBoardID\", destinationBoardID.String(),\n\t\t\"title\", title,\n\t)\n\n\treturn repostId\n}\n\n// DeleteThread deletes a thread from a board.\n//\n// Threads can be deleted by the users who created them or otherwise by users with special permissions.\nfunc DeleteThread(boardID BoardID, threadID PostID) {\n\t// Council members should always be able to delete\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner) // TODO: Add DeleteThread filetest cases for realm owners\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\n\tif !isRealmOwner {\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertThreadIsNotFrozen(thread)\n\n\t\tif caller != thread.GetCreator() {\n\t\t\tassertHasBoardPermission(board, caller, PermissionThreadDelete)\n\t\t}\n\t}\n\n\t// Hard delete thread and all its replies\n\tboard.DeleteThread(threadID)\n\n\tstd.Emit(\n\t\t\"ThreadDeleted\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t)\n}\n\n// DeleteReply deletes a reply from a thread.\n//\n// Replies can be deleted by the users who created them or otherwise by users with special permissions.\n// Soft deletion is used when the deleted reply contains sub replies, in which case the reply content\n// is replaced by a text informing that reply has been deleted to avoid deleting sub-replies.\nfunc DeleteReply(boardID BoardID, threadID, replyID PostID) {\n\t// Council members should always be able to delete\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner) // TODO: Add DeleteReply filetest cases for realm owners\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\treply := mustGetReply(thread, replyID)\n\n\tif !isRealmOwner {\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertThreadIsNotFrozen(thread)\n\t\tassertReplyIsVisible(reply)\n\t\tassertReplyIsNotFrozen(reply)\n\n\t\tif caller != reply.GetCreator() {\n\t\t\tassertHasBoardPermission(board, caller, PermissionReplyDelete)\n\t\t}\n\t}\n\n\t// Soft delete reply by changing its body when it contains\n\t// sub-replies, otherwise hard delete it.\n\tif reply.HasReplies() {\n\t\treply.Update(reply.GetTitle(), \"This reply has been deleted\")\n\t} else {\n\t\tthread.DeleteReply(replyID)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyDeleted\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t)\n}\n\n// EditThread updates the title and body of thread.\n//\n// Threads can be updated by the users who created them or otherwise by users with special permissions.\nfunc EditThread(boardID BoardID, threadID PostID, title, body string) {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\tbody = strings.TrimSpace(body)\n\tif !thread.IsRepost() {\n\t\tassertBodyIsNotEmpty(body)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tif caller != thread.GetCreator() {\n\t\tassertHasBoardPermission(board, caller, PermissionThreadEdit)\n\t}\n\n\tthread.Update(title, body)\n\n\tstd.Emit(\n\t\t\"ThreadEdited\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"title\", title,\n\t)\n}\n\n// EditReply updates the body of comment or reply.\n//\n// Replies can be updated only by the users who created them.\nfunc EditReply(boardID BoardID, threadID, replyID PostID, body string) {\n\tassertRealmIsNotLocked()\n\n\tbody = strings.TrimSpace(body)\n\tassertReplyBodyIsValid(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\tassertReplyIsNotFrozen(reply)\n\n\tcaller := std.PreviousRealm().Address()\n\tif caller != reply.GetCreator() {\n\t\tpanic(\"only the reply creator is allowed to edit it\")\n\t}\n\n\treply.Update(\"\", body)\n\n\tstd.Emit(\n\t\t\"ReplyEdited\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"body\", body,\n\t)\n}\n\n// InviteMember adds a member to the realm or to a boards.\n//\n// A role can optionally be specified to be assigned to the new member.\n// Board ID is only required when inviting a member to a board.\nfunc InviteMember(boardID BoardID, user std.Address, role Role) {\n\tassertUserAddressIsValid(user)\n\tassertMembersUpdateIsEnabled(boardID)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{user, role}\n\tperms.WithPermission(caller, PermissionMemberInvite, args, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif err := perms.AddUser(user, role); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"MemberInvited\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", user.String(),\n\t\t\t\"role\", string(role),\n\t\t)\n\t})\n}\n\n// RemoveMember removes a member from the realm or a boards.\n//\n// Board ID is only required when removing a member from board.\nfunc RemoveMember(boardID BoardID, member std.Address) {\n\tassertMembersUpdateIsEnabled(boardID)\n\tassertMemberAddressIsValid(member)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\tperms.WithPermission(caller, PermissionMemberRemove, Args{member}, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif !perms.RemoveUser(member) {\n\t\t\tpanic(\"member not found\")\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"MemberRemoved\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", member.String(),\n\t\t)\n\t})\n}\n\n// IsMember checks if an user is a member of the realm or a board.\n//\n// Board ID is only required when checking if a user is a member of a board.\nfunc IsMember(boardID BoardID, user std.Address) bool {\n\tassertUserAddressIsValid(user)\n\n\tif boardID != 0 {\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tperms := mustGetPermissions(boardID)\n\treturn perms.HasUser(user)\n}\n\n// HasMemberRole checks if a realm or board member has a specific role assigned.\n//\n// Board ID is only required when checking a member of a board.\nfunc HasMemberRole(boardID BoardID, member std.Address, role Role) bool {\n\tassertMemberAddressIsValid(member)\n\n\tif boardID != 0 {\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tperms := mustGetPermissions(boardID)\n\treturn perms.HasRole(member, role)\n}\n\n// ChangeMemberRole changes the role of a realm or board member.\n//\n// Board ID is only required when changing the role for a member of a board.\nfunc ChangeMemberRole(boardID BoardID, member std.Address, role Role) {\n\tassertMemberAddressIsValid(member)\n\tassertMembersUpdateIsEnabled(boardID)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{boardID, member, role}\n\tperms.WithPermission(caller, PermissionRoleChange, args, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif err := perms.SetUserRoles(member, role); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"RoleChanged\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", member.String(),\n\t\t\t\"newRole\", string(role),\n\t\t)\n\t})\n}\n\n// IterateRealmMembers iterates realm members.\n// The iteration is done only for realm members, board members are not iterated.\nfunc IterateRealmMembers(offset int, fn UsersIterFn) (halted bool) {\n\tcount := gPerms.UsersCount() - offset\n\treturn gPerms.IterateUsers(offset, count, fn)\n}\n\n// IterateBoards iterates realm boards.\nfunc IterateBoards(offset int, fn func(ReadonlyBoard) bool) (halted bool) {\n\tcount := gBoardsByID.Size() - offset\n\treturn gBoardsByID.IterateByOffset(offset, count, func(_ string, v any) bool {\n\t\tboard, _ := v.(*Board)\n\t\treturn fn(readonlyBoard{board})\n\t})\n}\n\nfunc assertMemberAddressIsValid(member std.Address) {\n\tif !member.IsValid() {\n\t\tpanic(\"invalid member address\")\n\t}\n}\n\nfunc assertUserAddressIsValid(user std.Address) {\n\tif !user.IsValid() {\n\t\tpanic(\"invalid user address\")\n\t}\n}\n\nfunc assertHasBoardPermission(b *Board, user std.Address, p Permission) {\n\tif !b.perms.HasPermission(user, p) {\n\t\tpanic(\"unauthorized\")\n\t}\n}\n\nfunc assertBoardExists(id BoardID) {\n\tif _, found := getBoard(id); !found {\n\t\tpanic(\"board not found: \" + id.String())\n\t}\n}\n\nfunc assertBoardIsNotFrozen(b *Board) {\n\tif b.IsReadonly() {\n\t\tpanic(\"board is frozen\")\n\t}\n}\n\nfunc assertIsValidBoardName(name string) {\n\tsize := len(name)\n\tif size == 0 {\n\t\tpanic(\"board name is empty\")\n\t}\n\n\tif size \u003e MaxBoardNameLength {\n\t\tn := strconv.Itoa(MaxBoardNameLength)\n\t\tpanic(\"board name is too long, maximum allowed is \" + n + \" characters\")\n\t}\n\n\tif !reBoardName.MatchString(name) {\n\t\tpanic(\"board name contains invalid characters\")\n\t}\n}\n\nfunc assertThreadIsNotFrozen(t *Post) {\n\tif t.IsReadonly() {\n\t\tpanic(\"thread is frozen\")\n\t}\n}\n\nfunc assertReplyIsNotFrozen(r *Post) {\n\tif r.IsReadonly() {\n\t\tpanic(\"reply is frozen\")\n\t}\n}\n\nfunc assertNameIsNotEmpty(name string) {\n\tif name == \"\" {\n\t\tpanic(\"name is empty\")\n\t}\n}\n\nfunc assertTitleIsValid(title string) {\n\tif title == \"\" {\n\t\tpanic(\"title is empty\")\n\t}\n\n\tif len(title) \u003e MaxThreadTitleLength {\n\t\tn := strconv.Itoa(MaxThreadTitleLength)\n\t\tpanic(\"thread title is too long, maximum allowed is \" + n + \" characters\")\n\t}\n}\n\nfunc assertBodyIsNotEmpty(body string) {\n\tif body == \"\" {\n\t\tpanic(\"body is empty\")\n\t}\n}\n\nfunc assertBoardNameNotExists(name string) {\n\tif gBoardsByName.Has(name) {\n\t\tpanic(\"board already exists\")\n\t}\n}\n\nfunc assertThreadExists(b *Board, threadID PostID) {\n\tif _, found := b.GetThread(threadID); !found {\n\t\tpanic(\"thread not found: \" + threadID.String())\n\t}\n}\n\nfunc assertReplyExists(thread *Post, replyID PostID) {\n\tif _, found := thread.GetReply(replyID); !found {\n\t\tpanic(\"reply not found: \" + replyID.String())\n\t}\n}\n\nfunc assertThreadIsVisible(thread *Post) {\n\tif thread.IsHidden() {\n\t\tpanic(\"thread is hidden\")\n\t}\n}\n\nfunc assertReplyIsVisible(thread *Post) {\n\tif thread.IsHidden() {\n\t\tpanic(\"reply is hidden\")\n\t}\n}\n\nfunc assertReplyBodyIsValid(body string) {\n\tassertBodyIsNotEmpty(body)\n\n\tif len(body) \u003e MaxReplyLength {\n\t\tn := strconv.Itoa(MaxReplyLength)\n\t\tpanic(\"reply is too long, maximum allowed is \" + n + \" characters\")\n\t}\n\n\tif reDeniedReplyLinePrefixes.MatchString(body) {\n\t\tpanic(\"using Markdown headings, blockquotes or horizontal lines is not allowed in replies\")\n\t}\n}\n\nfunc assertMembersUpdateIsEnabled(boardID BoardID) {\n\tif boardID != 0 {\n\t\tassertRealmIsNotLocked()\n\t} else {\n\t\tassertRealmMembersAreNotLocked()\n\t}\n}\n"},{"name":"public_flag.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// SetFlaggingThreshold sets the number of flags required to hide a thread or comment.\n//\n// Threshold is only applicable within the board where it's setted.\nfunc SetFlaggingThreshold(boardID BoardID, threshold int) {\n\tif threshold \u003c 1 {\n\t\tpanic(\"invalid flagging threshold\")\n\t}\n\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{boardID, threshold}\n\tboard.perms.WithPermission(caller, PermissionBoardFlaggingUpdate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\n\t\tgFlaggingThresholds.Set(boardID.String(), threshold)\n\t\tstd.Emit(\n\t\t\t\"FlaggingThresholdUpdated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"threshold\", strconv.Itoa(threshold),\n\t\t)\n\t})\n}\n\n// GetFlaggingThreshold returns the number of flags required to hide a thread or comment within a board.\nfunc GetFlaggingThreshold(boardID BoardID) int {\n\tassertBoardExists(boardID)\n\treturn getFlaggingThreshold(boardID)\n}\n\n// FlagThread adds a new flag to a thread.\n//\n// Flagging requires special permissions and hides the thread when\n// the number of flags reaches a pre-defined flagging threshold.\nfunc FlagThread(boardID BoardID, threadID PostID, reason string) {\n\tboard := mustGetBoard(boardID)\n\n\t// Realm owners should be able to flag without permissions even when board is frozen\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner)\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertHasBoardPermission(board, caller, PermissionThreadFlag)\n\t}\n\n\tt, ok := board.GetThread(threadID)\n\tif !ok {\n\t\tpanic(\"post doesn't exist\")\n\t}\n\tassertThreadIsNotFrozen(t)\n\n\tf := Flag{\n\t\tUser:   caller,\n\t\tReason: reason,\n\t}\n\n\t// Realm owners can hide with a single flag\n\thide := flagItem(t, f, getFlaggingThreshold(boardID))\n\tif hide || isRealmOwner {\n\t\tt.SetVisible(false)\n\t}\n\n\tstd.Emit(\n\t\t\"ThreadFlagged\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"reason\", reason,\n\t)\n}\n\n// FlagReply adds a new flag to a comment or reply.\n//\n// Flagging requires special permissions and hides the comment or reply\n// when the number of flags reaches a pre-defined flagging threshold.\nfunc FlagReply(boardID BoardID, threadID, replyID PostID, reason string) {\n\tboard := mustGetBoard(boardID)\n\n\t// Realm owners should be able to flag without permissions even when board is frozen\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner)\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertHasBoardPermission(board, caller, PermissionReplyFlag)\n\t}\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsNotFrozen(thread)\n\n\tf := Flag{\n\t\tUser:   caller,\n\t\tReason: reason,\n\t}\n\n\t// Realm owners can hide with a single flag\n\thide := flagItem(reply, f, getFlaggingThreshold(boardID))\n\tif hide || isRealmOwner {\n\t\treply.SetVisible(false)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyFlagged\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"reason\", reason,\n\t)\n}\n"},{"name":"public_freeze.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// FreezeBoard freezes a board so no more threads and comments can be created or modified.\nfunc FreezeBoard(boardID BoardID) {\n\tsetBoardReadonly(boardID, true)\n}\n\n// UnfreezeBoard removes frozen status from a board.\nfunc UnfreezeBoard(boardID BoardID) {\n\tsetBoardReadonly(boardID, false)\n}\n\n// IsBoardFrozen checks if a board has been frozen.\nfunc IsBoardFrozen(boardID BoardID) bool {\n\tboard := mustGetBoard(boardID)\n\treturn board.IsReadonly()\n}\n\n// FreezeThread freezes a thread so thread cannot be replied, modified or deleted.\n//\n// Fails if board is frozen.\nfunc FreezeThread(boardID BoardID, threadID PostID) {\n\tsetThreadReadonly(boardID, threadID, true)\n}\n\n// UnfreezeThread removes frozen status from a thread.\n//\n// Fails if board is frozen.\nfunc UnfreezeThread(boardID BoardID, threadID PostID) {\n\tsetThreadReadonly(boardID, threadID, false)\n}\n\n// IsThreadFrozen checks if a thread has been frozen.\n//\n// Returns true if board is frozen.\nfunc IsThreadFrozen(boardID BoardID, threadID PostID) bool {\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\treturn board.IsReadonly() || thread.IsReadonly()\n}\n\n// UnfreezeReply removes frozen status from a reply.\n//\n// Fails when parent thread or board are frozen.\nfunc UnfreezeReply(boardID BoardID, threadID, replyID PostID) {\n\t// XXX: Is there a use case for also freezing replies?\n\tsetReplyReadonly(boardID, threadID, replyID, false)\n}\n\n// FreezeReply freezes a thread reply so it cannot be modified or deleted.\n//\n// Fails when parent thread or board are frozen.\nfunc FreezeReply(boardID BoardID, threadID, replyID PostID) {\n\tsetReplyReadonly(boardID, threadID, replyID, true)\n}\n\n// IsReplyFrozen checks if a thread reply has been frozen.\n//\n// Returns true when board or a parent thread is frozen.\nfunc IsReplyFrozen(boardID BoardID, threadID, replyID PostID) bool {\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\n\treturn board.IsReadonly() || thread.IsReadonly() || reply.IsReadonly()\n}\n\nfunc setReplyReadonly(boardID BoardID, threadID, replyID PostID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionReplyFreeze)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\n\tif isReadonly {\n\t\tassertReplyIsNotFrozen(reply)\n\t}\n\n\treply.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"ReplyFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n\nfunc setThreadReadonly(boardID BoardID, threadID PostID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionThreadFreeze)\n\n\tthread := mustGetThread(board, threadID)\n\tif isReadonly {\n\t\tassertThreadIsNotFrozen(thread)\n\t}\n\n\tthread.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"ThreadFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n\nfunc setBoardReadonly(boardID BoardID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tif isReadonly {\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionBoardFreeze)\n\n\tboard.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"BoardFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n"},{"name":"public_lock.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// LockRealm locks the realm making it readonly.\n//\n// WARNING: Realm can't be unlocked once locked.\n//\n// Realm can also be locked without locking realm members.\n// Realm members can be locked when locking the realm or afterwards.\n// This is relevant for two reasons, one so members can be modified after lock.\n// The other is for realm owners, which can delete threads and comments after lock.\nfunc LockRealm(lockRealmMembers bool) {\n\tassertRealmMembersAreNotLocked()\n\n\t// If realm members are not being locked assert that realm is no locked.\n\t// Members can be locked after locking the realm, in a second `LockRealm` call.\n\tif !lockRealmMembers {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tgPerms.WithPermission(caller, PermissionRealmLock, nil, func(Args) {\n\t\tgLocked.realm = true\n\t\tgLocked.realmMembers = lockRealmMembers\n\n\t\tstd.Emit(\n\t\t\t\"RealmLocked\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"lockRealmMembers\", strconv.FormatBool(lockRealmMembers),\n\t\t)\n\t})\n}\n\n// IsRealmLocked checks if boards realm has been locked.\nfunc IsRealmLocked() bool {\n\treturn gLocked.realm\n}\n\n// AreRealmMembersLocked checks if realm members has been locked.\nfunc AreRealmMembersLocked() bool {\n\treturn gLocked.realmMembers\n}\n\nfunc assertRealmIsNotLocked() { // TODO: Add filtests for locked realm case to all public functions\n\tif gLocked.realm {\n\t\tpanic(\"realm is locked\")\n\t}\n}\n\nfunc assertRealmMembersAreNotLocked() { // TODO: Add filtests for locked members case to all public member functions\n\tif gLocked.realmMembers {\n\t\tpanic(\"realm and members are locked\")\n\t}\n}\n"},{"name":"render.gno","body":"package boards2\n\nimport (\n\t\"net/url\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/mux\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nconst (\n\tpageSizeBoards  = 6\n\tpageSizeThreads = 6\n\tpageSizeReplies = 10\n)\n\nconst menuManageBoard = \"manageBoard\"\n\nfunc Render(path string) string {\n\trouter := mux.NewRouter()\n\trouter.HandleFunc(\"\", renderBoardsList)\n\trouter.HandleFunc(\"help\", renderHelp)\n\trouter.HandleFunc(\"admin-users\", renderMembers)\n\trouter.HandleFunc(\"{board}\", renderBoard)\n\trouter.HandleFunc(\"{board}/members\", renderMembers)\n\trouter.HandleFunc(\"{board}/{thread}\", renderThread)\n\trouter.HandleFunc(\"{board}/{thread}/{reply}\", renderReply)\n\n\trouter.NotFoundHandler = func(res *mux.ResponseWriter, _ *mux.Request) {\n\t\tres.Write(\"Path not found\")\n\t}\n\n\treturn router.Render(path)\n}\n\nfunc renderHelp(res *mux.ResponseWriter, _ *mux.Request) {\n\tres.Write(\"# Boards Help\\n\")\n\tif gHelp != \"\" {\n\t\tres.Write(gHelp)\n\t} else {\n\t\tres.Write(\"### Help content has not been uploaded\\n\")\n\t\tres.Write(\"Do you want to \")\n\t\tres.Write(newLink(\"upload boards help\", txlink.Call(\"SetHelp\", \"content\", \"\")))\n\t\tres.Write(\" ?\")\n\t}\n}\n\nfunc renderBoardsList(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tres.Write(\"# Boards\\n\\n\")\n\trenderBoardListMenu(res, req)\n\tres.Write(\"\\n\\n---\\n\")\n\n\tif gBoardsByID.Size() == 0 {\n\t\tlink := txlink.Call(\"CreateBoard\", \"name\", \"\")\n\t\tres.Write(\"### Currently there are no boards\\n\")\n\t\tres.Write(\"Be the first to \")\n\t\tres.Write(newLink(\"create a new board\", link))\n\t\tres.Write(\" !\")\n\n\t\treturn\n\t}\n\n\tp, err := pager.New(req.RawPath, gBoardsByID.Size(), pager.WithPageSize(pageSizeBoards))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\trender := func(_ string, v any) bool {\n\t\tboard := v.(*Board)\n\n\t\tres.Write(\"**\" + newLink(board.GetName(), board.GetURL()) + \"**  \\n\")\n\t\tres.Write(\"Created by \" + newUserLink(board.creator) + \" \")\n\t\tres.Write(\"on \" + board.createdAt.Format(dateFormat))\n\t\tres.Write(\", #\" + board.id.String() + \"  \\n\")\n\t\tres.Write(\"**\" + strconv.Itoa(board.threads.Size()) + \" threads\")\n\t\tif board.IsReadonly() {\n\t\t\tres.Write(\", read-only\")\n\t\t}\n\n\t\tres.Write(\"**\\n\\n\")\n\t\treturn false\n\t}\n\n\tres.Write(\"Sort by: \")\n\tr := realmpath.Parse(req.RawPath)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tres.Write(newLink(\"newest first\", r.String()))\n\t\tres.Write(\"\\n\\n\")\n\t\tgBoardsByID.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tres.Write(newLink(\"oldest first\", r.String()))\n\t\tres.Write(\"\\n\\n\")\n\t\tgBoardsByID.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tres.Write(\"\\n---\\n\")\n\t\tres.Write(pager.Picker(p))\n\t}\n}\n\nfunc renderBoardListMenu(res *mux.ResponseWriter, req *mux.Request) {\n\tpath := strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\n\tres.Write(newLink(\"Create Board\", txlink.Call(\"CreateBoard\", \"name\", \"\")))\n\tres.Write(\" • \")\n\tres.Write(newLink(\"List Admin Users\", path+\":admin-users\"))\n\tres.Write(\" • \")\n\tres.Write(newLink(\"Help\", path+\":help\"))\n\tres.Write(\"\\n\\n\")\n}\n\nfunc renderBoard(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tlink := newLink(\"create a new board\", txlink.Call(\"CreateBoard\", \"name\", name))\n\t\tres.Write(\"### The board you are looking for does not exist\\n\")\n\t\tres.Write(\"Do you want to \")\n\t\tres.Write(link)\n\t\tres.Write(\" ?\")\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tmenu := renderBoardMenu(board, req)\n\n\tres.Write(board.Render(req.RawPath, menu))\n}\n\nfunc renderBoardMenu(board *Board, req *mux.Request) string {\n\tvar (\n\t\tb               strings.Builder\n\t\tboardMembersURL = board.GetPath() + \"/members\"\n\t)\n\n\tif board.IsReadonly() {\n\t\tb.WriteString(newLink(\"List Members\", boardMembersURL))\n\t\tb.WriteString(\" • \")\n\t\tb.WriteString(newLink(\"Unfreeze Board\", board.GetUnfreezeFormURL()))\n\t\tb.WriteString(\"\\n\")\n\t} else {\n\t\tb.WriteString(newLink(\"Create Thread\", board.GetPostFormURL()))\n\t\tb.WriteString(\" • \")\n\n\t\tmenu := getCurrentMenu(req.RawPath)\n\t\tif menu == menuManageBoard {\n\t\t\tb.WriteString(\"**Manage Board**\")\n\t\t} else {\n\t\t\tb.WriteString(newLink(\"Manage Board\", menuURL(menuManageBoard)))\n\t\t}\n\n\t\tb.WriteString(\"  \\n\")\n\n\t\tif menu == menuManageBoard {\n\t\t\tb.WriteString(\"↳\")\n\t\t\tb.WriteString(newLink(\"Invite Member\", board.GetInviteMemberFormURL()))\n\t\t\tb.WriteString(\" • \")\n\t\t\tb.WriteString(newLink(\"List Members\", boardMembersURL))\n\t\t\tb.WriteString(\" • \")\n\t\t\tb.WriteString(newLink(\"Freeze Board\", board.GetFreezeFormURL()))\n\t\t\tb.WriteString(\"\\n\\n\")\n\t\t}\n\t}\n\n\treturn b.String()\n}\n\nfunc renderThread(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tres.Write(\"Board does not exist: \" + name)\n\t\treturn\n\t}\n\n\trawID := req.GetVar(\"thread\")\n\ttID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid thread ID: \" + rawID)\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tthread, found := board.GetThread(PostID(tID))\n\tif !found {\n\t\tres.Write(\"Thread does not exist with ID: \" + rawID)\n\t} else if thread.IsHidden() {\n\t\tres.Write(\"Thread with ID: \" + rawID + \" has been flagged as inappropriate\")\n\t} else {\n\t\tres.Write(thread.Render(req.RawPath, \"\", 5))\n\t}\n}\n\nfunc renderReply(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tres.Write(\"Board does not exist: \" + name)\n\t\treturn\n\t}\n\n\trawID := req.GetVar(\"thread\")\n\ttID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid thread ID: \" + rawID)\n\t\treturn\n\t}\n\n\trawID = req.GetVar(\"reply\")\n\trID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid reply ID: \" + rawID)\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tthread, found := board.GetThread(PostID(tID))\n\tif !found {\n\t\tres.Write(\"Thread does not exist with ID: \" + req.GetVar(\"thread\"))\n\t\treturn\n\t}\n\n\treply, found := thread.GetReply(PostID(rID))\n\tif !found {\n\t\tres.Write(\"Reply does not exist with ID: \" + rawID)\n\t\treturn\n\t}\n\n\t// Call render even for hidden replies to display children.\n\t// Original comment content will be hidden under the hood.\n\t// See: #3480\n\tres.Write(reply.RenderInner())\n}\n\nfunc renderMembers(res *mux.ResponseWriter, req *mux.Request) {\n\tboardID := BoardID(0)\n\tperms := gPerms\n\tname := req.GetVar(\"board\")\n\tif name != \"\" {\n\t\tv, found := gBoardsByName.Get(name)\n\t\tif !found {\n\t\t\tres.Write(\"### Board not found\")\n\t\t\treturn\n\t\t}\n\n\t\tboard := v.(*Board)\n\t\tboardID = board.GetID()\n\t\tperms = board.perms\n\n\t\tres.Write(\"# \" + board.GetName() + \" Members\\n\")\n\t\tres.Write(\"### These are the board members\\n\\n\")\n\t} else {\n\t\tres.Write(\"# Admin Users\\n\")\n\t\tres.Write(\"### These are the admin users of the realm\\n\\n\")\n\t}\n\n\t// Create a pager with a small page size to reduce\n\t// the number of username lookups per page.\n\tp, err := pager.New(req.RawPath, perms.UsersCount(), pager.WithPageSize(5))\n\tif err != nil {\n\t\tres.Write(err.Error())\n\t\treturn\n\t}\n\n\tres.Write(\"| Member | Role | Actions |\\n| --- | --- | --- |\\n\")\n\tperms.IterateUsers(p.Offset(), p.PageSize(), func(u User) bool {\n\t\tres.Write(\"| \")\n\t\tres.Write(newUserLink(u.Address))\n\t\tres.Write(\" | \")\n\t\tres.Write(rolesToString(u.Roles))\n\t\tres.Write(\" | \")\n\t\tres.Write(newLink(\"remove\", txlink.Call(\n\t\t\t\"RemoveMember\",\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", u.Address.String(),\n\t\t)))\n\t\tres.Write(\" • \")\n\t\tres.Write(newLink(\"change role\", txlink.Call(\n\t\t\t\"ChangeMemberRole\",\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", u.Address.String(),\n\t\t\t\"role\", \"\",\n\t\t)))\n\t\tres.Write(\" |\\n\")\n\t\treturn false\n\t})\n\n\tif p.HasPages() {\n\t\tres.Write(\"\\n\\n\" + pager.Picker(p))\n\t}\n}\n\nfunc renderNotice(res *mux.ResponseWriter) {\n\tif gNotice == \"\" {\n\t\treturn\n\t}\n\n\tres.Write(\"\u003e \")\n\tres.Write(gNotice)\n\tres.Write(\"\\n\\n\")\n}\n\nfunc rolesToString(roles []Role) string {\n\tif len(roles) == 0 {\n\t\treturn \"\"\n\t}\n\n\tnames := make([]string, len(roles))\n\tfor i, r := range roles {\n\t\tnames[i] = string(r)\n\t}\n\treturn strings.Join(names, \", \")\n}\n\nfunc menuURL(name string) string {\n\t// TODO: Menu URL works because no other GET arguments are being used\n\treturn \"?menu=\" + name\n}\n\nfunc getCurrentMenu(rawURL string) string {\n\t_, rawQuery, found := strings.Cut(rawURL, \"?\")\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\tquery, _ := url.ParseQuery(rawQuery)\n\treturn query.Get(\"menu\")\n}\n"},{"name":"z_0_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tbid := boards2.CreateBoard(\"test123\")\n\tprintln(\"ID =\", bid)\n}\n\n// Output:\n// ID = 1\n"},{"name":"z_0_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"\")\n}\n\n// Error:\n// board name is empty\n"},{"name":"z_0_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tboardName = \"test123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(boardName)\n}\n\nfunc main() {\n\tboards2.CreateBoard(boardName)\n}\n\n// Error:\n// board already exists\n"},{"name":"z_0_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n}\n\n// Error:\n// addresses are not allowed as board name\n"},{"name":"z_0_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"gnoland\")\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_0_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar name = strings.Repeat(\"X\", boards2.MaxBoardNameLength+1)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(name)\n}\n\n// Error:\n// board name is too long, maximum allowed is 50 characters\n"},{"name":"z_0_h_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname   = \"test123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\tboards2.InviteMember(0, member, boards2.RoleOwner) // Operate on realm DAO members instead of individual boards\n\ttesting.SetOriginCaller(member)\n\tusers.Register(name)\n}\n\nfunc main() {\n\tbid := boards2.CreateBoard(name)\n\tprintln(\"ID =\", bid)\n}\n\n// Output:\n// ID = 1\n"},{"name":"z_0_i_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"test123\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_10_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\n\t// Invite a moderator to the new board\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\n\t// Create a new thread as a moderator\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_10_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.FlagThread(404, 1, \"\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_10_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Make the next call as an uninvited user\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_10_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, 404, \"\")\n}\n\n// Error:\n// post doesn't exist\n"},{"name":"z_10_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// item flag count threshold exceeded: 1\n"},{"name":"z_10_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to flag threads\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\ttesting.SetOriginCaller(moderator)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_10_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with a specific flagging threshold\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Invite a moderator to the new board\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\n\t// Create a new thread and flag it as a moderator\n\ttesting.SetOriginCaller(moderator)\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// item has been already flagged by a current user\n"},{"name":"z_10_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with flagging threshold greater than 1\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Create a thread so the realm owner can flag and hide it with a single flag\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\t// Also freeze board to make sure that realm owner can still flag the thread\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_11_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, body)\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_11_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"\", \"bar\")\n}\n\n// Error:\n// title is empty\n"},{"name":"z_11_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_11_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.EditThread(404, 1, \"Foo\", \"bar\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_11_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_11_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"bar\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_11_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to edit threads\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, body)\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_11_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid   boards2.BoardID\n\tpid   boards2.PostID\n\ttitle = strings.Repeat(\"X\", boards2.MaxThreadTitleLength+1)\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, \"bar\")\n}\n\n// Error:\n// thread title is too long, maximum allowed is 100 characters\n"},{"name":"z_12_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbody  = \"Test reply\"\n\tpath  = \"test-board/1/2\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, body)\n\n\t// Render content must contain the modified reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \"+body+\"\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_12_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbody  = \"Test reply\"\n\tpath  = \"test-board/1/2\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Create a reply and a sub reply\n\tparentRID := boards2.CreateReply(bid, tid, 0, \"Parent\")\n\trid = boards2.CreateReply(bid, tid, parentRID, \"Child\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, body)\n\n\t// Render content must contain the modified reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e \"+body+\"\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_12_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.EditReply(404, 1, 0, \"body\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_12_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, 404, 0, \"body\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_12_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, 404, \"body\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_12_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"new body\")\n}\n\n// Error:\n// only the reply creator is allowed to edit it\n"},{"name":"z_12_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Flag the reply so it's hidden\n\tboards2.FlagReply(bid, tid, rid, \"reason\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"body\")\n}\n\n// Error:\n// reply is hidden\n"},{"name":"z_12_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_13_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_13_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.FlagReply(404, 1, 1, \"\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_13_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, 404, 1, \"\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_13_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, 404, \"\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_13_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// item flag count threshold exceeded: 1\n"},{"name":"z_13_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_13_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Invite a member using a role with permission to flag replies\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\ttesting.SetOriginCaller(moderator)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_13_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with flagging threshold greater than 1\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Create a reply so the realm owner can flag and hide it with a single flag\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\t// Also freeze board to make sure that realm owner can still flag the reply\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\"))\n}\n\n// Output:\n// true\n"},{"name":"z_14_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Ensure reply doesn't exist\n\tprintln(boards2.Render(\"test-board/1/2\"))\n}\n\n// Output:\n// Reply does not exist with ID: 2\n"},{"name":"z_14_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.DeleteReply(404, 1, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_14_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, 404, 1)\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_14_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, 404)\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_14_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\trid = boards2.CreateReply(bid, tid, 0, \"Parent\")\n\tboards2.CreateReply(bid, tid, rid, \"Child reply\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Render content must contain the releted message instead of reply's body\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e This reply has been deleted\\n\"))\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e Child reply\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_14_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Call using a user that has not permission to delete replies\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_14_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Invite a member using a role with permission to delete replies\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(member)\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Ensure reply doesn't exist\n\tprintln(boards2.Render(\"test-board/1/2\"))\n}\n\n// Output:\n// Reply does not exist with ID: 2\n"},{"name":"z_15_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"Foo\", \"bar\")\n\tboards2.FlagThread(srcBID, srcTID, \"idk\")\n}\n\nfunc main() {\n\t// Repost should fail if source thread is flagged\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_15_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID = 1024\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n}\n\nfunc main() {\n\t// Repost should fail if source thread doesn't exist\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// thread does not exist with ID: 1024\n"},{"name":"z_15_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"Foo\", \"bar\")\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_15_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/ufmt\"\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"original title\", \"original text\")\n}\n\nfunc main() {\n\t// Success case\n\ttID := boards2.CreateRepost(srcBID, srcTID, \"repost title\", \"repost text\", dstBID)\n\tp := ufmt.Sprintf(\"dst-board/%s\", tID)\n\tout := boards2.Render(p)\n\n\tprintln(strings.Contains(out, \"original text\"))\n\tprintln(strings.Contains(out, \"repost title\"))\n\tprintln(strings.Contains(out, \"repost text\"))\n}\n\n// Output:\n// true\n// true\n// true\n"},{"name":"z_15_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Create a board with a thread\n\torigBID := boards2.CreateBoard(\"origin-board\")\n\torigTID := boards2.CreateThread(origBID, \"title\", \"text\")\n\n\t// Create a second board and repost a thread using an empty title\n\tsrcBID = boards2.CreateBoard(\"source-board\")\n\tsrcTID = boards2.CreateRepost(origBID, origTID, \"original title\", \"original text\", srcBID)\n\n\t// Create a third board to try reposting the repost\n\tdstBID = boards2.CreateBoard(\"destination-board\")\n}\n\nfunc main() {\n\tboards2.CreateRepost(srcBID, srcTID, \"repost title\", \"repost text\", dstBID)\n}\n\n// Error:\n// reposting a thread that is a repost is not allowed\n"},{"name":"z_16_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(bid, 4)\n\n\t// Ensure that flagging threshold changed\n\tprintln(boards2.GetFlaggingThreshold(bid))\n}\n\n// Output:\n// 4\n"},{"name":"z_16_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nconst bid boards2.BoardID = 404\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(bid, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_16_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(1, 0)\n}\n\n// Error:\n// invalid flagging threshold\n"},{"name":"z_17_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.FreezeBoard(bid)\n\tprintln(boards2.IsBoardFrozen(bid))\n}\n\n// Output:\n// true\n"},{"name":"z_17_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FreezeBoard(bid)\n}\n\n// Error:\n// board is frozen\n"},{"name":"z_18_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbid   = boards2.BoardID(0)                                      // Operate on realm instead of individual boards\n)\n\nvar perms boards2.Permissions\n\nfunc init() {\n\t// Create a new permissions instance without users\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n\n\t// Owner that setted new permissions is not a member of the new permissions\n\tprintln(boards2.IsMember(bid, owner))\n}\n\n// Output:\n// false\n"},{"name":"z_18_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\tuser = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid  = boards2.BoardID(0)                                      // Operate on realm instead of individual boards\n)\n\nvar perms boards2.Permissions\n\nfunc init() {\n\t// Create a new permissions instance\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_18_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tperms boards2.Permissions\n\tbid   boards2.BoardID\n)\n\nfunc init() {\n\t// Create a new permissions instance without users\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foobar\")\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n\n\t// Owner that setted new board permissions is not a member of the new permissions\n\tprintln(boards2.IsMember(bid, owner))\n}\n\n// Output:\n// false\n"},{"name":"z_19_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\t// Attempt to freeze a thread on frozen board\n\tboards2.FreezeThread(bid, tid)\n}\n\n// Error:\n// board is frozen\n"},{"name":"z_19_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// Attempt to freeze a frozen thread\n\tboards2.FreezeThread(bid, tid)\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_19_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FreezeThread(bid, tid)\n\tprintln(boards2.IsThreadFrozen(bid, tid))\n}\n\n// Output:\n// true\n"},{"name":"z_1_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// true\n"},{"name":"z_1_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tuser  = std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\t// Add an admin member\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\t// Next call will be done by the admin member\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, boards2.RoleOwner)\n}\n\n// Error:\n// only owners are allowed to invite other owners\n"},{"name":"z_1_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tuser  = std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n\trole  = boards2.RoleAdmin\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\t// Add an admin member\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\t// Next call will be done by the admin member\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// true\n"},{"name":"z_1_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(0, user, boards2.Role(\"foobar\")) // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// invalid role: foobar\n"},{"name":"z_1_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\trole  = boards2.RoleOwner\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foo123\") // Operate on board DAO members\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(0, user, role)) // Operate on realm DAO\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_1_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, user, role)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n}\n\n// Error:\n// user already exists\n"},{"name":"z_1_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(0, \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", boards2.RoleGuest)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_20_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// Attempt to freeze a reply on frozen thread\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_20_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\nfunc main() {\n\t// Attempt to freeze already frozen reply\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\n// Error:\n// reply is frozen\n"},{"name":"z_20_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n}\n\nfunc main() {\n\t// reply frozen\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.FreezeReply(bid, tid, rid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeReply(bid, tid, rid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\n\t// thread frozen\n\tboards2.FreezeThread(bid, tid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeThread(bid, tid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\n\t// board frozen\n\tboards2.FreezeBoard(bid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeBoard(bid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n}\n\n// Output:\n// false\n// true\n// false\n// true\n// false\n// true\n// false\n"},{"name":"z_20_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n}\n\nfunc main() {\n\t// unfrozen thread - should work\n\tr2 := boards2.CreateReply(bid, tid, rid, \"child 1\")\n\n\t// frozen thread - can't reply\n\tboards2.FreezeReply(bid, tid, rid)\n\tboards2.CreateReply(bid, tid, r2, \"child 2\")\n}\n\n// Error:\n// reply is frozen\n"},{"name":"z_21_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"This is a test realm message\")\n\n\t// Render content must contain the message\n\tcontent := boards2.Render(\"\")\n\tprintln(strings.HasPrefix(content, \"\u003e This is a test realm message\\n\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_21_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Set an initial message so it can be cleared\n\tboards2.SetRealmNotice(\"This is a test realm message\")\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"\")\n\n\t// Render content must contain the message\n\tcontent := boards2.Render(\"\")\n\tprintln(strings.HasPrefix(content, \"\u003e This is a test realm message\\n\\n\"))\n\tprintln(strings.HasPrefix(content, \"# Boards\"))\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_21_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\t// Call realm with a user that has not permission to set realm notice\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"Foo\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_22_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(false)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// false\n"},{"name":"z_22_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.LockRealm(false)\n}\n\nfunc main() {\n\t// Should fail because realm is already locked\n\tboards2.LockRealm(false)\n}\n\n// Error:\n// realm is locked\n"},{"name":"z_22_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\t// Call realm with a user that has not permission to lock the realm\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(false)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_22_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(true)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_22_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.LockRealm(true)\n}\n\nfunc main() {\n\t// Should fail because realm is already locked\n\tboards2.LockRealm(true)\n}\n\n// Error:\n// realm and members are locked\n"},{"name":"z_22_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Lock the realm without locking realm members\n\tboards2.LockRealm(false)\n}\n\nfunc main() {\n\tboards2.LockRealm(true)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_23_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleOwner)\n\tboards2.InviteMember(bid, \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\", boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.IterateRealmMembers(0, func(u boards2.User) bool {\n\t\tprintln(u.Address, string(u.Roles[0]))\n\t\treturn false\n\t})\n}\n\n// Output:\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj owner\n// g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5 admin\n"},{"name":"z_24_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid := boards2.CreateBoard(\"test123\")\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleAdmin)\n\n\tbid = boards2.CreateBoard(\"foo123\")\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleOwner)\n\tboards2.InviteMember(bid, \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\", boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.IterateBoards(0, func(b boards2.ReadonlyBoard) bool {\n\t\tprintln(b.ID().String())\n\t\tprintln(b.Name())\n\n\t\tb.IterateMembers(0, b.MembersCount(), func(u boards2.User) bool {\n\t\t\tprintln(u.Address, string(u.Roles[0]))\n\t\t\treturn false\n\t\t})\n\t})\n}\n\n// Output:\n// 1\n// test123\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj admin\n// 2\n// foo123\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj owner\n// g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5 admin\n"},{"name":"z_2_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tpath    = \"test-board/1/2\"\n\tcomment = \"Test comment\"\n)\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\trid := boards2.CreateReply(bid, tid, 0, comment)\n\n\t// Ensure that returned ID is right\n\tprintln(rid == 2)\n\n\t// Render content must contain the reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \"+comment+\"\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_2_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateReply(404, 1, 0, \"comment\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_2_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, 404, 0, \"comment\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_2_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 404, \"comment\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_2_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Hide thread by flagging it so reply can't be submitted\n\tboards2.FlagThread(bid, tid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"Test reply\")\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_2_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply1\")\n\n\t// Hide thread by flagging it so reply of a reply can't be submitted\n\tboards2.FlagThread(bid, tid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"reply1.1\")\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_2_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"thread\", \"thread\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply1\")\n\n\t// Hide reply by flagging it so sub reply can't be submitted\n\tboards2.FlagReply(bid, tid, rid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"reply1.1\")\n}\n\n// Error:\n// replying to a hidden or frozen reply is not allowed\n"},{"name":"z_2_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"Test reply\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_2_i_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_2_j_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tpath    = \"test-board/1/2\"\n\tcomment = \"Second comment\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"First comment\")\n}\n\nfunc main() {\n\trid2 := boards2.CreateReply(bid, tid, rid, comment)\n\n\t// Ensure that returned ID is right\n\tprintln(rid2 == 3)\n\n\t// Render content must contain the sub-reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e \"+comment+\"\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_2_k_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tcomment = \"Second comment\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"Parent comment\")\n\n\t// Flag parent post so it's hidden\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"Sub comment\")\n}\n\n// Error:\n// replying to a hidden or frozen reply is not allowed\n"},{"name":"z_2_l_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// cannot reply to a frozen thread\n\tboards2.CreateReply(bid, tid, 0, \"foobar\")\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_2_m_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, strings.Repeat(\"x\", boards2.MaxReplyLength+1))\n}\n\n// Error:\n// reply is too long, maximum allowed is 300 characters\n"},{"name":"z_2_n_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"\u003e Markdown blockquote\")\n}\n\n// Error:\n// using Markdown headings, blockquotes or horizontal lines is not allowed in replies\n"},{"name":"z_3_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname    = \"foo123\"\n\tnewName = \"bar123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n\n\t// Ensure board is renamed by the default board owner\n\tbid2, _ := boards2.GetBoardIDFromName(newName)\n\tprintln(\"IDs match =\", bid == bid2)\n}\n\n// Output:\n// IDs match = true\n"},{"name":"z_3_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"\")\n}\n\n// Error:\n// board name is empty\n"},{"name":"z_3_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, name)\n}\n\n// Error:\n// board already exists\n"},{"name":"z_3_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RenameBoard(\"unexisting\", \"foo\")\n}\n\n// Error:\n// board does not exist with name: unexisting\n"},{"name":"z_3_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n}\n\n// Error:\n// addresses are not allowed as board name\n"},{"name":"z_3_f_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n\n\t// Ensure board is renamed by another board owner\n\tbid2, _ := boards2.GetBoardIDFromName(newName)\n\tprintln(\"IDs match =\", bid == bid2)\n}\n\n// Output:\n// IDs match = true\n"},{"name":"z_3_g_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tmember2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n\n\t// Invite a new member that doesn't own the user that matches the new board name\n\tboards2.InviteMember(bid, member2, boards2.RoleOwner)\n\ttesting.SetOriginCaller(member2)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_3_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"short\")\n}\n\n// Error:\n// the minimum allowed board name length is 6 characters\n"},{"name":"z_3_i_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tmember2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n\n\t// Invite a new member that doesn't own the user that matches the new board name\n\tboards2.InviteMember(bid, member2, boards2.RoleOwner)\n\ttesting.SetOriginCaller(member2)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_3_j_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"barbaz\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_4_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tnewRole = boards2.RoleOwner\n\tbid     = boards2.BoardID(0) // Operate on realm DAO instead of individual boards\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole)\n\n\t// Ensure that new role has been changed\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tnewRole = boards2.RoleAdmin\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foo123\")\n\tboards2.InviteMember(bid, member, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole)\n\n\t// Ensure that new role has been changed\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\towner2 = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tadmin  = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, owner2, boards2.RoleOwner)\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, owner2, boards2.RoleAdmin)\n}\n\n// Error:\n// admins are not allowed to remove the Owner role\n"},{"name":"z_4_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tadmin2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\tboards2.InviteMember(bid, admin2, boards2.RoleAdmin)\n\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, admin2, boards2.RoleOwner)\n}\n\n// Error:\n// admins are not allowed to promote members to Owner\n"},{"name":"z_4_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid     = boards2.BoardID(0)                                      // Operate on realm DAO members instead of individual boards\n\tnewRole = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole) // Owner can promote other members to Owner\n\n\t// Ensure that new role has been changed to owner\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, admin, boards2.Role(\"foo\"))\n}\n\n// Error:\n// invalid role: foo\n"},{"name":"z_4_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, \"invalid address\", boards2.RoleModerator)\n}\n\n// Error:\n// invalid member address\n"},{"name":"z_4_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(0, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleGuest)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_5_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, user, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.RemoveMember(bid, user)\n\n\t// Check that user is not a member\n\tprintln(boards2.IsMember(bid, user))\n}\n\n// Output:\n// false\n"},{"name":"z_5_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RemoveMember(0, \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\") // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_5_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RemoveMember(0, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// member not found\n"},{"name":"z_6_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\trole   = boards2.RoleGuest\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, member, role)\n}\n\nfunc main() {\n\tprintln(boards2.HasMemberRole(bid, member, role))\n\tprintln(boards2.HasMemberRole(bid, member, \"invalid\"))\n\tprintln(boards2.IsMember(bid, member))\n}\n\n// Output:\n// true\n// false\n// true\n"},{"name":"z_6_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleGuest\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tprintln(boards2.HasMemberRole(bid, user, role))\n\tprintln(boards2.IsMember(bid, user))\n}\n\n// Output:\n// false\n// false\n"},{"name":"z_7_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"test123\"\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(name)\n}\n\nfunc main() {\n\tbid2, found := boards2.GetBoardIDFromName(name)\n\tprintln(found)\n\tprintln(bid2 == bid)\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_7_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tbid, found := boards2.GetBoardIDFromName(\"foobar\")\n\tprintln(found)\n\tprintln(bid == 0)\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_8_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\ttid := boards2.CreateThread(bid, title, body)\n\n\t// Ensure that returned ID is right\n\tprintln(tid == 1)\n\n\t// Thread should not be frozen by default\n\tprintln(boards2.IsThreadFrozen(bid, tid))\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// false\n// true\n// true\n"},{"name":"z_8_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateThread(404, \"Foo\", \"bar\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_8_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_8_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"\", \"bar\")\n}\n\n// Error:\n// title is empty\n"},{"name":"z_8_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_9_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, title, body)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n\n\t// Ensure thread doesn't exist\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread does not exist with ID: 1\n"},{"name":"z_9_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.DeleteThread(404, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_9_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, 404)\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_9_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Call using a user that has not permission to delete threads\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_9_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to delete threads\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(member)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n\n\t// Ensure thread doesn't exist\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread does not exist with ID: 1\n"}]},"deposit":""}],"fee":{"gas_wanted":"90000000","gas_fee":"900000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"U2iKoHGW6K7bep8UtLBr97zzq/LMSZH7rS2n3lwDYEYf+3lmLs82V256UquOYW8bqvniG3wQopQl2FhYarGSCA=="}],"memo":""},"metadata":{"timestamp":"1743761702"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"RemoveMember","args":["0","g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"3yQ9Uzcug0E/gUI15Ebz6SpmQpMnj+6lf5K3fKPcDvCVrg6yeVepgeK7maTHsm57883RG/9+j5AU0C3RRd8ICg=="}],"memo":""},"metadata":{"timestamp":"1743761807"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["EmptyWithManyMembers"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"PxJx3iE6e2NocMnVTOy4bq7MiK0YVDlIefLAFm9ytsrBRFtruHjDDRQeIoBVJNCmf72D0kRRVii3naZz94OrBQ=="}],"memo":""},"metadata":{"timestamp":"1743761888"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","owner"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"aWHYIIEcmAv3uSgt9ECrBv6Q/z9dZ8u8fWFbYVjqhfO8ELEnn73KcwZlmA43SSclJVlRiVN/TghMf7hCaHb/BA=="}],"memo":""},"metadata":{"timestamp":"1743761893"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1e5hud66rs7ye4zgeqmqvwfhurs2mnf408hdqcl","owner"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"aj9gw0cR3xQIe1cBU2JEMPQyK0ft7NWyAgq4kanFCI2b79JmmEGo45VMfscffxmfJUuzNgeJTnsxOwRupQ4ZAA=="}],"memo":""},"metadata":{"timestamp":"1743761898"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5","admin"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"JF8sEBvqo4OCT8APgZXc/GxPzX+Ij2UJMj+YxTgesHsa1W6sTG8Q4RkshZK15LT99mse4pb9GtGjgG0i33E/Bw=="}],"memo":""},"metadata":{"timestamp":"1743761903"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk","moderator"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"0rEX/wEVQfzwTCwrwK9aV4B7qRiIeB88uq4PFCiemlGg4qf2NMspIUhcynlqzqSU6Y/0+OMxzq3bZJSyoqmHDQ=="}],"memo":""},"metadata":{"timestamp":"1743761908"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1ym6zxff3xq7wfldcs3uyu7x7z40gstggcx8zdj","moderator"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"GO3MGKbeMgas+NtO+OTUGo2VNt9tv9pfQ48SzKyOMmRUOFk96b0E7yc0L1hLfHhlmIry1TN67/W2hw9wpJ81AA=="}],"memo":""},"metadata":{"timestamp":"1743761913"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["TheNumber42"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"muDrsNLE7kZGItSiBNy3vYoe7tyGAyWIfoDYcx4uIIPx+UgjgcJizyiPS6aqEsXrxpyak0+WJ3jUj1HuKARgDQ=="}],"memo":""},"metadata":{"timestamp":"1743761918"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kuCtWj1TUpFzucoJ8iAhcnx9Kmvr629VZ2v3JFLL9O/GX4U97k2O0jpn4usPHV3W6RvsRihX+bXQSZHyYYkNDw=="}],"memo":""},"metadata":{"timestamp":"1743761918"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["2","What's your take on it\\?","Seen in many places, unknown to many"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"3Q6yjDFalubJjr79zO/5N6efvvBVaAoDzu7QlcDORuipWi+9MNQ8cUPGnsT4faRiGwrvvQAMl17xIOoR11VTAg=="}],"memo":""},"metadata":{"timestamp":"1743761923"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["2","1","0","What do you mean\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"i+Zfx47nUWx4qGnftxJrLOpKME3B4VXvHWdLc/pO0HXd3ims6sTH/NHt8E/t1qUlPA8ndK1lgg7Qo8+v0fpyCQ=="}],"memo":""},"metadata":{"timestamp":"1743761928"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["2","1","0","よんじゅうに\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Rup+YIfuQpIu3I3VGXx97u6EZtXZ1yyiEtAcXegacsnu4WB3YnXEIzJauCcw2Edx5Ym3lo/BqVJrwVpoqDigAA=="}],"memo":""},"metadata":{"timestamp":"1743761933"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["2","1","2","Cuarenta y dos\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"5VJ9Q10yIK4j0vvm4fcCgbmem6rUzOaXZA8hkKKYNUQJ5tur+8ClyPSpUn70XEYhfe2RSREvwHSplt0SehAaBg=="}],"memo":""},"metadata":{"timestamp":"1743761938"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["ThreadsExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"I6ZlzBsGf1qOsfnBjwHKJyar1cuDCh+N/VDvsHBVQbqQvMdpJvotHS4oJSzI0267kSV0P3aj0eRhg24/HqSeBA=="}],"memo":""},"metadata":{"timestamp":"1743761943"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Seventh","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"lEnbWEYdUoTq+RPp8RRG0VACcZR6gvelM5uVdzRaiT4x1JcrKelclMGFyC7f1dByoxPx4wYVhDjiA5PERnAtAQ=="}],"memo":""},"metadata":{"timestamp":"1743761948"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Sixth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"N6G8Nonx6w/paVsrfnTLs/BsUN/GJ3iKTbf9YbmLq4/WiHTLsSnSq9XmM3geonSJvM+uvmR/ygD0Roj1Lq3PBw=="}],"memo":""},"metadata":{"timestamp":"1743761953"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kuCtWj1TUpFzucoJ8iAhcnx9Kmvr629VZ2v3JFLL9O/GX4U97k2O0jpn4usPHV3W6RvsRihX+bXQSZHyYYkNDw=="}],"memo":""},"metadata":{"timestamp":"1743761953"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Fifth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"zKIVafDZwKsorlEQcB5gH3Cfxa6RSRyNmrJ6lrLiVASJsm1PEOQX1rAmeq0xECiyzlywQi2QosQ6SOXRpGcKAQ=="}],"memo":""},"metadata":{"timestamp":"1743761958"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Fourth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"2NjemoRCvFjqMm1EqLenIWuaNEP3dGb4dF31urjXy2Z9inS0g/pQNWkU+rTMGVWtqgn9vpL8hW0yZT6VhZL8BQ=="}],"memo":""},"metadata":{"timestamp":"1743761963"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Third","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"lnuXkGx9zXZqVCGfzQQOiQTynjx+lYkydTRxqoHw7s9XA7jIOCfjVFk63sr66TxRNUrGRHKxpcEzUB2vSE3RDQ=="}],"memo":""},"metadata":{"timestamp":"1743761968"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Second","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"vi5VQFW7xYjrl0jtUMwtWwJEVTW1Bcbimgwz2mU/s91fZWJwYdK/lg0LEcO9TdQCPV8EWvsS3DGNpjNfNu/kBA=="}],"memo":""},"metadata":{"timestamp":"1743761973"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","First with many Replies","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"IvThbQ7fDNCuxPjXCB4aUngctbAz8wI4qZ1Y2p9cGp6315zr8tXylNS+n9V/xnYztqYBOO0acV8NTLAjtr6dCQ=="}],"memo":""},"metadata":{"timestamp":"1743761978"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","First"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"yH3slx61rIFtSsDZKTHeIYYn+mL4n+xiht985eukgKk2POWaKf5BGdBULgkJ21kbnsV65vPJIsgYejbQ/9GjCg=="}],"memo":""},"metadata":{"timestamp":"1743761983"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","8","Sub First"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"R0nUwVIAQ59kP/sZjQ3/xgCXzeo5hbSwLMPz4g4s6pBX9KW3/0vAi9kzz+swwp7END9IC6apNlYC303ZEVuyAA=="}],"memo":""},"metadata":{"timestamp":"1743761988"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Second"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"GG4QHf1tSirS6I9cDjng1Xir1Ql+q4x93bm9kODUL6KEanKmD84gKh5/YVMstRkHPp60Et1UsFHC9J6knxI3AQ=="}],"memo":""},"metadata":{"timestamp":"1743761993"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Third"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"voI0taAnzfanaNNKskt12IivTt4qWbCuWtHXV5huhAOOp7B+K4OPQsIHg7+LwAQeTmWXPyrNdB60OX1BjR1KDg=="}],"memo":""},"metadata":{"timestamp":"1743761998"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Fourth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"aTmh1rKQmbiIfSmfSP8ylV9vBoPqZYV9T0aYgwPB/eFEK7rvZ1eW5+3QP5f8Edrgl4B2kf5WwnA3Fhqu5qc8BQ=="}],"memo":""},"metadata":{"timestamp":"1743762003"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Fifth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"rjiWLoD5Mg1Ulv9b3s299jm2HcmJfoKDeg7WQzgKccmyQ8BQUHBbHEYVar+6wSdjl09RpP/F+CnOUP9JN6gVDQ=="}],"memo":""},"metadata":{"timestamp":"1743762008"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Sixth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"TDO4Ji9JE1mdyomiVRL6Nc2Z22xABNA2xy/Gvi2DaF3Q8Ur56106k7DWgAwKkYnWJO2DjPQH0mry3Dn3K5ygDg=="}],"memo":""},"metadata":{"timestamp":"1743762013"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Seventh"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ID/GjdOyQf3DL8tOLPKgRDkmlxK/VNPej1HGPrmDL2XXqSP8VLHWuE8fhmk6yI8FFMrC5TsRBbIVbmmAhARmDA=="}],"memo":""},"metadata":{"timestamp":"1743762018"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Eigth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xg3AUWGaisRcJwnAGHz6JA0Eb+muoI4YznApNB1ZOcqj/ZKbYwk7LJ/f7aJ9QBUO9YMwCkBRwNr/NBGFPzW9Cg=="}],"memo":""},"metadata":{"timestamp":"1743762023"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Ninth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Z28hKxhoyOqbhWsNCkPreWiq0BgyCxB9AxqfTFLKVKYra+RfANNuljqFuCzVhElqDhkP/RlrBl7TfV5Q2AuBBQ=="}],"memo":""},"metadata":{"timestamp":"1743762028"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Tenth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ujgja3YG7j2hRcob5WWrlBZxfAJzr+TicEeQhHLbr7Xa4cQkxHbWI0DTvEKUqV8RYU52xI20s4p6gt0+D2zZCw=="}],"memo":""},"metadata":{"timestamp":"1743762033"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Eleventh"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"AHZ+TfFaMfccMtF4jX+U8Ruq2zNMVI1RyekXJ0KQ91Y0tkqRK8yn4lvv7Vb+AvDVDkAO3MqO9TfVXr28vGHuBg=="}],"memo":""},"metadata":{"timestamp":"1743762039"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["ReadOnlyExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"/KLIc34sqQrmajzkcFfDjtqgtdjiuGAPgO+qrfJd+WIhzN7gkixqzUSXPj3wZDiKikBqc+T+Wb5tp65m6bK9BA=="}],"memo":""},"metadata":{"timestamp":"1743762044"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["4","Example Thread","This thread shouldn't be writable"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"NXhPiUeq9YcNnkudvz745FgxJsebQ01odghXhRQbQGU40Q83p02OzzOJ3VVKV0yhuBxON7Y181/zxZOiTi4MDQ=="}],"memo":""},"metadata":{"timestamp":"1743762049"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"FreezeBoard","args":["4"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"wd/5jD5gLOF9jEvpFuTKkuln4fbytMqJzZPYN4LOiZY/xVrhM8T3QCr7/d6s8uAr2WxqxBiSGh0yZIp2wQ6UBg=="}],"memo":""},"metadata":{"timestamp":"1743762054"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["RepostExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"5TRSh5UmPK8KI/+8sTSI5upXLvb8LXP4YGLzMaJC5Bu69gu5ZIj+SEBez22Ek25bpVLkqHHtqhpmU5QMvIYuAQ=="}],"memo":""},"metadata":{"timestamp":"1743762059"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kuCtWj1TUpFzucoJ8iAhcnx9Kmvr629VZ2v3JFLL9O/GX4U97k2O0jpn4usPHV3W6RvsRihX+bXQSZHyYYkNDw=="}],"memo":""},"metadata":{"timestamp":"1743762059"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateRepost","args":["2","1","Custom repost title","Custom repost body","5"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"JPJZiP3S/FhZUnPZXP93PAzHt4GpBQ4kAopWnRstMp7D3rye1kMdx+qyKaxGGbiAwI+YKrKK12gud8NAJnRbDw=="}],"memo":""},"metadata":{"timestamp":"1743762064"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"SetRealmNotice","args":["A new [version](https://gno.land/r/devx000/gnoland/boards2/v1rc2) is available which fixes a couple of issues and explores a UI which is is more in line with classic Reddit"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"rAsbllvRLrYeD2MhA3PT5+8yfYQ96MY6bt087UKt4uMH5pknjSYHqygG1h9GRtVUuYDZzvwtrgfgw52OvXGKCA=="}],"memo":""},"metadata":{"timestamp":"1743762325"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"SetRealmNotice","args":["A new boards [version](https://gno.land/r/devx000/gnoland/boards2/v1rc2) is available which fixes a couple of issues and explores a UI which is is more in line with classic Reddit"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Ppe3T0NpwmRcYGu73lTjp9yQAmB8G032mX/yTIeOOqn3nJcP9WKCR1OSznIw1PFoYXea1fMEyrgibY17UVavBQ=="}],"memo":""},"metadata":{"timestamp":"1743762441"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"SetRealmNotice","args":["A new boards [version](https://gno.land/r/devx000/gnoland/boards2/v1rc2) is available which fixes a couple of issues and explores a UI which is more in line with classic Reddit"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"QcTtCygzcmmMQ9oCvrxZEO7KVS2rVwjaJvkFvVlJD1f1gHMe6QHWWnh7rqigtGEFROrHKE9X5SXfsKsR2xJ+Cw=="}],"memo":""},"metadata":{"timestamp":"1743762466"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15dz69sch7fkhc9gk57hpe4qea77thmy20apu9x","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Hp9yyz8tbzWiTA9XmiOMfxdRnhtTNFymcsAoxCj3svu85ZXXa9C48RsdAa1OcVmVYAlVaOKa00F5qrqHJ4NgDQ=="}],"memo":""},"metadata":{"timestamp":"1743762511"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1743762858"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1743762953"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1aykqe5ddemku5mwd3elmwtpj8jgss47xrqpag4","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"5W8pvzVVTwqR0USett9a5LYheSuuFicEmPt++BwXxXEqHWgVQtCQkClsJbLdf5hw1cSGg5h7KW1GVrL6b466DA=="}],"memo":""},"metadata":{"timestamp":"1743767985"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1dtuj65mgja87gh0c45pd3rt4cah0kkw9lzld4y","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"gVIdQBBxy3FqNuvip5XH1L48VyKevaNiPaa4nYyyW/3tDm1f82uOznciajCfJAe8rw2wSRB2W3UAg/Ds/RWPBw=="}],"memo":""},"metadata":{"timestamp":"1743768151"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1743769312"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1manfred47kzduec920z88wfr64ylksmdcedlf5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["test-manfred"]}],"fee":{"gas_wanted":"50000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"zIEkKLWS6zeUOjqJGwRvhP+ncHZYYHC7ps9USK+aWU+LXhRXgKvDSdSfbaaDc48kNeXPDc/sU23o4ZFIYPpBBg=="}],"memo":""},"metadata":{"timestamp":"1743774399"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1manfred47kzduec920z88wfr64ylksmdcedlf5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["6","testing testing","👋"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"sJcvKDbrNWnVo0ozE9r4AvUR3bVGhn4t4OrM/H+7gJ2YwBmQ20u56JUG1AeZl/WSdrlLl8pjTBZZskyT49+NAA=="}],"memo":""},"metadata":{"timestamp":"1743774450"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1etcvlu8zyuwnd7w0x0lcu4g2r7yzllyy62gpa5","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"9104212","gas_fee":"4742446ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"hUM8x4T6MQUzpf04aCJ2OtaF5uHBhNuulFwBKJZfLhNCs/3Wm7rCO5wuHUd+iFscgXk6dvnG8G4l7AFSQNqlBA=="}],"memo":""},"metadata":{"timestamp":"1743775038"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bXyHJdtgDmBHTgSUfcLbWb8QmJPrI9s457gJW1yahUnysV2CEJKBbj3TjSy91WEnIgxMWq21Ki9usgKlfzU4Cg=="}],"memo":""},"metadata":{"timestamp":"1743775997"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bXyHJdtgDmBHTgSUfcLbWb8QmJPrI9s457gJW1yahUnysV2CEJKBbj3TjSy91WEnIgxMWq21Ki9usgKlfzU4Cg=="}],"memo":""},"metadata":{"timestamp":"1743776002"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bXyHJdtgDmBHTgSUfcLbWb8QmJPrI9s457gJW1yahUnysV2CEJKBbj3TjSy91WEnIgxMWq21Ki9usgKlfzU4Cg=="}],"memo":""},"metadata":{"timestamp":"1743776017"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"UpdateStatus","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ub3uoxEExL3jMuQoAegvKmDOW1LWrOercf9BdWQkTdVih3mPoIH/7NqWsOjm/+gIgkLa0kYuSbQBsPfadlwYCQ=="}],"memo":""},"metadata":{"timestamp":"1743776022"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bXyHJdtgDmBHTgSUfcLbWb8QmJPrI9s457gJW1yahUnysV2CEJKBbj3TjSy91WEnIgxMWq21Ki9usgKlfzU4Cg=="}],"memo":""},"metadata":{"timestamp":"1743776027"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1743776083"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14n0zsnsk054uxwvnwmmqyrq6e87ynk5vq98qqp","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"gsOW2ax3szJeuurBkA9J/TM0XCaIyS47k/7kUvk9Gq2twiDVroCszGaw53FJD6FJ/FahqTRyzb656P4MLOX3AA=="}],"memo":""},"metadata":{"timestamp":"1743587748"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1dzzx5qwcmawqnhhd76ehkteas5v2dg42hqnd7g","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Fr1uKtG5S6/mDBxNS42Sbmz6AKHqveVyX1PLz0uXJgJ5Hve4XJgukjDM0/0TnrI5OGTpoqoIZ9evnvmx+MebCQ=="}],"memo":""},"metadata":{"timestamp":"1743587759"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kkS7eUe5RBU5tMINWW4NnKVZ/BXSBErtWniDmponcU3J6oxY6D2p17Zv9ZJeJk+oNmzWhpbIQ0hZ3A7G0pGICQ=="}],"memo":""},"metadata":{"timestamp":"1743587914"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kkS7eUe5RBU5tMINWW4NnKVZ/BXSBErtWniDmponcU3J6oxY6D2p17Zv9ZJeJk+oNmzWhpbIQ0hZ3A7G0pGICQ=="}],"memo":""},"metadata":{"timestamp":"1743587924"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kkS7eUe5RBU5tMINWW4NnKVZ/BXSBErtWniDmponcU3J6oxY6D2p17Zv9ZJeJk+oNmzWhpbIQ0hZ3A7G0pGICQ=="}],"memo":""},"metadata":{"timestamp":"1743587939"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xnrpwODqB9Qzy8lCyG8WhKFujPPtqnByd405Ea6SUtiep7uJyoEzw3D5R8NoasWmRQmXOiceh8x/ETIMAYwOAA=="}],"memo":""},"metadata":{"timestamp":"1743587980"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xnrpwODqB9Qzy8lCyG8WhKFujPPtqnByd405Ea6SUtiep7uJyoEzw3D5R8NoasWmRQmXOiceh8x/ETIMAYwOAA=="}],"memo":""},"metadata":{"timestamp":"1743588120"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kkS7eUe5RBU5tMINWW4NnKVZ/BXSBErtWniDmponcU3J6oxY6D2p17Zv9ZJeJk+oNmzWhpbIQ0hZ3A7G0pGICQ=="}],"memo":""},"metadata":{"timestamp":"1743588221"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xnrpwODqB9Qzy8lCyG8WhKFujPPtqnByd405Ea6SUtiep7uJyoEzw3D5R8NoasWmRQmXOiceh8x/ETIMAYwOAA=="}],"memo":""},"metadata":{"timestamp":"1743591981"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xnrpwODqB9Qzy8lCyG8WhKFujPPtqnByd405Ea6SUtiep7uJyoEzw3D5R8NoasWmRQmXOiceh8x/ETIMAYwOAA=="}],"memo":""},"metadata":{"timestamp":"1743591991"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"rcFAWr1sDO8na64+BQFNqCOiCOQiLSNI1QUKX2m0F1heLU/NOUKhKmbQ9fosCuEhsWELsdUBUaKJH5f4d+jHDg=="}],"memo":""},"metadata":{"timestamp":"1743597359"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2231690ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ocvr/JPKso//ytHIrkTURPWCS1jVsSnm4WrvMUCH9rDe7gyJPgsg6i95QyuqUNFpeiCf57nGq8BjbfufmFF4DA=="}],"memo":""},"metadata":{"timestamp":"1743597379"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"887428","gas_fee":"165039ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"L2sWfo8q5QmVPdiTdVZiTSjulJahNRAZCKd6DLAg/8pbYY259P+yH2fAdYiZ4+4FtnEk9Htv9+oBoeX38V12Bg=="}],"memo":""},"metadata":{"timestamp":"1743597384"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["42"]}],"fee":{"gas_wanted":"3059175","gas_fee":"6374ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"XZzhqFjZxRo0L9GenZ5HAPgE0BnjTFi028j4Ok74B5XgPaMXlj5pTpgCQWY31G6/AxtCeYMT0sNH+VxUKzfXCw=="}],"memo":""},"metadata":{"timestamp":"1743597409"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"KhhBvAFXQEh6n4ZUWU+dnMi3kozbMu32L+QF07g35SLWwHKNCpj5M9hzJDx2HMEqfe+jIyYKyqwolPi8AaJwCw=="}],"memo":""},"metadata":{"timestamp":"1743606306"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"vh0tJl7xCAhje36H2bE94wqsr/n3B/RAQNJeR4OS90NwvQCzZotPzdkhdQVbLdiNPbOdmbxRkK6FjDVIn8acCA=="}],"memo":""},"metadata":{"timestamp":"1743606668"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"/YN3AgTMVWUUwDs3P+vqnXxl4gUlKHwQqdLr1tzzDo0dIETPpbUbzXklVQJVB16dItO2GP4GB35BwBM0BINMDA=="}],"memo":""},"metadata":{"timestamp":"1743607723"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"SQ7dS02SL70+F6zE5E4Sk1vDb8zJQw7V84SkilcWmNMV32mOjy+wVf1xPbDjEbX84XGOhWRknf5/430X6ZU/Bg=="}],"memo":""},"metadata":{"timestamp":"1743608020"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"RwuWiR8W+j5QqToOUOoA4H3ysiUt5ToL3aFD9HMxWS/iEFGNd60d47YOUTxNNkY/P51813vWT/6CgHosxP4iDw=="}],"memo":""},"metadata":{"timestamp":"1743608226"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\n","admin"]}],"fee":{"gas_wanted":"8066534","gas_fee":"16806ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"1YOcGA+gTIMMHhGCPpndDSZKZZaCojfs0d7QiVAb7weQIk4QRJwOAtI2TqwzK8A65q+fWPqMm4kGIgTtBO/cDw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743608291"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"8967781","gas_fee":"18683ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"k6ifImJGjzHjrw5OxnlFED4lGN13DI/LiA9zW1SBYewS3fnwEyLx2wUQfgqdVlMZBQ6C8D9HCsByGQo9jSLYBQ=="}],"memo":""},"metadata":{"timestamp":"1743608301"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15dz69sch7fkhc9gk57hpe4qea77thmy20apu9x","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Hp9yyz8tbzWiTA9XmiOMfxdRnhtTNFymcsAoxCj3svu85ZXXa9C48RsdAa1OcVmVYAlVaOKa00F5qrqHJ4NgDQ=="}],"memo":""},"metadata":{"timestamp":"1743610126"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"DeleteTodo","args":["0"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"RFOIErW3yMP8ByuGPAnoOpUod4ulfP/QlVKtCKL4zDMh9H8mkcCi/y2UKm0enLlXmheSq/FHMiKbvuGeJWFXCQ=="}],"memo":""},"metadata":{"timestamp":"1743611628"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g14gvmle0a5hln0ct7wv857gucr7lmeust35736r","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"+rlC9mhE1bERSiDZ2YvktDxug3Mc9wtJReSHk+MTLi0jqjVTzTvI5pVqJzBO0KSImDbnBNWH0LZe38Sc9frGAQ=="}],"memo":""},"metadata":{"timestamp":"1743662226"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"gZlILkg4UOwV0qKQo2Id40lq46Ljw5DqPd7b1vYElGti3wOxxkEdO1i3YGJ1yv1WzL9ieLQ49xMVJ7qz3Ei8Cg=="}],"memo":""},"metadata":{"timestamp":"1743663236"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","send":"","pkg_path":"gno.land/r/demo/foo721","func":"BalanceOf","args":["g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"FocyEa3/BEh0f/BXj/1c7nfB6Vi071PklsMa8xqnRb+Ox/s8f3p2A3ZtpuYM/kCF/+BPBYQusAZOHfCioLhbBw=="}],"memo":""},"metadata":{"timestamp":"1743663533"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","send":"","pkg_path":"gno.land/r/demo/foo721","func":"BalanceOf","args":["g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj"]}],"fee":{"gas_wanted":"10000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ggFsr+PEH6suxXVxIY1hqEqRekl7hs8flF7ZTb7lCdSFqXo3/xE6aD8eNaEKy5o+MnvwHyRDXfybKZPWCDxABg=="}],"memo":""},"metadata":{"timestamp":"1743663709"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"VS+OtfNCE8oKNuNMlwWMfniOkuJr1QLr6+PplUe5bgNW8j7pGOt7OiO6iEYFhYRMOHEy8iYg5QYy68qfWc76BA=="}],"memo":""},"metadata":{"timestamp":"1743666971"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["42"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2233340ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"/6BW+YwJnX34zp8n5IsfJp1x9Ektt4uUpEJzYgj1AMiIHED4K+zPCOd8Lf68kCIYvoVVYoen+SBR0AbEFTsnDQ=="}],"memo":""},"metadata":{"timestamp":"1743666986"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["keyboard_worrier"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"dx08R8/b7RvesdrpJ6NriCsfFxceLl7SsKZ7nW/apu6BoC7syqV4PcR55AcdpE4Brr6RqVv4VkgF/G1KPbRgBA=="}],"memo":""},"metadata":{"timestamp":"1743672162"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743674585"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743675500"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676274"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676415"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676425"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676440"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676450"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676465"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","send":"","pkg_path":"gno.land/r/demo/userbook","func":"SignUp","args":null}],"fee":{"gas_wanted":"3000000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"b6ObPuETfc7XCJNEMllymwQMJSpPECA7YG3zpgVRo6f77xW1dUyLMx2kawbcJJxjZqXQ068cfBW96s1+S1kRBw=="}],"memo":""},"metadata":{"timestamp":"1743676600"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"RemoveMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\n"]}],"fee":{"gas_wanted":"7891622","gas_fee":"16441ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"89l+iGtobou/e+F/iiifDiQhNHbij0ij+5Ya3ziCacKLcGIlyTx1luTSgS6iPDKeh09cVbi6abEeN5kUm5YUAQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743677621"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","admin"]}],"fee":{"gas_wanted":"8066714","gas_fee":"16806ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"LcaSje7J3JjSKApJB+1EUE6tala9gr9Sq6BIUc+VqChPm0QcGhgR9W5ErCghvSKzGSP6M//zbXqTUGz0ejp+AA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743677721"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"887404","gas_fee":"1849ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"0WqDLPs6a/WA9hXWYVTP+x9TffQ4HbxoY/4ecDysE3Rp9HlXurepSylz4pqFcL0B/BOY885KLvF70bhsM1veAg=="}],"memo":""},"metadata":{"timestamp":"1743677742"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["hello !"]}],"fee":{"gas_wanted":"887311","gas_fee":"1849ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"HbQPKoyJhk/D9pzUPjl7/Z6WSeszhbMmucUwdHYB0/aZCEZ0atxLOoaF4ZUWlaVlMIlBKD/l+/1sRnX6N9GRBA=="}],"memo":""},"metadata":{"timestamp":"1743677757"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"OSUd1L/RiFhkxA3PW+7ADa1mygPaPbouzWwlOL949dJSBnV2hIBh57uz37wAxxBghvtS8LhSnLZ+riJwyBLXCg=="}],"memo":""},"metadata":{"timestamp":"1743680159"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"ChangeMemberRole","args":["0","g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"OMuLXy3HO9JO/FO5LMoSRcr9sojwnppOxU8yXqUWK1xGfftIlomdBUNyxMe78GQRE9J67Iw1EgySadzxatvwDg=="}],"memo":""},"metadata":{"timestamp":"1743680391"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/leon/hof","func":"Upvote","args":["gno.land%2Fr%2Fursulovic%2Fhome"]}],"fee":{"gas_wanted":"12000000","gas_fee":"1721880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"X/eJPJL8ZV8bQZLTk7PadUV+DemIEj/2JLxSv1Y5iosIf2YTwrcxDgidOMfkqyUxQTFmHo/aYr1WQAVPbh/kCw=="}],"memo":""},"metadata":{"timestamp":"1743682979"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1d2hvkqhqckhzpaum09c002fesdw89qrcg9zqws","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ReZNIs5Bl66EsrE8h8FAxIdTKLQTT3JLhrtrMX1xvE0SdiyZ6kXOqG0tInvf/5XZlaoDQ5NazQIPDp5AljTEAw=="}],"memo":""},"metadata":{"timestamp":"1743683221"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1lrsrj4auaffjk538w3x2c9gzyth2m0n39zcg6d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"AKXPlpnjspmHDpF+EQEoze/h/1Dw8Vf43t5GzNgg1Yta3kMRIc06TxltwYPRuJYQRbro5iLt8dh572vXMvChDA=="}],"memo":""},"metadata":{"timestamp":"1743704885"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["2","1","1","Hey hey hey"]}],"fee":{"gas_wanted":"60000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"epppoxiBBFm5IjbU64qXJewGo/7oLGKO0VJsduVtOJYhqNcJSWezt1izHysK6CqGG7DxS2N0SqXR31NNQK8VAw=="}],"memo":""},"metadata":{"timestamp":"1743711043"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["aeddi"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"dXUiTfFR460T8IopbpjSaK+P/nicuQjLa2LAeldy3Rcm65g9P4BnnZ6k0lWXUNaAMsWH7BvQNH3oFdu/YF2nCA=="}],"memo":""},"metadata":{"timestamp":"1743711163"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g16znvp6wxupkkds8mmmtxhvmdly08xpa4rqagp3","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"k1kPHgJM5ggOKZcD9HavykmLc/dkrGogJ2/JBROmxPbT2e6drMzTk2z8OCHjxyjze2/ubWCbvnPCWxr29ZCzBA=="}],"memo":""},"metadata":{"timestamp":"1743712058"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["3","This is a test","Hello World"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"RANRlJvwsfsnr5pkPb5EdNIGFSxl7v207n0pAGgI4Zhqws32Gzv92BzizFTsaQT41XoGZVH6ljWfrLf1bDcxDQ=="}],"memo":""},"metadata":{"timestamp":"1743712737"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"1648310ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"eKVgBjNuPm+xht6YH/l5tXH71McvdcgSAPjlHJL5noOfVFMIE/Mbs7pP0pXECIqQ5QNouD12V/EAT81eN1/yDQ=="}],"memo":""},"metadata":{"timestamp":"1743715914"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"+AnQgsjqwBa57nMiYLJQCgFzuDDAVhkt5x/rVFAqSsshwUs09yf3ksUe+z6zmw5Wi9GaGolmc5WelUD+fIAfDQ=="}],"memo":""},"metadata":{"timestamp":"1743738197"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["1","1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"+TtfHUdK8eOn61UU0S11TklKxw+opiesLW6peiVOPMqVUfm2io3Bb8M745B64R9w7/Wa5gIjwFsK3NBwCFCcDw=="}],"memo":""},"metadata":{"timestamp":"1743738288"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"DeletePost","args":["1","2","2"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"TyJBvACuE8gHyNed5jeU2OGyhr+/0knJHIWBJmSCoY2Bk+O7O5BHus2ZqT2EKJVm6UwbFu1jtjMTJhkTy9TfBw=="}],"memo":""},"metadata":{"timestamp":"1743738333"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/leon/hof","func":"Upvote","args":["gno.land%2Fr%2Fursulovic%2Fhome"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"7w85qlNpnp4p/g8ld6Cg3B1tNTKr/jEbkmOkjkZGO19A56uN/1qTbsgdnIkLD+dIKW8LlP5b9/89tr8c1PZ1Ag=="}],"memo":""},"metadata":{"timestamp":"1743738469"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["1","2"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"tVowNVrP7Rk8tQ2rKYAkIhhXBOeKDV9XBo0/1HE4zX9ZcsBE+a7nKjqIxofQV6cUbRGE4x8P9A29Ks5KjpH6Bg=="}],"memo":""},"metadata":{"timestamp":"1743738680"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1nnl20472w0effzcexuqmk4ntn20wg95ytygy55","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"TtQ39YW0Ecf2merJzXjISiic48o1tc2YJegiC3SJm+OnAbYJEhJBNgAbLJZupSz0pl3HxAWoLIaNSftWGG8TAw=="}],"memo":""},"metadata":{"timestamp":"1743739027"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1nnl20472w0effzcexuqmk4ntn20wg95ytygy55","to_address":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","amount":"9000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"sX5sD9n5f/MQ7BhkmovbjAPmb9q0TEGDnsxy1exAJd265fJfMPpNbIARz6iJTbfjHnb6dmVuD/FBYELfocJrAQ=="}],"memo":""},"metadata":{"timestamp":"1743739047"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1zeq4hn2hd2azde6p9x2ya9gp3ug30vuuv56pym","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"WyfGApIENWM21BnfCCjLar/JmI1YIu5XyCAbW8RZ8uIr48YZZUenfn9OFS6uhDSgydFHEi4dGzkJnBNapTooCA=="}],"memo":""},"metadata":{"timestamp":"1743739590"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1zeq4hn2hd2azde6p9x2ya9gp3ug30vuuv56pym","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["2","2"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"HB9tk6ZVTE/MYUYpIhVbPLWSf5La5tT4Oily6u9oEypn5a7y6GZ3bRQH53PKVk0HE2KIyfw+J29M0rBa8fjbBQ=="}],"memo":""},"metadata":{"timestamp":"1743739625"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1p5pa2sp4elcja2u8wn36zv3plsyp8xrqgz0usf","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"HEdysJ0aqWgRYYCb7syiZ8D5AblFIRfXXWXhH3P3T5Dyxg1odHNQ2VwoYTQ9NX9FubLt6JItuMQ+8PlYtBNZAA=="}],"memo":""},"metadata":{"timestamp":"1743750714"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Rqf9NhUO3sQwKUmNU7GrX8d1pzZRaNjOWqAx/XL4psTx/txvDZWdPpvbwoZFvfuaZ99/Nd07Ht9HjmXOUQCyBw=="}],"memo":""},"metadata":{"timestamp":"1743750895"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":["aeddi-testing"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"j7ShULKK/MB8bsIL15PbOfQRCz34X7VpeVsv61YMZ9EsGEdv9rdy7NSXFf9BbKtU7acnTzc36bi8RXBqonWCAQ=="}],"memo":""},"metadata":{"timestamp":"1743751141"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","to_address":"g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","amount":"1000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"DeFguiM0qG5+CTtuNr1BM3z42UJAkDBg+7g+/7/2kLY21hC+Z2uWwpVpDehGEG9a0Pcs8e1OybcqYFKhHZ/RDg=="}],"memo":""},"metadata":{"timestamp":"1743755182"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1etcvlu8zyuwnd7w0x0lcu4g2r7yzllyy62gpa5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Ye42Dwic6f8nEQVxwxVg8DNVnlxMscInjIntiz5mOTFi4Edsqw8L1g7n4NfeQb62FOz6DiHZVoEurLEr6YhaDw=="}],"memo":""},"metadata":{"timestamp":"1743760782"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1etcvlu8zyuwnd7w0x0lcu4g2r7yzllyy62gpa5","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","-1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"E0mdmjXzFwUjU0DWIzTiQRys1zkvBJ7KYowkKTnJV83tGH56kvAGutHarfu/L1Sn3z2TgKls3XeI6xIrDBn+AQ=="}],"memo":""},"metadata":{"timestamp":"1743760847"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kuCtWj1TUpFzucoJ8iAhcnx9Kmvr629VZ2v3JFLL9O/GX4U97k2O0jpn4usPHV3W6RvsRihX+bXQSZHyYYkNDw=="}],"memo":""},"metadata":{"timestamp":"1743761662"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","package":{"name":"boards2","path":"gno.land/r/devx000/gnoland/boards2/v1rc2","files":[{"name":"board.gno","body":"package boards2\n\nimport (\n\t\"net/url\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\ntype BoardID uint64\n\nfunc (id BoardID) String() string {\n\treturn strconv.Itoa(int(id))\n}\n\nfunc (id BoardID) Key() string {\n\treturn padZero(uint64(id), 10)\n}\n\ntype Board struct {\n\tid        BoardID // only set for public boards.\n\tname      string\n\taliases   []string\n\tcreator   std.Address\n\tthreads   avl.Tree // Post.id -\u003e *Post\n\tpostsCtr  uint64   // increments Post.id\n\tcreatedAt time.Time\n\tdeleted   avl.Tree // TODO reserved for fast-delete.\n\tperms     Permissions\n\treadonly  bool\n}\n\nfunc newBoard(id BoardID, name string, creator std.Address, p Permissions) *Board {\n\treturn \u0026Board{\n\t\tid:        id,\n\t\tname:      name,\n\t\tcreator:   creator,\n\t\tthreads:   avl.Tree{},\n\t\tcreatedAt: time.Now(),\n\t\tdeleted:   avl.Tree{},\n\t\tperms:     p,\n\t}\n}\n\nfunc (board *Board) GetID() BoardID {\n\treturn board.id\n}\n\n// GetName returns the name of the board.\nfunc (board *Board) GetName() string {\n\treturn board.name\n}\n\n// GetURL returns the relative URL of the board.\nfunc (board *Board) GetURL() string {\n\treturn strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\") + \":\" + url.PathEscape(board.name)\n}\n\n// GetURL returns relative board path relative.\n//\n// Note: returned result is not escaped. Use GetURL to get URL-encoded path.\nfunc (board *Board) GetPath() string {\n\treturn strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\") + \":\" + board.name\n}\n\nfunc (board *Board) GetPermissions() Permissions {\n\treturn board.perms\n}\n\n// SetReadonly updates board's read-only status.\nfunc (board *Board) SetReadonly(readonly bool) {\n\tboard.readonly = readonly\n}\n\n// IsReadonly checks if the board is a read-only board.\nfunc (board *Board) IsReadonly() bool {\n\treturn board.readonly\n}\n\nfunc (board *Board) GetThread(threadID PostID) (_ *Post, found bool) {\n\tv, found := board.threads.Get(threadID.Key())\n\tif !found {\n\t\treturn nil, false\n\t}\n\treturn v.(*Post), true\n}\n\nfunc (board *Board) AddThread(creator std.Address, title string, body string) *Post {\n\tpid := board.incGetPostID()\n\tthread := newPost(board, pid, creator, title, body, pid, 0, 0)\n\tboard.threads.Set(pid.Key(), thread)\n\treturn thread\n}\n\n// NOTE: this can be potentially very expensive for threads with many replies.\n// TODO: implement optional fast-delete where thread is simply moved.\nfunc (board *Board) DeleteThread(pid PostID) {\n\t_, removed := board.threads.Remove(pid.Key())\n\tif !removed {\n\t\tpanic(\"thread does not exist with ID \" + pid.String())\n\t}\n}\n\n// Render renders a board into Markdown.\nfunc (board *Board) Render(path, menu string) string {\n\tvar sb strings.Builder\n\n\tsb.WriteString(\"# \" + board.GetName() + \"  \\n\")\n\tsb.WriteString(\"Board created by \" + newUserLink(board.creator) + \" \")\n\tsb.WriteString(\"on \" + board.createdAt.Format(dateFormat))\n\tsb.WriteString(\", #\" + board.id.String())\n\n\tif board.IsReadonly() {\n\t\tsb.WriteString(\"  \\n_**Starting new threads and commenting is disabled**_\")\n\t}\n\n\t// XXX: Menu is rendered by the caller to deal with links and sub-menus\n\t// TODO: We should have the render logic separated from boards so avoid sending menu as argument\n\tif menu != \"\" {\n\t\tsb.WriteString(\"\\n\\n\")\n\t\tsb.WriteString(menu)\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\tsb.WriteString(\"\\n\\n---\\n\")\n\n\tif board.threads.Size() == 0 {\n\t\tsb.WriteString(\"### This board doesn't have any threads\\n\")\n\t\tif !board.IsReadonly() {\n\t\t\turl := board.GetPostFormURL()\n\t\t\tsb.WriteString(\"Do you want to [start a new conversation](\" + url + \") in this board ?\")\n\t\t}\n\t\treturn sb.String()\n\t}\n\n\tp, err := pager.New(path, board.threads.Size(), pager.WithPageSize(pageSizeThreads))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\trender := func(_ string, v any) bool {\n\t\tthread := v.(*Post)\n\t\tif thread.isHidden {\n\t\t\treturn false\n\t\t}\n\n\t\tsb.WriteString(thread.RenderSummary())\n\t\tsb.WriteString(\"\\n\")\n\t\treturn false\n\t}\n\n\tsb.WriteString(\"Sort by: \")\n\tr := realmpath.Parse(path)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tsb.WriteString(newLink(\"newest first\", r.String()))\n\t\tsb.WriteString(\"\\n\\n\")\n\t\tboard.threads.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tsb.WriteString(newLink(\"oldest first\", r.String()))\n\t\tsb.WriteString(\"\\n\\n\")\n\t\tboard.threads.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tsb.WriteString(\"\\n---\\n\")\n\t\tsb.WriteString(pager.Picker(p))\n\t}\n\n\treturn sb.String()\n}\n\nfunc (board *Board) incGetPostID() PostID {\n\tboard.postsCtr++\n\treturn PostID(board.postsCtr)\n}\n\nfunc (board *Board) GetURLFromThreadID(threadID PostID) string {\n\treturn board.GetURL() + \"/\" + threadID.String()\n}\n\nfunc (board *Board) GetURLFromReplyID(threadID, replyID PostID) string {\n\treturn board.GetURL() + \"/\" + threadID.String() + \"/\" + replyID.String()\n}\n\nfunc (board *Board) GetRenameFormURL() string { // TODO: These type of functions shouldn't be part of Board type\n\treturn txlink.Call(\n\t\t\"RenameBoard\",\n\t\t\"name\", board.name,\n\t\t\"newName\", \"\",\n\t)\n}\n\nfunc (board *Board) GetFreezeFormURL() string {\n\treturn txlink.Call(\n\t\t\"FreezeBoard\",\n\t\t\"boardID\", board.id.String(),\n\t)\n}\n\nfunc (board *Board) GetUnfreezeFormURL() string {\n\treturn txlink.Call(\n\t\t\"UnfreezeBoard\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"threadID\", \"\",\n\t\t\"replyID\", \"\",\n\t)\n}\n\nfunc (board *Board) GetFlaggingThresholdFormURL() string {\n\treturn txlink.Call(\n\t\t\"SetFlaggingThreshold\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"threshold\", \"\",\n\t)\n}\n\nfunc (board *Board) GetInviteMemberFormURL() string {\n\treturn txlink.Call(\n\t\t\"InviteMember\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"user\", \"\",\n\t\t\"role\", \"\",\n\t)\n}\n\nfunc (board *Board) GetPostFormURL() string {\n\treturn txlink.Call(\n\t\t\"CreateThread\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"title\", \"\",\n\t\t\"body\", \"\",\n\t)\n}\n\nfunc (board *Board) GetMembersURL() string {\n\treturn board.GetURL() + \"/members\"\n}\n\nfunc createDefaultBoardPermissions(owner std.Address) *DefaultPermissions {\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.SetSuperRole(RoleOwner)\n\tperms.AddRole(\n\t\tRoleAdmin,\n\t\tPermissionBoardRename,\n\t\tPermissionBoardFlaggingUpdate,\n\t\tPermissionMemberInvite,\n\t\tPermissionMemberRemove,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadEdit,\n\t\tPermissionThreadDelete,\n\t\tPermissionThreadRepost,\n\t\tPermissionThreadFlag,\n\t\tPermissionThreadFreeze,\n\t\tPermissionReplyCreate,\n\t\tPermissionReplyDelete,\n\t\tPermissionReplyFlag,\n\t\tPermissionReplyFreeze,\n\t\tPermissionRoleChange,\n\t)\n\tperms.AddRole(\n\t\tRoleModerator,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadEdit,\n\t\tPermissionThreadRepost,\n\t\tPermissionThreadFlag,\n\t\tPermissionReplyCreate,\n\t\tPermissionReplyFlag,\n\t)\n\tperms.AddRole(\n\t\tRoleGuest,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadRepost,\n\t\tPermissionReplyCreate,\n\t)\n\tperms.AddUser(owner, RoleOwner)\n\treturn perms\n}\n"},{"name":"board_readonly.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"time\"\n)\n\n// ReadonlyBoard defines an interface for readonly boards.\ntype ReadonlyBoard interface {\n\t// ID returns the unique identifier of the board.\n\tID() BoardID\n\n\t// Name returns the name of the board.\n\tName() string\n\n\t// Aliases returns a list with previous names assigned to the board.\n\tAliases() []string\n\n\t// Creator returns board's creator address.\n\tCreator() std.Address\n\n\t// LastPostID returns the ID assigned to the last created thread.\n\tLastPostID() uint64\n\n\t// CreatedAt returns the time when board was created.\n\tCreatedAt() time.Time\n\n\t// IsReadonly returns true when board shouldn't allow the creation of threads and comments.\n\tIsReadonly() bool\n\n\t// MembersCount returns the number of invited board members.\n\tMembersCount() int\n\n\t// IterateMembers allows reading the list of invited board members.\n\tIterateMembers(offset, count int, fn UsersIterFn)\n}\n\ntype readonlyBoard struct {\n\tboard *Board\n}\n\nfunc (b readonlyBoard) ID() BoardID {\n\treturn b.board.id\n}\n\nfunc (b readonlyBoard) Name() string {\n\treturn b.board.name\n}\n\nfunc (b readonlyBoard) Aliases() []string {\n\taliases := make([]string, len(b.board.aliases))\n\tfor i, s := range b.board.aliases {\n\t\taliases[i] = s\n\t}\n\treturn aliases\n}\n\nfunc (b readonlyBoard) Creator() std.Address {\n\treturn b.board.creator\n}\n\nfunc (b readonlyBoard) LastPostID() uint64 {\n\treturn b.board.postsCtr\n}\n\nfunc (b readonlyBoard) CreatedAt() time.Time {\n\treturn b.board.createdAt\n}\n\nfunc (b readonlyBoard) IsReadonly() bool {\n\treturn b.board.readonly\n}\n\nfunc (b readonlyBoard) MembersCount() int {\n\treturn b.board.perms.UsersCount()\n}\n\nfunc (b readonlyBoard) IterateMembers(offset, count int, fn UsersIterFn) {\n\tb.board.perms.IterateUsers(offset, count, fn)\n}\n"},{"name":"board_test.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nfunc TestBoardID_String(t *testing.T) {\n\tinput := BoardID(32)\n\n\tuassert.Equal(t, \"32\", input.String())\n}\n\nfunc TestBoardID_Key(t *testing.T) {\n\tinput := BoardID(128)\n\twant := strings.Repeat(\"0\", 7) + \"128\"\n\tuassert.Equal(t, want, input.Key())\n}\n\nfunc TestBoard_GetID(t *testing.T) {\n\twant := int(92)\n\tb := new(Board)\n\tb.id = BoardID(want)\n\tgot := int(b.GetID())\n\n\tuassert.Equal(t, got, want)\n\tuassert.NotEqual(t, got, want*want)\n}\n\nfunc TestBoard_GetURL(t *testing.T) {\n\tpkgPath := strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\tname := \"foobar_test_get_url123\"\n\twant := pkgPath + \":\" + name\n\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tboard := newBoard(1, name, addr, perms)\n\tgot := board.GetURL()\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetThread(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(1, \"test123\", addr, perms)\n\n\t_, ok := b.GetThread(12345)\n\tuassert.False(t, ok)\n\n\tpost := b.AddThread(addr, \"foo\", \"bar\")\n\t_, ok = b.GetThread(post.GetPostID())\n\tuassert.True(t, ok)\n}\n\nfunc TestBoard_DeleteThread(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(1, \"test123\", addr, perms)\n\n\tpost := b.AddThread(addr, \"foo\", \"bar\")\n\tid := post.GetPostID()\n\n\tb.DeleteThread(id)\n\n\t_, ok := b.GetThread(id)\n\tuassert.False(t, ok)\n}\n\nvar boardUrlPrefix = strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\nfunc TestBoard_GetURLFromThreadID(t *testing.T) {\n\tboardName := \"test12345\"\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(BoardID(11), boardName, addr, perms)\n\twant := boardUrlPrefix + \":\" + boardName + \"/10\"\n\n\tgot := b.GetURLFromThreadID(10)\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetURLFromReplyID(t *testing.T) {\n\tboardName := \"test12345\"\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(BoardID(11), boardName, addr, perms)\n\twant := boardUrlPrefix + \":\" + boardName + \"/10/20\"\n\n\tgot := b.GetURLFromReplyID(10, 20)\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetPostFormURL(t *testing.T) {\n\tbid := BoardID(386)\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(bid, \"foo1234\", addr, perms)\n\texpect := txlink.Call(\"CreateThread\", \"boardID\", bid.String(), \"title\", \"\", \"body\", \"\")\n\n\tgot := b.GetPostFormURL()\n\tuassert.Equal(t, expect, got)\n}\n"},{"name":"boards.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tgPerms        Permissions\n\tgNotice       string\n\tgHelp         string\n\tgLastBoardID  BoardID\n\tgBoardsByID   avl.Tree // string(id) -\u003e *Board\n\tgBoardsByName avl.Tree // string(name) -\u003e *Board\n\tgLocked       struct {\n\t\trealm        bool\n\t\trealmMembers bool\n\t}\n)\n\nfunc init() {\n\t// TODO: Define and change the default realm owner (or owners)\n\towner := std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\n\t// Initialize default realm permissions\n\tgPerms = createDefaultPermissions(owner)\n\n\t// Import relevant initial state from previous version\n\tinitFromPrevVersion()\n}\n\n// incGetBoardID returns a new board ID.\nfunc incGetBoardID() BoardID {\n\tgLastBoardID++\n\treturn gLastBoardID\n}\n\n// getBoard returns a board for a specific ID.\nfunc getBoard(id BoardID) (_ *Board, found bool) {\n\tv, exists := gBoardsByID.Get(id.Key())\n\tif !exists {\n\t\treturn nil, false\n\t}\n\treturn v.(*Board), true\n}\n\n// mustGetBoardByName returns a board or panics when it's not found.\nfunc mustGetBoardByName(name string) *Board {\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tpanic(\"board does not exist with name: \" + name)\n\t}\n\treturn v.(*Board)\n}\n\n// mustGetBoard returns a board or panics when it's not found.\nfunc mustGetBoard(id BoardID) *Board {\n\tboard, found := getBoard(id)\n\tif !found {\n\t\tpanic(\"board does not exist with ID: \" + id.String())\n\t}\n\treturn board\n}\n\n// mustGetThread returns a thread or panics when it's not found.\nfunc mustGetThread(board *Board, threadID PostID) *Post {\n\tthread, found := board.GetThread(threadID)\n\tif !found {\n\t\tpanic(\"thread does not exist with ID: \" + threadID.String())\n\t}\n\treturn thread\n}\n\n// mustGetReply returns a reply or panics when it's not found.\nfunc mustGetReply(thread *Post, replyID PostID) *Post {\n\treply, found := thread.GetReply(replyID)\n\tif !found {\n\t\tpanic(\"reply does not exist with ID: \" + replyID.String())\n\t}\n\treturn reply\n}\n\nfunc mustGetPermissions(bid BoardID) Permissions {\n\tif bid != 0 {\n\t\tboard := mustGetBoard(bid)\n\t\treturn board.perms\n\t}\n\treturn gPerms\n}\n"},{"name":"flag.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n// DefaultFlaggingThreshold defines the default number of flags that hides flaggable items.\nconst DefaultFlaggingThreshold = 1\n\nvar gFlaggingThresholds avl.Tree // string(board ID) -\u003e int\n\ntype Flag struct {\n\tUser   std.Address\n\tReason string\n}\n\ntype Flaggable interface {\n\t// AddFlag adds a new flag to an item.\n\t//\n\t// Returns false if item was already flagged by user.\n\tAddFlag(flag Flag) bool\n\n\t// FlagsCount returns number of times item was flagged.\n\tFlagsCount() int\n}\n\n// flagItem adds a flag to a flaggable item (post, thread, etc).\n//\n// Returns whether flag count threshold is reached and item can be hidden.\n//\n// Panics if flag count threshold was already reached.\nfunc flagItem(item Flaggable, flag Flag, threshold int) bool {\n\tif item.FlagsCount() \u003e= threshold {\n\t\tpanic(\"item flag count threshold exceeded: \" + strconv.Itoa(threshold))\n\t}\n\n\tif !item.AddFlag(flag) {\n\t\tpanic(\"item has been already flagged by a current user\")\n\t}\n\n\treturn item.FlagsCount() == threshold\n}\n\nfunc getFlaggingThreshold(bid BoardID) int {\n\tif v, ok := gFlaggingThresholds.Get(bid.String()); ok {\n\t\treturn v.(int)\n\t}\n\treturn DefaultFlaggingThreshold\n}\n"},{"name":"format.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/r/sys/users\"\n)\n\nfunc padLeft(s string, length int) string {\n\tif len(s) \u003e= length {\n\t\treturn s\n\t}\n\treturn strings.Repeat(\" \", length-len(s)) + s\n}\n\nfunc padZero(u64 uint64, length int) string {\n\ts := strconv.Itoa(int(u64))\n\tif len(s) \u003e= length {\n\t\treturn s\n\t}\n\treturn strings.Repeat(\"0\", length-len(s)) + s\n}\n\nfunc indentBody(indent string, body string) string {\n\tvar (\n\t\tres   string\n\t\tlines = strings.Split(body, \"\\n\")\n\t)\n\tfor i, line := range lines {\n\t\tif i \u003e 0 {\n\t\t\tres += \"\\n\"\n\t\t}\n\t\tres += indent + line\n\t}\n\treturn res\n}\n\n// NOTE: length must be greater than 3.\nfunc summaryOf(text string, length int) string {\n\tlines := strings.SplitN(text, \"\\n\", 2)\n\tline := lines[0]\n\tif len(line) \u003e length {\n\t\tline = line[:(length-3)] + \"...\"\n\t} else if len(lines) \u003e 1 {\n\t\t// len(line) \u003c= 80\n\t\tline = line + \"...\"\n\t}\n\treturn line\n}\n\n// newLink returns a Markdown link.\nfunc newLink(label, uri string) string {\n\treturn \"[\" + label + \"](\" + uri + \")\"\n}\n\n// newButtonLink returns a Makdown link with label wrapped in brackets.\nfunc newButtonLink(label, uri string) string {\n\treturn `[\\[` + label + `\\]](` + uri + \")\"\n}\n\n// newUserLink returns a Markdown link for an account to the users\n// realm or the address as string when a user is not registered.\nfunc newUserLink(addr std.Address) string {\n\tuser := users.ResolveAddress(addr)\n\tif user != nil {\n\t\treturn user.RenderLink(\"\")\n\t}\n\treturn addr.String()\n}\n"},{"name":"migrations.gno","body":"package boards2\n\nimport (\n\tv1rc1 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nfunc initFromPrevVersion() {\n\timportRealmMembers()\n}\n\nfunc importRealmMembers() {\n\tv1rc1.IterateRealmMembers(0, func(member v1rc1.User) bool {\n\t\t// XXX: This wouldn't be required if a boards2 package is created\n\t\troles := make([]Role, len(member.Roles))\n\t\tfor i, r := range member.Roles {\n\t\t\troles[i] = Role(r)\n\t\t}\n\n\t\tgPerms.AddUser(member.Address, roles...)\n\t\treturn false\n\t})\n}\n"},{"name":"permissions.gno","body":"package boards2\n\nimport \"std\"\n\nconst (\n\tPermissionRealmHelp           Permission = \"realm:help\"\n\tPermissionRealmLock                      = \"realm:lock\"\n\tPermissionRealmNotice                    = \"realm:notice\"\n\tPermissionBoardCreate                    = \"board:create\"\n\tPermissionBoardFlaggingUpdate            = \"board:flagging-update\"\n\tPermissionBoardFreeze                    = \"board:freeze\"\n\tPermissionBoardRename                    = \"board:rename\"\n\tPermissionThreadCreate                   = \"thread:create\"\n\tPermissionThreadDelete                   = \"thread:delete\"\n\tPermissionThreadEdit                     = \"thread:edit\"\n\tPermissionThreadFlag                     = \"thread:flag\"\n\tPermissionThreadFreeze                   = \"thread:freeze\"\n\tPermissionThreadRepost                   = \"thread:repost\"\n\tPermissionReplyCreate                    = \"reply:create\"\n\tPermissionReplyDelete                    = \"reply:delete\"\n\tPermissionReplyFlag                      = \"reply:flag\"\n\tPermissionReplyFreeze                    = \"reply:freeze\"\n\tPermissionMemberInvite                   = \"member:invite\"\n\tPermissionMemberRemove                   = \"member:remove\"\n\tPermissionRoleChange                     = \"role:change\"\n\tPermissionPermissionsUpdate              = \"permissions:update\"\n)\n\nconst (\n\tRoleGuest     Role = \"\"\n\tRoleOwner          = \"owner\"\n\tRoleAdmin          = \"admin\"\n\tRoleModerator      = \"moderator\"\n)\n\ntype (\n\t// Permission defines the type for permissions.\n\tPermission string\n\n\t// Role defines the type for user roles.\n\tRole string\n\n\t// Args is a list of generic arguments.\n\tArgs []interface{}\n\n\t// User contains user info.\n\tUser struct {\n\t\tAddress std.Address\n\t\tRoles   []Role\n\t}\n\n\t// UsersIterFn defines a function type to iterate users.\n\tUsersIterFn func(User) bool\n\n\t// Permissions define an interface to for permissioned execution.\n\tPermissions interface {\n\t\t// HasRole checks if a user has a specific role assigned.\n\t\tHasRole(std.Address, Role) bool\n\n\t\t// HasPermission checks if a user has a specific permission.\n\t\tHasPermission(std.Address, Permission) bool\n\n\t\t// WithPermission calls a callback when a user has a specific permission.\n\t\t// It panics on error.\n\t\tWithPermission(std.Address, Permission, Args, func(Args))\n\n\t\t// AddUser adds a new user to the permissioner.\n\t\tAddUser(std.Address, ...Role) error\n\n\t\t// SetUserRoles sets the roles of a user.\n\t\tSetUserRoles(std.Address, ...Role) error\n\n\t\t// RemoveUser removes a user from the permissioner.\n\t\tRemoveUser(std.Address) (removed bool)\n\n\t\t// HasUser checks if a user exists.\n\t\tHasUser(std.Address) bool\n\n\t\t// UsersCount returns the total number of users the permissioner contains.\n\t\tUsersCount() int\n\n\t\t// IterateUsers iterates permissions' users.\n\t\tIterateUsers(start, count int, fn UsersIterFn) bool\n\t}\n)\n"},{"name":"permissions_default.gno","body":"package boards2\n\nimport (\n\t\"errors\"\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\t\"gno.land/r/sys/users\"\n)\n\n// DefaultPermissions manages users, roles and permissions.\ntype DefaultPermissions struct {\n\tsuperRole Role\n\tdao       *commondao.CommonDAO\n\tusers     *avl.Tree // string(std.Address) -\u003e []Role\n\troles     *avl.Tree // string(role) -\u003e []Permission\n}\n\n// NewDefaultPermissions creates a new permissions type.\n// This type is a default implementation to handle users, roles and permissions.\nfunc NewDefaultPermissions(dao *commondao.CommonDAO) *DefaultPermissions {\n\tif dao == nil {\n\t\tpanic(\"default permissions require a DAO\")\n\t}\n\n\tdp := \u0026DefaultPermissions{\n\t\tdao:   dao,\n\t\troles: avl.NewTree(),\n\t\tusers: avl.NewTree(),\n\t}\n\n\t// Make sure that DAO users are indexed when DAO has members\n\tdao.Members().IterateByOffset(0, dao.Members().Size(), func(m std.Address) bool {\n\t\tdp.users.Set(m.String(), []Role(nil))\n\t\treturn false\n\t})\n\n\treturn dp\n}\n\n// SetSuperRole assigns a super role.\n// A super role is one that have all permissions.\n// These type of role doesn't need to be mapped to any permission.\nfunc (dp *DefaultPermissions) SetSuperRole(r Role) {\n\tdp.superRole = r\n}\n\n// AddRole add a role with one or more assigned permissions.\nfunc (dp *DefaultPermissions) AddRole(r Role, p Permission, extra ...Permission) {\n\tdp.roles.Set(string(r), append([]Permission{p}, extra...))\n}\n\n// RoleExists checks if a role exists.\nfunc (dp DefaultPermissions) RoleExists(r Role) bool {\n\tif dp.superRole != \"\" \u0026\u0026 r == dp.superRole {\n\t\treturn true\n\t}\n\n\treturn dp.roles.Iterate(\"\", \"\", func(name string, _ interface{}) bool {\n\t\treturn Role(name) == r\n\t})\n}\n\n// GetUserRoles returns the list of roles assigned to a user.\nfunc (dp DefaultPermissions) GetUserRoles(user std.Address) []Role {\n\tv, found := dp.users.Get(user.String())\n\tif !found {\n\t\treturn nil\n\t}\n\treturn v.([]Role)\n}\n\n// HasRole checks if a user has a specific role assigned.\nfunc (dp DefaultPermissions) HasRole(user std.Address, r Role) bool {\n\tfor _, role := range dp.GetUserRoles(user) {\n\t\tif role == r {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// HasPermission checks if a user has a specific permission.\nfunc (dp DefaultPermissions) HasPermission(user std.Address, perm Permission) bool {\n\tfor _, r := range dp.GetUserRoles(user) {\n\t\tif dp.superRole == r {\n\t\t\treturn true\n\t\t}\n\n\t\tv, found := dp.roles.Get(string(r))\n\t\tif !found {\n\t\t\tcontinue\n\t\t}\n\n\t\tfor _, p := range v.([]Permission) {\n\t\t\tif p == perm {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// AddUser adds a new user to permissions.\nfunc (dp *DefaultPermissions) AddUser(user std.Address, roles ...Role) error {\n\tif dp.users.Has(user.String()) {\n\t\treturn errors.New(\"user already exists\")\n\t}\n\n\tdp.dao.Members().Add(user)\n\treturn dp.setUserRoles(user, roles...)\n}\n\n// SetUserRoles sets the roles of a user.\nfunc (dp *DefaultPermissions) SetUserRoles(user std.Address, roles ...Role) error {\n\tif !dp.users.Has(user.String()) {\n\t\treturn errors.New(\"user not found\")\n\t}\n\treturn dp.setUserRoles(user, roles...)\n}\n\n// RemoveUser removes a user from permissions.\nfunc (dp *DefaultPermissions) RemoveUser(user std.Address) bool {\n\t_, removed := dp.users.Remove(user.String())\n\tdp.dao.Members().Remove(user)\n\treturn removed\n}\n\n// HasUser checks if a user exists.\nfunc (dp DefaultPermissions) HasUser(user std.Address) bool {\n\treturn dp.users.Has(user.String())\n}\n\n// UsersCount returns the total number of users the permissioner contains.\nfunc (dp DefaultPermissions) UsersCount() int {\n\treturn dp.users.Size()\n}\n\n// IterateUsers iterates permissions' users.\nfunc (dp DefaultPermissions) IterateUsers(start, count int, fn UsersIterFn) bool {\n\treturn dp.users.IterateByOffset(start, count, func(k string, v interface{}) bool {\n\t\treturn fn(User{\n\t\t\tAddress: std.Address(k),\n\t\t\tRoles:   v.([]Role),\n\t\t})\n\t})\n}\n\n// WithPermission calls a callback when a user has a specific permission.\n// It panics on error or when a handler panics.\n// Callbacks are by default called when there is no handle registered for the permission.\nfunc (dp *DefaultPermissions) WithPermission(user std.Address, perm Permission, args Args, cb func(Args)) {\n\tif !dp.HasPermission(user, perm) || !dp.dao.Members().Has(user) {\n\t\tpanic(\"unauthorized\")\n\t}\n\n\tswitch perm {\n\tcase PermissionBoardCreate:\n\t\tdp.handleBoardCreate(args, cb)\n\tcase PermissionBoardRename:\n\t\tdp.handleBoardRename(args, cb)\n\tcase PermissionMemberInvite:\n\t\tdp.handleMemberInvite(args, cb)\n\tcase PermissionRoleChange:\n\t\tdp.handleRoleChange(args, cb)\n\tdefault:\n\t\tcb(args)\n\t}\n}\n\nfunc (dp *DefaultPermissions) setUserRoles(user std.Address, roles ...Role) error {\n\tfor _, r := range roles {\n\t\tif !dp.RoleExists(r) {\n\t\t\treturn errors.New(\"invalid role: \" + string(r))\n\t\t}\n\t}\n\n\tdp.users.Set(user.String(), append([]Role(nil), roles...))\n\treturn nil\n}\n\nfunc (DefaultPermissions) handleBoardCreate(args Args, cb func(Args)) {\n\tname, ok := args[0].(string)\n\tif !ok {\n\t\tpanic(\"expected board name to be a string\")\n\t}\n\n\tassertBoardNameIsNotAddress(name)\n\tassertBoardNameBelongsToCaller(name)\n\n\tcb(args)\n}\n\nfunc (DefaultPermissions) handleBoardRename(args Args, cb func(Args)) {\n\tnewName, ok := args[2].(string)\n\tif !ok {\n\t\tpanic(\"expected new board name to be a string\")\n\t}\n\n\tassertBoardNameIsNotAddress(newName)\n\tassertBoardNameBelongsToCaller(newName)\n\n\tcb(args)\n}\n\nfunc (dp DefaultPermissions) handleMemberInvite(args Args, cb func(Args)) {\n\t// Make sure that only owners invite other owners\n\trole, ok := args[1].(Role)\n\tif !ok {\n\t\tpanic(\"expected a valid new member role\")\n\t}\n\n\tif role == RoleOwner {\n\t\tif !dp.HasRole(std.PreviousRealm().Address(), RoleOwner) {\n\t\t\tpanic(\"only owners are allowed to invite other owners\")\n\t\t}\n\t}\n\n\tcb(args)\n}\n\nfunc (dp DefaultPermissions) handleRoleChange(args Args, cb func(Args)) {\n\t// Owners and Admins can change roles.\n\t// Admins should not be able to assign or remove the Owner role from members.\n\tif dp.HasRole(std.PreviousRealm().Address(), RoleAdmin) {\n\t\trole, ok := args[2].(Role)\n\t\tif !ok {\n\t\t\tpanic(\"expected a valid member role\")\n\t\t}\n\n\t\tif role == RoleOwner {\n\t\t\tpanic(\"admins are not allowed to promote members to Owner\")\n\t\t} else {\n\t\t\tmember, ok := args[1].(std.Address)\n\t\t\tif !ok {\n\t\t\t\tpanic(\"expected a valid member address\")\n\t\t\t}\n\n\t\t\tif dp.HasRole(member, RoleOwner) {\n\t\t\t\tpanic(\"admins are not allowed to remove the Owner role\")\n\t\t\t}\n\t\t}\n\t}\n\n\tcb(args)\n}\n\nfunc createDefaultPermissions(owner std.Address) *DefaultPermissions {\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.SetSuperRole(RoleOwner)\n\tperms.AddRole(RoleAdmin, PermissionBoardCreate)\n\tperms.AddUser(owner, RoleOwner)\n\treturn perms\n}\n\nfunc assertBoardNameIsNotAddress(s string) {\n\tif std.Address(s).IsValid() {\n\t\tpanic(\"addresses are not allowed as board name\")\n\t}\n}\n\nfunc assertBoardNameBelongsToCaller(name string) {\n\t// When the board name is the name of a registered user\n\t// check that caller is the owner of the name.\n\tuser, _ := users.ResolveName(name)\n\tif user != nil \u0026\u0026 user.Addr() != std.PreviousRealm().Address() {\n\t\tpanic(\"board name is a user name registered to a different user\")\n\t}\n}\n"},{"name":"permissions_default_test.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/urequire\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n)\n\nvar _ Permissions = (*DefaultPermissions)(nil)\n\nfunc TestDefaultPermissionsWithPermission(t *testing.T) {\n\tcases := []struct {\n\t\tname       string\n\t\tuser       std.Address\n\t\tpermission Permission\n\t\targs       Args\n\t\tsetup      func() *DefaultPermissions\n\t\terr        string\n\t\tcalled     bool\n\t}{\n\t\t{\n\t\t\tname:       \"ok\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\tcalled: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with arguments\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\targs:       Args{\"a\", \"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\tcalled: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"no permission\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"unauthorized\",\n\t\t},\n\t\t{\n\t\t\tname:       \"is not a DAO member\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t\terr: \"unauthorized\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar (\n\t\t\t\tcalled bool\n\t\t\t\targs   Args\n\t\t\t)\n\n\t\t\tperms := tc.setup()\n\t\t\tcallback := func(a Args) {\n\t\t\t\targs = a\n\t\t\t\tcalled = true\n\t\t\t}\n\n\t\t\ttestCaseFn := func() {\n\t\t\t\tperms.WithPermission(tc.user, tc.permission, tc.args, callback)\n\t\t\t}\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.PanicsWithMessage(t, tc.err, testCaseFn, \"panic\")\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NotPanics(t, testCaseFn, \"no panic\")\n\t\t\t}\n\n\t\t\turequire.Equal(t, tc.called, called, \"callback called\")\n\t\t\turequire.Equal(t, len(tc.args), len(args), \"args count\")\n\t\t\tfor i, a := range args {\n\t\t\t\tuassert.Equal(t, tc.args[i].(string), a.(string))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsGetUserRoles(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []string\n\t\tsetup func() *DefaultPermissions\n\t}{\n\t\t{\n\t\t\tname:  \"single role\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple roles\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\", \"foo\", \"bar\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddRole(\"bar\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\", \"foo\", \"bar\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"without roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"not a user\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple users\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"bar\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"admin\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\", \"admin\", \"bar\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\troles := perms.GetUserRoles(tc.user)\n\n\t\t\turequire.Equal(t, len(tc.roles), len(roles), \"user role count\")\n\t\t\tfor i, r := range roles {\n\t\t\t\tuassert.Equal(t, tc.roles[i], string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsHasRole(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\trole  Role\n\t\tsetup func() *DefaultPermissions\n\t\twant  bool\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"admin\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"ok with multiple roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"foo\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"user without roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"has no role\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.HasRole(tc.user, tc.role)\n\t\t\tuassert.Equal(t, got, tc.want)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsHasPermission(t *testing.T) {\n\tcases := []struct {\n\t\tname       string\n\t\tuser       std.Address\n\t\tpermission Permission\n\t\tsetup      func() *DefaultPermissions\n\t\twant       bool\n\t}{\n\t\t{\n\t\t\tname:       \"ok\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with multiple users\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with multiple roles\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"other\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddRole(\"baz\", \"other\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\", \"baz\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"no permission\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"other\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.HasPermission(tc.user, tc.permission)\n\t\t\tuassert.Equal(t, got, tc.want)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsAddUser(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []Role\n\t\tsetup func() *DefaultPermissions\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname:  \"single user\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple users\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"a\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"duplicated user\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"user already exists\",\n\t\t},\n\t\t{\n\t\t\tname:  \"duplicated user\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"foo\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"invalid role: foo\",\n\t\t},\n\t\t{\n\t\t\tname: \"already a DAO member\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(\n\t\t\t\t\tcommondao.New(commondao.WithMember(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")),\n\t\t\t\t)\n\t\t\t},\n\t\t\terr: \"user already exists\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\n\t\t\terr := perms.AddUser(tc.user, tc.roles...)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.Error(t, err, \"expected an error\")\n\t\t\t\tuassert.Equal(t, tc.err, err.Error())\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NoError(t, err)\n\t\t\t}\n\n\t\t\troles := perms.GetUserRoles(tc.user)\n\t\t\tuassert.Equal(t, len(tc.roles), len(roles))\n\t\t\tfor i, r := range roles {\n\t\t\t\turequire.Equal(t, string(tc.roles[i]), string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsSetUserRoles(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []Role\n\t\tsetup func() *DefaultPermissions\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname:  \"single role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple roles\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"b\", \"c\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddRole(\"c\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"duplicated role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"c\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddRole(\"c\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\", \"c\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"remove roles\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\", \"b\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"x\", \"a\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"invalid role: x\",\n\t\t},\n\t\t{\n\t\t\tname: \"user not found\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t\terr: \"user not found\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\n\t\t\terr := perms.SetUserRoles(tc.user, tc.roles...)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.True(t, err != nil, \"expected an error\")\n\t\t\t\tuassert.Equal(t, tc.err, err.Error())\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NoError(t, err)\n\t\t\t}\n\n\t\t\troles := perms.GetUserRoles(tc.user)\n\t\t\tuassert.Equal(t, len(tc.roles), len(roles))\n\t\t\tfor i, r := range roles {\n\t\t\t\turequire.Equal(t, string(tc.roles[i]), string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsRemoveUser(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\tsetup func() *DefaultPermissions\n\t\twant  bool\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"user not found\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.RemoveUser(tc.user)\n\t\t\tuassert.Equal(t, tc.want, got)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsIterateUsers(t *testing.T) {\n\tusers := []User{\n\t\t{\n\t\t\tAddress: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tRoles:   []Role{\"foo\"},\n\t\t},\n\t\t{\n\t\t\tAddress: \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\",\n\t\t\tRoles:   []Role{\"foo\", \"bar\"},\n\t\t},\n\t\t{\n\t\t\tAddress: \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\",\n\t\t\tRoles:   []Role{\"bar\"},\n\t\t},\n\t}\n\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.AddRole(\"foo\", \"perm1\")\n\tperms.AddRole(\"bar\", \"perm2\")\n\tfor _, u := range users {\n\t\tperms.AddUser(u.Address, u.Roles...)\n\t}\n\n\tcases := []struct {\n\t\tname               string\n\t\tstart, count, want int\n\t}{\n\t\t{\n\t\t\tname:  \"exceed users count\",\n\t\t\tcount: 50,\n\t\t\twant:  3,\n\t\t},\n\t\t{\n\t\t\tname:  \"exact users count\",\n\t\t\tcount: 3,\n\t\t\twant:  3,\n\t\t},\n\t\t{\n\t\t\tname:  \"two users\",\n\t\t\tstart: 1,\n\t\t\tcount: 2,\n\t\t\twant:  2,\n\t\t},\n\t\t{\n\t\t\tname:  \"one user\",\n\t\t\tstart: 1,\n\t\t\tcount: 1,\n\t\t\twant:  1,\n\t\t},\n\t\t{\n\t\t\tname:  \"no iteration\",\n\t\t\tstart: 50,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar i int\n\t\t\tperms.IterateUsers(0, len(users), func(u User) bool {\n\t\t\t\turequire.True(t, i \u003c len(users), \"expect iterator to respect number of users\")\n\t\t\t\tuassert.Equal(t, users[i].Address, u.Address)\n\n\t\t\t\turequire.Equal(t, len(users[i].Roles), len(u.Roles), \"expect number of roles to match\")\n\t\t\t\tfor j, r := range u.Roles {\n\t\t\t\t\tuassert.Equal(t, string(users[i].Roles[j]), string(u.Roles[j]))\n\t\t\t\t}\n\n\t\t\t\ti++\n\t\t\t})\n\n\t\t\tuassert.Equal(t, i, len(users), \"expect iterator to iterate all users\")\n\t\t})\n\t}\n}\n"},{"name":"post.gno","body":"package boards2\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nconst dateFormat = \"2006-01-02 3:04pm MST\"\n\ntype PostID uint64\n\nfunc (id PostID) String() string {\n\treturn strconv.Itoa(int(id))\n}\n\nfunc (id PostID) Key() string {\n\treturn padZero(uint64(id), 10)\n}\n\n// A Post is a \"thread\" or a \"reply\" depending on context.\n// A thread is a Post of a Board that holds other replies.\ntype Post struct {\n\tboard         *Board\n\tid            PostID\n\tcreator       std.Address\n\ttitle         string // optional\n\tbody          string\n\tisHidden      bool\n\tisReadonly    bool\n\treplies       avl.Tree // Post.id -\u003e *Post\n\trepliesAll    avl.Tree // Post.id -\u003e *Post (all replies, for top-level posts)\n\treposts       avl.Tree // Board.id -\u003e Post.id\n\tflags         []Flag\n\tthreadID      PostID  // original Post.id\n\tparentID      PostID  // parent Post.id (if reply or repost)\n\trepostBoardID BoardID // original Board.id (if repost)\n\trepostsCount  uint64\n\tcreatedAt     time.Time\n\tupdatedAt     time.Time\n}\n\nfunc newPost(board *Board, id PostID, creator std.Address, title, body string, threadID, parentID PostID, repostBoardID BoardID) *Post {\n\treturn \u0026Post{\n\t\tboard:         board,\n\t\tid:            id,\n\t\tcreator:       creator,\n\t\ttitle:         title,\n\t\tbody:          body,\n\t\treplies:       avl.Tree{},\n\t\trepliesAll:    avl.Tree{},\n\t\treposts:       avl.Tree{},\n\t\tthreadID:      threadID,\n\t\tparentID:      parentID,\n\t\trepostBoardID: repostBoardID,\n\t\tcreatedAt:     time.Now(),\n\t}\n}\n\nfunc (post *Post) IsRepost() bool {\n\treturn post.repostBoardID != 0\n}\n\nfunc (post *Post) IsThread() bool {\n\t// repost threads also have parent ID\n\treturn post.parentID == 0 || post.IsRepost()\n}\n\nfunc (post *Post) GetBoard() *Board {\n\treturn post.board\n}\n\nfunc (post *Post) GetPostID() PostID {\n\treturn post.id\n}\n\nfunc (post *Post) GetParentID() PostID {\n\treturn post.parentID\n}\n\nfunc (post *Post) GetRepostBoardID() BoardID {\n\treturn post.repostBoardID\n}\n\nfunc (post *Post) GetCreator() std.Address {\n\treturn post.creator\n}\n\nfunc (post *Post) GetTitle() string {\n\treturn post.title\n}\n\nfunc (post *Post) GetBody() string {\n\treturn post.body\n}\n\nfunc (post *Post) GetCreatedAt() time.Time {\n\treturn post.createdAt\n}\n\nfunc (post *Post) GetUpdatedAt() time.Time {\n\treturn post.updatedAt\n}\n\nfunc (post *Post) AddFlag(flag Flag) bool {\n\t// TODO: sort flags for fast search in case of big thresholds\n\tfor _, v := range post.flags {\n\t\tif v.User == flag.User {\n\t\t\treturn false\n\t\t}\n\t}\n\n\tpost.flags = append(post.flags, flag)\n\treturn true\n}\n\nfunc (post *Post) FlagsCount() int {\n\treturn len(post.flags)\n}\n\nfunc (post *Post) SetVisible(isVisible bool) {\n\tpost.isHidden = !isVisible\n}\n\nfunc (post *Post) IsHidden() bool {\n\treturn post.isHidden\n}\n\nfunc (post *Post) SetReadonly(isReadonly bool) {\n\tpost.isReadonly = isReadonly\n}\n\nfunc (post *Post) IsReadonly() bool {\n\treturn post.isReadonly\n}\n\nfunc (post *Post) AddReply(creator std.Address, body string) *Post {\n\tboard := post.board\n\tpid := board.incGetPostID()\n\tpKey := pid.Key()\n\treply := newPost(board, pid, creator, \"\", body, post.threadID, post.id, 0)\n\t// TODO: Figure out how to remove this redundancy of data \"replies==repliesAll\" in threads\n\tpost.replies.Set(pKey, reply)\n\tif post.threadID == post.id {\n\t\tpost.repliesAll.Set(pKey, reply)\n\t} else {\n\t\tthread, _ := board.GetThread(post.threadID)\n\t\tthread.repliesAll.Set(pKey, reply)\n\t}\n\treturn reply\n}\n\nfunc (post *Post) Update(title string, body string) {\n\tpost.title = title\n\tpost.body = body\n\tpost.updatedAt = time.Now()\n}\n\nfunc (post *Post) HasReplies() bool {\n\treturn post.replies.Size() \u003e 0\n}\n\nfunc (thread *Post) GetReply(pid PostID) (_ *Post, found bool) {\n\tv, found := thread.repliesAll.Get(pid.Key())\n\tif !found {\n\t\treturn nil, false\n\t}\n\treturn v.(*Post), true\n}\n\nfunc (post *Post) AddRepostTo(creator std.Address, repost *Post, dst *Board) {\n\tif !post.IsThread() {\n\t\tpanic(\"cannot repost non-thread post\")\n\t}\n\n\tpost.repostsCount++\n\tdst.threads.Set(repost.id.Key(), repost)\n\tpost.reposts.Set(dst.id.Key(), repost.id)\n}\n\nfunc (post *Post) DeleteReply(replyID PostID) error {\n\tif !post.IsThread() {\n\t\t// TODO: Allow removing replies from parent replies too\n\t\tpanic(\"cannot delete reply from a non-thread post\")\n\t}\n\n\tif post.id == replyID {\n\t\treturn errors.New(\"expected an ID of an inner reply\")\n\t}\n\n\tkey := replyID.Key()\n\tv, removed := post.repliesAll.Remove(key)\n\tif !removed {\n\t\treturn errors.New(\"reply not found in thread\")\n\t}\n\n\t// TODO: Shouldn't reply be hidden instead of deleted? Maybe replace reply by a deleted message.\n\treply := v.(*Post)\n\tif reply.parentID != post.id {\n\t\tparent, _ := post.GetReply(reply.parentID)\n\t\tparent.replies.Remove(key)\n\t} else {\n\t\tpost.replies.Remove(key)\n\t}\n\treturn nil\n}\n\nfunc (post *Post) GetSummary() string {\n\treturn summaryOf(post.body, 80)\n}\n\nfunc (post *Post) GetURL() string {\n\tif post.IsThread() {\n\t\treturn post.board.GetURLFromThreadID(post.id)\n\t}\n\treturn post.board.GetURLFromReplyID(post.threadID, post.id)\n}\n\nfunc (post *Post) GetReplyFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"CreateReply\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"replyID\", \"0\",\n\t\t\t\"body\", \"\",\n\t\t)\n\t}\n\treturn txlink.Call(\n\t\t\"CreateReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t\t\"body\", \"\",\n\t)\n}\n\nfunc (post *Post) GetRepostFormURL() string {\n\treturn txlink.Call(\n\t\t\"CreateRepost\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.id.String(),\n\t\t\"title\", \"\",\n\t\t\"body\", \"\",\n\t\t\"destinationBoardID\", \"\",\n\t)\n}\n\nfunc (post *Post) GetDeleteFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"DeleteThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t)\n\t}\n\treturn txlink.Call(\n\t\t\"DeleteReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t)\n}\n\nfunc (post *Post) GetEditFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"EditThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"title\", post.GetTitle(),\n\t\t\t\"body\", post.GetBody(),\n\t\t)\n\t}\n\n\treturn txlink.Call(\n\t\t\"EditReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t\t\"body\", post.GetBody(),\n\t)\n}\n\nfunc (post *Post) GetFlagFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"FlagThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"reason\", \"\",\n\t\t)\n\t}\n\n\treturn txlink.Call(\n\t\t\"FlagReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t\t\"reason\", \"\",\n\t)\n}\n\nfunc (post *Post) RenderSummary() string {\n\tvar (\n\t\tb       strings.Builder\n\t\tpostURL = post.GetURL()\n\t\ttitle   = post.title\n\t)\n\n\tb.WriteString(\"**≡ \" + newLink(summaryOf(title, 80), postURL) + \"**  \\n\")\n\tb.WriteString(\"Created by \" + newUserLink(post.creator) + \" on \" + post.createdAt.Format(dateFormat))\n\tb.WriteString(\"  \\n**\")\n\tb.WriteString(strconv.Itoa(post.repliesAll.Size()) + \" replies • \")\n\tb.WriteString(strconv.Itoa(post.reposts.Size()) + \" reposts**\\n\")\n\treturn b.String()\n}\n\nfunc (post *Post) renderSourcePost(indent string) (string, *Post) {\n\tif !post.IsRepost() {\n\t\treturn \"\", nil\n\t}\n\n\tindent += \"\u003e \"\n\n\t// TODO: figure out a way to decouple posts from a global storage.\n\tboard, ok := getBoard(post.repostBoardID)\n\tif !ok {\n\t\treturn indentBody(indent, \"*⚠ Source board has been deleted*\\n\\n\"), nil\n\t}\n\n\tsrcPost, ok := board.GetThread(post.parentID)\n\tif !ok {\n\t\treturn indentBody(indent, \"*⚠ Source post has been deleted*\\n\\n\"), nil\n\t}\n\n\tif srcPost.isHidden {\n\t\treturn indentBody(indent, \"*⚠ Source post has been flagged as inappropriate*\\n\\n\"), nil\n\t}\n\n\treturn indentBody(indent, srcPost.GetSummary()) + \"\\n\\n\", srcPost\n}\n\n// renderPostContent renders post text content (including repost body).\n// Function will dump a predefined message instead of a body if post is hidden.\nfunc (post *Post) renderPostContent(sb *strings.Builder, indent string, levels int) {\n\tif post.isHidden {\n\t\t// Flagged comment should be hidden, but replies still visible (see: #3480)\n\t\t// Flagged threads will be hidden by render function caller.\n\t\tsb.WriteString(indentBody(indent, \"_⚠ Reply is hidden as it has been flagged as inappropriate_\"))\n\t\tsb.WriteString(\"\\n\")\n\t\treturn\n\t}\n\n\tsrcContent, srcPost := post.renderSourcePost(indent)\n\tif post.IsRepost() \u0026\u0026 srcPost != nil {\n\t\tsb.WriteString(\"  \\nThis thread is a repost of [another thread](\" + srcPost.GetURL() + \"): \\n\")\n\t}\n\n\tsb.WriteString(srcContent)\n\n\tif post.IsRepost() \u0026\u0026 srcPost == nil \u0026\u0026 len(post.body) \u003e 0 {\n\t\t// Add a newline to separate source deleted message from repost body content\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\tsb.WriteString(indentBody(indent, post.body))\n\tsb.WriteString(\"\\n\")\n\n\tif post.IsThread() {\n\t\t// Split content and controls for threads.\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\t// Buttons \u0026 counters\n\tsb.WriteString(indent)\n\tif !post.IsThread() {\n\t\tsb.WriteString(\"  \\n\")\n\t\tsb.WriteString(indent)\n\t}\n\n\tsb.WriteString(\"Created by \")\n\tsb.WriteString(newUserLink(post.creator))\n\tsb.WriteString(\" on \")\n\tsb.WriteString(post.createdAt.Format(dateFormat))\n\n\t// Add a reply view link to each top level reply\n\tif !post.IsThread() {\n\t\tsb.WriteString(\", \")\n\t\tsb.WriteString(newLink(\"#\"+post.id.String(), post.GetURL()))\n\t}\n\n\tif post.repostsCount \u003e 0 {\n\t\tsb.WriteString(\", \")\n\t\tsb.WriteString(strconv.FormatUint(post.repostsCount, 10))\n\t\tsb.WriteString(\" repost(s)\")\n\t}\n\n\tsb.WriteString(\"  \\n\")\n\tsb.WriteString(newLink(\"Flag\", post.GetFlagFormURL()))\n\n\tif post.IsThread() {\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Repost\", post.GetRepostFormURL()))\n\t}\n\n\tisReadonly := post.IsReadonly() || post.GetBoard().IsReadonly()\n\tif !isReadonly {\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Reply\", post.GetReplyFormURL()))\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Edit\", post.GetEditFormURL()))\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Delete\", post.GetDeleteFormURL()))\n\t}\n\n\tif levels == 0 {\n\t\tsb.WriteString(\" • \")\n\t\tif post.IsThread() {\n\t\t\tsb.WriteString(newLink(\"Show all Replies\", post.board.GetURLFromThreadID(post.GetPostID())))\n\t\t} else {\n\t\t\tsb.WriteString(newLink(\"View Thread\", post.board.GetURLFromThreadID(post.threadID)))\n\t\t}\n\t}\n\n\tsb.WriteString(\" \\n\")\n}\n\nfunc (post *Post) Render(path string, indent string, levels int) string {\n\tif post == nil {\n\t\treturn \"nil post\"\n\t}\n\n\t// TODO: pass a builder as arg into Render.\n\tvar sb strings.Builder\n\n\t// Thread reposts might not have a title, if so get title from source thread\n\ttitle := post.title\n\tif post.IsRepost() \u0026\u0026 title == \"\" {\n\t\tif board, ok := getBoard(post.repostBoardID); ok {\n\t\t\tif src, ok := board.GetThread(post.parentID); ok {\n\t\t\t\ttitle = src.GetTitle()\n\t\t\t}\n\t\t}\n\t}\n\n\tsb.WriteString(indent)\n\tif title != \"\" { // Replies don't have a title\n\t\tsb.WriteString(\"## \" + title + \"\\n\")\n\t}\n\tsb.WriteString(indent + \"\\n\")\n\n\tpost.renderPostContent(\u0026sb, indent, levels)\n\n\tif post.replies.Size() == 0 {\n\t\treturn sb.String()\n\t}\n\n\t// XXX: This triggers for reply views\n\tif levels == 0 {\n\t\tsb.WriteString(indent + \"\\n\")\n\t\tsb.WriteString(indent)\n\t\tsb.WriteString(\"\\n\")\n\t\treturn sb.String()\n\t}\n\n\tif path != \"\" {\n\t\tsb.WriteString(post.renderTopLevelReplies(path, indent, levels-1))\n\t} else {\n\t\tsb.WriteString(post.renderSubReplies(indent, levels-1))\n\t}\n\treturn sb.String()\n}\n\nfunc (post *Post) renderTopLevelReplies(path, indent string, levels int) string {\n\tp, err := pager.New(path, post.replies.Size(), pager.WithPageSize(pageSizeReplies))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tvar (\n\t\tb              strings.Builder\n\t\tcommentsIndent = indent + \"\u003e \"\n\t)\n\n\trender := func(_ string, v any) bool {\n\t\treply := v.(*Post)\n\n\t\tb.WriteString(indent)\n\t\tb.WriteString(\"\\n\")\n\t\tb.WriteString(reply.Render(\"\", commentsIndent, levels-1))\n\t\treturn false\n\t}\n\n\tb.WriteString(\"\\n\\n---\\nSort by: \")\n\tr := realmpath.Parse(path)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tb.WriteString(newLink(\"newest first\", r.String()))\n\t\tb.WriteString(\"\\n\")\n\t\tpost.replies.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tb.WriteString(newLink(\"oldest first\", r.String()))\n\t\tb.WriteString(\"\\n\")\n\t\tpost.replies.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tb.WriteString(\"\\n---\\n\")\n\t\tb.WriteString(pager.Picker(p))\n\t}\n\n\treturn b.String()\n}\n\nfunc (post *Post) renderSubReplies(indent string, levels int) string {\n\tvar (\n\t\tb              strings.Builder\n\t\tcommentsIndent = indent + \"\u003e \"\n\t)\n\n\tpost.replies.Iterate(\"\", \"\", func(_ string, v any) bool {\n\t\treply := v.(*Post)\n\n\t\tb.WriteString(indent)\n\t\tb.WriteString(\"\\n\")\n\t\tb.WriteString(reply.Render(\"\", commentsIndent, levels-1))\n\t\treturn false\n\t})\n\n\treturn b.String()\n}\n\nfunc (post *Post) RenderInner() string {\n\tif post.IsThread() {\n\t\tpanic(\"unexpected thread\")\n\t}\n\n\tvar (\n\t\ts         string\n\t\tthreadID  = post.threadID\n\t\tthread, _ = post.board.GetThread(threadID) // TODO: This seems redundant (post == thread)\n\t)\n\n\t// Fully render parent if it's not a repost.\n\tif !post.IsRepost() {\n\t\tvar (\n\t\t\tparent   *Post\n\t\t\tparentID = post.parentID\n\t\t)\n\n\t\tif thread.id == parentID {\n\t\t\tparent = thread\n\t\t} else {\n\t\t\tparent, _ = thread.GetReply(parentID)\n\t\t}\n\n\t\ts += parent.Render(\"\", \"\", 0) + \"\\n\"\n\t}\n\n\ts += post.Render(\"\", \"\u003e \", 5)\n\treturn s\n}\n"},{"name":"post_test.gno","body":"package boards2\n\nimport (\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nfunc TestPostUpdate(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tboard := newBoard(1, \"test123\", addr, perms)\n\tcreator := testutils.TestAddress(\"creator\")\n\tpost := newPost(board, 1, creator, \"Title\", \"Body\", 1, 0, 0)\n\ttitle := \"New Title\"\n\tbody := \"New body\"\n\n\tpost.Update(title, body)\n\n\tuassert.Equal(t, title, post.GetTitle())\n\tuassert.Equal(t, body, post.GetBody())\n\tuassert.False(t, post.GetUpdatedAt().IsZero())\n}\n\nfunc TestPostAddFlag(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tpost := createTestThread(t)\n\n\tflag := Flag{\n\t\tUser:   addr,\n\t\tReason: \"foobar\",\n\t}\n\tuassert.True(t, post.AddFlag(flag))\n\tuassert.False(t, post.AddFlag(flag), \"should reject flag from duplicate user\")\n\tuassert.Equal(t, post.FlagsCount(), 1)\n}\n\nfunc TestPostSetVisible(t *testing.T) {\n\tpost := createTestThread(t)\n\tuassert.False(t, post.IsHidden(), \"post should be visible by default\")\n\n\tpost.SetVisible(false)\n\tuassert.True(t, post.IsHidden(), \"post should be hidden\")\n\n\tpost.SetVisible(true)\n\tuassert.False(t, post.IsHidden(), \"post should be visible\")\n}\n\nfunc TestPostAddRepostTo(t *testing.T) {\n\t// TODO: Improve this unit test\n\taddr := testutils.TestAddress(\"creatorDstBoard\")\n\tperms := createDefaultBoardPermissions(addr)\n\tcases := []struct {\n\t\tname, title, body string\n\t\tdstBoard          *Board\n\t\tthread            *Post\n\t\tsetup             func() *Post\n\t\terr               string\n\t}{\n\t\t{\n\t\t\tname:     \"repost thread\",\n\t\t\ttitle:    \"Repost Title\",\n\t\t\tbody:     \"Repost body\",\n\t\t\tdstBoard: newBoard(42, \"dst123\", addr, perms),\n\t\t\tsetup:    func() *Post { return createTestThread(t) },\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid repost from reply\",\n\t\t\tsetup: func() *Post { return createTestReply(t) },\n\t\t\terr:   \"cannot repost non-thread post\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar (\n\t\t\t\trepost  *Post\n\t\t\t\tcreator = testutils.TestAddress(\"repostCreator\")\n\t\t\t\tthread  = tc.setup()\n\t\t\t)\n\n\t\t\tcreateRepost := func() {\n\t\t\t\tvar repostId PostID\n\t\t\t\tif tc.dstBoard != nil {\n\t\t\t\t\trepostId = tc.dstBoard.incGetPostID()\n\t\t\t\t}\n\n\t\t\t\trepost = newPost(tc.dstBoard, repostId, creator, tc.title, tc.body, repostId, thread.GetPostID(), thread.GetBoard().GetID())\n\t\t\t\tthread.AddRepostTo(creator, repost, tc.dstBoard)\n\t\t\t}\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\tuassert.PanicsWithMessage(t, tc.err, createRepost)\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\tuassert.NotPanics(t, createRepost)\n\t\t\t}\n\n\t\t\tr, found := tc.dstBoard.GetThread(repost.GetPostID())\n\t\t\tuassert.True(t, found)\n\t\t\tuassert.True(t, repost == r)\n\t\t\tuassert.Equal(t, tc.title, repost.GetTitle())\n\t\t\tuassert.Equal(t, tc.body, repost.GetBody())\n\t\t\tuassert.Equal(t, uint(thread.GetBoard().GetID()), uint(repost.GetRepostBoardID()))\n\t\t})\n\t}\n}\n\nfunc TestNewThread(t *testing.T) {\n\tcreator := testutils.TestAddress(\"creator\")\n\ttitle := \"Test Title\"\n\tbody := strings.Repeat(\"A\", 82)\n\tboardID := BoardID(1)\n\tthreadID := PostID(42)\n\tboardName := \"test123\"\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(boardID, boardName, creator, perms)\n\turl := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2:%s/%d\",\n\t\tboardName,\n\t\tuint(threadID),\n\t)\n\treplyURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=CreateReply\u0026boardID=%d\u0026body=\u0026replyID=0\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\teditURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=EditThread\u0026boardID=%d\u0026body=%s\u0026threadID=%d\u0026title=%s\",\n\t\tuint(boardID),\n\t\tbody,\n\t\tuint(threadID),\n\t\tstrings.ReplaceAll(title, \" \", \"+\"),\n\t)\n\trepostURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=CreateRepost\u0026boardID=%d\u0026body=\u0026destinationBoardID=\u0026threadID=%d\u0026title=\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\tdeleteURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=DeleteThread\u0026boardID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\tflagURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=FlagThread\u0026boardID=%d\u0026reason=\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\n\tthread := newPost(board, threadID, creator, title, body, threadID, 0, 0)\n\n\tuassert.True(t, thread.IsThread())\n\tuassert.Equal(t, uint(threadID), uint(thread.GetPostID()))\n\tuassert.False(t, thread.GetCreatedAt().IsZero())\n\tuassert.True(t, thread.GetUpdatedAt().IsZero())\n\tuassert.Equal(t, title, thread.GetTitle())\n\tuassert.Equal(t, body[:77]+\"...\", thread.GetSummary())\n\tuassert.False(t, thread.HasReplies())\n\tuassert.Equal(t, url, thread.GetURL())\n\tuassert.Equal(t, replyURL, thread.GetReplyFormURL())\n\tuassert.Equal(t, editURL, thread.GetEditFormURL())\n\tuassert.Equal(t, repostURL, thread.GetRepostFormURL())\n\tuassert.Equal(t, deleteURL, thread.GetDeleteFormURL())\n\tuassert.Equal(t, flagURL, thread.GetFlagFormURL())\n}\n\nfunc TestThreadAddReply(t *testing.T) {\n\treplier := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\tthreadID := uint(thread.GetPostID())\n\tbody := \"A reply\"\n\n\treply := thread.AddReply(replier, body)\n\n\tr, found := thread.GetReply(reply.GetPostID())\n\tuassert.True(t, found)\n\tuassert.True(t, reply == r)\n\tuassert.Equal(t, threadID+1, uint(reply.GetPostID()))\n\tuassert.Equal(t, reply.GetCreator(), replier)\n\tuassert.Equal(t, reply.GetBody(), body)\n\tuassert.True(t, thread.HasReplies())\n}\n\nfunc TestThreadGetReply(t *testing.T) {\n\tcases := []struct {\n\t\tname   string\n\t\tthread *Post\n\t\tsetup  func(thread *Post) (replyID PostID)\n\t\tfound  bool\n\t}{\n\t\t{\n\t\t\tname:   \"found\",\n\t\t\tthread: createTestThread(t),\n\t\t\tsetup: func(thread *Post) PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t\tfound: true,\n\t\t},\n\t\t{\n\t\t\tname:   \"not found\",\n\t\t\tthread: createTestThread(t),\n\t\t\tsetup:  func(*Post) PostID { return 42 },\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup(tc.thread)\n\n\t\t\treply, found := tc.thread.GetReply(replyID)\n\n\t\t\tuassert.Equal(t, tc.found, found)\n\t\t\tif reply != nil {\n\t\t\t\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestThreadDeleteReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tcases := []struct {\n\t\tname  string\n\t\tsetup func() PostID\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"ok nested\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.AddReply(testutils.TestAddress(\"replier2\"), \"\").GetPostID()\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid\",\n\t\t\tsetup: func() PostID { return thread.GetPostID() },\n\t\t\terr:   \"expected an ID of an inner reply\",\n\t\t},\n\t\t{\n\t\t\tname:  \"not found\",\n\t\t\tsetup: func() PostID { return 42 },\n\t\t\terr:   \"reply not found in thread\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup()\n\n\t\t\terr := thread.DeleteReply(replyID)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\tuassert.ErrorContains(t, err, tc.err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tuassert.NoError(t, err)\n\t\t\t_, found := thread.GetReply(replyID)\n\t\t\tuassert.False(t, found)\n\t\t})\n\t}\n}\n\nfunc TestThreadRenderSummary(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestThreadRender(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestThreadRenderInner(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestNewReply(t *testing.T) {\n\tcreator := testutils.TestAddress(\"creator\")\n\tbody := strings.Repeat(\"A\", 82)\n\tboardID := BoardID(1)\n\tthreadID := PostID(42)\n\tparentID := PostID(1)\n\treplyID := PostID(2)\n\tboardName := \"test123\"\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(boardID, boardName, creator, perms)\n\turl := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2:%s/%d/%d\",\n\t\tboardName,\n\t\tuint(threadID),\n\t\tuint(replyID),\n\t)\n\treplyURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=CreateReply\u0026boardID=%d\u0026body=\u0026replyID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(replyID),\n\t\tuint(threadID),\n\t)\n\tdeleteURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=DeleteReply\u0026boardID=%d\u0026replyID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(replyID),\n\t\tuint(threadID),\n\t)\n\n\treply := newPost(board, replyID, creator, \"\", body, threadID, parentID, 0)\n\n\tuassert.False(t, reply.IsThread())\n\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\tuassert.False(t, reply.GetCreatedAt().IsZero())\n\tuassert.True(t, reply.GetUpdatedAt().IsZero())\n\tuassert.False(t, reply.HasReplies())\n\tuassert.Equal(t, body[:77]+\"...\", reply.GetSummary())\n\tuassert.Equal(t, url, reply.GetURL())\n\tuassert.Equal(t, replyURL, reply.GetReplyFormURL())\n\tuassert.Equal(t, deleteURL, reply.GetDeleteFormURL())\n}\n\nfunc TestReplyAddReply(t *testing.T) {\n\treplier := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"parentReplier\"), \"\")\n\tparentReplyID := uint(parentReply.GetPostID())\n\tbody := \"A child reply\"\n\n\treply := parentReply.AddReply(replier, body)\n\n\tr, found := thread.GetReply(reply.GetPostID())\n\tuassert.True(t, found)\n\tuassert.True(t, reply == r)\n\tuassert.Equal(t, parentReplyID, uint(reply.GetParentID()))\n\tuassert.Equal(t, parentReplyID+1, uint(reply.GetPostID()))\n\tuassert.Equal(t, reply.GetCreator(), replier)\n\tuassert.Equal(t, reply.GetBody(), body)\n\tuassert.False(t, reply.HasReplies())\n\tuassert.True(t, parentReply.HasReplies())\n}\n\nfunc TestReplyGetReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"parentReplier\"), \"\")\n\tcases := []struct {\n\t\tname  string\n\t\tsetup func() PostID\n\t\tfound bool\n\t}{\n\t\t{\n\t\t\tname: \"found\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := parentReply.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t\tfound: true,\n\t\t},\n\t\t{\n\t\t\tname:  \"not found\",\n\t\t\tsetup: func() PostID { return 42 },\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup()\n\n\t\t\treply, found := thread.GetReply(replyID)\n\n\t\t\tuassert.Equal(t, tc.found, found)\n\t\t\tif reply != nil {\n\t\t\t\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestReplyDeleteReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\treply := parentReply.AddReply(testutils.TestAddress(\"replier2\"), \"\")\n\n\t// NOTE: Deleting a reply from a parent reply should eventually be suported\n\tuassert.PanicsWithMessage(t, \"cannot delete reply from a non-thread post\", func() {\n\t\tparentReply.DeleteReply(reply.GetPostID())\n\t})\n}\n\nfunc TestReplyRender(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc createTestThread(t *testing.T) *Post {\n\tt.Helper()\n\n\tcreator := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(1, \"test_board_123\", creator, perms)\n\treturn board.AddThread(creator, \"Title\", \"Body\")\n}\n\nfunc createTestReply(t *testing.T) *Post {\n\tt.Helper()\n\n\tcreator := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\treturn thread.AddReply(creator, \"Test message\")\n}\n"},{"name":"public.gno","body":"package boards2\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nconst (\n\t// MaxBoardNameLength defines the maximum length allowed for board names.\n\tMaxBoardNameLength = 50\n\n\t// MaxThreadTitleLength defines the maximum length allowed for thread titles.\n\tMaxThreadTitleLength = 100\n\n\t// MaxReplyLength defines the maximum length allowed for replies.\n\tMaxReplyLength = 300\n)\n\nvar (\n\treBoardName = regexp.MustCompile(`(?i)^[a-z]+[a-z0-9_\\-]{2,50}$`)\n\n\t// Minimalistic Markdown line prefix checks that if allowed would\n\t// break the current UI when submitting a reply. It denies replies\n\t// with headings, blockquotes or horizontal lines.\n\treDeniedReplyLinePrefixes = regexp.MustCompile(`(?m)^\\s*(#|---|\u003e)+`)\n)\n\n// SetHelp sets or updates boards realm help content.\nfunc SetHelp(content string) {\n\tcontent = strings.TrimSpace(content)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{content}\n\tgPerms.WithPermission(caller, PermissionRealmHelp, args, func(Args) {\n\t\tgHelp = content\n\t})\n}\n\n// SetPermissions sets a permissions implementation for boards2 realm or a board.\nfunc SetPermissions(bid BoardID, p Permissions) {\n\tassertRealmIsNotLocked()\n\n\tif p == nil {\n\t\tpanic(\"permissions is required\")\n\t}\n\n\tif bid != 0 {\n\t\tassertBoardExists(bid)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{bid}\n\tgPerms.WithPermission(caller, PermissionPermissionsUpdate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\n\t\t// When board ID is zero it means that realm permissions are being updated\n\t\tif bid == 0 {\n\t\t\tgPerms = p\n\n\t\t\tstd.Emit(\n\t\t\t\t\"RealmPermissionsUpdated\",\n\t\t\t\t\"caller\", caller.String(),\n\t\t\t)\n\t\t\treturn\n\t\t}\n\n\t\t// Otherwise update the permissions of a single board\n\t\tboard := mustGetBoard(bid)\n\t\tboard.perms = p\n\n\t\tstd.Emit(\n\t\t\t\"BoardPermissionsUpdated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", bid.String(),\n\t\t)\n\t})\n}\n\n// SetRealmNotice sets a notice to be displayed globally by the realm.\n// An empty message removes the realm notice.\nfunc SetRealmNotice(message string) {\n\tmessage = strings.TrimSpace(message)\n\tcaller := std.PreviousRealm().Address()\n\tgPerms.WithPermission(caller, PermissionRealmNotice, nil, func(Args) {\n\t\tgNotice = message\n\n\t\tstd.Emit(\n\t\t\t\"RealmNoticeChanged\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"message\", message,\n\t\t)\n\t})\n}\n\n// GetBoardIDFromName searches a board by name and returns it's ID.\nfunc GetBoardIDFromName(name string) (_ BoardID, found bool) {\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\treturn 0, false\n\t}\n\treturn v.(*Board).id, true\n}\n\n// CreateBoard creates a new board.\nfunc CreateBoard(name string) BoardID {\n\tassertRealmIsNotLocked()\n\n\tname = strings.TrimSpace(name)\n\tassertIsValidBoardName(name)\n\tassertBoardNameNotExists(name)\n\n\tcaller := std.PreviousRealm().Address()\n\tid := incGetBoardID()\n\targs := Args{name, id}\n\tgPerms.WithPermission(caller, PermissionBoardCreate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardNameNotExists(name)\n\n\t\tperms := createDefaultBoardPermissions(caller)\n\t\tboard := newBoard(id, name, caller, perms)\n\t\tgBoardsByID.Set(id.Key(), board)\n\t\tgBoardsByName.Set(name, board)\n\n\t\tstd.Emit(\n\t\t\t\"BoardCreated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", id.String(),\n\t\t\t\"name\", name,\n\t\t)\n\t})\n\treturn id\n}\n\n// RenameBoard changes the name of an existing board.\n//\n// A history of previous board names is kept when boards are renamed.\n// Because of that boards are also accesible using previous name(s).\nfunc RenameBoard(name, newName string) {\n\tassertRealmIsNotLocked()\n\n\tnewName = strings.TrimSpace(newName)\n\tassertIsValidBoardName(newName)\n\tassertBoardNameNotExists(newName)\n\n\tboard := mustGetBoardByName(name)\n\tassertBoardIsNotFrozen(board)\n\n\tbid := board.GetID()\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{bid, name, newName}\n\tboard.perms.WithPermission(caller, PermissionBoardRename, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardNameNotExists(newName)\n\n\t\tboard := mustGetBoard(bid)\n\t\tboard.aliases = append(board.aliases, board.name)\n\t\tboard.name = newName\n\n\t\t// Index board for the new name keeping previous indexes for older names\n\t\tgBoardsByName.Set(newName, board)\n\n\t\tstd.Emit(\n\t\t\t\"BoardRenamed\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", bid.String(),\n\t\t\t\"name\", name,\n\t\t\t\"newName\", newName,\n\t\t)\n\t})\n}\n\n// CreateThread creates a new thread within a board.\nfunc CreateThread(boardID BoardID, title, body string) PostID {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tbody = strings.TrimSpace(body)\n\tassertBodyIsNotEmpty(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionThreadCreate)\n\n\tthread := board.AddThread(caller, title, body)\n\n\tstd.Emit(\n\t\t\"ThreadCreated\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", thread.GetPostID().String(),\n\t\t\"title\", title,\n\t)\n\n\treturn thread.id\n}\n\n// CreateReply creates a new comment or reply within a thread.\n//\n// The value of `replyID` is only required when creating a reply of another reply.\nfunc CreateReply(boardID BoardID, threadID, replyID PostID, body string) PostID {\n\tassertRealmIsNotLocked()\n\n\tbody = strings.TrimSpace(body)\n\tassertReplyBodyIsValid(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionReplyCreate)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\tassertThreadIsNotFrozen(thread)\n\n\tvar reply *Post\n\tif replyID == 0 {\n\t\t// When the parent reply is the thread just add reply to thread\n\t\treply = thread.AddReply(caller, body)\n\t} else {\n\t\t// Try to get parent reply and add a new child reply\n\t\tparent := mustGetReply(thread, replyID)\n\t\tif parent.IsHidden() || parent.IsReadonly() {\n\t\t\tpanic(\"replying to a hidden or frozen reply is not allowed\")\n\t\t}\n\n\t\treply = parent.AddReply(caller, body)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyCreate\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", reply.GetPostID().String(),\n\t)\n\n\treturn reply.id\n}\n\n// CreateRepost reposts a thread into another board.\nfunc CreateRepost(boardID BoardID, threadID PostID, title, body string, destinationBoardID BoardID) PostID {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tcaller := std.PreviousRealm().Address()\n\tdst := mustGetBoard(destinationBoardID)\n\tassertBoardIsNotFrozen(dst)\n\tassertHasBoardPermission(dst, caller, PermissionThreadRepost)\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\tif thread.IsRepost() {\n\t\tpanic(\"reposting a thread that is a repost is not allowed\")\n\t}\n\n\trepostId := dst.incGetPostID()\n\tbody = strings.TrimSpace(body)\n\trepost := newPost(dst, repostId, caller, title, body, repostId, thread.GetPostID(), thread.GetBoard().GetID())\n\tthread.AddRepostTo(caller, repost, dst)\n\n\tstd.Emit(\n\t\t\"Repost\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"destinationBoardID\", destinationBoardID.String(),\n\t\t\"title\", title,\n\t)\n\n\treturn repostId\n}\n\n// DeleteThread deletes a thread from a board.\n//\n// Threads can be deleted by the users who created them or otherwise by users with special permissions.\nfunc DeleteThread(boardID BoardID, threadID PostID) {\n\t// Council members should always be able to delete\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner) // TODO: Add DeleteThread filetest cases for realm owners\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\n\tif !isRealmOwner {\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertThreadIsNotFrozen(thread)\n\n\t\tif caller != thread.GetCreator() {\n\t\t\tassertHasBoardPermission(board, caller, PermissionThreadDelete)\n\t\t}\n\t}\n\n\t// Hard delete thread and all its replies\n\tboard.DeleteThread(threadID)\n\n\tstd.Emit(\n\t\t\"ThreadDeleted\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t)\n}\n\n// DeleteReply deletes a reply from a thread.\n//\n// Replies can be deleted by the users who created them or otherwise by users with special permissions.\n// Soft deletion is used when the deleted reply contains sub replies, in which case the reply content\n// is replaced by a text informing that reply has been deleted to avoid deleting sub-replies.\nfunc DeleteReply(boardID BoardID, threadID, replyID PostID) {\n\t// Council members should always be able to delete\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner) // TODO: Add DeleteReply filetest cases for realm owners\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\treply := mustGetReply(thread, replyID)\n\n\tif !isRealmOwner {\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertThreadIsNotFrozen(thread)\n\t\tassertReplyIsVisible(reply)\n\t\tassertReplyIsNotFrozen(reply)\n\n\t\tif caller != reply.GetCreator() {\n\t\t\tassertHasBoardPermission(board, caller, PermissionReplyDelete)\n\t\t}\n\t}\n\n\t// Soft delete reply by changing its body when it contains\n\t// sub-replies, otherwise hard delete it.\n\tif reply.HasReplies() {\n\t\treply.Update(reply.GetTitle(), \"This reply has been deleted\")\n\t} else {\n\t\tthread.DeleteReply(replyID)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyDeleted\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t)\n}\n\n// EditThread updates the title and body of thread.\n//\n// Threads can be updated by the users who created them or otherwise by users with special permissions.\nfunc EditThread(boardID BoardID, threadID PostID, title, body string) {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\tbody = strings.TrimSpace(body)\n\tif !thread.IsRepost() {\n\t\tassertBodyIsNotEmpty(body)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tif caller != thread.GetCreator() {\n\t\tassertHasBoardPermission(board, caller, PermissionThreadEdit)\n\t}\n\n\tthread.Update(title, body)\n\n\tstd.Emit(\n\t\t\"ThreadEdited\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"title\", title,\n\t)\n}\n\n// EditReply updates the body of comment or reply.\n//\n// Replies can be updated only by the users who created them.\nfunc EditReply(boardID BoardID, threadID, replyID PostID, body string) {\n\tassertRealmIsNotLocked()\n\n\tbody = strings.TrimSpace(body)\n\tassertReplyBodyIsValid(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\tassertReplyIsNotFrozen(reply)\n\n\tcaller := std.PreviousRealm().Address()\n\tif caller != reply.GetCreator() {\n\t\tpanic(\"only the reply creator is allowed to edit it\")\n\t}\n\n\treply.Update(\"\", body)\n\n\tstd.Emit(\n\t\t\"ReplyEdited\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"body\", body,\n\t)\n}\n\n// InviteMember adds a member to the realm or to a boards.\n//\n// A role can optionally be specified to be assigned to the new member.\n// Board ID is only required when inviting a member to a board.\nfunc InviteMember(boardID BoardID, user std.Address, role Role) {\n\tassertUserAddressIsValid(user)\n\tassertMembersUpdateIsEnabled(boardID)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{user, role}\n\tperms.WithPermission(caller, PermissionMemberInvite, args, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif err := perms.AddUser(user, role); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"MemberInvited\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", user.String(),\n\t\t\t\"role\", string(role),\n\t\t)\n\t})\n}\n\n// RemoveMember removes a member from the realm or a boards.\n//\n// Board ID is only required when removing a member from board.\nfunc RemoveMember(boardID BoardID, member std.Address) {\n\tassertMembersUpdateIsEnabled(boardID)\n\tassertMemberAddressIsValid(member)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\tperms.WithPermission(caller, PermissionMemberRemove, Args{member}, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif !perms.RemoveUser(member) {\n\t\t\tpanic(\"member not found\")\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"MemberRemoved\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", member.String(),\n\t\t)\n\t})\n}\n\n// IsMember checks if an user is a member of the realm or a board.\n//\n// Board ID is only required when checking if a user is a member of a board.\nfunc IsMember(boardID BoardID, user std.Address) bool {\n\tassertUserAddressIsValid(user)\n\n\tif boardID != 0 {\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tperms := mustGetPermissions(boardID)\n\treturn perms.HasUser(user)\n}\n\n// HasMemberRole checks if a realm or board member has a specific role assigned.\n//\n// Board ID is only required when checking a member of a board.\nfunc HasMemberRole(boardID BoardID, member std.Address, role Role) bool {\n\tassertMemberAddressIsValid(member)\n\n\tif boardID != 0 {\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tperms := mustGetPermissions(boardID)\n\treturn perms.HasRole(member, role)\n}\n\n// ChangeMemberRole changes the role of a realm or board member.\n//\n// Board ID is only required when changing the role for a member of a board.\nfunc ChangeMemberRole(boardID BoardID, member std.Address, role Role) {\n\tassertMemberAddressIsValid(member)\n\tassertMembersUpdateIsEnabled(boardID)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{boardID, member, role}\n\tperms.WithPermission(caller, PermissionRoleChange, args, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif err := perms.SetUserRoles(member, role); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"RoleChanged\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", member.String(),\n\t\t\t\"newRole\", string(role),\n\t\t)\n\t})\n}\n\n// IterateRealmMembers iterates realm members.\n// The iteration is done only for realm members, board members are not iterated.\nfunc IterateRealmMembers(offset int, fn UsersIterFn) (halted bool) {\n\tcount := gPerms.UsersCount() - offset\n\treturn gPerms.IterateUsers(offset, count, fn)\n}\n\n// IterateBoards iterates realm boards.\nfunc IterateBoards(offset int, fn func(ReadonlyBoard) bool) (halted bool) {\n\tcount := gBoardsByID.Size() - offset\n\treturn gBoardsByID.IterateByOffset(offset, count, func(_ string, v any) bool {\n\t\tboard, _ := v.(*Board)\n\t\treturn fn(readonlyBoard{board})\n\t})\n}\n\nfunc assertMemberAddressIsValid(member std.Address) {\n\tif !member.IsValid() {\n\t\tpanic(\"invalid member address\")\n\t}\n}\n\nfunc assertUserAddressIsValid(user std.Address) {\n\tif !user.IsValid() {\n\t\tpanic(\"invalid user address\")\n\t}\n}\n\nfunc assertHasBoardPermission(b *Board, user std.Address, p Permission) {\n\tif !b.perms.HasPermission(user, p) {\n\t\tpanic(\"unauthorized\")\n\t}\n}\n\nfunc assertBoardExists(id BoardID) {\n\tif _, found := getBoard(id); !found {\n\t\tpanic(\"board not found: \" + id.String())\n\t}\n}\n\nfunc assertBoardIsNotFrozen(b *Board) {\n\tif b.IsReadonly() {\n\t\tpanic(\"board is frozen\")\n\t}\n}\n\nfunc assertIsValidBoardName(name string) {\n\tsize := len(name)\n\tif size == 0 {\n\t\tpanic(\"board name is empty\")\n\t}\n\n\tif size \u003e MaxBoardNameLength {\n\t\tn := strconv.Itoa(MaxBoardNameLength)\n\t\tpanic(\"board name is too long, maximum allowed is \" + n + \" characters\")\n\t}\n\n\tif !reBoardName.MatchString(name) {\n\t\tpanic(\"board name contains invalid characters\")\n\t}\n}\n\nfunc assertThreadIsNotFrozen(t *Post) {\n\tif t.IsReadonly() {\n\t\tpanic(\"thread is frozen\")\n\t}\n}\n\nfunc assertReplyIsNotFrozen(r *Post) {\n\tif r.IsReadonly() {\n\t\tpanic(\"reply is frozen\")\n\t}\n}\n\nfunc assertNameIsNotEmpty(name string) {\n\tif name == \"\" {\n\t\tpanic(\"name is empty\")\n\t}\n}\n\nfunc assertTitleIsValid(title string) {\n\tif title == \"\" {\n\t\tpanic(\"title is empty\")\n\t}\n\n\tif len(title) \u003e MaxThreadTitleLength {\n\t\tn := strconv.Itoa(MaxThreadTitleLength)\n\t\tpanic(\"thread title is too long, maximum allowed is \" + n + \" characters\")\n\t}\n}\n\nfunc assertBodyIsNotEmpty(body string) {\n\tif body == \"\" {\n\t\tpanic(\"body is empty\")\n\t}\n}\n\nfunc assertBoardNameNotExists(name string) {\n\tif gBoardsByName.Has(name) {\n\t\tpanic(\"board already exists\")\n\t}\n}\n\nfunc assertThreadExists(b *Board, threadID PostID) {\n\tif _, found := b.GetThread(threadID); !found {\n\t\tpanic(\"thread not found: \" + threadID.String())\n\t}\n}\n\nfunc assertReplyExists(thread *Post, replyID PostID) {\n\tif _, found := thread.GetReply(replyID); !found {\n\t\tpanic(\"reply not found: \" + replyID.String())\n\t}\n}\n\nfunc assertThreadIsVisible(thread *Post) {\n\tif thread.IsHidden() {\n\t\tpanic(\"thread is hidden\")\n\t}\n}\n\nfunc assertReplyIsVisible(thread *Post) {\n\tif thread.IsHidden() {\n\t\tpanic(\"reply is hidden\")\n\t}\n}\n\nfunc assertReplyBodyIsValid(body string) {\n\tassertBodyIsNotEmpty(body)\n\n\tif len(body) \u003e MaxReplyLength {\n\t\tn := strconv.Itoa(MaxReplyLength)\n\t\tpanic(\"reply is too long, maximum allowed is \" + n + \" characters\")\n\t}\n\n\tif reDeniedReplyLinePrefixes.MatchString(body) {\n\t\tpanic(\"using Markdown headings, blockquotes or horizontal lines is not allowed in replies\")\n\t}\n}\n\nfunc assertMembersUpdateIsEnabled(boardID BoardID) {\n\tif boardID != 0 {\n\t\tassertRealmIsNotLocked()\n\t} else {\n\t\tassertRealmMembersAreNotLocked()\n\t}\n}\n"},{"name":"public_flag.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// SetFlaggingThreshold sets the number of flags required to hide a thread or comment.\n//\n// Threshold is only applicable within the board where it's setted.\nfunc SetFlaggingThreshold(boardID BoardID, threshold int) {\n\tif threshold \u003c 1 {\n\t\tpanic(\"invalid flagging threshold\")\n\t}\n\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{boardID, threshold}\n\tboard.perms.WithPermission(caller, PermissionBoardFlaggingUpdate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\n\t\tgFlaggingThresholds.Set(boardID.String(), threshold)\n\t\tstd.Emit(\n\t\t\t\"FlaggingThresholdUpdated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"threshold\", strconv.Itoa(threshold),\n\t\t)\n\t})\n}\n\n// GetFlaggingThreshold returns the number of flags required to hide a thread or comment within a board.\nfunc GetFlaggingThreshold(boardID BoardID) int {\n\tassertBoardExists(boardID)\n\treturn getFlaggingThreshold(boardID)\n}\n\n// FlagThread adds a new flag to a thread.\n//\n// Flagging requires special permissions and hides the thread when\n// the number of flags reaches a pre-defined flagging threshold.\nfunc FlagThread(boardID BoardID, threadID PostID, reason string) {\n\tboard := mustGetBoard(boardID)\n\n\t// Realm owners should be able to flag without permissions even when board is frozen\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner)\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertHasBoardPermission(board, caller, PermissionThreadFlag)\n\t}\n\n\tt, ok := board.GetThread(threadID)\n\tif !ok {\n\t\tpanic(\"post doesn't exist\")\n\t}\n\tassertThreadIsNotFrozen(t)\n\n\tf := Flag{\n\t\tUser:   caller,\n\t\tReason: reason,\n\t}\n\n\t// Realm owners can hide with a single flag\n\thide := flagItem(t, f, getFlaggingThreshold(boardID))\n\tif hide || isRealmOwner {\n\t\tt.SetVisible(false)\n\t}\n\n\tstd.Emit(\n\t\t\"ThreadFlagged\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"reason\", reason,\n\t)\n}\n\n// FlagReply adds a new flag to a comment or reply.\n//\n// Flagging requires special permissions and hides the comment or reply\n// when the number of flags reaches a pre-defined flagging threshold.\nfunc FlagReply(boardID BoardID, threadID, replyID PostID, reason string) {\n\tboard := mustGetBoard(boardID)\n\n\t// Realm owners should be able to flag without permissions even when board is frozen\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner)\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertHasBoardPermission(board, caller, PermissionReplyFlag)\n\t}\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsNotFrozen(thread)\n\n\tf := Flag{\n\t\tUser:   caller,\n\t\tReason: reason,\n\t}\n\n\t// Realm owners can hide with a single flag\n\thide := flagItem(reply, f, getFlaggingThreshold(boardID))\n\tif hide || isRealmOwner {\n\t\treply.SetVisible(false)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyFlagged\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"reason\", reason,\n\t)\n}\n"},{"name":"public_freeze.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// FreezeBoard freezes a board so no more threads and comments can be created or modified.\nfunc FreezeBoard(boardID BoardID) {\n\tsetBoardReadonly(boardID, true)\n}\n\n// UnfreezeBoard removes frozen status from a board.\nfunc UnfreezeBoard(boardID BoardID) {\n\tsetBoardReadonly(boardID, false)\n}\n\n// IsBoardFrozen checks if a board has been frozen.\nfunc IsBoardFrozen(boardID BoardID) bool {\n\tboard := mustGetBoard(boardID)\n\treturn board.IsReadonly()\n}\n\n// FreezeThread freezes a thread so thread cannot be replied, modified or deleted.\n//\n// Fails if board is frozen.\nfunc FreezeThread(boardID BoardID, threadID PostID) {\n\tsetThreadReadonly(boardID, threadID, true)\n}\n\n// UnfreezeThread removes frozen status from a thread.\n//\n// Fails if board is frozen.\nfunc UnfreezeThread(boardID BoardID, threadID PostID) {\n\tsetThreadReadonly(boardID, threadID, false)\n}\n\n// IsThreadFrozen checks if a thread has been frozen.\n//\n// Returns true if board is frozen.\nfunc IsThreadFrozen(boardID BoardID, threadID PostID) bool {\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\treturn board.IsReadonly() || thread.IsReadonly()\n}\n\n// UnfreezeReply removes frozen status from a reply.\n//\n// Fails when parent thread or board are frozen.\nfunc UnfreezeReply(boardID BoardID, threadID, replyID PostID) {\n\t// XXX: Is there a use case for also freezing replies?\n\tsetReplyReadonly(boardID, threadID, replyID, false)\n}\n\n// FreezeReply freezes a thread reply so it cannot be modified or deleted.\n//\n// Fails when parent thread or board are frozen.\nfunc FreezeReply(boardID BoardID, threadID, replyID PostID) {\n\tsetReplyReadonly(boardID, threadID, replyID, true)\n}\n\n// IsReplyFrozen checks if a thread reply has been frozen.\n//\n// Returns true when board or a parent thread is frozen.\nfunc IsReplyFrozen(boardID BoardID, threadID, replyID PostID) bool {\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\n\treturn board.IsReadonly() || thread.IsReadonly() || reply.IsReadonly()\n}\n\nfunc setReplyReadonly(boardID BoardID, threadID, replyID PostID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionReplyFreeze)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\n\tif isReadonly {\n\t\tassertReplyIsNotFrozen(reply)\n\t}\n\n\treply.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"ReplyFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n\nfunc setThreadReadonly(boardID BoardID, threadID PostID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionThreadFreeze)\n\n\tthread := mustGetThread(board, threadID)\n\tif isReadonly {\n\t\tassertThreadIsNotFrozen(thread)\n\t}\n\n\tthread.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"ThreadFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n\nfunc setBoardReadonly(boardID BoardID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tif isReadonly {\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionBoardFreeze)\n\n\tboard.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"BoardFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n"},{"name":"public_lock.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// LockRealm locks the realm making it readonly.\n//\n// WARNING: Realm can't be unlocked once locked.\n//\n// Realm can also be locked without locking realm members.\n// Realm members can be locked when locking the realm or afterwards.\n// This is relevant for two reasons, one so members can be modified after lock.\n// The other is for realm owners, which can delete threads and comments after lock.\nfunc LockRealm(lockRealmMembers bool) {\n\tassertRealmMembersAreNotLocked()\n\n\t// If realm members are not being locked assert that realm is no locked.\n\t// Members can be locked after locking the realm, in a second `LockRealm` call.\n\tif !lockRealmMembers {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tgPerms.WithPermission(caller, PermissionRealmLock, nil, func(Args) {\n\t\tgLocked.realm = true\n\t\tgLocked.realmMembers = lockRealmMembers\n\n\t\tstd.Emit(\n\t\t\t\"RealmLocked\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"lockRealmMembers\", strconv.FormatBool(lockRealmMembers),\n\t\t)\n\t})\n}\n\n// IsRealmLocked checks if boards realm has been locked.\nfunc IsRealmLocked() bool {\n\treturn gLocked.realm\n}\n\n// AreRealmMembersLocked checks if realm members has been locked.\nfunc AreRealmMembersLocked() bool {\n\treturn gLocked.realmMembers\n}\n\nfunc assertRealmIsNotLocked() { // TODO: Add filtests for locked realm case to all public functions\n\tif gLocked.realm {\n\t\tpanic(\"realm is locked\")\n\t}\n}\n\nfunc assertRealmMembersAreNotLocked() { // TODO: Add filtests for locked members case to all public member functions\n\tif gLocked.realmMembers {\n\t\tpanic(\"realm and members are locked\")\n\t}\n}\n"},{"name":"render.gno","body":"package boards2\n\nimport (\n\t\"net/url\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/mux\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nconst (\n\tpageSizeBoards  = 6\n\tpageSizeThreads = 6\n\tpageSizeReplies = 10\n)\n\nconst menuManageBoard = \"manageBoard\"\n\nfunc Render(path string) string {\n\trouter := mux.NewRouter()\n\trouter.HandleFunc(\"\", renderBoardsList)\n\trouter.HandleFunc(\"help\", renderHelp)\n\trouter.HandleFunc(\"admin-users\", renderMembers)\n\trouter.HandleFunc(\"{board}\", renderBoard)\n\trouter.HandleFunc(\"{board}/members\", renderMembers)\n\trouter.HandleFunc(\"{board}/{thread}\", renderThread)\n\trouter.HandleFunc(\"{board}/{thread}/{reply}\", renderReply)\n\n\trouter.NotFoundHandler = func(res *mux.ResponseWriter, _ *mux.Request) {\n\t\tres.Write(\"Path not found\")\n\t}\n\n\treturn router.Render(path)\n}\n\nfunc renderHelp(res *mux.ResponseWriter, _ *mux.Request) {\n\tres.Write(\"# Boards Help\\n\")\n\tif gHelp != \"\" {\n\t\tres.Write(gHelp)\n\t} else {\n\t\tres.Write(\"### Help content has not been uploaded\\n\")\n\t\tres.Write(\"Do you want to \")\n\t\tres.Write(newLink(\"upload boards help\", txlink.Call(\"SetHelp\", \"content\", \"\")))\n\t\tres.Write(\" ?\")\n\t}\n}\n\nfunc renderBoardsList(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tres.Write(\"# Boards\\n\\n\")\n\trenderBoardListMenu(res, req)\n\tres.Write(\"\\n\\n---\\n\")\n\n\tif gBoardsByID.Size() == 0 {\n\t\tlink := txlink.Call(\"CreateBoard\", \"name\", \"\")\n\t\tres.Write(\"### Currently there are no boards\\n\")\n\t\tres.Write(\"Be the first to \")\n\t\tres.Write(newLink(\"create a new board\", link))\n\t\tres.Write(\" !\")\n\n\t\treturn\n\t}\n\n\tp, err := pager.New(req.RawPath, gBoardsByID.Size(), pager.WithPageSize(pageSizeBoards))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\trender := func(_ string, v any) bool {\n\t\tboard := v.(*Board)\n\n\t\tres.Write(\"**\" + newLink(board.GetName(), board.GetURL()) + \"**  \\n\")\n\t\tres.Write(\"Created by \" + newUserLink(board.creator) + \" \")\n\t\tres.Write(\"on \" + board.createdAt.Format(dateFormat))\n\t\tres.Write(\", #\" + board.id.String() + \"  \\n\")\n\t\tres.Write(\"**\" + strconv.Itoa(board.threads.Size()) + \" threads\")\n\t\tif board.IsReadonly() {\n\t\t\tres.Write(\", read-only\")\n\t\t}\n\n\t\tres.Write(\"**\\n\\n\")\n\t\treturn false\n\t}\n\n\tres.Write(\"Sort by: \")\n\tr := realmpath.Parse(req.RawPath)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tres.Write(newLink(\"newest first\", r.String()))\n\t\tres.Write(\"\\n\\n\")\n\t\tgBoardsByID.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tres.Write(newLink(\"oldest first\", r.String()))\n\t\tres.Write(\"\\n\\n\")\n\t\tgBoardsByID.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tres.Write(\"\\n---\\n\")\n\t\tres.Write(pager.Picker(p))\n\t}\n}\n\nfunc renderBoardListMenu(res *mux.ResponseWriter, req *mux.Request) {\n\tpath := strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\n\tres.Write(newLink(\"Create Board\", txlink.Call(\"CreateBoard\", \"name\", \"\")))\n\tres.Write(\" • \")\n\tres.Write(newLink(\"List Admin Users\", path+\":admin-users\"))\n\tres.Write(\" • \")\n\tres.Write(newLink(\"Help\", path+\":help\"))\n\tres.Write(\"\\n\\n\")\n}\n\nfunc renderBoard(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tlink := newLink(\"create a new board\", txlink.Call(\"CreateBoard\", \"name\", name))\n\t\tres.Write(\"### The board you are looking for does not exist\\n\")\n\t\tres.Write(\"Do you want to \")\n\t\tres.Write(link)\n\t\tres.Write(\" ?\")\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tmenu := renderBoardMenu(board, req)\n\n\tres.Write(board.Render(req.RawPath, menu))\n}\n\nfunc renderBoardMenu(board *Board, req *mux.Request) string {\n\tvar (\n\t\tb               strings.Builder\n\t\tboardMembersURL = board.GetPath() + \"/members\"\n\t)\n\n\tif board.IsReadonly() {\n\t\tb.WriteString(newLink(\"List Members\", boardMembersURL))\n\t\tb.WriteString(\" • \")\n\t\tb.WriteString(newLink(\"Unfreeze Board\", board.GetUnfreezeFormURL()))\n\t\tb.WriteString(\"\\n\")\n\t} else {\n\t\tb.WriteString(newLink(\"Create Thread\", board.GetPostFormURL()))\n\t\tb.WriteString(\" • \")\n\n\t\tmenu := getCurrentMenu(req.RawPath)\n\t\tif menu == menuManageBoard {\n\t\t\tb.WriteString(\"**Manage Board**\")\n\t\t} else {\n\t\t\tb.WriteString(newLink(\"Manage Board\", menuURL(menuManageBoard)))\n\t\t}\n\n\t\tb.WriteString(\"  \\n\")\n\n\t\tif menu == menuManageBoard {\n\t\t\tb.WriteString(\"↳\")\n\t\t\tb.WriteString(newLink(\"Invite Member\", board.GetInviteMemberFormURL()))\n\t\t\tb.WriteString(\" • \")\n\t\t\tb.WriteString(newLink(\"List Members\", boardMembersURL))\n\t\t\tb.WriteString(\" • \")\n\t\t\tb.WriteString(newLink(\"Freeze Board\", board.GetFreezeFormURL()))\n\t\t\tb.WriteString(\"\\n\\n\")\n\t\t}\n\t}\n\n\treturn b.String()\n}\n\nfunc renderThread(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tres.Write(\"Board does not exist: \" + name)\n\t\treturn\n\t}\n\n\trawID := req.GetVar(\"thread\")\n\ttID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid thread ID: \" + rawID)\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tthread, found := board.GetThread(PostID(tID))\n\tif !found {\n\t\tres.Write(\"Thread does not exist with ID: \" + rawID)\n\t} else if thread.IsHidden() {\n\t\tres.Write(\"Thread with ID: \" + rawID + \" has been flagged as inappropriate\")\n\t} else {\n\t\tres.Write(thread.Render(req.RawPath, \"\", 5))\n\t}\n}\n\nfunc renderReply(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tres.Write(\"Board does not exist: \" + name)\n\t\treturn\n\t}\n\n\trawID := req.GetVar(\"thread\")\n\ttID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid thread ID: \" + rawID)\n\t\treturn\n\t}\n\n\trawID = req.GetVar(\"reply\")\n\trID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid reply ID: \" + rawID)\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tthread, found := board.GetThread(PostID(tID))\n\tif !found {\n\t\tres.Write(\"Thread does not exist with ID: \" + req.GetVar(\"thread\"))\n\t\treturn\n\t}\n\n\treply, found := thread.GetReply(PostID(rID))\n\tif !found {\n\t\tres.Write(\"Reply does not exist with ID: \" + rawID)\n\t\treturn\n\t}\n\n\t// Call render even for hidden replies to display children.\n\t// Original comment content will be hidden under the hood.\n\t// See: #3480\n\tres.Write(reply.RenderInner())\n}\n\nfunc renderMembers(res *mux.ResponseWriter, req *mux.Request) {\n\tboardID := BoardID(0)\n\tperms := gPerms\n\tname := req.GetVar(\"board\")\n\tif name != \"\" {\n\t\tv, found := gBoardsByName.Get(name)\n\t\tif !found {\n\t\t\tres.Write(\"### Board not found\")\n\t\t\treturn\n\t\t}\n\n\t\tboard := v.(*Board)\n\t\tboardID = board.GetID()\n\t\tperms = board.perms\n\n\t\tres.Write(\"# \" + board.GetName() + \" Members\\n\")\n\t\tres.Write(\"### These are the board members\\n\\n\")\n\t} else {\n\t\tres.Write(\"# Admin Users\\n\")\n\t\tres.Write(\"### These are the admin users of the realm\\n\\n\")\n\t}\n\n\t// Create a pager with a small page size to reduce\n\t// the number of username lookups per page.\n\tp, err := pager.New(req.RawPath, perms.UsersCount(), pager.WithPageSize(5))\n\tif err != nil {\n\t\tres.Write(err.Error())\n\t\treturn\n\t}\n\n\tres.Write(\"| Member | Role | Actions |\\n| --- | --- | --- |\\n\")\n\tperms.IterateUsers(p.Offset(), p.PageSize(), func(u User) bool {\n\t\tres.Write(\"| \")\n\t\tres.Write(newUserLink(u.Address))\n\t\tres.Write(\" | \")\n\t\tres.Write(rolesToString(u.Roles))\n\t\tres.Write(\" | \")\n\t\tres.Write(newLink(\"remove\", txlink.Call(\n\t\t\t\"RemoveMember\",\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", u.Address.String(),\n\t\t)))\n\t\tres.Write(\" • \")\n\t\tres.Write(newLink(\"change role\", txlink.Call(\n\t\t\t\"ChangeMemberRole\",\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", u.Address.String(),\n\t\t\t\"role\", \"\",\n\t\t)))\n\t\tres.Write(\" |\\n\")\n\t\treturn false\n\t})\n\n\tif p.HasPages() {\n\t\tres.Write(\"\\n\\n\" + pager.Picker(p))\n\t}\n}\n\nfunc renderNotice(res *mux.ResponseWriter) {\n\tif gNotice == \"\" {\n\t\treturn\n\t}\n\n\tres.Write(\"\u003e \")\n\tres.Write(gNotice)\n\tres.Write(\"\\n\\n\")\n}\n\nfunc rolesToString(roles []Role) string {\n\tif len(roles) == 0 {\n\t\treturn \"\"\n\t}\n\n\tnames := make([]string, len(roles))\n\tfor i, r := range roles {\n\t\tnames[i] = string(r)\n\t}\n\treturn strings.Join(names, \", \")\n}\n\nfunc menuURL(name string) string {\n\t// TODO: Menu URL works because no other GET arguments are being used\n\treturn \"?menu=\" + name\n}\n\nfunc getCurrentMenu(rawURL string) string {\n\t_, rawQuery, found := strings.Cut(rawURL, \"?\")\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\tquery, _ := url.ParseQuery(rawQuery)\n\treturn query.Get(\"menu\")\n}\n"},{"name":"z_0_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tbid := boards2.CreateBoard(\"test123\")\n\tprintln(\"ID =\", bid)\n}\n\n// Output:\n// ID = 1\n"},{"name":"z_0_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"\")\n}\n\n// Error:\n// board name is empty\n"},{"name":"z_0_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tboardName = \"test123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(boardName)\n}\n\nfunc main() {\n\tboards2.CreateBoard(boardName)\n}\n\n// Error:\n// board already exists\n"},{"name":"z_0_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n}\n\n// Error:\n// addresses are not allowed as board name\n"},{"name":"z_0_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"gnoland\")\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_0_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar name = strings.Repeat(\"X\", boards2.MaxBoardNameLength+1)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(name)\n}\n\n// Error:\n// board name is too long, maximum allowed is 50 characters\n"},{"name":"z_0_h_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname   = \"test123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\tboards2.InviteMember(0, member, boards2.RoleOwner) // Operate on realm DAO members instead of individual boards\n\ttesting.SetOriginCaller(member)\n\tusers.Register(name)\n}\n\nfunc main() {\n\tbid := boards2.CreateBoard(name)\n\tprintln(\"ID =\", bid)\n}\n\n// Output:\n// ID = 1\n"},{"name":"z_0_i_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"test123\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_10_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\n\t// Invite a moderator to the new board\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\n\t// Create a new thread as a moderator\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_10_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.FlagThread(404, 1, \"\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_10_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Make the next call as an uninvited user\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_10_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, 404, \"\")\n}\n\n// Error:\n// post doesn't exist\n"},{"name":"z_10_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// item flag count threshold exceeded: 1\n"},{"name":"z_10_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to flag threads\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\ttesting.SetOriginCaller(moderator)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_10_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with a specific flagging threshold\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Invite a moderator to the new board\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\n\t// Create a new thread and flag it as a moderator\n\ttesting.SetOriginCaller(moderator)\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// item has been already flagged by a current user\n"},{"name":"z_10_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with flagging threshold greater than 1\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Create a thread so the realm owner can flag and hide it with a single flag\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\t// Also freeze board to make sure that realm owner can still flag the thread\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_11_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, body)\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_11_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"\", \"bar\")\n}\n\n// Error:\n// title is empty\n"},{"name":"z_11_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_11_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.EditThread(404, 1, \"Foo\", \"bar\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_11_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_11_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"bar\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_11_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to edit threads\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, body)\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_11_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid   boards2.BoardID\n\tpid   boards2.PostID\n\ttitle = strings.Repeat(\"X\", boards2.MaxThreadTitleLength+1)\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, \"bar\")\n}\n\n// Error:\n// thread title is too long, maximum allowed is 100 characters\n"},{"name":"z_12_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbody  = \"Test reply\"\n\tpath  = \"test-board/1/2\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, body)\n\n\t// Render content must contain the modified reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \"+body+\"\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_12_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbody  = \"Test reply\"\n\tpath  = \"test-board/1/2\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Create a reply and a sub reply\n\tparentRID := boards2.CreateReply(bid, tid, 0, \"Parent\")\n\trid = boards2.CreateReply(bid, tid, parentRID, \"Child\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, body)\n\n\t// Render content must contain the modified reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e \"+body+\"\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_12_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.EditReply(404, 1, 0, \"body\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_12_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, 404, 0, \"body\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_12_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, 404, \"body\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_12_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"new body\")\n}\n\n// Error:\n// only the reply creator is allowed to edit it\n"},{"name":"z_12_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Flag the reply so it's hidden\n\tboards2.FlagReply(bid, tid, rid, \"reason\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"body\")\n}\n\n// Error:\n// reply is hidden\n"},{"name":"z_12_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_13_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_13_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.FlagReply(404, 1, 1, \"\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_13_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, 404, 1, \"\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_13_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, 404, \"\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_13_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// item flag count threshold exceeded: 1\n"},{"name":"z_13_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_13_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Invite a member using a role with permission to flag replies\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\ttesting.SetOriginCaller(moderator)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_13_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with flagging threshold greater than 1\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Create a reply so the realm owner can flag and hide it with a single flag\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\t// Also freeze board to make sure that realm owner can still flag the reply\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\"))\n}\n\n// Output:\n// true\n"},{"name":"z_14_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Ensure reply doesn't exist\n\tprintln(boards2.Render(\"test-board/1/2\"))\n}\n\n// Output:\n// Reply does not exist with ID: 2\n"},{"name":"z_14_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.DeleteReply(404, 1, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_14_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, 404, 1)\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_14_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, 404)\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_14_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\trid = boards2.CreateReply(bid, tid, 0, \"Parent\")\n\tboards2.CreateReply(bid, tid, rid, \"Child reply\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Render content must contain the releted message instead of reply's body\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e This reply has been deleted\\n\"))\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e Child reply\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_14_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Call using a user that has not permission to delete replies\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_14_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Invite a member using a role with permission to delete replies\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(member)\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Ensure reply doesn't exist\n\tprintln(boards2.Render(\"test-board/1/2\"))\n}\n\n// Output:\n// Reply does not exist with ID: 2\n"},{"name":"z_15_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"Foo\", \"bar\")\n\tboards2.FlagThread(srcBID, srcTID, \"idk\")\n}\n\nfunc main() {\n\t// Repost should fail if source thread is flagged\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_15_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID = 1024\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n}\n\nfunc main() {\n\t// Repost should fail if source thread doesn't exist\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// thread does not exist with ID: 1024\n"},{"name":"z_15_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"Foo\", \"bar\")\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_15_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/ufmt\"\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"original title\", \"original text\")\n}\n\nfunc main() {\n\t// Success case\n\ttID := boards2.CreateRepost(srcBID, srcTID, \"repost title\", \"repost text\", dstBID)\n\tp := ufmt.Sprintf(\"dst-board/%s\", tID)\n\tout := boards2.Render(p)\n\n\tprintln(strings.Contains(out, \"original text\"))\n\tprintln(strings.Contains(out, \"repost title\"))\n\tprintln(strings.Contains(out, \"repost text\"))\n}\n\n// Output:\n// true\n// true\n// true\n"},{"name":"z_15_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Create a board with a thread\n\torigBID := boards2.CreateBoard(\"origin-board\")\n\torigTID := boards2.CreateThread(origBID, \"title\", \"text\")\n\n\t// Create a second board and repost a thread using an empty title\n\tsrcBID = boards2.CreateBoard(\"source-board\")\n\tsrcTID = boards2.CreateRepost(origBID, origTID, \"original title\", \"original text\", srcBID)\n\n\t// Create a third board to try reposting the repost\n\tdstBID = boards2.CreateBoard(\"destination-board\")\n}\n\nfunc main() {\n\tboards2.CreateRepost(srcBID, srcTID, \"repost title\", \"repost text\", dstBID)\n}\n\n// Error:\n// reposting a thread that is a repost is not allowed\n"},{"name":"z_16_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(bid, 4)\n\n\t// Ensure that flagging threshold changed\n\tprintln(boards2.GetFlaggingThreshold(bid))\n}\n\n// Output:\n// 4\n"},{"name":"z_16_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nconst bid boards2.BoardID = 404\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(bid, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_16_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(1, 0)\n}\n\n// Error:\n// invalid flagging threshold\n"},{"name":"z_17_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.FreezeBoard(bid)\n\tprintln(boards2.IsBoardFrozen(bid))\n}\n\n// Output:\n// true\n"},{"name":"z_17_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FreezeBoard(bid)\n}\n\n// Error:\n// board is frozen\n"},{"name":"z_18_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbid   = boards2.BoardID(0)                                      // Operate on realm instead of individual boards\n)\n\nvar perms boards2.Permissions\n\nfunc init() {\n\t// Create a new permissions instance without users\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n\n\t// Owner that setted new permissions is not a member of the new permissions\n\tprintln(boards2.IsMember(bid, owner))\n}\n\n// Output:\n// false\n"},{"name":"z_18_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\tuser = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid  = boards2.BoardID(0)                                      // Operate on realm instead of individual boards\n)\n\nvar perms boards2.Permissions\n\nfunc init() {\n\t// Create a new permissions instance\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_18_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tperms boards2.Permissions\n\tbid   boards2.BoardID\n)\n\nfunc init() {\n\t// Create a new permissions instance without users\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foobar\")\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n\n\t// Owner that setted new board permissions is not a member of the new permissions\n\tprintln(boards2.IsMember(bid, owner))\n}\n\n// Output:\n// false\n"},{"name":"z_19_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\t// Attempt to freeze a thread on frozen board\n\tboards2.FreezeThread(bid, tid)\n}\n\n// Error:\n// board is frozen\n"},{"name":"z_19_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// Attempt to freeze a frozen thread\n\tboards2.FreezeThread(bid, tid)\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_19_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FreezeThread(bid, tid)\n\tprintln(boards2.IsThreadFrozen(bid, tid))\n}\n\n// Output:\n// true\n"},{"name":"z_1_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// true\n"},{"name":"z_1_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tuser  = std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\t// Add an admin member\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\t// Next call will be done by the admin member\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, boards2.RoleOwner)\n}\n\n// Error:\n// only owners are allowed to invite other owners\n"},{"name":"z_1_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tuser  = std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n\trole  = boards2.RoleAdmin\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\t// Add an admin member\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\t// Next call will be done by the admin member\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// true\n"},{"name":"z_1_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(0, user, boards2.Role(\"foobar\")) // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// invalid role: foobar\n"},{"name":"z_1_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\trole  = boards2.RoleOwner\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foo123\") // Operate on board DAO members\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(0, user, role)) // Operate on realm DAO\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_1_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, user, role)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n}\n\n// Error:\n// user already exists\n"},{"name":"z_1_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(0, \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", boards2.RoleGuest)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_20_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// Attempt to freeze a reply on frozen thread\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_20_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\nfunc main() {\n\t// Attempt to freeze already frozen reply\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\n// Error:\n// reply is frozen\n"},{"name":"z_20_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n}\n\nfunc main() {\n\t// reply frozen\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.FreezeReply(bid, tid, rid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeReply(bid, tid, rid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\n\t// thread frozen\n\tboards2.FreezeThread(bid, tid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeThread(bid, tid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\n\t// board frozen\n\tboards2.FreezeBoard(bid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeBoard(bid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n}\n\n// Output:\n// false\n// true\n// false\n// true\n// false\n// true\n// false\n"},{"name":"z_20_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n}\n\nfunc main() {\n\t// unfrozen thread - should work\n\tr2 := boards2.CreateReply(bid, tid, rid, \"child 1\")\n\n\t// frozen thread - can't reply\n\tboards2.FreezeReply(bid, tid, rid)\n\tboards2.CreateReply(bid, tid, r2, \"child 2\")\n}\n\n// Error:\n// reply is frozen\n"},{"name":"z_21_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"This is a test realm message\")\n\n\t// Render content must contain the message\n\tcontent := boards2.Render(\"\")\n\tprintln(strings.HasPrefix(content, \"\u003e This is a test realm message\\n\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_21_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Set an initial message so it can be cleared\n\tboards2.SetRealmNotice(\"This is a test realm message\")\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"\")\n\n\t// Render content must contain the message\n\tcontent := boards2.Render(\"\")\n\tprintln(strings.HasPrefix(content, \"\u003e This is a test realm message\\n\\n\"))\n\tprintln(strings.HasPrefix(content, \"# Boards\"))\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_21_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\t// Call realm with a user that has not permission to set realm notice\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"Foo\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_22_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(false)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// false\n"},{"name":"z_22_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.LockRealm(false)\n}\n\nfunc main() {\n\t// Should fail because realm is already locked\n\tboards2.LockRealm(false)\n}\n\n// Error:\n// realm is locked\n"},{"name":"z_22_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\t// Call realm with a user that has not permission to lock the realm\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(false)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_22_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(true)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_22_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.LockRealm(true)\n}\n\nfunc main() {\n\t// Should fail because realm is already locked\n\tboards2.LockRealm(true)\n}\n\n// Error:\n// realm and members are locked\n"},{"name":"z_22_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Lock the realm without locking realm members\n\tboards2.LockRealm(false)\n}\n\nfunc main() {\n\tboards2.LockRealm(true)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_23_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleOwner)\n\tboards2.InviteMember(bid, \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\", boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.IterateRealmMembers(0, func(u boards2.User) bool {\n\t\tprintln(u.Address, string(u.Roles[0]))\n\t\treturn false\n\t})\n}\n\n// Output:\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj owner\n// g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5 admin\n"},{"name":"z_24_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid := boards2.CreateBoard(\"test123\")\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleAdmin)\n\n\tbid = boards2.CreateBoard(\"foo123\")\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleOwner)\n\tboards2.InviteMember(bid, \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\", boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.IterateBoards(0, func(b boards2.ReadonlyBoard) bool {\n\t\tprintln(b.ID().String())\n\t\tprintln(b.Name())\n\n\t\tb.IterateMembers(0, b.MembersCount(), func(u boards2.User) bool {\n\t\t\tprintln(u.Address, string(u.Roles[0]))\n\t\t\treturn false\n\t\t})\n\t})\n}\n\n// Output:\n// 1\n// test123\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj admin\n// 2\n// foo123\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj owner\n// g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5 admin\n"},{"name":"z_2_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tpath    = \"test-board/1/2\"\n\tcomment = \"Test comment\"\n)\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\trid := boards2.CreateReply(bid, tid, 0, comment)\n\n\t// Ensure that returned ID is right\n\tprintln(rid == 2)\n\n\t// Render content must contain the reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \"+comment+\"\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_2_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateReply(404, 1, 0, \"comment\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_2_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, 404, 0, \"comment\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_2_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 404, \"comment\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_2_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Hide thread by flagging it so reply can't be submitted\n\tboards2.FlagThread(bid, tid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"Test reply\")\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_2_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply1\")\n\n\t// Hide thread by flagging it so reply of a reply can't be submitted\n\tboards2.FlagThread(bid, tid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"reply1.1\")\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_2_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"thread\", \"thread\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply1\")\n\n\t// Hide reply by flagging it so sub reply can't be submitted\n\tboards2.FlagReply(bid, tid, rid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"reply1.1\")\n}\n\n// Error:\n// replying to a hidden or frozen reply is not allowed\n"},{"name":"z_2_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"Test reply\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_2_i_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_2_j_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tpath    = \"test-board/1/2\"\n\tcomment = \"Second comment\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"First comment\")\n}\n\nfunc main() {\n\trid2 := boards2.CreateReply(bid, tid, rid, comment)\n\n\t// Ensure that returned ID is right\n\tprintln(rid2 == 3)\n\n\t// Render content must contain the sub-reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e \"+comment+\"\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_2_k_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tcomment = \"Second comment\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"Parent comment\")\n\n\t// Flag parent post so it's hidden\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"Sub comment\")\n}\n\n// Error:\n// replying to a hidden or frozen reply is not allowed\n"},{"name":"z_2_l_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// cannot reply to a frozen thread\n\tboards2.CreateReply(bid, tid, 0, \"foobar\")\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_2_m_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, strings.Repeat(\"x\", boards2.MaxReplyLength+1))\n}\n\n// Error:\n// reply is too long, maximum allowed is 300 characters\n"},{"name":"z_2_n_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"\u003e Markdown blockquote\")\n}\n\n// Error:\n// using Markdown headings, blockquotes or horizontal lines is not allowed in replies\n"},{"name":"z_3_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname    = \"foo123\"\n\tnewName = \"bar123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n\n\t// Ensure board is renamed by the default board owner\n\tbid2, _ := boards2.GetBoardIDFromName(newName)\n\tprintln(\"IDs match =\", bid == bid2)\n}\n\n// Output:\n// IDs match = true\n"},{"name":"z_3_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"\")\n}\n\n// Error:\n// board name is empty\n"},{"name":"z_3_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, name)\n}\n\n// Error:\n// board already exists\n"},{"name":"z_3_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RenameBoard(\"unexisting\", \"foo\")\n}\n\n// Error:\n// board does not exist with name: unexisting\n"},{"name":"z_3_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n}\n\n// Error:\n// addresses are not allowed as board name\n"},{"name":"z_3_f_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n\n\t// Ensure board is renamed by another board owner\n\tbid2, _ := boards2.GetBoardIDFromName(newName)\n\tprintln(\"IDs match =\", bid == bid2)\n}\n\n// Output:\n// IDs match = true\n"},{"name":"z_3_g_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tmember2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n\n\t// Invite a new member that doesn't own the user that matches the new board name\n\tboards2.InviteMember(bid, member2, boards2.RoleOwner)\n\ttesting.SetOriginCaller(member2)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_3_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"short\")\n}\n\n// Error:\n// the minimum allowed board name length is 6 characters\n"},{"name":"z_3_i_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tmember2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n\n\t// Invite a new member that doesn't own the user that matches the new board name\n\tboards2.InviteMember(bid, member2, boards2.RoleOwner)\n\ttesting.SetOriginCaller(member2)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_3_j_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"barbaz\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_4_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tnewRole = boards2.RoleOwner\n\tbid     = boards2.BoardID(0) // Operate on realm DAO instead of individual boards\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole)\n\n\t// Ensure that new role has been changed\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tnewRole = boards2.RoleAdmin\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foo123\")\n\tboards2.InviteMember(bid, member, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole)\n\n\t// Ensure that new role has been changed\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\towner2 = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tadmin  = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, owner2, boards2.RoleOwner)\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, owner2, boards2.RoleAdmin)\n}\n\n// Error:\n// admins are not allowed to remove the Owner role\n"},{"name":"z_4_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tadmin2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\tboards2.InviteMember(bid, admin2, boards2.RoleAdmin)\n\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, admin2, boards2.RoleOwner)\n}\n\n// Error:\n// admins are not allowed to promote members to Owner\n"},{"name":"z_4_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid     = boards2.BoardID(0)                                      // Operate on realm DAO members instead of individual boards\n\tnewRole = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole) // Owner can promote other members to Owner\n\n\t// Ensure that new role has been changed to owner\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, admin, boards2.Role(\"foo\"))\n}\n\n// Error:\n// invalid role: foo\n"},{"name":"z_4_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, \"invalid address\", boards2.RoleModerator)\n}\n\n// Error:\n// invalid member address\n"},{"name":"z_4_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(0, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleGuest)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_5_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, user, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.RemoveMember(bid, user)\n\n\t// Check that user is not a member\n\tprintln(boards2.IsMember(bid, user))\n}\n\n// Output:\n// false\n"},{"name":"z_5_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RemoveMember(0, \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\") // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_5_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RemoveMember(0, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// member not found\n"},{"name":"z_6_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\trole   = boards2.RoleGuest\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, member, role)\n}\n\nfunc main() {\n\tprintln(boards2.HasMemberRole(bid, member, role))\n\tprintln(boards2.HasMemberRole(bid, member, \"invalid\"))\n\tprintln(boards2.IsMember(bid, member))\n}\n\n// Output:\n// true\n// false\n// true\n"},{"name":"z_6_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleGuest\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tprintln(boards2.HasMemberRole(bid, user, role))\n\tprintln(boards2.IsMember(bid, user))\n}\n\n// Output:\n// false\n// false\n"},{"name":"z_7_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"test123\"\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(name)\n}\n\nfunc main() {\n\tbid2, found := boards2.GetBoardIDFromName(name)\n\tprintln(found)\n\tprintln(bid2 == bid)\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_7_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tbid, found := boards2.GetBoardIDFromName(\"foobar\")\n\tprintln(found)\n\tprintln(bid == 0)\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_8_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\ttid := boards2.CreateThread(bid, title, body)\n\n\t// Ensure that returned ID is right\n\tprintln(tid == 1)\n\n\t// Thread should not be frozen by default\n\tprintln(boards2.IsThreadFrozen(bid, tid))\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// false\n// true\n// true\n"},{"name":"z_8_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateThread(404, \"Foo\", \"bar\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_8_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_8_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"\", \"bar\")\n}\n\n// Error:\n// title is empty\n"},{"name":"z_8_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_9_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, title, body)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n\n\t// Ensure thread doesn't exist\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread does not exist with ID: 1\n"},{"name":"z_9_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.DeleteThread(404, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_9_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, 404)\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_9_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Call using a user that has not permission to delete threads\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_9_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to delete threads\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(member)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n\n\t// Ensure thread doesn't exist\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread does not exist with ID: 1\n"}]},"deposit":""}],"fee":{"gas_wanted":"90000000","gas_fee":"900000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"U2iKoHGW6K7bep8UtLBr97zzq/LMSZH7rS2n3lwDYEYf+3lmLs82V256UquOYW8bqvniG3wQopQl2FhYarGSCA=="}],"memo":""},"metadata":{"timestamp":"1743761702"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"RemoveMember","args":["0","g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"3yQ9Uzcug0E/gUI15Ebz6SpmQpMnj+6lf5K3fKPcDvCVrg6yeVepgeK7maTHsm57883RG/9+j5AU0C3RRd8ICg=="}],"memo":""},"metadata":{"timestamp":"1743761807"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["EmptyWithManyMembers"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"PxJx3iE6e2NocMnVTOy4bq7MiK0YVDlIefLAFm9ytsrBRFtruHjDDRQeIoBVJNCmf72D0kRRVii3naZz94OrBQ=="}],"memo":""},"metadata":{"timestamp":"1743761888"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","owner"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"aWHYIIEcmAv3uSgt9ECrBv6Q/z9dZ8u8fWFbYVjqhfO8ELEnn73KcwZlmA43SSclJVlRiVN/TghMf7hCaHb/BA=="}],"memo":""},"metadata":{"timestamp":"1743761893"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1e5hud66rs7ye4zgeqmqvwfhurs2mnf408hdqcl","owner"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"aj9gw0cR3xQIe1cBU2JEMPQyK0ft7NWyAgq4kanFCI2b79JmmEGo45VMfscffxmfJUuzNgeJTnsxOwRupQ4ZAA=="}],"memo":""},"metadata":{"timestamp":"1743761898"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5","admin"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"JF8sEBvqo4OCT8APgZXc/GxPzX+Ij2UJMj+YxTgesHsa1W6sTG8Q4RkshZK15LT99mse4pb9GtGjgG0i33E/Bw=="}],"memo":""},"metadata":{"timestamp":"1743761903"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk","moderator"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"0rEX/wEVQfzwTCwrwK9aV4B7qRiIeB88uq4PFCiemlGg4qf2NMspIUhcynlqzqSU6Y/0+OMxzq3bZJSyoqmHDQ=="}],"memo":""},"metadata":{"timestamp":"1743761908"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1ym6zxff3xq7wfldcs3uyu7x7z40gstggcx8zdj","moderator"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"GO3MGKbeMgas+NtO+OTUGo2VNt9tv9pfQ48SzKyOMmRUOFk96b0E7yc0L1hLfHhlmIry1TN67/W2hw9wpJ81AA=="}],"memo":""},"metadata":{"timestamp":"1743761913"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["TheNumber42"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"muDrsNLE7kZGItSiBNy3vYoe7tyGAyWIfoDYcx4uIIPx+UgjgcJizyiPS6aqEsXrxpyak0+WJ3jUj1HuKARgDQ=="}],"memo":""},"metadata":{"timestamp":"1743761918"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kuCtWj1TUpFzucoJ8iAhcnx9Kmvr629VZ2v3JFLL9O/GX4U97k2O0jpn4usPHV3W6RvsRihX+bXQSZHyYYkNDw=="}],"memo":""},"metadata":{"timestamp":"1743761918"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["2","What's your take on it\\?","Seen in many places, unknown to many"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"3Q6yjDFalubJjr79zO/5N6efvvBVaAoDzu7QlcDORuipWi+9MNQ8cUPGnsT4faRiGwrvvQAMl17xIOoR11VTAg=="}],"memo":""},"metadata":{"timestamp":"1743761923"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["2","1","0","What do you mean\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"i+Zfx47nUWx4qGnftxJrLOpKME3B4VXvHWdLc/pO0HXd3ims6sTH/NHt8E/t1qUlPA8ndK1lgg7Qo8+v0fpyCQ=="}],"memo":""},"metadata":{"timestamp":"1743761928"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["2","1","0","よんじゅうに\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Rup+YIfuQpIu3I3VGXx97u6EZtXZ1yyiEtAcXegacsnu4WB3YnXEIzJauCcw2Edx5Ym3lo/BqVJrwVpoqDigAA=="}],"memo":""},"metadata":{"timestamp":"1743761933"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["2","1","2","Cuarenta y dos\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"5VJ9Q10yIK4j0vvm4fcCgbmem6rUzOaXZA8hkKKYNUQJ5tur+8ClyPSpUn70XEYhfe2RSREvwHSplt0SehAaBg=="}],"memo":""},"metadata":{"timestamp":"1743761938"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["ThreadsExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"I6ZlzBsGf1qOsfnBjwHKJyar1cuDCh+N/VDvsHBVQbqQvMdpJvotHS4oJSzI0267kSV0P3aj0eRhg24/HqSeBA=="}],"memo":""},"metadata":{"timestamp":"1743761943"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Seventh","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"lEnbWEYdUoTq+RPp8RRG0VACcZR6gvelM5uVdzRaiT4x1JcrKelclMGFyC7f1dByoxPx4wYVhDjiA5PERnAtAQ=="}],"memo":""},"metadata":{"timestamp":"1743761948"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Sixth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"N6G8Nonx6w/paVsrfnTLs/BsUN/GJ3iKTbf9YbmLq4/WiHTLsSnSq9XmM3geonSJvM+uvmR/ygD0Roj1Lq3PBw=="}],"memo":""},"metadata":{"timestamp":"1743761953"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kuCtWj1TUpFzucoJ8iAhcnx9Kmvr629VZ2v3JFLL9O/GX4U97k2O0jpn4usPHV3W6RvsRihX+bXQSZHyYYkNDw=="}],"memo":""},"metadata":{"timestamp":"1743761953"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Fifth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"zKIVafDZwKsorlEQcB5gH3Cfxa6RSRyNmrJ6lrLiVASJsm1PEOQX1rAmeq0xECiyzlywQi2QosQ6SOXRpGcKAQ=="}],"memo":""},"metadata":{"timestamp":"1743761958"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Fourth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"2NjemoRCvFjqMm1EqLenIWuaNEP3dGb4dF31urjXy2Z9inS0g/pQNWkU+rTMGVWtqgn9vpL8hW0yZT6VhZL8BQ=="}],"memo":""},"metadata":{"timestamp":"1743761963"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Third","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"lnuXkGx9zXZqVCGfzQQOiQTynjx+lYkydTRxqoHw7s9XA7jIOCfjVFk63sr66TxRNUrGRHKxpcEzUB2vSE3RDQ=="}],"memo":""},"metadata":{"timestamp":"1743761968"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Second","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"vi5VQFW7xYjrl0jtUMwtWwJEVTW1Bcbimgwz2mU/s91fZWJwYdK/lg0LEcO9TdQCPV8EWvsS3DGNpjNfNu/kBA=="}],"memo":""},"metadata":{"timestamp":"1743761973"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","First with many Replies","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"IvThbQ7fDNCuxPjXCB4aUngctbAz8wI4qZ1Y2p9cGp6315zr8tXylNS+n9V/xnYztqYBOO0acV8NTLAjtr6dCQ=="}],"memo":""},"metadata":{"timestamp":"1743761978"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","First"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"yH3slx61rIFtSsDZKTHeIYYn+mL4n+xiht985eukgKk2POWaKf5BGdBULgkJ21kbnsV65vPJIsgYejbQ/9GjCg=="}],"memo":""},"metadata":{"timestamp":"1743761983"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","8","Sub First"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"R0nUwVIAQ59kP/sZjQ3/xgCXzeo5hbSwLMPz4g4s6pBX9KW3/0vAi9kzz+swwp7END9IC6apNlYC303ZEVuyAA=="}],"memo":""},"metadata":{"timestamp":"1743761988"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Second"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"GG4QHf1tSirS6I9cDjng1Xir1Ql+q4x93bm9kODUL6KEanKmD84gKh5/YVMstRkHPp60Et1UsFHC9J6knxI3AQ=="}],"memo":""},"metadata":{"timestamp":"1743761993"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Third"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"voI0taAnzfanaNNKskt12IivTt4qWbCuWtHXV5huhAOOp7B+K4OPQsIHg7+LwAQeTmWXPyrNdB60OX1BjR1KDg=="}],"memo":""},"metadata":{"timestamp":"1743761998"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Fourth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"aTmh1rKQmbiIfSmfSP8ylV9vBoPqZYV9T0aYgwPB/eFEK7rvZ1eW5+3QP5f8Edrgl4B2kf5WwnA3Fhqu5qc8BQ=="}],"memo":""},"metadata":{"timestamp":"1743762003"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Fifth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"rjiWLoD5Mg1Ulv9b3s299jm2HcmJfoKDeg7WQzgKccmyQ8BQUHBbHEYVar+6wSdjl09RpP/F+CnOUP9JN6gVDQ=="}],"memo":""},"metadata":{"timestamp":"1743762008"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Sixth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"TDO4Ji9JE1mdyomiVRL6Nc2Z22xABNA2xy/Gvi2DaF3Q8Ur56106k7DWgAwKkYnWJO2DjPQH0mry3Dn3K5ygDg=="}],"memo":""},"metadata":{"timestamp":"1743762013"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Seventh"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ID/GjdOyQf3DL8tOLPKgRDkmlxK/VNPej1HGPrmDL2XXqSP8VLHWuE8fhmk6yI8FFMrC5TsRBbIVbmmAhARmDA=="}],"memo":""},"metadata":{"timestamp":"1743762018"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Eigth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xg3AUWGaisRcJwnAGHz6JA0Eb+muoI4YznApNB1ZOcqj/ZKbYwk7LJ/f7aJ9QBUO9YMwCkBRwNr/NBGFPzW9Cg=="}],"memo":""},"metadata":{"timestamp":"1743762023"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Ninth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Z28hKxhoyOqbhWsNCkPreWiq0BgyCxB9AxqfTFLKVKYra+RfANNuljqFuCzVhElqDhkP/RlrBl7TfV5Q2AuBBQ=="}],"memo":""},"metadata":{"timestamp":"1743762028"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Tenth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ujgja3YG7j2hRcob5WWrlBZxfAJzr+TicEeQhHLbr7Xa4cQkxHbWI0DTvEKUqV8RYU52xI20s4p6gt0+D2zZCw=="}],"memo":""},"metadata":{"timestamp":"1743762033"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Eleventh"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"AHZ+TfFaMfccMtF4jX+U8Ruq2zNMVI1RyekXJ0KQ91Y0tkqRK8yn4lvv7Vb+AvDVDkAO3MqO9TfVXr28vGHuBg=="}],"memo":""},"metadata":{"timestamp":"1743762039"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["ReadOnlyExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"/KLIc34sqQrmajzkcFfDjtqgtdjiuGAPgO+qrfJd+WIhzN7gkixqzUSXPj3wZDiKikBqc+T+Wb5tp65m6bK9BA=="}],"memo":""},"metadata":{"timestamp":"1743762044"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["4","Example Thread","This thread shouldn't be writable"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"NXhPiUeq9YcNnkudvz745FgxJsebQ01odghXhRQbQGU40Q83p02OzzOJ3VVKV0yhuBxON7Y181/zxZOiTi4MDQ=="}],"memo":""},"metadata":{"timestamp":"1743762049"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"FreezeBoard","args":["4"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"wd/5jD5gLOF9jEvpFuTKkuln4fbytMqJzZPYN4LOiZY/xVrhM8T3QCr7/d6s8uAr2WxqxBiSGh0yZIp2wQ6UBg=="}],"memo":""},"metadata":{"timestamp":"1743762054"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["RepostExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"5TRSh5UmPK8KI/+8sTSI5upXLvb8LXP4YGLzMaJC5Bu69gu5ZIj+SEBez22Ek25bpVLkqHHtqhpmU5QMvIYuAQ=="}],"memo":""},"metadata":{"timestamp":"1743762059"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kuCtWj1TUpFzucoJ8iAhcnx9Kmvr629VZ2v3JFLL9O/GX4U97k2O0jpn4usPHV3W6RvsRihX+bXQSZHyYYkNDw=="}],"memo":""},"metadata":{"timestamp":"1743762059"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateRepost","args":["2","1","Custom repost title","Custom repost body","5"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"JPJZiP3S/FhZUnPZXP93PAzHt4GpBQ4kAopWnRstMp7D3rye1kMdx+qyKaxGGbiAwI+YKrKK12gud8NAJnRbDw=="}],"memo":""},"metadata":{"timestamp":"1743762064"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"SetRealmNotice","args":["A new [version](https://gno.land/r/devx000/gnoland/boards2/v1rc2) is available which fixes a couple of issues and explores a UI which is is more in line with classic Reddit"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"rAsbllvRLrYeD2MhA3PT5+8yfYQ96MY6bt087UKt4uMH5pknjSYHqygG1h9GRtVUuYDZzvwtrgfgw52OvXGKCA=="}],"memo":""},"metadata":{"timestamp":"1743762325"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"SetRealmNotice","args":["A new boards [version](https://gno.land/r/devx000/gnoland/boards2/v1rc2) is available which fixes a couple of issues and explores a UI which is is more in line with classic Reddit"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Ppe3T0NpwmRcYGu73lTjp9yQAmB8G032mX/yTIeOOqn3nJcP9WKCR1OSznIw1PFoYXea1fMEyrgibY17UVavBQ=="}],"memo":""},"metadata":{"timestamp":"1743762441"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"SetRealmNotice","args":["A new boards [version](https://gno.land/r/devx000/gnoland/boards2/v1rc2) is available which fixes a couple of issues and explores a UI which is more in line with classic Reddit"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"QcTtCygzcmmMQ9oCvrxZEO7KVS2rVwjaJvkFvVlJD1f1gHMe6QHWWnh7rqigtGEFROrHKE9X5SXfsKsR2xJ+Cw=="}],"memo":""},"metadata":{"timestamp":"1743762466"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15dz69sch7fkhc9gk57hpe4qea77thmy20apu9x","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Hp9yyz8tbzWiTA9XmiOMfxdRnhtTNFymcsAoxCj3svu85ZXXa9C48RsdAa1OcVmVYAlVaOKa00F5qrqHJ4NgDQ=="}],"memo":""},"metadata":{"timestamp":"1743762511"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1743762858"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1743762953"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1aykqe5ddemku5mwd3elmwtpj8jgss47xrqpag4","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"5W8pvzVVTwqR0USett9a5LYheSuuFicEmPt++BwXxXEqHWgVQtCQkClsJbLdf5hw1cSGg5h7KW1GVrL6b466DA=="}],"memo":""},"metadata":{"timestamp":"1743767985"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1dtuj65mgja87gh0c45pd3rt4cah0kkw9lzld4y","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"gVIdQBBxy3FqNuvip5XH1L48VyKevaNiPaa4nYyyW/3tDm1f82uOznciajCfJAe8rw2wSRB2W3UAg/Ds/RWPBw=="}],"memo":""},"metadata":{"timestamp":"1743768151"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1743769312"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1manfred47kzduec920z88wfr64ylksmdcedlf5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["test-manfred"]}],"fee":{"gas_wanted":"50000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"zIEkKLWS6zeUOjqJGwRvhP+ncHZYYHC7ps9USK+aWU+LXhRXgKvDSdSfbaaDc48kNeXPDc/sU23o4ZFIYPpBBg=="}],"memo":""},"metadata":{"timestamp":"1743774399"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1manfred47kzduec920z88wfr64ylksmdcedlf5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["6","testing testing","👋"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"sJcvKDbrNWnVo0ozE9r4AvUR3bVGhn4t4OrM/H+7gJ2YwBmQ20u56JUG1AeZl/WSdrlLl8pjTBZZskyT49+NAA=="}],"memo":""},"metadata":{"timestamp":"1743774450"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1etcvlu8zyuwnd7w0x0lcu4g2r7yzllyy62gpa5","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"9104212","gas_fee":"4742446ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"hUM8x4T6MQUzpf04aCJ2OtaF5uHBhNuulFwBKJZfLhNCs/3Wm7rCO5wuHUd+iFscgXk6dvnG8G4l7AFSQNqlBA=="}],"memo":""},"metadata":{"timestamp":"1743775038"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bXyHJdtgDmBHTgSUfcLbWb8QmJPrI9s457gJW1yahUnysV2CEJKBbj3TjSy91WEnIgxMWq21Ki9usgKlfzU4Cg=="}],"memo":""},"metadata":{"timestamp":"1743775997"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bXyHJdtgDmBHTgSUfcLbWb8QmJPrI9s457gJW1yahUnysV2CEJKBbj3TjSy91WEnIgxMWq21Ki9usgKlfzU4Cg=="}],"memo":""},"metadata":{"timestamp":"1743776002"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bXyHJdtgDmBHTgSUfcLbWb8QmJPrI9s457gJW1yahUnysV2CEJKBbj3TjSy91WEnIgxMWq21Ki9usgKlfzU4Cg=="}],"memo":""},"metadata":{"timestamp":"1743776017"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"UpdateStatus","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ub3uoxEExL3jMuQoAegvKmDOW1LWrOercf9BdWQkTdVih3mPoIH/7NqWsOjm/+gIgkLa0kYuSbQBsPfadlwYCQ=="}],"memo":""},"metadata":{"timestamp":"1743776022"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bXyHJdtgDmBHTgSUfcLbWb8QmJPrI9s457gJW1yahUnysV2CEJKBbj3TjSy91WEnIgxMWq21Ki9usgKlfzU4Cg=="}],"memo":""},"metadata":{"timestamp":"1743776027"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1743776083"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"name":"hello","path":"gno.land/r/test12/hello","files":[{"name":"package.gno","body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/eco","func":"Render","args":["Deployed through play.gno.land"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ot/V8bS6JNMgzRPR5JTnCh1C/IrUSVBplj9YxTkdum9+xncnn+Bz1wkK83vV5pnwz3yQG7k5wmzwegSGsvvkAw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743788578"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"name":"hworld","path":"gno.land/r/g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5/hworld","files":[{"name":"package.gno","body":"package hworld\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/sys/users","func":"ResolveName","args":["abc"]}],"fee":{"gas_wanted":"3428737","gas_fee":"7144ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"p1kO3fql5GXI69qID2B2pfmvydiypFq+4IIC0iUvpenfZH36w/ccxUKizKYfxh/egfg1Tl/EOVOwwixdPLi8Aw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743793364"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14n0zsnsk054uxwvnwmmqyrq6e87ynk5vq98qqp","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"gsOW2ax3szJeuurBkA9J/TM0XCaIyS47k/7kUvk9Gq2twiDVroCszGaw53FJD6FJ/FahqTRyzb656P4MLOX3AA=="}],"memo":""},"metadata":{"timestamp":"1743587748"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1dzzx5qwcmawqnhhd76ehkteas5v2dg42hqnd7g","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Fr1uKtG5S6/mDBxNS42Sbmz6AKHqveVyX1PLz0uXJgJ5Hve4XJgukjDM0/0TnrI5OGTpoqoIZ9evnvmx+MebCQ=="}],"memo":""},"metadata":{"timestamp":"1743587759"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kkS7eUe5RBU5tMINWW4NnKVZ/BXSBErtWniDmponcU3J6oxY6D2p17Zv9ZJeJk+oNmzWhpbIQ0hZ3A7G0pGICQ=="}],"memo":""},"metadata":{"timestamp":"1743587914"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kkS7eUe5RBU5tMINWW4NnKVZ/BXSBErtWniDmponcU3J6oxY6D2p17Zv9ZJeJk+oNmzWhpbIQ0hZ3A7G0pGICQ=="}],"memo":""},"metadata":{"timestamp":"1743587924"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kkS7eUe5RBU5tMINWW4NnKVZ/BXSBErtWniDmponcU3J6oxY6D2p17Zv9ZJeJk+oNmzWhpbIQ0hZ3A7G0pGICQ=="}],"memo":""},"metadata":{"timestamp":"1743587939"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xnrpwODqB9Qzy8lCyG8WhKFujPPtqnByd405Ea6SUtiep7uJyoEzw3D5R8NoasWmRQmXOiceh8x/ETIMAYwOAA=="}],"memo":""},"metadata":{"timestamp":"1743587980"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xnrpwODqB9Qzy8lCyG8WhKFujPPtqnByd405Ea6SUtiep7uJyoEzw3D5R8NoasWmRQmXOiceh8x/ETIMAYwOAA=="}],"memo":""},"metadata":{"timestamp":"1743588120"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kkS7eUe5RBU5tMINWW4NnKVZ/BXSBErtWniDmponcU3J6oxY6D2p17Zv9ZJeJk+oNmzWhpbIQ0hZ3A7G0pGICQ=="}],"memo":""},"metadata":{"timestamp":"1743588221"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xnrpwODqB9Qzy8lCyG8WhKFujPPtqnByd405Ea6SUtiep7uJyoEzw3D5R8NoasWmRQmXOiceh8x/ETIMAYwOAA=="}],"memo":""},"metadata":{"timestamp":"1743591981"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xnrpwODqB9Qzy8lCyG8WhKFujPPtqnByd405Ea6SUtiep7uJyoEzw3D5R8NoasWmRQmXOiceh8x/ETIMAYwOAA=="}],"memo":""},"metadata":{"timestamp":"1743591991"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"rcFAWr1sDO8na64+BQFNqCOiCOQiLSNI1QUKX2m0F1heLU/NOUKhKmbQ9fosCuEhsWELsdUBUaKJH5f4d+jHDg=="}],"memo":""},"metadata":{"timestamp":"1743597359"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2231690ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ocvr/JPKso//ytHIrkTURPWCS1jVsSnm4WrvMUCH9rDe7gyJPgsg6i95QyuqUNFpeiCf57nGq8BjbfufmFF4DA=="}],"memo":""},"metadata":{"timestamp":"1743597379"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"887428","gas_fee":"165039ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"L2sWfo8q5QmVPdiTdVZiTSjulJahNRAZCKd6DLAg/8pbYY259P+yH2fAdYiZ4+4FtnEk9Htv9+oBoeX38V12Bg=="}],"memo":""},"metadata":{"timestamp":"1743597384"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["42"]}],"fee":{"gas_wanted":"3059175","gas_fee":"6374ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"XZzhqFjZxRo0L9GenZ5HAPgE0BnjTFi028j4Ok74B5XgPaMXlj5pTpgCQWY31G6/AxtCeYMT0sNH+VxUKzfXCw=="}],"memo":""},"metadata":{"timestamp":"1743597409"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"KhhBvAFXQEh6n4ZUWU+dnMi3kozbMu32L+QF07g35SLWwHKNCpj5M9hzJDx2HMEqfe+jIyYKyqwolPi8AaJwCw=="}],"memo":""},"metadata":{"timestamp":"1743606306"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"vh0tJl7xCAhje36H2bE94wqsr/n3B/RAQNJeR4OS90NwvQCzZotPzdkhdQVbLdiNPbOdmbxRkK6FjDVIn8acCA=="}],"memo":""},"metadata":{"timestamp":"1743606668"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"/YN3AgTMVWUUwDs3P+vqnXxl4gUlKHwQqdLr1tzzDo0dIETPpbUbzXklVQJVB16dItO2GP4GB35BwBM0BINMDA=="}],"memo":""},"metadata":{"timestamp":"1743607723"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"SQ7dS02SL70+F6zE5E4Sk1vDb8zJQw7V84SkilcWmNMV32mOjy+wVf1xPbDjEbX84XGOhWRknf5/430X6ZU/Bg=="}],"memo":""},"metadata":{"timestamp":"1743608020"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"RwuWiR8W+j5QqToOUOoA4H3ysiUt5ToL3aFD9HMxWS/iEFGNd60d47YOUTxNNkY/P51813vWT/6CgHosxP4iDw=="}],"memo":""},"metadata":{"timestamp":"1743608226"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\n","admin"]}],"fee":{"gas_wanted":"8066534","gas_fee":"16806ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"1YOcGA+gTIMMHhGCPpndDSZKZZaCojfs0d7QiVAb7weQIk4QRJwOAtI2TqwzK8A65q+fWPqMm4kGIgTtBO/cDw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743608291"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"8967781","gas_fee":"18683ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"k6ifImJGjzHjrw5OxnlFED4lGN13DI/LiA9zW1SBYewS3fnwEyLx2wUQfgqdVlMZBQ6C8D9HCsByGQo9jSLYBQ=="}],"memo":""},"metadata":{"timestamp":"1743608301"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15dz69sch7fkhc9gk57hpe4qea77thmy20apu9x","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Hp9yyz8tbzWiTA9XmiOMfxdRnhtTNFymcsAoxCj3svu85ZXXa9C48RsdAa1OcVmVYAlVaOKa00F5qrqHJ4NgDQ=="}],"memo":""},"metadata":{"timestamp":"1743610126"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"DeleteTodo","args":["0"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"RFOIErW3yMP8ByuGPAnoOpUod4ulfP/QlVKtCKL4zDMh9H8mkcCi/y2UKm0enLlXmheSq/FHMiKbvuGeJWFXCQ=="}],"memo":""},"metadata":{"timestamp":"1743611628"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g14gvmle0a5hln0ct7wv857gucr7lmeust35736r","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"+rlC9mhE1bERSiDZ2YvktDxug3Mc9wtJReSHk+MTLi0jqjVTzTvI5pVqJzBO0KSImDbnBNWH0LZe38Sc9frGAQ=="}],"memo":""},"metadata":{"timestamp":"1743662226"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"gZlILkg4UOwV0qKQo2Id40lq46Ljw5DqPd7b1vYElGti3wOxxkEdO1i3YGJ1yv1WzL9ieLQ49xMVJ7qz3Ei8Cg=="}],"memo":""},"metadata":{"timestamp":"1743663236"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","send":"","pkg_path":"gno.land/r/demo/foo721","func":"BalanceOf","args":["g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"FocyEa3/BEh0f/BXj/1c7nfB6Vi071PklsMa8xqnRb+Ox/s8f3p2A3ZtpuYM/kCF/+BPBYQusAZOHfCioLhbBw=="}],"memo":""},"metadata":{"timestamp":"1743663533"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","send":"","pkg_path":"gno.land/r/demo/foo721","func":"BalanceOf","args":["g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj"]}],"fee":{"gas_wanted":"10000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ggFsr+PEH6suxXVxIY1hqEqRekl7hs8flF7ZTb7lCdSFqXo3/xE6aD8eNaEKy5o+MnvwHyRDXfybKZPWCDxABg=="}],"memo":""},"metadata":{"timestamp":"1743663709"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"VS+OtfNCE8oKNuNMlwWMfniOkuJr1QLr6+PplUe5bgNW8j7pGOt7OiO6iEYFhYRMOHEy8iYg5QYy68qfWc76BA=="}],"memo":""},"metadata":{"timestamp":"1743666971"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["42"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2233340ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"/6BW+YwJnX34zp8n5IsfJp1x9Ektt4uUpEJzYgj1AMiIHED4K+zPCOd8Lf68kCIYvoVVYoen+SBR0AbEFTsnDQ=="}],"memo":""},"metadata":{"timestamp":"1743666986"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["keyboard_worrier"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"dx08R8/b7RvesdrpJ6NriCsfFxceLl7SsKZ7nW/apu6BoC7syqV4PcR55AcdpE4Brr6RqVv4VkgF/G1KPbRgBA=="}],"memo":""},"metadata":{"timestamp":"1743672162"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743674585"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743675500"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676274"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676415"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676425"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676440"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676450"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676465"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","send":"","pkg_path":"gno.land/r/demo/userbook","func":"SignUp","args":null}],"fee":{"gas_wanted":"3000000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"b6ObPuETfc7XCJNEMllymwQMJSpPECA7YG3zpgVRo6f77xW1dUyLMx2kawbcJJxjZqXQ068cfBW96s1+S1kRBw=="}],"memo":""},"metadata":{"timestamp":"1743676600"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"RemoveMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\n"]}],"fee":{"gas_wanted":"7891622","gas_fee":"16441ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"89l+iGtobou/e+F/iiifDiQhNHbij0ij+5Ya3ziCacKLcGIlyTx1luTSgS6iPDKeh09cVbi6abEeN5kUm5YUAQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743677621"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","admin"]}],"fee":{"gas_wanted":"8066714","gas_fee":"16806ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"LcaSje7J3JjSKApJB+1EUE6tala9gr9Sq6BIUc+VqChPm0QcGhgR9W5ErCghvSKzGSP6M//zbXqTUGz0ejp+AA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743677721"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"887404","gas_fee":"1849ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"0WqDLPs6a/WA9hXWYVTP+x9TffQ4HbxoY/4ecDysE3Rp9HlXurepSylz4pqFcL0B/BOY885KLvF70bhsM1veAg=="}],"memo":""},"metadata":{"timestamp":"1743677742"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["hello !"]}],"fee":{"gas_wanted":"887311","gas_fee":"1849ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"HbQPKoyJhk/D9pzUPjl7/Z6WSeszhbMmucUwdHYB0/aZCEZ0atxLOoaF4ZUWlaVlMIlBKD/l+/1sRnX6N9GRBA=="}],"memo":""},"metadata":{"timestamp":"1743677757"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"OSUd1L/RiFhkxA3PW+7ADa1mygPaPbouzWwlOL949dJSBnV2hIBh57uz37wAxxBghvtS8LhSnLZ+riJwyBLXCg=="}],"memo":""},"metadata":{"timestamp":"1743680159"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"ChangeMemberRole","args":["0","g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"OMuLXy3HO9JO/FO5LMoSRcr9sojwnppOxU8yXqUWK1xGfftIlomdBUNyxMe78GQRE9J67Iw1EgySadzxatvwDg=="}],"memo":""},"metadata":{"timestamp":"1743680391"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/leon/hof","func":"Upvote","args":["gno.land%2Fr%2Fursulovic%2Fhome"]}],"fee":{"gas_wanted":"12000000","gas_fee":"1721880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"X/eJPJL8ZV8bQZLTk7PadUV+DemIEj/2JLxSv1Y5iosIf2YTwrcxDgidOMfkqyUxQTFmHo/aYr1WQAVPbh/kCw=="}],"memo":""},"metadata":{"timestamp":"1743682979"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1d2hvkqhqckhzpaum09c002fesdw89qrcg9zqws","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ReZNIs5Bl66EsrE8h8FAxIdTKLQTT3JLhrtrMX1xvE0SdiyZ6kXOqG0tInvf/5XZlaoDQ5NazQIPDp5AljTEAw=="}],"memo":""},"metadata":{"timestamp":"1743683221"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1lrsrj4auaffjk538w3x2c9gzyth2m0n39zcg6d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"AKXPlpnjspmHDpF+EQEoze/h/1Dw8Vf43t5GzNgg1Yta3kMRIc06TxltwYPRuJYQRbro5iLt8dh572vXMvChDA=="}],"memo":""},"metadata":{"timestamp":"1743704885"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["2","1","1","Hey hey hey"]}],"fee":{"gas_wanted":"60000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"epppoxiBBFm5IjbU64qXJewGo/7oLGKO0VJsduVtOJYhqNcJSWezt1izHysK6CqGG7DxS2N0SqXR31NNQK8VAw=="}],"memo":""},"metadata":{"timestamp":"1743711043"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["aeddi"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"dXUiTfFR460T8IopbpjSaK+P/nicuQjLa2LAeldy3Rcm65g9P4BnnZ6k0lWXUNaAMsWH7BvQNH3oFdu/YF2nCA=="}],"memo":""},"metadata":{"timestamp":"1743711163"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g16znvp6wxupkkds8mmmtxhvmdly08xpa4rqagp3","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"k1kPHgJM5ggOKZcD9HavykmLc/dkrGogJ2/JBROmxPbT2e6drMzTk2z8OCHjxyjze2/ubWCbvnPCWxr29ZCzBA=="}],"memo":""},"metadata":{"timestamp":"1743712058"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["3","This is a test","Hello World"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"RANRlJvwsfsnr5pkPb5EdNIGFSxl7v207n0pAGgI4Zhqws32Gzv92BzizFTsaQT41XoGZVH6ljWfrLf1bDcxDQ=="}],"memo":""},"metadata":{"timestamp":"1743712737"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"1648310ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"eKVgBjNuPm+xht6YH/l5tXH71McvdcgSAPjlHJL5noOfVFMIE/Mbs7pP0pXECIqQ5QNouD12V/EAT81eN1/yDQ=="}],"memo":""},"metadata":{"timestamp":"1743715914"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"+AnQgsjqwBa57nMiYLJQCgFzuDDAVhkt5x/rVFAqSsshwUs09yf3ksUe+z6zmw5Wi9GaGolmc5WelUD+fIAfDQ=="}],"memo":""},"metadata":{"timestamp":"1743738197"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["1","1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"+TtfHUdK8eOn61UU0S11TklKxw+opiesLW6peiVOPMqVUfm2io3Bb8M745B64R9w7/Wa5gIjwFsK3NBwCFCcDw=="}],"memo":""},"metadata":{"timestamp":"1743738288"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"DeletePost","args":["1","2","2"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"TyJBvACuE8gHyNed5jeU2OGyhr+/0knJHIWBJmSCoY2Bk+O7O5BHus2ZqT2EKJVm6UwbFu1jtjMTJhkTy9TfBw=="}],"memo":""},"metadata":{"timestamp":"1743738333"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/leon/hof","func":"Upvote","args":["gno.land%2Fr%2Fursulovic%2Fhome"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"7w85qlNpnp4p/g8ld6Cg3B1tNTKr/jEbkmOkjkZGO19A56uN/1qTbsgdnIkLD+dIKW8LlP5b9/89tr8c1PZ1Ag=="}],"memo":""},"metadata":{"timestamp":"1743738469"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["1","2"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"tVowNVrP7Rk8tQ2rKYAkIhhXBOeKDV9XBo0/1HE4zX9ZcsBE+a7nKjqIxofQV6cUbRGE4x8P9A29Ks5KjpH6Bg=="}],"memo":""},"metadata":{"timestamp":"1743738680"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1nnl20472w0effzcexuqmk4ntn20wg95ytygy55","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"TtQ39YW0Ecf2merJzXjISiic48o1tc2YJegiC3SJm+OnAbYJEhJBNgAbLJZupSz0pl3HxAWoLIaNSftWGG8TAw=="}],"memo":""},"metadata":{"timestamp":"1743739027"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1nnl20472w0effzcexuqmk4ntn20wg95ytygy55","to_address":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","amount":"9000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"sX5sD9n5f/MQ7BhkmovbjAPmb9q0TEGDnsxy1exAJd265fJfMPpNbIARz6iJTbfjHnb6dmVuD/FBYELfocJrAQ=="}],"memo":""},"metadata":{"timestamp":"1743739047"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1zeq4hn2hd2azde6p9x2ya9gp3ug30vuuv56pym","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"WyfGApIENWM21BnfCCjLar/JmI1YIu5XyCAbW8RZ8uIr48YZZUenfn9OFS6uhDSgydFHEi4dGzkJnBNapTooCA=="}],"memo":""},"metadata":{"timestamp":"1743739590"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1zeq4hn2hd2azde6p9x2ya9gp3ug30vuuv56pym","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["2","2"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"HB9tk6ZVTE/MYUYpIhVbPLWSf5La5tT4Oily6u9oEypn5a7y6GZ3bRQH53PKVk0HE2KIyfw+J29M0rBa8fjbBQ=="}],"memo":""},"metadata":{"timestamp":"1743739625"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1p5pa2sp4elcja2u8wn36zv3plsyp8xrqgz0usf","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"HEdysJ0aqWgRYYCb7syiZ8D5AblFIRfXXWXhH3P3T5Dyxg1odHNQ2VwoYTQ9NX9FubLt6JItuMQ+8PlYtBNZAA=="}],"memo":""},"metadata":{"timestamp":"1743750714"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Rqf9NhUO3sQwKUmNU7GrX8d1pzZRaNjOWqAx/XL4psTx/txvDZWdPpvbwoZFvfuaZ99/Nd07Ht9HjmXOUQCyBw=="}],"memo":""},"metadata":{"timestamp":"1743750895"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":["aeddi-testing"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"j7ShULKK/MB8bsIL15PbOfQRCz34X7VpeVsv61YMZ9EsGEdv9rdy7NSXFf9BbKtU7acnTzc36bi8RXBqonWCAQ=="}],"memo":""},"metadata":{"timestamp":"1743751141"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","to_address":"g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","amount":"1000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"DeFguiM0qG5+CTtuNr1BM3z42UJAkDBg+7g+/7/2kLY21hC+Z2uWwpVpDehGEG9a0Pcs8e1OybcqYFKhHZ/RDg=="}],"memo":""},"metadata":{"timestamp":"1743755182"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1etcvlu8zyuwnd7w0x0lcu4g2r7yzllyy62gpa5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Ye42Dwic6f8nEQVxwxVg8DNVnlxMscInjIntiz5mOTFi4Edsqw8L1g7n4NfeQb62FOz6DiHZVoEurLEr6YhaDw=="}],"memo":""},"metadata":{"timestamp":"1743760782"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1etcvlu8zyuwnd7w0x0lcu4g2r7yzllyy62gpa5","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","-1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"E0mdmjXzFwUjU0DWIzTiQRys1zkvBJ7KYowkKTnJV83tGH56kvAGutHarfu/L1Sn3z2TgKls3XeI6xIrDBn+AQ=="}],"memo":""},"metadata":{"timestamp":"1743760847"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kuCtWj1TUpFzucoJ8iAhcnx9Kmvr629VZ2v3JFLL9O/GX4U97k2O0jpn4usPHV3W6RvsRihX+bXQSZHyYYkNDw=="}],"memo":""},"metadata":{"timestamp":"1743761662"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","package":{"name":"boards2","path":"gno.land/r/devx000/gnoland/boards2/v1rc2","files":[{"name":"board.gno","body":"package boards2\n\nimport (\n\t\"net/url\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\ntype BoardID uint64\n\nfunc (id BoardID) String() string {\n\treturn strconv.Itoa(int(id))\n}\n\nfunc (id BoardID) Key() string {\n\treturn padZero(uint64(id), 10)\n}\n\ntype Board struct {\n\tid        BoardID // only set for public boards.\n\tname      string\n\taliases   []string\n\tcreator   std.Address\n\tthreads   avl.Tree // Post.id -\u003e *Post\n\tpostsCtr  uint64   // increments Post.id\n\tcreatedAt time.Time\n\tdeleted   avl.Tree // TODO reserved for fast-delete.\n\tperms     Permissions\n\treadonly  bool\n}\n\nfunc newBoard(id BoardID, name string, creator std.Address, p Permissions) *Board {\n\treturn \u0026Board{\n\t\tid:        id,\n\t\tname:      name,\n\t\tcreator:   creator,\n\t\tthreads:   avl.Tree{},\n\t\tcreatedAt: time.Now(),\n\t\tdeleted:   avl.Tree{},\n\t\tperms:     p,\n\t}\n}\n\nfunc (board *Board) GetID() BoardID {\n\treturn board.id\n}\n\n// GetName returns the name of the board.\nfunc (board *Board) GetName() string {\n\treturn board.name\n}\n\n// GetURL returns the relative URL of the board.\nfunc (board *Board) GetURL() string {\n\treturn strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\") + \":\" + url.PathEscape(board.name)\n}\n\n// GetURL returns relative board path relative.\n//\n// Note: returned result is not escaped. Use GetURL to get URL-encoded path.\nfunc (board *Board) GetPath() string {\n\treturn strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\") + \":\" + board.name\n}\n\nfunc (board *Board) GetPermissions() Permissions {\n\treturn board.perms\n}\n\n// SetReadonly updates board's read-only status.\nfunc (board *Board) SetReadonly(readonly bool) {\n\tboard.readonly = readonly\n}\n\n// IsReadonly checks if the board is a read-only board.\nfunc (board *Board) IsReadonly() bool {\n\treturn board.readonly\n}\n\nfunc (board *Board) GetThread(threadID PostID) (_ *Post, found bool) {\n\tv, found := board.threads.Get(threadID.Key())\n\tif !found {\n\t\treturn nil, false\n\t}\n\treturn v.(*Post), true\n}\n\nfunc (board *Board) AddThread(creator std.Address, title string, body string) *Post {\n\tpid := board.incGetPostID()\n\tthread := newPost(board, pid, creator, title, body, pid, 0, 0)\n\tboard.threads.Set(pid.Key(), thread)\n\treturn thread\n}\n\n// NOTE: this can be potentially very expensive for threads with many replies.\n// TODO: implement optional fast-delete where thread is simply moved.\nfunc (board *Board) DeleteThread(pid PostID) {\n\t_, removed := board.threads.Remove(pid.Key())\n\tif !removed {\n\t\tpanic(\"thread does not exist with ID \" + pid.String())\n\t}\n}\n\n// Render renders a board into Markdown.\nfunc (board *Board) Render(path, menu string) string {\n\tvar sb strings.Builder\n\n\tsb.WriteString(\"# \" + board.GetName() + \"  \\n\")\n\tsb.WriteString(\"Board created by \" + newUserLink(board.creator) + \" \")\n\tsb.WriteString(\"on \" + board.createdAt.Format(dateFormat))\n\tsb.WriteString(\", #\" + board.id.String())\n\n\tif board.IsReadonly() {\n\t\tsb.WriteString(\"  \\n_**Starting new threads and commenting is disabled**_\")\n\t}\n\n\t// XXX: Menu is rendered by the caller to deal with links and sub-menus\n\t// TODO: We should have the render logic separated from boards so avoid sending menu as argument\n\tif menu != \"\" {\n\t\tsb.WriteString(\"\\n\\n\")\n\t\tsb.WriteString(menu)\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\tsb.WriteString(\"\\n\\n---\\n\")\n\n\tif board.threads.Size() == 0 {\n\t\tsb.WriteString(\"### This board doesn't have any threads\\n\")\n\t\tif !board.IsReadonly() {\n\t\t\turl := board.GetPostFormURL()\n\t\t\tsb.WriteString(\"Do you want to [start a new conversation](\" + url + \") in this board ?\")\n\t\t}\n\t\treturn sb.String()\n\t}\n\n\tp, err := pager.New(path, board.threads.Size(), pager.WithPageSize(pageSizeThreads))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\trender := func(_ string, v any) bool {\n\t\tthread := v.(*Post)\n\t\tif thread.isHidden {\n\t\t\treturn false\n\t\t}\n\n\t\tsb.WriteString(thread.RenderSummary())\n\t\tsb.WriteString(\"\\n\")\n\t\treturn false\n\t}\n\n\tsb.WriteString(\"Sort by: \")\n\tr := realmpath.Parse(path)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tsb.WriteString(newLink(\"newest first\", r.String()))\n\t\tsb.WriteString(\"\\n\\n\")\n\t\tboard.threads.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tsb.WriteString(newLink(\"oldest first\", r.String()))\n\t\tsb.WriteString(\"\\n\\n\")\n\t\tboard.threads.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tsb.WriteString(\"\\n---\\n\")\n\t\tsb.WriteString(pager.Picker(p))\n\t}\n\n\treturn sb.String()\n}\n\nfunc (board *Board) incGetPostID() PostID {\n\tboard.postsCtr++\n\treturn PostID(board.postsCtr)\n}\n\nfunc (board *Board) GetURLFromThreadID(threadID PostID) string {\n\treturn board.GetURL() + \"/\" + threadID.String()\n}\n\nfunc (board *Board) GetURLFromReplyID(threadID, replyID PostID) string {\n\treturn board.GetURL() + \"/\" + threadID.String() + \"/\" + replyID.String()\n}\n\nfunc (board *Board) GetRenameFormURL() string { // TODO: These type of functions shouldn't be part of Board type\n\treturn txlink.Call(\n\t\t\"RenameBoard\",\n\t\t\"name\", board.name,\n\t\t\"newName\", \"\",\n\t)\n}\n\nfunc (board *Board) GetFreezeFormURL() string {\n\treturn txlink.Call(\n\t\t\"FreezeBoard\",\n\t\t\"boardID\", board.id.String(),\n\t)\n}\n\nfunc (board *Board) GetUnfreezeFormURL() string {\n\treturn txlink.Call(\n\t\t\"UnfreezeBoard\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"threadID\", \"\",\n\t\t\"replyID\", \"\",\n\t)\n}\n\nfunc (board *Board) GetFlaggingThresholdFormURL() string {\n\treturn txlink.Call(\n\t\t\"SetFlaggingThreshold\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"threshold\", \"\",\n\t)\n}\n\nfunc (board *Board) GetInviteMemberFormURL() string {\n\treturn txlink.Call(\n\t\t\"InviteMember\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"user\", \"\",\n\t\t\"role\", \"\",\n\t)\n}\n\nfunc (board *Board) GetPostFormURL() string {\n\treturn txlink.Call(\n\t\t\"CreateThread\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"title\", \"\",\n\t\t\"body\", \"\",\n\t)\n}\n\nfunc (board *Board) GetMembersURL() string {\n\treturn board.GetURL() + \"/members\"\n}\n\nfunc createDefaultBoardPermissions(owner std.Address) *DefaultPermissions {\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.SetSuperRole(RoleOwner)\n\tperms.AddRole(\n\t\tRoleAdmin,\n\t\tPermissionBoardRename,\n\t\tPermissionBoardFlaggingUpdate,\n\t\tPermissionMemberInvite,\n\t\tPermissionMemberRemove,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadEdit,\n\t\tPermissionThreadDelete,\n\t\tPermissionThreadRepost,\n\t\tPermissionThreadFlag,\n\t\tPermissionThreadFreeze,\n\t\tPermissionReplyCreate,\n\t\tPermissionReplyDelete,\n\t\tPermissionReplyFlag,\n\t\tPermissionReplyFreeze,\n\t\tPermissionRoleChange,\n\t)\n\tperms.AddRole(\n\t\tRoleModerator,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadEdit,\n\t\tPermissionThreadRepost,\n\t\tPermissionThreadFlag,\n\t\tPermissionReplyCreate,\n\t\tPermissionReplyFlag,\n\t)\n\tperms.AddRole(\n\t\tRoleGuest,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadRepost,\n\t\tPermissionReplyCreate,\n\t)\n\tperms.AddUser(owner, RoleOwner)\n\treturn perms\n}\n"},{"name":"board_readonly.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"time\"\n)\n\n// ReadonlyBoard defines an interface for readonly boards.\ntype ReadonlyBoard interface {\n\t// ID returns the unique identifier of the board.\n\tID() BoardID\n\n\t// Name returns the name of the board.\n\tName() string\n\n\t// Aliases returns a list with previous names assigned to the board.\n\tAliases() []string\n\n\t// Creator returns board's creator address.\n\tCreator() std.Address\n\n\t// LastPostID returns the ID assigned to the last created thread.\n\tLastPostID() uint64\n\n\t// CreatedAt returns the time when board was created.\n\tCreatedAt() time.Time\n\n\t// IsReadonly returns true when board shouldn't allow the creation of threads and comments.\n\tIsReadonly() bool\n\n\t// MembersCount returns the number of invited board members.\n\tMembersCount() int\n\n\t// IterateMembers allows reading the list of invited board members.\n\tIterateMembers(offset, count int, fn UsersIterFn)\n}\n\ntype readonlyBoard struct {\n\tboard *Board\n}\n\nfunc (b readonlyBoard) ID() BoardID {\n\treturn b.board.id\n}\n\nfunc (b readonlyBoard) Name() string {\n\treturn b.board.name\n}\n\nfunc (b readonlyBoard) Aliases() []string {\n\taliases := make([]string, len(b.board.aliases))\n\tfor i, s := range b.board.aliases {\n\t\taliases[i] = s\n\t}\n\treturn aliases\n}\n\nfunc (b readonlyBoard) Creator() std.Address {\n\treturn b.board.creator\n}\n\nfunc (b readonlyBoard) LastPostID() uint64 {\n\treturn b.board.postsCtr\n}\n\nfunc (b readonlyBoard) CreatedAt() time.Time {\n\treturn b.board.createdAt\n}\n\nfunc (b readonlyBoard) IsReadonly() bool {\n\treturn b.board.readonly\n}\n\nfunc (b readonlyBoard) MembersCount() int {\n\treturn b.board.perms.UsersCount()\n}\n\nfunc (b readonlyBoard) IterateMembers(offset, count int, fn UsersIterFn) {\n\tb.board.perms.IterateUsers(offset, count, fn)\n}\n"},{"name":"board_test.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nfunc TestBoardID_String(t *testing.T) {\n\tinput := BoardID(32)\n\n\tuassert.Equal(t, \"32\", input.String())\n}\n\nfunc TestBoardID_Key(t *testing.T) {\n\tinput := BoardID(128)\n\twant := strings.Repeat(\"0\", 7) + \"128\"\n\tuassert.Equal(t, want, input.Key())\n}\n\nfunc TestBoard_GetID(t *testing.T) {\n\twant := int(92)\n\tb := new(Board)\n\tb.id = BoardID(want)\n\tgot := int(b.GetID())\n\n\tuassert.Equal(t, got, want)\n\tuassert.NotEqual(t, got, want*want)\n}\n\nfunc TestBoard_GetURL(t *testing.T) {\n\tpkgPath := strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\tname := \"foobar_test_get_url123\"\n\twant := pkgPath + \":\" + name\n\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tboard := newBoard(1, name, addr, perms)\n\tgot := board.GetURL()\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetThread(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(1, \"test123\", addr, perms)\n\n\t_, ok := b.GetThread(12345)\n\tuassert.False(t, ok)\n\n\tpost := b.AddThread(addr, \"foo\", \"bar\")\n\t_, ok = b.GetThread(post.GetPostID())\n\tuassert.True(t, ok)\n}\n\nfunc TestBoard_DeleteThread(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(1, \"test123\", addr, perms)\n\n\tpost := b.AddThread(addr, \"foo\", \"bar\")\n\tid := post.GetPostID()\n\n\tb.DeleteThread(id)\n\n\t_, ok := b.GetThread(id)\n\tuassert.False(t, ok)\n}\n\nvar boardUrlPrefix = strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\nfunc TestBoard_GetURLFromThreadID(t *testing.T) {\n\tboardName := \"test12345\"\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(BoardID(11), boardName, addr, perms)\n\twant := boardUrlPrefix + \":\" + boardName + \"/10\"\n\n\tgot := b.GetURLFromThreadID(10)\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetURLFromReplyID(t *testing.T) {\n\tboardName := \"test12345\"\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(BoardID(11), boardName, addr, perms)\n\twant := boardUrlPrefix + \":\" + boardName + \"/10/20\"\n\n\tgot := b.GetURLFromReplyID(10, 20)\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetPostFormURL(t *testing.T) {\n\tbid := BoardID(386)\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(bid, \"foo1234\", addr, perms)\n\texpect := txlink.Call(\"CreateThread\", \"boardID\", bid.String(), \"title\", \"\", \"body\", \"\")\n\n\tgot := b.GetPostFormURL()\n\tuassert.Equal(t, expect, got)\n}\n"},{"name":"boards.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tgPerms        Permissions\n\tgNotice       string\n\tgHelp         string\n\tgLastBoardID  BoardID\n\tgBoardsByID   avl.Tree // string(id) -\u003e *Board\n\tgBoardsByName avl.Tree // string(name) -\u003e *Board\n\tgLocked       struct {\n\t\trealm        bool\n\t\trealmMembers bool\n\t}\n)\n\nfunc init() {\n\t// TODO: Define and change the default realm owner (or owners)\n\towner := std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\n\t// Initialize default realm permissions\n\tgPerms = createDefaultPermissions(owner)\n\n\t// Import relevant initial state from previous version\n\tinitFromPrevVersion()\n}\n\n// incGetBoardID returns a new board ID.\nfunc incGetBoardID() BoardID {\n\tgLastBoardID++\n\treturn gLastBoardID\n}\n\n// getBoard returns a board for a specific ID.\nfunc getBoard(id BoardID) (_ *Board, found bool) {\n\tv, exists := gBoardsByID.Get(id.Key())\n\tif !exists {\n\t\treturn nil, false\n\t}\n\treturn v.(*Board), true\n}\n\n// mustGetBoardByName returns a board or panics when it's not found.\nfunc mustGetBoardByName(name string) *Board {\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tpanic(\"board does not exist with name: \" + name)\n\t}\n\treturn v.(*Board)\n}\n\n// mustGetBoard returns a board or panics when it's not found.\nfunc mustGetBoard(id BoardID) *Board {\n\tboard, found := getBoard(id)\n\tif !found {\n\t\tpanic(\"board does not exist with ID: \" + id.String())\n\t}\n\treturn board\n}\n\n// mustGetThread returns a thread or panics when it's not found.\nfunc mustGetThread(board *Board, threadID PostID) *Post {\n\tthread, found := board.GetThread(threadID)\n\tif !found {\n\t\tpanic(\"thread does not exist with ID: \" + threadID.String())\n\t}\n\treturn thread\n}\n\n// mustGetReply returns a reply or panics when it's not found.\nfunc mustGetReply(thread *Post, replyID PostID) *Post {\n\treply, found := thread.GetReply(replyID)\n\tif !found {\n\t\tpanic(\"reply does not exist with ID: \" + replyID.String())\n\t}\n\treturn reply\n}\n\nfunc mustGetPermissions(bid BoardID) Permissions {\n\tif bid != 0 {\n\t\tboard := mustGetBoard(bid)\n\t\treturn board.perms\n\t}\n\treturn gPerms\n}\n"},{"name":"flag.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n// DefaultFlaggingThreshold defines the default number of flags that hides flaggable items.\nconst DefaultFlaggingThreshold = 1\n\nvar gFlaggingThresholds avl.Tree // string(board ID) -\u003e int\n\ntype Flag struct {\n\tUser   std.Address\n\tReason string\n}\n\ntype Flaggable interface {\n\t// AddFlag adds a new flag to an item.\n\t//\n\t// Returns false if item was already flagged by user.\n\tAddFlag(flag Flag) bool\n\n\t// FlagsCount returns number of times item was flagged.\n\tFlagsCount() int\n}\n\n// flagItem adds a flag to a flaggable item (post, thread, etc).\n//\n// Returns whether flag count threshold is reached and item can be hidden.\n//\n// Panics if flag count threshold was already reached.\nfunc flagItem(item Flaggable, flag Flag, threshold int) bool {\n\tif item.FlagsCount() \u003e= threshold {\n\t\tpanic(\"item flag count threshold exceeded: \" + strconv.Itoa(threshold))\n\t}\n\n\tif !item.AddFlag(flag) {\n\t\tpanic(\"item has been already flagged by a current user\")\n\t}\n\n\treturn item.FlagsCount() == threshold\n}\n\nfunc getFlaggingThreshold(bid BoardID) int {\n\tif v, ok := gFlaggingThresholds.Get(bid.String()); ok {\n\t\treturn v.(int)\n\t}\n\treturn DefaultFlaggingThreshold\n}\n"},{"name":"format.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/r/sys/users\"\n)\n\nfunc padLeft(s string, length int) string {\n\tif len(s) \u003e= length {\n\t\treturn s\n\t}\n\treturn strings.Repeat(\" \", length-len(s)) + s\n}\n\nfunc padZero(u64 uint64, length int) string {\n\ts := strconv.Itoa(int(u64))\n\tif len(s) \u003e= length {\n\t\treturn s\n\t}\n\treturn strings.Repeat(\"0\", length-len(s)) + s\n}\n\nfunc indentBody(indent string, body string) string {\n\tvar (\n\t\tres   string\n\t\tlines = strings.Split(body, \"\\n\")\n\t)\n\tfor i, line := range lines {\n\t\tif i \u003e 0 {\n\t\t\tres += \"\\n\"\n\t\t}\n\t\tres += indent + line\n\t}\n\treturn res\n}\n\n// NOTE: length must be greater than 3.\nfunc summaryOf(text string, length int) string {\n\tlines := strings.SplitN(text, \"\\n\", 2)\n\tline := lines[0]\n\tif len(line) \u003e length {\n\t\tline = line[:(length-3)] + \"...\"\n\t} else if len(lines) \u003e 1 {\n\t\t// len(line) \u003c= 80\n\t\tline = line + \"...\"\n\t}\n\treturn line\n}\n\n// newLink returns a Markdown link.\nfunc newLink(label, uri string) string {\n\treturn \"[\" + label + \"](\" + uri + \")\"\n}\n\n// newButtonLink returns a Makdown link with label wrapped in brackets.\nfunc newButtonLink(label, uri string) string {\n\treturn `[\\[` + label + `\\]](` + uri + \")\"\n}\n\n// newUserLink returns a Markdown link for an account to the users\n// realm or the address as string when a user is not registered.\nfunc newUserLink(addr std.Address) string {\n\tuser := users.ResolveAddress(addr)\n\tif user != nil {\n\t\treturn user.RenderLink(\"\")\n\t}\n\treturn addr.String()\n}\n"},{"name":"migrations.gno","body":"package boards2\n\nimport (\n\tv1rc1 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nfunc initFromPrevVersion() {\n\timportRealmMembers()\n}\n\nfunc importRealmMembers() {\n\tv1rc1.IterateRealmMembers(0, func(member v1rc1.User) bool {\n\t\t// XXX: This wouldn't be required if a boards2 package is created\n\t\troles := make([]Role, len(member.Roles))\n\t\tfor i, r := range member.Roles {\n\t\t\troles[i] = Role(r)\n\t\t}\n\n\t\tgPerms.AddUser(member.Address, roles...)\n\t\treturn false\n\t})\n}\n"},{"name":"permissions.gno","body":"package boards2\n\nimport \"std\"\n\nconst (\n\tPermissionRealmHelp           Permission = \"realm:help\"\n\tPermissionRealmLock                      = \"realm:lock\"\n\tPermissionRealmNotice                    = \"realm:notice\"\n\tPermissionBoardCreate                    = \"board:create\"\n\tPermissionBoardFlaggingUpdate            = \"board:flagging-update\"\n\tPermissionBoardFreeze                    = \"board:freeze\"\n\tPermissionBoardRename                    = \"board:rename\"\n\tPermissionThreadCreate                   = \"thread:create\"\n\tPermissionThreadDelete                   = \"thread:delete\"\n\tPermissionThreadEdit                     = \"thread:edit\"\n\tPermissionThreadFlag                     = \"thread:flag\"\n\tPermissionThreadFreeze                   = \"thread:freeze\"\n\tPermissionThreadRepost                   = \"thread:repost\"\n\tPermissionReplyCreate                    = \"reply:create\"\n\tPermissionReplyDelete                    = \"reply:delete\"\n\tPermissionReplyFlag                      = \"reply:flag\"\n\tPermissionReplyFreeze                    = \"reply:freeze\"\n\tPermissionMemberInvite                   = \"member:invite\"\n\tPermissionMemberRemove                   = \"member:remove\"\n\tPermissionRoleChange                     = \"role:change\"\n\tPermissionPermissionsUpdate              = \"permissions:update\"\n)\n\nconst (\n\tRoleGuest     Role = \"\"\n\tRoleOwner          = \"owner\"\n\tRoleAdmin          = \"admin\"\n\tRoleModerator      = \"moderator\"\n)\n\ntype (\n\t// Permission defines the type for permissions.\n\tPermission string\n\n\t// Role defines the type for user roles.\n\tRole string\n\n\t// Args is a list of generic arguments.\n\tArgs []interface{}\n\n\t// User contains user info.\n\tUser struct {\n\t\tAddress std.Address\n\t\tRoles   []Role\n\t}\n\n\t// UsersIterFn defines a function type to iterate users.\n\tUsersIterFn func(User) bool\n\n\t// Permissions define an interface to for permissioned execution.\n\tPermissions interface {\n\t\t// HasRole checks if a user has a specific role assigned.\n\t\tHasRole(std.Address, Role) bool\n\n\t\t// HasPermission checks if a user has a specific permission.\n\t\tHasPermission(std.Address, Permission) bool\n\n\t\t// WithPermission calls a callback when a user has a specific permission.\n\t\t// It panics on error.\n\t\tWithPermission(std.Address, Permission, Args, func(Args))\n\n\t\t// AddUser adds a new user to the permissioner.\n\t\tAddUser(std.Address, ...Role) error\n\n\t\t// SetUserRoles sets the roles of a user.\n\t\tSetUserRoles(std.Address, ...Role) error\n\n\t\t// RemoveUser removes a user from the permissioner.\n\t\tRemoveUser(std.Address) (removed bool)\n\n\t\t// HasUser checks if a user exists.\n\t\tHasUser(std.Address) bool\n\n\t\t// UsersCount returns the total number of users the permissioner contains.\n\t\tUsersCount() int\n\n\t\t// IterateUsers iterates permissions' users.\n\t\tIterateUsers(start, count int, fn UsersIterFn) bool\n\t}\n)\n"},{"name":"permissions_default.gno","body":"package boards2\n\nimport (\n\t\"errors\"\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\t\"gno.land/r/sys/users\"\n)\n\n// DefaultPermissions manages users, roles and permissions.\ntype DefaultPermissions struct {\n\tsuperRole Role\n\tdao       *commondao.CommonDAO\n\tusers     *avl.Tree // string(std.Address) -\u003e []Role\n\troles     *avl.Tree // string(role) -\u003e []Permission\n}\n\n// NewDefaultPermissions creates a new permissions type.\n// This type is a default implementation to handle users, roles and permissions.\nfunc NewDefaultPermissions(dao *commondao.CommonDAO) *DefaultPermissions {\n\tif dao == nil {\n\t\tpanic(\"default permissions require a DAO\")\n\t}\n\n\tdp := \u0026DefaultPermissions{\n\t\tdao:   dao,\n\t\troles: avl.NewTree(),\n\t\tusers: avl.NewTree(),\n\t}\n\n\t// Make sure that DAO users are indexed when DAO has members\n\tdao.Members().IterateByOffset(0, dao.Members().Size(), func(m std.Address) bool {\n\t\tdp.users.Set(m.String(), []Role(nil))\n\t\treturn false\n\t})\n\n\treturn dp\n}\n\n// SetSuperRole assigns a super role.\n// A super role is one that have all permissions.\n// These type of role doesn't need to be mapped to any permission.\nfunc (dp *DefaultPermissions) SetSuperRole(r Role) {\n\tdp.superRole = r\n}\n\n// AddRole add a role with one or more assigned permissions.\nfunc (dp *DefaultPermissions) AddRole(r Role, p Permission, extra ...Permission) {\n\tdp.roles.Set(string(r), append([]Permission{p}, extra...))\n}\n\n// RoleExists checks if a role exists.\nfunc (dp DefaultPermissions) RoleExists(r Role) bool {\n\tif dp.superRole != \"\" \u0026\u0026 r == dp.superRole {\n\t\treturn true\n\t}\n\n\treturn dp.roles.Iterate(\"\", \"\", func(name string, _ interface{}) bool {\n\t\treturn Role(name) == r\n\t})\n}\n\n// GetUserRoles returns the list of roles assigned to a user.\nfunc (dp DefaultPermissions) GetUserRoles(user std.Address) []Role {\n\tv, found := dp.users.Get(user.String())\n\tif !found {\n\t\treturn nil\n\t}\n\treturn v.([]Role)\n}\n\n// HasRole checks if a user has a specific role assigned.\nfunc (dp DefaultPermissions) HasRole(user std.Address, r Role) bool {\n\tfor _, role := range dp.GetUserRoles(user) {\n\t\tif role == r {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// HasPermission checks if a user has a specific permission.\nfunc (dp DefaultPermissions) HasPermission(user std.Address, perm Permission) bool {\n\tfor _, r := range dp.GetUserRoles(user) {\n\t\tif dp.superRole == r {\n\t\t\treturn true\n\t\t}\n\n\t\tv, found := dp.roles.Get(string(r))\n\t\tif !found {\n\t\t\tcontinue\n\t\t}\n\n\t\tfor _, p := range v.([]Permission) {\n\t\t\tif p == perm {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// AddUser adds a new user to permissions.\nfunc (dp *DefaultPermissions) AddUser(user std.Address, roles ...Role) error {\n\tif dp.users.Has(user.String()) {\n\t\treturn errors.New(\"user already exists\")\n\t}\n\n\tdp.dao.Members().Add(user)\n\treturn dp.setUserRoles(user, roles...)\n}\n\n// SetUserRoles sets the roles of a user.\nfunc (dp *DefaultPermissions) SetUserRoles(user std.Address, roles ...Role) error {\n\tif !dp.users.Has(user.String()) {\n\t\treturn errors.New(\"user not found\")\n\t}\n\treturn dp.setUserRoles(user, roles...)\n}\n\n// RemoveUser removes a user from permissions.\nfunc (dp *DefaultPermissions) RemoveUser(user std.Address) bool {\n\t_, removed := dp.users.Remove(user.String())\n\tdp.dao.Members().Remove(user)\n\treturn removed\n}\n\n// HasUser checks if a user exists.\nfunc (dp DefaultPermissions) HasUser(user std.Address) bool {\n\treturn dp.users.Has(user.String())\n}\n\n// UsersCount returns the total number of users the permissioner contains.\nfunc (dp DefaultPermissions) UsersCount() int {\n\treturn dp.users.Size()\n}\n\n// IterateUsers iterates permissions' users.\nfunc (dp DefaultPermissions) IterateUsers(start, count int, fn UsersIterFn) bool {\n\treturn dp.users.IterateByOffset(start, count, func(k string, v interface{}) bool {\n\t\treturn fn(User{\n\t\t\tAddress: std.Address(k),\n\t\t\tRoles:   v.([]Role),\n\t\t})\n\t})\n}\n\n// WithPermission calls a callback when a user has a specific permission.\n// It panics on error or when a handler panics.\n// Callbacks are by default called when there is no handle registered for the permission.\nfunc (dp *DefaultPermissions) WithPermission(user std.Address, perm Permission, args Args, cb func(Args)) {\n\tif !dp.HasPermission(user, perm) || !dp.dao.Members().Has(user) {\n\t\tpanic(\"unauthorized\")\n\t}\n\n\tswitch perm {\n\tcase PermissionBoardCreate:\n\t\tdp.handleBoardCreate(args, cb)\n\tcase PermissionBoardRename:\n\t\tdp.handleBoardRename(args, cb)\n\tcase PermissionMemberInvite:\n\t\tdp.handleMemberInvite(args, cb)\n\tcase PermissionRoleChange:\n\t\tdp.handleRoleChange(args, cb)\n\tdefault:\n\t\tcb(args)\n\t}\n}\n\nfunc (dp *DefaultPermissions) setUserRoles(user std.Address, roles ...Role) error {\n\tfor _, r := range roles {\n\t\tif !dp.RoleExists(r) {\n\t\t\treturn errors.New(\"invalid role: \" + string(r))\n\t\t}\n\t}\n\n\tdp.users.Set(user.String(), append([]Role(nil), roles...))\n\treturn nil\n}\n\nfunc (DefaultPermissions) handleBoardCreate(args Args, cb func(Args)) {\n\tname, ok := args[0].(string)\n\tif !ok {\n\t\tpanic(\"expected board name to be a string\")\n\t}\n\n\tassertBoardNameIsNotAddress(name)\n\tassertBoardNameBelongsToCaller(name)\n\n\tcb(args)\n}\n\nfunc (DefaultPermissions) handleBoardRename(args Args, cb func(Args)) {\n\tnewName, ok := args[2].(string)\n\tif !ok {\n\t\tpanic(\"expected new board name to be a string\")\n\t}\n\n\tassertBoardNameIsNotAddress(newName)\n\tassertBoardNameBelongsToCaller(newName)\n\n\tcb(args)\n}\n\nfunc (dp DefaultPermissions) handleMemberInvite(args Args, cb func(Args)) {\n\t// Make sure that only owners invite other owners\n\trole, ok := args[1].(Role)\n\tif !ok {\n\t\tpanic(\"expected a valid new member role\")\n\t}\n\n\tif role == RoleOwner {\n\t\tif !dp.HasRole(std.PreviousRealm().Address(), RoleOwner) {\n\t\t\tpanic(\"only owners are allowed to invite other owners\")\n\t\t}\n\t}\n\n\tcb(args)\n}\n\nfunc (dp DefaultPermissions) handleRoleChange(args Args, cb func(Args)) {\n\t// Owners and Admins can change roles.\n\t// Admins should not be able to assign or remove the Owner role from members.\n\tif dp.HasRole(std.PreviousRealm().Address(), RoleAdmin) {\n\t\trole, ok := args[2].(Role)\n\t\tif !ok {\n\t\t\tpanic(\"expected a valid member role\")\n\t\t}\n\n\t\tif role == RoleOwner {\n\t\t\tpanic(\"admins are not allowed to promote members to Owner\")\n\t\t} else {\n\t\t\tmember, ok := args[1].(std.Address)\n\t\t\tif !ok {\n\t\t\t\tpanic(\"expected a valid member address\")\n\t\t\t}\n\n\t\t\tif dp.HasRole(member, RoleOwner) {\n\t\t\t\tpanic(\"admins are not allowed to remove the Owner role\")\n\t\t\t}\n\t\t}\n\t}\n\n\tcb(args)\n}\n\nfunc createDefaultPermissions(owner std.Address) *DefaultPermissions {\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.SetSuperRole(RoleOwner)\n\tperms.AddRole(RoleAdmin, PermissionBoardCreate)\n\tperms.AddUser(owner, RoleOwner)\n\treturn perms\n}\n\nfunc assertBoardNameIsNotAddress(s string) {\n\tif std.Address(s).IsValid() {\n\t\tpanic(\"addresses are not allowed as board name\")\n\t}\n}\n\nfunc assertBoardNameBelongsToCaller(name string) {\n\t// When the board name is the name of a registered user\n\t// check that caller is the owner of the name.\n\tuser, _ := users.ResolveName(name)\n\tif user != nil \u0026\u0026 user.Addr() != std.PreviousRealm().Address() {\n\t\tpanic(\"board name is a user name registered to a different user\")\n\t}\n}\n"},{"name":"permissions_default_test.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/urequire\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n)\n\nvar _ Permissions = (*DefaultPermissions)(nil)\n\nfunc TestDefaultPermissionsWithPermission(t *testing.T) {\n\tcases := []struct {\n\t\tname       string\n\t\tuser       std.Address\n\t\tpermission Permission\n\t\targs       Args\n\t\tsetup      func() *DefaultPermissions\n\t\terr        string\n\t\tcalled     bool\n\t}{\n\t\t{\n\t\t\tname:       \"ok\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\tcalled: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with arguments\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\targs:       Args{\"a\", \"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\tcalled: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"no permission\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"unauthorized\",\n\t\t},\n\t\t{\n\t\t\tname:       \"is not a DAO member\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t\terr: \"unauthorized\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar (\n\t\t\t\tcalled bool\n\t\t\t\targs   Args\n\t\t\t)\n\n\t\t\tperms := tc.setup()\n\t\t\tcallback := func(a Args) {\n\t\t\t\targs = a\n\t\t\t\tcalled = true\n\t\t\t}\n\n\t\t\ttestCaseFn := func() {\n\t\t\t\tperms.WithPermission(tc.user, tc.permission, tc.args, callback)\n\t\t\t}\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.PanicsWithMessage(t, tc.err, testCaseFn, \"panic\")\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NotPanics(t, testCaseFn, \"no panic\")\n\t\t\t}\n\n\t\t\turequire.Equal(t, tc.called, called, \"callback called\")\n\t\t\turequire.Equal(t, len(tc.args), len(args), \"args count\")\n\t\t\tfor i, a := range args {\n\t\t\t\tuassert.Equal(t, tc.args[i].(string), a.(string))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsGetUserRoles(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []string\n\t\tsetup func() *DefaultPermissions\n\t}{\n\t\t{\n\t\t\tname:  \"single role\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple roles\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\", \"foo\", \"bar\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddRole(\"bar\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\", \"foo\", \"bar\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"without roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"not a user\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple users\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"bar\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"admin\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\", \"admin\", \"bar\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\troles := perms.GetUserRoles(tc.user)\n\n\t\t\turequire.Equal(t, len(tc.roles), len(roles), \"user role count\")\n\t\t\tfor i, r := range roles {\n\t\t\t\tuassert.Equal(t, tc.roles[i], string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsHasRole(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\trole  Role\n\t\tsetup func() *DefaultPermissions\n\t\twant  bool\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"admin\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"ok with multiple roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"foo\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"user without roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"has no role\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.HasRole(tc.user, tc.role)\n\t\t\tuassert.Equal(t, got, tc.want)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsHasPermission(t *testing.T) {\n\tcases := []struct {\n\t\tname       string\n\t\tuser       std.Address\n\t\tpermission Permission\n\t\tsetup      func() *DefaultPermissions\n\t\twant       bool\n\t}{\n\t\t{\n\t\t\tname:       \"ok\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with multiple users\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with multiple roles\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"other\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddRole(\"baz\", \"other\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\", \"baz\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"no permission\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"other\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.HasPermission(tc.user, tc.permission)\n\t\t\tuassert.Equal(t, got, tc.want)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsAddUser(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []Role\n\t\tsetup func() *DefaultPermissions\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname:  \"single user\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple users\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"a\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"duplicated user\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"user already exists\",\n\t\t},\n\t\t{\n\t\t\tname:  \"duplicated user\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"foo\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"invalid role: foo\",\n\t\t},\n\t\t{\n\t\t\tname: \"already a DAO member\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(\n\t\t\t\t\tcommondao.New(commondao.WithMember(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")),\n\t\t\t\t)\n\t\t\t},\n\t\t\terr: \"user already exists\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\n\t\t\terr := perms.AddUser(tc.user, tc.roles...)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.Error(t, err, \"expected an error\")\n\t\t\t\tuassert.Equal(t, tc.err, err.Error())\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NoError(t, err)\n\t\t\t}\n\n\t\t\troles := perms.GetUserRoles(tc.user)\n\t\t\tuassert.Equal(t, len(tc.roles), len(roles))\n\t\t\tfor i, r := range roles {\n\t\t\t\turequire.Equal(t, string(tc.roles[i]), string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsSetUserRoles(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []Role\n\t\tsetup func() *DefaultPermissions\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname:  \"single role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple roles\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"b\", \"c\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddRole(\"c\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"duplicated role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"c\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddRole(\"c\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\", \"c\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"remove roles\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\", \"b\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"x\", \"a\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"invalid role: x\",\n\t\t},\n\t\t{\n\t\t\tname: \"user not found\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t\terr: \"user not found\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\n\t\t\terr := perms.SetUserRoles(tc.user, tc.roles...)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.True(t, err != nil, \"expected an error\")\n\t\t\t\tuassert.Equal(t, tc.err, err.Error())\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NoError(t, err)\n\t\t\t}\n\n\t\t\troles := perms.GetUserRoles(tc.user)\n\t\t\tuassert.Equal(t, len(tc.roles), len(roles))\n\t\t\tfor i, r := range roles {\n\t\t\t\turequire.Equal(t, string(tc.roles[i]), string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsRemoveUser(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\tsetup func() *DefaultPermissions\n\t\twant  bool\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"user not found\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.RemoveUser(tc.user)\n\t\t\tuassert.Equal(t, tc.want, got)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsIterateUsers(t *testing.T) {\n\tusers := []User{\n\t\t{\n\t\t\tAddress: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tRoles:   []Role{\"foo\"},\n\t\t},\n\t\t{\n\t\t\tAddress: \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\",\n\t\t\tRoles:   []Role{\"foo\", \"bar\"},\n\t\t},\n\t\t{\n\t\t\tAddress: \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\",\n\t\t\tRoles:   []Role{\"bar\"},\n\t\t},\n\t}\n\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.AddRole(\"foo\", \"perm1\")\n\tperms.AddRole(\"bar\", \"perm2\")\n\tfor _, u := range users {\n\t\tperms.AddUser(u.Address, u.Roles...)\n\t}\n\n\tcases := []struct {\n\t\tname               string\n\t\tstart, count, want int\n\t}{\n\t\t{\n\t\t\tname:  \"exceed users count\",\n\t\t\tcount: 50,\n\t\t\twant:  3,\n\t\t},\n\t\t{\n\t\t\tname:  \"exact users count\",\n\t\t\tcount: 3,\n\t\t\twant:  3,\n\t\t},\n\t\t{\n\t\t\tname:  \"two users\",\n\t\t\tstart: 1,\n\t\t\tcount: 2,\n\t\t\twant:  2,\n\t\t},\n\t\t{\n\t\t\tname:  \"one user\",\n\t\t\tstart: 1,\n\t\t\tcount: 1,\n\t\t\twant:  1,\n\t\t},\n\t\t{\n\t\t\tname:  \"no iteration\",\n\t\t\tstart: 50,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar i int\n\t\t\tperms.IterateUsers(0, len(users), func(u User) bool {\n\t\t\t\turequire.True(t, i \u003c len(users), \"expect iterator to respect number of users\")\n\t\t\t\tuassert.Equal(t, users[i].Address, u.Address)\n\n\t\t\t\turequire.Equal(t, len(users[i].Roles), len(u.Roles), \"expect number of roles to match\")\n\t\t\t\tfor j, r := range u.Roles {\n\t\t\t\t\tuassert.Equal(t, string(users[i].Roles[j]), string(u.Roles[j]))\n\t\t\t\t}\n\n\t\t\t\ti++\n\t\t\t})\n\n\t\t\tuassert.Equal(t, i, len(users), \"expect iterator to iterate all users\")\n\t\t})\n\t}\n}\n"},{"name":"post.gno","body":"package boards2\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nconst dateFormat = \"2006-01-02 3:04pm MST\"\n\ntype PostID uint64\n\nfunc (id PostID) String() string {\n\treturn strconv.Itoa(int(id))\n}\n\nfunc (id PostID) Key() string {\n\treturn padZero(uint64(id), 10)\n}\n\n// A Post is a \"thread\" or a \"reply\" depending on context.\n// A thread is a Post of a Board that holds other replies.\ntype Post struct {\n\tboard         *Board\n\tid            PostID\n\tcreator       std.Address\n\ttitle         string // optional\n\tbody          string\n\tisHidden      bool\n\tisReadonly    bool\n\treplies       avl.Tree // Post.id -\u003e *Post\n\trepliesAll    avl.Tree // Post.id -\u003e *Post (all replies, for top-level posts)\n\treposts       avl.Tree // Board.id -\u003e Post.id\n\tflags         []Flag\n\tthreadID      PostID  // original Post.id\n\tparentID      PostID  // parent Post.id (if reply or repost)\n\trepostBoardID BoardID // original Board.id (if repost)\n\trepostsCount  uint64\n\tcreatedAt     time.Time\n\tupdatedAt     time.Time\n}\n\nfunc newPost(board *Board, id PostID, creator std.Address, title, body string, threadID, parentID PostID, repostBoardID BoardID) *Post {\n\treturn \u0026Post{\n\t\tboard:         board,\n\t\tid:            id,\n\t\tcreator:       creator,\n\t\ttitle:         title,\n\t\tbody:          body,\n\t\treplies:       avl.Tree{},\n\t\trepliesAll:    avl.Tree{},\n\t\treposts:       avl.Tree{},\n\t\tthreadID:      threadID,\n\t\tparentID:      parentID,\n\t\trepostBoardID: repostBoardID,\n\t\tcreatedAt:     time.Now(),\n\t}\n}\n\nfunc (post *Post) IsRepost() bool {\n\treturn post.repostBoardID != 0\n}\n\nfunc (post *Post) IsThread() bool {\n\t// repost threads also have parent ID\n\treturn post.parentID == 0 || post.IsRepost()\n}\n\nfunc (post *Post) GetBoard() *Board {\n\treturn post.board\n}\n\nfunc (post *Post) GetPostID() PostID {\n\treturn post.id\n}\n\nfunc (post *Post) GetParentID() PostID {\n\treturn post.parentID\n}\n\nfunc (post *Post) GetRepostBoardID() BoardID {\n\treturn post.repostBoardID\n}\n\nfunc (post *Post) GetCreator() std.Address {\n\treturn post.creator\n}\n\nfunc (post *Post) GetTitle() string {\n\treturn post.title\n}\n\nfunc (post *Post) GetBody() string {\n\treturn post.body\n}\n\nfunc (post *Post) GetCreatedAt() time.Time {\n\treturn post.createdAt\n}\n\nfunc (post *Post) GetUpdatedAt() time.Time {\n\treturn post.updatedAt\n}\n\nfunc (post *Post) AddFlag(flag Flag) bool {\n\t// TODO: sort flags for fast search in case of big thresholds\n\tfor _, v := range post.flags {\n\t\tif v.User == flag.User {\n\t\t\treturn false\n\t\t}\n\t}\n\n\tpost.flags = append(post.flags, flag)\n\treturn true\n}\n\nfunc (post *Post) FlagsCount() int {\n\treturn len(post.flags)\n}\n\nfunc (post *Post) SetVisible(isVisible bool) {\n\tpost.isHidden = !isVisible\n}\n\nfunc (post *Post) IsHidden() bool {\n\treturn post.isHidden\n}\n\nfunc (post *Post) SetReadonly(isReadonly bool) {\n\tpost.isReadonly = isReadonly\n}\n\nfunc (post *Post) IsReadonly() bool {\n\treturn post.isReadonly\n}\n\nfunc (post *Post) AddReply(creator std.Address, body string) *Post {\n\tboard := post.board\n\tpid := board.incGetPostID()\n\tpKey := pid.Key()\n\treply := newPost(board, pid, creator, \"\", body, post.threadID, post.id, 0)\n\t// TODO: Figure out how to remove this redundancy of data \"replies==repliesAll\" in threads\n\tpost.replies.Set(pKey, reply)\n\tif post.threadID == post.id {\n\t\tpost.repliesAll.Set(pKey, reply)\n\t} else {\n\t\tthread, _ := board.GetThread(post.threadID)\n\t\tthread.repliesAll.Set(pKey, reply)\n\t}\n\treturn reply\n}\n\nfunc (post *Post) Update(title string, body string) {\n\tpost.title = title\n\tpost.body = body\n\tpost.updatedAt = time.Now()\n}\n\nfunc (post *Post) HasReplies() bool {\n\treturn post.replies.Size() \u003e 0\n}\n\nfunc (thread *Post) GetReply(pid PostID) (_ *Post, found bool) {\n\tv, found := thread.repliesAll.Get(pid.Key())\n\tif !found {\n\t\treturn nil, false\n\t}\n\treturn v.(*Post), true\n}\n\nfunc (post *Post) AddRepostTo(creator std.Address, repost *Post, dst *Board) {\n\tif !post.IsThread() {\n\t\tpanic(\"cannot repost non-thread post\")\n\t}\n\n\tpost.repostsCount++\n\tdst.threads.Set(repost.id.Key(), repost)\n\tpost.reposts.Set(dst.id.Key(), repost.id)\n}\n\nfunc (post *Post) DeleteReply(replyID PostID) error {\n\tif !post.IsThread() {\n\t\t// TODO: Allow removing replies from parent replies too\n\t\tpanic(\"cannot delete reply from a non-thread post\")\n\t}\n\n\tif post.id == replyID {\n\t\treturn errors.New(\"expected an ID of an inner reply\")\n\t}\n\n\tkey := replyID.Key()\n\tv, removed := post.repliesAll.Remove(key)\n\tif !removed {\n\t\treturn errors.New(\"reply not found in thread\")\n\t}\n\n\t// TODO: Shouldn't reply be hidden instead of deleted? Maybe replace reply by a deleted message.\n\treply := v.(*Post)\n\tif reply.parentID != post.id {\n\t\tparent, _ := post.GetReply(reply.parentID)\n\t\tparent.replies.Remove(key)\n\t} else {\n\t\tpost.replies.Remove(key)\n\t}\n\treturn nil\n}\n\nfunc (post *Post) GetSummary() string {\n\treturn summaryOf(post.body, 80)\n}\n\nfunc (post *Post) GetURL() string {\n\tif post.IsThread() {\n\t\treturn post.board.GetURLFromThreadID(post.id)\n\t}\n\treturn post.board.GetURLFromReplyID(post.threadID, post.id)\n}\n\nfunc (post *Post) GetReplyFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"CreateReply\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"replyID\", \"0\",\n\t\t\t\"body\", \"\",\n\t\t)\n\t}\n\treturn txlink.Call(\n\t\t\"CreateReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t\t\"body\", \"\",\n\t)\n}\n\nfunc (post *Post) GetRepostFormURL() string {\n\treturn txlink.Call(\n\t\t\"CreateRepost\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.id.String(),\n\t\t\"title\", \"\",\n\t\t\"body\", \"\",\n\t\t\"destinationBoardID\", \"\",\n\t)\n}\n\nfunc (post *Post) GetDeleteFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"DeleteThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t)\n\t}\n\treturn txlink.Call(\n\t\t\"DeleteReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t)\n}\n\nfunc (post *Post) GetEditFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"EditThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"title\", post.GetTitle(),\n\t\t\t\"body\", post.GetBody(),\n\t\t)\n\t}\n\n\treturn txlink.Call(\n\t\t\"EditReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t\t\"body\", post.GetBody(),\n\t)\n}\n\nfunc (post *Post) GetFlagFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"FlagThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"reason\", \"\",\n\t\t)\n\t}\n\n\treturn txlink.Call(\n\t\t\"FlagReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t\t\"reason\", \"\",\n\t)\n}\n\nfunc (post *Post) RenderSummary() string {\n\tvar (\n\t\tb       strings.Builder\n\t\tpostURL = post.GetURL()\n\t\ttitle   = post.title\n\t)\n\n\tb.WriteString(\"**≡ \" + newLink(summaryOf(title, 80), postURL) + \"**  \\n\")\n\tb.WriteString(\"Created by \" + newUserLink(post.creator) + \" on \" + post.createdAt.Format(dateFormat))\n\tb.WriteString(\"  \\n**\")\n\tb.WriteString(strconv.Itoa(post.repliesAll.Size()) + \" replies • \")\n\tb.WriteString(strconv.Itoa(post.reposts.Size()) + \" reposts**\\n\")\n\treturn b.String()\n}\n\nfunc (post *Post) renderSourcePost(indent string) (string, *Post) {\n\tif !post.IsRepost() {\n\t\treturn \"\", nil\n\t}\n\n\tindent += \"\u003e \"\n\n\t// TODO: figure out a way to decouple posts from a global storage.\n\tboard, ok := getBoard(post.repostBoardID)\n\tif !ok {\n\t\treturn indentBody(indent, \"*⚠ Source board has been deleted*\\n\\n\"), nil\n\t}\n\n\tsrcPost, ok := board.GetThread(post.parentID)\n\tif !ok {\n\t\treturn indentBody(indent, \"*⚠ Source post has been deleted*\\n\\n\"), nil\n\t}\n\n\tif srcPost.isHidden {\n\t\treturn indentBody(indent, \"*⚠ Source post has been flagged as inappropriate*\\n\\n\"), nil\n\t}\n\n\treturn indentBody(indent, srcPost.GetSummary()) + \"\\n\\n\", srcPost\n}\n\n// renderPostContent renders post text content (including repost body).\n// Function will dump a predefined message instead of a body if post is hidden.\nfunc (post *Post) renderPostContent(sb *strings.Builder, indent string, levels int) {\n\tif post.isHidden {\n\t\t// Flagged comment should be hidden, but replies still visible (see: #3480)\n\t\t// Flagged threads will be hidden by render function caller.\n\t\tsb.WriteString(indentBody(indent, \"_⚠ Reply is hidden as it has been flagged as inappropriate_\"))\n\t\tsb.WriteString(\"\\n\")\n\t\treturn\n\t}\n\n\tsrcContent, srcPost := post.renderSourcePost(indent)\n\tif post.IsRepost() \u0026\u0026 srcPost != nil {\n\t\tsb.WriteString(\"  \\nThis thread is a repost of [another thread](\" + srcPost.GetURL() + \"): \\n\")\n\t}\n\n\tsb.WriteString(srcContent)\n\n\tif post.IsRepost() \u0026\u0026 srcPost == nil \u0026\u0026 len(post.body) \u003e 0 {\n\t\t// Add a newline to separate source deleted message from repost body content\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\tsb.WriteString(indentBody(indent, post.body))\n\tsb.WriteString(\"\\n\")\n\n\tif post.IsThread() {\n\t\t// Split content and controls for threads.\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\t// Buttons \u0026 counters\n\tsb.WriteString(indent)\n\tif !post.IsThread() {\n\t\tsb.WriteString(\"  \\n\")\n\t\tsb.WriteString(indent)\n\t}\n\n\tsb.WriteString(\"Created by \")\n\tsb.WriteString(newUserLink(post.creator))\n\tsb.WriteString(\" on \")\n\tsb.WriteString(post.createdAt.Format(dateFormat))\n\n\t// Add a reply view link to each top level reply\n\tif !post.IsThread() {\n\t\tsb.WriteString(\", \")\n\t\tsb.WriteString(newLink(\"#\"+post.id.String(), post.GetURL()))\n\t}\n\n\tif post.repostsCount \u003e 0 {\n\t\tsb.WriteString(\", \")\n\t\tsb.WriteString(strconv.FormatUint(post.repostsCount, 10))\n\t\tsb.WriteString(\" repost(s)\")\n\t}\n\n\tsb.WriteString(\"  \\n\")\n\tsb.WriteString(newLink(\"Flag\", post.GetFlagFormURL()))\n\n\tif post.IsThread() {\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Repost\", post.GetRepostFormURL()))\n\t}\n\n\tisReadonly := post.IsReadonly() || post.GetBoard().IsReadonly()\n\tif !isReadonly {\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Reply\", post.GetReplyFormURL()))\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Edit\", post.GetEditFormURL()))\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Delete\", post.GetDeleteFormURL()))\n\t}\n\n\tif levels == 0 {\n\t\tsb.WriteString(\" • \")\n\t\tif post.IsThread() {\n\t\t\tsb.WriteString(newLink(\"Show all Replies\", post.board.GetURLFromThreadID(post.GetPostID())))\n\t\t} else {\n\t\t\tsb.WriteString(newLink(\"View Thread\", post.board.GetURLFromThreadID(post.threadID)))\n\t\t}\n\t}\n\n\tsb.WriteString(\" \\n\")\n}\n\nfunc (post *Post) Render(path string, indent string, levels int) string {\n\tif post == nil {\n\t\treturn \"nil post\"\n\t}\n\n\t// TODO: pass a builder as arg into Render.\n\tvar sb strings.Builder\n\n\t// Thread reposts might not have a title, if so get title from source thread\n\ttitle := post.title\n\tif post.IsRepost() \u0026\u0026 title == \"\" {\n\t\tif board, ok := getBoard(post.repostBoardID); ok {\n\t\t\tif src, ok := board.GetThread(post.parentID); ok {\n\t\t\t\ttitle = src.GetTitle()\n\t\t\t}\n\t\t}\n\t}\n\n\tsb.WriteString(indent)\n\tif title != \"\" { // Replies don't have a title\n\t\tsb.WriteString(\"## \" + title + \"\\n\")\n\t}\n\tsb.WriteString(indent + \"\\n\")\n\n\tpost.renderPostContent(\u0026sb, indent, levels)\n\n\tif post.replies.Size() == 0 {\n\t\treturn sb.String()\n\t}\n\n\t// XXX: This triggers for reply views\n\tif levels == 0 {\n\t\tsb.WriteString(indent + \"\\n\")\n\t\tsb.WriteString(indent)\n\t\tsb.WriteString(\"\\n\")\n\t\treturn sb.String()\n\t}\n\n\tif path != \"\" {\n\t\tsb.WriteString(post.renderTopLevelReplies(path, indent, levels-1))\n\t} else {\n\t\tsb.WriteString(post.renderSubReplies(indent, levels-1))\n\t}\n\treturn sb.String()\n}\n\nfunc (post *Post) renderTopLevelReplies(path, indent string, levels int) string {\n\tp, err := pager.New(path, post.replies.Size(), pager.WithPageSize(pageSizeReplies))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tvar (\n\t\tb              strings.Builder\n\t\tcommentsIndent = indent + \"\u003e \"\n\t)\n\n\trender := func(_ string, v any) bool {\n\t\treply := v.(*Post)\n\n\t\tb.WriteString(indent)\n\t\tb.WriteString(\"\\n\")\n\t\tb.WriteString(reply.Render(\"\", commentsIndent, levels-1))\n\t\treturn false\n\t}\n\n\tb.WriteString(\"\\n\\n---\\nSort by: \")\n\tr := realmpath.Parse(path)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tb.WriteString(newLink(\"newest first\", r.String()))\n\t\tb.WriteString(\"\\n\")\n\t\tpost.replies.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tb.WriteString(newLink(\"oldest first\", r.String()))\n\t\tb.WriteString(\"\\n\")\n\t\tpost.replies.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tb.WriteString(\"\\n---\\n\")\n\t\tb.WriteString(pager.Picker(p))\n\t}\n\n\treturn b.String()\n}\n\nfunc (post *Post) renderSubReplies(indent string, levels int) string {\n\tvar (\n\t\tb              strings.Builder\n\t\tcommentsIndent = indent + \"\u003e \"\n\t)\n\n\tpost.replies.Iterate(\"\", \"\", func(_ string, v any) bool {\n\t\treply := v.(*Post)\n\n\t\tb.WriteString(indent)\n\t\tb.WriteString(\"\\n\")\n\t\tb.WriteString(reply.Render(\"\", commentsIndent, levels-1))\n\t\treturn false\n\t})\n\n\treturn b.String()\n}\n\nfunc (post *Post) RenderInner() string {\n\tif post.IsThread() {\n\t\tpanic(\"unexpected thread\")\n\t}\n\n\tvar (\n\t\ts         string\n\t\tthreadID  = post.threadID\n\t\tthread, _ = post.board.GetThread(threadID) // TODO: This seems redundant (post == thread)\n\t)\n\n\t// Fully render parent if it's not a repost.\n\tif !post.IsRepost() {\n\t\tvar (\n\t\t\tparent   *Post\n\t\t\tparentID = post.parentID\n\t\t)\n\n\t\tif thread.id == parentID {\n\t\t\tparent = thread\n\t\t} else {\n\t\t\tparent, _ = thread.GetReply(parentID)\n\t\t}\n\n\t\ts += parent.Render(\"\", \"\", 0) + \"\\n\"\n\t}\n\n\ts += post.Render(\"\", \"\u003e \", 5)\n\treturn s\n}\n"},{"name":"post_test.gno","body":"package boards2\n\nimport (\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nfunc TestPostUpdate(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tboard := newBoard(1, \"test123\", addr, perms)\n\tcreator := testutils.TestAddress(\"creator\")\n\tpost := newPost(board, 1, creator, \"Title\", \"Body\", 1, 0, 0)\n\ttitle := \"New Title\"\n\tbody := \"New body\"\n\n\tpost.Update(title, body)\n\n\tuassert.Equal(t, title, post.GetTitle())\n\tuassert.Equal(t, body, post.GetBody())\n\tuassert.False(t, post.GetUpdatedAt().IsZero())\n}\n\nfunc TestPostAddFlag(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tpost := createTestThread(t)\n\n\tflag := Flag{\n\t\tUser:   addr,\n\t\tReason: \"foobar\",\n\t}\n\tuassert.True(t, post.AddFlag(flag))\n\tuassert.False(t, post.AddFlag(flag), \"should reject flag from duplicate user\")\n\tuassert.Equal(t, post.FlagsCount(), 1)\n}\n\nfunc TestPostSetVisible(t *testing.T) {\n\tpost := createTestThread(t)\n\tuassert.False(t, post.IsHidden(), \"post should be visible by default\")\n\n\tpost.SetVisible(false)\n\tuassert.True(t, post.IsHidden(), \"post should be hidden\")\n\n\tpost.SetVisible(true)\n\tuassert.False(t, post.IsHidden(), \"post should be visible\")\n}\n\nfunc TestPostAddRepostTo(t *testing.T) {\n\t// TODO: Improve this unit test\n\taddr := testutils.TestAddress(\"creatorDstBoard\")\n\tperms := createDefaultBoardPermissions(addr)\n\tcases := []struct {\n\t\tname, title, body string\n\t\tdstBoard          *Board\n\t\tthread            *Post\n\t\tsetup             func() *Post\n\t\terr               string\n\t}{\n\t\t{\n\t\t\tname:     \"repost thread\",\n\t\t\ttitle:    \"Repost Title\",\n\t\t\tbody:     \"Repost body\",\n\t\t\tdstBoard: newBoard(42, \"dst123\", addr, perms),\n\t\t\tsetup:    func() *Post { return createTestThread(t) },\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid repost from reply\",\n\t\t\tsetup: func() *Post { return createTestReply(t) },\n\t\t\terr:   \"cannot repost non-thread post\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar (\n\t\t\t\trepost  *Post\n\t\t\t\tcreator = testutils.TestAddress(\"repostCreator\")\n\t\t\t\tthread  = tc.setup()\n\t\t\t)\n\n\t\t\tcreateRepost := func() {\n\t\t\t\tvar repostId PostID\n\t\t\t\tif tc.dstBoard != nil {\n\t\t\t\t\trepostId = tc.dstBoard.incGetPostID()\n\t\t\t\t}\n\n\t\t\t\trepost = newPost(tc.dstBoard, repostId, creator, tc.title, tc.body, repostId, thread.GetPostID(), thread.GetBoard().GetID())\n\t\t\t\tthread.AddRepostTo(creator, repost, tc.dstBoard)\n\t\t\t}\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\tuassert.PanicsWithMessage(t, tc.err, createRepost)\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\tuassert.NotPanics(t, createRepost)\n\t\t\t}\n\n\t\t\tr, found := tc.dstBoard.GetThread(repost.GetPostID())\n\t\t\tuassert.True(t, found)\n\t\t\tuassert.True(t, repost == r)\n\t\t\tuassert.Equal(t, tc.title, repost.GetTitle())\n\t\t\tuassert.Equal(t, tc.body, repost.GetBody())\n\t\t\tuassert.Equal(t, uint(thread.GetBoard().GetID()), uint(repost.GetRepostBoardID()))\n\t\t})\n\t}\n}\n\nfunc TestNewThread(t *testing.T) {\n\tcreator := testutils.TestAddress(\"creator\")\n\ttitle := \"Test Title\"\n\tbody := strings.Repeat(\"A\", 82)\n\tboardID := BoardID(1)\n\tthreadID := PostID(42)\n\tboardName := \"test123\"\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(boardID, boardName, creator, perms)\n\turl := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2:%s/%d\",\n\t\tboardName,\n\t\tuint(threadID),\n\t)\n\treplyURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=CreateReply\u0026boardID=%d\u0026body=\u0026replyID=0\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\teditURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=EditThread\u0026boardID=%d\u0026body=%s\u0026threadID=%d\u0026title=%s\",\n\t\tuint(boardID),\n\t\tbody,\n\t\tuint(threadID),\n\t\tstrings.ReplaceAll(title, \" \", \"+\"),\n\t)\n\trepostURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=CreateRepost\u0026boardID=%d\u0026body=\u0026destinationBoardID=\u0026threadID=%d\u0026title=\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\tdeleteURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=DeleteThread\u0026boardID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\tflagURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=FlagThread\u0026boardID=%d\u0026reason=\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\n\tthread := newPost(board, threadID, creator, title, body, threadID, 0, 0)\n\n\tuassert.True(t, thread.IsThread())\n\tuassert.Equal(t, uint(threadID), uint(thread.GetPostID()))\n\tuassert.False(t, thread.GetCreatedAt().IsZero())\n\tuassert.True(t, thread.GetUpdatedAt().IsZero())\n\tuassert.Equal(t, title, thread.GetTitle())\n\tuassert.Equal(t, body[:77]+\"...\", thread.GetSummary())\n\tuassert.False(t, thread.HasReplies())\n\tuassert.Equal(t, url, thread.GetURL())\n\tuassert.Equal(t, replyURL, thread.GetReplyFormURL())\n\tuassert.Equal(t, editURL, thread.GetEditFormURL())\n\tuassert.Equal(t, repostURL, thread.GetRepostFormURL())\n\tuassert.Equal(t, deleteURL, thread.GetDeleteFormURL())\n\tuassert.Equal(t, flagURL, thread.GetFlagFormURL())\n}\n\nfunc TestThreadAddReply(t *testing.T) {\n\treplier := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\tthreadID := uint(thread.GetPostID())\n\tbody := \"A reply\"\n\n\treply := thread.AddReply(replier, body)\n\n\tr, found := thread.GetReply(reply.GetPostID())\n\tuassert.True(t, found)\n\tuassert.True(t, reply == r)\n\tuassert.Equal(t, threadID+1, uint(reply.GetPostID()))\n\tuassert.Equal(t, reply.GetCreator(), replier)\n\tuassert.Equal(t, reply.GetBody(), body)\n\tuassert.True(t, thread.HasReplies())\n}\n\nfunc TestThreadGetReply(t *testing.T) {\n\tcases := []struct {\n\t\tname   string\n\t\tthread *Post\n\t\tsetup  func(thread *Post) (replyID PostID)\n\t\tfound  bool\n\t}{\n\t\t{\n\t\t\tname:   \"found\",\n\t\t\tthread: createTestThread(t),\n\t\t\tsetup: func(thread *Post) PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t\tfound: true,\n\t\t},\n\t\t{\n\t\t\tname:   \"not found\",\n\t\t\tthread: createTestThread(t),\n\t\t\tsetup:  func(*Post) PostID { return 42 },\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup(tc.thread)\n\n\t\t\treply, found := tc.thread.GetReply(replyID)\n\n\t\t\tuassert.Equal(t, tc.found, found)\n\t\t\tif reply != nil {\n\t\t\t\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestThreadDeleteReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tcases := []struct {\n\t\tname  string\n\t\tsetup func() PostID\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"ok nested\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.AddReply(testutils.TestAddress(\"replier2\"), \"\").GetPostID()\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid\",\n\t\t\tsetup: func() PostID { return thread.GetPostID() },\n\t\t\terr:   \"expected an ID of an inner reply\",\n\t\t},\n\t\t{\n\t\t\tname:  \"not found\",\n\t\t\tsetup: func() PostID { return 42 },\n\t\t\terr:   \"reply not found in thread\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup()\n\n\t\t\terr := thread.DeleteReply(replyID)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\tuassert.ErrorContains(t, err, tc.err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tuassert.NoError(t, err)\n\t\t\t_, found := thread.GetReply(replyID)\n\t\t\tuassert.False(t, found)\n\t\t})\n\t}\n}\n\nfunc TestThreadRenderSummary(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestThreadRender(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestThreadRenderInner(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestNewReply(t *testing.T) {\n\tcreator := testutils.TestAddress(\"creator\")\n\tbody := strings.Repeat(\"A\", 82)\n\tboardID := BoardID(1)\n\tthreadID := PostID(42)\n\tparentID := PostID(1)\n\treplyID := PostID(2)\n\tboardName := \"test123\"\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(boardID, boardName, creator, perms)\n\turl := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2:%s/%d/%d\",\n\t\tboardName,\n\t\tuint(threadID),\n\t\tuint(replyID),\n\t)\n\treplyURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=CreateReply\u0026boardID=%d\u0026body=\u0026replyID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(replyID),\n\t\tuint(threadID),\n\t)\n\tdeleteURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=DeleteReply\u0026boardID=%d\u0026replyID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(replyID),\n\t\tuint(threadID),\n\t)\n\n\treply := newPost(board, replyID, creator, \"\", body, threadID, parentID, 0)\n\n\tuassert.False(t, reply.IsThread())\n\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\tuassert.False(t, reply.GetCreatedAt().IsZero())\n\tuassert.True(t, reply.GetUpdatedAt().IsZero())\n\tuassert.False(t, reply.HasReplies())\n\tuassert.Equal(t, body[:77]+\"...\", reply.GetSummary())\n\tuassert.Equal(t, url, reply.GetURL())\n\tuassert.Equal(t, replyURL, reply.GetReplyFormURL())\n\tuassert.Equal(t, deleteURL, reply.GetDeleteFormURL())\n}\n\nfunc TestReplyAddReply(t *testing.T) {\n\treplier := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"parentReplier\"), \"\")\n\tparentReplyID := uint(parentReply.GetPostID())\n\tbody := \"A child reply\"\n\n\treply := parentReply.AddReply(replier, body)\n\n\tr, found := thread.GetReply(reply.GetPostID())\n\tuassert.True(t, found)\n\tuassert.True(t, reply == r)\n\tuassert.Equal(t, parentReplyID, uint(reply.GetParentID()))\n\tuassert.Equal(t, parentReplyID+1, uint(reply.GetPostID()))\n\tuassert.Equal(t, reply.GetCreator(), replier)\n\tuassert.Equal(t, reply.GetBody(), body)\n\tuassert.False(t, reply.HasReplies())\n\tuassert.True(t, parentReply.HasReplies())\n}\n\nfunc TestReplyGetReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"parentReplier\"), \"\")\n\tcases := []struct {\n\t\tname  string\n\t\tsetup func() PostID\n\t\tfound bool\n\t}{\n\t\t{\n\t\t\tname: \"found\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := parentReply.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t\tfound: true,\n\t\t},\n\t\t{\n\t\t\tname:  \"not found\",\n\t\t\tsetup: func() PostID { return 42 },\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup()\n\n\t\t\treply, found := thread.GetReply(replyID)\n\n\t\t\tuassert.Equal(t, tc.found, found)\n\t\t\tif reply != nil {\n\t\t\t\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestReplyDeleteReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\treply := parentReply.AddReply(testutils.TestAddress(\"replier2\"), \"\")\n\n\t// NOTE: Deleting a reply from a parent reply should eventually be suported\n\tuassert.PanicsWithMessage(t, \"cannot delete reply from a non-thread post\", func() {\n\t\tparentReply.DeleteReply(reply.GetPostID())\n\t})\n}\n\nfunc TestReplyRender(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc createTestThread(t *testing.T) *Post {\n\tt.Helper()\n\n\tcreator := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(1, \"test_board_123\", creator, perms)\n\treturn board.AddThread(creator, \"Title\", \"Body\")\n}\n\nfunc createTestReply(t *testing.T) *Post {\n\tt.Helper()\n\n\tcreator := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\treturn thread.AddReply(creator, \"Test message\")\n}\n"},{"name":"public.gno","body":"package boards2\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nconst (\n\t// MaxBoardNameLength defines the maximum length allowed for board names.\n\tMaxBoardNameLength = 50\n\n\t// MaxThreadTitleLength defines the maximum length allowed for thread titles.\n\tMaxThreadTitleLength = 100\n\n\t// MaxReplyLength defines the maximum length allowed for replies.\n\tMaxReplyLength = 300\n)\n\nvar (\n\treBoardName = regexp.MustCompile(`(?i)^[a-z]+[a-z0-9_\\-]{2,50}$`)\n\n\t// Minimalistic Markdown line prefix checks that if allowed would\n\t// break the current UI when submitting a reply. It denies replies\n\t// with headings, blockquotes or horizontal lines.\n\treDeniedReplyLinePrefixes = regexp.MustCompile(`(?m)^\\s*(#|---|\u003e)+`)\n)\n\n// SetHelp sets or updates boards realm help content.\nfunc SetHelp(content string) {\n\tcontent = strings.TrimSpace(content)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{content}\n\tgPerms.WithPermission(caller, PermissionRealmHelp, args, func(Args) {\n\t\tgHelp = content\n\t})\n}\n\n// SetPermissions sets a permissions implementation for boards2 realm or a board.\nfunc SetPermissions(bid BoardID, p Permissions) {\n\tassertRealmIsNotLocked()\n\n\tif p == nil {\n\t\tpanic(\"permissions is required\")\n\t}\n\n\tif bid != 0 {\n\t\tassertBoardExists(bid)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{bid}\n\tgPerms.WithPermission(caller, PermissionPermissionsUpdate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\n\t\t// When board ID is zero it means that realm permissions are being updated\n\t\tif bid == 0 {\n\t\t\tgPerms = p\n\n\t\t\tstd.Emit(\n\t\t\t\t\"RealmPermissionsUpdated\",\n\t\t\t\t\"caller\", caller.String(),\n\t\t\t)\n\t\t\treturn\n\t\t}\n\n\t\t// Otherwise update the permissions of a single board\n\t\tboard := mustGetBoard(bid)\n\t\tboard.perms = p\n\n\t\tstd.Emit(\n\t\t\t\"BoardPermissionsUpdated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", bid.String(),\n\t\t)\n\t})\n}\n\n// SetRealmNotice sets a notice to be displayed globally by the realm.\n// An empty message removes the realm notice.\nfunc SetRealmNotice(message string) {\n\tmessage = strings.TrimSpace(message)\n\tcaller := std.PreviousRealm().Address()\n\tgPerms.WithPermission(caller, PermissionRealmNotice, nil, func(Args) {\n\t\tgNotice = message\n\n\t\tstd.Emit(\n\t\t\t\"RealmNoticeChanged\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"message\", message,\n\t\t)\n\t})\n}\n\n// GetBoardIDFromName searches a board by name and returns it's ID.\nfunc GetBoardIDFromName(name string) (_ BoardID, found bool) {\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\treturn 0, false\n\t}\n\treturn v.(*Board).id, true\n}\n\n// CreateBoard creates a new board.\nfunc CreateBoard(name string) BoardID {\n\tassertRealmIsNotLocked()\n\n\tname = strings.TrimSpace(name)\n\tassertIsValidBoardName(name)\n\tassertBoardNameNotExists(name)\n\n\tcaller := std.PreviousRealm().Address()\n\tid := incGetBoardID()\n\targs := Args{name, id}\n\tgPerms.WithPermission(caller, PermissionBoardCreate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardNameNotExists(name)\n\n\t\tperms := createDefaultBoardPermissions(caller)\n\t\tboard := newBoard(id, name, caller, perms)\n\t\tgBoardsByID.Set(id.Key(), board)\n\t\tgBoardsByName.Set(name, board)\n\n\t\tstd.Emit(\n\t\t\t\"BoardCreated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", id.String(),\n\t\t\t\"name\", name,\n\t\t)\n\t})\n\treturn id\n}\n\n// RenameBoard changes the name of an existing board.\n//\n// A history of previous board names is kept when boards are renamed.\n// Because of that boards are also accesible using previous name(s).\nfunc RenameBoard(name, newName string) {\n\tassertRealmIsNotLocked()\n\n\tnewName = strings.TrimSpace(newName)\n\tassertIsValidBoardName(newName)\n\tassertBoardNameNotExists(newName)\n\n\tboard := mustGetBoardByName(name)\n\tassertBoardIsNotFrozen(board)\n\n\tbid := board.GetID()\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{bid, name, newName}\n\tboard.perms.WithPermission(caller, PermissionBoardRename, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardNameNotExists(newName)\n\n\t\tboard := mustGetBoard(bid)\n\t\tboard.aliases = append(board.aliases, board.name)\n\t\tboard.name = newName\n\n\t\t// Index board for the new name keeping previous indexes for older names\n\t\tgBoardsByName.Set(newName, board)\n\n\t\tstd.Emit(\n\t\t\t\"BoardRenamed\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", bid.String(),\n\t\t\t\"name\", name,\n\t\t\t\"newName\", newName,\n\t\t)\n\t})\n}\n\n// CreateThread creates a new thread within a board.\nfunc CreateThread(boardID BoardID, title, body string) PostID {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tbody = strings.TrimSpace(body)\n\tassertBodyIsNotEmpty(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionThreadCreate)\n\n\tthread := board.AddThread(caller, title, body)\n\n\tstd.Emit(\n\t\t\"ThreadCreated\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", thread.GetPostID().String(),\n\t\t\"title\", title,\n\t)\n\n\treturn thread.id\n}\n\n// CreateReply creates a new comment or reply within a thread.\n//\n// The value of `replyID` is only required when creating a reply of another reply.\nfunc CreateReply(boardID BoardID, threadID, replyID PostID, body string) PostID {\n\tassertRealmIsNotLocked()\n\n\tbody = strings.TrimSpace(body)\n\tassertReplyBodyIsValid(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionReplyCreate)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\tassertThreadIsNotFrozen(thread)\n\n\tvar reply *Post\n\tif replyID == 0 {\n\t\t// When the parent reply is the thread just add reply to thread\n\t\treply = thread.AddReply(caller, body)\n\t} else {\n\t\t// Try to get parent reply and add a new child reply\n\t\tparent := mustGetReply(thread, replyID)\n\t\tif parent.IsHidden() || parent.IsReadonly() {\n\t\t\tpanic(\"replying to a hidden or frozen reply is not allowed\")\n\t\t}\n\n\t\treply = parent.AddReply(caller, body)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyCreate\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", reply.GetPostID().String(),\n\t)\n\n\treturn reply.id\n}\n\n// CreateRepost reposts a thread into another board.\nfunc CreateRepost(boardID BoardID, threadID PostID, title, body string, destinationBoardID BoardID) PostID {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tcaller := std.PreviousRealm().Address()\n\tdst := mustGetBoard(destinationBoardID)\n\tassertBoardIsNotFrozen(dst)\n\tassertHasBoardPermission(dst, caller, PermissionThreadRepost)\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\tif thread.IsRepost() {\n\t\tpanic(\"reposting a thread that is a repost is not allowed\")\n\t}\n\n\trepostId := dst.incGetPostID()\n\tbody = strings.TrimSpace(body)\n\trepost := newPost(dst, repostId, caller, title, body, repostId, thread.GetPostID(), thread.GetBoard().GetID())\n\tthread.AddRepostTo(caller, repost, dst)\n\n\tstd.Emit(\n\t\t\"Repost\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"destinationBoardID\", destinationBoardID.String(),\n\t\t\"title\", title,\n\t)\n\n\treturn repostId\n}\n\n// DeleteThread deletes a thread from a board.\n//\n// Threads can be deleted by the users who created them or otherwise by users with special permissions.\nfunc DeleteThread(boardID BoardID, threadID PostID) {\n\t// Council members should always be able to delete\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner) // TODO: Add DeleteThread filetest cases for realm owners\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\n\tif !isRealmOwner {\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertThreadIsNotFrozen(thread)\n\n\t\tif caller != thread.GetCreator() {\n\t\t\tassertHasBoardPermission(board, caller, PermissionThreadDelete)\n\t\t}\n\t}\n\n\t// Hard delete thread and all its replies\n\tboard.DeleteThread(threadID)\n\n\tstd.Emit(\n\t\t\"ThreadDeleted\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t)\n}\n\n// DeleteReply deletes a reply from a thread.\n//\n// Replies can be deleted by the users who created them or otherwise by users with special permissions.\n// Soft deletion is used when the deleted reply contains sub replies, in which case the reply content\n// is replaced by a text informing that reply has been deleted to avoid deleting sub-replies.\nfunc DeleteReply(boardID BoardID, threadID, replyID PostID) {\n\t// Council members should always be able to delete\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner) // TODO: Add DeleteReply filetest cases for realm owners\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\treply := mustGetReply(thread, replyID)\n\n\tif !isRealmOwner {\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertThreadIsNotFrozen(thread)\n\t\tassertReplyIsVisible(reply)\n\t\tassertReplyIsNotFrozen(reply)\n\n\t\tif caller != reply.GetCreator() {\n\t\t\tassertHasBoardPermission(board, caller, PermissionReplyDelete)\n\t\t}\n\t}\n\n\t// Soft delete reply by changing its body when it contains\n\t// sub-replies, otherwise hard delete it.\n\tif reply.HasReplies() {\n\t\treply.Update(reply.GetTitle(), \"This reply has been deleted\")\n\t} else {\n\t\tthread.DeleteReply(replyID)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyDeleted\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t)\n}\n\n// EditThread updates the title and body of thread.\n//\n// Threads can be updated by the users who created them or otherwise by users with special permissions.\nfunc EditThread(boardID BoardID, threadID PostID, title, body string) {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\tbody = strings.TrimSpace(body)\n\tif !thread.IsRepost() {\n\t\tassertBodyIsNotEmpty(body)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tif caller != thread.GetCreator() {\n\t\tassertHasBoardPermission(board, caller, PermissionThreadEdit)\n\t}\n\n\tthread.Update(title, body)\n\n\tstd.Emit(\n\t\t\"ThreadEdited\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"title\", title,\n\t)\n}\n\n// EditReply updates the body of comment or reply.\n//\n// Replies can be updated only by the users who created them.\nfunc EditReply(boardID BoardID, threadID, replyID PostID, body string) {\n\tassertRealmIsNotLocked()\n\n\tbody = strings.TrimSpace(body)\n\tassertReplyBodyIsValid(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\tassertReplyIsNotFrozen(reply)\n\n\tcaller := std.PreviousRealm().Address()\n\tif caller != reply.GetCreator() {\n\t\tpanic(\"only the reply creator is allowed to edit it\")\n\t}\n\n\treply.Update(\"\", body)\n\n\tstd.Emit(\n\t\t\"ReplyEdited\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"body\", body,\n\t)\n}\n\n// InviteMember adds a member to the realm or to a boards.\n//\n// A role can optionally be specified to be assigned to the new member.\n// Board ID is only required when inviting a member to a board.\nfunc InviteMember(boardID BoardID, user std.Address, role Role) {\n\tassertUserAddressIsValid(user)\n\tassertMembersUpdateIsEnabled(boardID)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{user, role}\n\tperms.WithPermission(caller, PermissionMemberInvite, args, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif err := perms.AddUser(user, role); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"MemberInvited\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", user.String(),\n\t\t\t\"role\", string(role),\n\t\t)\n\t})\n}\n\n// RemoveMember removes a member from the realm or a boards.\n//\n// Board ID is only required when removing a member from board.\nfunc RemoveMember(boardID BoardID, member std.Address) {\n\tassertMembersUpdateIsEnabled(boardID)\n\tassertMemberAddressIsValid(member)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\tperms.WithPermission(caller, PermissionMemberRemove, Args{member}, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif !perms.RemoveUser(member) {\n\t\t\tpanic(\"member not found\")\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"MemberRemoved\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", member.String(),\n\t\t)\n\t})\n}\n\n// IsMember checks if an user is a member of the realm or a board.\n//\n// Board ID is only required when checking if a user is a member of a board.\nfunc IsMember(boardID BoardID, user std.Address) bool {\n\tassertUserAddressIsValid(user)\n\n\tif boardID != 0 {\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tperms := mustGetPermissions(boardID)\n\treturn perms.HasUser(user)\n}\n\n// HasMemberRole checks if a realm or board member has a specific role assigned.\n//\n// Board ID is only required when checking a member of a board.\nfunc HasMemberRole(boardID BoardID, member std.Address, role Role) bool {\n\tassertMemberAddressIsValid(member)\n\n\tif boardID != 0 {\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tperms := mustGetPermissions(boardID)\n\treturn perms.HasRole(member, role)\n}\n\n// ChangeMemberRole changes the role of a realm or board member.\n//\n// Board ID is only required when changing the role for a member of a board.\nfunc ChangeMemberRole(boardID BoardID, member std.Address, role Role) {\n\tassertMemberAddressIsValid(member)\n\tassertMembersUpdateIsEnabled(boardID)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{boardID, member, role}\n\tperms.WithPermission(caller, PermissionRoleChange, args, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif err := perms.SetUserRoles(member, role); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"RoleChanged\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", member.String(),\n\t\t\t\"newRole\", string(role),\n\t\t)\n\t})\n}\n\n// IterateRealmMembers iterates realm members.\n// The iteration is done only for realm members, board members are not iterated.\nfunc IterateRealmMembers(offset int, fn UsersIterFn) (halted bool) {\n\tcount := gPerms.UsersCount() - offset\n\treturn gPerms.IterateUsers(offset, count, fn)\n}\n\n// IterateBoards iterates realm boards.\nfunc IterateBoards(offset int, fn func(ReadonlyBoard) bool) (halted bool) {\n\tcount := gBoardsByID.Size() - offset\n\treturn gBoardsByID.IterateByOffset(offset, count, func(_ string, v any) bool {\n\t\tboard, _ := v.(*Board)\n\t\treturn fn(readonlyBoard{board})\n\t})\n}\n\nfunc assertMemberAddressIsValid(member std.Address) {\n\tif !member.IsValid() {\n\t\tpanic(\"invalid member address\")\n\t}\n}\n\nfunc assertUserAddressIsValid(user std.Address) {\n\tif !user.IsValid() {\n\t\tpanic(\"invalid user address\")\n\t}\n}\n\nfunc assertHasBoardPermission(b *Board, user std.Address, p Permission) {\n\tif !b.perms.HasPermission(user, p) {\n\t\tpanic(\"unauthorized\")\n\t}\n}\n\nfunc assertBoardExists(id BoardID) {\n\tif _, found := getBoard(id); !found {\n\t\tpanic(\"board not found: \" + id.String())\n\t}\n}\n\nfunc assertBoardIsNotFrozen(b *Board) {\n\tif b.IsReadonly() {\n\t\tpanic(\"board is frozen\")\n\t}\n}\n\nfunc assertIsValidBoardName(name string) {\n\tsize := len(name)\n\tif size == 0 {\n\t\tpanic(\"board name is empty\")\n\t}\n\n\tif size \u003e MaxBoardNameLength {\n\t\tn := strconv.Itoa(MaxBoardNameLength)\n\t\tpanic(\"board name is too long, maximum allowed is \" + n + \" characters\")\n\t}\n\n\tif !reBoardName.MatchString(name) {\n\t\tpanic(\"board name contains invalid characters\")\n\t}\n}\n\nfunc assertThreadIsNotFrozen(t *Post) {\n\tif t.IsReadonly() {\n\t\tpanic(\"thread is frozen\")\n\t}\n}\n\nfunc assertReplyIsNotFrozen(r *Post) {\n\tif r.IsReadonly() {\n\t\tpanic(\"reply is frozen\")\n\t}\n}\n\nfunc assertNameIsNotEmpty(name string) {\n\tif name == \"\" {\n\t\tpanic(\"name is empty\")\n\t}\n}\n\nfunc assertTitleIsValid(title string) {\n\tif title == \"\" {\n\t\tpanic(\"title is empty\")\n\t}\n\n\tif len(title) \u003e MaxThreadTitleLength {\n\t\tn := strconv.Itoa(MaxThreadTitleLength)\n\t\tpanic(\"thread title is too long, maximum allowed is \" + n + \" characters\")\n\t}\n}\n\nfunc assertBodyIsNotEmpty(body string) {\n\tif body == \"\" {\n\t\tpanic(\"body is empty\")\n\t}\n}\n\nfunc assertBoardNameNotExists(name string) {\n\tif gBoardsByName.Has(name) {\n\t\tpanic(\"board already exists\")\n\t}\n}\n\nfunc assertThreadExists(b *Board, threadID PostID) {\n\tif _, found := b.GetThread(threadID); !found {\n\t\tpanic(\"thread not found: \" + threadID.String())\n\t}\n}\n\nfunc assertReplyExists(thread *Post, replyID PostID) {\n\tif _, found := thread.GetReply(replyID); !found {\n\t\tpanic(\"reply not found: \" + replyID.String())\n\t}\n}\n\nfunc assertThreadIsVisible(thread *Post) {\n\tif thread.IsHidden() {\n\t\tpanic(\"thread is hidden\")\n\t}\n}\n\nfunc assertReplyIsVisible(thread *Post) {\n\tif thread.IsHidden() {\n\t\tpanic(\"reply is hidden\")\n\t}\n}\n\nfunc assertReplyBodyIsValid(body string) {\n\tassertBodyIsNotEmpty(body)\n\n\tif len(body) \u003e MaxReplyLength {\n\t\tn := strconv.Itoa(MaxReplyLength)\n\t\tpanic(\"reply is too long, maximum allowed is \" + n + \" characters\")\n\t}\n\n\tif reDeniedReplyLinePrefixes.MatchString(body) {\n\t\tpanic(\"using Markdown headings, blockquotes or horizontal lines is not allowed in replies\")\n\t}\n}\n\nfunc assertMembersUpdateIsEnabled(boardID BoardID) {\n\tif boardID != 0 {\n\t\tassertRealmIsNotLocked()\n\t} else {\n\t\tassertRealmMembersAreNotLocked()\n\t}\n}\n"},{"name":"public_flag.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// SetFlaggingThreshold sets the number of flags required to hide a thread or comment.\n//\n// Threshold is only applicable within the board where it's setted.\nfunc SetFlaggingThreshold(boardID BoardID, threshold int) {\n\tif threshold \u003c 1 {\n\t\tpanic(\"invalid flagging threshold\")\n\t}\n\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{boardID, threshold}\n\tboard.perms.WithPermission(caller, PermissionBoardFlaggingUpdate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\n\t\tgFlaggingThresholds.Set(boardID.String(), threshold)\n\t\tstd.Emit(\n\t\t\t\"FlaggingThresholdUpdated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"threshold\", strconv.Itoa(threshold),\n\t\t)\n\t})\n}\n\n// GetFlaggingThreshold returns the number of flags required to hide a thread or comment within a board.\nfunc GetFlaggingThreshold(boardID BoardID) int {\n\tassertBoardExists(boardID)\n\treturn getFlaggingThreshold(boardID)\n}\n\n// FlagThread adds a new flag to a thread.\n//\n// Flagging requires special permissions and hides the thread when\n// the number of flags reaches a pre-defined flagging threshold.\nfunc FlagThread(boardID BoardID, threadID PostID, reason string) {\n\tboard := mustGetBoard(boardID)\n\n\t// Realm owners should be able to flag without permissions even when board is frozen\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner)\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertHasBoardPermission(board, caller, PermissionThreadFlag)\n\t}\n\n\tt, ok := board.GetThread(threadID)\n\tif !ok {\n\t\tpanic(\"post doesn't exist\")\n\t}\n\tassertThreadIsNotFrozen(t)\n\n\tf := Flag{\n\t\tUser:   caller,\n\t\tReason: reason,\n\t}\n\n\t// Realm owners can hide with a single flag\n\thide := flagItem(t, f, getFlaggingThreshold(boardID))\n\tif hide || isRealmOwner {\n\t\tt.SetVisible(false)\n\t}\n\n\tstd.Emit(\n\t\t\"ThreadFlagged\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"reason\", reason,\n\t)\n}\n\n// FlagReply adds a new flag to a comment or reply.\n//\n// Flagging requires special permissions and hides the comment or reply\n// when the number of flags reaches a pre-defined flagging threshold.\nfunc FlagReply(boardID BoardID, threadID, replyID PostID, reason string) {\n\tboard := mustGetBoard(boardID)\n\n\t// Realm owners should be able to flag without permissions even when board is frozen\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner)\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertHasBoardPermission(board, caller, PermissionReplyFlag)\n\t}\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsNotFrozen(thread)\n\n\tf := Flag{\n\t\tUser:   caller,\n\t\tReason: reason,\n\t}\n\n\t// Realm owners can hide with a single flag\n\thide := flagItem(reply, f, getFlaggingThreshold(boardID))\n\tif hide || isRealmOwner {\n\t\treply.SetVisible(false)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyFlagged\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"reason\", reason,\n\t)\n}\n"},{"name":"public_freeze.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// FreezeBoard freezes a board so no more threads and comments can be created or modified.\nfunc FreezeBoard(boardID BoardID) {\n\tsetBoardReadonly(boardID, true)\n}\n\n// UnfreezeBoard removes frozen status from a board.\nfunc UnfreezeBoard(boardID BoardID) {\n\tsetBoardReadonly(boardID, false)\n}\n\n// IsBoardFrozen checks if a board has been frozen.\nfunc IsBoardFrozen(boardID BoardID) bool {\n\tboard := mustGetBoard(boardID)\n\treturn board.IsReadonly()\n}\n\n// FreezeThread freezes a thread so thread cannot be replied, modified or deleted.\n//\n// Fails if board is frozen.\nfunc FreezeThread(boardID BoardID, threadID PostID) {\n\tsetThreadReadonly(boardID, threadID, true)\n}\n\n// UnfreezeThread removes frozen status from a thread.\n//\n// Fails if board is frozen.\nfunc UnfreezeThread(boardID BoardID, threadID PostID) {\n\tsetThreadReadonly(boardID, threadID, false)\n}\n\n// IsThreadFrozen checks if a thread has been frozen.\n//\n// Returns true if board is frozen.\nfunc IsThreadFrozen(boardID BoardID, threadID PostID) bool {\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\treturn board.IsReadonly() || thread.IsReadonly()\n}\n\n// UnfreezeReply removes frozen status from a reply.\n//\n// Fails when parent thread or board are frozen.\nfunc UnfreezeReply(boardID BoardID, threadID, replyID PostID) {\n\t// XXX: Is there a use case for also freezing replies?\n\tsetReplyReadonly(boardID, threadID, replyID, false)\n}\n\n// FreezeReply freezes a thread reply so it cannot be modified or deleted.\n//\n// Fails when parent thread or board are frozen.\nfunc FreezeReply(boardID BoardID, threadID, replyID PostID) {\n\tsetReplyReadonly(boardID, threadID, replyID, true)\n}\n\n// IsReplyFrozen checks if a thread reply has been frozen.\n//\n// Returns true when board or a parent thread is frozen.\nfunc IsReplyFrozen(boardID BoardID, threadID, replyID PostID) bool {\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\n\treturn board.IsReadonly() || thread.IsReadonly() || reply.IsReadonly()\n}\n\nfunc setReplyReadonly(boardID BoardID, threadID, replyID PostID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionReplyFreeze)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\n\tif isReadonly {\n\t\tassertReplyIsNotFrozen(reply)\n\t}\n\n\treply.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"ReplyFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n\nfunc setThreadReadonly(boardID BoardID, threadID PostID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionThreadFreeze)\n\n\tthread := mustGetThread(board, threadID)\n\tif isReadonly {\n\t\tassertThreadIsNotFrozen(thread)\n\t}\n\n\tthread.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"ThreadFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n\nfunc setBoardReadonly(boardID BoardID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tif isReadonly {\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionBoardFreeze)\n\n\tboard.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"BoardFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n"},{"name":"public_lock.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// LockRealm locks the realm making it readonly.\n//\n// WARNING: Realm can't be unlocked once locked.\n//\n// Realm can also be locked without locking realm members.\n// Realm members can be locked when locking the realm or afterwards.\n// This is relevant for two reasons, one so members can be modified after lock.\n// The other is for realm owners, which can delete threads and comments after lock.\nfunc LockRealm(lockRealmMembers bool) {\n\tassertRealmMembersAreNotLocked()\n\n\t// If realm members are not being locked assert that realm is no locked.\n\t// Members can be locked after locking the realm, in a second `LockRealm` call.\n\tif !lockRealmMembers {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tgPerms.WithPermission(caller, PermissionRealmLock, nil, func(Args) {\n\t\tgLocked.realm = true\n\t\tgLocked.realmMembers = lockRealmMembers\n\n\t\tstd.Emit(\n\t\t\t\"RealmLocked\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"lockRealmMembers\", strconv.FormatBool(lockRealmMembers),\n\t\t)\n\t})\n}\n\n// IsRealmLocked checks if boards realm has been locked.\nfunc IsRealmLocked() bool {\n\treturn gLocked.realm\n}\n\n// AreRealmMembersLocked checks if realm members has been locked.\nfunc AreRealmMembersLocked() bool {\n\treturn gLocked.realmMembers\n}\n\nfunc assertRealmIsNotLocked() { // TODO: Add filtests for locked realm case to all public functions\n\tif gLocked.realm {\n\t\tpanic(\"realm is locked\")\n\t}\n}\n\nfunc assertRealmMembersAreNotLocked() { // TODO: Add filtests for locked members case to all public member functions\n\tif gLocked.realmMembers {\n\t\tpanic(\"realm and members are locked\")\n\t}\n}\n"},{"name":"render.gno","body":"package boards2\n\nimport (\n\t\"net/url\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/mux\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nconst (\n\tpageSizeBoards  = 6\n\tpageSizeThreads = 6\n\tpageSizeReplies = 10\n)\n\nconst menuManageBoard = \"manageBoard\"\n\nfunc Render(path string) string {\n\trouter := mux.NewRouter()\n\trouter.HandleFunc(\"\", renderBoardsList)\n\trouter.HandleFunc(\"help\", renderHelp)\n\trouter.HandleFunc(\"admin-users\", renderMembers)\n\trouter.HandleFunc(\"{board}\", renderBoard)\n\trouter.HandleFunc(\"{board}/members\", renderMembers)\n\trouter.HandleFunc(\"{board}/{thread}\", renderThread)\n\trouter.HandleFunc(\"{board}/{thread}/{reply}\", renderReply)\n\n\trouter.NotFoundHandler = func(res *mux.ResponseWriter, _ *mux.Request) {\n\t\tres.Write(\"Path not found\")\n\t}\n\n\treturn router.Render(path)\n}\n\nfunc renderHelp(res *mux.ResponseWriter, _ *mux.Request) {\n\tres.Write(\"# Boards Help\\n\")\n\tif gHelp != \"\" {\n\t\tres.Write(gHelp)\n\t} else {\n\t\tres.Write(\"### Help content has not been uploaded\\n\")\n\t\tres.Write(\"Do you want to \")\n\t\tres.Write(newLink(\"upload boards help\", txlink.Call(\"SetHelp\", \"content\", \"\")))\n\t\tres.Write(\" ?\")\n\t}\n}\n\nfunc renderBoardsList(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tres.Write(\"# Boards\\n\\n\")\n\trenderBoardListMenu(res, req)\n\tres.Write(\"\\n\\n---\\n\")\n\n\tif gBoardsByID.Size() == 0 {\n\t\tlink := txlink.Call(\"CreateBoard\", \"name\", \"\")\n\t\tres.Write(\"### Currently there are no boards\\n\")\n\t\tres.Write(\"Be the first to \")\n\t\tres.Write(newLink(\"create a new board\", link))\n\t\tres.Write(\" !\")\n\n\t\treturn\n\t}\n\n\tp, err := pager.New(req.RawPath, gBoardsByID.Size(), pager.WithPageSize(pageSizeBoards))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\trender := func(_ string, v any) bool {\n\t\tboard := v.(*Board)\n\n\t\tres.Write(\"**\" + newLink(board.GetName(), board.GetURL()) + \"**  \\n\")\n\t\tres.Write(\"Created by \" + newUserLink(board.creator) + \" \")\n\t\tres.Write(\"on \" + board.createdAt.Format(dateFormat))\n\t\tres.Write(\", #\" + board.id.String() + \"  \\n\")\n\t\tres.Write(\"**\" + strconv.Itoa(board.threads.Size()) + \" threads\")\n\t\tif board.IsReadonly() {\n\t\t\tres.Write(\", read-only\")\n\t\t}\n\n\t\tres.Write(\"**\\n\\n\")\n\t\treturn false\n\t}\n\n\tres.Write(\"Sort by: \")\n\tr := realmpath.Parse(req.RawPath)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tres.Write(newLink(\"newest first\", r.String()))\n\t\tres.Write(\"\\n\\n\")\n\t\tgBoardsByID.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tres.Write(newLink(\"oldest first\", r.String()))\n\t\tres.Write(\"\\n\\n\")\n\t\tgBoardsByID.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tres.Write(\"\\n---\\n\")\n\t\tres.Write(pager.Picker(p))\n\t}\n}\n\nfunc renderBoardListMenu(res *mux.ResponseWriter, req *mux.Request) {\n\tpath := strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\n\tres.Write(newLink(\"Create Board\", txlink.Call(\"CreateBoard\", \"name\", \"\")))\n\tres.Write(\" • \")\n\tres.Write(newLink(\"List Admin Users\", path+\":admin-users\"))\n\tres.Write(\" • \")\n\tres.Write(newLink(\"Help\", path+\":help\"))\n\tres.Write(\"\\n\\n\")\n}\n\nfunc renderBoard(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tlink := newLink(\"create a new board\", txlink.Call(\"CreateBoard\", \"name\", name))\n\t\tres.Write(\"### The board you are looking for does not exist\\n\")\n\t\tres.Write(\"Do you want to \")\n\t\tres.Write(link)\n\t\tres.Write(\" ?\")\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tmenu := renderBoardMenu(board, req)\n\n\tres.Write(board.Render(req.RawPath, menu))\n}\n\nfunc renderBoardMenu(board *Board, req *mux.Request) string {\n\tvar (\n\t\tb               strings.Builder\n\t\tboardMembersURL = board.GetPath() + \"/members\"\n\t)\n\n\tif board.IsReadonly() {\n\t\tb.WriteString(newLink(\"List Members\", boardMembersURL))\n\t\tb.WriteString(\" • \")\n\t\tb.WriteString(newLink(\"Unfreeze Board\", board.GetUnfreezeFormURL()))\n\t\tb.WriteString(\"\\n\")\n\t} else {\n\t\tb.WriteString(newLink(\"Create Thread\", board.GetPostFormURL()))\n\t\tb.WriteString(\" • \")\n\n\t\tmenu := getCurrentMenu(req.RawPath)\n\t\tif menu == menuManageBoard {\n\t\t\tb.WriteString(\"**Manage Board**\")\n\t\t} else {\n\t\t\tb.WriteString(newLink(\"Manage Board\", menuURL(menuManageBoard)))\n\t\t}\n\n\t\tb.WriteString(\"  \\n\")\n\n\t\tif menu == menuManageBoard {\n\t\t\tb.WriteString(\"↳\")\n\t\t\tb.WriteString(newLink(\"Invite Member\", board.GetInviteMemberFormURL()))\n\t\t\tb.WriteString(\" • \")\n\t\t\tb.WriteString(newLink(\"List Members\", boardMembersURL))\n\t\t\tb.WriteString(\" • \")\n\t\t\tb.WriteString(newLink(\"Freeze Board\", board.GetFreezeFormURL()))\n\t\t\tb.WriteString(\"\\n\\n\")\n\t\t}\n\t}\n\n\treturn b.String()\n}\n\nfunc renderThread(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tres.Write(\"Board does not exist: \" + name)\n\t\treturn\n\t}\n\n\trawID := req.GetVar(\"thread\")\n\ttID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid thread ID: \" + rawID)\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tthread, found := board.GetThread(PostID(tID))\n\tif !found {\n\t\tres.Write(\"Thread does not exist with ID: \" + rawID)\n\t} else if thread.IsHidden() {\n\t\tres.Write(\"Thread with ID: \" + rawID + \" has been flagged as inappropriate\")\n\t} else {\n\t\tres.Write(thread.Render(req.RawPath, \"\", 5))\n\t}\n}\n\nfunc renderReply(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tres.Write(\"Board does not exist: \" + name)\n\t\treturn\n\t}\n\n\trawID := req.GetVar(\"thread\")\n\ttID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid thread ID: \" + rawID)\n\t\treturn\n\t}\n\n\trawID = req.GetVar(\"reply\")\n\trID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid reply ID: \" + rawID)\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tthread, found := board.GetThread(PostID(tID))\n\tif !found {\n\t\tres.Write(\"Thread does not exist with ID: \" + req.GetVar(\"thread\"))\n\t\treturn\n\t}\n\n\treply, found := thread.GetReply(PostID(rID))\n\tif !found {\n\t\tres.Write(\"Reply does not exist with ID: \" + rawID)\n\t\treturn\n\t}\n\n\t// Call render even for hidden replies to display children.\n\t// Original comment content will be hidden under the hood.\n\t// See: #3480\n\tres.Write(reply.RenderInner())\n}\n\nfunc renderMembers(res *mux.ResponseWriter, req *mux.Request) {\n\tboardID := BoardID(0)\n\tperms := gPerms\n\tname := req.GetVar(\"board\")\n\tif name != \"\" {\n\t\tv, found := gBoardsByName.Get(name)\n\t\tif !found {\n\t\t\tres.Write(\"### Board not found\")\n\t\t\treturn\n\t\t}\n\n\t\tboard := v.(*Board)\n\t\tboardID = board.GetID()\n\t\tperms = board.perms\n\n\t\tres.Write(\"# \" + board.GetName() + \" Members\\n\")\n\t\tres.Write(\"### These are the board members\\n\\n\")\n\t} else {\n\t\tres.Write(\"# Admin Users\\n\")\n\t\tres.Write(\"### These are the admin users of the realm\\n\\n\")\n\t}\n\n\t// Create a pager with a small page size to reduce\n\t// the number of username lookups per page.\n\tp, err := pager.New(req.RawPath, perms.UsersCount(), pager.WithPageSize(5))\n\tif err != nil {\n\t\tres.Write(err.Error())\n\t\treturn\n\t}\n\n\tres.Write(\"| Member | Role | Actions |\\n| --- | --- | --- |\\n\")\n\tperms.IterateUsers(p.Offset(), p.PageSize(), func(u User) bool {\n\t\tres.Write(\"| \")\n\t\tres.Write(newUserLink(u.Address))\n\t\tres.Write(\" | \")\n\t\tres.Write(rolesToString(u.Roles))\n\t\tres.Write(\" | \")\n\t\tres.Write(newLink(\"remove\", txlink.Call(\n\t\t\t\"RemoveMember\",\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", u.Address.String(),\n\t\t)))\n\t\tres.Write(\" • \")\n\t\tres.Write(newLink(\"change role\", txlink.Call(\n\t\t\t\"ChangeMemberRole\",\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", u.Address.String(),\n\t\t\t\"role\", \"\",\n\t\t)))\n\t\tres.Write(\" |\\n\")\n\t\treturn false\n\t})\n\n\tif p.HasPages() {\n\t\tres.Write(\"\\n\\n\" + pager.Picker(p))\n\t}\n}\n\nfunc renderNotice(res *mux.ResponseWriter) {\n\tif gNotice == \"\" {\n\t\treturn\n\t}\n\n\tres.Write(\"\u003e \")\n\tres.Write(gNotice)\n\tres.Write(\"\\n\\n\")\n}\n\nfunc rolesToString(roles []Role) string {\n\tif len(roles) == 0 {\n\t\treturn \"\"\n\t}\n\n\tnames := make([]string, len(roles))\n\tfor i, r := range roles {\n\t\tnames[i] = string(r)\n\t}\n\treturn strings.Join(names, \", \")\n}\n\nfunc menuURL(name string) string {\n\t// TODO: Menu URL works because no other GET arguments are being used\n\treturn \"?menu=\" + name\n}\n\nfunc getCurrentMenu(rawURL string) string {\n\t_, rawQuery, found := strings.Cut(rawURL, \"?\")\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\tquery, _ := url.ParseQuery(rawQuery)\n\treturn query.Get(\"menu\")\n}\n"},{"name":"z_0_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tbid := boards2.CreateBoard(\"test123\")\n\tprintln(\"ID =\", bid)\n}\n\n// Output:\n// ID = 1\n"},{"name":"z_0_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"\")\n}\n\n// Error:\n// board name is empty\n"},{"name":"z_0_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tboardName = \"test123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(boardName)\n}\n\nfunc main() {\n\tboards2.CreateBoard(boardName)\n}\n\n// Error:\n// board already exists\n"},{"name":"z_0_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n}\n\n// Error:\n// addresses are not allowed as board name\n"},{"name":"z_0_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"gnoland\")\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_0_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar name = strings.Repeat(\"X\", boards2.MaxBoardNameLength+1)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(name)\n}\n\n// Error:\n// board name is too long, maximum allowed is 50 characters\n"},{"name":"z_0_h_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname   = \"test123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\tboards2.InviteMember(0, member, boards2.RoleOwner) // Operate on realm DAO members instead of individual boards\n\ttesting.SetOriginCaller(member)\n\tusers.Register(name)\n}\n\nfunc main() {\n\tbid := boards2.CreateBoard(name)\n\tprintln(\"ID =\", bid)\n}\n\n// Output:\n// ID = 1\n"},{"name":"z_0_i_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"test123\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_10_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\n\t// Invite a moderator to the new board\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\n\t// Create a new thread as a moderator\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_10_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.FlagThread(404, 1, \"\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_10_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Make the next call as an uninvited user\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_10_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, 404, \"\")\n}\n\n// Error:\n// post doesn't exist\n"},{"name":"z_10_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// item flag count threshold exceeded: 1\n"},{"name":"z_10_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to flag threads\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\ttesting.SetOriginCaller(moderator)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_10_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with a specific flagging threshold\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Invite a moderator to the new board\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\n\t// Create a new thread and flag it as a moderator\n\ttesting.SetOriginCaller(moderator)\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// item has been already flagged by a current user\n"},{"name":"z_10_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with flagging threshold greater than 1\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Create a thread so the realm owner can flag and hide it with a single flag\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\t// Also freeze board to make sure that realm owner can still flag the thread\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_11_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, body)\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_11_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"\", \"bar\")\n}\n\n// Error:\n// title is empty\n"},{"name":"z_11_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_11_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.EditThread(404, 1, \"Foo\", \"bar\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_11_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_11_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"bar\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_11_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to edit threads\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, body)\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_11_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid   boards2.BoardID\n\tpid   boards2.PostID\n\ttitle = strings.Repeat(\"X\", boards2.MaxThreadTitleLength+1)\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, \"bar\")\n}\n\n// Error:\n// thread title is too long, maximum allowed is 100 characters\n"},{"name":"z_12_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbody  = \"Test reply\"\n\tpath  = \"test-board/1/2\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, body)\n\n\t// Render content must contain the modified reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \"+body+\"\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_12_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbody  = \"Test reply\"\n\tpath  = \"test-board/1/2\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Create a reply and a sub reply\n\tparentRID := boards2.CreateReply(bid, tid, 0, \"Parent\")\n\trid = boards2.CreateReply(bid, tid, parentRID, \"Child\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, body)\n\n\t// Render content must contain the modified reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e \"+body+\"\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_12_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.EditReply(404, 1, 0, \"body\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_12_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, 404, 0, \"body\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_12_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, 404, \"body\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_12_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"new body\")\n}\n\n// Error:\n// only the reply creator is allowed to edit it\n"},{"name":"z_12_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Flag the reply so it's hidden\n\tboards2.FlagReply(bid, tid, rid, \"reason\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"body\")\n}\n\n// Error:\n// reply is hidden\n"},{"name":"z_12_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_13_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_13_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.FlagReply(404, 1, 1, \"\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_13_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, 404, 1, \"\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_13_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, 404, \"\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_13_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// item flag count threshold exceeded: 1\n"},{"name":"z_13_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_13_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Invite a member using a role with permission to flag replies\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\ttesting.SetOriginCaller(moderator)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_13_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with flagging threshold greater than 1\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Create a reply so the realm owner can flag and hide it with a single flag\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\t// Also freeze board to make sure that realm owner can still flag the reply\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\"))\n}\n\n// Output:\n// true\n"},{"name":"z_14_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Ensure reply doesn't exist\n\tprintln(boards2.Render(\"test-board/1/2\"))\n}\n\n// Output:\n// Reply does not exist with ID: 2\n"},{"name":"z_14_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.DeleteReply(404, 1, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_14_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, 404, 1)\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_14_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, 404)\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_14_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\trid = boards2.CreateReply(bid, tid, 0, \"Parent\")\n\tboards2.CreateReply(bid, tid, rid, \"Child reply\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Render content must contain the releted message instead of reply's body\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e This reply has been deleted\\n\"))\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e Child reply\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_14_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Call using a user that has not permission to delete replies\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_14_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Invite a member using a role with permission to delete replies\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(member)\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Ensure reply doesn't exist\n\tprintln(boards2.Render(\"test-board/1/2\"))\n}\n\n// Output:\n// Reply does not exist with ID: 2\n"},{"name":"z_15_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"Foo\", \"bar\")\n\tboards2.FlagThread(srcBID, srcTID, \"idk\")\n}\n\nfunc main() {\n\t// Repost should fail if source thread is flagged\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_15_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID = 1024\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n}\n\nfunc main() {\n\t// Repost should fail if source thread doesn't exist\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// thread does not exist with ID: 1024\n"},{"name":"z_15_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"Foo\", \"bar\")\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_15_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/ufmt\"\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"original title\", \"original text\")\n}\n\nfunc main() {\n\t// Success case\n\ttID := boards2.CreateRepost(srcBID, srcTID, \"repost title\", \"repost text\", dstBID)\n\tp := ufmt.Sprintf(\"dst-board/%s\", tID)\n\tout := boards2.Render(p)\n\n\tprintln(strings.Contains(out, \"original text\"))\n\tprintln(strings.Contains(out, \"repost title\"))\n\tprintln(strings.Contains(out, \"repost text\"))\n}\n\n// Output:\n// true\n// true\n// true\n"},{"name":"z_15_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Create a board with a thread\n\torigBID := boards2.CreateBoard(\"origin-board\")\n\torigTID := boards2.CreateThread(origBID, \"title\", \"text\")\n\n\t// Create a second board and repost a thread using an empty title\n\tsrcBID = boards2.CreateBoard(\"source-board\")\n\tsrcTID = boards2.CreateRepost(origBID, origTID, \"original title\", \"original text\", srcBID)\n\n\t// Create a third board to try reposting the repost\n\tdstBID = boards2.CreateBoard(\"destination-board\")\n}\n\nfunc main() {\n\tboards2.CreateRepost(srcBID, srcTID, \"repost title\", \"repost text\", dstBID)\n}\n\n// Error:\n// reposting a thread that is a repost is not allowed\n"},{"name":"z_16_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(bid, 4)\n\n\t// Ensure that flagging threshold changed\n\tprintln(boards2.GetFlaggingThreshold(bid))\n}\n\n// Output:\n// 4\n"},{"name":"z_16_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nconst bid boards2.BoardID = 404\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(bid, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_16_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(1, 0)\n}\n\n// Error:\n// invalid flagging threshold\n"},{"name":"z_17_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.FreezeBoard(bid)\n\tprintln(boards2.IsBoardFrozen(bid))\n}\n\n// Output:\n// true\n"},{"name":"z_17_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FreezeBoard(bid)\n}\n\n// Error:\n// board is frozen\n"},{"name":"z_18_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbid   = boards2.BoardID(0)                                      // Operate on realm instead of individual boards\n)\n\nvar perms boards2.Permissions\n\nfunc init() {\n\t// Create a new permissions instance without users\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n\n\t// Owner that setted new permissions is not a member of the new permissions\n\tprintln(boards2.IsMember(bid, owner))\n}\n\n// Output:\n// false\n"},{"name":"z_18_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\tuser = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid  = boards2.BoardID(0)                                      // Operate on realm instead of individual boards\n)\n\nvar perms boards2.Permissions\n\nfunc init() {\n\t// Create a new permissions instance\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_18_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tperms boards2.Permissions\n\tbid   boards2.BoardID\n)\n\nfunc init() {\n\t// Create a new permissions instance without users\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foobar\")\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n\n\t// Owner that setted new board permissions is not a member of the new permissions\n\tprintln(boards2.IsMember(bid, owner))\n}\n\n// Output:\n// false\n"},{"name":"z_19_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\t// Attempt to freeze a thread on frozen board\n\tboards2.FreezeThread(bid, tid)\n}\n\n// Error:\n// board is frozen\n"},{"name":"z_19_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// Attempt to freeze a frozen thread\n\tboards2.FreezeThread(bid, tid)\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_19_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FreezeThread(bid, tid)\n\tprintln(boards2.IsThreadFrozen(bid, tid))\n}\n\n// Output:\n// true\n"},{"name":"z_1_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// true\n"},{"name":"z_1_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tuser  = std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\t// Add an admin member\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\t// Next call will be done by the admin member\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, boards2.RoleOwner)\n}\n\n// Error:\n// only owners are allowed to invite other owners\n"},{"name":"z_1_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tuser  = std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n\trole  = boards2.RoleAdmin\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\t// Add an admin member\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\t// Next call will be done by the admin member\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// true\n"},{"name":"z_1_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(0, user, boards2.Role(\"foobar\")) // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// invalid role: foobar\n"},{"name":"z_1_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\trole  = boards2.RoleOwner\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foo123\") // Operate on board DAO members\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(0, user, role)) // Operate on realm DAO\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_1_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, user, role)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n}\n\n// Error:\n// user already exists\n"},{"name":"z_1_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(0, \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", boards2.RoleGuest)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_20_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// Attempt to freeze a reply on frozen thread\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_20_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\nfunc main() {\n\t// Attempt to freeze already frozen reply\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\n// Error:\n// reply is frozen\n"},{"name":"z_20_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n}\n\nfunc main() {\n\t// reply frozen\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.FreezeReply(bid, tid, rid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeReply(bid, tid, rid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\n\t// thread frozen\n\tboards2.FreezeThread(bid, tid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeThread(bid, tid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\n\t// board frozen\n\tboards2.FreezeBoard(bid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeBoard(bid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n}\n\n// Output:\n// false\n// true\n// false\n// true\n// false\n// true\n// false\n"},{"name":"z_20_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n}\n\nfunc main() {\n\t// unfrozen thread - should work\n\tr2 := boards2.CreateReply(bid, tid, rid, \"child 1\")\n\n\t// frozen thread - can't reply\n\tboards2.FreezeReply(bid, tid, rid)\n\tboards2.CreateReply(bid, tid, r2, \"child 2\")\n}\n\n// Error:\n// reply is frozen\n"},{"name":"z_21_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"This is a test realm message\")\n\n\t// Render content must contain the message\n\tcontent := boards2.Render(\"\")\n\tprintln(strings.HasPrefix(content, \"\u003e This is a test realm message\\n\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_21_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Set an initial message so it can be cleared\n\tboards2.SetRealmNotice(\"This is a test realm message\")\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"\")\n\n\t// Render content must contain the message\n\tcontent := boards2.Render(\"\")\n\tprintln(strings.HasPrefix(content, \"\u003e This is a test realm message\\n\\n\"))\n\tprintln(strings.HasPrefix(content, \"# Boards\"))\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_21_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\t// Call realm with a user that has not permission to set realm notice\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"Foo\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_22_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(false)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// false\n"},{"name":"z_22_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.LockRealm(false)\n}\n\nfunc main() {\n\t// Should fail because realm is already locked\n\tboards2.LockRealm(false)\n}\n\n// Error:\n// realm is locked\n"},{"name":"z_22_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\t// Call realm with a user that has not permission to lock the realm\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(false)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_22_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(true)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_22_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.LockRealm(true)\n}\n\nfunc main() {\n\t// Should fail because realm is already locked\n\tboards2.LockRealm(true)\n}\n\n// Error:\n// realm and members are locked\n"},{"name":"z_22_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Lock the realm without locking realm members\n\tboards2.LockRealm(false)\n}\n\nfunc main() {\n\tboards2.LockRealm(true)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_23_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleOwner)\n\tboards2.InviteMember(bid, \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\", boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.IterateRealmMembers(0, func(u boards2.User) bool {\n\t\tprintln(u.Address, string(u.Roles[0]))\n\t\treturn false\n\t})\n}\n\n// Output:\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj owner\n// g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5 admin\n"},{"name":"z_24_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid := boards2.CreateBoard(\"test123\")\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleAdmin)\n\n\tbid = boards2.CreateBoard(\"foo123\")\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleOwner)\n\tboards2.InviteMember(bid, \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\", boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.IterateBoards(0, func(b boards2.ReadonlyBoard) bool {\n\t\tprintln(b.ID().String())\n\t\tprintln(b.Name())\n\n\t\tb.IterateMembers(0, b.MembersCount(), func(u boards2.User) bool {\n\t\t\tprintln(u.Address, string(u.Roles[0]))\n\t\t\treturn false\n\t\t})\n\t})\n}\n\n// Output:\n// 1\n// test123\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj admin\n// 2\n// foo123\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj owner\n// g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5 admin\n"},{"name":"z_2_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tpath    = \"test-board/1/2\"\n\tcomment = \"Test comment\"\n)\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\trid := boards2.CreateReply(bid, tid, 0, comment)\n\n\t// Ensure that returned ID is right\n\tprintln(rid == 2)\n\n\t// Render content must contain the reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \"+comment+\"\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_2_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateReply(404, 1, 0, \"comment\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_2_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, 404, 0, \"comment\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_2_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 404, \"comment\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_2_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Hide thread by flagging it so reply can't be submitted\n\tboards2.FlagThread(bid, tid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"Test reply\")\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_2_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply1\")\n\n\t// Hide thread by flagging it so reply of a reply can't be submitted\n\tboards2.FlagThread(bid, tid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"reply1.1\")\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_2_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"thread\", \"thread\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply1\")\n\n\t// Hide reply by flagging it so sub reply can't be submitted\n\tboards2.FlagReply(bid, tid, rid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"reply1.1\")\n}\n\n// Error:\n// replying to a hidden or frozen reply is not allowed\n"},{"name":"z_2_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"Test reply\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_2_i_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_2_j_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tpath    = \"test-board/1/2\"\n\tcomment = \"Second comment\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"First comment\")\n}\n\nfunc main() {\n\trid2 := boards2.CreateReply(bid, tid, rid, comment)\n\n\t// Ensure that returned ID is right\n\tprintln(rid2 == 3)\n\n\t// Render content must contain the sub-reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e \"+comment+\"\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_2_k_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tcomment = \"Second comment\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"Parent comment\")\n\n\t// Flag parent post so it's hidden\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"Sub comment\")\n}\n\n// Error:\n// replying to a hidden or frozen reply is not allowed\n"},{"name":"z_2_l_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// cannot reply to a frozen thread\n\tboards2.CreateReply(bid, tid, 0, \"foobar\")\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_2_m_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, strings.Repeat(\"x\", boards2.MaxReplyLength+1))\n}\n\n// Error:\n// reply is too long, maximum allowed is 300 characters\n"},{"name":"z_2_n_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"\u003e Markdown blockquote\")\n}\n\n// Error:\n// using Markdown headings, blockquotes or horizontal lines is not allowed in replies\n"},{"name":"z_3_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname    = \"foo123\"\n\tnewName = \"bar123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n\n\t// Ensure board is renamed by the default board owner\n\tbid2, _ := boards2.GetBoardIDFromName(newName)\n\tprintln(\"IDs match =\", bid == bid2)\n}\n\n// Output:\n// IDs match = true\n"},{"name":"z_3_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"\")\n}\n\n// Error:\n// board name is empty\n"},{"name":"z_3_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, name)\n}\n\n// Error:\n// board already exists\n"},{"name":"z_3_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RenameBoard(\"unexisting\", \"foo\")\n}\n\n// Error:\n// board does not exist with name: unexisting\n"},{"name":"z_3_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n}\n\n// Error:\n// addresses are not allowed as board name\n"},{"name":"z_3_f_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n\n\t// Ensure board is renamed by another board owner\n\tbid2, _ := boards2.GetBoardIDFromName(newName)\n\tprintln(\"IDs match =\", bid == bid2)\n}\n\n// Output:\n// IDs match = true\n"},{"name":"z_3_g_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tmember2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n\n\t// Invite a new member that doesn't own the user that matches the new board name\n\tboards2.InviteMember(bid, member2, boards2.RoleOwner)\n\ttesting.SetOriginCaller(member2)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_3_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"short\")\n}\n\n// Error:\n// the minimum allowed board name length is 6 characters\n"},{"name":"z_3_i_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tmember2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n\n\t// Invite a new member that doesn't own the user that matches the new board name\n\tboards2.InviteMember(bid, member2, boards2.RoleOwner)\n\ttesting.SetOriginCaller(member2)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_3_j_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"barbaz\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_4_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tnewRole = boards2.RoleOwner\n\tbid     = boards2.BoardID(0) // Operate on realm DAO instead of individual boards\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole)\n\n\t// Ensure that new role has been changed\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tnewRole = boards2.RoleAdmin\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foo123\")\n\tboards2.InviteMember(bid, member, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole)\n\n\t// Ensure that new role has been changed\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\towner2 = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tadmin  = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, owner2, boards2.RoleOwner)\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, owner2, boards2.RoleAdmin)\n}\n\n// Error:\n// admins are not allowed to remove the Owner role\n"},{"name":"z_4_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tadmin2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\tboards2.InviteMember(bid, admin2, boards2.RoleAdmin)\n\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, admin2, boards2.RoleOwner)\n}\n\n// Error:\n// admins are not allowed to promote members to Owner\n"},{"name":"z_4_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid     = boards2.BoardID(0)                                      // Operate on realm DAO members instead of individual boards\n\tnewRole = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole) // Owner can promote other members to Owner\n\n\t// Ensure that new role has been changed to owner\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, admin, boards2.Role(\"foo\"))\n}\n\n// Error:\n// invalid role: foo\n"},{"name":"z_4_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, \"invalid address\", boards2.RoleModerator)\n}\n\n// Error:\n// invalid member address\n"},{"name":"z_4_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(0, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleGuest)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_5_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, user, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.RemoveMember(bid, user)\n\n\t// Check that user is not a member\n\tprintln(boards2.IsMember(bid, user))\n}\n\n// Output:\n// false\n"},{"name":"z_5_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RemoveMember(0, \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\") // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_5_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RemoveMember(0, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// member not found\n"},{"name":"z_6_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\trole   = boards2.RoleGuest\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, member, role)\n}\n\nfunc main() {\n\tprintln(boards2.HasMemberRole(bid, member, role))\n\tprintln(boards2.HasMemberRole(bid, member, \"invalid\"))\n\tprintln(boards2.IsMember(bid, member))\n}\n\n// Output:\n// true\n// false\n// true\n"},{"name":"z_6_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleGuest\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tprintln(boards2.HasMemberRole(bid, user, role))\n\tprintln(boards2.IsMember(bid, user))\n}\n\n// Output:\n// false\n// false\n"},{"name":"z_7_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"test123\"\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(name)\n}\n\nfunc main() {\n\tbid2, found := boards2.GetBoardIDFromName(name)\n\tprintln(found)\n\tprintln(bid2 == bid)\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_7_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tbid, found := boards2.GetBoardIDFromName(\"foobar\")\n\tprintln(found)\n\tprintln(bid == 0)\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_8_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\ttid := boards2.CreateThread(bid, title, body)\n\n\t// Ensure that returned ID is right\n\tprintln(tid == 1)\n\n\t// Thread should not be frozen by default\n\tprintln(boards2.IsThreadFrozen(bid, tid))\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// false\n// true\n// true\n"},{"name":"z_8_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateThread(404, \"Foo\", \"bar\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_8_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_8_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"\", \"bar\")\n}\n\n// Error:\n// title is empty\n"},{"name":"z_8_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_9_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, title, body)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n\n\t// Ensure thread doesn't exist\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread does not exist with ID: 1\n"},{"name":"z_9_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.DeleteThread(404, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_9_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, 404)\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_9_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Call using a user that has not permission to delete threads\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_9_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to delete threads\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(member)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n\n\t// Ensure thread doesn't exist\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread does not exist with ID: 1\n"}]},"deposit":""}],"fee":{"gas_wanted":"90000000","gas_fee":"900000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"U2iKoHGW6K7bep8UtLBr97zzq/LMSZH7rS2n3lwDYEYf+3lmLs82V256UquOYW8bqvniG3wQopQl2FhYarGSCA=="}],"memo":""},"metadata":{"timestamp":"1743761702"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"RemoveMember","args":["0","g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"3yQ9Uzcug0E/gUI15Ebz6SpmQpMnj+6lf5K3fKPcDvCVrg6yeVepgeK7maTHsm57883RG/9+j5AU0C3RRd8ICg=="}],"memo":""},"metadata":{"timestamp":"1743761807"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["EmptyWithManyMembers"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"PxJx3iE6e2NocMnVTOy4bq7MiK0YVDlIefLAFm9ytsrBRFtruHjDDRQeIoBVJNCmf72D0kRRVii3naZz94OrBQ=="}],"memo":""},"metadata":{"timestamp":"1743761888"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","owner"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"aWHYIIEcmAv3uSgt9ECrBv6Q/z9dZ8u8fWFbYVjqhfO8ELEnn73KcwZlmA43SSclJVlRiVN/TghMf7hCaHb/BA=="}],"memo":""},"metadata":{"timestamp":"1743761893"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1e5hud66rs7ye4zgeqmqvwfhurs2mnf408hdqcl","owner"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"aj9gw0cR3xQIe1cBU2JEMPQyK0ft7NWyAgq4kanFCI2b79JmmEGo45VMfscffxmfJUuzNgeJTnsxOwRupQ4ZAA=="}],"memo":""},"metadata":{"timestamp":"1743761898"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5","admin"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"JF8sEBvqo4OCT8APgZXc/GxPzX+Ij2UJMj+YxTgesHsa1W6sTG8Q4RkshZK15LT99mse4pb9GtGjgG0i33E/Bw=="}],"memo":""},"metadata":{"timestamp":"1743761903"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk","moderator"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"0rEX/wEVQfzwTCwrwK9aV4B7qRiIeB88uq4PFCiemlGg4qf2NMspIUhcynlqzqSU6Y/0+OMxzq3bZJSyoqmHDQ=="}],"memo":""},"metadata":{"timestamp":"1743761908"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1ym6zxff3xq7wfldcs3uyu7x7z40gstggcx8zdj","moderator"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"GO3MGKbeMgas+NtO+OTUGo2VNt9tv9pfQ48SzKyOMmRUOFk96b0E7yc0L1hLfHhlmIry1TN67/W2hw9wpJ81AA=="}],"memo":""},"metadata":{"timestamp":"1743761913"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["TheNumber42"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"muDrsNLE7kZGItSiBNy3vYoe7tyGAyWIfoDYcx4uIIPx+UgjgcJizyiPS6aqEsXrxpyak0+WJ3jUj1HuKARgDQ=="}],"memo":""},"metadata":{"timestamp":"1743761918"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kuCtWj1TUpFzucoJ8iAhcnx9Kmvr629VZ2v3JFLL9O/GX4U97k2O0jpn4usPHV3W6RvsRihX+bXQSZHyYYkNDw=="}],"memo":""},"metadata":{"timestamp":"1743761918"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["2","What's your take on it\\?","Seen in many places, unknown to many"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"3Q6yjDFalubJjr79zO/5N6efvvBVaAoDzu7QlcDORuipWi+9MNQ8cUPGnsT4faRiGwrvvQAMl17xIOoR11VTAg=="}],"memo":""},"metadata":{"timestamp":"1743761923"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["2","1","0","What do you mean\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"i+Zfx47nUWx4qGnftxJrLOpKME3B4VXvHWdLc/pO0HXd3ims6sTH/NHt8E/t1qUlPA8ndK1lgg7Qo8+v0fpyCQ=="}],"memo":""},"metadata":{"timestamp":"1743761928"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["2","1","0","よんじゅうに\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Rup+YIfuQpIu3I3VGXx97u6EZtXZ1yyiEtAcXegacsnu4WB3YnXEIzJauCcw2Edx5Ym3lo/BqVJrwVpoqDigAA=="}],"memo":""},"metadata":{"timestamp":"1743761933"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["2","1","2","Cuarenta y dos\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"5VJ9Q10yIK4j0vvm4fcCgbmem6rUzOaXZA8hkKKYNUQJ5tur+8ClyPSpUn70XEYhfe2RSREvwHSplt0SehAaBg=="}],"memo":""},"metadata":{"timestamp":"1743761938"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["ThreadsExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"I6ZlzBsGf1qOsfnBjwHKJyar1cuDCh+N/VDvsHBVQbqQvMdpJvotHS4oJSzI0267kSV0P3aj0eRhg24/HqSeBA=="}],"memo":""},"metadata":{"timestamp":"1743761943"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Seventh","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"lEnbWEYdUoTq+RPp8RRG0VACcZR6gvelM5uVdzRaiT4x1JcrKelclMGFyC7f1dByoxPx4wYVhDjiA5PERnAtAQ=="}],"memo":""},"metadata":{"timestamp":"1743761948"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Sixth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"N6G8Nonx6w/paVsrfnTLs/BsUN/GJ3iKTbf9YbmLq4/WiHTLsSnSq9XmM3geonSJvM+uvmR/ygD0Roj1Lq3PBw=="}],"memo":""},"metadata":{"timestamp":"1743761953"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kuCtWj1TUpFzucoJ8iAhcnx9Kmvr629VZ2v3JFLL9O/GX4U97k2O0jpn4usPHV3W6RvsRihX+bXQSZHyYYkNDw=="}],"memo":""},"metadata":{"timestamp":"1743761953"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Fifth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"zKIVafDZwKsorlEQcB5gH3Cfxa6RSRyNmrJ6lrLiVASJsm1PEOQX1rAmeq0xECiyzlywQi2QosQ6SOXRpGcKAQ=="}],"memo":""},"metadata":{"timestamp":"1743761958"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Fourth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"2NjemoRCvFjqMm1EqLenIWuaNEP3dGb4dF31urjXy2Z9inS0g/pQNWkU+rTMGVWtqgn9vpL8hW0yZT6VhZL8BQ=="}],"memo":""},"metadata":{"timestamp":"1743761963"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Third","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"lnuXkGx9zXZqVCGfzQQOiQTynjx+lYkydTRxqoHw7s9XA7jIOCfjVFk63sr66TxRNUrGRHKxpcEzUB2vSE3RDQ=="}],"memo":""},"metadata":{"timestamp":"1743761968"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Second","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"vi5VQFW7xYjrl0jtUMwtWwJEVTW1Bcbimgwz2mU/s91fZWJwYdK/lg0LEcO9TdQCPV8EWvsS3DGNpjNfNu/kBA=="}],"memo":""},"metadata":{"timestamp":"1743761973"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","First with many Replies","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"IvThbQ7fDNCuxPjXCB4aUngctbAz8wI4qZ1Y2p9cGp6315zr8tXylNS+n9V/xnYztqYBOO0acV8NTLAjtr6dCQ=="}],"memo":""},"metadata":{"timestamp":"1743761978"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","First"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"yH3slx61rIFtSsDZKTHeIYYn+mL4n+xiht985eukgKk2POWaKf5BGdBULgkJ21kbnsV65vPJIsgYejbQ/9GjCg=="}],"memo":""},"metadata":{"timestamp":"1743761983"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","8","Sub First"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"R0nUwVIAQ59kP/sZjQ3/xgCXzeo5hbSwLMPz4g4s6pBX9KW3/0vAi9kzz+swwp7END9IC6apNlYC303ZEVuyAA=="}],"memo":""},"metadata":{"timestamp":"1743761988"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Second"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"GG4QHf1tSirS6I9cDjng1Xir1Ql+q4x93bm9kODUL6KEanKmD84gKh5/YVMstRkHPp60Et1UsFHC9J6knxI3AQ=="}],"memo":""},"metadata":{"timestamp":"1743761993"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Third"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"voI0taAnzfanaNNKskt12IivTt4qWbCuWtHXV5huhAOOp7B+K4OPQsIHg7+LwAQeTmWXPyrNdB60OX1BjR1KDg=="}],"memo":""},"metadata":{"timestamp":"1743761998"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Fourth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"aTmh1rKQmbiIfSmfSP8ylV9vBoPqZYV9T0aYgwPB/eFEK7rvZ1eW5+3QP5f8Edrgl4B2kf5WwnA3Fhqu5qc8BQ=="}],"memo":""},"metadata":{"timestamp":"1743762003"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Fifth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"rjiWLoD5Mg1Ulv9b3s299jm2HcmJfoKDeg7WQzgKccmyQ8BQUHBbHEYVar+6wSdjl09RpP/F+CnOUP9JN6gVDQ=="}],"memo":""},"metadata":{"timestamp":"1743762008"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Sixth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"TDO4Ji9JE1mdyomiVRL6Nc2Z22xABNA2xy/Gvi2DaF3Q8Ur56106k7DWgAwKkYnWJO2DjPQH0mry3Dn3K5ygDg=="}],"memo":""},"metadata":{"timestamp":"1743762013"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Seventh"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ID/GjdOyQf3DL8tOLPKgRDkmlxK/VNPej1HGPrmDL2XXqSP8VLHWuE8fhmk6yI8FFMrC5TsRBbIVbmmAhARmDA=="}],"memo":""},"metadata":{"timestamp":"1743762018"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Eigth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xg3AUWGaisRcJwnAGHz6JA0Eb+muoI4YznApNB1ZOcqj/ZKbYwk7LJ/f7aJ9QBUO9YMwCkBRwNr/NBGFPzW9Cg=="}],"memo":""},"metadata":{"timestamp":"1743762023"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Ninth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Z28hKxhoyOqbhWsNCkPreWiq0BgyCxB9AxqfTFLKVKYra+RfANNuljqFuCzVhElqDhkP/RlrBl7TfV5Q2AuBBQ=="}],"memo":""},"metadata":{"timestamp":"1743762028"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Tenth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ujgja3YG7j2hRcob5WWrlBZxfAJzr+TicEeQhHLbr7Xa4cQkxHbWI0DTvEKUqV8RYU52xI20s4p6gt0+D2zZCw=="}],"memo":""},"metadata":{"timestamp":"1743762033"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Eleventh"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"AHZ+TfFaMfccMtF4jX+U8Ruq2zNMVI1RyekXJ0KQ91Y0tkqRK8yn4lvv7Vb+AvDVDkAO3MqO9TfVXr28vGHuBg=="}],"memo":""},"metadata":{"timestamp":"1743762039"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["ReadOnlyExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"/KLIc34sqQrmajzkcFfDjtqgtdjiuGAPgO+qrfJd+WIhzN7gkixqzUSXPj3wZDiKikBqc+T+Wb5tp65m6bK9BA=="}],"memo":""},"metadata":{"timestamp":"1743762044"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["4","Example Thread","This thread shouldn't be writable"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"NXhPiUeq9YcNnkudvz745FgxJsebQ01odghXhRQbQGU40Q83p02OzzOJ3VVKV0yhuBxON7Y181/zxZOiTi4MDQ=="}],"memo":""},"metadata":{"timestamp":"1743762049"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"FreezeBoard","args":["4"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"wd/5jD5gLOF9jEvpFuTKkuln4fbytMqJzZPYN4LOiZY/xVrhM8T3QCr7/d6s8uAr2WxqxBiSGh0yZIp2wQ6UBg=="}],"memo":""},"metadata":{"timestamp":"1743762054"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["RepostExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"5TRSh5UmPK8KI/+8sTSI5upXLvb8LXP4YGLzMaJC5Bu69gu5ZIj+SEBez22Ek25bpVLkqHHtqhpmU5QMvIYuAQ=="}],"memo":""},"metadata":{"timestamp":"1743762059"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kuCtWj1TUpFzucoJ8iAhcnx9Kmvr629VZ2v3JFLL9O/GX4U97k2O0jpn4usPHV3W6RvsRihX+bXQSZHyYYkNDw=="}],"memo":""},"metadata":{"timestamp":"1743762059"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateRepost","args":["2","1","Custom repost title","Custom repost body","5"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"JPJZiP3S/FhZUnPZXP93PAzHt4GpBQ4kAopWnRstMp7D3rye1kMdx+qyKaxGGbiAwI+YKrKK12gud8NAJnRbDw=="}],"memo":""},"metadata":{"timestamp":"1743762064"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"SetRealmNotice","args":["A new [version](https://gno.land/r/devx000/gnoland/boards2/v1rc2) is available which fixes a couple of issues and explores a UI which is is more in line with classic Reddit"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"rAsbllvRLrYeD2MhA3PT5+8yfYQ96MY6bt087UKt4uMH5pknjSYHqygG1h9GRtVUuYDZzvwtrgfgw52OvXGKCA=="}],"memo":""},"metadata":{"timestamp":"1743762325"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"SetRealmNotice","args":["A new boards [version](https://gno.land/r/devx000/gnoland/boards2/v1rc2) is available which fixes a couple of issues and explores a UI which is is more in line with classic Reddit"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Ppe3T0NpwmRcYGu73lTjp9yQAmB8G032mX/yTIeOOqn3nJcP9WKCR1OSznIw1PFoYXea1fMEyrgibY17UVavBQ=="}],"memo":""},"metadata":{"timestamp":"1743762441"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"SetRealmNotice","args":["A new boards [version](https://gno.land/r/devx000/gnoland/boards2/v1rc2) is available which fixes a couple of issues and explores a UI which is more in line with classic Reddit"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"QcTtCygzcmmMQ9oCvrxZEO7KVS2rVwjaJvkFvVlJD1f1gHMe6QHWWnh7rqigtGEFROrHKE9X5SXfsKsR2xJ+Cw=="}],"memo":""},"metadata":{"timestamp":"1743762466"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15dz69sch7fkhc9gk57hpe4qea77thmy20apu9x","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Hp9yyz8tbzWiTA9XmiOMfxdRnhtTNFymcsAoxCj3svu85ZXXa9C48RsdAa1OcVmVYAlVaOKa00F5qrqHJ4NgDQ=="}],"memo":""},"metadata":{"timestamp":"1743762511"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1743762858"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1743762953"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1aykqe5ddemku5mwd3elmwtpj8jgss47xrqpag4","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"5W8pvzVVTwqR0USett9a5LYheSuuFicEmPt++BwXxXEqHWgVQtCQkClsJbLdf5hw1cSGg5h7KW1GVrL6b466DA=="}],"memo":""},"metadata":{"timestamp":"1743767985"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1dtuj65mgja87gh0c45pd3rt4cah0kkw9lzld4y","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"gVIdQBBxy3FqNuvip5XH1L48VyKevaNiPaa4nYyyW/3tDm1f82uOznciajCfJAe8rw2wSRB2W3UAg/Ds/RWPBw=="}],"memo":""},"metadata":{"timestamp":"1743768151"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1743769312"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1manfred47kzduec920z88wfr64ylksmdcedlf5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["test-manfred"]}],"fee":{"gas_wanted":"50000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"zIEkKLWS6zeUOjqJGwRvhP+ncHZYYHC7ps9USK+aWU+LXhRXgKvDSdSfbaaDc48kNeXPDc/sU23o4ZFIYPpBBg=="}],"memo":""},"metadata":{"timestamp":"1743774399"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1manfred47kzduec920z88wfr64ylksmdcedlf5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["6","testing testing","👋"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"sJcvKDbrNWnVo0ozE9r4AvUR3bVGhn4t4OrM/H+7gJ2YwBmQ20u56JUG1AeZl/WSdrlLl8pjTBZZskyT49+NAA=="}],"memo":""},"metadata":{"timestamp":"1743774450"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1etcvlu8zyuwnd7w0x0lcu4g2r7yzllyy62gpa5","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"9104212","gas_fee":"4742446ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"hUM8x4T6MQUzpf04aCJ2OtaF5uHBhNuulFwBKJZfLhNCs/3Wm7rCO5wuHUd+iFscgXk6dvnG8G4l7AFSQNqlBA=="}],"memo":""},"metadata":{"timestamp":"1743775038"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bXyHJdtgDmBHTgSUfcLbWb8QmJPrI9s457gJW1yahUnysV2CEJKBbj3TjSy91WEnIgxMWq21Ki9usgKlfzU4Cg=="}],"memo":""},"metadata":{"timestamp":"1743775997"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bXyHJdtgDmBHTgSUfcLbWb8QmJPrI9s457gJW1yahUnysV2CEJKBbj3TjSy91WEnIgxMWq21Ki9usgKlfzU4Cg=="}],"memo":""},"metadata":{"timestamp":"1743776002"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bXyHJdtgDmBHTgSUfcLbWb8QmJPrI9s457gJW1yahUnysV2CEJKBbj3TjSy91WEnIgxMWq21Ki9usgKlfzU4Cg=="}],"memo":""},"metadata":{"timestamp":"1743776017"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"UpdateStatus","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ub3uoxEExL3jMuQoAegvKmDOW1LWrOercf9BdWQkTdVih3mPoIH/7NqWsOjm/+gIgkLa0kYuSbQBsPfadlwYCQ=="}],"memo":""},"metadata":{"timestamp":"1743776022"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bXyHJdtgDmBHTgSUfcLbWb8QmJPrI9s457gJW1yahUnysV2CEJKBbj3TjSy91WEnIgxMWq21Ki9usgKlfzU4Cg=="}],"memo":""},"metadata":{"timestamp":"1743776027"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1743776083"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"name":"hello","path":"gno.land/r/test12/hello","files":[{"name":"package.gno","body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/eco","func":"Render","args":["Deployed through play.gno.land"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ot/V8bS6JNMgzRPR5JTnCh1C/IrUSVBplj9YxTkdum9+xncnn+Bz1wkK83vV5pnwz3yQG7k5wmzwegSGsvvkAw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743788578"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"name":"hworld","path":"gno.land/r/g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5/hworld","files":[{"name":"package.gno","body":"package hworld\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/sys/users","func":"ResolveName","args":["abc"]}],"fee":{"gas_wanted":"3428737","gas_fee":"7144ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"p1kO3fql5GXI69qID2B2pfmvydiypFq+4IIC0iUvpenfZH36w/ccxUKizKYfxh/egfg1Tl/EOVOwwixdPLi8Aw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743793364"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g150gdvn780ws7a3s9qpdvv7h4d9hq6vh672ely0","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"DxumKZ8V42aBbpxBQMjTnP7r0pdLPXmD1ThtvXJj2H14j1jd6gFr9fGXDjlSeuh4U8VqPKskC3uL+3nCsvjtCw=="}],"memo":""},"metadata":{"timestamp":"1743859813"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g150gdvn780ws7a3s9qpdvv7h4d9hq6vh672ely0","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"DxumKZ8V42aBbpxBQMjTnP7r0pdLPXmD1ThtvXJj2H14j1jd6gFr9fGXDjlSeuh4U8VqPKskC3uL+3nCsvjtCw=="}],"memo":""},"metadata":{"timestamp":"1743937361"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":["FirstCatPost"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"6zChAbF3Z6OpdHfgdhMy1W2NSeLFMGXf2/5HpraFAN1q0lmpbE5t5QBMk72Bhe8tO50XW42X17Fk+A+CguXBBQ=="}],"memo":""},"metadata":{"timestamp":"1744009485"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateThread","args":["8","First cat post on boards2!","Katt Williams is an American stand-up comedian and actor. https://en.wikipedia.org/wiki/Katt_Williams"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"nYLnj0q+Y9u5pj2j1qttYx5hK3UmYqWXAfh2PB3HFVcQosvaiRpEOitMnre/aoSJ8BIh1jH9CxYn1zAdhpYXAQ=="}],"memo":""},"metadata":{"timestamp":"1744009736"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["FirstCatPost"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bi+q7rOHbU6AAvDLV3R+eHbwwSNAcMxWGDOGf3neUylsgbVeCpdkKSKPxNOfvz9jCDH+ZhTffYO8DOvRn2CYAQ=="}],"memo":""},"metadata":{"timestamp":"1744009852"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["7","First cat post on boards2!","Katt Williams is an American stand-up comedian and actor. https://en.wikipedia.org/wiki/Katt_Williams"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"AOMDntLfkB4kP8rjoGLw15cDTc6mnwbz8xRXkJk1avZt35hoxynSbYXUwKv1D3CkvoEs8LIPbY7h0uEAgSNbDw=="}],"memo":""},"metadata":{"timestamp":"1744009907"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14n0zsnsk054uxwvnwmmqyrq6e87ynk5vq98qqp","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"gsOW2ax3szJeuurBkA9J/TM0XCaIyS47k/7kUvk9Gq2twiDVroCszGaw53FJD6FJ/FahqTRyzb656P4MLOX3AA=="}],"memo":""},"metadata":{"timestamp":"1743587748"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1dzzx5qwcmawqnhhd76ehkteas5v2dg42hqnd7g","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Fr1uKtG5S6/mDBxNS42Sbmz6AKHqveVyX1PLz0uXJgJ5Hve4XJgukjDM0/0TnrI5OGTpoqoIZ9evnvmx+MebCQ=="}],"memo":""},"metadata":{"timestamp":"1743587759"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kkS7eUe5RBU5tMINWW4NnKVZ/BXSBErtWniDmponcU3J6oxY6D2p17Zv9ZJeJk+oNmzWhpbIQ0hZ3A7G0pGICQ=="}],"memo":""},"metadata":{"timestamp":"1743587914"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kkS7eUe5RBU5tMINWW4NnKVZ/BXSBErtWniDmponcU3J6oxY6D2p17Zv9ZJeJk+oNmzWhpbIQ0hZ3A7G0pGICQ=="}],"memo":""},"metadata":{"timestamp":"1743587924"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kkS7eUe5RBU5tMINWW4NnKVZ/BXSBErtWniDmponcU3J6oxY6D2p17Zv9ZJeJk+oNmzWhpbIQ0hZ3A7G0pGICQ=="}],"memo":""},"metadata":{"timestamp":"1743587939"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xnrpwODqB9Qzy8lCyG8WhKFujPPtqnByd405Ea6SUtiep7uJyoEzw3D5R8NoasWmRQmXOiceh8x/ETIMAYwOAA=="}],"memo":""},"metadata":{"timestamp":"1743587980"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xnrpwODqB9Qzy8lCyG8WhKFujPPtqnByd405Ea6SUtiep7uJyoEzw3D5R8NoasWmRQmXOiceh8x/ETIMAYwOAA=="}],"memo":""},"metadata":{"timestamp":"1743588120"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kkS7eUe5RBU5tMINWW4NnKVZ/BXSBErtWniDmponcU3J6oxY6D2p17Zv9ZJeJk+oNmzWhpbIQ0hZ3A7G0pGICQ=="}],"memo":""},"metadata":{"timestamp":"1743588221"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xnrpwODqB9Qzy8lCyG8WhKFujPPtqnByd405Ea6SUtiep7uJyoEzw3D5R8NoasWmRQmXOiceh8x/ETIMAYwOAA=="}],"memo":""},"metadata":{"timestamp":"1743591981"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xnrpwODqB9Qzy8lCyG8WhKFujPPtqnByd405Ea6SUtiep7uJyoEzw3D5R8NoasWmRQmXOiceh8x/ETIMAYwOAA=="}],"memo":""},"metadata":{"timestamp":"1743591991"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"rcFAWr1sDO8na64+BQFNqCOiCOQiLSNI1QUKX2m0F1heLU/NOUKhKmbQ9fosCuEhsWELsdUBUaKJH5f4d+jHDg=="}],"memo":""},"metadata":{"timestamp":"1743597359"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2231690ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ocvr/JPKso//ytHIrkTURPWCS1jVsSnm4WrvMUCH9rDe7gyJPgsg6i95QyuqUNFpeiCf57nGq8BjbfufmFF4DA=="}],"memo":""},"metadata":{"timestamp":"1743597379"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"887428","gas_fee":"165039ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"L2sWfo8q5QmVPdiTdVZiTSjulJahNRAZCKd6DLAg/8pbYY259P+yH2fAdYiZ4+4FtnEk9Htv9+oBoeX38V12Bg=="}],"memo":""},"metadata":{"timestamp":"1743597384"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["42"]}],"fee":{"gas_wanted":"3059175","gas_fee":"6374ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"XZzhqFjZxRo0L9GenZ5HAPgE0BnjTFi028j4Ok74B5XgPaMXlj5pTpgCQWY31G6/AxtCeYMT0sNH+VxUKzfXCw=="}],"memo":""},"metadata":{"timestamp":"1743597409"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"KhhBvAFXQEh6n4ZUWU+dnMi3kozbMu32L+QF07g35SLWwHKNCpj5M9hzJDx2HMEqfe+jIyYKyqwolPi8AaJwCw=="}],"memo":""},"metadata":{"timestamp":"1743606306"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"vh0tJl7xCAhje36H2bE94wqsr/n3B/RAQNJeR4OS90NwvQCzZotPzdkhdQVbLdiNPbOdmbxRkK6FjDVIn8acCA=="}],"memo":""},"metadata":{"timestamp":"1743606668"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"/YN3AgTMVWUUwDs3P+vqnXxl4gUlKHwQqdLr1tzzDo0dIETPpbUbzXklVQJVB16dItO2GP4GB35BwBM0BINMDA=="}],"memo":""},"metadata":{"timestamp":"1743607723"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"SQ7dS02SL70+F6zE5E4Sk1vDb8zJQw7V84SkilcWmNMV32mOjy+wVf1xPbDjEbX84XGOhWRknf5/430X6ZU/Bg=="}],"memo":""},"metadata":{"timestamp":"1743608020"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"RwuWiR8W+j5QqToOUOoA4H3ysiUt5ToL3aFD9HMxWS/iEFGNd60d47YOUTxNNkY/P51813vWT/6CgHosxP4iDw=="}],"memo":""},"metadata":{"timestamp":"1743608226"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\n","admin"]}],"fee":{"gas_wanted":"8066534","gas_fee":"16806ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"1YOcGA+gTIMMHhGCPpndDSZKZZaCojfs0d7QiVAb7weQIk4QRJwOAtI2TqwzK8A65q+fWPqMm4kGIgTtBO/cDw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743608291"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"8967781","gas_fee":"18683ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"k6ifImJGjzHjrw5OxnlFED4lGN13DI/LiA9zW1SBYewS3fnwEyLx2wUQfgqdVlMZBQ6C8D9HCsByGQo9jSLYBQ=="}],"memo":""},"metadata":{"timestamp":"1743608301"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15dz69sch7fkhc9gk57hpe4qea77thmy20apu9x","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Hp9yyz8tbzWiTA9XmiOMfxdRnhtTNFymcsAoxCj3svu85ZXXa9C48RsdAa1OcVmVYAlVaOKa00F5qrqHJ4NgDQ=="}],"memo":""},"metadata":{"timestamp":"1743610126"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"DeleteTodo","args":["0"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"RFOIErW3yMP8ByuGPAnoOpUod4ulfP/QlVKtCKL4zDMh9H8mkcCi/y2UKm0enLlXmheSq/FHMiKbvuGeJWFXCQ=="}],"memo":""},"metadata":{"timestamp":"1743611628"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g14gvmle0a5hln0ct7wv857gucr7lmeust35736r","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"+rlC9mhE1bERSiDZ2YvktDxug3Mc9wtJReSHk+MTLi0jqjVTzTvI5pVqJzBO0KSImDbnBNWH0LZe38Sc9frGAQ=="}],"memo":""},"metadata":{"timestamp":"1743662226"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"gZlILkg4UOwV0qKQo2Id40lq46Ljw5DqPd7b1vYElGti3wOxxkEdO1i3YGJ1yv1WzL9ieLQ49xMVJ7qz3Ei8Cg=="}],"memo":""},"metadata":{"timestamp":"1743663236"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","send":"","pkg_path":"gno.land/r/demo/foo721","func":"BalanceOf","args":["g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"FocyEa3/BEh0f/BXj/1c7nfB6Vi071PklsMa8xqnRb+Ox/s8f3p2A3ZtpuYM/kCF/+BPBYQusAZOHfCioLhbBw=="}],"memo":""},"metadata":{"timestamp":"1743663533"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","send":"","pkg_path":"gno.land/r/demo/foo721","func":"BalanceOf","args":["g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj"]}],"fee":{"gas_wanted":"10000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ggFsr+PEH6suxXVxIY1hqEqRekl7hs8flF7ZTb7lCdSFqXo3/xE6aD8eNaEKy5o+MnvwHyRDXfybKZPWCDxABg=="}],"memo":""},"metadata":{"timestamp":"1743663709"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"VS+OtfNCE8oKNuNMlwWMfniOkuJr1QLr6+PplUe5bgNW8j7pGOt7OiO6iEYFhYRMOHEy8iYg5QYy68qfWc76BA=="}],"memo":""},"metadata":{"timestamp":"1743666971"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["42"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2233340ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"/6BW+YwJnX34zp8n5IsfJp1x9Ektt4uUpEJzYgj1AMiIHED4K+zPCOd8Lf68kCIYvoVVYoen+SBR0AbEFTsnDQ=="}],"memo":""},"metadata":{"timestamp":"1743666986"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["keyboard_worrier"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"dx08R8/b7RvesdrpJ6NriCsfFxceLl7SsKZ7nW/apu6BoC7syqV4PcR55AcdpE4Brr6RqVv4VkgF/G1KPbRgBA=="}],"memo":""},"metadata":{"timestamp":"1743672162"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743674585"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743675500"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676274"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676415"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676425"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676440"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676450"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676465"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","send":"","pkg_path":"gno.land/r/demo/userbook","func":"SignUp","args":null}],"fee":{"gas_wanted":"3000000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"b6ObPuETfc7XCJNEMllymwQMJSpPECA7YG3zpgVRo6f77xW1dUyLMx2kawbcJJxjZqXQ068cfBW96s1+S1kRBw=="}],"memo":""},"metadata":{"timestamp":"1743676600"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"RemoveMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\n"]}],"fee":{"gas_wanted":"7891622","gas_fee":"16441ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"89l+iGtobou/e+F/iiifDiQhNHbij0ij+5Ya3ziCacKLcGIlyTx1luTSgS6iPDKeh09cVbi6abEeN5kUm5YUAQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743677621"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","admin"]}],"fee":{"gas_wanted":"8066714","gas_fee":"16806ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"LcaSje7J3JjSKApJB+1EUE6tala9gr9Sq6BIUc+VqChPm0QcGhgR9W5ErCghvSKzGSP6M//zbXqTUGz0ejp+AA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743677721"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"887404","gas_fee":"1849ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"0WqDLPs6a/WA9hXWYVTP+x9TffQ4HbxoY/4ecDysE3Rp9HlXurepSylz4pqFcL0B/BOY885KLvF70bhsM1veAg=="}],"memo":""},"metadata":{"timestamp":"1743677742"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["hello !"]}],"fee":{"gas_wanted":"887311","gas_fee":"1849ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"HbQPKoyJhk/D9pzUPjl7/Z6WSeszhbMmucUwdHYB0/aZCEZ0atxLOoaF4ZUWlaVlMIlBKD/l+/1sRnX6N9GRBA=="}],"memo":""},"metadata":{"timestamp":"1743677757"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"OSUd1L/RiFhkxA3PW+7ADa1mygPaPbouzWwlOL949dJSBnV2hIBh57uz37wAxxBghvtS8LhSnLZ+riJwyBLXCg=="}],"memo":""},"metadata":{"timestamp":"1743680159"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"ChangeMemberRole","args":["0","g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"OMuLXy3HO9JO/FO5LMoSRcr9sojwnppOxU8yXqUWK1xGfftIlomdBUNyxMe78GQRE9J67Iw1EgySadzxatvwDg=="}],"memo":""},"metadata":{"timestamp":"1743680391"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/leon/hof","func":"Upvote","args":["gno.land%2Fr%2Fursulovic%2Fhome"]}],"fee":{"gas_wanted":"12000000","gas_fee":"1721880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"X/eJPJL8ZV8bQZLTk7PadUV+DemIEj/2JLxSv1Y5iosIf2YTwrcxDgidOMfkqyUxQTFmHo/aYr1WQAVPbh/kCw=="}],"memo":""},"metadata":{"timestamp":"1743682979"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1d2hvkqhqckhzpaum09c002fesdw89qrcg9zqws","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ReZNIs5Bl66EsrE8h8FAxIdTKLQTT3JLhrtrMX1xvE0SdiyZ6kXOqG0tInvf/5XZlaoDQ5NazQIPDp5AljTEAw=="}],"memo":""},"metadata":{"timestamp":"1743683221"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1lrsrj4auaffjk538w3x2c9gzyth2m0n39zcg6d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"AKXPlpnjspmHDpF+EQEoze/h/1Dw8Vf43t5GzNgg1Yta3kMRIc06TxltwYPRuJYQRbro5iLt8dh572vXMvChDA=="}],"memo":""},"metadata":{"timestamp":"1743704885"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["2","1","1","Hey hey hey"]}],"fee":{"gas_wanted":"60000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"epppoxiBBFm5IjbU64qXJewGo/7oLGKO0VJsduVtOJYhqNcJSWezt1izHysK6CqGG7DxS2N0SqXR31NNQK8VAw=="}],"memo":""},"metadata":{"timestamp":"1743711043"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["aeddi"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"dXUiTfFR460T8IopbpjSaK+P/nicuQjLa2LAeldy3Rcm65g9P4BnnZ6k0lWXUNaAMsWH7BvQNH3oFdu/YF2nCA=="}],"memo":""},"metadata":{"timestamp":"1743711163"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g16znvp6wxupkkds8mmmtxhvmdly08xpa4rqagp3","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"k1kPHgJM5ggOKZcD9HavykmLc/dkrGogJ2/JBROmxPbT2e6drMzTk2z8OCHjxyjze2/ubWCbvnPCWxr29ZCzBA=="}],"memo":""},"metadata":{"timestamp":"1743712058"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["3","This is a test","Hello World"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"RANRlJvwsfsnr5pkPb5EdNIGFSxl7v207n0pAGgI4Zhqws32Gzv92BzizFTsaQT41XoGZVH6ljWfrLf1bDcxDQ=="}],"memo":""},"metadata":{"timestamp":"1743712737"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"1648310ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"eKVgBjNuPm+xht6YH/l5tXH71McvdcgSAPjlHJL5noOfVFMIE/Mbs7pP0pXECIqQ5QNouD12V/EAT81eN1/yDQ=="}],"memo":""},"metadata":{"timestamp":"1743715914"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"+AnQgsjqwBa57nMiYLJQCgFzuDDAVhkt5x/rVFAqSsshwUs09yf3ksUe+z6zmw5Wi9GaGolmc5WelUD+fIAfDQ=="}],"memo":""},"metadata":{"timestamp":"1743738197"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["1","1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"+TtfHUdK8eOn61UU0S11TklKxw+opiesLW6peiVOPMqVUfm2io3Bb8M745B64R9w7/Wa5gIjwFsK3NBwCFCcDw=="}],"memo":""},"metadata":{"timestamp":"1743738288"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"DeletePost","args":["1","2","2"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"TyJBvACuE8gHyNed5jeU2OGyhr+/0knJHIWBJmSCoY2Bk+O7O5BHus2ZqT2EKJVm6UwbFu1jtjMTJhkTy9TfBw=="}],"memo":""},"metadata":{"timestamp":"1743738333"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/leon/hof","func":"Upvote","args":["gno.land%2Fr%2Fursulovic%2Fhome"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"7w85qlNpnp4p/g8ld6Cg3B1tNTKr/jEbkmOkjkZGO19A56uN/1qTbsgdnIkLD+dIKW8LlP5b9/89tr8c1PZ1Ag=="}],"memo":""},"metadata":{"timestamp":"1743738469"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["1","2"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"tVowNVrP7Rk8tQ2rKYAkIhhXBOeKDV9XBo0/1HE4zX9ZcsBE+a7nKjqIxofQV6cUbRGE4x8P9A29Ks5KjpH6Bg=="}],"memo":""},"metadata":{"timestamp":"1743738680"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1nnl20472w0effzcexuqmk4ntn20wg95ytygy55","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"TtQ39YW0Ecf2merJzXjISiic48o1tc2YJegiC3SJm+OnAbYJEhJBNgAbLJZupSz0pl3HxAWoLIaNSftWGG8TAw=="}],"memo":""},"metadata":{"timestamp":"1743739027"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1nnl20472w0effzcexuqmk4ntn20wg95ytygy55","to_address":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","amount":"9000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"sX5sD9n5f/MQ7BhkmovbjAPmb9q0TEGDnsxy1exAJd265fJfMPpNbIARz6iJTbfjHnb6dmVuD/FBYELfocJrAQ=="}],"memo":""},"metadata":{"timestamp":"1743739047"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1zeq4hn2hd2azde6p9x2ya9gp3ug30vuuv56pym","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"WyfGApIENWM21BnfCCjLar/JmI1YIu5XyCAbW8RZ8uIr48YZZUenfn9OFS6uhDSgydFHEi4dGzkJnBNapTooCA=="}],"memo":""},"metadata":{"timestamp":"1743739590"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1zeq4hn2hd2azde6p9x2ya9gp3ug30vuuv56pym","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["2","2"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"HB9tk6ZVTE/MYUYpIhVbPLWSf5La5tT4Oily6u9oEypn5a7y6GZ3bRQH53PKVk0HE2KIyfw+J29M0rBa8fjbBQ=="}],"memo":""},"metadata":{"timestamp":"1743739625"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1p5pa2sp4elcja2u8wn36zv3plsyp8xrqgz0usf","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"HEdysJ0aqWgRYYCb7syiZ8D5AblFIRfXXWXhH3P3T5Dyxg1odHNQ2VwoYTQ9NX9FubLt6JItuMQ+8PlYtBNZAA=="}],"memo":""},"metadata":{"timestamp":"1743750714"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Rqf9NhUO3sQwKUmNU7GrX8d1pzZRaNjOWqAx/XL4psTx/txvDZWdPpvbwoZFvfuaZ99/Nd07Ht9HjmXOUQCyBw=="}],"memo":""},"metadata":{"timestamp":"1743750895"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":["aeddi-testing"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"j7ShULKK/MB8bsIL15PbOfQRCz34X7VpeVsv61YMZ9EsGEdv9rdy7NSXFf9BbKtU7acnTzc36bi8RXBqonWCAQ=="}],"memo":""},"metadata":{"timestamp":"1743751141"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","to_address":"g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","amount":"1000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"DeFguiM0qG5+CTtuNr1BM3z42UJAkDBg+7g+/7/2kLY21hC+Z2uWwpVpDehGEG9a0Pcs8e1OybcqYFKhHZ/RDg=="}],"memo":""},"metadata":{"timestamp":"1743755182"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1etcvlu8zyuwnd7w0x0lcu4g2r7yzllyy62gpa5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Ye42Dwic6f8nEQVxwxVg8DNVnlxMscInjIntiz5mOTFi4Edsqw8L1g7n4NfeQb62FOz6DiHZVoEurLEr6YhaDw=="}],"memo":""},"metadata":{"timestamp":"1743760782"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1etcvlu8zyuwnd7w0x0lcu4g2r7yzllyy62gpa5","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","-1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"E0mdmjXzFwUjU0DWIzTiQRys1zkvBJ7KYowkKTnJV83tGH56kvAGutHarfu/L1Sn3z2TgKls3XeI6xIrDBn+AQ=="}],"memo":""},"metadata":{"timestamp":"1743760847"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kuCtWj1TUpFzucoJ8iAhcnx9Kmvr629VZ2v3JFLL9O/GX4U97k2O0jpn4usPHV3W6RvsRihX+bXQSZHyYYkNDw=="}],"memo":""},"metadata":{"timestamp":"1743761662"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","package":{"name":"boards2","path":"gno.land/r/devx000/gnoland/boards2/v1rc2","files":[{"name":"board.gno","body":"package boards2\n\nimport (\n\t\"net/url\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\ntype BoardID uint64\n\nfunc (id BoardID) String() string {\n\treturn strconv.Itoa(int(id))\n}\n\nfunc (id BoardID) Key() string {\n\treturn padZero(uint64(id), 10)\n}\n\ntype Board struct {\n\tid        BoardID // only set for public boards.\n\tname      string\n\taliases   []string\n\tcreator   std.Address\n\tthreads   avl.Tree // Post.id -\u003e *Post\n\tpostsCtr  uint64   // increments Post.id\n\tcreatedAt time.Time\n\tdeleted   avl.Tree // TODO reserved for fast-delete.\n\tperms     Permissions\n\treadonly  bool\n}\n\nfunc newBoard(id BoardID, name string, creator std.Address, p Permissions) *Board {\n\treturn \u0026Board{\n\t\tid:        id,\n\t\tname:      name,\n\t\tcreator:   creator,\n\t\tthreads:   avl.Tree{},\n\t\tcreatedAt: time.Now(),\n\t\tdeleted:   avl.Tree{},\n\t\tperms:     p,\n\t}\n}\n\nfunc (board *Board) GetID() BoardID {\n\treturn board.id\n}\n\n// GetName returns the name of the board.\nfunc (board *Board) GetName() string {\n\treturn board.name\n}\n\n// GetURL returns the relative URL of the board.\nfunc (board *Board) GetURL() string {\n\treturn strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\") + \":\" + url.PathEscape(board.name)\n}\n\n// GetURL returns relative board path relative.\n//\n// Note: returned result is not escaped. Use GetURL to get URL-encoded path.\nfunc (board *Board) GetPath() string {\n\treturn strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\") + \":\" + board.name\n}\n\nfunc (board *Board) GetPermissions() Permissions {\n\treturn board.perms\n}\n\n// SetReadonly updates board's read-only status.\nfunc (board *Board) SetReadonly(readonly bool) {\n\tboard.readonly = readonly\n}\n\n// IsReadonly checks if the board is a read-only board.\nfunc (board *Board) IsReadonly() bool {\n\treturn board.readonly\n}\n\nfunc (board *Board) GetThread(threadID PostID) (_ *Post, found bool) {\n\tv, found := board.threads.Get(threadID.Key())\n\tif !found {\n\t\treturn nil, false\n\t}\n\treturn v.(*Post), true\n}\n\nfunc (board *Board) AddThread(creator std.Address, title string, body string) *Post {\n\tpid := board.incGetPostID()\n\tthread := newPost(board, pid, creator, title, body, pid, 0, 0)\n\tboard.threads.Set(pid.Key(), thread)\n\treturn thread\n}\n\n// NOTE: this can be potentially very expensive for threads with many replies.\n// TODO: implement optional fast-delete where thread is simply moved.\nfunc (board *Board) DeleteThread(pid PostID) {\n\t_, removed := board.threads.Remove(pid.Key())\n\tif !removed {\n\t\tpanic(\"thread does not exist with ID \" + pid.String())\n\t}\n}\n\n// Render renders a board into Markdown.\nfunc (board *Board) Render(path, menu string) string {\n\tvar sb strings.Builder\n\n\tsb.WriteString(\"# \" + board.GetName() + \"  \\n\")\n\tsb.WriteString(\"Board created by \" + newUserLink(board.creator) + \" \")\n\tsb.WriteString(\"on \" + board.createdAt.Format(dateFormat))\n\tsb.WriteString(\", #\" + board.id.String())\n\n\tif board.IsReadonly() {\n\t\tsb.WriteString(\"  \\n_**Starting new threads and commenting is disabled**_\")\n\t}\n\n\t// XXX: Menu is rendered by the caller to deal with links and sub-menus\n\t// TODO: We should have the render logic separated from boards so avoid sending menu as argument\n\tif menu != \"\" {\n\t\tsb.WriteString(\"\\n\\n\")\n\t\tsb.WriteString(menu)\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\tsb.WriteString(\"\\n\\n---\\n\")\n\n\tif board.threads.Size() == 0 {\n\t\tsb.WriteString(\"### This board doesn't have any threads\\n\")\n\t\tif !board.IsReadonly() {\n\t\t\turl := board.GetPostFormURL()\n\t\t\tsb.WriteString(\"Do you want to [start a new conversation](\" + url + \") in this board ?\")\n\t\t}\n\t\treturn sb.String()\n\t}\n\n\tp, err := pager.New(path, board.threads.Size(), pager.WithPageSize(pageSizeThreads))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\trender := func(_ string, v any) bool {\n\t\tthread := v.(*Post)\n\t\tif thread.isHidden {\n\t\t\treturn false\n\t\t}\n\n\t\tsb.WriteString(thread.RenderSummary())\n\t\tsb.WriteString(\"\\n\")\n\t\treturn false\n\t}\n\n\tsb.WriteString(\"Sort by: \")\n\tr := realmpath.Parse(path)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tsb.WriteString(newLink(\"newest first\", r.String()))\n\t\tsb.WriteString(\"\\n\\n\")\n\t\tboard.threads.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tsb.WriteString(newLink(\"oldest first\", r.String()))\n\t\tsb.WriteString(\"\\n\\n\")\n\t\tboard.threads.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tsb.WriteString(\"\\n---\\n\")\n\t\tsb.WriteString(pager.Picker(p))\n\t}\n\n\treturn sb.String()\n}\n\nfunc (board *Board) incGetPostID() PostID {\n\tboard.postsCtr++\n\treturn PostID(board.postsCtr)\n}\n\nfunc (board *Board) GetURLFromThreadID(threadID PostID) string {\n\treturn board.GetURL() + \"/\" + threadID.String()\n}\n\nfunc (board *Board) GetURLFromReplyID(threadID, replyID PostID) string {\n\treturn board.GetURL() + \"/\" + threadID.String() + \"/\" + replyID.String()\n}\n\nfunc (board *Board) GetRenameFormURL() string { // TODO: These type of functions shouldn't be part of Board type\n\treturn txlink.Call(\n\t\t\"RenameBoard\",\n\t\t\"name\", board.name,\n\t\t\"newName\", \"\",\n\t)\n}\n\nfunc (board *Board) GetFreezeFormURL() string {\n\treturn txlink.Call(\n\t\t\"FreezeBoard\",\n\t\t\"boardID\", board.id.String(),\n\t)\n}\n\nfunc (board *Board) GetUnfreezeFormURL() string {\n\treturn txlink.Call(\n\t\t\"UnfreezeBoard\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"threadID\", \"\",\n\t\t\"replyID\", \"\",\n\t)\n}\n\nfunc (board *Board) GetFlaggingThresholdFormURL() string {\n\treturn txlink.Call(\n\t\t\"SetFlaggingThreshold\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"threshold\", \"\",\n\t)\n}\n\nfunc (board *Board) GetInviteMemberFormURL() string {\n\treturn txlink.Call(\n\t\t\"InviteMember\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"user\", \"\",\n\t\t\"role\", \"\",\n\t)\n}\n\nfunc (board *Board) GetPostFormURL() string {\n\treturn txlink.Call(\n\t\t\"CreateThread\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"title\", \"\",\n\t\t\"body\", \"\",\n\t)\n}\n\nfunc (board *Board) GetMembersURL() string {\n\treturn board.GetURL() + \"/members\"\n}\n\nfunc createDefaultBoardPermissions(owner std.Address) *DefaultPermissions {\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.SetSuperRole(RoleOwner)\n\tperms.AddRole(\n\t\tRoleAdmin,\n\t\tPermissionBoardRename,\n\t\tPermissionBoardFlaggingUpdate,\n\t\tPermissionMemberInvite,\n\t\tPermissionMemberRemove,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadEdit,\n\t\tPermissionThreadDelete,\n\t\tPermissionThreadRepost,\n\t\tPermissionThreadFlag,\n\t\tPermissionThreadFreeze,\n\t\tPermissionReplyCreate,\n\t\tPermissionReplyDelete,\n\t\tPermissionReplyFlag,\n\t\tPermissionReplyFreeze,\n\t\tPermissionRoleChange,\n\t)\n\tperms.AddRole(\n\t\tRoleModerator,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadEdit,\n\t\tPermissionThreadRepost,\n\t\tPermissionThreadFlag,\n\t\tPermissionReplyCreate,\n\t\tPermissionReplyFlag,\n\t)\n\tperms.AddRole(\n\t\tRoleGuest,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadRepost,\n\t\tPermissionReplyCreate,\n\t)\n\tperms.AddUser(owner, RoleOwner)\n\treturn perms\n}\n"},{"name":"board_readonly.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"time\"\n)\n\n// ReadonlyBoard defines an interface for readonly boards.\ntype ReadonlyBoard interface {\n\t// ID returns the unique identifier of the board.\n\tID() BoardID\n\n\t// Name returns the name of the board.\n\tName() string\n\n\t// Aliases returns a list with previous names assigned to the board.\n\tAliases() []string\n\n\t// Creator returns board's creator address.\n\tCreator() std.Address\n\n\t// LastPostID returns the ID assigned to the last created thread.\n\tLastPostID() uint64\n\n\t// CreatedAt returns the time when board was created.\n\tCreatedAt() time.Time\n\n\t// IsReadonly returns true when board shouldn't allow the creation of threads and comments.\n\tIsReadonly() bool\n\n\t// MembersCount returns the number of invited board members.\n\tMembersCount() int\n\n\t// IterateMembers allows reading the list of invited board members.\n\tIterateMembers(offset, count int, fn UsersIterFn)\n}\n\ntype readonlyBoard struct {\n\tboard *Board\n}\n\nfunc (b readonlyBoard) ID() BoardID {\n\treturn b.board.id\n}\n\nfunc (b readonlyBoard) Name() string {\n\treturn b.board.name\n}\n\nfunc (b readonlyBoard) Aliases() []string {\n\taliases := make([]string, len(b.board.aliases))\n\tfor i, s := range b.board.aliases {\n\t\taliases[i] = s\n\t}\n\treturn aliases\n}\n\nfunc (b readonlyBoard) Creator() std.Address {\n\treturn b.board.creator\n}\n\nfunc (b readonlyBoard) LastPostID() uint64 {\n\treturn b.board.postsCtr\n}\n\nfunc (b readonlyBoard) CreatedAt() time.Time {\n\treturn b.board.createdAt\n}\n\nfunc (b readonlyBoard) IsReadonly() bool {\n\treturn b.board.readonly\n}\n\nfunc (b readonlyBoard) MembersCount() int {\n\treturn b.board.perms.UsersCount()\n}\n\nfunc (b readonlyBoard) IterateMembers(offset, count int, fn UsersIterFn) {\n\tb.board.perms.IterateUsers(offset, count, fn)\n}\n"},{"name":"board_test.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nfunc TestBoardID_String(t *testing.T) {\n\tinput := BoardID(32)\n\n\tuassert.Equal(t, \"32\", input.String())\n}\n\nfunc TestBoardID_Key(t *testing.T) {\n\tinput := BoardID(128)\n\twant := strings.Repeat(\"0\", 7) + \"128\"\n\tuassert.Equal(t, want, input.Key())\n}\n\nfunc TestBoard_GetID(t *testing.T) {\n\twant := int(92)\n\tb := new(Board)\n\tb.id = BoardID(want)\n\tgot := int(b.GetID())\n\n\tuassert.Equal(t, got, want)\n\tuassert.NotEqual(t, got, want*want)\n}\n\nfunc TestBoard_GetURL(t *testing.T) {\n\tpkgPath := strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\tname := \"foobar_test_get_url123\"\n\twant := pkgPath + \":\" + name\n\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tboard := newBoard(1, name, addr, perms)\n\tgot := board.GetURL()\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetThread(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(1, \"test123\", addr, perms)\n\n\t_, ok := b.GetThread(12345)\n\tuassert.False(t, ok)\n\n\tpost := b.AddThread(addr, \"foo\", \"bar\")\n\t_, ok = b.GetThread(post.GetPostID())\n\tuassert.True(t, ok)\n}\n\nfunc TestBoard_DeleteThread(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(1, \"test123\", addr, perms)\n\n\tpost := b.AddThread(addr, \"foo\", \"bar\")\n\tid := post.GetPostID()\n\n\tb.DeleteThread(id)\n\n\t_, ok := b.GetThread(id)\n\tuassert.False(t, ok)\n}\n\nvar boardUrlPrefix = strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\nfunc TestBoard_GetURLFromThreadID(t *testing.T) {\n\tboardName := \"test12345\"\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(BoardID(11), boardName, addr, perms)\n\twant := boardUrlPrefix + \":\" + boardName + \"/10\"\n\n\tgot := b.GetURLFromThreadID(10)\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetURLFromReplyID(t *testing.T) {\n\tboardName := \"test12345\"\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(BoardID(11), boardName, addr, perms)\n\twant := boardUrlPrefix + \":\" + boardName + \"/10/20\"\n\n\tgot := b.GetURLFromReplyID(10, 20)\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetPostFormURL(t *testing.T) {\n\tbid := BoardID(386)\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(bid, \"foo1234\", addr, perms)\n\texpect := txlink.Call(\"CreateThread\", \"boardID\", bid.String(), \"title\", \"\", \"body\", \"\")\n\n\tgot := b.GetPostFormURL()\n\tuassert.Equal(t, expect, got)\n}\n"},{"name":"boards.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tgPerms        Permissions\n\tgNotice       string\n\tgHelp         string\n\tgLastBoardID  BoardID\n\tgBoardsByID   avl.Tree // string(id) -\u003e *Board\n\tgBoardsByName avl.Tree // string(name) -\u003e *Board\n\tgLocked       struct {\n\t\trealm        bool\n\t\trealmMembers bool\n\t}\n)\n\nfunc init() {\n\t// TODO: Define and change the default realm owner (or owners)\n\towner := std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\n\t// Initialize default realm permissions\n\tgPerms = createDefaultPermissions(owner)\n\n\t// Import relevant initial state from previous version\n\tinitFromPrevVersion()\n}\n\n// incGetBoardID returns a new board ID.\nfunc incGetBoardID() BoardID {\n\tgLastBoardID++\n\treturn gLastBoardID\n}\n\n// getBoard returns a board for a specific ID.\nfunc getBoard(id BoardID) (_ *Board, found bool) {\n\tv, exists := gBoardsByID.Get(id.Key())\n\tif !exists {\n\t\treturn nil, false\n\t}\n\treturn v.(*Board), true\n}\n\n// mustGetBoardByName returns a board or panics when it's not found.\nfunc mustGetBoardByName(name string) *Board {\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tpanic(\"board does not exist with name: \" + name)\n\t}\n\treturn v.(*Board)\n}\n\n// mustGetBoard returns a board or panics when it's not found.\nfunc mustGetBoard(id BoardID) *Board {\n\tboard, found := getBoard(id)\n\tif !found {\n\t\tpanic(\"board does not exist with ID: \" + id.String())\n\t}\n\treturn board\n}\n\n// mustGetThread returns a thread or panics when it's not found.\nfunc mustGetThread(board *Board, threadID PostID) *Post {\n\tthread, found := board.GetThread(threadID)\n\tif !found {\n\t\tpanic(\"thread does not exist with ID: \" + threadID.String())\n\t}\n\treturn thread\n}\n\n// mustGetReply returns a reply or panics when it's not found.\nfunc mustGetReply(thread *Post, replyID PostID) *Post {\n\treply, found := thread.GetReply(replyID)\n\tif !found {\n\t\tpanic(\"reply does not exist with ID: \" + replyID.String())\n\t}\n\treturn reply\n}\n\nfunc mustGetPermissions(bid BoardID) Permissions {\n\tif bid != 0 {\n\t\tboard := mustGetBoard(bid)\n\t\treturn board.perms\n\t}\n\treturn gPerms\n}\n"},{"name":"flag.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n// DefaultFlaggingThreshold defines the default number of flags that hides flaggable items.\nconst DefaultFlaggingThreshold = 1\n\nvar gFlaggingThresholds avl.Tree // string(board ID) -\u003e int\n\ntype Flag struct {\n\tUser   std.Address\n\tReason string\n}\n\ntype Flaggable interface {\n\t// AddFlag adds a new flag to an item.\n\t//\n\t// Returns false if item was already flagged by user.\n\tAddFlag(flag Flag) bool\n\n\t// FlagsCount returns number of times item was flagged.\n\tFlagsCount() int\n}\n\n// flagItem adds a flag to a flaggable item (post, thread, etc).\n//\n// Returns whether flag count threshold is reached and item can be hidden.\n//\n// Panics if flag count threshold was already reached.\nfunc flagItem(item Flaggable, flag Flag, threshold int) bool {\n\tif item.FlagsCount() \u003e= threshold {\n\t\tpanic(\"item flag count threshold exceeded: \" + strconv.Itoa(threshold))\n\t}\n\n\tif !item.AddFlag(flag) {\n\t\tpanic(\"item has been already flagged by a current user\")\n\t}\n\n\treturn item.FlagsCount() == threshold\n}\n\nfunc getFlaggingThreshold(bid BoardID) int {\n\tif v, ok := gFlaggingThresholds.Get(bid.String()); ok {\n\t\treturn v.(int)\n\t}\n\treturn DefaultFlaggingThreshold\n}\n"},{"name":"format.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/r/sys/users\"\n)\n\nfunc padLeft(s string, length int) string {\n\tif len(s) \u003e= length {\n\t\treturn s\n\t}\n\treturn strings.Repeat(\" \", length-len(s)) + s\n}\n\nfunc padZero(u64 uint64, length int) string {\n\ts := strconv.Itoa(int(u64))\n\tif len(s) \u003e= length {\n\t\treturn s\n\t}\n\treturn strings.Repeat(\"0\", length-len(s)) + s\n}\n\nfunc indentBody(indent string, body string) string {\n\tvar (\n\t\tres   string\n\t\tlines = strings.Split(body, \"\\n\")\n\t)\n\tfor i, line := range lines {\n\t\tif i \u003e 0 {\n\t\t\tres += \"\\n\"\n\t\t}\n\t\tres += indent + line\n\t}\n\treturn res\n}\n\n// NOTE: length must be greater than 3.\nfunc summaryOf(text string, length int) string {\n\tlines := strings.SplitN(text, \"\\n\", 2)\n\tline := lines[0]\n\tif len(line) \u003e length {\n\t\tline = line[:(length-3)] + \"...\"\n\t} else if len(lines) \u003e 1 {\n\t\t// len(line) \u003c= 80\n\t\tline = line + \"...\"\n\t}\n\treturn line\n}\n\n// newLink returns a Markdown link.\nfunc newLink(label, uri string) string {\n\treturn \"[\" + label + \"](\" + uri + \")\"\n}\n\n// newButtonLink returns a Makdown link with label wrapped in brackets.\nfunc newButtonLink(label, uri string) string {\n\treturn `[\\[` + label + `\\]](` + uri + \")\"\n}\n\n// newUserLink returns a Markdown link for an account to the users\n// realm or the address as string when a user is not registered.\nfunc newUserLink(addr std.Address) string {\n\tuser := users.ResolveAddress(addr)\n\tif user != nil {\n\t\treturn user.RenderLink(\"\")\n\t}\n\treturn addr.String()\n}\n"},{"name":"migrations.gno","body":"package boards2\n\nimport (\n\tv1rc1 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nfunc initFromPrevVersion() {\n\timportRealmMembers()\n}\n\nfunc importRealmMembers() {\n\tv1rc1.IterateRealmMembers(0, func(member v1rc1.User) bool {\n\t\t// XXX: This wouldn't be required if a boards2 package is created\n\t\troles := make([]Role, len(member.Roles))\n\t\tfor i, r := range member.Roles {\n\t\t\troles[i] = Role(r)\n\t\t}\n\n\t\tgPerms.AddUser(member.Address, roles...)\n\t\treturn false\n\t})\n}\n"},{"name":"permissions.gno","body":"package boards2\n\nimport \"std\"\n\nconst (\n\tPermissionRealmHelp           Permission = \"realm:help\"\n\tPermissionRealmLock                      = \"realm:lock\"\n\tPermissionRealmNotice                    = \"realm:notice\"\n\tPermissionBoardCreate                    = \"board:create\"\n\tPermissionBoardFlaggingUpdate            = \"board:flagging-update\"\n\tPermissionBoardFreeze                    = \"board:freeze\"\n\tPermissionBoardRename                    = \"board:rename\"\n\tPermissionThreadCreate                   = \"thread:create\"\n\tPermissionThreadDelete                   = \"thread:delete\"\n\tPermissionThreadEdit                     = \"thread:edit\"\n\tPermissionThreadFlag                     = \"thread:flag\"\n\tPermissionThreadFreeze                   = \"thread:freeze\"\n\tPermissionThreadRepost                   = \"thread:repost\"\n\tPermissionReplyCreate                    = \"reply:create\"\n\tPermissionReplyDelete                    = \"reply:delete\"\n\tPermissionReplyFlag                      = \"reply:flag\"\n\tPermissionReplyFreeze                    = \"reply:freeze\"\n\tPermissionMemberInvite                   = \"member:invite\"\n\tPermissionMemberRemove                   = \"member:remove\"\n\tPermissionRoleChange                     = \"role:change\"\n\tPermissionPermissionsUpdate              = \"permissions:update\"\n)\n\nconst (\n\tRoleGuest     Role = \"\"\n\tRoleOwner          = \"owner\"\n\tRoleAdmin          = \"admin\"\n\tRoleModerator      = \"moderator\"\n)\n\ntype (\n\t// Permission defines the type for permissions.\n\tPermission string\n\n\t// Role defines the type for user roles.\n\tRole string\n\n\t// Args is a list of generic arguments.\n\tArgs []interface{}\n\n\t// User contains user info.\n\tUser struct {\n\t\tAddress std.Address\n\t\tRoles   []Role\n\t}\n\n\t// UsersIterFn defines a function type to iterate users.\n\tUsersIterFn func(User) bool\n\n\t// Permissions define an interface to for permissioned execution.\n\tPermissions interface {\n\t\t// HasRole checks if a user has a specific role assigned.\n\t\tHasRole(std.Address, Role) bool\n\n\t\t// HasPermission checks if a user has a specific permission.\n\t\tHasPermission(std.Address, Permission) bool\n\n\t\t// WithPermission calls a callback when a user has a specific permission.\n\t\t// It panics on error.\n\t\tWithPermission(std.Address, Permission, Args, func(Args))\n\n\t\t// AddUser adds a new user to the permissioner.\n\t\tAddUser(std.Address, ...Role) error\n\n\t\t// SetUserRoles sets the roles of a user.\n\t\tSetUserRoles(std.Address, ...Role) error\n\n\t\t// RemoveUser removes a user from the permissioner.\n\t\tRemoveUser(std.Address) (removed bool)\n\n\t\t// HasUser checks if a user exists.\n\t\tHasUser(std.Address) bool\n\n\t\t// UsersCount returns the total number of users the permissioner contains.\n\t\tUsersCount() int\n\n\t\t// IterateUsers iterates permissions' users.\n\t\tIterateUsers(start, count int, fn UsersIterFn) bool\n\t}\n)\n"},{"name":"permissions_default.gno","body":"package boards2\n\nimport (\n\t\"errors\"\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\t\"gno.land/r/sys/users\"\n)\n\n// DefaultPermissions manages users, roles and permissions.\ntype DefaultPermissions struct {\n\tsuperRole Role\n\tdao       *commondao.CommonDAO\n\tusers     *avl.Tree // string(std.Address) -\u003e []Role\n\troles     *avl.Tree // string(role) -\u003e []Permission\n}\n\n// NewDefaultPermissions creates a new permissions type.\n// This type is a default implementation to handle users, roles and permissions.\nfunc NewDefaultPermissions(dao *commondao.CommonDAO) *DefaultPermissions {\n\tif dao == nil {\n\t\tpanic(\"default permissions require a DAO\")\n\t}\n\n\tdp := \u0026DefaultPermissions{\n\t\tdao:   dao,\n\t\troles: avl.NewTree(),\n\t\tusers: avl.NewTree(),\n\t}\n\n\t// Make sure that DAO users are indexed when DAO has members\n\tdao.Members().IterateByOffset(0, dao.Members().Size(), func(m std.Address) bool {\n\t\tdp.users.Set(m.String(), []Role(nil))\n\t\treturn false\n\t})\n\n\treturn dp\n}\n\n// SetSuperRole assigns a super role.\n// A super role is one that have all permissions.\n// These type of role doesn't need to be mapped to any permission.\nfunc (dp *DefaultPermissions) SetSuperRole(r Role) {\n\tdp.superRole = r\n}\n\n// AddRole add a role with one or more assigned permissions.\nfunc (dp *DefaultPermissions) AddRole(r Role, p Permission, extra ...Permission) {\n\tdp.roles.Set(string(r), append([]Permission{p}, extra...))\n}\n\n// RoleExists checks if a role exists.\nfunc (dp DefaultPermissions) RoleExists(r Role) bool {\n\tif dp.superRole != \"\" \u0026\u0026 r == dp.superRole {\n\t\treturn true\n\t}\n\n\treturn dp.roles.Iterate(\"\", \"\", func(name string, _ interface{}) bool {\n\t\treturn Role(name) == r\n\t})\n}\n\n// GetUserRoles returns the list of roles assigned to a user.\nfunc (dp DefaultPermissions) GetUserRoles(user std.Address) []Role {\n\tv, found := dp.users.Get(user.String())\n\tif !found {\n\t\treturn nil\n\t}\n\treturn v.([]Role)\n}\n\n// HasRole checks if a user has a specific role assigned.\nfunc (dp DefaultPermissions) HasRole(user std.Address, r Role) bool {\n\tfor _, role := range dp.GetUserRoles(user) {\n\t\tif role == r {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// HasPermission checks if a user has a specific permission.\nfunc (dp DefaultPermissions) HasPermission(user std.Address, perm Permission) bool {\n\tfor _, r := range dp.GetUserRoles(user) {\n\t\tif dp.superRole == r {\n\t\t\treturn true\n\t\t}\n\n\t\tv, found := dp.roles.Get(string(r))\n\t\tif !found {\n\t\t\tcontinue\n\t\t}\n\n\t\tfor _, p := range v.([]Permission) {\n\t\t\tif p == perm {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// AddUser adds a new user to permissions.\nfunc (dp *DefaultPermissions) AddUser(user std.Address, roles ...Role) error {\n\tif dp.users.Has(user.String()) {\n\t\treturn errors.New(\"user already exists\")\n\t}\n\n\tdp.dao.Members().Add(user)\n\treturn dp.setUserRoles(user, roles...)\n}\n\n// SetUserRoles sets the roles of a user.\nfunc (dp *DefaultPermissions) SetUserRoles(user std.Address, roles ...Role) error {\n\tif !dp.users.Has(user.String()) {\n\t\treturn errors.New(\"user not found\")\n\t}\n\treturn dp.setUserRoles(user, roles...)\n}\n\n// RemoveUser removes a user from permissions.\nfunc (dp *DefaultPermissions) RemoveUser(user std.Address) bool {\n\t_, removed := dp.users.Remove(user.String())\n\tdp.dao.Members().Remove(user)\n\treturn removed\n}\n\n// HasUser checks if a user exists.\nfunc (dp DefaultPermissions) HasUser(user std.Address) bool {\n\treturn dp.users.Has(user.String())\n}\n\n// UsersCount returns the total number of users the permissioner contains.\nfunc (dp DefaultPermissions) UsersCount() int {\n\treturn dp.users.Size()\n}\n\n// IterateUsers iterates permissions' users.\nfunc (dp DefaultPermissions) IterateUsers(start, count int, fn UsersIterFn) bool {\n\treturn dp.users.IterateByOffset(start, count, func(k string, v interface{}) bool {\n\t\treturn fn(User{\n\t\t\tAddress: std.Address(k),\n\t\t\tRoles:   v.([]Role),\n\t\t})\n\t})\n}\n\n// WithPermission calls a callback when a user has a specific permission.\n// It panics on error or when a handler panics.\n// Callbacks are by default called when there is no handle registered for the permission.\nfunc (dp *DefaultPermissions) WithPermission(user std.Address, perm Permission, args Args, cb func(Args)) {\n\tif !dp.HasPermission(user, perm) || !dp.dao.Members().Has(user) {\n\t\tpanic(\"unauthorized\")\n\t}\n\n\tswitch perm {\n\tcase PermissionBoardCreate:\n\t\tdp.handleBoardCreate(args, cb)\n\tcase PermissionBoardRename:\n\t\tdp.handleBoardRename(args, cb)\n\tcase PermissionMemberInvite:\n\t\tdp.handleMemberInvite(args, cb)\n\tcase PermissionRoleChange:\n\t\tdp.handleRoleChange(args, cb)\n\tdefault:\n\t\tcb(args)\n\t}\n}\n\nfunc (dp *DefaultPermissions) setUserRoles(user std.Address, roles ...Role) error {\n\tfor _, r := range roles {\n\t\tif !dp.RoleExists(r) {\n\t\t\treturn errors.New(\"invalid role: \" + string(r))\n\t\t}\n\t}\n\n\tdp.users.Set(user.String(), append([]Role(nil), roles...))\n\treturn nil\n}\n\nfunc (DefaultPermissions) handleBoardCreate(args Args, cb func(Args)) {\n\tname, ok := args[0].(string)\n\tif !ok {\n\t\tpanic(\"expected board name to be a string\")\n\t}\n\n\tassertBoardNameIsNotAddress(name)\n\tassertBoardNameBelongsToCaller(name)\n\n\tcb(args)\n}\n\nfunc (DefaultPermissions) handleBoardRename(args Args, cb func(Args)) {\n\tnewName, ok := args[2].(string)\n\tif !ok {\n\t\tpanic(\"expected new board name to be a string\")\n\t}\n\n\tassertBoardNameIsNotAddress(newName)\n\tassertBoardNameBelongsToCaller(newName)\n\n\tcb(args)\n}\n\nfunc (dp DefaultPermissions) handleMemberInvite(args Args, cb func(Args)) {\n\t// Make sure that only owners invite other owners\n\trole, ok := args[1].(Role)\n\tif !ok {\n\t\tpanic(\"expected a valid new member role\")\n\t}\n\n\tif role == RoleOwner {\n\t\tif !dp.HasRole(std.PreviousRealm().Address(), RoleOwner) {\n\t\t\tpanic(\"only owners are allowed to invite other owners\")\n\t\t}\n\t}\n\n\tcb(args)\n}\n\nfunc (dp DefaultPermissions) handleRoleChange(args Args, cb func(Args)) {\n\t// Owners and Admins can change roles.\n\t// Admins should not be able to assign or remove the Owner role from members.\n\tif dp.HasRole(std.PreviousRealm().Address(), RoleAdmin) {\n\t\trole, ok := args[2].(Role)\n\t\tif !ok {\n\t\t\tpanic(\"expected a valid member role\")\n\t\t}\n\n\t\tif role == RoleOwner {\n\t\t\tpanic(\"admins are not allowed to promote members to Owner\")\n\t\t} else {\n\t\t\tmember, ok := args[1].(std.Address)\n\t\t\tif !ok {\n\t\t\t\tpanic(\"expected a valid member address\")\n\t\t\t}\n\n\t\t\tif dp.HasRole(member, RoleOwner) {\n\t\t\t\tpanic(\"admins are not allowed to remove the Owner role\")\n\t\t\t}\n\t\t}\n\t}\n\n\tcb(args)\n}\n\nfunc createDefaultPermissions(owner std.Address) *DefaultPermissions {\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.SetSuperRole(RoleOwner)\n\tperms.AddRole(RoleAdmin, PermissionBoardCreate)\n\tperms.AddUser(owner, RoleOwner)\n\treturn perms\n}\n\nfunc assertBoardNameIsNotAddress(s string) {\n\tif std.Address(s).IsValid() {\n\t\tpanic(\"addresses are not allowed as board name\")\n\t}\n}\n\nfunc assertBoardNameBelongsToCaller(name string) {\n\t// When the board name is the name of a registered user\n\t// check that caller is the owner of the name.\n\tuser, _ := users.ResolveName(name)\n\tif user != nil \u0026\u0026 user.Addr() != std.PreviousRealm().Address() {\n\t\tpanic(\"board name is a user name registered to a different user\")\n\t}\n}\n"},{"name":"permissions_default_test.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/urequire\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n)\n\nvar _ Permissions = (*DefaultPermissions)(nil)\n\nfunc TestDefaultPermissionsWithPermission(t *testing.T) {\n\tcases := []struct {\n\t\tname       string\n\t\tuser       std.Address\n\t\tpermission Permission\n\t\targs       Args\n\t\tsetup      func() *DefaultPermissions\n\t\terr        string\n\t\tcalled     bool\n\t}{\n\t\t{\n\t\t\tname:       \"ok\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\tcalled: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with arguments\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\targs:       Args{\"a\", \"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\tcalled: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"no permission\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"unauthorized\",\n\t\t},\n\t\t{\n\t\t\tname:       \"is not a DAO member\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t\terr: \"unauthorized\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar (\n\t\t\t\tcalled bool\n\t\t\t\targs   Args\n\t\t\t)\n\n\t\t\tperms := tc.setup()\n\t\t\tcallback := func(a Args) {\n\t\t\t\targs = a\n\t\t\t\tcalled = true\n\t\t\t}\n\n\t\t\ttestCaseFn := func() {\n\t\t\t\tperms.WithPermission(tc.user, tc.permission, tc.args, callback)\n\t\t\t}\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.PanicsWithMessage(t, tc.err, testCaseFn, \"panic\")\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NotPanics(t, testCaseFn, \"no panic\")\n\t\t\t}\n\n\t\t\turequire.Equal(t, tc.called, called, \"callback called\")\n\t\t\turequire.Equal(t, len(tc.args), len(args), \"args count\")\n\t\t\tfor i, a := range args {\n\t\t\t\tuassert.Equal(t, tc.args[i].(string), a.(string))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsGetUserRoles(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []string\n\t\tsetup func() *DefaultPermissions\n\t}{\n\t\t{\n\t\t\tname:  \"single role\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple roles\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\", \"foo\", \"bar\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddRole(\"bar\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\", \"foo\", \"bar\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"without roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"not a user\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple users\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"bar\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"admin\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\", \"admin\", \"bar\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\troles := perms.GetUserRoles(tc.user)\n\n\t\t\turequire.Equal(t, len(tc.roles), len(roles), \"user role count\")\n\t\t\tfor i, r := range roles {\n\t\t\t\tuassert.Equal(t, tc.roles[i], string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsHasRole(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\trole  Role\n\t\tsetup func() *DefaultPermissions\n\t\twant  bool\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"admin\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"ok with multiple roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"foo\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"user without roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"has no role\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.HasRole(tc.user, tc.role)\n\t\t\tuassert.Equal(t, got, tc.want)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsHasPermission(t *testing.T) {\n\tcases := []struct {\n\t\tname       string\n\t\tuser       std.Address\n\t\tpermission Permission\n\t\tsetup      func() *DefaultPermissions\n\t\twant       bool\n\t}{\n\t\t{\n\t\t\tname:       \"ok\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with multiple users\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with multiple roles\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"other\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddRole(\"baz\", \"other\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\", \"baz\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"no permission\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"other\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.HasPermission(tc.user, tc.permission)\n\t\t\tuassert.Equal(t, got, tc.want)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsAddUser(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []Role\n\t\tsetup func() *DefaultPermissions\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname:  \"single user\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple users\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"a\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"duplicated user\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"user already exists\",\n\t\t},\n\t\t{\n\t\t\tname:  \"duplicated user\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"foo\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"invalid role: foo\",\n\t\t},\n\t\t{\n\t\t\tname: \"already a DAO member\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(\n\t\t\t\t\tcommondao.New(commondao.WithMember(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")),\n\t\t\t\t)\n\t\t\t},\n\t\t\terr: \"user already exists\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\n\t\t\terr := perms.AddUser(tc.user, tc.roles...)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.Error(t, err, \"expected an error\")\n\t\t\t\tuassert.Equal(t, tc.err, err.Error())\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NoError(t, err)\n\t\t\t}\n\n\t\t\troles := perms.GetUserRoles(tc.user)\n\t\t\tuassert.Equal(t, len(tc.roles), len(roles))\n\t\t\tfor i, r := range roles {\n\t\t\t\turequire.Equal(t, string(tc.roles[i]), string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsSetUserRoles(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []Role\n\t\tsetup func() *DefaultPermissions\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname:  \"single role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple roles\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"b\", \"c\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddRole(\"c\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"duplicated role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"c\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddRole(\"c\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\", \"c\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"remove roles\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\", \"b\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"x\", \"a\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"invalid role: x\",\n\t\t},\n\t\t{\n\t\t\tname: \"user not found\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t\terr: \"user not found\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\n\t\t\terr := perms.SetUserRoles(tc.user, tc.roles...)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.True(t, err != nil, \"expected an error\")\n\t\t\t\tuassert.Equal(t, tc.err, err.Error())\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NoError(t, err)\n\t\t\t}\n\n\t\t\troles := perms.GetUserRoles(tc.user)\n\t\t\tuassert.Equal(t, len(tc.roles), len(roles))\n\t\t\tfor i, r := range roles {\n\t\t\t\turequire.Equal(t, string(tc.roles[i]), string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsRemoveUser(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\tsetup func() *DefaultPermissions\n\t\twant  bool\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"user not found\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.RemoveUser(tc.user)\n\t\t\tuassert.Equal(t, tc.want, got)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsIterateUsers(t *testing.T) {\n\tusers := []User{\n\t\t{\n\t\t\tAddress: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tRoles:   []Role{\"foo\"},\n\t\t},\n\t\t{\n\t\t\tAddress: \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\",\n\t\t\tRoles:   []Role{\"foo\", \"bar\"},\n\t\t},\n\t\t{\n\t\t\tAddress: \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\",\n\t\t\tRoles:   []Role{\"bar\"},\n\t\t},\n\t}\n\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.AddRole(\"foo\", \"perm1\")\n\tperms.AddRole(\"bar\", \"perm2\")\n\tfor _, u := range users {\n\t\tperms.AddUser(u.Address, u.Roles...)\n\t}\n\n\tcases := []struct {\n\t\tname               string\n\t\tstart, count, want int\n\t}{\n\t\t{\n\t\t\tname:  \"exceed users count\",\n\t\t\tcount: 50,\n\t\t\twant:  3,\n\t\t},\n\t\t{\n\t\t\tname:  \"exact users count\",\n\t\t\tcount: 3,\n\t\t\twant:  3,\n\t\t},\n\t\t{\n\t\t\tname:  \"two users\",\n\t\t\tstart: 1,\n\t\t\tcount: 2,\n\t\t\twant:  2,\n\t\t},\n\t\t{\n\t\t\tname:  \"one user\",\n\t\t\tstart: 1,\n\t\t\tcount: 1,\n\t\t\twant:  1,\n\t\t},\n\t\t{\n\t\t\tname:  \"no iteration\",\n\t\t\tstart: 50,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar i int\n\t\t\tperms.IterateUsers(0, len(users), func(u User) bool {\n\t\t\t\turequire.True(t, i \u003c len(users), \"expect iterator to respect number of users\")\n\t\t\t\tuassert.Equal(t, users[i].Address, u.Address)\n\n\t\t\t\turequire.Equal(t, len(users[i].Roles), len(u.Roles), \"expect number of roles to match\")\n\t\t\t\tfor j, r := range u.Roles {\n\t\t\t\t\tuassert.Equal(t, string(users[i].Roles[j]), string(u.Roles[j]))\n\t\t\t\t}\n\n\t\t\t\ti++\n\t\t\t})\n\n\t\t\tuassert.Equal(t, i, len(users), \"expect iterator to iterate all users\")\n\t\t})\n\t}\n}\n"},{"name":"post.gno","body":"package boards2\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nconst dateFormat = \"2006-01-02 3:04pm MST\"\n\ntype PostID uint64\n\nfunc (id PostID) String() string {\n\treturn strconv.Itoa(int(id))\n}\n\nfunc (id PostID) Key() string {\n\treturn padZero(uint64(id), 10)\n}\n\n// A Post is a \"thread\" or a \"reply\" depending on context.\n// A thread is a Post of a Board that holds other replies.\ntype Post struct {\n\tboard         *Board\n\tid            PostID\n\tcreator       std.Address\n\ttitle         string // optional\n\tbody          string\n\tisHidden      bool\n\tisReadonly    bool\n\treplies       avl.Tree // Post.id -\u003e *Post\n\trepliesAll    avl.Tree // Post.id -\u003e *Post (all replies, for top-level posts)\n\treposts       avl.Tree // Board.id -\u003e Post.id\n\tflags         []Flag\n\tthreadID      PostID  // original Post.id\n\tparentID      PostID  // parent Post.id (if reply or repost)\n\trepostBoardID BoardID // original Board.id (if repost)\n\trepostsCount  uint64\n\tcreatedAt     time.Time\n\tupdatedAt     time.Time\n}\n\nfunc newPost(board *Board, id PostID, creator std.Address, title, body string, threadID, parentID PostID, repostBoardID BoardID) *Post {\n\treturn \u0026Post{\n\t\tboard:         board,\n\t\tid:            id,\n\t\tcreator:       creator,\n\t\ttitle:         title,\n\t\tbody:          body,\n\t\treplies:       avl.Tree{},\n\t\trepliesAll:    avl.Tree{},\n\t\treposts:       avl.Tree{},\n\t\tthreadID:      threadID,\n\t\tparentID:      parentID,\n\t\trepostBoardID: repostBoardID,\n\t\tcreatedAt:     time.Now(),\n\t}\n}\n\nfunc (post *Post) IsRepost() bool {\n\treturn post.repostBoardID != 0\n}\n\nfunc (post *Post) IsThread() bool {\n\t// repost threads also have parent ID\n\treturn post.parentID == 0 || post.IsRepost()\n}\n\nfunc (post *Post) GetBoard() *Board {\n\treturn post.board\n}\n\nfunc (post *Post) GetPostID() PostID {\n\treturn post.id\n}\n\nfunc (post *Post) GetParentID() PostID {\n\treturn post.parentID\n}\n\nfunc (post *Post) GetRepostBoardID() BoardID {\n\treturn post.repostBoardID\n}\n\nfunc (post *Post) GetCreator() std.Address {\n\treturn post.creator\n}\n\nfunc (post *Post) GetTitle() string {\n\treturn post.title\n}\n\nfunc (post *Post) GetBody() string {\n\treturn post.body\n}\n\nfunc (post *Post) GetCreatedAt() time.Time {\n\treturn post.createdAt\n}\n\nfunc (post *Post) GetUpdatedAt() time.Time {\n\treturn post.updatedAt\n}\n\nfunc (post *Post) AddFlag(flag Flag) bool {\n\t// TODO: sort flags for fast search in case of big thresholds\n\tfor _, v := range post.flags {\n\t\tif v.User == flag.User {\n\t\t\treturn false\n\t\t}\n\t}\n\n\tpost.flags = append(post.flags, flag)\n\treturn true\n}\n\nfunc (post *Post) FlagsCount() int {\n\treturn len(post.flags)\n}\n\nfunc (post *Post) SetVisible(isVisible bool) {\n\tpost.isHidden = !isVisible\n}\n\nfunc (post *Post) IsHidden() bool {\n\treturn post.isHidden\n}\n\nfunc (post *Post) SetReadonly(isReadonly bool) {\n\tpost.isReadonly = isReadonly\n}\n\nfunc (post *Post) IsReadonly() bool {\n\treturn post.isReadonly\n}\n\nfunc (post *Post) AddReply(creator std.Address, body string) *Post {\n\tboard := post.board\n\tpid := board.incGetPostID()\n\tpKey := pid.Key()\n\treply := newPost(board, pid, creator, \"\", body, post.threadID, post.id, 0)\n\t// TODO: Figure out how to remove this redundancy of data \"replies==repliesAll\" in threads\n\tpost.replies.Set(pKey, reply)\n\tif post.threadID == post.id {\n\t\tpost.repliesAll.Set(pKey, reply)\n\t} else {\n\t\tthread, _ := board.GetThread(post.threadID)\n\t\tthread.repliesAll.Set(pKey, reply)\n\t}\n\treturn reply\n}\n\nfunc (post *Post) Update(title string, body string) {\n\tpost.title = title\n\tpost.body = body\n\tpost.updatedAt = time.Now()\n}\n\nfunc (post *Post) HasReplies() bool {\n\treturn post.replies.Size() \u003e 0\n}\n\nfunc (thread *Post) GetReply(pid PostID) (_ *Post, found bool) {\n\tv, found := thread.repliesAll.Get(pid.Key())\n\tif !found {\n\t\treturn nil, false\n\t}\n\treturn v.(*Post), true\n}\n\nfunc (post *Post) AddRepostTo(creator std.Address, repost *Post, dst *Board) {\n\tif !post.IsThread() {\n\t\tpanic(\"cannot repost non-thread post\")\n\t}\n\n\tpost.repostsCount++\n\tdst.threads.Set(repost.id.Key(), repost)\n\tpost.reposts.Set(dst.id.Key(), repost.id)\n}\n\nfunc (post *Post) DeleteReply(replyID PostID) error {\n\tif !post.IsThread() {\n\t\t// TODO: Allow removing replies from parent replies too\n\t\tpanic(\"cannot delete reply from a non-thread post\")\n\t}\n\n\tif post.id == replyID {\n\t\treturn errors.New(\"expected an ID of an inner reply\")\n\t}\n\n\tkey := replyID.Key()\n\tv, removed := post.repliesAll.Remove(key)\n\tif !removed {\n\t\treturn errors.New(\"reply not found in thread\")\n\t}\n\n\t// TODO: Shouldn't reply be hidden instead of deleted? Maybe replace reply by a deleted message.\n\treply := v.(*Post)\n\tif reply.parentID != post.id {\n\t\tparent, _ := post.GetReply(reply.parentID)\n\t\tparent.replies.Remove(key)\n\t} else {\n\t\tpost.replies.Remove(key)\n\t}\n\treturn nil\n}\n\nfunc (post *Post) GetSummary() string {\n\treturn summaryOf(post.body, 80)\n}\n\nfunc (post *Post) GetURL() string {\n\tif post.IsThread() {\n\t\treturn post.board.GetURLFromThreadID(post.id)\n\t}\n\treturn post.board.GetURLFromReplyID(post.threadID, post.id)\n}\n\nfunc (post *Post) GetReplyFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"CreateReply\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"replyID\", \"0\",\n\t\t\t\"body\", \"\",\n\t\t)\n\t}\n\treturn txlink.Call(\n\t\t\"CreateReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t\t\"body\", \"\",\n\t)\n}\n\nfunc (post *Post) GetRepostFormURL() string {\n\treturn txlink.Call(\n\t\t\"CreateRepost\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.id.String(),\n\t\t\"title\", \"\",\n\t\t\"body\", \"\",\n\t\t\"destinationBoardID\", \"\",\n\t)\n}\n\nfunc (post *Post) GetDeleteFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"DeleteThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t)\n\t}\n\treturn txlink.Call(\n\t\t\"DeleteReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t)\n}\n\nfunc (post *Post) GetEditFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"EditThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"title\", post.GetTitle(),\n\t\t\t\"body\", post.GetBody(),\n\t\t)\n\t}\n\n\treturn txlink.Call(\n\t\t\"EditReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t\t\"body\", post.GetBody(),\n\t)\n}\n\nfunc (post *Post) GetFlagFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"FlagThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"reason\", \"\",\n\t\t)\n\t}\n\n\treturn txlink.Call(\n\t\t\"FlagReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t\t\"reason\", \"\",\n\t)\n}\n\nfunc (post *Post) RenderSummary() string {\n\tvar (\n\t\tb       strings.Builder\n\t\tpostURL = post.GetURL()\n\t\ttitle   = post.title\n\t)\n\n\tb.WriteString(\"**≡ \" + newLink(summaryOf(title, 80), postURL) + \"**  \\n\")\n\tb.WriteString(\"Created by \" + newUserLink(post.creator) + \" on \" + post.createdAt.Format(dateFormat))\n\tb.WriteString(\"  \\n**\")\n\tb.WriteString(strconv.Itoa(post.repliesAll.Size()) + \" replies • \")\n\tb.WriteString(strconv.Itoa(post.reposts.Size()) + \" reposts**\\n\")\n\treturn b.String()\n}\n\nfunc (post *Post) renderSourcePost(indent string) (string, *Post) {\n\tif !post.IsRepost() {\n\t\treturn \"\", nil\n\t}\n\n\tindent += \"\u003e \"\n\n\t// TODO: figure out a way to decouple posts from a global storage.\n\tboard, ok := getBoard(post.repostBoardID)\n\tif !ok {\n\t\treturn indentBody(indent, \"*⚠ Source board has been deleted*\\n\\n\"), nil\n\t}\n\n\tsrcPost, ok := board.GetThread(post.parentID)\n\tif !ok {\n\t\treturn indentBody(indent, \"*⚠ Source post has been deleted*\\n\\n\"), nil\n\t}\n\n\tif srcPost.isHidden {\n\t\treturn indentBody(indent, \"*⚠ Source post has been flagged as inappropriate*\\n\\n\"), nil\n\t}\n\n\treturn indentBody(indent, srcPost.GetSummary()) + \"\\n\\n\", srcPost\n}\n\n// renderPostContent renders post text content (including repost body).\n// Function will dump a predefined message instead of a body if post is hidden.\nfunc (post *Post) renderPostContent(sb *strings.Builder, indent string, levels int) {\n\tif post.isHidden {\n\t\t// Flagged comment should be hidden, but replies still visible (see: #3480)\n\t\t// Flagged threads will be hidden by render function caller.\n\t\tsb.WriteString(indentBody(indent, \"_⚠ Reply is hidden as it has been flagged as inappropriate_\"))\n\t\tsb.WriteString(\"\\n\")\n\t\treturn\n\t}\n\n\tsrcContent, srcPost := post.renderSourcePost(indent)\n\tif post.IsRepost() \u0026\u0026 srcPost != nil {\n\t\tsb.WriteString(\"  \\nThis thread is a repost of [another thread](\" + srcPost.GetURL() + \"): \\n\")\n\t}\n\n\tsb.WriteString(srcContent)\n\n\tif post.IsRepost() \u0026\u0026 srcPost == nil \u0026\u0026 len(post.body) \u003e 0 {\n\t\t// Add a newline to separate source deleted message from repost body content\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\tsb.WriteString(indentBody(indent, post.body))\n\tsb.WriteString(\"\\n\")\n\n\tif post.IsThread() {\n\t\t// Split content and controls for threads.\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\t// Buttons \u0026 counters\n\tsb.WriteString(indent)\n\tif !post.IsThread() {\n\t\tsb.WriteString(\"  \\n\")\n\t\tsb.WriteString(indent)\n\t}\n\n\tsb.WriteString(\"Created by \")\n\tsb.WriteString(newUserLink(post.creator))\n\tsb.WriteString(\" on \")\n\tsb.WriteString(post.createdAt.Format(dateFormat))\n\n\t// Add a reply view link to each top level reply\n\tif !post.IsThread() {\n\t\tsb.WriteString(\", \")\n\t\tsb.WriteString(newLink(\"#\"+post.id.String(), post.GetURL()))\n\t}\n\n\tif post.repostsCount \u003e 0 {\n\t\tsb.WriteString(\", \")\n\t\tsb.WriteString(strconv.FormatUint(post.repostsCount, 10))\n\t\tsb.WriteString(\" repost(s)\")\n\t}\n\n\tsb.WriteString(\"  \\n\")\n\tsb.WriteString(newLink(\"Flag\", post.GetFlagFormURL()))\n\n\tif post.IsThread() {\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Repost\", post.GetRepostFormURL()))\n\t}\n\n\tisReadonly := post.IsReadonly() || post.GetBoard().IsReadonly()\n\tif !isReadonly {\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Reply\", post.GetReplyFormURL()))\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Edit\", post.GetEditFormURL()))\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Delete\", post.GetDeleteFormURL()))\n\t}\n\n\tif levels == 0 {\n\t\tsb.WriteString(\" • \")\n\t\tif post.IsThread() {\n\t\t\tsb.WriteString(newLink(\"Show all Replies\", post.board.GetURLFromThreadID(post.GetPostID())))\n\t\t} else {\n\t\t\tsb.WriteString(newLink(\"View Thread\", post.board.GetURLFromThreadID(post.threadID)))\n\t\t}\n\t}\n\n\tsb.WriteString(\" \\n\")\n}\n\nfunc (post *Post) Render(path string, indent string, levels int) string {\n\tif post == nil {\n\t\treturn \"nil post\"\n\t}\n\n\t// TODO: pass a builder as arg into Render.\n\tvar sb strings.Builder\n\n\t// Thread reposts might not have a title, if so get title from source thread\n\ttitle := post.title\n\tif post.IsRepost() \u0026\u0026 title == \"\" {\n\t\tif board, ok := getBoard(post.repostBoardID); ok {\n\t\t\tif src, ok := board.GetThread(post.parentID); ok {\n\t\t\t\ttitle = src.GetTitle()\n\t\t\t}\n\t\t}\n\t}\n\n\tsb.WriteString(indent)\n\tif title != \"\" { // Replies don't have a title\n\t\tsb.WriteString(\"## \" + title + \"\\n\")\n\t}\n\tsb.WriteString(indent + \"\\n\")\n\n\tpost.renderPostContent(\u0026sb, indent, levels)\n\n\tif post.replies.Size() == 0 {\n\t\treturn sb.String()\n\t}\n\n\t// XXX: This triggers for reply views\n\tif levels == 0 {\n\t\tsb.WriteString(indent + \"\\n\")\n\t\tsb.WriteString(indent)\n\t\tsb.WriteString(\"\\n\")\n\t\treturn sb.String()\n\t}\n\n\tif path != \"\" {\n\t\tsb.WriteString(post.renderTopLevelReplies(path, indent, levels-1))\n\t} else {\n\t\tsb.WriteString(post.renderSubReplies(indent, levels-1))\n\t}\n\treturn sb.String()\n}\n\nfunc (post *Post) renderTopLevelReplies(path, indent string, levels int) string {\n\tp, err := pager.New(path, post.replies.Size(), pager.WithPageSize(pageSizeReplies))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tvar (\n\t\tb              strings.Builder\n\t\tcommentsIndent = indent + \"\u003e \"\n\t)\n\n\trender := func(_ string, v any) bool {\n\t\treply := v.(*Post)\n\n\t\tb.WriteString(indent)\n\t\tb.WriteString(\"\\n\")\n\t\tb.WriteString(reply.Render(\"\", commentsIndent, levels-1))\n\t\treturn false\n\t}\n\n\tb.WriteString(\"\\n\\n---\\nSort by: \")\n\tr := realmpath.Parse(path)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tb.WriteString(newLink(\"newest first\", r.String()))\n\t\tb.WriteString(\"\\n\")\n\t\tpost.replies.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tb.WriteString(newLink(\"oldest first\", r.String()))\n\t\tb.WriteString(\"\\n\")\n\t\tpost.replies.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tb.WriteString(\"\\n---\\n\")\n\t\tb.WriteString(pager.Picker(p))\n\t}\n\n\treturn b.String()\n}\n\nfunc (post *Post) renderSubReplies(indent string, levels int) string {\n\tvar (\n\t\tb              strings.Builder\n\t\tcommentsIndent = indent + \"\u003e \"\n\t)\n\n\tpost.replies.Iterate(\"\", \"\", func(_ string, v any) bool {\n\t\treply := v.(*Post)\n\n\t\tb.WriteString(indent)\n\t\tb.WriteString(\"\\n\")\n\t\tb.WriteString(reply.Render(\"\", commentsIndent, levels-1))\n\t\treturn false\n\t})\n\n\treturn b.String()\n}\n\nfunc (post *Post) RenderInner() string {\n\tif post.IsThread() {\n\t\tpanic(\"unexpected thread\")\n\t}\n\n\tvar (\n\t\ts         string\n\t\tthreadID  = post.threadID\n\t\tthread, _ = post.board.GetThread(threadID) // TODO: This seems redundant (post == thread)\n\t)\n\n\t// Fully render parent if it's not a repost.\n\tif !post.IsRepost() {\n\t\tvar (\n\t\t\tparent   *Post\n\t\t\tparentID = post.parentID\n\t\t)\n\n\t\tif thread.id == parentID {\n\t\t\tparent = thread\n\t\t} else {\n\t\t\tparent, _ = thread.GetReply(parentID)\n\t\t}\n\n\t\ts += parent.Render(\"\", \"\", 0) + \"\\n\"\n\t}\n\n\ts += post.Render(\"\", \"\u003e \", 5)\n\treturn s\n}\n"},{"name":"post_test.gno","body":"package boards2\n\nimport (\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nfunc TestPostUpdate(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tboard := newBoard(1, \"test123\", addr, perms)\n\tcreator := testutils.TestAddress(\"creator\")\n\tpost := newPost(board, 1, creator, \"Title\", \"Body\", 1, 0, 0)\n\ttitle := \"New Title\"\n\tbody := \"New body\"\n\n\tpost.Update(title, body)\n\n\tuassert.Equal(t, title, post.GetTitle())\n\tuassert.Equal(t, body, post.GetBody())\n\tuassert.False(t, post.GetUpdatedAt().IsZero())\n}\n\nfunc TestPostAddFlag(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tpost := createTestThread(t)\n\n\tflag := Flag{\n\t\tUser:   addr,\n\t\tReason: \"foobar\",\n\t}\n\tuassert.True(t, post.AddFlag(flag))\n\tuassert.False(t, post.AddFlag(flag), \"should reject flag from duplicate user\")\n\tuassert.Equal(t, post.FlagsCount(), 1)\n}\n\nfunc TestPostSetVisible(t *testing.T) {\n\tpost := createTestThread(t)\n\tuassert.False(t, post.IsHidden(), \"post should be visible by default\")\n\n\tpost.SetVisible(false)\n\tuassert.True(t, post.IsHidden(), \"post should be hidden\")\n\n\tpost.SetVisible(true)\n\tuassert.False(t, post.IsHidden(), \"post should be visible\")\n}\n\nfunc TestPostAddRepostTo(t *testing.T) {\n\t// TODO: Improve this unit test\n\taddr := testutils.TestAddress(\"creatorDstBoard\")\n\tperms := createDefaultBoardPermissions(addr)\n\tcases := []struct {\n\t\tname, title, body string\n\t\tdstBoard          *Board\n\t\tthread            *Post\n\t\tsetup             func() *Post\n\t\terr               string\n\t}{\n\t\t{\n\t\t\tname:     \"repost thread\",\n\t\t\ttitle:    \"Repost Title\",\n\t\t\tbody:     \"Repost body\",\n\t\t\tdstBoard: newBoard(42, \"dst123\", addr, perms),\n\t\t\tsetup:    func() *Post { return createTestThread(t) },\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid repost from reply\",\n\t\t\tsetup: func() *Post { return createTestReply(t) },\n\t\t\terr:   \"cannot repost non-thread post\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar (\n\t\t\t\trepost  *Post\n\t\t\t\tcreator = testutils.TestAddress(\"repostCreator\")\n\t\t\t\tthread  = tc.setup()\n\t\t\t)\n\n\t\t\tcreateRepost := func() {\n\t\t\t\tvar repostId PostID\n\t\t\t\tif tc.dstBoard != nil {\n\t\t\t\t\trepostId = tc.dstBoard.incGetPostID()\n\t\t\t\t}\n\n\t\t\t\trepost = newPost(tc.dstBoard, repostId, creator, tc.title, tc.body, repostId, thread.GetPostID(), thread.GetBoard().GetID())\n\t\t\t\tthread.AddRepostTo(creator, repost, tc.dstBoard)\n\t\t\t}\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\tuassert.PanicsWithMessage(t, tc.err, createRepost)\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\tuassert.NotPanics(t, createRepost)\n\t\t\t}\n\n\t\t\tr, found := tc.dstBoard.GetThread(repost.GetPostID())\n\t\t\tuassert.True(t, found)\n\t\t\tuassert.True(t, repost == r)\n\t\t\tuassert.Equal(t, tc.title, repost.GetTitle())\n\t\t\tuassert.Equal(t, tc.body, repost.GetBody())\n\t\t\tuassert.Equal(t, uint(thread.GetBoard().GetID()), uint(repost.GetRepostBoardID()))\n\t\t})\n\t}\n}\n\nfunc TestNewThread(t *testing.T) {\n\tcreator := testutils.TestAddress(\"creator\")\n\ttitle := \"Test Title\"\n\tbody := strings.Repeat(\"A\", 82)\n\tboardID := BoardID(1)\n\tthreadID := PostID(42)\n\tboardName := \"test123\"\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(boardID, boardName, creator, perms)\n\turl := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2:%s/%d\",\n\t\tboardName,\n\t\tuint(threadID),\n\t)\n\treplyURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=CreateReply\u0026boardID=%d\u0026body=\u0026replyID=0\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\teditURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=EditThread\u0026boardID=%d\u0026body=%s\u0026threadID=%d\u0026title=%s\",\n\t\tuint(boardID),\n\t\tbody,\n\t\tuint(threadID),\n\t\tstrings.ReplaceAll(title, \" \", \"+\"),\n\t)\n\trepostURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=CreateRepost\u0026boardID=%d\u0026body=\u0026destinationBoardID=\u0026threadID=%d\u0026title=\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\tdeleteURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=DeleteThread\u0026boardID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\tflagURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=FlagThread\u0026boardID=%d\u0026reason=\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\n\tthread := newPost(board, threadID, creator, title, body, threadID, 0, 0)\n\n\tuassert.True(t, thread.IsThread())\n\tuassert.Equal(t, uint(threadID), uint(thread.GetPostID()))\n\tuassert.False(t, thread.GetCreatedAt().IsZero())\n\tuassert.True(t, thread.GetUpdatedAt().IsZero())\n\tuassert.Equal(t, title, thread.GetTitle())\n\tuassert.Equal(t, body[:77]+\"...\", thread.GetSummary())\n\tuassert.False(t, thread.HasReplies())\n\tuassert.Equal(t, url, thread.GetURL())\n\tuassert.Equal(t, replyURL, thread.GetReplyFormURL())\n\tuassert.Equal(t, editURL, thread.GetEditFormURL())\n\tuassert.Equal(t, repostURL, thread.GetRepostFormURL())\n\tuassert.Equal(t, deleteURL, thread.GetDeleteFormURL())\n\tuassert.Equal(t, flagURL, thread.GetFlagFormURL())\n}\n\nfunc TestThreadAddReply(t *testing.T) {\n\treplier := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\tthreadID := uint(thread.GetPostID())\n\tbody := \"A reply\"\n\n\treply := thread.AddReply(replier, body)\n\n\tr, found := thread.GetReply(reply.GetPostID())\n\tuassert.True(t, found)\n\tuassert.True(t, reply == r)\n\tuassert.Equal(t, threadID+1, uint(reply.GetPostID()))\n\tuassert.Equal(t, reply.GetCreator(), replier)\n\tuassert.Equal(t, reply.GetBody(), body)\n\tuassert.True(t, thread.HasReplies())\n}\n\nfunc TestThreadGetReply(t *testing.T) {\n\tcases := []struct {\n\t\tname   string\n\t\tthread *Post\n\t\tsetup  func(thread *Post) (replyID PostID)\n\t\tfound  bool\n\t}{\n\t\t{\n\t\t\tname:   \"found\",\n\t\t\tthread: createTestThread(t),\n\t\t\tsetup: func(thread *Post) PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t\tfound: true,\n\t\t},\n\t\t{\n\t\t\tname:   \"not found\",\n\t\t\tthread: createTestThread(t),\n\t\t\tsetup:  func(*Post) PostID { return 42 },\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup(tc.thread)\n\n\t\t\treply, found := tc.thread.GetReply(replyID)\n\n\t\t\tuassert.Equal(t, tc.found, found)\n\t\t\tif reply != nil {\n\t\t\t\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestThreadDeleteReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tcases := []struct {\n\t\tname  string\n\t\tsetup func() PostID\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"ok nested\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.AddReply(testutils.TestAddress(\"replier2\"), \"\").GetPostID()\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid\",\n\t\t\tsetup: func() PostID { return thread.GetPostID() },\n\t\t\terr:   \"expected an ID of an inner reply\",\n\t\t},\n\t\t{\n\t\t\tname:  \"not found\",\n\t\t\tsetup: func() PostID { return 42 },\n\t\t\terr:   \"reply not found in thread\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup()\n\n\t\t\terr := thread.DeleteReply(replyID)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\tuassert.ErrorContains(t, err, tc.err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tuassert.NoError(t, err)\n\t\t\t_, found := thread.GetReply(replyID)\n\t\t\tuassert.False(t, found)\n\t\t})\n\t}\n}\n\nfunc TestThreadRenderSummary(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestThreadRender(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestThreadRenderInner(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestNewReply(t *testing.T) {\n\tcreator := testutils.TestAddress(\"creator\")\n\tbody := strings.Repeat(\"A\", 82)\n\tboardID := BoardID(1)\n\tthreadID := PostID(42)\n\tparentID := PostID(1)\n\treplyID := PostID(2)\n\tboardName := \"test123\"\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(boardID, boardName, creator, perms)\n\turl := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2:%s/%d/%d\",\n\t\tboardName,\n\t\tuint(threadID),\n\t\tuint(replyID),\n\t)\n\treplyURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=CreateReply\u0026boardID=%d\u0026body=\u0026replyID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(replyID),\n\t\tuint(threadID),\n\t)\n\tdeleteURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=DeleteReply\u0026boardID=%d\u0026replyID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(replyID),\n\t\tuint(threadID),\n\t)\n\n\treply := newPost(board, replyID, creator, \"\", body, threadID, parentID, 0)\n\n\tuassert.False(t, reply.IsThread())\n\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\tuassert.False(t, reply.GetCreatedAt().IsZero())\n\tuassert.True(t, reply.GetUpdatedAt().IsZero())\n\tuassert.False(t, reply.HasReplies())\n\tuassert.Equal(t, body[:77]+\"...\", reply.GetSummary())\n\tuassert.Equal(t, url, reply.GetURL())\n\tuassert.Equal(t, replyURL, reply.GetReplyFormURL())\n\tuassert.Equal(t, deleteURL, reply.GetDeleteFormURL())\n}\n\nfunc TestReplyAddReply(t *testing.T) {\n\treplier := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"parentReplier\"), \"\")\n\tparentReplyID := uint(parentReply.GetPostID())\n\tbody := \"A child reply\"\n\n\treply := parentReply.AddReply(replier, body)\n\n\tr, found := thread.GetReply(reply.GetPostID())\n\tuassert.True(t, found)\n\tuassert.True(t, reply == r)\n\tuassert.Equal(t, parentReplyID, uint(reply.GetParentID()))\n\tuassert.Equal(t, parentReplyID+1, uint(reply.GetPostID()))\n\tuassert.Equal(t, reply.GetCreator(), replier)\n\tuassert.Equal(t, reply.GetBody(), body)\n\tuassert.False(t, reply.HasReplies())\n\tuassert.True(t, parentReply.HasReplies())\n}\n\nfunc TestReplyGetReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"parentReplier\"), \"\")\n\tcases := []struct {\n\t\tname  string\n\t\tsetup func() PostID\n\t\tfound bool\n\t}{\n\t\t{\n\t\t\tname: \"found\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := parentReply.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t\tfound: true,\n\t\t},\n\t\t{\n\t\t\tname:  \"not found\",\n\t\t\tsetup: func() PostID { return 42 },\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup()\n\n\t\t\treply, found := thread.GetReply(replyID)\n\n\t\t\tuassert.Equal(t, tc.found, found)\n\t\t\tif reply != nil {\n\t\t\t\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestReplyDeleteReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\treply := parentReply.AddReply(testutils.TestAddress(\"replier2\"), \"\")\n\n\t// NOTE: Deleting a reply from a parent reply should eventually be suported\n\tuassert.PanicsWithMessage(t, \"cannot delete reply from a non-thread post\", func() {\n\t\tparentReply.DeleteReply(reply.GetPostID())\n\t})\n}\n\nfunc TestReplyRender(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc createTestThread(t *testing.T) *Post {\n\tt.Helper()\n\n\tcreator := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(1, \"test_board_123\", creator, perms)\n\treturn board.AddThread(creator, \"Title\", \"Body\")\n}\n\nfunc createTestReply(t *testing.T) *Post {\n\tt.Helper()\n\n\tcreator := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\treturn thread.AddReply(creator, \"Test message\")\n}\n"},{"name":"public.gno","body":"package boards2\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nconst (\n\t// MaxBoardNameLength defines the maximum length allowed for board names.\n\tMaxBoardNameLength = 50\n\n\t// MaxThreadTitleLength defines the maximum length allowed for thread titles.\n\tMaxThreadTitleLength = 100\n\n\t// MaxReplyLength defines the maximum length allowed for replies.\n\tMaxReplyLength = 300\n)\n\nvar (\n\treBoardName = regexp.MustCompile(`(?i)^[a-z]+[a-z0-9_\\-]{2,50}$`)\n\n\t// Minimalistic Markdown line prefix checks that if allowed would\n\t// break the current UI when submitting a reply. It denies replies\n\t// with headings, blockquotes or horizontal lines.\n\treDeniedReplyLinePrefixes = regexp.MustCompile(`(?m)^\\s*(#|---|\u003e)+`)\n)\n\n// SetHelp sets or updates boards realm help content.\nfunc SetHelp(content string) {\n\tcontent = strings.TrimSpace(content)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{content}\n\tgPerms.WithPermission(caller, PermissionRealmHelp, args, func(Args) {\n\t\tgHelp = content\n\t})\n}\n\n// SetPermissions sets a permissions implementation for boards2 realm or a board.\nfunc SetPermissions(bid BoardID, p Permissions) {\n\tassertRealmIsNotLocked()\n\n\tif p == nil {\n\t\tpanic(\"permissions is required\")\n\t}\n\n\tif bid != 0 {\n\t\tassertBoardExists(bid)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{bid}\n\tgPerms.WithPermission(caller, PermissionPermissionsUpdate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\n\t\t// When board ID is zero it means that realm permissions are being updated\n\t\tif bid == 0 {\n\t\t\tgPerms = p\n\n\t\t\tstd.Emit(\n\t\t\t\t\"RealmPermissionsUpdated\",\n\t\t\t\t\"caller\", caller.String(),\n\t\t\t)\n\t\t\treturn\n\t\t}\n\n\t\t// Otherwise update the permissions of a single board\n\t\tboard := mustGetBoard(bid)\n\t\tboard.perms = p\n\n\t\tstd.Emit(\n\t\t\t\"BoardPermissionsUpdated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", bid.String(),\n\t\t)\n\t})\n}\n\n// SetRealmNotice sets a notice to be displayed globally by the realm.\n// An empty message removes the realm notice.\nfunc SetRealmNotice(message string) {\n\tmessage = strings.TrimSpace(message)\n\tcaller := std.PreviousRealm().Address()\n\tgPerms.WithPermission(caller, PermissionRealmNotice, nil, func(Args) {\n\t\tgNotice = message\n\n\t\tstd.Emit(\n\t\t\t\"RealmNoticeChanged\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"message\", message,\n\t\t)\n\t})\n}\n\n// GetBoardIDFromName searches a board by name and returns it's ID.\nfunc GetBoardIDFromName(name string) (_ BoardID, found bool) {\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\treturn 0, false\n\t}\n\treturn v.(*Board).id, true\n}\n\n// CreateBoard creates a new board.\nfunc CreateBoard(name string) BoardID {\n\tassertRealmIsNotLocked()\n\n\tname = strings.TrimSpace(name)\n\tassertIsValidBoardName(name)\n\tassertBoardNameNotExists(name)\n\n\tcaller := std.PreviousRealm().Address()\n\tid := incGetBoardID()\n\targs := Args{name, id}\n\tgPerms.WithPermission(caller, PermissionBoardCreate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardNameNotExists(name)\n\n\t\tperms := createDefaultBoardPermissions(caller)\n\t\tboard := newBoard(id, name, caller, perms)\n\t\tgBoardsByID.Set(id.Key(), board)\n\t\tgBoardsByName.Set(name, board)\n\n\t\tstd.Emit(\n\t\t\t\"BoardCreated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", id.String(),\n\t\t\t\"name\", name,\n\t\t)\n\t})\n\treturn id\n}\n\n// RenameBoard changes the name of an existing board.\n//\n// A history of previous board names is kept when boards are renamed.\n// Because of that boards are also accesible using previous name(s).\nfunc RenameBoard(name, newName string) {\n\tassertRealmIsNotLocked()\n\n\tnewName = strings.TrimSpace(newName)\n\tassertIsValidBoardName(newName)\n\tassertBoardNameNotExists(newName)\n\n\tboard := mustGetBoardByName(name)\n\tassertBoardIsNotFrozen(board)\n\n\tbid := board.GetID()\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{bid, name, newName}\n\tboard.perms.WithPermission(caller, PermissionBoardRename, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardNameNotExists(newName)\n\n\t\tboard := mustGetBoard(bid)\n\t\tboard.aliases = append(board.aliases, board.name)\n\t\tboard.name = newName\n\n\t\t// Index board for the new name keeping previous indexes for older names\n\t\tgBoardsByName.Set(newName, board)\n\n\t\tstd.Emit(\n\t\t\t\"BoardRenamed\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", bid.String(),\n\t\t\t\"name\", name,\n\t\t\t\"newName\", newName,\n\t\t)\n\t})\n}\n\n// CreateThread creates a new thread within a board.\nfunc CreateThread(boardID BoardID, title, body string) PostID {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tbody = strings.TrimSpace(body)\n\tassertBodyIsNotEmpty(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionThreadCreate)\n\n\tthread := board.AddThread(caller, title, body)\n\n\tstd.Emit(\n\t\t\"ThreadCreated\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", thread.GetPostID().String(),\n\t\t\"title\", title,\n\t)\n\n\treturn thread.id\n}\n\n// CreateReply creates a new comment or reply within a thread.\n//\n// The value of `replyID` is only required when creating a reply of another reply.\nfunc CreateReply(boardID BoardID, threadID, replyID PostID, body string) PostID {\n\tassertRealmIsNotLocked()\n\n\tbody = strings.TrimSpace(body)\n\tassertReplyBodyIsValid(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionReplyCreate)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\tassertThreadIsNotFrozen(thread)\n\n\tvar reply *Post\n\tif replyID == 0 {\n\t\t// When the parent reply is the thread just add reply to thread\n\t\treply = thread.AddReply(caller, body)\n\t} else {\n\t\t// Try to get parent reply and add a new child reply\n\t\tparent := mustGetReply(thread, replyID)\n\t\tif parent.IsHidden() || parent.IsReadonly() {\n\t\t\tpanic(\"replying to a hidden or frozen reply is not allowed\")\n\t\t}\n\n\t\treply = parent.AddReply(caller, body)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyCreate\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", reply.GetPostID().String(),\n\t)\n\n\treturn reply.id\n}\n\n// CreateRepost reposts a thread into another board.\nfunc CreateRepost(boardID BoardID, threadID PostID, title, body string, destinationBoardID BoardID) PostID {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tcaller := std.PreviousRealm().Address()\n\tdst := mustGetBoard(destinationBoardID)\n\tassertBoardIsNotFrozen(dst)\n\tassertHasBoardPermission(dst, caller, PermissionThreadRepost)\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\tif thread.IsRepost() {\n\t\tpanic(\"reposting a thread that is a repost is not allowed\")\n\t}\n\n\trepostId := dst.incGetPostID()\n\tbody = strings.TrimSpace(body)\n\trepost := newPost(dst, repostId, caller, title, body, repostId, thread.GetPostID(), thread.GetBoard().GetID())\n\tthread.AddRepostTo(caller, repost, dst)\n\n\tstd.Emit(\n\t\t\"Repost\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"destinationBoardID\", destinationBoardID.String(),\n\t\t\"title\", title,\n\t)\n\n\treturn repostId\n}\n\n// DeleteThread deletes a thread from a board.\n//\n// Threads can be deleted by the users who created them or otherwise by users with special permissions.\nfunc DeleteThread(boardID BoardID, threadID PostID) {\n\t// Council members should always be able to delete\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner) // TODO: Add DeleteThread filetest cases for realm owners\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\n\tif !isRealmOwner {\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertThreadIsNotFrozen(thread)\n\n\t\tif caller != thread.GetCreator() {\n\t\t\tassertHasBoardPermission(board, caller, PermissionThreadDelete)\n\t\t}\n\t}\n\n\t// Hard delete thread and all its replies\n\tboard.DeleteThread(threadID)\n\n\tstd.Emit(\n\t\t\"ThreadDeleted\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t)\n}\n\n// DeleteReply deletes a reply from a thread.\n//\n// Replies can be deleted by the users who created them or otherwise by users with special permissions.\n// Soft deletion is used when the deleted reply contains sub replies, in which case the reply content\n// is replaced by a text informing that reply has been deleted to avoid deleting sub-replies.\nfunc DeleteReply(boardID BoardID, threadID, replyID PostID) {\n\t// Council members should always be able to delete\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner) // TODO: Add DeleteReply filetest cases for realm owners\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\treply := mustGetReply(thread, replyID)\n\n\tif !isRealmOwner {\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertThreadIsNotFrozen(thread)\n\t\tassertReplyIsVisible(reply)\n\t\tassertReplyIsNotFrozen(reply)\n\n\t\tif caller != reply.GetCreator() {\n\t\t\tassertHasBoardPermission(board, caller, PermissionReplyDelete)\n\t\t}\n\t}\n\n\t// Soft delete reply by changing its body when it contains\n\t// sub-replies, otherwise hard delete it.\n\tif reply.HasReplies() {\n\t\treply.Update(reply.GetTitle(), \"This reply has been deleted\")\n\t} else {\n\t\tthread.DeleteReply(replyID)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyDeleted\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t)\n}\n\n// EditThread updates the title and body of thread.\n//\n// Threads can be updated by the users who created them or otherwise by users with special permissions.\nfunc EditThread(boardID BoardID, threadID PostID, title, body string) {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\tbody = strings.TrimSpace(body)\n\tif !thread.IsRepost() {\n\t\tassertBodyIsNotEmpty(body)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tif caller != thread.GetCreator() {\n\t\tassertHasBoardPermission(board, caller, PermissionThreadEdit)\n\t}\n\n\tthread.Update(title, body)\n\n\tstd.Emit(\n\t\t\"ThreadEdited\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"title\", title,\n\t)\n}\n\n// EditReply updates the body of comment or reply.\n//\n// Replies can be updated only by the users who created them.\nfunc EditReply(boardID BoardID, threadID, replyID PostID, body string) {\n\tassertRealmIsNotLocked()\n\n\tbody = strings.TrimSpace(body)\n\tassertReplyBodyIsValid(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\tassertReplyIsNotFrozen(reply)\n\n\tcaller := std.PreviousRealm().Address()\n\tif caller != reply.GetCreator() {\n\t\tpanic(\"only the reply creator is allowed to edit it\")\n\t}\n\n\treply.Update(\"\", body)\n\n\tstd.Emit(\n\t\t\"ReplyEdited\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"body\", body,\n\t)\n}\n\n// InviteMember adds a member to the realm or to a boards.\n//\n// A role can optionally be specified to be assigned to the new member.\n// Board ID is only required when inviting a member to a board.\nfunc InviteMember(boardID BoardID, user std.Address, role Role) {\n\tassertUserAddressIsValid(user)\n\tassertMembersUpdateIsEnabled(boardID)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{user, role}\n\tperms.WithPermission(caller, PermissionMemberInvite, args, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif err := perms.AddUser(user, role); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"MemberInvited\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", user.String(),\n\t\t\t\"role\", string(role),\n\t\t)\n\t})\n}\n\n// RemoveMember removes a member from the realm or a boards.\n//\n// Board ID is only required when removing a member from board.\nfunc RemoveMember(boardID BoardID, member std.Address) {\n\tassertMembersUpdateIsEnabled(boardID)\n\tassertMemberAddressIsValid(member)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\tperms.WithPermission(caller, PermissionMemberRemove, Args{member}, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif !perms.RemoveUser(member) {\n\t\t\tpanic(\"member not found\")\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"MemberRemoved\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", member.String(),\n\t\t)\n\t})\n}\n\n// IsMember checks if an user is a member of the realm or a board.\n//\n// Board ID is only required when checking if a user is a member of a board.\nfunc IsMember(boardID BoardID, user std.Address) bool {\n\tassertUserAddressIsValid(user)\n\n\tif boardID != 0 {\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tperms := mustGetPermissions(boardID)\n\treturn perms.HasUser(user)\n}\n\n// HasMemberRole checks if a realm or board member has a specific role assigned.\n//\n// Board ID is only required when checking a member of a board.\nfunc HasMemberRole(boardID BoardID, member std.Address, role Role) bool {\n\tassertMemberAddressIsValid(member)\n\n\tif boardID != 0 {\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tperms := mustGetPermissions(boardID)\n\treturn perms.HasRole(member, role)\n}\n\n// ChangeMemberRole changes the role of a realm or board member.\n//\n// Board ID is only required when changing the role for a member of a board.\nfunc ChangeMemberRole(boardID BoardID, member std.Address, role Role) {\n\tassertMemberAddressIsValid(member)\n\tassertMembersUpdateIsEnabled(boardID)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{boardID, member, role}\n\tperms.WithPermission(caller, PermissionRoleChange, args, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif err := perms.SetUserRoles(member, role); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"RoleChanged\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", member.String(),\n\t\t\t\"newRole\", string(role),\n\t\t)\n\t})\n}\n\n// IterateRealmMembers iterates realm members.\n// The iteration is done only for realm members, board members are not iterated.\nfunc IterateRealmMembers(offset int, fn UsersIterFn) (halted bool) {\n\tcount := gPerms.UsersCount() - offset\n\treturn gPerms.IterateUsers(offset, count, fn)\n}\n\n// IterateBoards iterates realm boards.\nfunc IterateBoards(offset int, fn func(ReadonlyBoard) bool) (halted bool) {\n\tcount := gBoardsByID.Size() - offset\n\treturn gBoardsByID.IterateByOffset(offset, count, func(_ string, v any) bool {\n\t\tboard, _ := v.(*Board)\n\t\treturn fn(readonlyBoard{board})\n\t})\n}\n\nfunc assertMemberAddressIsValid(member std.Address) {\n\tif !member.IsValid() {\n\t\tpanic(\"invalid member address\")\n\t}\n}\n\nfunc assertUserAddressIsValid(user std.Address) {\n\tif !user.IsValid() {\n\t\tpanic(\"invalid user address\")\n\t}\n}\n\nfunc assertHasBoardPermission(b *Board, user std.Address, p Permission) {\n\tif !b.perms.HasPermission(user, p) {\n\t\tpanic(\"unauthorized\")\n\t}\n}\n\nfunc assertBoardExists(id BoardID) {\n\tif _, found := getBoard(id); !found {\n\t\tpanic(\"board not found: \" + id.String())\n\t}\n}\n\nfunc assertBoardIsNotFrozen(b *Board) {\n\tif b.IsReadonly() {\n\t\tpanic(\"board is frozen\")\n\t}\n}\n\nfunc assertIsValidBoardName(name string) {\n\tsize := len(name)\n\tif size == 0 {\n\t\tpanic(\"board name is empty\")\n\t}\n\n\tif size \u003e MaxBoardNameLength {\n\t\tn := strconv.Itoa(MaxBoardNameLength)\n\t\tpanic(\"board name is too long, maximum allowed is \" + n + \" characters\")\n\t}\n\n\tif !reBoardName.MatchString(name) {\n\t\tpanic(\"board name contains invalid characters\")\n\t}\n}\n\nfunc assertThreadIsNotFrozen(t *Post) {\n\tif t.IsReadonly() {\n\t\tpanic(\"thread is frozen\")\n\t}\n}\n\nfunc assertReplyIsNotFrozen(r *Post) {\n\tif r.IsReadonly() {\n\t\tpanic(\"reply is frozen\")\n\t}\n}\n\nfunc assertNameIsNotEmpty(name string) {\n\tif name == \"\" {\n\t\tpanic(\"name is empty\")\n\t}\n}\n\nfunc assertTitleIsValid(title string) {\n\tif title == \"\" {\n\t\tpanic(\"title is empty\")\n\t}\n\n\tif len(title) \u003e MaxThreadTitleLength {\n\t\tn := strconv.Itoa(MaxThreadTitleLength)\n\t\tpanic(\"thread title is too long, maximum allowed is \" + n + \" characters\")\n\t}\n}\n\nfunc assertBodyIsNotEmpty(body string) {\n\tif body == \"\" {\n\t\tpanic(\"body is empty\")\n\t}\n}\n\nfunc assertBoardNameNotExists(name string) {\n\tif gBoardsByName.Has(name) {\n\t\tpanic(\"board already exists\")\n\t}\n}\n\nfunc assertThreadExists(b *Board, threadID PostID) {\n\tif _, found := b.GetThread(threadID); !found {\n\t\tpanic(\"thread not found: \" + threadID.String())\n\t}\n}\n\nfunc assertReplyExists(thread *Post, replyID PostID) {\n\tif _, found := thread.GetReply(replyID); !found {\n\t\tpanic(\"reply not found: \" + replyID.String())\n\t}\n}\n\nfunc assertThreadIsVisible(thread *Post) {\n\tif thread.IsHidden() {\n\t\tpanic(\"thread is hidden\")\n\t}\n}\n\nfunc assertReplyIsVisible(thread *Post) {\n\tif thread.IsHidden() {\n\t\tpanic(\"reply is hidden\")\n\t}\n}\n\nfunc assertReplyBodyIsValid(body string) {\n\tassertBodyIsNotEmpty(body)\n\n\tif len(body) \u003e MaxReplyLength {\n\t\tn := strconv.Itoa(MaxReplyLength)\n\t\tpanic(\"reply is too long, maximum allowed is \" + n + \" characters\")\n\t}\n\n\tif reDeniedReplyLinePrefixes.MatchString(body) {\n\t\tpanic(\"using Markdown headings, blockquotes or horizontal lines is not allowed in replies\")\n\t}\n}\n\nfunc assertMembersUpdateIsEnabled(boardID BoardID) {\n\tif boardID != 0 {\n\t\tassertRealmIsNotLocked()\n\t} else {\n\t\tassertRealmMembersAreNotLocked()\n\t}\n}\n"},{"name":"public_flag.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// SetFlaggingThreshold sets the number of flags required to hide a thread or comment.\n//\n// Threshold is only applicable within the board where it's setted.\nfunc SetFlaggingThreshold(boardID BoardID, threshold int) {\n\tif threshold \u003c 1 {\n\t\tpanic(\"invalid flagging threshold\")\n\t}\n\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{boardID, threshold}\n\tboard.perms.WithPermission(caller, PermissionBoardFlaggingUpdate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\n\t\tgFlaggingThresholds.Set(boardID.String(), threshold)\n\t\tstd.Emit(\n\t\t\t\"FlaggingThresholdUpdated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"threshold\", strconv.Itoa(threshold),\n\t\t)\n\t})\n}\n\n// GetFlaggingThreshold returns the number of flags required to hide a thread or comment within a board.\nfunc GetFlaggingThreshold(boardID BoardID) int {\n\tassertBoardExists(boardID)\n\treturn getFlaggingThreshold(boardID)\n}\n\n// FlagThread adds a new flag to a thread.\n//\n// Flagging requires special permissions and hides the thread when\n// the number of flags reaches a pre-defined flagging threshold.\nfunc FlagThread(boardID BoardID, threadID PostID, reason string) {\n\tboard := mustGetBoard(boardID)\n\n\t// Realm owners should be able to flag without permissions even when board is frozen\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner)\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertHasBoardPermission(board, caller, PermissionThreadFlag)\n\t}\n\n\tt, ok := board.GetThread(threadID)\n\tif !ok {\n\t\tpanic(\"post doesn't exist\")\n\t}\n\tassertThreadIsNotFrozen(t)\n\n\tf := Flag{\n\t\tUser:   caller,\n\t\tReason: reason,\n\t}\n\n\t// Realm owners can hide with a single flag\n\thide := flagItem(t, f, getFlaggingThreshold(boardID))\n\tif hide || isRealmOwner {\n\t\tt.SetVisible(false)\n\t}\n\n\tstd.Emit(\n\t\t\"ThreadFlagged\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"reason\", reason,\n\t)\n}\n\n// FlagReply adds a new flag to a comment or reply.\n//\n// Flagging requires special permissions and hides the comment or reply\n// when the number of flags reaches a pre-defined flagging threshold.\nfunc FlagReply(boardID BoardID, threadID, replyID PostID, reason string) {\n\tboard := mustGetBoard(boardID)\n\n\t// Realm owners should be able to flag without permissions even when board is frozen\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner)\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertHasBoardPermission(board, caller, PermissionReplyFlag)\n\t}\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsNotFrozen(thread)\n\n\tf := Flag{\n\t\tUser:   caller,\n\t\tReason: reason,\n\t}\n\n\t// Realm owners can hide with a single flag\n\thide := flagItem(reply, f, getFlaggingThreshold(boardID))\n\tif hide || isRealmOwner {\n\t\treply.SetVisible(false)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyFlagged\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"reason\", reason,\n\t)\n}\n"},{"name":"public_freeze.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// FreezeBoard freezes a board so no more threads and comments can be created or modified.\nfunc FreezeBoard(boardID BoardID) {\n\tsetBoardReadonly(boardID, true)\n}\n\n// UnfreezeBoard removes frozen status from a board.\nfunc UnfreezeBoard(boardID BoardID) {\n\tsetBoardReadonly(boardID, false)\n}\n\n// IsBoardFrozen checks if a board has been frozen.\nfunc IsBoardFrozen(boardID BoardID) bool {\n\tboard := mustGetBoard(boardID)\n\treturn board.IsReadonly()\n}\n\n// FreezeThread freezes a thread so thread cannot be replied, modified or deleted.\n//\n// Fails if board is frozen.\nfunc FreezeThread(boardID BoardID, threadID PostID) {\n\tsetThreadReadonly(boardID, threadID, true)\n}\n\n// UnfreezeThread removes frozen status from a thread.\n//\n// Fails if board is frozen.\nfunc UnfreezeThread(boardID BoardID, threadID PostID) {\n\tsetThreadReadonly(boardID, threadID, false)\n}\n\n// IsThreadFrozen checks if a thread has been frozen.\n//\n// Returns true if board is frozen.\nfunc IsThreadFrozen(boardID BoardID, threadID PostID) bool {\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\treturn board.IsReadonly() || thread.IsReadonly()\n}\n\n// UnfreezeReply removes frozen status from a reply.\n//\n// Fails when parent thread or board are frozen.\nfunc UnfreezeReply(boardID BoardID, threadID, replyID PostID) {\n\t// XXX: Is there a use case for also freezing replies?\n\tsetReplyReadonly(boardID, threadID, replyID, false)\n}\n\n// FreezeReply freezes a thread reply so it cannot be modified or deleted.\n//\n// Fails when parent thread or board are frozen.\nfunc FreezeReply(boardID BoardID, threadID, replyID PostID) {\n\tsetReplyReadonly(boardID, threadID, replyID, true)\n}\n\n// IsReplyFrozen checks if a thread reply has been frozen.\n//\n// Returns true when board or a parent thread is frozen.\nfunc IsReplyFrozen(boardID BoardID, threadID, replyID PostID) bool {\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\n\treturn board.IsReadonly() || thread.IsReadonly() || reply.IsReadonly()\n}\n\nfunc setReplyReadonly(boardID BoardID, threadID, replyID PostID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionReplyFreeze)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\n\tif isReadonly {\n\t\tassertReplyIsNotFrozen(reply)\n\t}\n\n\treply.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"ReplyFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n\nfunc setThreadReadonly(boardID BoardID, threadID PostID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionThreadFreeze)\n\n\tthread := mustGetThread(board, threadID)\n\tif isReadonly {\n\t\tassertThreadIsNotFrozen(thread)\n\t}\n\n\tthread.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"ThreadFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n\nfunc setBoardReadonly(boardID BoardID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tif isReadonly {\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionBoardFreeze)\n\n\tboard.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"BoardFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n"},{"name":"public_lock.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// LockRealm locks the realm making it readonly.\n//\n// WARNING: Realm can't be unlocked once locked.\n//\n// Realm can also be locked without locking realm members.\n// Realm members can be locked when locking the realm or afterwards.\n// This is relevant for two reasons, one so members can be modified after lock.\n// The other is for realm owners, which can delete threads and comments after lock.\nfunc LockRealm(lockRealmMembers bool) {\n\tassertRealmMembersAreNotLocked()\n\n\t// If realm members are not being locked assert that realm is no locked.\n\t// Members can be locked after locking the realm, in a second `LockRealm` call.\n\tif !lockRealmMembers {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tgPerms.WithPermission(caller, PermissionRealmLock, nil, func(Args) {\n\t\tgLocked.realm = true\n\t\tgLocked.realmMembers = lockRealmMembers\n\n\t\tstd.Emit(\n\t\t\t\"RealmLocked\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"lockRealmMembers\", strconv.FormatBool(lockRealmMembers),\n\t\t)\n\t})\n}\n\n// IsRealmLocked checks if boards realm has been locked.\nfunc IsRealmLocked() bool {\n\treturn gLocked.realm\n}\n\n// AreRealmMembersLocked checks if realm members has been locked.\nfunc AreRealmMembersLocked() bool {\n\treturn gLocked.realmMembers\n}\n\nfunc assertRealmIsNotLocked() { // TODO: Add filtests for locked realm case to all public functions\n\tif gLocked.realm {\n\t\tpanic(\"realm is locked\")\n\t}\n}\n\nfunc assertRealmMembersAreNotLocked() { // TODO: Add filtests for locked members case to all public member functions\n\tif gLocked.realmMembers {\n\t\tpanic(\"realm and members are locked\")\n\t}\n}\n"},{"name":"render.gno","body":"package boards2\n\nimport (\n\t\"net/url\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/mux\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nconst (\n\tpageSizeBoards  = 6\n\tpageSizeThreads = 6\n\tpageSizeReplies = 10\n)\n\nconst menuManageBoard = \"manageBoard\"\n\nfunc Render(path string) string {\n\trouter := mux.NewRouter()\n\trouter.HandleFunc(\"\", renderBoardsList)\n\trouter.HandleFunc(\"help\", renderHelp)\n\trouter.HandleFunc(\"admin-users\", renderMembers)\n\trouter.HandleFunc(\"{board}\", renderBoard)\n\trouter.HandleFunc(\"{board}/members\", renderMembers)\n\trouter.HandleFunc(\"{board}/{thread}\", renderThread)\n\trouter.HandleFunc(\"{board}/{thread}/{reply}\", renderReply)\n\n\trouter.NotFoundHandler = func(res *mux.ResponseWriter, _ *mux.Request) {\n\t\tres.Write(\"Path not found\")\n\t}\n\n\treturn router.Render(path)\n}\n\nfunc renderHelp(res *mux.ResponseWriter, _ *mux.Request) {\n\tres.Write(\"# Boards Help\\n\")\n\tif gHelp != \"\" {\n\t\tres.Write(gHelp)\n\t} else {\n\t\tres.Write(\"### Help content has not been uploaded\\n\")\n\t\tres.Write(\"Do you want to \")\n\t\tres.Write(newLink(\"upload boards help\", txlink.Call(\"SetHelp\", \"content\", \"\")))\n\t\tres.Write(\" ?\")\n\t}\n}\n\nfunc renderBoardsList(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tres.Write(\"# Boards\\n\\n\")\n\trenderBoardListMenu(res, req)\n\tres.Write(\"\\n\\n---\\n\")\n\n\tif gBoardsByID.Size() == 0 {\n\t\tlink := txlink.Call(\"CreateBoard\", \"name\", \"\")\n\t\tres.Write(\"### Currently there are no boards\\n\")\n\t\tres.Write(\"Be the first to \")\n\t\tres.Write(newLink(\"create a new board\", link))\n\t\tres.Write(\" !\")\n\n\t\treturn\n\t}\n\n\tp, err := pager.New(req.RawPath, gBoardsByID.Size(), pager.WithPageSize(pageSizeBoards))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\trender := func(_ string, v any) bool {\n\t\tboard := v.(*Board)\n\n\t\tres.Write(\"**\" + newLink(board.GetName(), board.GetURL()) + \"**  \\n\")\n\t\tres.Write(\"Created by \" + newUserLink(board.creator) + \" \")\n\t\tres.Write(\"on \" + board.createdAt.Format(dateFormat))\n\t\tres.Write(\", #\" + board.id.String() + \"  \\n\")\n\t\tres.Write(\"**\" + strconv.Itoa(board.threads.Size()) + \" threads\")\n\t\tif board.IsReadonly() {\n\t\t\tres.Write(\", read-only\")\n\t\t}\n\n\t\tres.Write(\"**\\n\\n\")\n\t\treturn false\n\t}\n\n\tres.Write(\"Sort by: \")\n\tr := realmpath.Parse(req.RawPath)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tres.Write(newLink(\"newest first\", r.String()))\n\t\tres.Write(\"\\n\\n\")\n\t\tgBoardsByID.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tres.Write(newLink(\"oldest first\", r.String()))\n\t\tres.Write(\"\\n\\n\")\n\t\tgBoardsByID.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tres.Write(\"\\n---\\n\")\n\t\tres.Write(pager.Picker(p))\n\t}\n}\n\nfunc renderBoardListMenu(res *mux.ResponseWriter, req *mux.Request) {\n\tpath := strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\n\tres.Write(newLink(\"Create Board\", txlink.Call(\"CreateBoard\", \"name\", \"\")))\n\tres.Write(\" • \")\n\tres.Write(newLink(\"List Admin Users\", path+\":admin-users\"))\n\tres.Write(\" • \")\n\tres.Write(newLink(\"Help\", path+\":help\"))\n\tres.Write(\"\\n\\n\")\n}\n\nfunc renderBoard(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tlink := newLink(\"create a new board\", txlink.Call(\"CreateBoard\", \"name\", name))\n\t\tres.Write(\"### The board you are looking for does not exist\\n\")\n\t\tres.Write(\"Do you want to \")\n\t\tres.Write(link)\n\t\tres.Write(\" ?\")\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tmenu := renderBoardMenu(board, req)\n\n\tres.Write(board.Render(req.RawPath, menu))\n}\n\nfunc renderBoardMenu(board *Board, req *mux.Request) string {\n\tvar (\n\t\tb               strings.Builder\n\t\tboardMembersURL = board.GetPath() + \"/members\"\n\t)\n\n\tif board.IsReadonly() {\n\t\tb.WriteString(newLink(\"List Members\", boardMembersURL))\n\t\tb.WriteString(\" • \")\n\t\tb.WriteString(newLink(\"Unfreeze Board\", board.GetUnfreezeFormURL()))\n\t\tb.WriteString(\"\\n\")\n\t} else {\n\t\tb.WriteString(newLink(\"Create Thread\", board.GetPostFormURL()))\n\t\tb.WriteString(\" • \")\n\n\t\tmenu := getCurrentMenu(req.RawPath)\n\t\tif menu == menuManageBoard {\n\t\t\tb.WriteString(\"**Manage Board**\")\n\t\t} else {\n\t\t\tb.WriteString(newLink(\"Manage Board\", menuURL(menuManageBoard)))\n\t\t}\n\n\t\tb.WriteString(\"  \\n\")\n\n\t\tif menu == menuManageBoard {\n\t\t\tb.WriteString(\"↳\")\n\t\t\tb.WriteString(newLink(\"Invite Member\", board.GetInviteMemberFormURL()))\n\t\t\tb.WriteString(\" • \")\n\t\t\tb.WriteString(newLink(\"List Members\", boardMembersURL))\n\t\t\tb.WriteString(\" • \")\n\t\t\tb.WriteString(newLink(\"Freeze Board\", board.GetFreezeFormURL()))\n\t\t\tb.WriteString(\"\\n\\n\")\n\t\t}\n\t}\n\n\treturn b.String()\n}\n\nfunc renderThread(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tres.Write(\"Board does not exist: \" + name)\n\t\treturn\n\t}\n\n\trawID := req.GetVar(\"thread\")\n\ttID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid thread ID: \" + rawID)\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tthread, found := board.GetThread(PostID(tID))\n\tif !found {\n\t\tres.Write(\"Thread does not exist with ID: \" + rawID)\n\t} else if thread.IsHidden() {\n\t\tres.Write(\"Thread with ID: \" + rawID + \" has been flagged as inappropriate\")\n\t} else {\n\t\tres.Write(thread.Render(req.RawPath, \"\", 5))\n\t}\n}\n\nfunc renderReply(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tres.Write(\"Board does not exist: \" + name)\n\t\treturn\n\t}\n\n\trawID := req.GetVar(\"thread\")\n\ttID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid thread ID: \" + rawID)\n\t\treturn\n\t}\n\n\trawID = req.GetVar(\"reply\")\n\trID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid reply ID: \" + rawID)\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tthread, found := board.GetThread(PostID(tID))\n\tif !found {\n\t\tres.Write(\"Thread does not exist with ID: \" + req.GetVar(\"thread\"))\n\t\treturn\n\t}\n\n\treply, found := thread.GetReply(PostID(rID))\n\tif !found {\n\t\tres.Write(\"Reply does not exist with ID: \" + rawID)\n\t\treturn\n\t}\n\n\t// Call render even for hidden replies to display children.\n\t// Original comment content will be hidden under the hood.\n\t// See: #3480\n\tres.Write(reply.RenderInner())\n}\n\nfunc renderMembers(res *mux.ResponseWriter, req *mux.Request) {\n\tboardID := BoardID(0)\n\tperms := gPerms\n\tname := req.GetVar(\"board\")\n\tif name != \"\" {\n\t\tv, found := gBoardsByName.Get(name)\n\t\tif !found {\n\t\t\tres.Write(\"### Board not found\")\n\t\t\treturn\n\t\t}\n\n\t\tboard := v.(*Board)\n\t\tboardID = board.GetID()\n\t\tperms = board.perms\n\n\t\tres.Write(\"# \" + board.GetName() + \" Members\\n\")\n\t\tres.Write(\"### These are the board members\\n\\n\")\n\t} else {\n\t\tres.Write(\"# Admin Users\\n\")\n\t\tres.Write(\"### These are the admin users of the realm\\n\\n\")\n\t}\n\n\t// Create a pager with a small page size to reduce\n\t// the number of username lookups per page.\n\tp, err := pager.New(req.RawPath, perms.UsersCount(), pager.WithPageSize(5))\n\tif err != nil {\n\t\tres.Write(err.Error())\n\t\treturn\n\t}\n\n\tres.Write(\"| Member | Role | Actions |\\n| --- | --- | --- |\\n\")\n\tperms.IterateUsers(p.Offset(), p.PageSize(), func(u User) bool {\n\t\tres.Write(\"| \")\n\t\tres.Write(newUserLink(u.Address))\n\t\tres.Write(\" | \")\n\t\tres.Write(rolesToString(u.Roles))\n\t\tres.Write(\" | \")\n\t\tres.Write(newLink(\"remove\", txlink.Call(\n\t\t\t\"RemoveMember\",\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", u.Address.String(),\n\t\t)))\n\t\tres.Write(\" • \")\n\t\tres.Write(newLink(\"change role\", txlink.Call(\n\t\t\t\"ChangeMemberRole\",\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", u.Address.String(),\n\t\t\t\"role\", \"\",\n\t\t)))\n\t\tres.Write(\" |\\n\")\n\t\treturn false\n\t})\n\n\tif p.HasPages() {\n\t\tres.Write(\"\\n\\n\" + pager.Picker(p))\n\t}\n}\n\nfunc renderNotice(res *mux.ResponseWriter) {\n\tif gNotice == \"\" {\n\t\treturn\n\t}\n\n\tres.Write(\"\u003e \")\n\tres.Write(gNotice)\n\tres.Write(\"\\n\\n\")\n}\n\nfunc rolesToString(roles []Role) string {\n\tif len(roles) == 0 {\n\t\treturn \"\"\n\t}\n\n\tnames := make([]string, len(roles))\n\tfor i, r := range roles {\n\t\tnames[i] = string(r)\n\t}\n\treturn strings.Join(names, \", \")\n}\n\nfunc menuURL(name string) string {\n\t// TODO: Menu URL works because no other GET arguments are being used\n\treturn \"?menu=\" + name\n}\n\nfunc getCurrentMenu(rawURL string) string {\n\t_, rawQuery, found := strings.Cut(rawURL, \"?\")\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\tquery, _ := url.ParseQuery(rawQuery)\n\treturn query.Get(\"menu\")\n}\n"},{"name":"z_0_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tbid := boards2.CreateBoard(\"test123\")\n\tprintln(\"ID =\", bid)\n}\n\n// Output:\n// ID = 1\n"},{"name":"z_0_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"\")\n}\n\n// Error:\n// board name is empty\n"},{"name":"z_0_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tboardName = \"test123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(boardName)\n}\n\nfunc main() {\n\tboards2.CreateBoard(boardName)\n}\n\n// Error:\n// board already exists\n"},{"name":"z_0_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n}\n\n// Error:\n// addresses are not allowed as board name\n"},{"name":"z_0_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"gnoland\")\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_0_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar name = strings.Repeat(\"X\", boards2.MaxBoardNameLength+1)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(name)\n}\n\n// Error:\n// board name is too long, maximum allowed is 50 characters\n"},{"name":"z_0_h_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname   = \"test123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\tboards2.InviteMember(0, member, boards2.RoleOwner) // Operate on realm DAO members instead of individual boards\n\ttesting.SetOriginCaller(member)\n\tusers.Register(name)\n}\n\nfunc main() {\n\tbid := boards2.CreateBoard(name)\n\tprintln(\"ID =\", bid)\n}\n\n// Output:\n// ID = 1\n"},{"name":"z_0_i_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"test123\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_10_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\n\t// Invite a moderator to the new board\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\n\t// Create a new thread as a moderator\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_10_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.FlagThread(404, 1, \"\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_10_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Make the next call as an uninvited user\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_10_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, 404, \"\")\n}\n\n// Error:\n// post doesn't exist\n"},{"name":"z_10_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// item flag count threshold exceeded: 1\n"},{"name":"z_10_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to flag threads\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\ttesting.SetOriginCaller(moderator)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_10_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with a specific flagging threshold\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Invite a moderator to the new board\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\n\t// Create a new thread and flag it as a moderator\n\ttesting.SetOriginCaller(moderator)\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// item has been already flagged by a current user\n"},{"name":"z_10_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with flagging threshold greater than 1\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Create a thread so the realm owner can flag and hide it with a single flag\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\t// Also freeze board to make sure that realm owner can still flag the thread\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_11_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, body)\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_11_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"\", \"bar\")\n}\n\n// Error:\n// title is empty\n"},{"name":"z_11_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_11_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.EditThread(404, 1, \"Foo\", \"bar\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_11_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_11_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"bar\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_11_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to edit threads\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, body)\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_11_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid   boards2.BoardID\n\tpid   boards2.PostID\n\ttitle = strings.Repeat(\"X\", boards2.MaxThreadTitleLength+1)\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, \"bar\")\n}\n\n// Error:\n// thread title is too long, maximum allowed is 100 characters\n"},{"name":"z_12_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbody  = \"Test reply\"\n\tpath  = \"test-board/1/2\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, body)\n\n\t// Render content must contain the modified reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \"+body+\"\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_12_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbody  = \"Test reply\"\n\tpath  = \"test-board/1/2\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Create a reply and a sub reply\n\tparentRID := boards2.CreateReply(bid, tid, 0, \"Parent\")\n\trid = boards2.CreateReply(bid, tid, parentRID, \"Child\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, body)\n\n\t// Render content must contain the modified reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e \"+body+\"\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_12_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.EditReply(404, 1, 0, \"body\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_12_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, 404, 0, \"body\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_12_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, 404, \"body\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_12_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"new body\")\n}\n\n// Error:\n// only the reply creator is allowed to edit it\n"},{"name":"z_12_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Flag the reply so it's hidden\n\tboards2.FlagReply(bid, tid, rid, \"reason\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"body\")\n}\n\n// Error:\n// reply is hidden\n"},{"name":"z_12_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_13_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_13_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.FlagReply(404, 1, 1, \"\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_13_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, 404, 1, \"\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_13_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, 404, \"\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_13_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// item flag count threshold exceeded: 1\n"},{"name":"z_13_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_13_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Invite a member using a role with permission to flag replies\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\ttesting.SetOriginCaller(moderator)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_13_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with flagging threshold greater than 1\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Create a reply so the realm owner can flag and hide it with a single flag\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\t// Also freeze board to make sure that realm owner can still flag the reply\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\"))\n}\n\n// Output:\n// true\n"},{"name":"z_14_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Ensure reply doesn't exist\n\tprintln(boards2.Render(\"test-board/1/2\"))\n}\n\n// Output:\n// Reply does not exist with ID: 2\n"},{"name":"z_14_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.DeleteReply(404, 1, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_14_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, 404, 1)\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_14_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, 404)\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_14_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\trid = boards2.CreateReply(bid, tid, 0, \"Parent\")\n\tboards2.CreateReply(bid, tid, rid, \"Child reply\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Render content must contain the releted message instead of reply's body\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e This reply has been deleted\\n\"))\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e Child reply\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_14_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Call using a user that has not permission to delete replies\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_14_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Invite a member using a role with permission to delete replies\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(member)\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Ensure reply doesn't exist\n\tprintln(boards2.Render(\"test-board/1/2\"))\n}\n\n// Output:\n// Reply does not exist with ID: 2\n"},{"name":"z_15_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"Foo\", \"bar\")\n\tboards2.FlagThread(srcBID, srcTID, \"idk\")\n}\n\nfunc main() {\n\t// Repost should fail if source thread is flagged\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_15_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID = 1024\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n}\n\nfunc main() {\n\t// Repost should fail if source thread doesn't exist\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// thread does not exist with ID: 1024\n"},{"name":"z_15_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"Foo\", \"bar\")\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_15_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/ufmt\"\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"original title\", \"original text\")\n}\n\nfunc main() {\n\t// Success case\n\ttID := boards2.CreateRepost(srcBID, srcTID, \"repost title\", \"repost text\", dstBID)\n\tp := ufmt.Sprintf(\"dst-board/%s\", tID)\n\tout := boards2.Render(p)\n\n\tprintln(strings.Contains(out, \"original text\"))\n\tprintln(strings.Contains(out, \"repost title\"))\n\tprintln(strings.Contains(out, \"repost text\"))\n}\n\n// Output:\n// true\n// true\n// true\n"},{"name":"z_15_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Create a board with a thread\n\torigBID := boards2.CreateBoard(\"origin-board\")\n\torigTID := boards2.CreateThread(origBID, \"title\", \"text\")\n\n\t// Create a second board and repost a thread using an empty title\n\tsrcBID = boards2.CreateBoard(\"source-board\")\n\tsrcTID = boards2.CreateRepost(origBID, origTID, \"original title\", \"original text\", srcBID)\n\n\t// Create a third board to try reposting the repost\n\tdstBID = boards2.CreateBoard(\"destination-board\")\n}\n\nfunc main() {\n\tboards2.CreateRepost(srcBID, srcTID, \"repost title\", \"repost text\", dstBID)\n}\n\n// Error:\n// reposting a thread that is a repost is not allowed\n"},{"name":"z_16_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(bid, 4)\n\n\t// Ensure that flagging threshold changed\n\tprintln(boards2.GetFlaggingThreshold(bid))\n}\n\n// Output:\n// 4\n"},{"name":"z_16_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nconst bid boards2.BoardID = 404\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(bid, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_16_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(1, 0)\n}\n\n// Error:\n// invalid flagging threshold\n"},{"name":"z_17_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.FreezeBoard(bid)\n\tprintln(boards2.IsBoardFrozen(bid))\n}\n\n// Output:\n// true\n"},{"name":"z_17_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FreezeBoard(bid)\n}\n\n// Error:\n// board is frozen\n"},{"name":"z_18_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbid   = boards2.BoardID(0)                                      // Operate on realm instead of individual boards\n)\n\nvar perms boards2.Permissions\n\nfunc init() {\n\t// Create a new permissions instance without users\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n\n\t// Owner that setted new permissions is not a member of the new permissions\n\tprintln(boards2.IsMember(bid, owner))\n}\n\n// Output:\n// false\n"},{"name":"z_18_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\tuser = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid  = boards2.BoardID(0)                                      // Operate on realm instead of individual boards\n)\n\nvar perms boards2.Permissions\n\nfunc init() {\n\t// Create a new permissions instance\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_18_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tperms boards2.Permissions\n\tbid   boards2.BoardID\n)\n\nfunc init() {\n\t// Create a new permissions instance without users\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foobar\")\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n\n\t// Owner that setted new board permissions is not a member of the new permissions\n\tprintln(boards2.IsMember(bid, owner))\n}\n\n// Output:\n// false\n"},{"name":"z_19_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\t// Attempt to freeze a thread on frozen board\n\tboards2.FreezeThread(bid, tid)\n}\n\n// Error:\n// board is frozen\n"},{"name":"z_19_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// Attempt to freeze a frozen thread\n\tboards2.FreezeThread(bid, tid)\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_19_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FreezeThread(bid, tid)\n\tprintln(boards2.IsThreadFrozen(bid, tid))\n}\n\n// Output:\n// true\n"},{"name":"z_1_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// true\n"},{"name":"z_1_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tuser  = std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\t// Add an admin member\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\t// Next call will be done by the admin member\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, boards2.RoleOwner)\n}\n\n// Error:\n// only owners are allowed to invite other owners\n"},{"name":"z_1_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tuser  = std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n\trole  = boards2.RoleAdmin\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\t// Add an admin member\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\t// Next call will be done by the admin member\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// true\n"},{"name":"z_1_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(0, user, boards2.Role(\"foobar\")) // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// invalid role: foobar\n"},{"name":"z_1_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\trole  = boards2.RoleOwner\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foo123\") // Operate on board DAO members\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(0, user, role)) // Operate on realm DAO\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_1_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, user, role)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n}\n\n// Error:\n// user already exists\n"},{"name":"z_1_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(0, \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", boards2.RoleGuest)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_20_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// Attempt to freeze a reply on frozen thread\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_20_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\nfunc main() {\n\t// Attempt to freeze already frozen reply\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\n// Error:\n// reply is frozen\n"},{"name":"z_20_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n}\n\nfunc main() {\n\t// reply frozen\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.FreezeReply(bid, tid, rid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeReply(bid, tid, rid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\n\t// thread frozen\n\tboards2.FreezeThread(bid, tid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeThread(bid, tid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\n\t// board frozen\n\tboards2.FreezeBoard(bid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeBoard(bid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n}\n\n// Output:\n// false\n// true\n// false\n// true\n// false\n// true\n// false\n"},{"name":"z_20_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n}\n\nfunc main() {\n\t// unfrozen thread - should work\n\tr2 := boards2.CreateReply(bid, tid, rid, \"child 1\")\n\n\t// frozen thread - can't reply\n\tboards2.FreezeReply(bid, tid, rid)\n\tboards2.CreateReply(bid, tid, r2, \"child 2\")\n}\n\n// Error:\n// reply is frozen\n"},{"name":"z_21_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"This is a test realm message\")\n\n\t// Render content must contain the message\n\tcontent := boards2.Render(\"\")\n\tprintln(strings.HasPrefix(content, \"\u003e This is a test realm message\\n\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_21_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Set an initial message so it can be cleared\n\tboards2.SetRealmNotice(\"This is a test realm message\")\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"\")\n\n\t// Render content must contain the message\n\tcontent := boards2.Render(\"\")\n\tprintln(strings.HasPrefix(content, \"\u003e This is a test realm message\\n\\n\"))\n\tprintln(strings.HasPrefix(content, \"# Boards\"))\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_21_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\t// Call realm with a user that has not permission to set realm notice\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"Foo\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_22_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(false)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// false\n"},{"name":"z_22_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.LockRealm(false)\n}\n\nfunc main() {\n\t// Should fail because realm is already locked\n\tboards2.LockRealm(false)\n}\n\n// Error:\n// realm is locked\n"},{"name":"z_22_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\t// Call realm with a user that has not permission to lock the realm\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(false)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_22_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(true)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_22_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.LockRealm(true)\n}\n\nfunc main() {\n\t// Should fail because realm is already locked\n\tboards2.LockRealm(true)\n}\n\n// Error:\n// realm and members are locked\n"},{"name":"z_22_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Lock the realm without locking realm members\n\tboards2.LockRealm(false)\n}\n\nfunc main() {\n\tboards2.LockRealm(true)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_23_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleOwner)\n\tboards2.InviteMember(bid, \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\", boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.IterateRealmMembers(0, func(u boards2.User) bool {\n\t\tprintln(u.Address, string(u.Roles[0]))\n\t\treturn false\n\t})\n}\n\n// Output:\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj owner\n// g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5 admin\n"},{"name":"z_24_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid := boards2.CreateBoard(\"test123\")\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleAdmin)\n\n\tbid = boards2.CreateBoard(\"foo123\")\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleOwner)\n\tboards2.InviteMember(bid, \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\", boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.IterateBoards(0, func(b boards2.ReadonlyBoard) bool {\n\t\tprintln(b.ID().String())\n\t\tprintln(b.Name())\n\n\t\tb.IterateMembers(0, b.MembersCount(), func(u boards2.User) bool {\n\t\t\tprintln(u.Address, string(u.Roles[0]))\n\t\t\treturn false\n\t\t})\n\t})\n}\n\n// Output:\n// 1\n// test123\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj admin\n// 2\n// foo123\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj owner\n// g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5 admin\n"},{"name":"z_2_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tpath    = \"test-board/1/2\"\n\tcomment = \"Test comment\"\n)\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\trid := boards2.CreateReply(bid, tid, 0, comment)\n\n\t// Ensure that returned ID is right\n\tprintln(rid == 2)\n\n\t// Render content must contain the reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \"+comment+\"\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_2_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateReply(404, 1, 0, \"comment\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_2_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, 404, 0, \"comment\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_2_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 404, \"comment\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_2_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Hide thread by flagging it so reply can't be submitted\n\tboards2.FlagThread(bid, tid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"Test reply\")\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_2_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply1\")\n\n\t// Hide thread by flagging it so reply of a reply can't be submitted\n\tboards2.FlagThread(bid, tid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"reply1.1\")\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_2_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"thread\", \"thread\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply1\")\n\n\t// Hide reply by flagging it so sub reply can't be submitted\n\tboards2.FlagReply(bid, tid, rid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"reply1.1\")\n}\n\n// Error:\n// replying to a hidden or frozen reply is not allowed\n"},{"name":"z_2_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"Test reply\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_2_i_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_2_j_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tpath    = \"test-board/1/2\"\n\tcomment = \"Second comment\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"First comment\")\n}\n\nfunc main() {\n\trid2 := boards2.CreateReply(bid, tid, rid, comment)\n\n\t// Ensure that returned ID is right\n\tprintln(rid2 == 3)\n\n\t// Render content must contain the sub-reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e \"+comment+\"\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_2_k_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tcomment = \"Second comment\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"Parent comment\")\n\n\t// Flag parent post so it's hidden\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"Sub comment\")\n}\n\n// Error:\n// replying to a hidden or frozen reply is not allowed\n"},{"name":"z_2_l_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// cannot reply to a frozen thread\n\tboards2.CreateReply(bid, tid, 0, \"foobar\")\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_2_m_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, strings.Repeat(\"x\", boards2.MaxReplyLength+1))\n}\n\n// Error:\n// reply is too long, maximum allowed is 300 characters\n"},{"name":"z_2_n_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"\u003e Markdown blockquote\")\n}\n\n// Error:\n// using Markdown headings, blockquotes or horizontal lines is not allowed in replies\n"},{"name":"z_3_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname    = \"foo123\"\n\tnewName = \"bar123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n\n\t// Ensure board is renamed by the default board owner\n\tbid2, _ := boards2.GetBoardIDFromName(newName)\n\tprintln(\"IDs match =\", bid == bid2)\n}\n\n// Output:\n// IDs match = true\n"},{"name":"z_3_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"\")\n}\n\n// Error:\n// board name is empty\n"},{"name":"z_3_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, name)\n}\n\n// Error:\n// board already exists\n"},{"name":"z_3_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RenameBoard(\"unexisting\", \"foo\")\n}\n\n// Error:\n// board does not exist with name: unexisting\n"},{"name":"z_3_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n}\n\n// Error:\n// addresses are not allowed as board name\n"},{"name":"z_3_f_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n\n\t// Ensure board is renamed by another board owner\n\tbid2, _ := boards2.GetBoardIDFromName(newName)\n\tprintln(\"IDs match =\", bid == bid2)\n}\n\n// Output:\n// IDs match = true\n"},{"name":"z_3_g_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tmember2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n\n\t// Invite a new member that doesn't own the user that matches the new board name\n\tboards2.InviteMember(bid, member2, boards2.RoleOwner)\n\ttesting.SetOriginCaller(member2)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_3_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"short\")\n}\n\n// Error:\n// the minimum allowed board name length is 6 characters\n"},{"name":"z_3_i_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tmember2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n\n\t// Invite a new member that doesn't own the user that matches the new board name\n\tboards2.InviteMember(bid, member2, boards2.RoleOwner)\n\ttesting.SetOriginCaller(member2)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_3_j_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"barbaz\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_4_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tnewRole = boards2.RoleOwner\n\tbid     = boards2.BoardID(0) // Operate on realm DAO instead of individual boards\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole)\n\n\t// Ensure that new role has been changed\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tnewRole = boards2.RoleAdmin\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foo123\")\n\tboards2.InviteMember(bid, member, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole)\n\n\t// Ensure that new role has been changed\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\towner2 = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tadmin  = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, owner2, boards2.RoleOwner)\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, owner2, boards2.RoleAdmin)\n}\n\n// Error:\n// admins are not allowed to remove the Owner role\n"},{"name":"z_4_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tadmin2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\tboards2.InviteMember(bid, admin2, boards2.RoleAdmin)\n\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, admin2, boards2.RoleOwner)\n}\n\n// Error:\n// admins are not allowed to promote members to Owner\n"},{"name":"z_4_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid     = boards2.BoardID(0)                                      // Operate on realm DAO members instead of individual boards\n\tnewRole = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole) // Owner can promote other members to Owner\n\n\t// Ensure that new role has been changed to owner\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, admin, boards2.Role(\"foo\"))\n}\n\n// Error:\n// invalid role: foo\n"},{"name":"z_4_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, \"invalid address\", boards2.RoleModerator)\n}\n\n// Error:\n// invalid member address\n"},{"name":"z_4_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(0, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleGuest)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_5_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, user, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.RemoveMember(bid, user)\n\n\t// Check that user is not a member\n\tprintln(boards2.IsMember(bid, user))\n}\n\n// Output:\n// false\n"},{"name":"z_5_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RemoveMember(0, \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\") // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_5_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RemoveMember(0, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// member not found\n"},{"name":"z_6_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\trole   = boards2.RoleGuest\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, member, role)\n}\n\nfunc main() {\n\tprintln(boards2.HasMemberRole(bid, member, role))\n\tprintln(boards2.HasMemberRole(bid, member, \"invalid\"))\n\tprintln(boards2.IsMember(bid, member))\n}\n\n// Output:\n// true\n// false\n// true\n"},{"name":"z_6_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleGuest\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tprintln(boards2.HasMemberRole(bid, user, role))\n\tprintln(boards2.IsMember(bid, user))\n}\n\n// Output:\n// false\n// false\n"},{"name":"z_7_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"test123\"\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(name)\n}\n\nfunc main() {\n\tbid2, found := boards2.GetBoardIDFromName(name)\n\tprintln(found)\n\tprintln(bid2 == bid)\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_7_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tbid, found := boards2.GetBoardIDFromName(\"foobar\")\n\tprintln(found)\n\tprintln(bid == 0)\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_8_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\ttid := boards2.CreateThread(bid, title, body)\n\n\t// Ensure that returned ID is right\n\tprintln(tid == 1)\n\n\t// Thread should not be frozen by default\n\tprintln(boards2.IsThreadFrozen(bid, tid))\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// false\n// true\n// true\n"},{"name":"z_8_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateThread(404, \"Foo\", \"bar\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_8_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_8_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"\", \"bar\")\n}\n\n// Error:\n// title is empty\n"},{"name":"z_8_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_9_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, title, body)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n\n\t// Ensure thread doesn't exist\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread does not exist with ID: 1\n"},{"name":"z_9_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.DeleteThread(404, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_9_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, 404)\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_9_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Call using a user that has not permission to delete threads\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_9_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to delete threads\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(member)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n\n\t// Ensure thread doesn't exist\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread does not exist with ID: 1\n"}]},"deposit":""}],"fee":{"gas_wanted":"90000000","gas_fee":"900000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"U2iKoHGW6K7bep8UtLBr97zzq/LMSZH7rS2n3lwDYEYf+3lmLs82V256UquOYW8bqvniG3wQopQl2FhYarGSCA=="}],"memo":""},"metadata":{"timestamp":"1743761702"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"RemoveMember","args":["0","g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"3yQ9Uzcug0E/gUI15Ebz6SpmQpMnj+6lf5K3fKPcDvCVrg6yeVepgeK7maTHsm57883RG/9+j5AU0C3RRd8ICg=="}],"memo":""},"metadata":{"timestamp":"1743761807"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["EmptyWithManyMembers"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"PxJx3iE6e2NocMnVTOy4bq7MiK0YVDlIefLAFm9ytsrBRFtruHjDDRQeIoBVJNCmf72D0kRRVii3naZz94OrBQ=="}],"memo":""},"metadata":{"timestamp":"1743761888"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","owner"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"aWHYIIEcmAv3uSgt9ECrBv6Q/z9dZ8u8fWFbYVjqhfO8ELEnn73KcwZlmA43SSclJVlRiVN/TghMf7hCaHb/BA=="}],"memo":""},"metadata":{"timestamp":"1743761893"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1e5hud66rs7ye4zgeqmqvwfhurs2mnf408hdqcl","owner"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"aj9gw0cR3xQIe1cBU2JEMPQyK0ft7NWyAgq4kanFCI2b79JmmEGo45VMfscffxmfJUuzNgeJTnsxOwRupQ4ZAA=="}],"memo":""},"metadata":{"timestamp":"1743761898"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5","admin"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"JF8sEBvqo4OCT8APgZXc/GxPzX+Ij2UJMj+YxTgesHsa1W6sTG8Q4RkshZK15LT99mse4pb9GtGjgG0i33E/Bw=="}],"memo":""},"metadata":{"timestamp":"1743761903"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk","moderator"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"0rEX/wEVQfzwTCwrwK9aV4B7qRiIeB88uq4PFCiemlGg4qf2NMspIUhcynlqzqSU6Y/0+OMxzq3bZJSyoqmHDQ=="}],"memo":""},"metadata":{"timestamp":"1743761908"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1ym6zxff3xq7wfldcs3uyu7x7z40gstggcx8zdj","moderator"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"GO3MGKbeMgas+NtO+OTUGo2VNt9tv9pfQ48SzKyOMmRUOFk96b0E7yc0L1hLfHhlmIry1TN67/W2hw9wpJ81AA=="}],"memo":""},"metadata":{"timestamp":"1743761913"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["TheNumber42"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"muDrsNLE7kZGItSiBNy3vYoe7tyGAyWIfoDYcx4uIIPx+UgjgcJizyiPS6aqEsXrxpyak0+WJ3jUj1HuKARgDQ=="}],"memo":""},"metadata":{"timestamp":"1743761918"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kuCtWj1TUpFzucoJ8iAhcnx9Kmvr629VZ2v3JFLL9O/GX4U97k2O0jpn4usPHV3W6RvsRihX+bXQSZHyYYkNDw=="}],"memo":""},"metadata":{"timestamp":"1743761918"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["2","What's your take on it\\?","Seen in many places, unknown to many"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"3Q6yjDFalubJjr79zO/5N6efvvBVaAoDzu7QlcDORuipWi+9MNQ8cUPGnsT4faRiGwrvvQAMl17xIOoR11VTAg=="}],"memo":""},"metadata":{"timestamp":"1743761923"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["2","1","0","What do you mean\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"i+Zfx47nUWx4qGnftxJrLOpKME3B4VXvHWdLc/pO0HXd3ims6sTH/NHt8E/t1qUlPA8ndK1lgg7Qo8+v0fpyCQ=="}],"memo":""},"metadata":{"timestamp":"1743761928"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["2","1","0","よんじゅうに\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Rup+YIfuQpIu3I3VGXx97u6EZtXZ1yyiEtAcXegacsnu4WB3YnXEIzJauCcw2Edx5Ym3lo/BqVJrwVpoqDigAA=="}],"memo":""},"metadata":{"timestamp":"1743761933"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["2","1","2","Cuarenta y dos\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"5VJ9Q10yIK4j0vvm4fcCgbmem6rUzOaXZA8hkKKYNUQJ5tur+8ClyPSpUn70XEYhfe2RSREvwHSplt0SehAaBg=="}],"memo":""},"metadata":{"timestamp":"1743761938"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["ThreadsExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"I6ZlzBsGf1qOsfnBjwHKJyar1cuDCh+N/VDvsHBVQbqQvMdpJvotHS4oJSzI0267kSV0P3aj0eRhg24/HqSeBA=="}],"memo":""},"metadata":{"timestamp":"1743761943"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Seventh","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"lEnbWEYdUoTq+RPp8RRG0VACcZR6gvelM5uVdzRaiT4x1JcrKelclMGFyC7f1dByoxPx4wYVhDjiA5PERnAtAQ=="}],"memo":""},"metadata":{"timestamp":"1743761948"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Sixth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"N6G8Nonx6w/paVsrfnTLs/BsUN/GJ3iKTbf9YbmLq4/WiHTLsSnSq9XmM3geonSJvM+uvmR/ygD0Roj1Lq3PBw=="}],"memo":""},"metadata":{"timestamp":"1743761953"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kuCtWj1TUpFzucoJ8iAhcnx9Kmvr629VZ2v3JFLL9O/GX4U97k2O0jpn4usPHV3W6RvsRihX+bXQSZHyYYkNDw=="}],"memo":""},"metadata":{"timestamp":"1743761953"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Fifth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"zKIVafDZwKsorlEQcB5gH3Cfxa6RSRyNmrJ6lrLiVASJsm1PEOQX1rAmeq0xECiyzlywQi2QosQ6SOXRpGcKAQ=="}],"memo":""},"metadata":{"timestamp":"1743761958"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Fourth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"2NjemoRCvFjqMm1EqLenIWuaNEP3dGb4dF31urjXy2Z9inS0g/pQNWkU+rTMGVWtqgn9vpL8hW0yZT6VhZL8BQ=="}],"memo":""},"metadata":{"timestamp":"1743761963"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Third","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"lnuXkGx9zXZqVCGfzQQOiQTynjx+lYkydTRxqoHw7s9XA7jIOCfjVFk63sr66TxRNUrGRHKxpcEzUB2vSE3RDQ=="}],"memo":""},"metadata":{"timestamp":"1743761968"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Second","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"vi5VQFW7xYjrl0jtUMwtWwJEVTW1Bcbimgwz2mU/s91fZWJwYdK/lg0LEcO9TdQCPV8EWvsS3DGNpjNfNu/kBA=="}],"memo":""},"metadata":{"timestamp":"1743761973"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","First with many Replies","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"IvThbQ7fDNCuxPjXCB4aUngctbAz8wI4qZ1Y2p9cGp6315zr8tXylNS+n9V/xnYztqYBOO0acV8NTLAjtr6dCQ=="}],"memo":""},"metadata":{"timestamp":"1743761978"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","First"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"yH3slx61rIFtSsDZKTHeIYYn+mL4n+xiht985eukgKk2POWaKf5BGdBULgkJ21kbnsV65vPJIsgYejbQ/9GjCg=="}],"memo":""},"metadata":{"timestamp":"1743761983"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","8","Sub First"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"R0nUwVIAQ59kP/sZjQ3/xgCXzeo5hbSwLMPz4g4s6pBX9KW3/0vAi9kzz+swwp7END9IC6apNlYC303ZEVuyAA=="}],"memo":""},"metadata":{"timestamp":"1743761988"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Second"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"GG4QHf1tSirS6I9cDjng1Xir1Ql+q4x93bm9kODUL6KEanKmD84gKh5/YVMstRkHPp60Et1UsFHC9J6knxI3AQ=="}],"memo":""},"metadata":{"timestamp":"1743761993"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Third"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"voI0taAnzfanaNNKskt12IivTt4qWbCuWtHXV5huhAOOp7B+K4OPQsIHg7+LwAQeTmWXPyrNdB60OX1BjR1KDg=="}],"memo":""},"metadata":{"timestamp":"1743761998"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Fourth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"aTmh1rKQmbiIfSmfSP8ylV9vBoPqZYV9T0aYgwPB/eFEK7rvZ1eW5+3QP5f8Edrgl4B2kf5WwnA3Fhqu5qc8BQ=="}],"memo":""},"metadata":{"timestamp":"1743762003"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Fifth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"rjiWLoD5Mg1Ulv9b3s299jm2HcmJfoKDeg7WQzgKccmyQ8BQUHBbHEYVar+6wSdjl09RpP/F+CnOUP9JN6gVDQ=="}],"memo":""},"metadata":{"timestamp":"1743762008"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Sixth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"TDO4Ji9JE1mdyomiVRL6Nc2Z22xABNA2xy/Gvi2DaF3Q8Ur56106k7DWgAwKkYnWJO2DjPQH0mry3Dn3K5ygDg=="}],"memo":""},"metadata":{"timestamp":"1743762013"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Seventh"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ID/GjdOyQf3DL8tOLPKgRDkmlxK/VNPej1HGPrmDL2XXqSP8VLHWuE8fhmk6yI8FFMrC5TsRBbIVbmmAhARmDA=="}],"memo":""},"metadata":{"timestamp":"1743762018"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Eigth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xg3AUWGaisRcJwnAGHz6JA0Eb+muoI4YznApNB1ZOcqj/ZKbYwk7LJ/f7aJ9QBUO9YMwCkBRwNr/NBGFPzW9Cg=="}],"memo":""},"metadata":{"timestamp":"1743762023"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Ninth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Z28hKxhoyOqbhWsNCkPreWiq0BgyCxB9AxqfTFLKVKYra+RfANNuljqFuCzVhElqDhkP/RlrBl7TfV5Q2AuBBQ=="}],"memo":""},"metadata":{"timestamp":"1743762028"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Tenth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ujgja3YG7j2hRcob5WWrlBZxfAJzr+TicEeQhHLbr7Xa4cQkxHbWI0DTvEKUqV8RYU52xI20s4p6gt0+D2zZCw=="}],"memo":""},"metadata":{"timestamp":"1743762033"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Eleventh"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"AHZ+TfFaMfccMtF4jX+U8Ruq2zNMVI1RyekXJ0KQ91Y0tkqRK8yn4lvv7Vb+AvDVDkAO3MqO9TfVXr28vGHuBg=="}],"memo":""},"metadata":{"timestamp":"1743762039"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["ReadOnlyExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"/KLIc34sqQrmajzkcFfDjtqgtdjiuGAPgO+qrfJd+WIhzN7gkixqzUSXPj3wZDiKikBqc+T+Wb5tp65m6bK9BA=="}],"memo":""},"metadata":{"timestamp":"1743762044"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["4","Example Thread","This thread shouldn't be writable"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"NXhPiUeq9YcNnkudvz745FgxJsebQ01odghXhRQbQGU40Q83p02OzzOJ3VVKV0yhuBxON7Y181/zxZOiTi4MDQ=="}],"memo":""},"metadata":{"timestamp":"1743762049"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"FreezeBoard","args":["4"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"wd/5jD5gLOF9jEvpFuTKkuln4fbytMqJzZPYN4LOiZY/xVrhM8T3QCr7/d6s8uAr2WxqxBiSGh0yZIp2wQ6UBg=="}],"memo":""},"metadata":{"timestamp":"1743762054"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["RepostExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"5TRSh5UmPK8KI/+8sTSI5upXLvb8LXP4YGLzMaJC5Bu69gu5ZIj+SEBez22Ek25bpVLkqHHtqhpmU5QMvIYuAQ=="}],"memo":""},"metadata":{"timestamp":"1743762059"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kuCtWj1TUpFzucoJ8iAhcnx9Kmvr629VZ2v3JFLL9O/GX4U97k2O0jpn4usPHV3W6RvsRihX+bXQSZHyYYkNDw=="}],"memo":""},"metadata":{"timestamp":"1743762059"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateRepost","args":["2","1","Custom repost title","Custom repost body","5"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"JPJZiP3S/FhZUnPZXP93PAzHt4GpBQ4kAopWnRstMp7D3rye1kMdx+qyKaxGGbiAwI+YKrKK12gud8NAJnRbDw=="}],"memo":""},"metadata":{"timestamp":"1743762064"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"SetRealmNotice","args":["A new [version](https://gno.land/r/devx000/gnoland/boards2/v1rc2) is available which fixes a couple of issues and explores a UI which is is more in line with classic Reddit"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"rAsbllvRLrYeD2MhA3PT5+8yfYQ96MY6bt087UKt4uMH5pknjSYHqygG1h9GRtVUuYDZzvwtrgfgw52OvXGKCA=="}],"memo":""},"metadata":{"timestamp":"1743762325"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"SetRealmNotice","args":["A new boards [version](https://gno.land/r/devx000/gnoland/boards2/v1rc2) is available which fixes a couple of issues and explores a UI which is is more in line with classic Reddit"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Ppe3T0NpwmRcYGu73lTjp9yQAmB8G032mX/yTIeOOqn3nJcP9WKCR1OSznIw1PFoYXea1fMEyrgibY17UVavBQ=="}],"memo":""},"metadata":{"timestamp":"1743762441"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"SetRealmNotice","args":["A new boards [version](https://gno.land/r/devx000/gnoland/boards2/v1rc2) is available which fixes a couple of issues and explores a UI which is more in line with classic Reddit"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"QcTtCygzcmmMQ9oCvrxZEO7KVS2rVwjaJvkFvVlJD1f1gHMe6QHWWnh7rqigtGEFROrHKE9X5SXfsKsR2xJ+Cw=="}],"memo":""},"metadata":{"timestamp":"1743762466"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15dz69sch7fkhc9gk57hpe4qea77thmy20apu9x","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Hp9yyz8tbzWiTA9XmiOMfxdRnhtTNFymcsAoxCj3svu85ZXXa9C48RsdAa1OcVmVYAlVaOKa00F5qrqHJ4NgDQ=="}],"memo":""},"metadata":{"timestamp":"1743762511"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1743762858"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1743762953"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1aykqe5ddemku5mwd3elmwtpj8jgss47xrqpag4","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"5W8pvzVVTwqR0USett9a5LYheSuuFicEmPt++BwXxXEqHWgVQtCQkClsJbLdf5hw1cSGg5h7KW1GVrL6b466DA=="}],"memo":""},"metadata":{"timestamp":"1743767985"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1dtuj65mgja87gh0c45pd3rt4cah0kkw9lzld4y","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"gVIdQBBxy3FqNuvip5XH1L48VyKevaNiPaa4nYyyW/3tDm1f82uOznciajCfJAe8rw2wSRB2W3UAg/Ds/RWPBw=="}],"memo":""},"metadata":{"timestamp":"1743768151"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1743769312"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1manfred47kzduec920z88wfr64ylksmdcedlf5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["test-manfred"]}],"fee":{"gas_wanted":"50000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"zIEkKLWS6zeUOjqJGwRvhP+ncHZYYHC7ps9USK+aWU+LXhRXgKvDSdSfbaaDc48kNeXPDc/sU23o4ZFIYPpBBg=="}],"memo":""},"metadata":{"timestamp":"1743774399"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1manfred47kzduec920z88wfr64ylksmdcedlf5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["6","testing testing","👋"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"sJcvKDbrNWnVo0ozE9r4AvUR3bVGhn4t4OrM/H+7gJ2YwBmQ20u56JUG1AeZl/WSdrlLl8pjTBZZskyT49+NAA=="}],"memo":""},"metadata":{"timestamp":"1743774450"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1etcvlu8zyuwnd7w0x0lcu4g2r7yzllyy62gpa5","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"9104212","gas_fee":"4742446ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"hUM8x4T6MQUzpf04aCJ2OtaF5uHBhNuulFwBKJZfLhNCs/3Wm7rCO5wuHUd+iFscgXk6dvnG8G4l7AFSQNqlBA=="}],"memo":""},"metadata":{"timestamp":"1743775038"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bXyHJdtgDmBHTgSUfcLbWb8QmJPrI9s457gJW1yahUnysV2CEJKBbj3TjSy91WEnIgxMWq21Ki9usgKlfzU4Cg=="}],"memo":""},"metadata":{"timestamp":"1743775997"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bXyHJdtgDmBHTgSUfcLbWb8QmJPrI9s457gJW1yahUnysV2CEJKBbj3TjSy91WEnIgxMWq21Ki9usgKlfzU4Cg=="}],"memo":""},"metadata":{"timestamp":"1743776002"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bXyHJdtgDmBHTgSUfcLbWb8QmJPrI9s457gJW1yahUnysV2CEJKBbj3TjSy91WEnIgxMWq21Ki9usgKlfzU4Cg=="}],"memo":""},"metadata":{"timestamp":"1743776017"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"UpdateStatus","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ub3uoxEExL3jMuQoAegvKmDOW1LWrOercf9BdWQkTdVih3mPoIH/7NqWsOjm/+gIgkLa0kYuSbQBsPfadlwYCQ=="}],"memo":""},"metadata":{"timestamp":"1743776022"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bXyHJdtgDmBHTgSUfcLbWb8QmJPrI9s457gJW1yahUnysV2CEJKBbj3TjSy91WEnIgxMWq21Ki9usgKlfzU4Cg=="}],"memo":""},"metadata":{"timestamp":"1743776027"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1743776083"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"name":"hello","path":"gno.land/r/test12/hello","files":[{"name":"package.gno","body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/eco","func":"Render","args":["Deployed through play.gno.land"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ot/V8bS6JNMgzRPR5JTnCh1C/IrUSVBplj9YxTkdum9+xncnn+Bz1wkK83vV5pnwz3yQG7k5wmzwegSGsvvkAw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743788578"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"name":"hworld","path":"gno.land/r/g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5/hworld","files":[{"name":"package.gno","body":"package hworld\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/sys/users","func":"ResolveName","args":["abc"]}],"fee":{"gas_wanted":"3428737","gas_fee":"7144ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"p1kO3fql5GXI69qID2B2pfmvydiypFq+4IIC0iUvpenfZH36w/ccxUKizKYfxh/egfg1Tl/EOVOwwixdPLi8Aw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743793364"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g150gdvn780ws7a3s9qpdvv7h4d9hq6vh672ely0","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"DxumKZ8V42aBbpxBQMjTnP7r0pdLPXmD1ThtvXJj2H14j1jd6gFr9fGXDjlSeuh4U8VqPKskC3uL+3nCsvjtCw=="}],"memo":""},"metadata":{"timestamp":"1743859813"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g150gdvn780ws7a3s9qpdvv7h4d9hq6vh672ely0","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"DxumKZ8V42aBbpxBQMjTnP7r0pdLPXmD1ThtvXJj2H14j1jd6gFr9fGXDjlSeuh4U8VqPKskC3uL+3nCsvjtCw=="}],"memo":""},"metadata":{"timestamp":"1743937361"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":["FirstCatPost"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"6zChAbF3Z6OpdHfgdhMy1W2NSeLFMGXf2/5HpraFAN1q0lmpbE5t5QBMk72Bhe8tO50XW42X17Fk+A+CguXBBQ=="}],"memo":""},"metadata":{"timestamp":"1744009485"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateThread","args":["8","First cat post on boards2!","Katt Williams is an American stand-up comedian and actor. https://en.wikipedia.org/wiki/Katt_Williams"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"nYLnj0q+Y9u5pj2j1qttYx5hK3UmYqWXAfh2PB3HFVcQosvaiRpEOitMnre/aoSJ8BIh1jH9CxYn1zAdhpYXAQ=="}],"memo":""},"metadata":{"timestamp":"1744009736"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["FirstCatPost"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bi+q7rOHbU6AAvDLV3R+eHbwwSNAcMxWGDOGf3neUylsgbVeCpdkKSKPxNOfvz9jCDH+ZhTffYO8DOvRn2CYAQ=="}],"memo":""},"metadata":{"timestamp":"1744009852"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["7","First cat post on boards2!","Katt Williams is an American stand-up comedian and actor. https://en.wikipedia.org/wiki/Katt_Williams"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"AOMDntLfkB4kP8rjoGLw15cDTc6mnwbz8xRXkJk1avZt35hoxynSbYXUwKv1D3CkvoEs8LIPbY7h0uEAgSNbDw=="}],"memo":""},"metadata":{"timestamp":"1744009907"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14n0zsnsk054uxwvnwmmqyrq6e87ynk5vq98qqp","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"gsOW2ax3szJeuurBkA9J/TM0XCaIyS47k/7kUvk9Gq2twiDVroCszGaw53FJD6FJ/FahqTRyzb656P4MLOX3AA=="}],"memo":""},"metadata":{"timestamp":"1743587748"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1dzzx5qwcmawqnhhd76ehkteas5v2dg42hqnd7g","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Fr1uKtG5S6/mDBxNS42Sbmz6AKHqveVyX1PLz0uXJgJ5Hve4XJgukjDM0/0TnrI5OGTpoqoIZ9evnvmx+MebCQ=="}],"memo":""},"metadata":{"timestamp":"1743587759"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kkS7eUe5RBU5tMINWW4NnKVZ/BXSBErtWniDmponcU3J6oxY6D2p17Zv9ZJeJk+oNmzWhpbIQ0hZ3A7G0pGICQ=="}],"memo":""},"metadata":{"timestamp":"1743587914"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kkS7eUe5RBU5tMINWW4NnKVZ/BXSBErtWniDmponcU3J6oxY6D2p17Zv9ZJeJk+oNmzWhpbIQ0hZ3A7G0pGICQ=="}],"memo":""},"metadata":{"timestamp":"1743587924"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kkS7eUe5RBU5tMINWW4NnKVZ/BXSBErtWniDmponcU3J6oxY6D2p17Zv9ZJeJk+oNmzWhpbIQ0hZ3A7G0pGICQ=="}],"memo":""},"metadata":{"timestamp":"1743587939"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xnrpwODqB9Qzy8lCyG8WhKFujPPtqnByd405Ea6SUtiep7uJyoEzw3D5R8NoasWmRQmXOiceh8x/ETIMAYwOAA=="}],"memo":""},"metadata":{"timestamp":"1743587980"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xnrpwODqB9Qzy8lCyG8WhKFujPPtqnByd405Ea6SUtiep7uJyoEzw3D5R8NoasWmRQmXOiceh8x/ETIMAYwOAA=="}],"memo":""},"metadata":{"timestamp":"1743588120"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kkS7eUe5RBU5tMINWW4NnKVZ/BXSBErtWniDmponcU3J6oxY6D2p17Zv9ZJeJk+oNmzWhpbIQ0hZ3A7G0pGICQ=="}],"memo":""},"metadata":{"timestamp":"1743588221"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xnrpwODqB9Qzy8lCyG8WhKFujPPtqnByd405Ea6SUtiep7uJyoEzw3D5R8NoasWmRQmXOiceh8x/ETIMAYwOAA=="}],"memo":""},"metadata":{"timestamp":"1743591981"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xnrpwODqB9Qzy8lCyG8WhKFujPPtqnByd405Ea6SUtiep7uJyoEzw3D5R8NoasWmRQmXOiceh8x/ETIMAYwOAA=="}],"memo":""},"metadata":{"timestamp":"1743591991"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"rcFAWr1sDO8na64+BQFNqCOiCOQiLSNI1QUKX2m0F1heLU/NOUKhKmbQ9fosCuEhsWELsdUBUaKJH5f4d+jHDg=="}],"memo":""},"metadata":{"timestamp":"1743597359"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2231690ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ocvr/JPKso//ytHIrkTURPWCS1jVsSnm4WrvMUCH9rDe7gyJPgsg6i95QyuqUNFpeiCf57nGq8BjbfufmFF4DA=="}],"memo":""},"metadata":{"timestamp":"1743597379"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"887428","gas_fee":"165039ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"L2sWfo8q5QmVPdiTdVZiTSjulJahNRAZCKd6DLAg/8pbYY259P+yH2fAdYiZ4+4FtnEk9Htv9+oBoeX38V12Bg=="}],"memo":""},"metadata":{"timestamp":"1743597384"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["42"]}],"fee":{"gas_wanted":"3059175","gas_fee":"6374ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"XZzhqFjZxRo0L9GenZ5HAPgE0BnjTFi028j4Ok74B5XgPaMXlj5pTpgCQWY31G6/AxtCeYMT0sNH+VxUKzfXCw=="}],"memo":""},"metadata":{"timestamp":"1743597409"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"KhhBvAFXQEh6n4ZUWU+dnMi3kozbMu32L+QF07g35SLWwHKNCpj5M9hzJDx2HMEqfe+jIyYKyqwolPi8AaJwCw=="}],"memo":""},"metadata":{"timestamp":"1743606306"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"vh0tJl7xCAhje36H2bE94wqsr/n3B/RAQNJeR4OS90NwvQCzZotPzdkhdQVbLdiNPbOdmbxRkK6FjDVIn8acCA=="}],"memo":""},"metadata":{"timestamp":"1743606668"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"/YN3AgTMVWUUwDs3P+vqnXxl4gUlKHwQqdLr1tzzDo0dIETPpbUbzXklVQJVB16dItO2GP4GB35BwBM0BINMDA=="}],"memo":""},"metadata":{"timestamp":"1743607723"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"SQ7dS02SL70+F6zE5E4Sk1vDb8zJQw7V84SkilcWmNMV32mOjy+wVf1xPbDjEbX84XGOhWRknf5/430X6ZU/Bg=="}],"memo":""},"metadata":{"timestamp":"1743608020"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"RwuWiR8W+j5QqToOUOoA4H3ysiUt5ToL3aFD9HMxWS/iEFGNd60d47YOUTxNNkY/P51813vWT/6CgHosxP4iDw=="}],"memo":""},"metadata":{"timestamp":"1743608226"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\n","admin"]}],"fee":{"gas_wanted":"8066534","gas_fee":"16806ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"1YOcGA+gTIMMHhGCPpndDSZKZZaCojfs0d7QiVAb7weQIk4QRJwOAtI2TqwzK8A65q+fWPqMm4kGIgTtBO/cDw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743608291"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"8967781","gas_fee":"18683ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"k6ifImJGjzHjrw5OxnlFED4lGN13DI/LiA9zW1SBYewS3fnwEyLx2wUQfgqdVlMZBQ6C8D9HCsByGQo9jSLYBQ=="}],"memo":""},"metadata":{"timestamp":"1743608301"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15dz69sch7fkhc9gk57hpe4qea77thmy20apu9x","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Hp9yyz8tbzWiTA9XmiOMfxdRnhtTNFymcsAoxCj3svu85ZXXa9C48RsdAa1OcVmVYAlVaOKa00F5qrqHJ4NgDQ=="}],"memo":""},"metadata":{"timestamp":"1743610126"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"DeleteTodo","args":["0"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"RFOIErW3yMP8ByuGPAnoOpUod4ulfP/QlVKtCKL4zDMh9H8mkcCi/y2UKm0enLlXmheSq/FHMiKbvuGeJWFXCQ=="}],"memo":""},"metadata":{"timestamp":"1743611628"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g14gvmle0a5hln0ct7wv857gucr7lmeust35736r","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"+rlC9mhE1bERSiDZ2YvktDxug3Mc9wtJReSHk+MTLi0jqjVTzTvI5pVqJzBO0KSImDbnBNWH0LZe38Sc9frGAQ=="}],"memo":""},"metadata":{"timestamp":"1743662226"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"gZlILkg4UOwV0qKQo2Id40lq46Ljw5DqPd7b1vYElGti3wOxxkEdO1i3YGJ1yv1WzL9ieLQ49xMVJ7qz3Ei8Cg=="}],"memo":""},"metadata":{"timestamp":"1743663236"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","send":"","pkg_path":"gno.land/r/demo/foo721","func":"BalanceOf","args":["g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"FocyEa3/BEh0f/BXj/1c7nfB6Vi071PklsMa8xqnRb+Ox/s8f3p2A3ZtpuYM/kCF/+BPBYQusAZOHfCioLhbBw=="}],"memo":""},"metadata":{"timestamp":"1743663533"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","send":"","pkg_path":"gno.land/r/demo/foo721","func":"BalanceOf","args":["g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj"]}],"fee":{"gas_wanted":"10000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ggFsr+PEH6suxXVxIY1hqEqRekl7hs8flF7ZTb7lCdSFqXo3/xE6aD8eNaEKy5o+MnvwHyRDXfybKZPWCDxABg=="}],"memo":""},"metadata":{"timestamp":"1743663709"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"VS+OtfNCE8oKNuNMlwWMfniOkuJr1QLr6+PplUe5bgNW8j7pGOt7OiO6iEYFhYRMOHEy8iYg5QYy68qfWc76BA=="}],"memo":""},"metadata":{"timestamp":"1743666971"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["42"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2233340ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"/6BW+YwJnX34zp8n5IsfJp1x9Ektt4uUpEJzYgj1AMiIHED4K+zPCOd8Lf68kCIYvoVVYoen+SBR0AbEFTsnDQ=="}],"memo":""},"metadata":{"timestamp":"1743666986"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["keyboard_worrier"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"dx08R8/b7RvesdrpJ6NriCsfFxceLl7SsKZ7nW/apu6BoC7syqV4PcR55AcdpE4Brr6RqVv4VkgF/G1KPbRgBA=="}],"memo":""},"metadata":{"timestamp":"1743672162"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743674585"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743675500"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676274"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676415"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676425"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676440"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676450"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676465"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","send":"","pkg_path":"gno.land/r/demo/userbook","func":"SignUp","args":null}],"fee":{"gas_wanted":"3000000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"b6ObPuETfc7XCJNEMllymwQMJSpPECA7YG3zpgVRo6f77xW1dUyLMx2kawbcJJxjZqXQ068cfBW96s1+S1kRBw=="}],"memo":""},"metadata":{"timestamp":"1743676600"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"RemoveMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\n"]}],"fee":{"gas_wanted":"7891622","gas_fee":"16441ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"89l+iGtobou/e+F/iiifDiQhNHbij0ij+5Ya3ziCacKLcGIlyTx1luTSgS6iPDKeh09cVbi6abEeN5kUm5YUAQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743677621"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","admin"]}],"fee":{"gas_wanted":"8066714","gas_fee":"16806ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"LcaSje7J3JjSKApJB+1EUE6tala9gr9Sq6BIUc+VqChPm0QcGhgR9W5ErCghvSKzGSP6M//zbXqTUGz0ejp+AA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743677721"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"887404","gas_fee":"1849ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"0WqDLPs6a/WA9hXWYVTP+x9TffQ4HbxoY/4ecDysE3Rp9HlXurepSylz4pqFcL0B/BOY885KLvF70bhsM1veAg=="}],"memo":""},"metadata":{"timestamp":"1743677742"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["hello !"]}],"fee":{"gas_wanted":"887311","gas_fee":"1849ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"HbQPKoyJhk/D9pzUPjl7/Z6WSeszhbMmucUwdHYB0/aZCEZ0atxLOoaF4ZUWlaVlMIlBKD/l+/1sRnX6N9GRBA=="}],"memo":""},"metadata":{"timestamp":"1743677757"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"OSUd1L/RiFhkxA3PW+7ADa1mygPaPbouzWwlOL949dJSBnV2hIBh57uz37wAxxBghvtS8LhSnLZ+riJwyBLXCg=="}],"memo":""},"metadata":{"timestamp":"1743680159"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"ChangeMemberRole","args":["0","g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"OMuLXy3HO9JO/FO5LMoSRcr9sojwnppOxU8yXqUWK1xGfftIlomdBUNyxMe78GQRE9J67Iw1EgySadzxatvwDg=="}],"memo":""},"metadata":{"timestamp":"1743680391"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/leon/hof","func":"Upvote","args":["gno.land%2Fr%2Fursulovic%2Fhome"]}],"fee":{"gas_wanted":"12000000","gas_fee":"1721880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"X/eJPJL8ZV8bQZLTk7PadUV+DemIEj/2JLxSv1Y5iosIf2YTwrcxDgidOMfkqyUxQTFmHo/aYr1WQAVPbh/kCw=="}],"memo":""},"metadata":{"timestamp":"1743682979"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1d2hvkqhqckhzpaum09c002fesdw89qrcg9zqws","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ReZNIs5Bl66EsrE8h8FAxIdTKLQTT3JLhrtrMX1xvE0SdiyZ6kXOqG0tInvf/5XZlaoDQ5NazQIPDp5AljTEAw=="}],"memo":""},"metadata":{"timestamp":"1743683221"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1lrsrj4auaffjk538w3x2c9gzyth2m0n39zcg6d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"AKXPlpnjspmHDpF+EQEoze/h/1Dw8Vf43t5GzNgg1Yta3kMRIc06TxltwYPRuJYQRbro5iLt8dh572vXMvChDA=="}],"memo":""},"metadata":{"timestamp":"1743704885"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["2","1","1","Hey hey hey"]}],"fee":{"gas_wanted":"60000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"epppoxiBBFm5IjbU64qXJewGo/7oLGKO0VJsduVtOJYhqNcJSWezt1izHysK6CqGG7DxS2N0SqXR31NNQK8VAw=="}],"memo":""},"metadata":{"timestamp":"1743711043"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["aeddi"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"dXUiTfFR460T8IopbpjSaK+P/nicuQjLa2LAeldy3Rcm65g9P4BnnZ6k0lWXUNaAMsWH7BvQNH3oFdu/YF2nCA=="}],"memo":""},"metadata":{"timestamp":"1743711163"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g16znvp6wxupkkds8mmmtxhvmdly08xpa4rqagp3","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"k1kPHgJM5ggOKZcD9HavykmLc/dkrGogJ2/JBROmxPbT2e6drMzTk2z8OCHjxyjze2/ubWCbvnPCWxr29ZCzBA=="}],"memo":""},"metadata":{"timestamp":"1743712058"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["3","This is a test","Hello World"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"RANRlJvwsfsnr5pkPb5EdNIGFSxl7v207n0pAGgI4Zhqws32Gzv92BzizFTsaQT41XoGZVH6ljWfrLf1bDcxDQ=="}],"memo":""},"metadata":{"timestamp":"1743712737"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"1648310ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"eKVgBjNuPm+xht6YH/l5tXH71McvdcgSAPjlHJL5noOfVFMIE/Mbs7pP0pXECIqQ5QNouD12V/EAT81eN1/yDQ=="}],"memo":""},"metadata":{"timestamp":"1743715914"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"+AnQgsjqwBa57nMiYLJQCgFzuDDAVhkt5x/rVFAqSsshwUs09yf3ksUe+z6zmw5Wi9GaGolmc5WelUD+fIAfDQ=="}],"memo":""},"metadata":{"timestamp":"1743738197"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["1","1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"+TtfHUdK8eOn61UU0S11TklKxw+opiesLW6peiVOPMqVUfm2io3Bb8M745B64R9w7/Wa5gIjwFsK3NBwCFCcDw=="}],"memo":""},"metadata":{"timestamp":"1743738288"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"DeletePost","args":["1","2","2"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"TyJBvACuE8gHyNed5jeU2OGyhr+/0knJHIWBJmSCoY2Bk+O7O5BHus2ZqT2EKJVm6UwbFu1jtjMTJhkTy9TfBw=="}],"memo":""},"metadata":{"timestamp":"1743738333"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/leon/hof","func":"Upvote","args":["gno.land%2Fr%2Fursulovic%2Fhome"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"7w85qlNpnp4p/g8ld6Cg3B1tNTKr/jEbkmOkjkZGO19A56uN/1qTbsgdnIkLD+dIKW8LlP5b9/89tr8c1PZ1Ag=="}],"memo":""},"metadata":{"timestamp":"1743738469"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["1","2"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"tVowNVrP7Rk8tQ2rKYAkIhhXBOeKDV9XBo0/1HE4zX9ZcsBE+a7nKjqIxofQV6cUbRGE4x8P9A29Ks5KjpH6Bg=="}],"memo":""},"metadata":{"timestamp":"1743738680"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1nnl20472w0effzcexuqmk4ntn20wg95ytygy55","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"TtQ39YW0Ecf2merJzXjISiic48o1tc2YJegiC3SJm+OnAbYJEhJBNgAbLJZupSz0pl3HxAWoLIaNSftWGG8TAw=="}],"memo":""},"metadata":{"timestamp":"1743739027"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1nnl20472w0effzcexuqmk4ntn20wg95ytygy55","to_address":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","amount":"9000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"sX5sD9n5f/MQ7BhkmovbjAPmb9q0TEGDnsxy1exAJd265fJfMPpNbIARz6iJTbfjHnb6dmVuD/FBYELfocJrAQ=="}],"memo":""},"metadata":{"timestamp":"1743739047"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1zeq4hn2hd2azde6p9x2ya9gp3ug30vuuv56pym","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"WyfGApIENWM21BnfCCjLar/JmI1YIu5XyCAbW8RZ8uIr48YZZUenfn9OFS6uhDSgydFHEi4dGzkJnBNapTooCA=="}],"memo":""},"metadata":{"timestamp":"1743739590"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1zeq4hn2hd2azde6p9x2ya9gp3ug30vuuv56pym","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["2","2"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"HB9tk6ZVTE/MYUYpIhVbPLWSf5La5tT4Oily6u9oEypn5a7y6GZ3bRQH53PKVk0HE2KIyfw+J29M0rBa8fjbBQ=="}],"memo":""},"metadata":{"timestamp":"1743739625"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1p5pa2sp4elcja2u8wn36zv3plsyp8xrqgz0usf","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"HEdysJ0aqWgRYYCb7syiZ8D5AblFIRfXXWXhH3P3T5Dyxg1odHNQ2VwoYTQ9NX9FubLt6JItuMQ+8PlYtBNZAA=="}],"memo":""},"metadata":{"timestamp":"1743750714"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Rqf9NhUO3sQwKUmNU7GrX8d1pzZRaNjOWqAx/XL4psTx/txvDZWdPpvbwoZFvfuaZ99/Nd07Ht9HjmXOUQCyBw=="}],"memo":""},"metadata":{"timestamp":"1743750895"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":["aeddi-testing"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"j7ShULKK/MB8bsIL15PbOfQRCz34X7VpeVsv61YMZ9EsGEdv9rdy7NSXFf9BbKtU7acnTzc36bi8RXBqonWCAQ=="}],"memo":""},"metadata":{"timestamp":"1743751141"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","to_address":"g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","amount":"1000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"DeFguiM0qG5+CTtuNr1BM3z42UJAkDBg+7g+/7/2kLY21hC+Z2uWwpVpDehGEG9a0Pcs8e1OybcqYFKhHZ/RDg=="}],"memo":""},"metadata":{"timestamp":"1743755182"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1etcvlu8zyuwnd7w0x0lcu4g2r7yzllyy62gpa5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Ye42Dwic6f8nEQVxwxVg8DNVnlxMscInjIntiz5mOTFi4Edsqw8L1g7n4NfeQb62FOz6DiHZVoEurLEr6YhaDw=="}],"memo":""},"metadata":{"timestamp":"1743760782"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1etcvlu8zyuwnd7w0x0lcu4g2r7yzllyy62gpa5","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","-1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"E0mdmjXzFwUjU0DWIzTiQRys1zkvBJ7KYowkKTnJV83tGH56kvAGutHarfu/L1Sn3z2TgKls3XeI6xIrDBn+AQ=="}],"memo":""},"metadata":{"timestamp":"1743760847"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kuCtWj1TUpFzucoJ8iAhcnx9Kmvr629VZ2v3JFLL9O/GX4U97k2O0jpn4usPHV3W6RvsRihX+bXQSZHyYYkNDw=="}],"memo":""},"metadata":{"timestamp":"1743761662"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","package":{"name":"boards2","path":"gno.land/r/devx000/gnoland/boards2/v1rc2","files":[{"name":"board.gno","body":"package boards2\n\nimport (\n\t\"net/url\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\ntype BoardID uint64\n\nfunc (id BoardID) String() string {\n\treturn strconv.Itoa(int(id))\n}\n\nfunc (id BoardID) Key() string {\n\treturn padZero(uint64(id), 10)\n}\n\ntype Board struct {\n\tid        BoardID // only set for public boards.\n\tname      string\n\taliases   []string\n\tcreator   std.Address\n\tthreads   avl.Tree // Post.id -\u003e *Post\n\tpostsCtr  uint64   // increments Post.id\n\tcreatedAt time.Time\n\tdeleted   avl.Tree // TODO reserved for fast-delete.\n\tperms     Permissions\n\treadonly  bool\n}\n\nfunc newBoard(id BoardID, name string, creator std.Address, p Permissions) *Board {\n\treturn \u0026Board{\n\t\tid:        id,\n\t\tname:      name,\n\t\tcreator:   creator,\n\t\tthreads:   avl.Tree{},\n\t\tcreatedAt: time.Now(),\n\t\tdeleted:   avl.Tree{},\n\t\tperms:     p,\n\t}\n}\n\nfunc (board *Board) GetID() BoardID {\n\treturn board.id\n}\n\n// GetName returns the name of the board.\nfunc (board *Board) GetName() string {\n\treturn board.name\n}\n\n// GetURL returns the relative URL of the board.\nfunc (board *Board) GetURL() string {\n\treturn strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\") + \":\" + url.PathEscape(board.name)\n}\n\n// GetURL returns relative board path relative.\n//\n// Note: returned result is not escaped. Use GetURL to get URL-encoded path.\nfunc (board *Board) GetPath() string {\n\treturn strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\") + \":\" + board.name\n}\n\nfunc (board *Board) GetPermissions() Permissions {\n\treturn board.perms\n}\n\n// SetReadonly updates board's read-only status.\nfunc (board *Board) SetReadonly(readonly bool) {\n\tboard.readonly = readonly\n}\n\n// IsReadonly checks if the board is a read-only board.\nfunc (board *Board) IsReadonly() bool {\n\treturn board.readonly\n}\n\nfunc (board *Board) GetThread(threadID PostID) (_ *Post, found bool) {\n\tv, found := board.threads.Get(threadID.Key())\n\tif !found {\n\t\treturn nil, false\n\t}\n\treturn v.(*Post), true\n}\n\nfunc (board *Board) AddThread(creator std.Address, title string, body string) *Post {\n\tpid := board.incGetPostID()\n\tthread := newPost(board, pid, creator, title, body, pid, 0, 0)\n\tboard.threads.Set(pid.Key(), thread)\n\treturn thread\n}\n\n// NOTE: this can be potentially very expensive for threads with many replies.\n// TODO: implement optional fast-delete where thread is simply moved.\nfunc (board *Board) DeleteThread(pid PostID) {\n\t_, removed := board.threads.Remove(pid.Key())\n\tif !removed {\n\t\tpanic(\"thread does not exist with ID \" + pid.String())\n\t}\n}\n\n// Render renders a board into Markdown.\nfunc (board *Board) Render(path, menu string) string {\n\tvar sb strings.Builder\n\n\tsb.WriteString(\"# \" + board.GetName() + \"  \\n\")\n\tsb.WriteString(\"Board created by \" + newUserLink(board.creator) + \" \")\n\tsb.WriteString(\"on \" + board.createdAt.Format(dateFormat))\n\tsb.WriteString(\", #\" + board.id.String())\n\n\tif board.IsReadonly() {\n\t\tsb.WriteString(\"  \\n_**Starting new threads and commenting is disabled**_\")\n\t}\n\n\t// XXX: Menu is rendered by the caller to deal with links and sub-menus\n\t// TODO: We should have the render logic separated from boards so avoid sending menu as argument\n\tif menu != \"\" {\n\t\tsb.WriteString(\"\\n\\n\")\n\t\tsb.WriteString(menu)\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\tsb.WriteString(\"\\n\\n---\\n\")\n\n\tif board.threads.Size() == 0 {\n\t\tsb.WriteString(\"### This board doesn't have any threads\\n\")\n\t\tif !board.IsReadonly() {\n\t\t\turl := board.GetPostFormURL()\n\t\t\tsb.WriteString(\"Do you want to [start a new conversation](\" + url + \") in this board ?\")\n\t\t}\n\t\treturn sb.String()\n\t}\n\n\tp, err := pager.New(path, board.threads.Size(), pager.WithPageSize(pageSizeThreads))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\trender := func(_ string, v any) bool {\n\t\tthread := v.(*Post)\n\t\tif thread.isHidden {\n\t\t\treturn false\n\t\t}\n\n\t\tsb.WriteString(thread.RenderSummary())\n\t\tsb.WriteString(\"\\n\")\n\t\treturn false\n\t}\n\n\tsb.WriteString(\"Sort by: \")\n\tr := realmpath.Parse(path)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tsb.WriteString(newLink(\"newest first\", r.String()))\n\t\tsb.WriteString(\"\\n\\n\")\n\t\tboard.threads.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tsb.WriteString(newLink(\"oldest first\", r.String()))\n\t\tsb.WriteString(\"\\n\\n\")\n\t\tboard.threads.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tsb.WriteString(\"\\n---\\n\")\n\t\tsb.WriteString(pager.Picker(p))\n\t}\n\n\treturn sb.String()\n}\n\nfunc (board *Board) incGetPostID() PostID {\n\tboard.postsCtr++\n\treturn PostID(board.postsCtr)\n}\n\nfunc (board *Board) GetURLFromThreadID(threadID PostID) string {\n\treturn board.GetURL() + \"/\" + threadID.String()\n}\n\nfunc (board *Board) GetURLFromReplyID(threadID, replyID PostID) string {\n\treturn board.GetURL() + \"/\" + threadID.String() + \"/\" + replyID.String()\n}\n\nfunc (board *Board) GetRenameFormURL() string { // TODO: These type of functions shouldn't be part of Board type\n\treturn txlink.Call(\n\t\t\"RenameBoard\",\n\t\t\"name\", board.name,\n\t\t\"newName\", \"\",\n\t)\n}\n\nfunc (board *Board) GetFreezeFormURL() string {\n\treturn txlink.Call(\n\t\t\"FreezeBoard\",\n\t\t\"boardID\", board.id.String(),\n\t)\n}\n\nfunc (board *Board) GetUnfreezeFormURL() string {\n\treturn txlink.Call(\n\t\t\"UnfreezeBoard\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"threadID\", \"\",\n\t\t\"replyID\", \"\",\n\t)\n}\n\nfunc (board *Board) GetFlaggingThresholdFormURL() string {\n\treturn txlink.Call(\n\t\t\"SetFlaggingThreshold\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"threshold\", \"\",\n\t)\n}\n\nfunc (board *Board) GetInviteMemberFormURL() string {\n\treturn txlink.Call(\n\t\t\"InviteMember\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"user\", \"\",\n\t\t\"role\", \"\",\n\t)\n}\n\nfunc (board *Board) GetPostFormURL() string {\n\treturn txlink.Call(\n\t\t\"CreateThread\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"title\", \"\",\n\t\t\"body\", \"\",\n\t)\n}\n\nfunc (board *Board) GetMembersURL() string {\n\treturn board.GetURL() + \"/members\"\n}\n\nfunc createDefaultBoardPermissions(owner std.Address) *DefaultPermissions {\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.SetSuperRole(RoleOwner)\n\tperms.AddRole(\n\t\tRoleAdmin,\n\t\tPermissionBoardRename,\n\t\tPermissionBoardFlaggingUpdate,\n\t\tPermissionMemberInvite,\n\t\tPermissionMemberRemove,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadEdit,\n\t\tPermissionThreadDelete,\n\t\tPermissionThreadRepost,\n\t\tPermissionThreadFlag,\n\t\tPermissionThreadFreeze,\n\t\tPermissionReplyCreate,\n\t\tPermissionReplyDelete,\n\t\tPermissionReplyFlag,\n\t\tPermissionReplyFreeze,\n\t\tPermissionRoleChange,\n\t)\n\tperms.AddRole(\n\t\tRoleModerator,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadEdit,\n\t\tPermissionThreadRepost,\n\t\tPermissionThreadFlag,\n\t\tPermissionReplyCreate,\n\t\tPermissionReplyFlag,\n\t)\n\tperms.AddRole(\n\t\tRoleGuest,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadRepost,\n\t\tPermissionReplyCreate,\n\t)\n\tperms.AddUser(owner, RoleOwner)\n\treturn perms\n}\n"},{"name":"board_readonly.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"time\"\n)\n\n// ReadonlyBoard defines an interface for readonly boards.\ntype ReadonlyBoard interface {\n\t// ID returns the unique identifier of the board.\n\tID() BoardID\n\n\t// Name returns the name of the board.\n\tName() string\n\n\t// Aliases returns a list with previous names assigned to the board.\n\tAliases() []string\n\n\t// Creator returns board's creator address.\n\tCreator() std.Address\n\n\t// LastPostID returns the ID assigned to the last created thread.\n\tLastPostID() uint64\n\n\t// CreatedAt returns the time when board was created.\n\tCreatedAt() time.Time\n\n\t// IsReadonly returns true when board shouldn't allow the creation of threads and comments.\n\tIsReadonly() bool\n\n\t// MembersCount returns the number of invited board members.\n\tMembersCount() int\n\n\t// IterateMembers allows reading the list of invited board members.\n\tIterateMembers(offset, count int, fn UsersIterFn)\n}\n\ntype readonlyBoard struct {\n\tboard *Board\n}\n\nfunc (b readonlyBoard) ID() BoardID {\n\treturn b.board.id\n}\n\nfunc (b readonlyBoard) Name() string {\n\treturn b.board.name\n}\n\nfunc (b readonlyBoard) Aliases() []string {\n\taliases := make([]string, len(b.board.aliases))\n\tfor i, s := range b.board.aliases {\n\t\taliases[i] = s\n\t}\n\treturn aliases\n}\n\nfunc (b readonlyBoard) Creator() std.Address {\n\treturn b.board.creator\n}\n\nfunc (b readonlyBoard) LastPostID() uint64 {\n\treturn b.board.postsCtr\n}\n\nfunc (b readonlyBoard) CreatedAt() time.Time {\n\treturn b.board.createdAt\n}\n\nfunc (b readonlyBoard) IsReadonly() bool {\n\treturn b.board.readonly\n}\n\nfunc (b readonlyBoard) MembersCount() int {\n\treturn b.board.perms.UsersCount()\n}\n\nfunc (b readonlyBoard) IterateMembers(offset, count int, fn UsersIterFn) {\n\tb.board.perms.IterateUsers(offset, count, fn)\n}\n"},{"name":"board_test.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nfunc TestBoardID_String(t *testing.T) {\n\tinput := BoardID(32)\n\n\tuassert.Equal(t, \"32\", input.String())\n}\n\nfunc TestBoardID_Key(t *testing.T) {\n\tinput := BoardID(128)\n\twant := strings.Repeat(\"0\", 7) + \"128\"\n\tuassert.Equal(t, want, input.Key())\n}\n\nfunc TestBoard_GetID(t *testing.T) {\n\twant := int(92)\n\tb := new(Board)\n\tb.id = BoardID(want)\n\tgot := int(b.GetID())\n\n\tuassert.Equal(t, got, want)\n\tuassert.NotEqual(t, got, want*want)\n}\n\nfunc TestBoard_GetURL(t *testing.T) {\n\tpkgPath := strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\tname := \"foobar_test_get_url123\"\n\twant := pkgPath + \":\" + name\n\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tboard := newBoard(1, name, addr, perms)\n\tgot := board.GetURL()\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetThread(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(1, \"test123\", addr, perms)\n\n\t_, ok := b.GetThread(12345)\n\tuassert.False(t, ok)\n\n\tpost := b.AddThread(addr, \"foo\", \"bar\")\n\t_, ok = b.GetThread(post.GetPostID())\n\tuassert.True(t, ok)\n}\n\nfunc TestBoard_DeleteThread(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(1, \"test123\", addr, perms)\n\n\tpost := b.AddThread(addr, \"foo\", \"bar\")\n\tid := post.GetPostID()\n\n\tb.DeleteThread(id)\n\n\t_, ok := b.GetThread(id)\n\tuassert.False(t, ok)\n}\n\nvar boardUrlPrefix = strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\nfunc TestBoard_GetURLFromThreadID(t *testing.T) {\n\tboardName := \"test12345\"\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(BoardID(11), boardName, addr, perms)\n\twant := boardUrlPrefix + \":\" + boardName + \"/10\"\n\n\tgot := b.GetURLFromThreadID(10)\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetURLFromReplyID(t *testing.T) {\n\tboardName := \"test12345\"\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(BoardID(11), boardName, addr, perms)\n\twant := boardUrlPrefix + \":\" + boardName + \"/10/20\"\n\n\tgot := b.GetURLFromReplyID(10, 20)\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetPostFormURL(t *testing.T) {\n\tbid := BoardID(386)\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(bid, \"foo1234\", addr, perms)\n\texpect := txlink.Call(\"CreateThread\", \"boardID\", bid.String(), \"title\", \"\", \"body\", \"\")\n\n\tgot := b.GetPostFormURL()\n\tuassert.Equal(t, expect, got)\n}\n"},{"name":"boards.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tgPerms        Permissions\n\tgNotice       string\n\tgHelp         string\n\tgLastBoardID  BoardID\n\tgBoardsByID   avl.Tree // string(id) -\u003e *Board\n\tgBoardsByName avl.Tree // string(name) -\u003e *Board\n\tgLocked       struct {\n\t\trealm        bool\n\t\trealmMembers bool\n\t}\n)\n\nfunc init() {\n\t// TODO: Define and change the default realm owner (or owners)\n\towner := std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\n\t// Initialize default realm permissions\n\tgPerms = createDefaultPermissions(owner)\n\n\t// Import relevant initial state from previous version\n\tinitFromPrevVersion()\n}\n\n// incGetBoardID returns a new board ID.\nfunc incGetBoardID() BoardID {\n\tgLastBoardID++\n\treturn gLastBoardID\n}\n\n// getBoard returns a board for a specific ID.\nfunc getBoard(id BoardID) (_ *Board, found bool) {\n\tv, exists := gBoardsByID.Get(id.Key())\n\tif !exists {\n\t\treturn nil, false\n\t}\n\treturn v.(*Board), true\n}\n\n// mustGetBoardByName returns a board or panics when it's not found.\nfunc mustGetBoardByName(name string) *Board {\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tpanic(\"board does not exist with name: \" + name)\n\t}\n\treturn v.(*Board)\n}\n\n// mustGetBoard returns a board or panics when it's not found.\nfunc mustGetBoard(id BoardID) *Board {\n\tboard, found := getBoard(id)\n\tif !found {\n\t\tpanic(\"board does not exist with ID: \" + id.String())\n\t}\n\treturn board\n}\n\n// mustGetThread returns a thread or panics when it's not found.\nfunc mustGetThread(board *Board, threadID PostID) *Post {\n\tthread, found := board.GetThread(threadID)\n\tif !found {\n\t\tpanic(\"thread does not exist with ID: \" + threadID.String())\n\t}\n\treturn thread\n}\n\n// mustGetReply returns a reply or panics when it's not found.\nfunc mustGetReply(thread *Post, replyID PostID) *Post {\n\treply, found := thread.GetReply(replyID)\n\tif !found {\n\t\tpanic(\"reply does not exist with ID: \" + replyID.String())\n\t}\n\treturn reply\n}\n\nfunc mustGetPermissions(bid BoardID) Permissions {\n\tif bid != 0 {\n\t\tboard := mustGetBoard(bid)\n\t\treturn board.perms\n\t}\n\treturn gPerms\n}\n"},{"name":"flag.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n// DefaultFlaggingThreshold defines the default number of flags that hides flaggable items.\nconst DefaultFlaggingThreshold = 1\n\nvar gFlaggingThresholds avl.Tree // string(board ID) -\u003e int\n\ntype Flag struct {\n\tUser   std.Address\n\tReason string\n}\n\ntype Flaggable interface {\n\t// AddFlag adds a new flag to an item.\n\t//\n\t// Returns false if item was already flagged by user.\n\tAddFlag(flag Flag) bool\n\n\t// FlagsCount returns number of times item was flagged.\n\tFlagsCount() int\n}\n\n// flagItem adds a flag to a flaggable item (post, thread, etc).\n//\n// Returns whether flag count threshold is reached and item can be hidden.\n//\n// Panics if flag count threshold was already reached.\nfunc flagItem(item Flaggable, flag Flag, threshold int) bool {\n\tif item.FlagsCount() \u003e= threshold {\n\t\tpanic(\"item flag count threshold exceeded: \" + strconv.Itoa(threshold))\n\t}\n\n\tif !item.AddFlag(flag) {\n\t\tpanic(\"item has been already flagged by a current user\")\n\t}\n\n\treturn item.FlagsCount() == threshold\n}\n\nfunc getFlaggingThreshold(bid BoardID) int {\n\tif v, ok := gFlaggingThresholds.Get(bid.String()); ok {\n\t\treturn v.(int)\n\t}\n\treturn DefaultFlaggingThreshold\n}\n"},{"name":"format.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/r/sys/users\"\n)\n\nfunc padLeft(s string, length int) string {\n\tif len(s) \u003e= length {\n\t\treturn s\n\t}\n\treturn strings.Repeat(\" \", length-len(s)) + s\n}\n\nfunc padZero(u64 uint64, length int) string {\n\ts := strconv.Itoa(int(u64))\n\tif len(s) \u003e= length {\n\t\treturn s\n\t}\n\treturn strings.Repeat(\"0\", length-len(s)) + s\n}\n\nfunc indentBody(indent string, body string) string {\n\tvar (\n\t\tres   string\n\t\tlines = strings.Split(body, \"\\n\")\n\t)\n\tfor i, line := range lines {\n\t\tif i \u003e 0 {\n\t\t\tres += \"\\n\"\n\t\t}\n\t\tres += indent + line\n\t}\n\treturn res\n}\n\n// NOTE: length must be greater than 3.\nfunc summaryOf(text string, length int) string {\n\tlines := strings.SplitN(text, \"\\n\", 2)\n\tline := lines[0]\n\tif len(line) \u003e length {\n\t\tline = line[:(length-3)] + \"...\"\n\t} else if len(lines) \u003e 1 {\n\t\t// len(line) \u003c= 80\n\t\tline = line + \"...\"\n\t}\n\treturn line\n}\n\n// newLink returns a Markdown link.\nfunc newLink(label, uri string) string {\n\treturn \"[\" + label + \"](\" + uri + \")\"\n}\n\n// newButtonLink returns a Makdown link with label wrapped in brackets.\nfunc newButtonLink(label, uri string) string {\n\treturn `[\\[` + label + `\\]](` + uri + \")\"\n}\n\n// newUserLink returns a Markdown link for an account to the users\n// realm or the address as string when a user is not registered.\nfunc newUserLink(addr std.Address) string {\n\tuser := users.ResolveAddress(addr)\n\tif user != nil {\n\t\treturn user.RenderLink(\"\")\n\t}\n\treturn addr.String()\n}\n"},{"name":"migrations.gno","body":"package boards2\n\nimport (\n\tv1rc1 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nfunc initFromPrevVersion() {\n\timportRealmMembers()\n}\n\nfunc importRealmMembers() {\n\tv1rc1.IterateRealmMembers(0, func(member v1rc1.User) bool {\n\t\t// XXX: This wouldn't be required if a boards2 package is created\n\t\troles := make([]Role, len(member.Roles))\n\t\tfor i, r := range member.Roles {\n\t\t\troles[i] = Role(r)\n\t\t}\n\n\t\tgPerms.AddUser(member.Address, roles...)\n\t\treturn false\n\t})\n}\n"},{"name":"permissions.gno","body":"package boards2\n\nimport \"std\"\n\nconst (\n\tPermissionRealmHelp           Permission = \"realm:help\"\n\tPermissionRealmLock                      = \"realm:lock\"\n\tPermissionRealmNotice                    = \"realm:notice\"\n\tPermissionBoardCreate                    = \"board:create\"\n\tPermissionBoardFlaggingUpdate            = \"board:flagging-update\"\n\tPermissionBoardFreeze                    = \"board:freeze\"\n\tPermissionBoardRename                    = \"board:rename\"\n\tPermissionThreadCreate                   = \"thread:create\"\n\tPermissionThreadDelete                   = \"thread:delete\"\n\tPermissionThreadEdit                     = \"thread:edit\"\n\tPermissionThreadFlag                     = \"thread:flag\"\n\tPermissionThreadFreeze                   = \"thread:freeze\"\n\tPermissionThreadRepost                   = \"thread:repost\"\n\tPermissionReplyCreate                    = \"reply:create\"\n\tPermissionReplyDelete                    = \"reply:delete\"\n\tPermissionReplyFlag                      = \"reply:flag\"\n\tPermissionReplyFreeze                    = \"reply:freeze\"\n\tPermissionMemberInvite                   = \"member:invite\"\n\tPermissionMemberRemove                   = \"member:remove\"\n\tPermissionRoleChange                     = \"role:change\"\n\tPermissionPermissionsUpdate              = \"permissions:update\"\n)\n\nconst (\n\tRoleGuest     Role = \"\"\n\tRoleOwner          = \"owner\"\n\tRoleAdmin          = \"admin\"\n\tRoleModerator      = \"moderator\"\n)\n\ntype (\n\t// Permission defines the type for permissions.\n\tPermission string\n\n\t// Role defines the type for user roles.\n\tRole string\n\n\t// Args is a list of generic arguments.\n\tArgs []interface{}\n\n\t// User contains user info.\n\tUser struct {\n\t\tAddress std.Address\n\t\tRoles   []Role\n\t}\n\n\t// UsersIterFn defines a function type to iterate users.\n\tUsersIterFn func(User) bool\n\n\t// Permissions define an interface to for permissioned execution.\n\tPermissions interface {\n\t\t// HasRole checks if a user has a specific role assigned.\n\t\tHasRole(std.Address, Role) bool\n\n\t\t// HasPermission checks if a user has a specific permission.\n\t\tHasPermission(std.Address, Permission) bool\n\n\t\t// WithPermission calls a callback when a user has a specific permission.\n\t\t// It panics on error.\n\t\tWithPermission(std.Address, Permission, Args, func(Args))\n\n\t\t// AddUser adds a new user to the permissioner.\n\t\tAddUser(std.Address, ...Role) error\n\n\t\t// SetUserRoles sets the roles of a user.\n\t\tSetUserRoles(std.Address, ...Role) error\n\n\t\t// RemoveUser removes a user from the permissioner.\n\t\tRemoveUser(std.Address) (removed bool)\n\n\t\t// HasUser checks if a user exists.\n\t\tHasUser(std.Address) bool\n\n\t\t// UsersCount returns the total number of users the permissioner contains.\n\t\tUsersCount() int\n\n\t\t// IterateUsers iterates permissions' users.\n\t\tIterateUsers(start, count int, fn UsersIterFn) bool\n\t}\n)\n"},{"name":"permissions_default.gno","body":"package boards2\n\nimport (\n\t\"errors\"\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\t\"gno.land/r/sys/users\"\n)\n\n// DefaultPermissions manages users, roles and permissions.\ntype DefaultPermissions struct {\n\tsuperRole Role\n\tdao       *commondao.CommonDAO\n\tusers     *avl.Tree // string(std.Address) -\u003e []Role\n\troles     *avl.Tree // string(role) -\u003e []Permission\n}\n\n// NewDefaultPermissions creates a new permissions type.\n// This type is a default implementation to handle users, roles and permissions.\nfunc NewDefaultPermissions(dao *commondao.CommonDAO) *DefaultPermissions {\n\tif dao == nil {\n\t\tpanic(\"default permissions require a DAO\")\n\t}\n\n\tdp := \u0026DefaultPermissions{\n\t\tdao:   dao,\n\t\troles: avl.NewTree(),\n\t\tusers: avl.NewTree(),\n\t}\n\n\t// Make sure that DAO users are indexed when DAO has members\n\tdao.Members().IterateByOffset(0, dao.Members().Size(), func(m std.Address) bool {\n\t\tdp.users.Set(m.String(), []Role(nil))\n\t\treturn false\n\t})\n\n\treturn dp\n}\n\n// SetSuperRole assigns a super role.\n// A super role is one that have all permissions.\n// These type of role doesn't need to be mapped to any permission.\nfunc (dp *DefaultPermissions) SetSuperRole(r Role) {\n\tdp.superRole = r\n}\n\n// AddRole add a role with one or more assigned permissions.\nfunc (dp *DefaultPermissions) AddRole(r Role, p Permission, extra ...Permission) {\n\tdp.roles.Set(string(r), append([]Permission{p}, extra...))\n}\n\n// RoleExists checks if a role exists.\nfunc (dp DefaultPermissions) RoleExists(r Role) bool {\n\tif dp.superRole != \"\" \u0026\u0026 r == dp.superRole {\n\t\treturn true\n\t}\n\n\treturn dp.roles.Iterate(\"\", \"\", func(name string, _ interface{}) bool {\n\t\treturn Role(name) == r\n\t})\n}\n\n// GetUserRoles returns the list of roles assigned to a user.\nfunc (dp DefaultPermissions) GetUserRoles(user std.Address) []Role {\n\tv, found := dp.users.Get(user.String())\n\tif !found {\n\t\treturn nil\n\t}\n\treturn v.([]Role)\n}\n\n// HasRole checks if a user has a specific role assigned.\nfunc (dp DefaultPermissions) HasRole(user std.Address, r Role) bool {\n\tfor _, role := range dp.GetUserRoles(user) {\n\t\tif role == r {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// HasPermission checks if a user has a specific permission.\nfunc (dp DefaultPermissions) HasPermission(user std.Address, perm Permission) bool {\n\tfor _, r := range dp.GetUserRoles(user) {\n\t\tif dp.superRole == r {\n\t\t\treturn true\n\t\t}\n\n\t\tv, found := dp.roles.Get(string(r))\n\t\tif !found {\n\t\t\tcontinue\n\t\t}\n\n\t\tfor _, p := range v.([]Permission) {\n\t\t\tif p == perm {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// AddUser adds a new user to permissions.\nfunc (dp *DefaultPermissions) AddUser(user std.Address, roles ...Role) error {\n\tif dp.users.Has(user.String()) {\n\t\treturn errors.New(\"user already exists\")\n\t}\n\n\tdp.dao.Members().Add(user)\n\treturn dp.setUserRoles(user, roles...)\n}\n\n// SetUserRoles sets the roles of a user.\nfunc (dp *DefaultPermissions) SetUserRoles(user std.Address, roles ...Role) error {\n\tif !dp.users.Has(user.String()) {\n\t\treturn errors.New(\"user not found\")\n\t}\n\treturn dp.setUserRoles(user, roles...)\n}\n\n// RemoveUser removes a user from permissions.\nfunc (dp *DefaultPermissions) RemoveUser(user std.Address) bool {\n\t_, removed := dp.users.Remove(user.String())\n\tdp.dao.Members().Remove(user)\n\treturn removed\n}\n\n// HasUser checks if a user exists.\nfunc (dp DefaultPermissions) HasUser(user std.Address) bool {\n\treturn dp.users.Has(user.String())\n}\n\n// UsersCount returns the total number of users the permissioner contains.\nfunc (dp DefaultPermissions) UsersCount() int {\n\treturn dp.users.Size()\n}\n\n// IterateUsers iterates permissions' users.\nfunc (dp DefaultPermissions) IterateUsers(start, count int, fn UsersIterFn) bool {\n\treturn dp.users.IterateByOffset(start, count, func(k string, v interface{}) bool {\n\t\treturn fn(User{\n\t\t\tAddress: std.Address(k),\n\t\t\tRoles:   v.([]Role),\n\t\t})\n\t})\n}\n\n// WithPermission calls a callback when a user has a specific permission.\n// It panics on error or when a handler panics.\n// Callbacks are by default called when there is no handle registered for the permission.\nfunc (dp *DefaultPermissions) WithPermission(user std.Address, perm Permission, args Args, cb func(Args)) {\n\tif !dp.HasPermission(user, perm) || !dp.dao.Members().Has(user) {\n\t\tpanic(\"unauthorized\")\n\t}\n\n\tswitch perm {\n\tcase PermissionBoardCreate:\n\t\tdp.handleBoardCreate(args, cb)\n\tcase PermissionBoardRename:\n\t\tdp.handleBoardRename(args, cb)\n\tcase PermissionMemberInvite:\n\t\tdp.handleMemberInvite(args, cb)\n\tcase PermissionRoleChange:\n\t\tdp.handleRoleChange(args, cb)\n\tdefault:\n\t\tcb(args)\n\t}\n}\n\nfunc (dp *DefaultPermissions) setUserRoles(user std.Address, roles ...Role) error {\n\tfor _, r := range roles {\n\t\tif !dp.RoleExists(r) {\n\t\t\treturn errors.New(\"invalid role: \" + string(r))\n\t\t}\n\t}\n\n\tdp.users.Set(user.String(), append([]Role(nil), roles...))\n\treturn nil\n}\n\nfunc (DefaultPermissions) handleBoardCreate(args Args, cb func(Args)) {\n\tname, ok := args[0].(string)\n\tif !ok {\n\t\tpanic(\"expected board name to be a string\")\n\t}\n\n\tassertBoardNameIsNotAddress(name)\n\tassertBoardNameBelongsToCaller(name)\n\n\tcb(args)\n}\n\nfunc (DefaultPermissions) handleBoardRename(args Args, cb func(Args)) {\n\tnewName, ok := args[2].(string)\n\tif !ok {\n\t\tpanic(\"expected new board name to be a string\")\n\t}\n\n\tassertBoardNameIsNotAddress(newName)\n\tassertBoardNameBelongsToCaller(newName)\n\n\tcb(args)\n}\n\nfunc (dp DefaultPermissions) handleMemberInvite(args Args, cb func(Args)) {\n\t// Make sure that only owners invite other owners\n\trole, ok := args[1].(Role)\n\tif !ok {\n\t\tpanic(\"expected a valid new member role\")\n\t}\n\n\tif role == RoleOwner {\n\t\tif !dp.HasRole(std.PreviousRealm().Address(), RoleOwner) {\n\t\t\tpanic(\"only owners are allowed to invite other owners\")\n\t\t}\n\t}\n\n\tcb(args)\n}\n\nfunc (dp DefaultPermissions) handleRoleChange(args Args, cb func(Args)) {\n\t// Owners and Admins can change roles.\n\t// Admins should not be able to assign or remove the Owner role from members.\n\tif dp.HasRole(std.PreviousRealm().Address(), RoleAdmin) {\n\t\trole, ok := args[2].(Role)\n\t\tif !ok {\n\t\t\tpanic(\"expected a valid member role\")\n\t\t}\n\n\t\tif role == RoleOwner {\n\t\t\tpanic(\"admins are not allowed to promote members to Owner\")\n\t\t} else {\n\t\t\tmember, ok := args[1].(std.Address)\n\t\t\tif !ok {\n\t\t\t\tpanic(\"expected a valid member address\")\n\t\t\t}\n\n\t\t\tif dp.HasRole(member, RoleOwner) {\n\t\t\t\tpanic(\"admins are not allowed to remove the Owner role\")\n\t\t\t}\n\t\t}\n\t}\n\n\tcb(args)\n}\n\nfunc createDefaultPermissions(owner std.Address) *DefaultPermissions {\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.SetSuperRole(RoleOwner)\n\tperms.AddRole(RoleAdmin, PermissionBoardCreate)\n\tperms.AddUser(owner, RoleOwner)\n\treturn perms\n}\n\nfunc assertBoardNameIsNotAddress(s string) {\n\tif std.Address(s).IsValid() {\n\t\tpanic(\"addresses are not allowed as board name\")\n\t}\n}\n\nfunc assertBoardNameBelongsToCaller(name string) {\n\t// When the board name is the name of a registered user\n\t// check that caller is the owner of the name.\n\tuser, _ := users.ResolveName(name)\n\tif user != nil \u0026\u0026 user.Addr() != std.PreviousRealm().Address() {\n\t\tpanic(\"board name is a user name registered to a different user\")\n\t}\n}\n"},{"name":"permissions_default_test.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/urequire\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n)\n\nvar _ Permissions = (*DefaultPermissions)(nil)\n\nfunc TestDefaultPermissionsWithPermission(t *testing.T) {\n\tcases := []struct {\n\t\tname       string\n\t\tuser       std.Address\n\t\tpermission Permission\n\t\targs       Args\n\t\tsetup      func() *DefaultPermissions\n\t\terr        string\n\t\tcalled     bool\n\t}{\n\t\t{\n\t\t\tname:       \"ok\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\tcalled: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with arguments\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\targs:       Args{\"a\", \"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\tcalled: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"no permission\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"unauthorized\",\n\t\t},\n\t\t{\n\t\t\tname:       \"is not a DAO member\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t\terr: \"unauthorized\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar (\n\t\t\t\tcalled bool\n\t\t\t\targs   Args\n\t\t\t)\n\n\t\t\tperms := tc.setup()\n\t\t\tcallback := func(a Args) {\n\t\t\t\targs = a\n\t\t\t\tcalled = true\n\t\t\t}\n\n\t\t\ttestCaseFn := func() {\n\t\t\t\tperms.WithPermission(tc.user, tc.permission, tc.args, callback)\n\t\t\t}\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.PanicsWithMessage(t, tc.err, testCaseFn, \"panic\")\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NotPanics(t, testCaseFn, \"no panic\")\n\t\t\t}\n\n\t\t\turequire.Equal(t, tc.called, called, \"callback called\")\n\t\t\turequire.Equal(t, len(tc.args), len(args), \"args count\")\n\t\t\tfor i, a := range args {\n\t\t\t\tuassert.Equal(t, tc.args[i].(string), a.(string))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsGetUserRoles(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []string\n\t\tsetup func() *DefaultPermissions\n\t}{\n\t\t{\n\t\t\tname:  \"single role\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple roles\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\", \"foo\", \"bar\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddRole(\"bar\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\", \"foo\", \"bar\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"without roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"not a user\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple users\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"bar\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"admin\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\", \"admin\", \"bar\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\troles := perms.GetUserRoles(tc.user)\n\n\t\t\turequire.Equal(t, len(tc.roles), len(roles), \"user role count\")\n\t\t\tfor i, r := range roles {\n\t\t\t\tuassert.Equal(t, tc.roles[i], string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsHasRole(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\trole  Role\n\t\tsetup func() *DefaultPermissions\n\t\twant  bool\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"admin\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"ok with multiple roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"foo\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"user without roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"has no role\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.HasRole(tc.user, tc.role)\n\t\t\tuassert.Equal(t, got, tc.want)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsHasPermission(t *testing.T) {\n\tcases := []struct {\n\t\tname       string\n\t\tuser       std.Address\n\t\tpermission Permission\n\t\tsetup      func() *DefaultPermissions\n\t\twant       bool\n\t}{\n\t\t{\n\t\t\tname:       \"ok\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with multiple users\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with multiple roles\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"other\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddRole(\"baz\", \"other\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\", \"baz\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"no permission\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"other\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.HasPermission(tc.user, tc.permission)\n\t\t\tuassert.Equal(t, got, tc.want)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsAddUser(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []Role\n\t\tsetup func() *DefaultPermissions\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname:  \"single user\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple users\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"a\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"duplicated user\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"user already exists\",\n\t\t},\n\t\t{\n\t\t\tname:  \"duplicated user\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"foo\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"invalid role: foo\",\n\t\t},\n\t\t{\n\t\t\tname: \"already a DAO member\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(\n\t\t\t\t\tcommondao.New(commondao.WithMember(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")),\n\t\t\t\t)\n\t\t\t},\n\t\t\terr: \"user already exists\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\n\t\t\terr := perms.AddUser(tc.user, tc.roles...)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.Error(t, err, \"expected an error\")\n\t\t\t\tuassert.Equal(t, tc.err, err.Error())\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NoError(t, err)\n\t\t\t}\n\n\t\t\troles := perms.GetUserRoles(tc.user)\n\t\t\tuassert.Equal(t, len(tc.roles), len(roles))\n\t\t\tfor i, r := range roles {\n\t\t\t\turequire.Equal(t, string(tc.roles[i]), string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsSetUserRoles(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []Role\n\t\tsetup func() *DefaultPermissions\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname:  \"single role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple roles\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"b\", \"c\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddRole(\"c\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"duplicated role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"c\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddRole(\"c\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\", \"c\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"remove roles\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\", \"b\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"x\", \"a\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"invalid role: x\",\n\t\t},\n\t\t{\n\t\t\tname: \"user not found\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t\terr: \"user not found\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\n\t\t\terr := perms.SetUserRoles(tc.user, tc.roles...)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.True(t, err != nil, \"expected an error\")\n\t\t\t\tuassert.Equal(t, tc.err, err.Error())\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NoError(t, err)\n\t\t\t}\n\n\t\t\troles := perms.GetUserRoles(tc.user)\n\t\t\tuassert.Equal(t, len(tc.roles), len(roles))\n\t\t\tfor i, r := range roles {\n\t\t\t\turequire.Equal(t, string(tc.roles[i]), string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsRemoveUser(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\tsetup func() *DefaultPermissions\n\t\twant  bool\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"user not found\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.RemoveUser(tc.user)\n\t\t\tuassert.Equal(t, tc.want, got)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsIterateUsers(t *testing.T) {\n\tusers := []User{\n\t\t{\n\t\t\tAddress: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tRoles:   []Role{\"foo\"},\n\t\t},\n\t\t{\n\t\t\tAddress: \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\",\n\t\t\tRoles:   []Role{\"foo\", \"bar\"},\n\t\t},\n\t\t{\n\t\t\tAddress: \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\",\n\t\t\tRoles:   []Role{\"bar\"},\n\t\t},\n\t}\n\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.AddRole(\"foo\", \"perm1\")\n\tperms.AddRole(\"bar\", \"perm2\")\n\tfor _, u := range users {\n\t\tperms.AddUser(u.Address, u.Roles...)\n\t}\n\n\tcases := []struct {\n\t\tname               string\n\t\tstart, count, want int\n\t}{\n\t\t{\n\t\t\tname:  \"exceed users count\",\n\t\t\tcount: 50,\n\t\t\twant:  3,\n\t\t},\n\t\t{\n\t\t\tname:  \"exact users count\",\n\t\t\tcount: 3,\n\t\t\twant:  3,\n\t\t},\n\t\t{\n\t\t\tname:  \"two users\",\n\t\t\tstart: 1,\n\t\t\tcount: 2,\n\t\t\twant:  2,\n\t\t},\n\t\t{\n\t\t\tname:  \"one user\",\n\t\t\tstart: 1,\n\t\t\tcount: 1,\n\t\t\twant:  1,\n\t\t},\n\t\t{\n\t\t\tname:  \"no iteration\",\n\t\t\tstart: 50,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar i int\n\t\t\tperms.IterateUsers(0, len(users), func(u User) bool {\n\t\t\t\turequire.True(t, i \u003c len(users), \"expect iterator to respect number of users\")\n\t\t\t\tuassert.Equal(t, users[i].Address, u.Address)\n\n\t\t\t\turequire.Equal(t, len(users[i].Roles), len(u.Roles), \"expect number of roles to match\")\n\t\t\t\tfor j, r := range u.Roles {\n\t\t\t\t\tuassert.Equal(t, string(users[i].Roles[j]), string(u.Roles[j]))\n\t\t\t\t}\n\n\t\t\t\ti++\n\t\t\t})\n\n\t\t\tuassert.Equal(t, i, len(users), \"expect iterator to iterate all users\")\n\t\t})\n\t}\n}\n"},{"name":"post.gno","body":"package boards2\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nconst dateFormat = \"2006-01-02 3:04pm MST\"\n\ntype PostID uint64\n\nfunc (id PostID) String() string {\n\treturn strconv.Itoa(int(id))\n}\n\nfunc (id PostID) Key() string {\n\treturn padZero(uint64(id), 10)\n}\n\n// A Post is a \"thread\" or a \"reply\" depending on context.\n// A thread is a Post of a Board that holds other replies.\ntype Post struct {\n\tboard         *Board\n\tid            PostID\n\tcreator       std.Address\n\ttitle         string // optional\n\tbody          string\n\tisHidden      bool\n\tisReadonly    bool\n\treplies       avl.Tree // Post.id -\u003e *Post\n\trepliesAll    avl.Tree // Post.id -\u003e *Post (all replies, for top-level posts)\n\treposts       avl.Tree // Board.id -\u003e Post.id\n\tflags         []Flag\n\tthreadID      PostID  // original Post.id\n\tparentID      PostID  // parent Post.id (if reply or repost)\n\trepostBoardID BoardID // original Board.id (if repost)\n\trepostsCount  uint64\n\tcreatedAt     time.Time\n\tupdatedAt     time.Time\n}\n\nfunc newPost(board *Board, id PostID, creator std.Address, title, body string, threadID, parentID PostID, repostBoardID BoardID) *Post {\n\treturn \u0026Post{\n\t\tboard:         board,\n\t\tid:            id,\n\t\tcreator:       creator,\n\t\ttitle:         title,\n\t\tbody:          body,\n\t\treplies:       avl.Tree{},\n\t\trepliesAll:    avl.Tree{},\n\t\treposts:       avl.Tree{},\n\t\tthreadID:      threadID,\n\t\tparentID:      parentID,\n\t\trepostBoardID: repostBoardID,\n\t\tcreatedAt:     time.Now(),\n\t}\n}\n\nfunc (post *Post) IsRepost() bool {\n\treturn post.repostBoardID != 0\n}\n\nfunc (post *Post) IsThread() bool {\n\t// repost threads also have parent ID\n\treturn post.parentID == 0 || post.IsRepost()\n}\n\nfunc (post *Post) GetBoard() *Board {\n\treturn post.board\n}\n\nfunc (post *Post) GetPostID() PostID {\n\treturn post.id\n}\n\nfunc (post *Post) GetParentID() PostID {\n\treturn post.parentID\n}\n\nfunc (post *Post) GetRepostBoardID() BoardID {\n\treturn post.repostBoardID\n}\n\nfunc (post *Post) GetCreator() std.Address {\n\treturn post.creator\n}\n\nfunc (post *Post) GetTitle() string {\n\treturn post.title\n}\n\nfunc (post *Post) GetBody() string {\n\treturn post.body\n}\n\nfunc (post *Post) GetCreatedAt() time.Time {\n\treturn post.createdAt\n}\n\nfunc (post *Post) GetUpdatedAt() time.Time {\n\treturn post.updatedAt\n}\n\nfunc (post *Post) AddFlag(flag Flag) bool {\n\t// TODO: sort flags for fast search in case of big thresholds\n\tfor _, v := range post.flags {\n\t\tif v.User == flag.User {\n\t\t\treturn false\n\t\t}\n\t}\n\n\tpost.flags = append(post.flags, flag)\n\treturn true\n}\n\nfunc (post *Post) FlagsCount() int {\n\treturn len(post.flags)\n}\n\nfunc (post *Post) SetVisible(isVisible bool) {\n\tpost.isHidden = !isVisible\n}\n\nfunc (post *Post) IsHidden() bool {\n\treturn post.isHidden\n}\n\nfunc (post *Post) SetReadonly(isReadonly bool) {\n\tpost.isReadonly = isReadonly\n}\n\nfunc (post *Post) IsReadonly() bool {\n\treturn post.isReadonly\n}\n\nfunc (post *Post) AddReply(creator std.Address, body string) *Post {\n\tboard := post.board\n\tpid := board.incGetPostID()\n\tpKey := pid.Key()\n\treply := newPost(board, pid, creator, \"\", body, post.threadID, post.id, 0)\n\t// TODO: Figure out how to remove this redundancy of data \"replies==repliesAll\" in threads\n\tpost.replies.Set(pKey, reply)\n\tif post.threadID == post.id {\n\t\tpost.repliesAll.Set(pKey, reply)\n\t} else {\n\t\tthread, _ := board.GetThread(post.threadID)\n\t\tthread.repliesAll.Set(pKey, reply)\n\t}\n\treturn reply\n}\n\nfunc (post *Post) Update(title string, body string) {\n\tpost.title = title\n\tpost.body = body\n\tpost.updatedAt = time.Now()\n}\n\nfunc (post *Post) HasReplies() bool {\n\treturn post.replies.Size() \u003e 0\n}\n\nfunc (thread *Post) GetReply(pid PostID) (_ *Post, found bool) {\n\tv, found := thread.repliesAll.Get(pid.Key())\n\tif !found {\n\t\treturn nil, false\n\t}\n\treturn v.(*Post), true\n}\n\nfunc (post *Post) AddRepostTo(creator std.Address, repost *Post, dst *Board) {\n\tif !post.IsThread() {\n\t\tpanic(\"cannot repost non-thread post\")\n\t}\n\n\tpost.repostsCount++\n\tdst.threads.Set(repost.id.Key(), repost)\n\tpost.reposts.Set(dst.id.Key(), repost.id)\n}\n\nfunc (post *Post) DeleteReply(replyID PostID) error {\n\tif !post.IsThread() {\n\t\t// TODO: Allow removing replies from parent replies too\n\t\tpanic(\"cannot delete reply from a non-thread post\")\n\t}\n\n\tif post.id == replyID {\n\t\treturn errors.New(\"expected an ID of an inner reply\")\n\t}\n\n\tkey := replyID.Key()\n\tv, removed := post.repliesAll.Remove(key)\n\tif !removed {\n\t\treturn errors.New(\"reply not found in thread\")\n\t}\n\n\t// TODO: Shouldn't reply be hidden instead of deleted? Maybe replace reply by a deleted message.\n\treply := v.(*Post)\n\tif reply.parentID != post.id {\n\t\tparent, _ := post.GetReply(reply.parentID)\n\t\tparent.replies.Remove(key)\n\t} else {\n\t\tpost.replies.Remove(key)\n\t}\n\treturn nil\n}\n\nfunc (post *Post) GetSummary() string {\n\treturn summaryOf(post.body, 80)\n}\n\nfunc (post *Post) GetURL() string {\n\tif post.IsThread() {\n\t\treturn post.board.GetURLFromThreadID(post.id)\n\t}\n\treturn post.board.GetURLFromReplyID(post.threadID, post.id)\n}\n\nfunc (post *Post) GetReplyFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"CreateReply\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"replyID\", \"0\",\n\t\t\t\"body\", \"\",\n\t\t)\n\t}\n\treturn txlink.Call(\n\t\t\"CreateReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t\t\"body\", \"\",\n\t)\n}\n\nfunc (post *Post) GetRepostFormURL() string {\n\treturn txlink.Call(\n\t\t\"CreateRepost\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.id.String(),\n\t\t\"title\", \"\",\n\t\t\"body\", \"\",\n\t\t\"destinationBoardID\", \"\",\n\t)\n}\n\nfunc (post *Post) GetDeleteFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"DeleteThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t)\n\t}\n\treturn txlink.Call(\n\t\t\"DeleteReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t)\n}\n\nfunc (post *Post) GetEditFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"EditThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"title\", post.GetTitle(),\n\t\t\t\"body\", post.GetBody(),\n\t\t)\n\t}\n\n\treturn txlink.Call(\n\t\t\"EditReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t\t\"body\", post.GetBody(),\n\t)\n}\n\nfunc (post *Post) GetFlagFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"FlagThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"reason\", \"\",\n\t\t)\n\t}\n\n\treturn txlink.Call(\n\t\t\"FlagReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t\t\"reason\", \"\",\n\t)\n}\n\nfunc (post *Post) RenderSummary() string {\n\tvar (\n\t\tb       strings.Builder\n\t\tpostURL = post.GetURL()\n\t\ttitle   = post.title\n\t)\n\n\tb.WriteString(\"**≡ \" + newLink(summaryOf(title, 80), postURL) + \"**  \\n\")\n\tb.WriteString(\"Created by \" + newUserLink(post.creator) + \" on \" + post.createdAt.Format(dateFormat))\n\tb.WriteString(\"  \\n**\")\n\tb.WriteString(strconv.Itoa(post.repliesAll.Size()) + \" replies • \")\n\tb.WriteString(strconv.Itoa(post.reposts.Size()) + \" reposts**\\n\")\n\treturn b.String()\n}\n\nfunc (post *Post) renderSourcePost(indent string) (string, *Post) {\n\tif !post.IsRepost() {\n\t\treturn \"\", nil\n\t}\n\n\tindent += \"\u003e \"\n\n\t// TODO: figure out a way to decouple posts from a global storage.\n\tboard, ok := getBoard(post.repostBoardID)\n\tif !ok {\n\t\treturn indentBody(indent, \"*⚠ Source board has been deleted*\\n\\n\"), nil\n\t}\n\n\tsrcPost, ok := board.GetThread(post.parentID)\n\tif !ok {\n\t\treturn indentBody(indent, \"*⚠ Source post has been deleted*\\n\\n\"), nil\n\t}\n\n\tif srcPost.isHidden {\n\t\treturn indentBody(indent, \"*⚠ Source post has been flagged as inappropriate*\\n\\n\"), nil\n\t}\n\n\treturn indentBody(indent, srcPost.GetSummary()) + \"\\n\\n\", srcPost\n}\n\n// renderPostContent renders post text content (including repost body).\n// Function will dump a predefined message instead of a body if post is hidden.\nfunc (post *Post) renderPostContent(sb *strings.Builder, indent string, levels int) {\n\tif post.isHidden {\n\t\t// Flagged comment should be hidden, but replies still visible (see: #3480)\n\t\t// Flagged threads will be hidden by render function caller.\n\t\tsb.WriteString(indentBody(indent, \"_⚠ Reply is hidden as it has been flagged as inappropriate_\"))\n\t\tsb.WriteString(\"\\n\")\n\t\treturn\n\t}\n\n\tsrcContent, srcPost := post.renderSourcePost(indent)\n\tif post.IsRepost() \u0026\u0026 srcPost != nil {\n\t\tsb.WriteString(\"  \\nThis thread is a repost of [another thread](\" + srcPost.GetURL() + \"): \\n\")\n\t}\n\n\tsb.WriteString(srcContent)\n\n\tif post.IsRepost() \u0026\u0026 srcPost == nil \u0026\u0026 len(post.body) \u003e 0 {\n\t\t// Add a newline to separate source deleted message from repost body content\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\tsb.WriteString(indentBody(indent, post.body))\n\tsb.WriteString(\"\\n\")\n\n\tif post.IsThread() {\n\t\t// Split content and controls for threads.\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\t// Buttons \u0026 counters\n\tsb.WriteString(indent)\n\tif !post.IsThread() {\n\t\tsb.WriteString(\"  \\n\")\n\t\tsb.WriteString(indent)\n\t}\n\n\tsb.WriteString(\"Created by \")\n\tsb.WriteString(newUserLink(post.creator))\n\tsb.WriteString(\" on \")\n\tsb.WriteString(post.createdAt.Format(dateFormat))\n\n\t// Add a reply view link to each top level reply\n\tif !post.IsThread() {\n\t\tsb.WriteString(\", \")\n\t\tsb.WriteString(newLink(\"#\"+post.id.String(), post.GetURL()))\n\t}\n\n\tif post.repostsCount \u003e 0 {\n\t\tsb.WriteString(\", \")\n\t\tsb.WriteString(strconv.FormatUint(post.repostsCount, 10))\n\t\tsb.WriteString(\" repost(s)\")\n\t}\n\n\tsb.WriteString(\"  \\n\")\n\tsb.WriteString(newLink(\"Flag\", post.GetFlagFormURL()))\n\n\tif post.IsThread() {\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Repost\", post.GetRepostFormURL()))\n\t}\n\n\tisReadonly := post.IsReadonly() || post.GetBoard().IsReadonly()\n\tif !isReadonly {\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Reply\", post.GetReplyFormURL()))\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Edit\", post.GetEditFormURL()))\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Delete\", post.GetDeleteFormURL()))\n\t}\n\n\tif levels == 0 {\n\t\tsb.WriteString(\" • \")\n\t\tif post.IsThread() {\n\t\t\tsb.WriteString(newLink(\"Show all Replies\", post.board.GetURLFromThreadID(post.GetPostID())))\n\t\t} else {\n\t\t\tsb.WriteString(newLink(\"View Thread\", post.board.GetURLFromThreadID(post.threadID)))\n\t\t}\n\t}\n\n\tsb.WriteString(\" \\n\")\n}\n\nfunc (post *Post) Render(path string, indent string, levels int) string {\n\tif post == nil {\n\t\treturn \"nil post\"\n\t}\n\n\t// TODO: pass a builder as arg into Render.\n\tvar sb strings.Builder\n\n\t// Thread reposts might not have a title, if so get title from source thread\n\ttitle := post.title\n\tif post.IsRepost() \u0026\u0026 title == \"\" {\n\t\tif board, ok := getBoard(post.repostBoardID); ok {\n\t\t\tif src, ok := board.GetThread(post.parentID); ok {\n\t\t\t\ttitle = src.GetTitle()\n\t\t\t}\n\t\t}\n\t}\n\n\tsb.WriteString(indent)\n\tif title != \"\" { // Replies don't have a title\n\t\tsb.WriteString(\"## \" + title + \"\\n\")\n\t}\n\tsb.WriteString(indent + \"\\n\")\n\n\tpost.renderPostContent(\u0026sb, indent, levels)\n\n\tif post.replies.Size() == 0 {\n\t\treturn sb.String()\n\t}\n\n\t// XXX: This triggers for reply views\n\tif levels == 0 {\n\t\tsb.WriteString(indent + \"\\n\")\n\t\tsb.WriteString(indent)\n\t\tsb.WriteString(\"\\n\")\n\t\treturn sb.String()\n\t}\n\n\tif path != \"\" {\n\t\tsb.WriteString(post.renderTopLevelReplies(path, indent, levels-1))\n\t} else {\n\t\tsb.WriteString(post.renderSubReplies(indent, levels-1))\n\t}\n\treturn sb.String()\n}\n\nfunc (post *Post) renderTopLevelReplies(path, indent string, levels int) string {\n\tp, err := pager.New(path, post.replies.Size(), pager.WithPageSize(pageSizeReplies))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tvar (\n\t\tb              strings.Builder\n\t\tcommentsIndent = indent + \"\u003e \"\n\t)\n\n\trender := func(_ string, v any) bool {\n\t\treply := v.(*Post)\n\n\t\tb.WriteString(indent)\n\t\tb.WriteString(\"\\n\")\n\t\tb.WriteString(reply.Render(\"\", commentsIndent, levels-1))\n\t\treturn false\n\t}\n\n\tb.WriteString(\"\\n\\n---\\nSort by: \")\n\tr := realmpath.Parse(path)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tb.WriteString(newLink(\"newest first\", r.String()))\n\t\tb.WriteString(\"\\n\")\n\t\tpost.replies.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tb.WriteString(newLink(\"oldest first\", r.String()))\n\t\tb.WriteString(\"\\n\")\n\t\tpost.replies.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tb.WriteString(\"\\n---\\n\")\n\t\tb.WriteString(pager.Picker(p))\n\t}\n\n\treturn b.String()\n}\n\nfunc (post *Post) renderSubReplies(indent string, levels int) string {\n\tvar (\n\t\tb              strings.Builder\n\t\tcommentsIndent = indent + \"\u003e \"\n\t)\n\n\tpost.replies.Iterate(\"\", \"\", func(_ string, v any) bool {\n\t\treply := v.(*Post)\n\n\t\tb.WriteString(indent)\n\t\tb.WriteString(\"\\n\")\n\t\tb.WriteString(reply.Render(\"\", commentsIndent, levels-1))\n\t\treturn false\n\t})\n\n\treturn b.String()\n}\n\nfunc (post *Post) RenderInner() string {\n\tif post.IsThread() {\n\t\tpanic(\"unexpected thread\")\n\t}\n\n\tvar (\n\t\ts         string\n\t\tthreadID  = post.threadID\n\t\tthread, _ = post.board.GetThread(threadID) // TODO: This seems redundant (post == thread)\n\t)\n\n\t// Fully render parent if it's not a repost.\n\tif !post.IsRepost() {\n\t\tvar (\n\t\t\tparent   *Post\n\t\t\tparentID = post.parentID\n\t\t)\n\n\t\tif thread.id == parentID {\n\t\t\tparent = thread\n\t\t} else {\n\t\t\tparent, _ = thread.GetReply(parentID)\n\t\t}\n\n\t\ts += parent.Render(\"\", \"\", 0) + \"\\n\"\n\t}\n\n\ts += post.Render(\"\", \"\u003e \", 5)\n\treturn s\n}\n"},{"name":"post_test.gno","body":"package boards2\n\nimport (\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nfunc TestPostUpdate(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tboard := newBoard(1, \"test123\", addr, perms)\n\tcreator := testutils.TestAddress(\"creator\")\n\tpost := newPost(board, 1, creator, \"Title\", \"Body\", 1, 0, 0)\n\ttitle := \"New Title\"\n\tbody := \"New body\"\n\n\tpost.Update(title, body)\n\n\tuassert.Equal(t, title, post.GetTitle())\n\tuassert.Equal(t, body, post.GetBody())\n\tuassert.False(t, post.GetUpdatedAt().IsZero())\n}\n\nfunc TestPostAddFlag(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tpost := createTestThread(t)\n\n\tflag := Flag{\n\t\tUser:   addr,\n\t\tReason: \"foobar\",\n\t}\n\tuassert.True(t, post.AddFlag(flag))\n\tuassert.False(t, post.AddFlag(flag), \"should reject flag from duplicate user\")\n\tuassert.Equal(t, post.FlagsCount(), 1)\n}\n\nfunc TestPostSetVisible(t *testing.T) {\n\tpost := createTestThread(t)\n\tuassert.False(t, post.IsHidden(), \"post should be visible by default\")\n\n\tpost.SetVisible(false)\n\tuassert.True(t, post.IsHidden(), \"post should be hidden\")\n\n\tpost.SetVisible(true)\n\tuassert.False(t, post.IsHidden(), \"post should be visible\")\n}\n\nfunc TestPostAddRepostTo(t *testing.T) {\n\t// TODO: Improve this unit test\n\taddr := testutils.TestAddress(\"creatorDstBoard\")\n\tperms := createDefaultBoardPermissions(addr)\n\tcases := []struct {\n\t\tname, title, body string\n\t\tdstBoard          *Board\n\t\tthread            *Post\n\t\tsetup             func() *Post\n\t\terr               string\n\t}{\n\t\t{\n\t\t\tname:     \"repost thread\",\n\t\t\ttitle:    \"Repost Title\",\n\t\t\tbody:     \"Repost body\",\n\t\t\tdstBoard: newBoard(42, \"dst123\", addr, perms),\n\t\t\tsetup:    func() *Post { return createTestThread(t) },\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid repost from reply\",\n\t\t\tsetup: func() *Post { return createTestReply(t) },\n\t\t\terr:   \"cannot repost non-thread post\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar (\n\t\t\t\trepost  *Post\n\t\t\t\tcreator = testutils.TestAddress(\"repostCreator\")\n\t\t\t\tthread  = tc.setup()\n\t\t\t)\n\n\t\t\tcreateRepost := func() {\n\t\t\t\tvar repostId PostID\n\t\t\t\tif tc.dstBoard != nil {\n\t\t\t\t\trepostId = tc.dstBoard.incGetPostID()\n\t\t\t\t}\n\n\t\t\t\trepost = newPost(tc.dstBoard, repostId, creator, tc.title, tc.body, repostId, thread.GetPostID(), thread.GetBoard().GetID())\n\t\t\t\tthread.AddRepostTo(creator, repost, tc.dstBoard)\n\t\t\t}\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\tuassert.PanicsWithMessage(t, tc.err, createRepost)\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\tuassert.NotPanics(t, createRepost)\n\t\t\t}\n\n\t\t\tr, found := tc.dstBoard.GetThread(repost.GetPostID())\n\t\t\tuassert.True(t, found)\n\t\t\tuassert.True(t, repost == r)\n\t\t\tuassert.Equal(t, tc.title, repost.GetTitle())\n\t\t\tuassert.Equal(t, tc.body, repost.GetBody())\n\t\t\tuassert.Equal(t, uint(thread.GetBoard().GetID()), uint(repost.GetRepostBoardID()))\n\t\t})\n\t}\n}\n\nfunc TestNewThread(t *testing.T) {\n\tcreator := testutils.TestAddress(\"creator\")\n\ttitle := \"Test Title\"\n\tbody := strings.Repeat(\"A\", 82)\n\tboardID := BoardID(1)\n\tthreadID := PostID(42)\n\tboardName := \"test123\"\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(boardID, boardName, creator, perms)\n\turl := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2:%s/%d\",\n\t\tboardName,\n\t\tuint(threadID),\n\t)\n\treplyURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=CreateReply\u0026boardID=%d\u0026body=\u0026replyID=0\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\teditURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=EditThread\u0026boardID=%d\u0026body=%s\u0026threadID=%d\u0026title=%s\",\n\t\tuint(boardID),\n\t\tbody,\n\t\tuint(threadID),\n\t\tstrings.ReplaceAll(title, \" \", \"+\"),\n\t)\n\trepostURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=CreateRepost\u0026boardID=%d\u0026body=\u0026destinationBoardID=\u0026threadID=%d\u0026title=\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\tdeleteURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=DeleteThread\u0026boardID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\tflagURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=FlagThread\u0026boardID=%d\u0026reason=\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\n\tthread := newPost(board, threadID, creator, title, body, threadID, 0, 0)\n\n\tuassert.True(t, thread.IsThread())\n\tuassert.Equal(t, uint(threadID), uint(thread.GetPostID()))\n\tuassert.False(t, thread.GetCreatedAt().IsZero())\n\tuassert.True(t, thread.GetUpdatedAt().IsZero())\n\tuassert.Equal(t, title, thread.GetTitle())\n\tuassert.Equal(t, body[:77]+\"...\", thread.GetSummary())\n\tuassert.False(t, thread.HasReplies())\n\tuassert.Equal(t, url, thread.GetURL())\n\tuassert.Equal(t, replyURL, thread.GetReplyFormURL())\n\tuassert.Equal(t, editURL, thread.GetEditFormURL())\n\tuassert.Equal(t, repostURL, thread.GetRepostFormURL())\n\tuassert.Equal(t, deleteURL, thread.GetDeleteFormURL())\n\tuassert.Equal(t, flagURL, thread.GetFlagFormURL())\n}\n\nfunc TestThreadAddReply(t *testing.T) {\n\treplier := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\tthreadID := uint(thread.GetPostID())\n\tbody := \"A reply\"\n\n\treply := thread.AddReply(replier, body)\n\n\tr, found := thread.GetReply(reply.GetPostID())\n\tuassert.True(t, found)\n\tuassert.True(t, reply == r)\n\tuassert.Equal(t, threadID+1, uint(reply.GetPostID()))\n\tuassert.Equal(t, reply.GetCreator(), replier)\n\tuassert.Equal(t, reply.GetBody(), body)\n\tuassert.True(t, thread.HasReplies())\n}\n\nfunc TestThreadGetReply(t *testing.T) {\n\tcases := []struct {\n\t\tname   string\n\t\tthread *Post\n\t\tsetup  func(thread *Post) (replyID PostID)\n\t\tfound  bool\n\t}{\n\t\t{\n\t\t\tname:   \"found\",\n\t\t\tthread: createTestThread(t),\n\t\t\tsetup: func(thread *Post) PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t\tfound: true,\n\t\t},\n\t\t{\n\t\t\tname:   \"not found\",\n\t\t\tthread: createTestThread(t),\n\t\t\tsetup:  func(*Post) PostID { return 42 },\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup(tc.thread)\n\n\t\t\treply, found := tc.thread.GetReply(replyID)\n\n\t\t\tuassert.Equal(t, tc.found, found)\n\t\t\tif reply != nil {\n\t\t\t\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestThreadDeleteReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tcases := []struct {\n\t\tname  string\n\t\tsetup func() PostID\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"ok nested\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.AddReply(testutils.TestAddress(\"replier2\"), \"\").GetPostID()\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid\",\n\t\t\tsetup: func() PostID { return thread.GetPostID() },\n\t\t\terr:   \"expected an ID of an inner reply\",\n\t\t},\n\t\t{\n\t\t\tname:  \"not found\",\n\t\t\tsetup: func() PostID { return 42 },\n\t\t\terr:   \"reply not found in thread\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup()\n\n\t\t\terr := thread.DeleteReply(replyID)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\tuassert.ErrorContains(t, err, tc.err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tuassert.NoError(t, err)\n\t\t\t_, found := thread.GetReply(replyID)\n\t\t\tuassert.False(t, found)\n\t\t})\n\t}\n}\n\nfunc TestThreadRenderSummary(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestThreadRender(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestThreadRenderInner(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestNewReply(t *testing.T) {\n\tcreator := testutils.TestAddress(\"creator\")\n\tbody := strings.Repeat(\"A\", 82)\n\tboardID := BoardID(1)\n\tthreadID := PostID(42)\n\tparentID := PostID(1)\n\treplyID := PostID(2)\n\tboardName := \"test123\"\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(boardID, boardName, creator, perms)\n\turl := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2:%s/%d/%d\",\n\t\tboardName,\n\t\tuint(threadID),\n\t\tuint(replyID),\n\t)\n\treplyURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=CreateReply\u0026boardID=%d\u0026body=\u0026replyID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(replyID),\n\t\tuint(threadID),\n\t)\n\tdeleteURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=DeleteReply\u0026boardID=%d\u0026replyID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(replyID),\n\t\tuint(threadID),\n\t)\n\n\treply := newPost(board, replyID, creator, \"\", body, threadID, parentID, 0)\n\n\tuassert.False(t, reply.IsThread())\n\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\tuassert.False(t, reply.GetCreatedAt().IsZero())\n\tuassert.True(t, reply.GetUpdatedAt().IsZero())\n\tuassert.False(t, reply.HasReplies())\n\tuassert.Equal(t, body[:77]+\"...\", reply.GetSummary())\n\tuassert.Equal(t, url, reply.GetURL())\n\tuassert.Equal(t, replyURL, reply.GetReplyFormURL())\n\tuassert.Equal(t, deleteURL, reply.GetDeleteFormURL())\n}\n\nfunc TestReplyAddReply(t *testing.T) {\n\treplier := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"parentReplier\"), \"\")\n\tparentReplyID := uint(parentReply.GetPostID())\n\tbody := \"A child reply\"\n\n\treply := parentReply.AddReply(replier, body)\n\n\tr, found := thread.GetReply(reply.GetPostID())\n\tuassert.True(t, found)\n\tuassert.True(t, reply == r)\n\tuassert.Equal(t, parentReplyID, uint(reply.GetParentID()))\n\tuassert.Equal(t, parentReplyID+1, uint(reply.GetPostID()))\n\tuassert.Equal(t, reply.GetCreator(), replier)\n\tuassert.Equal(t, reply.GetBody(), body)\n\tuassert.False(t, reply.HasReplies())\n\tuassert.True(t, parentReply.HasReplies())\n}\n\nfunc TestReplyGetReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"parentReplier\"), \"\")\n\tcases := []struct {\n\t\tname  string\n\t\tsetup func() PostID\n\t\tfound bool\n\t}{\n\t\t{\n\t\t\tname: \"found\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := parentReply.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t\tfound: true,\n\t\t},\n\t\t{\n\t\t\tname:  \"not found\",\n\t\t\tsetup: func() PostID { return 42 },\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup()\n\n\t\t\treply, found := thread.GetReply(replyID)\n\n\t\t\tuassert.Equal(t, tc.found, found)\n\t\t\tif reply != nil {\n\t\t\t\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestReplyDeleteReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\treply := parentReply.AddReply(testutils.TestAddress(\"replier2\"), \"\")\n\n\t// NOTE: Deleting a reply from a parent reply should eventually be suported\n\tuassert.PanicsWithMessage(t, \"cannot delete reply from a non-thread post\", func() {\n\t\tparentReply.DeleteReply(reply.GetPostID())\n\t})\n}\n\nfunc TestReplyRender(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc createTestThread(t *testing.T) *Post {\n\tt.Helper()\n\n\tcreator := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(1, \"test_board_123\", creator, perms)\n\treturn board.AddThread(creator, \"Title\", \"Body\")\n}\n\nfunc createTestReply(t *testing.T) *Post {\n\tt.Helper()\n\n\tcreator := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\treturn thread.AddReply(creator, \"Test message\")\n}\n"},{"name":"public.gno","body":"package boards2\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nconst (\n\t// MaxBoardNameLength defines the maximum length allowed for board names.\n\tMaxBoardNameLength = 50\n\n\t// MaxThreadTitleLength defines the maximum length allowed for thread titles.\n\tMaxThreadTitleLength = 100\n\n\t// MaxReplyLength defines the maximum length allowed for replies.\n\tMaxReplyLength = 300\n)\n\nvar (\n\treBoardName = regexp.MustCompile(`(?i)^[a-z]+[a-z0-9_\\-]{2,50}$`)\n\n\t// Minimalistic Markdown line prefix checks that if allowed would\n\t// break the current UI when submitting a reply. It denies replies\n\t// with headings, blockquotes or horizontal lines.\n\treDeniedReplyLinePrefixes = regexp.MustCompile(`(?m)^\\s*(#|---|\u003e)+`)\n)\n\n// SetHelp sets or updates boards realm help content.\nfunc SetHelp(content string) {\n\tcontent = strings.TrimSpace(content)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{content}\n\tgPerms.WithPermission(caller, PermissionRealmHelp, args, func(Args) {\n\t\tgHelp = content\n\t})\n}\n\n// SetPermissions sets a permissions implementation for boards2 realm or a board.\nfunc SetPermissions(bid BoardID, p Permissions) {\n\tassertRealmIsNotLocked()\n\n\tif p == nil {\n\t\tpanic(\"permissions is required\")\n\t}\n\n\tif bid != 0 {\n\t\tassertBoardExists(bid)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{bid}\n\tgPerms.WithPermission(caller, PermissionPermissionsUpdate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\n\t\t// When board ID is zero it means that realm permissions are being updated\n\t\tif bid == 0 {\n\t\t\tgPerms = p\n\n\t\t\tstd.Emit(\n\t\t\t\t\"RealmPermissionsUpdated\",\n\t\t\t\t\"caller\", caller.String(),\n\t\t\t)\n\t\t\treturn\n\t\t}\n\n\t\t// Otherwise update the permissions of a single board\n\t\tboard := mustGetBoard(bid)\n\t\tboard.perms = p\n\n\t\tstd.Emit(\n\t\t\t\"BoardPermissionsUpdated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", bid.String(),\n\t\t)\n\t})\n}\n\n// SetRealmNotice sets a notice to be displayed globally by the realm.\n// An empty message removes the realm notice.\nfunc SetRealmNotice(message string) {\n\tmessage = strings.TrimSpace(message)\n\tcaller := std.PreviousRealm().Address()\n\tgPerms.WithPermission(caller, PermissionRealmNotice, nil, func(Args) {\n\t\tgNotice = message\n\n\t\tstd.Emit(\n\t\t\t\"RealmNoticeChanged\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"message\", message,\n\t\t)\n\t})\n}\n\n// GetBoardIDFromName searches a board by name and returns it's ID.\nfunc GetBoardIDFromName(name string) (_ BoardID, found bool) {\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\treturn 0, false\n\t}\n\treturn v.(*Board).id, true\n}\n\n// CreateBoard creates a new board.\nfunc CreateBoard(name string) BoardID {\n\tassertRealmIsNotLocked()\n\n\tname = strings.TrimSpace(name)\n\tassertIsValidBoardName(name)\n\tassertBoardNameNotExists(name)\n\n\tcaller := std.PreviousRealm().Address()\n\tid := incGetBoardID()\n\targs := Args{name, id}\n\tgPerms.WithPermission(caller, PermissionBoardCreate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardNameNotExists(name)\n\n\t\tperms := createDefaultBoardPermissions(caller)\n\t\tboard := newBoard(id, name, caller, perms)\n\t\tgBoardsByID.Set(id.Key(), board)\n\t\tgBoardsByName.Set(name, board)\n\n\t\tstd.Emit(\n\t\t\t\"BoardCreated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", id.String(),\n\t\t\t\"name\", name,\n\t\t)\n\t})\n\treturn id\n}\n\n// RenameBoard changes the name of an existing board.\n//\n// A history of previous board names is kept when boards are renamed.\n// Because of that boards are also accesible using previous name(s).\nfunc RenameBoard(name, newName string) {\n\tassertRealmIsNotLocked()\n\n\tnewName = strings.TrimSpace(newName)\n\tassertIsValidBoardName(newName)\n\tassertBoardNameNotExists(newName)\n\n\tboard := mustGetBoardByName(name)\n\tassertBoardIsNotFrozen(board)\n\n\tbid := board.GetID()\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{bid, name, newName}\n\tboard.perms.WithPermission(caller, PermissionBoardRename, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardNameNotExists(newName)\n\n\t\tboard := mustGetBoard(bid)\n\t\tboard.aliases = append(board.aliases, board.name)\n\t\tboard.name = newName\n\n\t\t// Index board for the new name keeping previous indexes for older names\n\t\tgBoardsByName.Set(newName, board)\n\n\t\tstd.Emit(\n\t\t\t\"BoardRenamed\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", bid.String(),\n\t\t\t\"name\", name,\n\t\t\t\"newName\", newName,\n\t\t)\n\t})\n}\n\n// CreateThread creates a new thread within a board.\nfunc CreateThread(boardID BoardID, title, body string) PostID {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tbody = strings.TrimSpace(body)\n\tassertBodyIsNotEmpty(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionThreadCreate)\n\n\tthread := board.AddThread(caller, title, body)\n\n\tstd.Emit(\n\t\t\"ThreadCreated\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", thread.GetPostID().String(),\n\t\t\"title\", title,\n\t)\n\n\treturn thread.id\n}\n\n// CreateReply creates a new comment or reply within a thread.\n//\n// The value of `replyID` is only required when creating a reply of another reply.\nfunc CreateReply(boardID BoardID, threadID, replyID PostID, body string) PostID {\n\tassertRealmIsNotLocked()\n\n\tbody = strings.TrimSpace(body)\n\tassertReplyBodyIsValid(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionReplyCreate)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\tassertThreadIsNotFrozen(thread)\n\n\tvar reply *Post\n\tif replyID == 0 {\n\t\t// When the parent reply is the thread just add reply to thread\n\t\treply = thread.AddReply(caller, body)\n\t} else {\n\t\t// Try to get parent reply and add a new child reply\n\t\tparent := mustGetReply(thread, replyID)\n\t\tif parent.IsHidden() || parent.IsReadonly() {\n\t\t\tpanic(\"replying to a hidden or frozen reply is not allowed\")\n\t\t}\n\n\t\treply = parent.AddReply(caller, body)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyCreate\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", reply.GetPostID().String(),\n\t)\n\n\treturn reply.id\n}\n\n// CreateRepost reposts a thread into another board.\nfunc CreateRepost(boardID BoardID, threadID PostID, title, body string, destinationBoardID BoardID) PostID {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tcaller := std.PreviousRealm().Address()\n\tdst := mustGetBoard(destinationBoardID)\n\tassertBoardIsNotFrozen(dst)\n\tassertHasBoardPermission(dst, caller, PermissionThreadRepost)\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\tif thread.IsRepost() {\n\t\tpanic(\"reposting a thread that is a repost is not allowed\")\n\t}\n\n\trepostId := dst.incGetPostID()\n\tbody = strings.TrimSpace(body)\n\trepost := newPost(dst, repostId, caller, title, body, repostId, thread.GetPostID(), thread.GetBoard().GetID())\n\tthread.AddRepostTo(caller, repost, dst)\n\n\tstd.Emit(\n\t\t\"Repost\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"destinationBoardID\", destinationBoardID.String(),\n\t\t\"title\", title,\n\t)\n\n\treturn repostId\n}\n\n// DeleteThread deletes a thread from a board.\n//\n// Threads can be deleted by the users who created them or otherwise by users with special permissions.\nfunc DeleteThread(boardID BoardID, threadID PostID) {\n\t// Council members should always be able to delete\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner) // TODO: Add DeleteThread filetest cases for realm owners\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\n\tif !isRealmOwner {\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertThreadIsNotFrozen(thread)\n\n\t\tif caller != thread.GetCreator() {\n\t\t\tassertHasBoardPermission(board, caller, PermissionThreadDelete)\n\t\t}\n\t}\n\n\t// Hard delete thread and all its replies\n\tboard.DeleteThread(threadID)\n\n\tstd.Emit(\n\t\t\"ThreadDeleted\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t)\n}\n\n// DeleteReply deletes a reply from a thread.\n//\n// Replies can be deleted by the users who created them or otherwise by users with special permissions.\n// Soft deletion is used when the deleted reply contains sub replies, in which case the reply content\n// is replaced by a text informing that reply has been deleted to avoid deleting sub-replies.\nfunc DeleteReply(boardID BoardID, threadID, replyID PostID) {\n\t// Council members should always be able to delete\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner) // TODO: Add DeleteReply filetest cases for realm owners\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\treply := mustGetReply(thread, replyID)\n\n\tif !isRealmOwner {\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertThreadIsNotFrozen(thread)\n\t\tassertReplyIsVisible(reply)\n\t\tassertReplyIsNotFrozen(reply)\n\n\t\tif caller != reply.GetCreator() {\n\t\t\tassertHasBoardPermission(board, caller, PermissionReplyDelete)\n\t\t}\n\t}\n\n\t// Soft delete reply by changing its body when it contains\n\t// sub-replies, otherwise hard delete it.\n\tif reply.HasReplies() {\n\t\treply.Update(reply.GetTitle(), \"This reply has been deleted\")\n\t} else {\n\t\tthread.DeleteReply(replyID)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyDeleted\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t)\n}\n\n// EditThread updates the title and body of thread.\n//\n// Threads can be updated by the users who created them or otherwise by users with special permissions.\nfunc EditThread(boardID BoardID, threadID PostID, title, body string) {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\tbody = strings.TrimSpace(body)\n\tif !thread.IsRepost() {\n\t\tassertBodyIsNotEmpty(body)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tif caller != thread.GetCreator() {\n\t\tassertHasBoardPermission(board, caller, PermissionThreadEdit)\n\t}\n\n\tthread.Update(title, body)\n\n\tstd.Emit(\n\t\t\"ThreadEdited\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"title\", title,\n\t)\n}\n\n// EditReply updates the body of comment or reply.\n//\n// Replies can be updated only by the users who created them.\nfunc EditReply(boardID BoardID, threadID, replyID PostID, body string) {\n\tassertRealmIsNotLocked()\n\n\tbody = strings.TrimSpace(body)\n\tassertReplyBodyIsValid(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\tassertReplyIsNotFrozen(reply)\n\n\tcaller := std.PreviousRealm().Address()\n\tif caller != reply.GetCreator() {\n\t\tpanic(\"only the reply creator is allowed to edit it\")\n\t}\n\n\treply.Update(\"\", body)\n\n\tstd.Emit(\n\t\t\"ReplyEdited\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"body\", body,\n\t)\n}\n\n// InviteMember adds a member to the realm or to a boards.\n//\n// A role can optionally be specified to be assigned to the new member.\n// Board ID is only required when inviting a member to a board.\nfunc InviteMember(boardID BoardID, user std.Address, role Role) {\n\tassertUserAddressIsValid(user)\n\tassertMembersUpdateIsEnabled(boardID)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{user, role}\n\tperms.WithPermission(caller, PermissionMemberInvite, args, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif err := perms.AddUser(user, role); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"MemberInvited\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", user.String(),\n\t\t\t\"role\", string(role),\n\t\t)\n\t})\n}\n\n// RemoveMember removes a member from the realm or a boards.\n//\n// Board ID is only required when removing a member from board.\nfunc RemoveMember(boardID BoardID, member std.Address) {\n\tassertMembersUpdateIsEnabled(boardID)\n\tassertMemberAddressIsValid(member)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\tperms.WithPermission(caller, PermissionMemberRemove, Args{member}, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif !perms.RemoveUser(member) {\n\t\t\tpanic(\"member not found\")\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"MemberRemoved\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", member.String(),\n\t\t)\n\t})\n}\n\n// IsMember checks if an user is a member of the realm or a board.\n//\n// Board ID is only required when checking if a user is a member of a board.\nfunc IsMember(boardID BoardID, user std.Address) bool {\n\tassertUserAddressIsValid(user)\n\n\tif boardID != 0 {\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tperms := mustGetPermissions(boardID)\n\treturn perms.HasUser(user)\n}\n\n// HasMemberRole checks if a realm or board member has a specific role assigned.\n//\n// Board ID is only required when checking a member of a board.\nfunc HasMemberRole(boardID BoardID, member std.Address, role Role) bool {\n\tassertMemberAddressIsValid(member)\n\n\tif boardID != 0 {\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tperms := mustGetPermissions(boardID)\n\treturn perms.HasRole(member, role)\n}\n\n// ChangeMemberRole changes the role of a realm or board member.\n//\n// Board ID is only required when changing the role for a member of a board.\nfunc ChangeMemberRole(boardID BoardID, member std.Address, role Role) {\n\tassertMemberAddressIsValid(member)\n\tassertMembersUpdateIsEnabled(boardID)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{boardID, member, role}\n\tperms.WithPermission(caller, PermissionRoleChange, args, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif err := perms.SetUserRoles(member, role); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"RoleChanged\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", member.String(),\n\t\t\t\"newRole\", string(role),\n\t\t)\n\t})\n}\n\n// IterateRealmMembers iterates realm members.\n// The iteration is done only for realm members, board members are not iterated.\nfunc IterateRealmMembers(offset int, fn UsersIterFn) (halted bool) {\n\tcount := gPerms.UsersCount() - offset\n\treturn gPerms.IterateUsers(offset, count, fn)\n}\n\n// IterateBoards iterates realm boards.\nfunc IterateBoards(offset int, fn func(ReadonlyBoard) bool) (halted bool) {\n\tcount := gBoardsByID.Size() - offset\n\treturn gBoardsByID.IterateByOffset(offset, count, func(_ string, v any) bool {\n\t\tboard, _ := v.(*Board)\n\t\treturn fn(readonlyBoard{board})\n\t})\n}\n\nfunc assertMemberAddressIsValid(member std.Address) {\n\tif !member.IsValid() {\n\t\tpanic(\"invalid member address\")\n\t}\n}\n\nfunc assertUserAddressIsValid(user std.Address) {\n\tif !user.IsValid() {\n\t\tpanic(\"invalid user address\")\n\t}\n}\n\nfunc assertHasBoardPermission(b *Board, user std.Address, p Permission) {\n\tif !b.perms.HasPermission(user, p) {\n\t\tpanic(\"unauthorized\")\n\t}\n}\n\nfunc assertBoardExists(id BoardID) {\n\tif _, found := getBoard(id); !found {\n\t\tpanic(\"board not found: \" + id.String())\n\t}\n}\n\nfunc assertBoardIsNotFrozen(b *Board) {\n\tif b.IsReadonly() {\n\t\tpanic(\"board is frozen\")\n\t}\n}\n\nfunc assertIsValidBoardName(name string) {\n\tsize := len(name)\n\tif size == 0 {\n\t\tpanic(\"board name is empty\")\n\t}\n\n\tif size \u003e MaxBoardNameLength {\n\t\tn := strconv.Itoa(MaxBoardNameLength)\n\t\tpanic(\"board name is too long, maximum allowed is \" + n + \" characters\")\n\t}\n\n\tif !reBoardName.MatchString(name) {\n\t\tpanic(\"board name contains invalid characters\")\n\t}\n}\n\nfunc assertThreadIsNotFrozen(t *Post) {\n\tif t.IsReadonly() {\n\t\tpanic(\"thread is frozen\")\n\t}\n}\n\nfunc assertReplyIsNotFrozen(r *Post) {\n\tif r.IsReadonly() {\n\t\tpanic(\"reply is frozen\")\n\t}\n}\n\nfunc assertNameIsNotEmpty(name string) {\n\tif name == \"\" {\n\t\tpanic(\"name is empty\")\n\t}\n}\n\nfunc assertTitleIsValid(title string) {\n\tif title == \"\" {\n\t\tpanic(\"title is empty\")\n\t}\n\n\tif len(title) \u003e MaxThreadTitleLength {\n\t\tn := strconv.Itoa(MaxThreadTitleLength)\n\t\tpanic(\"thread title is too long, maximum allowed is \" + n + \" characters\")\n\t}\n}\n\nfunc assertBodyIsNotEmpty(body string) {\n\tif body == \"\" {\n\t\tpanic(\"body is empty\")\n\t}\n}\n\nfunc assertBoardNameNotExists(name string) {\n\tif gBoardsByName.Has(name) {\n\t\tpanic(\"board already exists\")\n\t}\n}\n\nfunc assertThreadExists(b *Board, threadID PostID) {\n\tif _, found := b.GetThread(threadID); !found {\n\t\tpanic(\"thread not found: \" + threadID.String())\n\t}\n}\n\nfunc assertReplyExists(thread *Post, replyID PostID) {\n\tif _, found := thread.GetReply(replyID); !found {\n\t\tpanic(\"reply not found: \" + replyID.String())\n\t}\n}\n\nfunc assertThreadIsVisible(thread *Post) {\n\tif thread.IsHidden() {\n\t\tpanic(\"thread is hidden\")\n\t}\n}\n\nfunc assertReplyIsVisible(thread *Post) {\n\tif thread.IsHidden() {\n\t\tpanic(\"reply is hidden\")\n\t}\n}\n\nfunc assertReplyBodyIsValid(body string) {\n\tassertBodyIsNotEmpty(body)\n\n\tif len(body) \u003e MaxReplyLength {\n\t\tn := strconv.Itoa(MaxReplyLength)\n\t\tpanic(\"reply is too long, maximum allowed is \" + n + \" characters\")\n\t}\n\n\tif reDeniedReplyLinePrefixes.MatchString(body) {\n\t\tpanic(\"using Markdown headings, blockquotes or horizontal lines is not allowed in replies\")\n\t}\n}\n\nfunc assertMembersUpdateIsEnabled(boardID BoardID) {\n\tif boardID != 0 {\n\t\tassertRealmIsNotLocked()\n\t} else {\n\t\tassertRealmMembersAreNotLocked()\n\t}\n}\n"},{"name":"public_flag.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// SetFlaggingThreshold sets the number of flags required to hide a thread or comment.\n//\n// Threshold is only applicable within the board where it's setted.\nfunc SetFlaggingThreshold(boardID BoardID, threshold int) {\n\tif threshold \u003c 1 {\n\t\tpanic(\"invalid flagging threshold\")\n\t}\n\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{boardID, threshold}\n\tboard.perms.WithPermission(caller, PermissionBoardFlaggingUpdate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\n\t\tgFlaggingThresholds.Set(boardID.String(), threshold)\n\t\tstd.Emit(\n\t\t\t\"FlaggingThresholdUpdated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"threshold\", strconv.Itoa(threshold),\n\t\t)\n\t})\n}\n\n// GetFlaggingThreshold returns the number of flags required to hide a thread or comment within a board.\nfunc GetFlaggingThreshold(boardID BoardID) int {\n\tassertBoardExists(boardID)\n\treturn getFlaggingThreshold(boardID)\n}\n\n// FlagThread adds a new flag to a thread.\n//\n// Flagging requires special permissions and hides the thread when\n// the number of flags reaches a pre-defined flagging threshold.\nfunc FlagThread(boardID BoardID, threadID PostID, reason string) {\n\tboard := mustGetBoard(boardID)\n\n\t// Realm owners should be able to flag without permissions even when board is frozen\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner)\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertHasBoardPermission(board, caller, PermissionThreadFlag)\n\t}\n\n\tt, ok := board.GetThread(threadID)\n\tif !ok {\n\t\tpanic(\"post doesn't exist\")\n\t}\n\tassertThreadIsNotFrozen(t)\n\n\tf := Flag{\n\t\tUser:   caller,\n\t\tReason: reason,\n\t}\n\n\t// Realm owners can hide with a single flag\n\thide := flagItem(t, f, getFlaggingThreshold(boardID))\n\tif hide || isRealmOwner {\n\t\tt.SetVisible(false)\n\t}\n\n\tstd.Emit(\n\t\t\"ThreadFlagged\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"reason\", reason,\n\t)\n}\n\n// FlagReply adds a new flag to a comment or reply.\n//\n// Flagging requires special permissions and hides the comment or reply\n// when the number of flags reaches a pre-defined flagging threshold.\nfunc FlagReply(boardID BoardID, threadID, replyID PostID, reason string) {\n\tboard := mustGetBoard(boardID)\n\n\t// Realm owners should be able to flag without permissions even when board is frozen\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner)\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertHasBoardPermission(board, caller, PermissionReplyFlag)\n\t}\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsNotFrozen(thread)\n\n\tf := Flag{\n\t\tUser:   caller,\n\t\tReason: reason,\n\t}\n\n\t// Realm owners can hide with a single flag\n\thide := flagItem(reply, f, getFlaggingThreshold(boardID))\n\tif hide || isRealmOwner {\n\t\treply.SetVisible(false)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyFlagged\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"reason\", reason,\n\t)\n}\n"},{"name":"public_freeze.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// FreezeBoard freezes a board so no more threads and comments can be created or modified.\nfunc FreezeBoard(boardID BoardID) {\n\tsetBoardReadonly(boardID, true)\n}\n\n// UnfreezeBoard removes frozen status from a board.\nfunc UnfreezeBoard(boardID BoardID) {\n\tsetBoardReadonly(boardID, false)\n}\n\n// IsBoardFrozen checks if a board has been frozen.\nfunc IsBoardFrozen(boardID BoardID) bool {\n\tboard := mustGetBoard(boardID)\n\treturn board.IsReadonly()\n}\n\n// FreezeThread freezes a thread so thread cannot be replied, modified or deleted.\n//\n// Fails if board is frozen.\nfunc FreezeThread(boardID BoardID, threadID PostID) {\n\tsetThreadReadonly(boardID, threadID, true)\n}\n\n// UnfreezeThread removes frozen status from a thread.\n//\n// Fails if board is frozen.\nfunc UnfreezeThread(boardID BoardID, threadID PostID) {\n\tsetThreadReadonly(boardID, threadID, false)\n}\n\n// IsThreadFrozen checks if a thread has been frozen.\n//\n// Returns true if board is frozen.\nfunc IsThreadFrozen(boardID BoardID, threadID PostID) bool {\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\treturn board.IsReadonly() || thread.IsReadonly()\n}\n\n// UnfreezeReply removes frozen status from a reply.\n//\n// Fails when parent thread or board are frozen.\nfunc UnfreezeReply(boardID BoardID, threadID, replyID PostID) {\n\t// XXX: Is there a use case for also freezing replies?\n\tsetReplyReadonly(boardID, threadID, replyID, false)\n}\n\n// FreezeReply freezes a thread reply so it cannot be modified or deleted.\n//\n// Fails when parent thread or board are frozen.\nfunc FreezeReply(boardID BoardID, threadID, replyID PostID) {\n\tsetReplyReadonly(boardID, threadID, replyID, true)\n}\n\n// IsReplyFrozen checks if a thread reply has been frozen.\n//\n// Returns true when board or a parent thread is frozen.\nfunc IsReplyFrozen(boardID BoardID, threadID, replyID PostID) bool {\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\n\treturn board.IsReadonly() || thread.IsReadonly() || reply.IsReadonly()\n}\n\nfunc setReplyReadonly(boardID BoardID, threadID, replyID PostID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionReplyFreeze)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\n\tif isReadonly {\n\t\tassertReplyIsNotFrozen(reply)\n\t}\n\n\treply.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"ReplyFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n\nfunc setThreadReadonly(boardID BoardID, threadID PostID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionThreadFreeze)\n\n\tthread := mustGetThread(board, threadID)\n\tif isReadonly {\n\t\tassertThreadIsNotFrozen(thread)\n\t}\n\n\tthread.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"ThreadFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n\nfunc setBoardReadonly(boardID BoardID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tif isReadonly {\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionBoardFreeze)\n\n\tboard.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"BoardFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n"},{"name":"public_lock.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// LockRealm locks the realm making it readonly.\n//\n// WARNING: Realm can't be unlocked once locked.\n//\n// Realm can also be locked without locking realm members.\n// Realm members can be locked when locking the realm or afterwards.\n// This is relevant for two reasons, one so members can be modified after lock.\n// The other is for realm owners, which can delete threads and comments after lock.\nfunc LockRealm(lockRealmMembers bool) {\n\tassertRealmMembersAreNotLocked()\n\n\t// If realm members are not being locked assert that realm is no locked.\n\t// Members can be locked after locking the realm, in a second `LockRealm` call.\n\tif !lockRealmMembers {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tgPerms.WithPermission(caller, PermissionRealmLock, nil, func(Args) {\n\t\tgLocked.realm = true\n\t\tgLocked.realmMembers = lockRealmMembers\n\n\t\tstd.Emit(\n\t\t\t\"RealmLocked\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"lockRealmMembers\", strconv.FormatBool(lockRealmMembers),\n\t\t)\n\t})\n}\n\n// IsRealmLocked checks if boards realm has been locked.\nfunc IsRealmLocked() bool {\n\treturn gLocked.realm\n}\n\n// AreRealmMembersLocked checks if realm members has been locked.\nfunc AreRealmMembersLocked() bool {\n\treturn gLocked.realmMembers\n}\n\nfunc assertRealmIsNotLocked() { // TODO: Add filtests for locked realm case to all public functions\n\tif gLocked.realm {\n\t\tpanic(\"realm is locked\")\n\t}\n}\n\nfunc assertRealmMembersAreNotLocked() { // TODO: Add filtests for locked members case to all public member functions\n\tif gLocked.realmMembers {\n\t\tpanic(\"realm and members are locked\")\n\t}\n}\n"},{"name":"render.gno","body":"package boards2\n\nimport (\n\t\"net/url\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/mux\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nconst (\n\tpageSizeBoards  = 6\n\tpageSizeThreads = 6\n\tpageSizeReplies = 10\n)\n\nconst menuManageBoard = \"manageBoard\"\n\nfunc Render(path string) string {\n\trouter := mux.NewRouter()\n\trouter.HandleFunc(\"\", renderBoardsList)\n\trouter.HandleFunc(\"help\", renderHelp)\n\trouter.HandleFunc(\"admin-users\", renderMembers)\n\trouter.HandleFunc(\"{board}\", renderBoard)\n\trouter.HandleFunc(\"{board}/members\", renderMembers)\n\trouter.HandleFunc(\"{board}/{thread}\", renderThread)\n\trouter.HandleFunc(\"{board}/{thread}/{reply}\", renderReply)\n\n\trouter.NotFoundHandler = func(res *mux.ResponseWriter, _ *mux.Request) {\n\t\tres.Write(\"Path not found\")\n\t}\n\n\treturn router.Render(path)\n}\n\nfunc renderHelp(res *mux.ResponseWriter, _ *mux.Request) {\n\tres.Write(\"# Boards Help\\n\")\n\tif gHelp != \"\" {\n\t\tres.Write(gHelp)\n\t} else {\n\t\tres.Write(\"### Help content has not been uploaded\\n\")\n\t\tres.Write(\"Do you want to \")\n\t\tres.Write(newLink(\"upload boards help\", txlink.Call(\"SetHelp\", \"content\", \"\")))\n\t\tres.Write(\" ?\")\n\t}\n}\n\nfunc renderBoardsList(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tres.Write(\"# Boards\\n\\n\")\n\trenderBoardListMenu(res, req)\n\tres.Write(\"\\n\\n---\\n\")\n\n\tif gBoardsByID.Size() == 0 {\n\t\tlink := txlink.Call(\"CreateBoard\", \"name\", \"\")\n\t\tres.Write(\"### Currently there are no boards\\n\")\n\t\tres.Write(\"Be the first to \")\n\t\tres.Write(newLink(\"create a new board\", link))\n\t\tres.Write(\" !\")\n\n\t\treturn\n\t}\n\n\tp, err := pager.New(req.RawPath, gBoardsByID.Size(), pager.WithPageSize(pageSizeBoards))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\trender := func(_ string, v any) bool {\n\t\tboard := v.(*Board)\n\n\t\tres.Write(\"**\" + newLink(board.GetName(), board.GetURL()) + \"**  \\n\")\n\t\tres.Write(\"Created by \" + newUserLink(board.creator) + \" \")\n\t\tres.Write(\"on \" + board.createdAt.Format(dateFormat))\n\t\tres.Write(\", #\" + board.id.String() + \"  \\n\")\n\t\tres.Write(\"**\" + strconv.Itoa(board.threads.Size()) + \" threads\")\n\t\tif board.IsReadonly() {\n\t\t\tres.Write(\", read-only\")\n\t\t}\n\n\t\tres.Write(\"**\\n\\n\")\n\t\treturn false\n\t}\n\n\tres.Write(\"Sort by: \")\n\tr := realmpath.Parse(req.RawPath)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tres.Write(newLink(\"newest first\", r.String()))\n\t\tres.Write(\"\\n\\n\")\n\t\tgBoardsByID.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tres.Write(newLink(\"oldest first\", r.String()))\n\t\tres.Write(\"\\n\\n\")\n\t\tgBoardsByID.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tres.Write(\"\\n---\\n\")\n\t\tres.Write(pager.Picker(p))\n\t}\n}\n\nfunc renderBoardListMenu(res *mux.ResponseWriter, req *mux.Request) {\n\tpath := strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\n\tres.Write(newLink(\"Create Board\", txlink.Call(\"CreateBoard\", \"name\", \"\")))\n\tres.Write(\" • \")\n\tres.Write(newLink(\"List Admin Users\", path+\":admin-users\"))\n\tres.Write(\" • \")\n\tres.Write(newLink(\"Help\", path+\":help\"))\n\tres.Write(\"\\n\\n\")\n}\n\nfunc renderBoard(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tlink := newLink(\"create a new board\", txlink.Call(\"CreateBoard\", \"name\", name))\n\t\tres.Write(\"### The board you are looking for does not exist\\n\")\n\t\tres.Write(\"Do you want to \")\n\t\tres.Write(link)\n\t\tres.Write(\" ?\")\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tmenu := renderBoardMenu(board, req)\n\n\tres.Write(board.Render(req.RawPath, menu))\n}\n\nfunc renderBoardMenu(board *Board, req *mux.Request) string {\n\tvar (\n\t\tb               strings.Builder\n\t\tboardMembersURL = board.GetPath() + \"/members\"\n\t)\n\n\tif board.IsReadonly() {\n\t\tb.WriteString(newLink(\"List Members\", boardMembersURL))\n\t\tb.WriteString(\" • \")\n\t\tb.WriteString(newLink(\"Unfreeze Board\", board.GetUnfreezeFormURL()))\n\t\tb.WriteString(\"\\n\")\n\t} else {\n\t\tb.WriteString(newLink(\"Create Thread\", board.GetPostFormURL()))\n\t\tb.WriteString(\" • \")\n\n\t\tmenu := getCurrentMenu(req.RawPath)\n\t\tif menu == menuManageBoard {\n\t\t\tb.WriteString(\"**Manage Board**\")\n\t\t} else {\n\t\t\tb.WriteString(newLink(\"Manage Board\", menuURL(menuManageBoard)))\n\t\t}\n\n\t\tb.WriteString(\"  \\n\")\n\n\t\tif menu == menuManageBoard {\n\t\t\tb.WriteString(\"↳\")\n\t\t\tb.WriteString(newLink(\"Invite Member\", board.GetInviteMemberFormURL()))\n\t\t\tb.WriteString(\" • \")\n\t\t\tb.WriteString(newLink(\"List Members\", boardMembersURL))\n\t\t\tb.WriteString(\" • \")\n\t\t\tb.WriteString(newLink(\"Freeze Board\", board.GetFreezeFormURL()))\n\t\t\tb.WriteString(\"\\n\\n\")\n\t\t}\n\t}\n\n\treturn b.String()\n}\n\nfunc renderThread(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tres.Write(\"Board does not exist: \" + name)\n\t\treturn\n\t}\n\n\trawID := req.GetVar(\"thread\")\n\ttID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid thread ID: \" + rawID)\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tthread, found := board.GetThread(PostID(tID))\n\tif !found {\n\t\tres.Write(\"Thread does not exist with ID: \" + rawID)\n\t} else if thread.IsHidden() {\n\t\tres.Write(\"Thread with ID: \" + rawID + \" has been flagged as inappropriate\")\n\t} else {\n\t\tres.Write(thread.Render(req.RawPath, \"\", 5))\n\t}\n}\n\nfunc renderReply(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tres.Write(\"Board does not exist: \" + name)\n\t\treturn\n\t}\n\n\trawID := req.GetVar(\"thread\")\n\ttID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid thread ID: \" + rawID)\n\t\treturn\n\t}\n\n\trawID = req.GetVar(\"reply\")\n\trID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid reply ID: \" + rawID)\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tthread, found := board.GetThread(PostID(tID))\n\tif !found {\n\t\tres.Write(\"Thread does not exist with ID: \" + req.GetVar(\"thread\"))\n\t\treturn\n\t}\n\n\treply, found := thread.GetReply(PostID(rID))\n\tif !found {\n\t\tres.Write(\"Reply does not exist with ID: \" + rawID)\n\t\treturn\n\t}\n\n\t// Call render even for hidden replies to display children.\n\t// Original comment content will be hidden under the hood.\n\t// See: #3480\n\tres.Write(reply.RenderInner())\n}\n\nfunc renderMembers(res *mux.ResponseWriter, req *mux.Request) {\n\tboardID := BoardID(0)\n\tperms := gPerms\n\tname := req.GetVar(\"board\")\n\tif name != \"\" {\n\t\tv, found := gBoardsByName.Get(name)\n\t\tif !found {\n\t\t\tres.Write(\"### Board not found\")\n\t\t\treturn\n\t\t}\n\n\t\tboard := v.(*Board)\n\t\tboardID = board.GetID()\n\t\tperms = board.perms\n\n\t\tres.Write(\"# \" + board.GetName() + \" Members\\n\")\n\t\tres.Write(\"### These are the board members\\n\\n\")\n\t} else {\n\t\tres.Write(\"# Admin Users\\n\")\n\t\tres.Write(\"### These are the admin users of the realm\\n\\n\")\n\t}\n\n\t// Create a pager with a small page size to reduce\n\t// the number of username lookups per page.\n\tp, err := pager.New(req.RawPath, perms.UsersCount(), pager.WithPageSize(5))\n\tif err != nil {\n\t\tres.Write(err.Error())\n\t\treturn\n\t}\n\n\tres.Write(\"| Member | Role | Actions |\\n| --- | --- | --- |\\n\")\n\tperms.IterateUsers(p.Offset(), p.PageSize(), func(u User) bool {\n\t\tres.Write(\"| \")\n\t\tres.Write(newUserLink(u.Address))\n\t\tres.Write(\" | \")\n\t\tres.Write(rolesToString(u.Roles))\n\t\tres.Write(\" | \")\n\t\tres.Write(newLink(\"remove\", txlink.Call(\n\t\t\t\"RemoveMember\",\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", u.Address.String(),\n\t\t)))\n\t\tres.Write(\" • \")\n\t\tres.Write(newLink(\"change role\", txlink.Call(\n\t\t\t\"ChangeMemberRole\",\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", u.Address.String(),\n\t\t\t\"role\", \"\",\n\t\t)))\n\t\tres.Write(\" |\\n\")\n\t\treturn false\n\t})\n\n\tif p.HasPages() {\n\t\tres.Write(\"\\n\\n\" + pager.Picker(p))\n\t}\n}\n\nfunc renderNotice(res *mux.ResponseWriter) {\n\tif gNotice == \"\" {\n\t\treturn\n\t}\n\n\tres.Write(\"\u003e \")\n\tres.Write(gNotice)\n\tres.Write(\"\\n\\n\")\n}\n\nfunc rolesToString(roles []Role) string {\n\tif len(roles) == 0 {\n\t\treturn \"\"\n\t}\n\n\tnames := make([]string, len(roles))\n\tfor i, r := range roles {\n\t\tnames[i] = string(r)\n\t}\n\treturn strings.Join(names, \", \")\n}\n\nfunc menuURL(name string) string {\n\t// TODO: Menu URL works because no other GET arguments are being used\n\treturn \"?menu=\" + name\n}\n\nfunc getCurrentMenu(rawURL string) string {\n\t_, rawQuery, found := strings.Cut(rawURL, \"?\")\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\tquery, _ := url.ParseQuery(rawQuery)\n\treturn query.Get(\"menu\")\n}\n"},{"name":"z_0_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tbid := boards2.CreateBoard(\"test123\")\n\tprintln(\"ID =\", bid)\n}\n\n// Output:\n// ID = 1\n"},{"name":"z_0_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"\")\n}\n\n// Error:\n// board name is empty\n"},{"name":"z_0_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tboardName = \"test123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(boardName)\n}\n\nfunc main() {\n\tboards2.CreateBoard(boardName)\n}\n\n// Error:\n// board already exists\n"},{"name":"z_0_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n}\n\n// Error:\n// addresses are not allowed as board name\n"},{"name":"z_0_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"gnoland\")\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_0_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar name = strings.Repeat(\"X\", boards2.MaxBoardNameLength+1)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(name)\n}\n\n// Error:\n// board name is too long, maximum allowed is 50 characters\n"},{"name":"z_0_h_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname   = \"test123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\tboards2.InviteMember(0, member, boards2.RoleOwner) // Operate on realm DAO members instead of individual boards\n\ttesting.SetOriginCaller(member)\n\tusers.Register(name)\n}\n\nfunc main() {\n\tbid := boards2.CreateBoard(name)\n\tprintln(\"ID =\", bid)\n}\n\n// Output:\n// ID = 1\n"},{"name":"z_0_i_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"test123\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_10_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\n\t// Invite a moderator to the new board\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\n\t// Create a new thread as a moderator\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_10_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.FlagThread(404, 1, \"\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_10_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Make the next call as an uninvited user\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_10_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, 404, \"\")\n}\n\n// Error:\n// post doesn't exist\n"},{"name":"z_10_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// item flag count threshold exceeded: 1\n"},{"name":"z_10_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to flag threads\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\ttesting.SetOriginCaller(moderator)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_10_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with a specific flagging threshold\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Invite a moderator to the new board\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\n\t// Create a new thread and flag it as a moderator\n\ttesting.SetOriginCaller(moderator)\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// item has been already flagged by a current user\n"},{"name":"z_10_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with flagging threshold greater than 1\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Create a thread so the realm owner can flag and hide it with a single flag\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\t// Also freeze board to make sure that realm owner can still flag the thread\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_11_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, body)\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_11_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"\", \"bar\")\n}\n\n// Error:\n// title is empty\n"},{"name":"z_11_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_11_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.EditThread(404, 1, \"Foo\", \"bar\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_11_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_11_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"bar\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_11_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to edit threads\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, body)\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_11_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid   boards2.BoardID\n\tpid   boards2.PostID\n\ttitle = strings.Repeat(\"X\", boards2.MaxThreadTitleLength+1)\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, \"bar\")\n}\n\n// Error:\n// thread title is too long, maximum allowed is 100 characters\n"},{"name":"z_12_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbody  = \"Test reply\"\n\tpath  = \"test-board/1/2\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, body)\n\n\t// Render content must contain the modified reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \"+body+\"\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_12_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbody  = \"Test reply\"\n\tpath  = \"test-board/1/2\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Create a reply and a sub reply\n\tparentRID := boards2.CreateReply(bid, tid, 0, \"Parent\")\n\trid = boards2.CreateReply(bid, tid, parentRID, \"Child\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, body)\n\n\t// Render content must contain the modified reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e \"+body+\"\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_12_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.EditReply(404, 1, 0, \"body\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_12_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, 404, 0, \"body\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_12_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, 404, \"body\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_12_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"new body\")\n}\n\n// Error:\n// only the reply creator is allowed to edit it\n"},{"name":"z_12_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Flag the reply so it's hidden\n\tboards2.FlagReply(bid, tid, rid, \"reason\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"body\")\n}\n\n// Error:\n// reply is hidden\n"},{"name":"z_12_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_13_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_13_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.FlagReply(404, 1, 1, \"\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_13_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, 404, 1, \"\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_13_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, 404, \"\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_13_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// item flag count threshold exceeded: 1\n"},{"name":"z_13_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_13_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Invite a member using a role with permission to flag replies\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\ttesting.SetOriginCaller(moderator)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_13_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with flagging threshold greater than 1\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Create a reply so the realm owner can flag and hide it with a single flag\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\t// Also freeze board to make sure that realm owner can still flag the reply\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\"))\n}\n\n// Output:\n// true\n"},{"name":"z_14_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Ensure reply doesn't exist\n\tprintln(boards2.Render(\"test-board/1/2\"))\n}\n\n// Output:\n// Reply does not exist with ID: 2\n"},{"name":"z_14_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.DeleteReply(404, 1, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_14_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, 404, 1)\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_14_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, 404)\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_14_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\trid = boards2.CreateReply(bid, tid, 0, \"Parent\")\n\tboards2.CreateReply(bid, tid, rid, \"Child reply\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Render content must contain the releted message instead of reply's body\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e This reply has been deleted\\n\"))\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e Child reply\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_14_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Call using a user that has not permission to delete replies\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_14_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Invite a member using a role with permission to delete replies\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(member)\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Ensure reply doesn't exist\n\tprintln(boards2.Render(\"test-board/1/2\"))\n}\n\n// Output:\n// Reply does not exist with ID: 2\n"},{"name":"z_15_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"Foo\", \"bar\")\n\tboards2.FlagThread(srcBID, srcTID, \"idk\")\n}\n\nfunc main() {\n\t// Repost should fail if source thread is flagged\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_15_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID = 1024\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n}\n\nfunc main() {\n\t// Repost should fail if source thread doesn't exist\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// thread does not exist with ID: 1024\n"},{"name":"z_15_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"Foo\", \"bar\")\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_15_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/ufmt\"\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"original title\", \"original text\")\n}\n\nfunc main() {\n\t// Success case\n\ttID := boards2.CreateRepost(srcBID, srcTID, \"repost title\", \"repost text\", dstBID)\n\tp := ufmt.Sprintf(\"dst-board/%s\", tID)\n\tout := boards2.Render(p)\n\n\tprintln(strings.Contains(out, \"original text\"))\n\tprintln(strings.Contains(out, \"repost title\"))\n\tprintln(strings.Contains(out, \"repost text\"))\n}\n\n// Output:\n// true\n// true\n// true\n"},{"name":"z_15_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Create a board with a thread\n\torigBID := boards2.CreateBoard(\"origin-board\")\n\torigTID := boards2.CreateThread(origBID, \"title\", \"text\")\n\n\t// Create a second board and repost a thread using an empty title\n\tsrcBID = boards2.CreateBoard(\"source-board\")\n\tsrcTID = boards2.CreateRepost(origBID, origTID, \"original title\", \"original text\", srcBID)\n\n\t// Create a third board to try reposting the repost\n\tdstBID = boards2.CreateBoard(\"destination-board\")\n}\n\nfunc main() {\n\tboards2.CreateRepost(srcBID, srcTID, \"repost title\", \"repost text\", dstBID)\n}\n\n// Error:\n// reposting a thread that is a repost is not allowed\n"},{"name":"z_16_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(bid, 4)\n\n\t// Ensure that flagging threshold changed\n\tprintln(boards2.GetFlaggingThreshold(bid))\n}\n\n// Output:\n// 4\n"},{"name":"z_16_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nconst bid boards2.BoardID = 404\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(bid, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_16_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(1, 0)\n}\n\n// Error:\n// invalid flagging threshold\n"},{"name":"z_17_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.FreezeBoard(bid)\n\tprintln(boards2.IsBoardFrozen(bid))\n}\n\n// Output:\n// true\n"},{"name":"z_17_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FreezeBoard(bid)\n}\n\n// Error:\n// board is frozen\n"},{"name":"z_18_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbid   = boards2.BoardID(0)                                      // Operate on realm instead of individual boards\n)\n\nvar perms boards2.Permissions\n\nfunc init() {\n\t// Create a new permissions instance without users\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n\n\t// Owner that setted new permissions is not a member of the new permissions\n\tprintln(boards2.IsMember(bid, owner))\n}\n\n// Output:\n// false\n"},{"name":"z_18_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\tuser = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid  = boards2.BoardID(0)                                      // Operate on realm instead of individual boards\n)\n\nvar perms boards2.Permissions\n\nfunc init() {\n\t// Create a new permissions instance\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_18_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tperms boards2.Permissions\n\tbid   boards2.BoardID\n)\n\nfunc init() {\n\t// Create a new permissions instance without users\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foobar\")\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n\n\t// Owner that setted new board permissions is not a member of the new permissions\n\tprintln(boards2.IsMember(bid, owner))\n}\n\n// Output:\n// false\n"},{"name":"z_19_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\t// Attempt to freeze a thread on frozen board\n\tboards2.FreezeThread(bid, tid)\n}\n\n// Error:\n// board is frozen\n"},{"name":"z_19_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// Attempt to freeze a frozen thread\n\tboards2.FreezeThread(bid, tid)\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_19_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FreezeThread(bid, tid)\n\tprintln(boards2.IsThreadFrozen(bid, tid))\n}\n\n// Output:\n// true\n"},{"name":"z_1_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// true\n"},{"name":"z_1_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tuser  = std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\t// Add an admin member\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\t// Next call will be done by the admin member\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, boards2.RoleOwner)\n}\n\n// Error:\n// only owners are allowed to invite other owners\n"},{"name":"z_1_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tuser  = std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n\trole  = boards2.RoleAdmin\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\t// Add an admin member\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\t// Next call will be done by the admin member\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// true\n"},{"name":"z_1_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(0, user, boards2.Role(\"foobar\")) // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// invalid role: foobar\n"},{"name":"z_1_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\trole  = boards2.RoleOwner\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foo123\") // Operate on board DAO members\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(0, user, role)) // Operate on realm DAO\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_1_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, user, role)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n}\n\n// Error:\n// user already exists\n"},{"name":"z_1_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(0, \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", boards2.RoleGuest)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_20_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// Attempt to freeze a reply on frozen thread\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_20_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\nfunc main() {\n\t// Attempt to freeze already frozen reply\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\n// Error:\n// reply is frozen\n"},{"name":"z_20_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n}\n\nfunc main() {\n\t// reply frozen\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.FreezeReply(bid, tid, rid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeReply(bid, tid, rid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\n\t// thread frozen\n\tboards2.FreezeThread(bid, tid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeThread(bid, tid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\n\t// board frozen\n\tboards2.FreezeBoard(bid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeBoard(bid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n}\n\n// Output:\n// false\n// true\n// false\n// true\n// false\n// true\n// false\n"},{"name":"z_20_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n}\n\nfunc main() {\n\t// unfrozen thread - should work\n\tr2 := boards2.CreateReply(bid, tid, rid, \"child 1\")\n\n\t// frozen thread - can't reply\n\tboards2.FreezeReply(bid, tid, rid)\n\tboards2.CreateReply(bid, tid, r2, \"child 2\")\n}\n\n// Error:\n// reply is frozen\n"},{"name":"z_21_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"This is a test realm message\")\n\n\t// Render content must contain the message\n\tcontent := boards2.Render(\"\")\n\tprintln(strings.HasPrefix(content, \"\u003e This is a test realm message\\n\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_21_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Set an initial message so it can be cleared\n\tboards2.SetRealmNotice(\"This is a test realm message\")\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"\")\n\n\t// Render content must contain the message\n\tcontent := boards2.Render(\"\")\n\tprintln(strings.HasPrefix(content, \"\u003e This is a test realm message\\n\\n\"))\n\tprintln(strings.HasPrefix(content, \"# Boards\"))\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_21_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\t// Call realm with a user that has not permission to set realm notice\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"Foo\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_22_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(false)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// false\n"},{"name":"z_22_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.LockRealm(false)\n}\n\nfunc main() {\n\t// Should fail because realm is already locked\n\tboards2.LockRealm(false)\n}\n\n// Error:\n// realm is locked\n"},{"name":"z_22_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\t// Call realm with a user that has not permission to lock the realm\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(false)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_22_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(true)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_22_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.LockRealm(true)\n}\n\nfunc main() {\n\t// Should fail because realm is already locked\n\tboards2.LockRealm(true)\n}\n\n// Error:\n// realm and members are locked\n"},{"name":"z_22_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Lock the realm without locking realm members\n\tboards2.LockRealm(false)\n}\n\nfunc main() {\n\tboards2.LockRealm(true)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_23_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleOwner)\n\tboards2.InviteMember(bid, \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\", boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.IterateRealmMembers(0, func(u boards2.User) bool {\n\t\tprintln(u.Address, string(u.Roles[0]))\n\t\treturn false\n\t})\n}\n\n// Output:\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj owner\n// g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5 admin\n"},{"name":"z_24_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid := boards2.CreateBoard(\"test123\")\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleAdmin)\n\n\tbid = boards2.CreateBoard(\"foo123\")\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleOwner)\n\tboards2.InviteMember(bid, \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\", boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.IterateBoards(0, func(b boards2.ReadonlyBoard) bool {\n\t\tprintln(b.ID().String())\n\t\tprintln(b.Name())\n\n\t\tb.IterateMembers(0, b.MembersCount(), func(u boards2.User) bool {\n\t\t\tprintln(u.Address, string(u.Roles[0]))\n\t\t\treturn false\n\t\t})\n\t})\n}\n\n// Output:\n// 1\n// test123\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj admin\n// 2\n// foo123\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj owner\n// g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5 admin\n"},{"name":"z_2_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tpath    = \"test-board/1/2\"\n\tcomment = \"Test comment\"\n)\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\trid := boards2.CreateReply(bid, tid, 0, comment)\n\n\t// Ensure that returned ID is right\n\tprintln(rid == 2)\n\n\t// Render content must contain the reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \"+comment+\"\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_2_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateReply(404, 1, 0, \"comment\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_2_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, 404, 0, \"comment\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_2_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 404, \"comment\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_2_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Hide thread by flagging it so reply can't be submitted\n\tboards2.FlagThread(bid, tid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"Test reply\")\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_2_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply1\")\n\n\t// Hide thread by flagging it so reply of a reply can't be submitted\n\tboards2.FlagThread(bid, tid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"reply1.1\")\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_2_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"thread\", \"thread\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply1\")\n\n\t// Hide reply by flagging it so sub reply can't be submitted\n\tboards2.FlagReply(bid, tid, rid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"reply1.1\")\n}\n\n// Error:\n// replying to a hidden or frozen reply is not allowed\n"},{"name":"z_2_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"Test reply\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_2_i_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_2_j_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tpath    = \"test-board/1/2\"\n\tcomment = \"Second comment\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"First comment\")\n}\n\nfunc main() {\n\trid2 := boards2.CreateReply(bid, tid, rid, comment)\n\n\t// Ensure that returned ID is right\n\tprintln(rid2 == 3)\n\n\t// Render content must contain the sub-reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e \"+comment+\"\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_2_k_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tcomment = \"Second comment\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"Parent comment\")\n\n\t// Flag parent post so it's hidden\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"Sub comment\")\n}\n\n// Error:\n// replying to a hidden or frozen reply is not allowed\n"},{"name":"z_2_l_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// cannot reply to a frozen thread\n\tboards2.CreateReply(bid, tid, 0, \"foobar\")\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_2_m_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, strings.Repeat(\"x\", boards2.MaxReplyLength+1))\n}\n\n// Error:\n// reply is too long, maximum allowed is 300 characters\n"},{"name":"z_2_n_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"\u003e Markdown blockquote\")\n}\n\n// Error:\n// using Markdown headings, blockquotes or horizontal lines is not allowed in replies\n"},{"name":"z_3_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname    = \"foo123\"\n\tnewName = \"bar123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n\n\t// Ensure board is renamed by the default board owner\n\tbid2, _ := boards2.GetBoardIDFromName(newName)\n\tprintln(\"IDs match =\", bid == bid2)\n}\n\n// Output:\n// IDs match = true\n"},{"name":"z_3_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"\")\n}\n\n// Error:\n// board name is empty\n"},{"name":"z_3_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, name)\n}\n\n// Error:\n// board already exists\n"},{"name":"z_3_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RenameBoard(\"unexisting\", \"foo\")\n}\n\n// Error:\n// board does not exist with name: unexisting\n"},{"name":"z_3_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n}\n\n// Error:\n// addresses are not allowed as board name\n"},{"name":"z_3_f_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n\n\t// Ensure board is renamed by another board owner\n\tbid2, _ := boards2.GetBoardIDFromName(newName)\n\tprintln(\"IDs match =\", bid == bid2)\n}\n\n// Output:\n// IDs match = true\n"},{"name":"z_3_g_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tmember2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n\n\t// Invite a new member that doesn't own the user that matches the new board name\n\tboards2.InviteMember(bid, member2, boards2.RoleOwner)\n\ttesting.SetOriginCaller(member2)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_3_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"short\")\n}\n\n// Error:\n// the minimum allowed board name length is 6 characters\n"},{"name":"z_3_i_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tmember2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n\n\t// Invite a new member that doesn't own the user that matches the new board name\n\tboards2.InviteMember(bid, member2, boards2.RoleOwner)\n\ttesting.SetOriginCaller(member2)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_3_j_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"barbaz\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_4_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tnewRole = boards2.RoleOwner\n\tbid     = boards2.BoardID(0) // Operate on realm DAO instead of individual boards\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole)\n\n\t// Ensure that new role has been changed\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tnewRole = boards2.RoleAdmin\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foo123\")\n\tboards2.InviteMember(bid, member, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole)\n\n\t// Ensure that new role has been changed\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\towner2 = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tadmin  = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, owner2, boards2.RoleOwner)\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, owner2, boards2.RoleAdmin)\n}\n\n// Error:\n// admins are not allowed to remove the Owner role\n"},{"name":"z_4_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tadmin2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\tboards2.InviteMember(bid, admin2, boards2.RoleAdmin)\n\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, admin2, boards2.RoleOwner)\n}\n\n// Error:\n// admins are not allowed to promote members to Owner\n"},{"name":"z_4_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid     = boards2.BoardID(0)                                      // Operate on realm DAO members instead of individual boards\n\tnewRole = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole) // Owner can promote other members to Owner\n\n\t// Ensure that new role has been changed to owner\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, admin, boards2.Role(\"foo\"))\n}\n\n// Error:\n// invalid role: foo\n"},{"name":"z_4_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, \"invalid address\", boards2.RoleModerator)\n}\n\n// Error:\n// invalid member address\n"},{"name":"z_4_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(0, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleGuest)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_5_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, user, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.RemoveMember(bid, user)\n\n\t// Check that user is not a member\n\tprintln(boards2.IsMember(bid, user))\n}\n\n// Output:\n// false\n"},{"name":"z_5_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RemoveMember(0, \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\") // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_5_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RemoveMember(0, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// member not found\n"},{"name":"z_6_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\trole   = boards2.RoleGuest\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, member, role)\n}\n\nfunc main() {\n\tprintln(boards2.HasMemberRole(bid, member, role))\n\tprintln(boards2.HasMemberRole(bid, member, \"invalid\"))\n\tprintln(boards2.IsMember(bid, member))\n}\n\n// Output:\n// true\n// false\n// true\n"},{"name":"z_6_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleGuest\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tprintln(boards2.HasMemberRole(bid, user, role))\n\tprintln(boards2.IsMember(bid, user))\n}\n\n// Output:\n// false\n// false\n"},{"name":"z_7_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"test123\"\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(name)\n}\n\nfunc main() {\n\tbid2, found := boards2.GetBoardIDFromName(name)\n\tprintln(found)\n\tprintln(bid2 == bid)\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_7_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tbid, found := boards2.GetBoardIDFromName(\"foobar\")\n\tprintln(found)\n\tprintln(bid == 0)\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_8_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\ttid := boards2.CreateThread(bid, title, body)\n\n\t// Ensure that returned ID is right\n\tprintln(tid == 1)\n\n\t// Thread should not be frozen by default\n\tprintln(boards2.IsThreadFrozen(bid, tid))\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// false\n// true\n// true\n"},{"name":"z_8_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateThread(404, \"Foo\", \"bar\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_8_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_8_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"\", \"bar\")\n}\n\n// Error:\n// title is empty\n"},{"name":"z_8_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_9_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, title, body)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n\n\t// Ensure thread doesn't exist\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread does not exist with ID: 1\n"},{"name":"z_9_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.DeleteThread(404, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_9_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, 404)\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_9_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Call using a user that has not permission to delete threads\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_9_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to delete threads\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(member)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n\n\t// Ensure thread doesn't exist\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread does not exist with ID: 1\n"}]},"deposit":""}],"fee":{"gas_wanted":"90000000","gas_fee":"900000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"U2iKoHGW6K7bep8UtLBr97zzq/LMSZH7rS2n3lwDYEYf+3lmLs82V256UquOYW8bqvniG3wQopQl2FhYarGSCA=="}],"memo":""},"metadata":{"timestamp":"1743761702"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"RemoveMember","args":["0","g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"3yQ9Uzcug0E/gUI15Ebz6SpmQpMnj+6lf5K3fKPcDvCVrg6yeVepgeK7maTHsm57883RG/9+j5AU0C3RRd8ICg=="}],"memo":""},"metadata":{"timestamp":"1743761807"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["EmptyWithManyMembers"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"PxJx3iE6e2NocMnVTOy4bq7MiK0YVDlIefLAFm9ytsrBRFtruHjDDRQeIoBVJNCmf72D0kRRVii3naZz94OrBQ=="}],"memo":""},"metadata":{"timestamp":"1743761888"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","owner"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"aWHYIIEcmAv3uSgt9ECrBv6Q/z9dZ8u8fWFbYVjqhfO8ELEnn73KcwZlmA43SSclJVlRiVN/TghMf7hCaHb/BA=="}],"memo":""},"metadata":{"timestamp":"1743761893"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1e5hud66rs7ye4zgeqmqvwfhurs2mnf408hdqcl","owner"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"aj9gw0cR3xQIe1cBU2JEMPQyK0ft7NWyAgq4kanFCI2b79JmmEGo45VMfscffxmfJUuzNgeJTnsxOwRupQ4ZAA=="}],"memo":""},"metadata":{"timestamp":"1743761898"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5","admin"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"JF8sEBvqo4OCT8APgZXc/GxPzX+Ij2UJMj+YxTgesHsa1W6sTG8Q4RkshZK15LT99mse4pb9GtGjgG0i33E/Bw=="}],"memo":""},"metadata":{"timestamp":"1743761903"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk","moderator"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"0rEX/wEVQfzwTCwrwK9aV4B7qRiIeB88uq4PFCiemlGg4qf2NMspIUhcynlqzqSU6Y/0+OMxzq3bZJSyoqmHDQ=="}],"memo":""},"metadata":{"timestamp":"1743761908"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1ym6zxff3xq7wfldcs3uyu7x7z40gstggcx8zdj","moderator"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"GO3MGKbeMgas+NtO+OTUGo2VNt9tv9pfQ48SzKyOMmRUOFk96b0E7yc0L1hLfHhlmIry1TN67/W2hw9wpJ81AA=="}],"memo":""},"metadata":{"timestamp":"1743761913"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["TheNumber42"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"muDrsNLE7kZGItSiBNy3vYoe7tyGAyWIfoDYcx4uIIPx+UgjgcJizyiPS6aqEsXrxpyak0+WJ3jUj1HuKARgDQ=="}],"memo":""},"metadata":{"timestamp":"1743761918"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kuCtWj1TUpFzucoJ8iAhcnx9Kmvr629VZ2v3JFLL9O/GX4U97k2O0jpn4usPHV3W6RvsRihX+bXQSZHyYYkNDw=="}],"memo":""},"metadata":{"timestamp":"1743761918"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["2","What's your take on it\\?","Seen in many places, unknown to many"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"3Q6yjDFalubJjr79zO/5N6efvvBVaAoDzu7QlcDORuipWi+9MNQ8cUPGnsT4faRiGwrvvQAMl17xIOoR11VTAg=="}],"memo":""},"metadata":{"timestamp":"1743761923"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["2","1","0","What do you mean\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"i+Zfx47nUWx4qGnftxJrLOpKME3B4VXvHWdLc/pO0HXd3ims6sTH/NHt8E/t1qUlPA8ndK1lgg7Qo8+v0fpyCQ=="}],"memo":""},"metadata":{"timestamp":"1743761928"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["2","1","0","よんじゅうに\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Rup+YIfuQpIu3I3VGXx97u6EZtXZ1yyiEtAcXegacsnu4WB3YnXEIzJauCcw2Edx5Ym3lo/BqVJrwVpoqDigAA=="}],"memo":""},"metadata":{"timestamp":"1743761933"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["2","1","2","Cuarenta y dos\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"5VJ9Q10yIK4j0vvm4fcCgbmem6rUzOaXZA8hkKKYNUQJ5tur+8ClyPSpUn70XEYhfe2RSREvwHSplt0SehAaBg=="}],"memo":""},"metadata":{"timestamp":"1743761938"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["ThreadsExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"I6ZlzBsGf1qOsfnBjwHKJyar1cuDCh+N/VDvsHBVQbqQvMdpJvotHS4oJSzI0267kSV0P3aj0eRhg24/HqSeBA=="}],"memo":""},"metadata":{"timestamp":"1743761943"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Seventh","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"lEnbWEYdUoTq+RPp8RRG0VACcZR6gvelM5uVdzRaiT4x1JcrKelclMGFyC7f1dByoxPx4wYVhDjiA5PERnAtAQ=="}],"memo":""},"metadata":{"timestamp":"1743761948"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Sixth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"N6G8Nonx6w/paVsrfnTLs/BsUN/GJ3iKTbf9YbmLq4/WiHTLsSnSq9XmM3geonSJvM+uvmR/ygD0Roj1Lq3PBw=="}],"memo":""},"metadata":{"timestamp":"1743761953"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kuCtWj1TUpFzucoJ8iAhcnx9Kmvr629VZ2v3JFLL9O/GX4U97k2O0jpn4usPHV3W6RvsRihX+bXQSZHyYYkNDw=="}],"memo":""},"metadata":{"timestamp":"1743761953"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Fifth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"zKIVafDZwKsorlEQcB5gH3Cfxa6RSRyNmrJ6lrLiVASJsm1PEOQX1rAmeq0xECiyzlywQi2QosQ6SOXRpGcKAQ=="}],"memo":""},"metadata":{"timestamp":"1743761958"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Fourth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"2NjemoRCvFjqMm1EqLenIWuaNEP3dGb4dF31urjXy2Z9inS0g/pQNWkU+rTMGVWtqgn9vpL8hW0yZT6VhZL8BQ=="}],"memo":""},"metadata":{"timestamp":"1743761963"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Third","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"lnuXkGx9zXZqVCGfzQQOiQTynjx+lYkydTRxqoHw7s9XA7jIOCfjVFk63sr66TxRNUrGRHKxpcEzUB2vSE3RDQ=="}],"memo":""},"metadata":{"timestamp":"1743761968"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Second","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"vi5VQFW7xYjrl0jtUMwtWwJEVTW1Bcbimgwz2mU/s91fZWJwYdK/lg0LEcO9TdQCPV8EWvsS3DGNpjNfNu/kBA=="}],"memo":""},"metadata":{"timestamp":"1743761973"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","First with many Replies","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"IvThbQ7fDNCuxPjXCB4aUngctbAz8wI4qZ1Y2p9cGp6315zr8tXylNS+n9V/xnYztqYBOO0acV8NTLAjtr6dCQ=="}],"memo":""},"metadata":{"timestamp":"1743761978"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","First"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"yH3slx61rIFtSsDZKTHeIYYn+mL4n+xiht985eukgKk2POWaKf5BGdBULgkJ21kbnsV65vPJIsgYejbQ/9GjCg=="}],"memo":""},"metadata":{"timestamp":"1743761983"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","8","Sub First"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"R0nUwVIAQ59kP/sZjQ3/xgCXzeo5hbSwLMPz4g4s6pBX9KW3/0vAi9kzz+swwp7END9IC6apNlYC303ZEVuyAA=="}],"memo":""},"metadata":{"timestamp":"1743761988"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Second"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"GG4QHf1tSirS6I9cDjng1Xir1Ql+q4x93bm9kODUL6KEanKmD84gKh5/YVMstRkHPp60Et1UsFHC9J6knxI3AQ=="}],"memo":""},"metadata":{"timestamp":"1743761993"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Third"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"voI0taAnzfanaNNKskt12IivTt4qWbCuWtHXV5huhAOOp7B+K4OPQsIHg7+LwAQeTmWXPyrNdB60OX1BjR1KDg=="}],"memo":""},"metadata":{"timestamp":"1743761998"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Fourth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"aTmh1rKQmbiIfSmfSP8ylV9vBoPqZYV9T0aYgwPB/eFEK7rvZ1eW5+3QP5f8Edrgl4B2kf5WwnA3Fhqu5qc8BQ=="}],"memo":""},"metadata":{"timestamp":"1743762003"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Fifth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"rjiWLoD5Mg1Ulv9b3s299jm2HcmJfoKDeg7WQzgKccmyQ8BQUHBbHEYVar+6wSdjl09RpP/F+CnOUP9JN6gVDQ=="}],"memo":""},"metadata":{"timestamp":"1743762008"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Sixth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"TDO4Ji9JE1mdyomiVRL6Nc2Z22xABNA2xy/Gvi2DaF3Q8Ur56106k7DWgAwKkYnWJO2DjPQH0mry3Dn3K5ygDg=="}],"memo":""},"metadata":{"timestamp":"1743762013"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Seventh"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ID/GjdOyQf3DL8tOLPKgRDkmlxK/VNPej1HGPrmDL2XXqSP8VLHWuE8fhmk6yI8FFMrC5TsRBbIVbmmAhARmDA=="}],"memo":""},"metadata":{"timestamp":"1743762018"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Eigth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xg3AUWGaisRcJwnAGHz6JA0Eb+muoI4YznApNB1ZOcqj/ZKbYwk7LJ/f7aJ9QBUO9YMwCkBRwNr/NBGFPzW9Cg=="}],"memo":""},"metadata":{"timestamp":"1743762023"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Ninth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Z28hKxhoyOqbhWsNCkPreWiq0BgyCxB9AxqfTFLKVKYra+RfANNuljqFuCzVhElqDhkP/RlrBl7TfV5Q2AuBBQ=="}],"memo":""},"metadata":{"timestamp":"1743762028"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Tenth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ujgja3YG7j2hRcob5WWrlBZxfAJzr+TicEeQhHLbr7Xa4cQkxHbWI0DTvEKUqV8RYU52xI20s4p6gt0+D2zZCw=="}],"memo":""},"metadata":{"timestamp":"1743762033"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Eleventh"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"AHZ+TfFaMfccMtF4jX+U8Ruq2zNMVI1RyekXJ0KQ91Y0tkqRK8yn4lvv7Vb+AvDVDkAO3MqO9TfVXr28vGHuBg=="}],"memo":""},"metadata":{"timestamp":"1743762039"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["ReadOnlyExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"/KLIc34sqQrmajzkcFfDjtqgtdjiuGAPgO+qrfJd+WIhzN7gkixqzUSXPj3wZDiKikBqc+T+Wb5tp65m6bK9BA=="}],"memo":""},"metadata":{"timestamp":"1743762044"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["4","Example Thread","This thread shouldn't be writable"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"NXhPiUeq9YcNnkudvz745FgxJsebQ01odghXhRQbQGU40Q83p02OzzOJ3VVKV0yhuBxON7Y181/zxZOiTi4MDQ=="}],"memo":""},"metadata":{"timestamp":"1743762049"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"FreezeBoard","args":["4"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"wd/5jD5gLOF9jEvpFuTKkuln4fbytMqJzZPYN4LOiZY/xVrhM8T3QCr7/d6s8uAr2WxqxBiSGh0yZIp2wQ6UBg=="}],"memo":""},"metadata":{"timestamp":"1743762054"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["RepostExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"5TRSh5UmPK8KI/+8sTSI5upXLvb8LXP4YGLzMaJC5Bu69gu5ZIj+SEBez22Ek25bpVLkqHHtqhpmU5QMvIYuAQ=="}],"memo":""},"metadata":{"timestamp":"1743762059"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kuCtWj1TUpFzucoJ8iAhcnx9Kmvr629VZ2v3JFLL9O/GX4U97k2O0jpn4usPHV3W6RvsRihX+bXQSZHyYYkNDw=="}],"memo":""},"metadata":{"timestamp":"1743762059"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateRepost","args":["2","1","Custom repost title","Custom repost body","5"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"JPJZiP3S/FhZUnPZXP93PAzHt4GpBQ4kAopWnRstMp7D3rye1kMdx+qyKaxGGbiAwI+YKrKK12gud8NAJnRbDw=="}],"memo":""},"metadata":{"timestamp":"1743762064"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"SetRealmNotice","args":["A new [version](https://gno.land/r/devx000/gnoland/boards2/v1rc2) is available which fixes a couple of issues and explores a UI which is is more in line with classic Reddit"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"rAsbllvRLrYeD2MhA3PT5+8yfYQ96MY6bt087UKt4uMH5pknjSYHqygG1h9GRtVUuYDZzvwtrgfgw52OvXGKCA=="}],"memo":""},"metadata":{"timestamp":"1743762325"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"SetRealmNotice","args":["A new boards [version](https://gno.land/r/devx000/gnoland/boards2/v1rc2) is available which fixes a couple of issues and explores a UI which is is more in line with classic Reddit"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Ppe3T0NpwmRcYGu73lTjp9yQAmB8G032mX/yTIeOOqn3nJcP9WKCR1OSznIw1PFoYXea1fMEyrgibY17UVavBQ=="}],"memo":""},"metadata":{"timestamp":"1743762441"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"SetRealmNotice","args":["A new boards [version](https://gno.land/r/devx000/gnoland/boards2/v1rc2) is available which fixes a couple of issues and explores a UI which is more in line with classic Reddit"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"QcTtCygzcmmMQ9oCvrxZEO7KVS2rVwjaJvkFvVlJD1f1gHMe6QHWWnh7rqigtGEFROrHKE9X5SXfsKsR2xJ+Cw=="}],"memo":""},"metadata":{"timestamp":"1743762466"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15dz69sch7fkhc9gk57hpe4qea77thmy20apu9x","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Hp9yyz8tbzWiTA9XmiOMfxdRnhtTNFymcsAoxCj3svu85ZXXa9C48RsdAa1OcVmVYAlVaOKa00F5qrqHJ4NgDQ=="}],"memo":""},"metadata":{"timestamp":"1743762511"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1743762858"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1743762953"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1aykqe5ddemku5mwd3elmwtpj8jgss47xrqpag4","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"5W8pvzVVTwqR0USett9a5LYheSuuFicEmPt++BwXxXEqHWgVQtCQkClsJbLdf5hw1cSGg5h7KW1GVrL6b466DA=="}],"memo":""},"metadata":{"timestamp":"1743767985"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1dtuj65mgja87gh0c45pd3rt4cah0kkw9lzld4y","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"gVIdQBBxy3FqNuvip5XH1L48VyKevaNiPaa4nYyyW/3tDm1f82uOznciajCfJAe8rw2wSRB2W3UAg/Ds/RWPBw=="}],"memo":""},"metadata":{"timestamp":"1743768151"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1743769312"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1manfred47kzduec920z88wfr64ylksmdcedlf5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["test-manfred"]}],"fee":{"gas_wanted":"50000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"zIEkKLWS6zeUOjqJGwRvhP+ncHZYYHC7ps9USK+aWU+LXhRXgKvDSdSfbaaDc48kNeXPDc/sU23o4ZFIYPpBBg=="}],"memo":""},"metadata":{"timestamp":"1743774399"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1manfred47kzduec920z88wfr64ylksmdcedlf5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["6","testing testing","👋"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"sJcvKDbrNWnVo0ozE9r4AvUR3bVGhn4t4OrM/H+7gJ2YwBmQ20u56JUG1AeZl/WSdrlLl8pjTBZZskyT49+NAA=="}],"memo":""},"metadata":{"timestamp":"1743774450"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1etcvlu8zyuwnd7w0x0lcu4g2r7yzllyy62gpa5","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"9104212","gas_fee":"4742446ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"hUM8x4T6MQUzpf04aCJ2OtaF5uHBhNuulFwBKJZfLhNCs/3Wm7rCO5wuHUd+iFscgXk6dvnG8G4l7AFSQNqlBA=="}],"memo":""},"metadata":{"timestamp":"1743775038"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bXyHJdtgDmBHTgSUfcLbWb8QmJPrI9s457gJW1yahUnysV2CEJKBbj3TjSy91WEnIgxMWq21Ki9usgKlfzU4Cg=="}],"memo":""},"metadata":{"timestamp":"1743775997"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bXyHJdtgDmBHTgSUfcLbWb8QmJPrI9s457gJW1yahUnysV2CEJKBbj3TjSy91WEnIgxMWq21Ki9usgKlfzU4Cg=="}],"memo":""},"metadata":{"timestamp":"1743776002"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bXyHJdtgDmBHTgSUfcLbWb8QmJPrI9s457gJW1yahUnysV2CEJKBbj3TjSy91WEnIgxMWq21Ki9usgKlfzU4Cg=="}],"memo":""},"metadata":{"timestamp":"1743776017"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"UpdateStatus","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ub3uoxEExL3jMuQoAegvKmDOW1LWrOercf9BdWQkTdVih3mPoIH/7NqWsOjm/+gIgkLa0kYuSbQBsPfadlwYCQ=="}],"memo":""},"metadata":{"timestamp":"1743776022"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bXyHJdtgDmBHTgSUfcLbWb8QmJPrI9s457gJW1yahUnysV2CEJKBbj3TjSy91WEnIgxMWq21Ki9usgKlfzU4Cg=="}],"memo":""},"metadata":{"timestamp":"1743776027"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1743776083"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"name":"hello","path":"gno.land/r/test12/hello","files":[{"name":"package.gno","body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/eco","func":"Render","args":["Deployed through play.gno.land"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ot/V8bS6JNMgzRPR5JTnCh1C/IrUSVBplj9YxTkdum9+xncnn+Bz1wkK83vV5pnwz3yQG7k5wmzwegSGsvvkAw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743788578"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"name":"hworld","path":"gno.land/r/g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5/hworld","files":[{"name":"package.gno","body":"package hworld\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/sys/users","func":"ResolveName","args":["abc"]}],"fee":{"gas_wanted":"3428737","gas_fee":"7144ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"p1kO3fql5GXI69qID2B2pfmvydiypFq+4IIC0iUvpenfZH36w/ccxUKizKYfxh/egfg1Tl/EOVOwwixdPLi8Aw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743793364"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g150gdvn780ws7a3s9qpdvv7h4d9hq6vh672ely0","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"DxumKZ8V42aBbpxBQMjTnP7r0pdLPXmD1ThtvXJj2H14j1jd6gFr9fGXDjlSeuh4U8VqPKskC3uL+3nCsvjtCw=="}],"memo":""},"metadata":{"timestamp":"1743859813"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g150gdvn780ws7a3s9qpdvv7h4d9hq6vh672ely0","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"DxumKZ8V42aBbpxBQMjTnP7r0pdLPXmD1ThtvXJj2H14j1jd6gFr9fGXDjlSeuh4U8VqPKskC3uL+3nCsvjtCw=="}],"memo":""},"metadata":{"timestamp":"1743937361"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":["FirstCatPost"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"6zChAbF3Z6OpdHfgdhMy1W2NSeLFMGXf2/5HpraFAN1q0lmpbE5t5QBMk72Bhe8tO50XW42X17Fk+A+CguXBBQ=="}],"memo":""},"metadata":{"timestamp":"1744009485"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateThread","args":["8","First cat post on boards2!","Katt Williams is an American stand-up comedian and actor. https://en.wikipedia.org/wiki/Katt_Williams"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"nYLnj0q+Y9u5pj2j1qttYx5hK3UmYqWXAfh2PB3HFVcQosvaiRpEOitMnre/aoSJ8BIh1jH9CxYn1zAdhpYXAQ=="}],"memo":""},"metadata":{"timestamp":"1744009736"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["FirstCatPost"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bi+q7rOHbU6AAvDLV3R+eHbwwSNAcMxWGDOGf3neUylsgbVeCpdkKSKPxNOfvz9jCDH+ZhTffYO8DOvRn2CYAQ=="}],"memo":""},"metadata":{"timestamp":"1744009852"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["7","First cat post on boards2!","Katt Williams is an American stand-up comedian and actor. https://en.wikipedia.org/wiki/Katt_Williams"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"AOMDntLfkB4kP8rjoGLw15cDTc6mnwbz8xRXkJk1avZt35hoxynSbYXUwKv1D3CkvoEs8LIPbY7h0uEAgSNbDw=="}],"memo":""},"metadata":{"timestamp":"1744009907"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14n0zsnsk054uxwvnwmmqyrq6e87ynk5vq98qqp","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"gsOW2ax3szJeuurBkA9J/TM0XCaIyS47k/7kUvk9Gq2twiDVroCszGaw53FJD6FJ/FahqTRyzb656P4MLOX3AA=="}],"memo":""},"metadata":{"timestamp":"1743587748"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1dzzx5qwcmawqnhhd76ehkteas5v2dg42hqnd7g","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Fr1uKtG5S6/mDBxNS42Sbmz6AKHqveVyX1PLz0uXJgJ5Hve4XJgukjDM0/0TnrI5OGTpoqoIZ9evnvmx+MebCQ=="}],"memo":""},"metadata":{"timestamp":"1743587759"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kkS7eUe5RBU5tMINWW4NnKVZ/BXSBErtWniDmponcU3J6oxY6D2p17Zv9ZJeJk+oNmzWhpbIQ0hZ3A7G0pGICQ=="}],"memo":""},"metadata":{"timestamp":"1743587914"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kkS7eUe5RBU5tMINWW4NnKVZ/BXSBErtWniDmponcU3J6oxY6D2p17Zv9ZJeJk+oNmzWhpbIQ0hZ3A7G0pGICQ=="}],"memo":""},"metadata":{"timestamp":"1743587924"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kkS7eUe5RBU5tMINWW4NnKVZ/BXSBErtWniDmponcU3J6oxY6D2p17Zv9ZJeJk+oNmzWhpbIQ0hZ3A7G0pGICQ=="}],"memo":""},"metadata":{"timestamp":"1743587939"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xnrpwODqB9Qzy8lCyG8WhKFujPPtqnByd405Ea6SUtiep7uJyoEzw3D5R8NoasWmRQmXOiceh8x/ETIMAYwOAA=="}],"memo":""},"metadata":{"timestamp":"1743587980"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xnrpwODqB9Qzy8lCyG8WhKFujPPtqnByd405Ea6SUtiep7uJyoEzw3D5R8NoasWmRQmXOiceh8x/ETIMAYwOAA=="}],"memo":""},"metadata":{"timestamp":"1743588120"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ecnuruz6mgmnw4wdtjtt62lecj0lcddp3anu84","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kkS7eUe5RBU5tMINWW4NnKVZ/BXSBErtWniDmponcU3J6oxY6D2p17Zv9ZJeJk+oNmzWhpbIQ0hZ3A7G0pGICQ=="}],"memo":""},"metadata":{"timestamp":"1743588221"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xnrpwODqB9Qzy8lCyG8WhKFujPPtqnByd405Ea6SUtiep7uJyoEzw3D5R8NoasWmRQmXOiceh8x/ETIMAYwOAA=="}],"memo":""},"metadata":{"timestamp":"1743591981"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1g37jpfcnnvmpfajhcdv9syvdy7w2kr47frss90","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xnrpwODqB9Qzy8lCyG8WhKFujPPtqnByd405Ea6SUtiep7uJyoEzw3D5R8NoasWmRQmXOiceh8x/ETIMAYwOAA=="}],"memo":""},"metadata":{"timestamp":"1743591991"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"rcFAWr1sDO8na64+BQFNqCOiCOQiLSNI1QUKX2m0F1heLU/NOUKhKmbQ9fosCuEhsWELsdUBUaKJH5f4d+jHDg=="}],"memo":""},"metadata":{"timestamp":"1743597359"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2231690ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ocvr/JPKso//ytHIrkTURPWCS1jVsSnm4WrvMUCH9rDe7gyJPgsg6i95QyuqUNFpeiCf57nGq8BjbfufmFF4DA=="}],"memo":""},"metadata":{"timestamp":"1743597379"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"887428","gas_fee":"165039ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"L2sWfo8q5QmVPdiTdVZiTSjulJahNRAZCKd6DLAg/8pbYY259P+yH2fAdYiZ4+4FtnEk9Htv9+oBoeX38V12Bg=="}],"memo":""},"metadata":{"timestamp":"1743597384"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["42"]}],"fee":{"gas_wanted":"3059175","gas_fee":"6374ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"XZzhqFjZxRo0L9GenZ5HAPgE0BnjTFi028j4Ok74B5XgPaMXlj5pTpgCQWY31G6/AxtCeYMT0sNH+VxUKzfXCw=="}],"memo":""},"metadata":{"timestamp":"1743597409"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"KhhBvAFXQEh6n4ZUWU+dnMi3kozbMu32L+QF07g35SLWwHKNCpj5M9hzJDx2HMEqfe+jIyYKyqwolPi8AaJwCw=="}],"memo":""},"metadata":{"timestamp":"1743606306"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"vh0tJl7xCAhje36H2bE94wqsr/n3B/RAQNJeR4OS90NwvQCzZotPzdkhdQVbLdiNPbOdmbxRkK6FjDVIn8acCA=="}],"memo":""},"metadata":{"timestamp":"1743606668"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"/YN3AgTMVWUUwDs3P+vqnXxl4gUlKHwQqdLr1tzzDo0dIETPpbUbzXklVQJVB16dItO2GP4GB35BwBM0BINMDA=="}],"memo":""},"metadata":{"timestamp":"1743607723"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"SQ7dS02SL70+F6zE5E4Sk1vDb8zJQw7V84SkilcWmNMV32mOjy+wVf1xPbDjEbX84XGOhWRknf5/430X6ZU/Bg=="}],"memo":""},"metadata":{"timestamp":"1743608020"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"RwuWiR8W+j5QqToOUOoA4H3ysiUt5ToL3aFD9HMxWS/iEFGNd60d47YOUTxNNkY/P51813vWT/6CgHosxP4iDw=="}],"memo":""},"metadata":{"timestamp":"1743608226"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\n","admin"]}],"fee":{"gas_wanted":"8066534","gas_fee":"16806ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"1YOcGA+gTIMMHhGCPpndDSZKZZaCojfs0d7QiVAb7weQIk4QRJwOAtI2TqwzK8A65q+fWPqMm4kGIgTtBO/cDw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743608291"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"8967781","gas_fee":"18683ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"k6ifImJGjzHjrw5OxnlFED4lGN13DI/LiA9zW1SBYewS3fnwEyLx2wUQfgqdVlMZBQ6C8D9HCsByGQo9jSLYBQ=="}],"memo":""},"metadata":{"timestamp":"1743608301"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15dz69sch7fkhc9gk57hpe4qea77thmy20apu9x","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Hp9yyz8tbzWiTA9XmiOMfxdRnhtTNFymcsAoxCj3svu85ZXXa9C48RsdAa1OcVmVYAlVaOKa00F5qrqHJ4NgDQ=="}],"memo":""},"metadata":{"timestamp":"1743610126"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"DeleteTodo","args":["0"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"RFOIErW3yMP8ByuGPAnoOpUod4ulfP/QlVKtCKL4zDMh9H8mkcCi/y2UKm0enLlXmheSq/FHMiKbvuGeJWFXCQ=="}],"memo":""},"metadata":{"timestamp":"1743611628"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g14gvmle0a5hln0ct7wv857gucr7lmeust35736r","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"+rlC9mhE1bERSiDZ2YvktDxug3Mc9wtJReSHk+MTLi0jqjVTzTvI5pVqJzBO0KSImDbnBNWH0LZe38Sc9frGAQ=="}],"memo":""},"metadata":{"timestamp":"1743662226"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"gZlILkg4UOwV0qKQo2Id40lq46Ljw5DqPd7b1vYElGti3wOxxkEdO1i3YGJ1yv1WzL9ieLQ49xMVJ7qz3Ei8Cg=="}],"memo":""},"metadata":{"timestamp":"1743663236"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","send":"","pkg_path":"gno.land/r/demo/foo721","func":"BalanceOf","args":["g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"FocyEa3/BEh0f/BXj/1c7nfB6Vi071PklsMa8xqnRb+Ox/s8f3p2A3ZtpuYM/kCF/+BPBYQusAZOHfCioLhbBw=="}],"memo":""},"metadata":{"timestamp":"1743663533"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u4pzrdsnhqd3cypet5qtrk6cdtftxdzd5297fx","send":"","pkg_path":"gno.land/r/demo/foo721","func":"BalanceOf","args":["g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj"]}],"fee":{"gas_wanted":"10000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ggFsr+PEH6suxXVxIY1hqEqRekl7hs8flF7ZTb7lCdSFqXo3/xE6aD8eNaEKy5o+MnvwHyRDXfybKZPWCDxABg=="}],"memo":""},"metadata":{"timestamp":"1743663709"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"VS+OtfNCE8oKNuNMlwWMfniOkuJr1QLr6+PplUe5bgNW8j7pGOt7OiO6iEYFhYRMOHEy8iYg5QYy68qfWc76BA=="}],"memo":""},"metadata":{"timestamp":"1743666971"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1kufw42c0duur8g90dl43peluhqpksan72mw6r8","send":"","pkg_path":"gno.land/r/docs/adder","func":"Add","args":["42"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2233340ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"/6BW+YwJnX34zp8n5IsfJp1x9Ektt4uUpEJzYgj1AMiIHED4K+zPCOd8Lf68kCIYvoVVYoen+SBR0AbEFTsnDQ=="}],"memo":""},"metadata":{"timestamp":"1743666986"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["keyboard_worrier"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"dx08R8/b7RvesdrpJ6NriCsfFxceLl7SsKZ7nW/apu6BoC7syqV4PcR55AcdpE4Brr6RqVv4VkgF/G1KPbRgBA=="}],"memo":""},"metadata":{"timestamp":"1743672162"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743674585"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743675500"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676274"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676415"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676425"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676440"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676450"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uNijEvJAKAurnlNDESgf7s0MMpFnvyXCyAGP+pvKtNfkuFgCc84VVkmlbXciVjwt13Q3Pj23H0013XpQjoyXCw=="}],"memo":""},"metadata":{"timestamp":"1743676465"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18fesw70rewm692y0wmj7079t5yck65zv34etql","send":"","pkg_path":"gno.land/r/demo/userbook","func":"SignUp","args":null}],"fee":{"gas_wanted":"3000000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"b6ObPuETfc7XCJNEMllymwQMJSpPECA7YG3zpgVRo6f77xW1dUyLMx2kawbcJJxjZqXQ068cfBW96s1+S1kRBw=="}],"memo":""},"metadata":{"timestamp":"1743676600"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"RemoveMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\n"]}],"fee":{"gas_wanted":"7891622","gas_fee":"16441ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"89l+iGtobou/e+F/iiifDiQhNHbij0ij+5Ya3ziCacKLcGIlyTx1luTSgS6iPDKeh09cVbi6abEeN5kUm5YUAQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743677621"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["6","g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","admin"]}],"fee":{"gas_wanted":"8066714","gas_fee":"16806ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"LcaSje7J3JjSKApJB+1EUE6tala9gr9Sq6BIUc+VqChPm0QcGhgR9W5ErCghvSKzGSP6M//zbXqTUGz0ejp+AA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1743677721"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["Message%21"]}],"fee":{"gas_wanted":"887404","gas_fee":"1849ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"0WqDLPs6a/WA9hXWYVTP+x9TffQ4HbxoY/4ecDysE3Rp9HlXurepSylz4pqFcL0B/BOY885KLvF70bhsM1veAg=="}],"memo":""},"metadata":{"timestamp":"1743677742"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1euj8ry6ygx02x48u4505heckkclyps3w87uqtj","send":"","pkg_path":"gno.land/r/docs/buttons","func":"UpdateMOTD","args":["hello !"]}],"fee":{"gas_wanted":"887311","gas_fee":"1849ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"HbQPKoyJhk/D9pzUPjl7/Z6WSeszhbMmucUwdHYB0/aZCEZ0atxLOoaF4ZUWlaVlMIlBKD/l+/1sRnX6N9GRBA=="}],"memo":""},"metadata":{"timestamp":"1743677757"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"OSUd1L/RiFhkxA3PW+7ADa1mygPaPbouzWwlOL949dJSBnV2hIBh57uz37wAxxBghvtS8LhSnLZ+riJwyBLXCg=="}],"memo":""},"metadata":{"timestamp":"1743680159"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"ChangeMemberRole","args":["0","g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"OMuLXy3HO9JO/FO5LMoSRcr9sojwnppOxU8yXqUWK1xGfftIlomdBUNyxMe78GQRE9J67Iw1EgySadzxatvwDg=="}],"memo":""},"metadata":{"timestamp":"1743680391"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/leon/hof","func":"Upvote","args":["gno.land%2Fr%2Fursulovic%2Fhome"]}],"fee":{"gas_wanted":"12000000","gas_fee":"1721880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"X/eJPJL8ZV8bQZLTk7PadUV+DemIEj/2JLxSv1Y5iosIf2YTwrcxDgidOMfkqyUxQTFmHo/aYr1WQAVPbh/kCw=="}],"memo":""},"metadata":{"timestamp":"1743682979"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1d2hvkqhqckhzpaum09c002fesdw89qrcg9zqws","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ReZNIs5Bl66EsrE8h8FAxIdTKLQTT3JLhrtrMX1xvE0SdiyZ6kXOqG0tInvf/5XZlaoDQ5NazQIPDp5AljTEAw=="}],"memo":""},"metadata":{"timestamp":"1743683221"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1lrsrj4auaffjk538w3x2c9gzyth2m0n39zcg6d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"AKXPlpnjspmHDpF+EQEoze/h/1Dw8Vf43t5GzNgg1Yta3kMRIc06TxltwYPRuJYQRbro5iLt8dh572vXMvChDA=="}],"memo":""},"metadata":{"timestamp":"1743704885"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateReply","args":["2","1","1","Hey hey hey"]}],"fee":{"gas_wanted":"60000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"epppoxiBBFm5IjbU64qXJewGo/7oLGKO0VJsduVtOJYhqNcJSWezt1izHysK6CqGG7DxS2N0SqXR31NNQK8VAw=="}],"memo":""},"metadata":{"timestamp":"1743711043"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateBoard","args":["aeddi"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"dXUiTfFR460T8IopbpjSaK+P/nicuQjLa2LAeldy3Rcm65g9P4BnnZ6k0lWXUNaAMsWH7BvQNH3oFdu/YF2nCA=="}],"memo":""},"metadata":{"timestamp":"1743711163"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g16znvp6wxupkkds8mmmtxhvmdly08xpa4rqagp3","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"k1kPHgJM5ggOKZcD9HavykmLc/dkrGogJ2/JBROmxPbT2e6drMzTk2z8OCHjxyjze2/ubWCbvnPCWxr29ZCzBA=="}],"memo":""},"metadata":{"timestamp":"1743712058"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["3","This is a test","Hello World"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"RANRlJvwsfsnr5pkPb5EdNIGFSxl7v207n0pAGgI4Zhqws32Gzv92BzizFTsaQT41XoGZVH6ljWfrLf1bDcxDQ=="}],"memo":""},"metadata":{"timestamp":"1743712737"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"1648310ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"eKVgBjNuPm+xht6YH/l5tXH71McvdcgSAPjlHJL5noOfVFMIE/Mbs7pP0pXECIqQ5QNouD12V/EAT81eN1/yDQ=="}],"memo":""},"metadata":{"timestamp":"1743715914"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"+AnQgsjqwBa57nMiYLJQCgFzuDDAVhkt5x/rVFAqSsshwUs09yf3ksUe+z6zmw5Wi9GaGolmc5WelUD+fIAfDQ=="}],"memo":""},"metadata":{"timestamp":"1743738197"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["1","1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"+TtfHUdK8eOn61UU0S11TklKxw+opiesLW6peiVOPMqVUfm2io3Bb8M745B64R9w7/Wa5gIjwFsK3NBwCFCcDw=="}],"memo":""},"metadata":{"timestamp":"1743738288"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"DeletePost","args":["1","2","2"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"TyJBvACuE8gHyNed5jeU2OGyhr+/0knJHIWBJmSCoY2Bk+O7O5BHus2ZqT2EKJVm6UwbFu1jtjMTJhkTy9TfBw=="}],"memo":""},"metadata":{"timestamp":"1743738333"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/leon/hof","func":"Upvote","args":["gno.land%2Fr%2Fursulovic%2Fhome"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"7w85qlNpnp4p/g8ld6Cg3B1tNTKr/jEbkmOkjkZGO19A56uN/1qTbsgdnIkLD+dIKW8LlP5b9/89tr8c1PZ1Ag=="}],"memo":""},"metadata":{"timestamp":"1743738469"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["1","2"]}],"fee":{"gas_wanted":"2000000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"tVowNVrP7Rk8tQ2rKYAkIhhXBOeKDV9XBo0/1HE4zX9ZcsBE+a7nKjqIxofQV6cUbRGE4x8P9A29Ks5KjpH6Bg=="}],"memo":""},"metadata":{"timestamp":"1743738680"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1nnl20472w0effzcexuqmk4ntn20wg95ytygy55","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"TtQ39YW0Ecf2merJzXjISiic48o1tc2YJegiC3SJm+OnAbYJEhJBNgAbLJZupSz0pl3HxAWoLIaNSftWGG8TAw=="}],"memo":""},"metadata":{"timestamp":"1743739027"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1nnl20472w0effzcexuqmk4ntn20wg95ytygy55","to_address":"g1ueac005m96sheu75w2vpencyuzam66zz54msh9","amount":"9000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"sX5sD9n5f/MQ7BhkmovbjAPmb9q0TEGDnsxy1exAJd265fJfMPpNbIARz6iJTbfjHnb6dmVuD/FBYELfocJrAQ=="}],"memo":""},"metadata":{"timestamp":"1743739047"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1zeq4hn2hd2azde6p9x2ya9gp3ug30vuuv56pym","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"WyfGApIENWM21BnfCCjLar/JmI1YIu5XyCAbW8RZ8uIr48YZZUenfn9OFS6uhDSgydFHEi4dGzkJnBNapTooCA=="}],"memo":""},"metadata":{"timestamp":"1743739590"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1zeq4hn2hd2azde6p9x2ya9gp3ug30vuuv56pym","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateRepost","args":["2","2"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"HB9tk6ZVTE/MYUYpIhVbPLWSf5La5tT4Oily6u9oEypn5a7y6GZ3bRQH53PKVk0HE2KIyfw+J29M0rBa8fjbBQ=="}],"memo":""},"metadata":{"timestamp":"1743739625"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1p5pa2sp4elcja2u8wn36zv3plsyp8xrqgz0usf","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"HEdysJ0aqWgRYYCb7syiZ8D5AblFIRfXXWXhH3P3T5Dyxg1odHNQ2VwoYTQ9NX9FubLt6JItuMQ+8PlYtBNZAA=="}],"memo":""},"metadata":{"timestamp":"1743750714"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","admin"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Rqf9NhUO3sQwKUmNU7GrX8d1pzZRaNjOWqAx/XL4psTx/txvDZWdPpvbwoZFvfuaZ99/Nd07Ht9HjmXOUQCyBw=="}],"memo":""},"metadata":{"timestamp":"1743750895"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18x425qmujg99cfz3q97y4uep5pxjq3z8lmpt25","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":["aeddi-testing"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"j7ShULKK/MB8bsIL15PbOfQRCz34X7VpeVsv61YMZ9EsGEdv9rdy7NSXFf9BbKtU7acnTzc36bi8RXBqonWCAQ=="}],"memo":""},"metadata":{"timestamp":"1743751141"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","to_address":"g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","amount":"1000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"DeFguiM0qG5+CTtuNr1BM3z42UJAkDBg+7g+/7/2kLY21hC+Z2uWwpVpDehGEG9a0Pcs8e1OybcqYFKhHZ/RDg=="}],"memo":""},"metadata":{"timestamp":"1743755182"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1etcvlu8zyuwnd7w0x0lcu4g2r7yzllyy62gpa5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Ye42Dwic6f8nEQVxwxVg8DNVnlxMscInjIntiz5mOTFi4Edsqw8L1g7n4NfeQb62FOz6DiHZVoEurLEr6YhaDw=="}],"memo":""},"metadata":{"timestamp":"1743760782"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1etcvlu8zyuwnd7w0x0lcu4g2r7yzllyy62gpa5","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Transfer","args":["g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae","-1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"E0mdmjXzFwUjU0DWIzTiQRys1zkvBJ7KYowkKTnJV83tGH56kvAGutHarfu/L1Sn3z2TgKls3XeI6xIrDBn+AQ=="}],"memo":""},"metadata":{"timestamp":"1743760847"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kuCtWj1TUpFzucoJ8iAhcnx9Kmvr629VZ2v3JFLL9O/GX4U97k2O0jpn4usPHV3W6RvsRihX+bXQSZHyYYkNDw=="}],"memo":""},"metadata":{"timestamp":"1743761662"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","package":{"name":"boards2","path":"gno.land/r/devx000/gnoland/boards2/v1rc2","files":[{"name":"board.gno","body":"package boards2\n\nimport (\n\t\"net/url\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\ntype BoardID uint64\n\nfunc (id BoardID) String() string {\n\treturn strconv.Itoa(int(id))\n}\n\nfunc (id BoardID) Key() string {\n\treturn padZero(uint64(id), 10)\n}\n\ntype Board struct {\n\tid        BoardID // only set for public boards.\n\tname      string\n\taliases   []string\n\tcreator   std.Address\n\tthreads   avl.Tree // Post.id -\u003e *Post\n\tpostsCtr  uint64   // increments Post.id\n\tcreatedAt time.Time\n\tdeleted   avl.Tree // TODO reserved for fast-delete.\n\tperms     Permissions\n\treadonly  bool\n}\n\nfunc newBoard(id BoardID, name string, creator std.Address, p Permissions) *Board {\n\treturn \u0026Board{\n\t\tid:        id,\n\t\tname:      name,\n\t\tcreator:   creator,\n\t\tthreads:   avl.Tree{},\n\t\tcreatedAt: time.Now(),\n\t\tdeleted:   avl.Tree{},\n\t\tperms:     p,\n\t}\n}\n\nfunc (board *Board) GetID() BoardID {\n\treturn board.id\n}\n\n// GetName returns the name of the board.\nfunc (board *Board) GetName() string {\n\treturn board.name\n}\n\n// GetURL returns the relative URL of the board.\nfunc (board *Board) GetURL() string {\n\treturn strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\") + \":\" + url.PathEscape(board.name)\n}\n\n// GetURL returns relative board path relative.\n//\n// Note: returned result is not escaped. Use GetURL to get URL-encoded path.\nfunc (board *Board) GetPath() string {\n\treturn strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\") + \":\" + board.name\n}\n\nfunc (board *Board) GetPermissions() Permissions {\n\treturn board.perms\n}\n\n// SetReadonly updates board's read-only status.\nfunc (board *Board) SetReadonly(readonly bool) {\n\tboard.readonly = readonly\n}\n\n// IsReadonly checks if the board is a read-only board.\nfunc (board *Board) IsReadonly() bool {\n\treturn board.readonly\n}\n\nfunc (board *Board) GetThread(threadID PostID) (_ *Post, found bool) {\n\tv, found := board.threads.Get(threadID.Key())\n\tif !found {\n\t\treturn nil, false\n\t}\n\treturn v.(*Post), true\n}\n\nfunc (board *Board) AddThread(creator std.Address, title string, body string) *Post {\n\tpid := board.incGetPostID()\n\tthread := newPost(board, pid, creator, title, body, pid, 0, 0)\n\tboard.threads.Set(pid.Key(), thread)\n\treturn thread\n}\n\n// NOTE: this can be potentially very expensive for threads with many replies.\n// TODO: implement optional fast-delete where thread is simply moved.\nfunc (board *Board) DeleteThread(pid PostID) {\n\t_, removed := board.threads.Remove(pid.Key())\n\tif !removed {\n\t\tpanic(\"thread does not exist with ID \" + pid.String())\n\t}\n}\n\n// Render renders a board into Markdown.\nfunc (board *Board) Render(path, menu string) string {\n\tvar sb strings.Builder\n\n\tsb.WriteString(\"# \" + board.GetName() + \"  \\n\")\n\tsb.WriteString(\"Board created by \" + newUserLink(board.creator) + \" \")\n\tsb.WriteString(\"on \" + board.createdAt.Format(dateFormat))\n\tsb.WriteString(\", #\" + board.id.String())\n\n\tif board.IsReadonly() {\n\t\tsb.WriteString(\"  \\n_**Starting new threads and commenting is disabled**_\")\n\t}\n\n\t// XXX: Menu is rendered by the caller to deal with links and sub-menus\n\t// TODO: We should have the render logic separated from boards so avoid sending menu as argument\n\tif menu != \"\" {\n\t\tsb.WriteString(\"\\n\\n\")\n\t\tsb.WriteString(menu)\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\tsb.WriteString(\"\\n\\n---\\n\")\n\n\tif board.threads.Size() == 0 {\n\t\tsb.WriteString(\"### This board doesn't have any threads\\n\")\n\t\tif !board.IsReadonly() {\n\t\t\turl := board.GetPostFormURL()\n\t\t\tsb.WriteString(\"Do you want to [start a new conversation](\" + url + \") in this board ?\")\n\t\t}\n\t\treturn sb.String()\n\t}\n\n\tp, err := pager.New(path, board.threads.Size(), pager.WithPageSize(pageSizeThreads))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\trender := func(_ string, v any) bool {\n\t\tthread := v.(*Post)\n\t\tif thread.isHidden {\n\t\t\treturn false\n\t\t}\n\n\t\tsb.WriteString(thread.RenderSummary())\n\t\tsb.WriteString(\"\\n\")\n\t\treturn false\n\t}\n\n\tsb.WriteString(\"Sort by: \")\n\tr := realmpath.Parse(path)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tsb.WriteString(newLink(\"newest first\", r.String()))\n\t\tsb.WriteString(\"\\n\\n\")\n\t\tboard.threads.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tsb.WriteString(newLink(\"oldest first\", r.String()))\n\t\tsb.WriteString(\"\\n\\n\")\n\t\tboard.threads.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tsb.WriteString(\"\\n---\\n\")\n\t\tsb.WriteString(pager.Picker(p))\n\t}\n\n\treturn sb.String()\n}\n\nfunc (board *Board) incGetPostID() PostID {\n\tboard.postsCtr++\n\treturn PostID(board.postsCtr)\n}\n\nfunc (board *Board) GetURLFromThreadID(threadID PostID) string {\n\treturn board.GetURL() + \"/\" + threadID.String()\n}\n\nfunc (board *Board) GetURLFromReplyID(threadID, replyID PostID) string {\n\treturn board.GetURL() + \"/\" + threadID.String() + \"/\" + replyID.String()\n}\n\nfunc (board *Board) GetRenameFormURL() string { // TODO: These type of functions shouldn't be part of Board type\n\treturn txlink.Call(\n\t\t\"RenameBoard\",\n\t\t\"name\", board.name,\n\t\t\"newName\", \"\",\n\t)\n}\n\nfunc (board *Board) GetFreezeFormURL() string {\n\treturn txlink.Call(\n\t\t\"FreezeBoard\",\n\t\t\"boardID\", board.id.String(),\n\t)\n}\n\nfunc (board *Board) GetUnfreezeFormURL() string {\n\treturn txlink.Call(\n\t\t\"UnfreezeBoard\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"threadID\", \"\",\n\t\t\"replyID\", \"\",\n\t)\n}\n\nfunc (board *Board) GetFlaggingThresholdFormURL() string {\n\treturn txlink.Call(\n\t\t\"SetFlaggingThreshold\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"threshold\", \"\",\n\t)\n}\n\nfunc (board *Board) GetInviteMemberFormURL() string {\n\treturn txlink.Call(\n\t\t\"InviteMember\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"user\", \"\",\n\t\t\"role\", \"\",\n\t)\n}\n\nfunc (board *Board) GetPostFormURL() string {\n\treturn txlink.Call(\n\t\t\"CreateThread\",\n\t\t\"boardID\", board.id.String(),\n\t\t\"title\", \"\",\n\t\t\"body\", \"\",\n\t)\n}\n\nfunc (board *Board) GetMembersURL() string {\n\treturn board.GetURL() + \"/members\"\n}\n\nfunc createDefaultBoardPermissions(owner std.Address) *DefaultPermissions {\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.SetSuperRole(RoleOwner)\n\tperms.AddRole(\n\t\tRoleAdmin,\n\t\tPermissionBoardRename,\n\t\tPermissionBoardFlaggingUpdate,\n\t\tPermissionMemberInvite,\n\t\tPermissionMemberRemove,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadEdit,\n\t\tPermissionThreadDelete,\n\t\tPermissionThreadRepost,\n\t\tPermissionThreadFlag,\n\t\tPermissionThreadFreeze,\n\t\tPermissionReplyCreate,\n\t\tPermissionReplyDelete,\n\t\tPermissionReplyFlag,\n\t\tPermissionReplyFreeze,\n\t\tPermissionRoleChange,\n\t)\n\tperms.AddRole(\n\t\tRoleModerator,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadEdit,\n\t\tPermissionThreadRepost,\n\t\tPermissionThreadFlag,\n\t\tPermissionReplyCreate,\n\t\tPermissionReplyFlag,\n\t)\n\tperms.AddRole(\n\t\tRoleGuest,\n\t\tPermissionThreadCreate,\n\t\tPermissionThreadRepost,\n\t\tPermissionReplyCreate,\n\t)\n\tperms.AddUser(owner, RoleOwner)\n\treturn perms\n}\n"},{"name":"board_readonly.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"time\"\n)\n\n// ReadonlyBoard defines an interface for readonly boards.\ntype ReadonlyBoard interface {\n\t// ID returns the unique identifier of the board.\n\tID() BoardID\n\n\t// Name returns the name of the board.\n\tName() string\n\n\t// Aliases returns a list with previous names assigned to the board.\n\tAliases() []string\n\n\t// Creator returns board's creator address.\n\tCreator() std.Address\n\n\t// LastPostID returns the ID assigned to the last created thread.\n\tLastPostID() uint64\n\n\t// CreatedAt returns the time when board was created.\n\tCreatedAt() time.Time\n\n\t// IsReadonly returns true when board shouldn't allow the creation of threads and comments.\n\tIsReadonly() bool\n\n\t// MembersCount returns the number of invited board members.\n\tMembersCount() int\n\n\t// IterateMembers allows reading the list of invited board members.\n\tIterateMembers(offset, count int, fn UsersIterFn)\n}\n\ntype readonlyBoard struct {\n\tboard *Board\n}\n\nfunc (b readonlyBoard) ID() BoardID {\n\treturn b.board.id\n}\n\nfunc (b readonlyBoard) Name() string {\n\treturn b.board.name\n}\n\nfunc (b readonlyBoard) Aliases() []string {\n\taliases := make([]string, len(b.board.aliases))\n\tfor i, s := range b.board.aliases {\n\t\taliases[i] = s\n\t}\n\treturn aliases\n}\n\nfunc (b readonlyBoard) Creator() std.Address {\n\treturn b.board.creator\n}\n\nfunc (b readonlyBoard) LastPostID() uint64 {\n\treturn b.board.postsCtr\n}\n\nfunc (b readonlyBoard) CreatedAt() time.Time {\n\treturn b.board.createdAt\n}\n\nfunc (b readonlyBoard) IsReadonly() bool {\n\treturn b.board.readonly\n}\n\nfunc (b readonlyBoard) MembersCount() int {\n\treturn b.board.perms.UsersCount()\n}\n\nfunc (b readonlyBoard) IterateMembers(offset, count int, fn UsersIterFn) {\n\tb.board.perms.IterateUsers(offset, count, fn)\n}\n"},{"name":"board_test.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nfunc TestBoardID_String(t *testing.T) {\n\tinput := BoardID(32)\n\n\tuassert.Equal(t, \"32\", input.String())\n}\n\nfunc TestBoardID_Key(t *testing.T) {\n\tinput := BoardID(128)\n\twant := strings.Repeat(\"0\", 7) + \"128\"\n\tuassert.Equal(t, want, input.Key())\n}\n\nfunc TestBoard_GetID(t *testing.T) {\n\twant := int(92)\n\tb := new(Board)\n\tb.id = BoardID(want)\n\tgot := int(b.GetID())\n\n\tuassert.Equal(t, got, want)\n\tuassert.NotEqual(t, got, want*want)\n}\n\nfunc TestBoard_GetURL(t *testing.T) {\n\tpkgPath := strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\tname := \"foobar_test_get_url123\"\n\twant := pkgPath + \":\" + name\n\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tboard := newBoard(1, name, addr, perms)\n\tgot := board.GetURL()\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetThread(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(1, \"test123\", addr, perms)\n\n\t_, ok := b.GetThread(12345)\n\tuassert.False(t, ok)\n\n\tpost := b.AddThread(addr, \"foo\", \"bar\")\n\t_, ok = b.GetThread(post.GetPostID())\n\tuassert.True(t, ok)\n}\n\nfunc TestBoard_DeleteThread(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(1, \"test123\", addr, perms)\n\n\tpost := b.AddThread(addr, \"foo\", \"bar\")\n\tid := post.GetPostID()\n\n\tb.DeleteThread(id)\n\n\t_, ok := b.GetThread(id)\n\tuassert.False(t, ok)\n}\n\nvar boardUrlPrefix = strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\nfunc TestBoard_GetURLFromThreadID(t *testing.T) {\n\tboardName := \"test12345\"\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(BoardID(11), boardName, addr, perms)\n\twant := boardUrlPrefix + \":\" + boardName + \"/10\"\n\n\tgot := b.GetURLFromThreadID(10)\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetURLFromReplyID(t *testing.T) {\n\tboardName := \"test12345\"\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(BoardID(11), boardName, addr, perms)\n\twant := boardUrlPrefix + \":\" + boardName + \"/10/20\"\n\n\tgot := b.GetURLFromReplyID(10, 20)\n\tuassert.Equal(t, want, got)\n}\n\nfunc TestBoard_GetPostFormURL(t *testing.T) {\n\tbid := BoardID(386)\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tb := newBoard(bid, \"foo1234\", addr, perms)\n\texpect := txlink.Call(\"CreateThread\", \"boardID\", bid.String(), \"title\", \"\", \"body\", \"\")\n\n\tgot := b.GetPostFormURL()\n\tuassert.Equal(t, expect, got)\n}\n"},{"name":"boards.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\tgPerms        Permissions\n\tgNotice       string\n\tgHelp         string\n\tgLastBoardID  BoardID\n\tgBoardsByID   avl.Tree // string(id) -\u003e *Board\n\tgBoardsByName avl.Tree // string(name) -\u003e *Board\n\tgLocked       struct {\n\t\trealm        bool\n\t\trealmMembers bool\n\t}\n)\n\nfunc init() {\n\t// TODO: Define and change the default realm owner (or owners)\n\towner := std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\n\t// Initialize default realm permissions\n\tgPerms = createDefaultPermissions(owner)\n\n\t// Import relevant initial state from previous version\n\tinitFromPrevVersion()\n}\n\n// incGetBoardID returns a new board ID.\nfunc incGetBoardID() BoardID {\n\tgLastBoardID++\n\treturn gLastBoardID\n}\n\n// getBoard returns a board for a specific ID.\nfunc getBoard(id BoardID) (_ *Board, found bool) {\n\tv, exists := gBoardsByID.Get(id.Key())\n\tif !exists {\n\t\treturn nil, false\n\t}\n\treturn v.(*Board), true\n}\n\n// mustGetBoardByName returns a board or panics when it's not found.\nfunc mustGetBoardByName(name string) *Board {\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tpanic(\"board does not exist with name: \" + name)\n\t}\n\treturn v.(*Board)\n}\n\n// mustGetBoard returns a board or panics when it's not found.\nfunc mustGetBoard(id BoardID) *Board {\n\tboard, found := getBoard(id)\n\tif !found {\n\t\tpanic(\"board does not exist with ID: \" + id.String())\n\t}\n\treturn board\n}\n\n// mustGetThread returns a thread or panics when it's not found.\nfunc mustGetThread(board *Board, threadID PostID) *Post {\n\tthread, found := board.GetThread(threadID)\n\tif !found {\n\t\tpanic(\"thread does not exist with ID: \" + threadID.String())\n\t}\n\treturn thread\n}\n\n// mustGetReply returns a reply or panics when it's not found.\nfunc mustGetReply(thread *Post, replyID PostID) *Post {\n\treply, found := thread.GetReply(replyID)\n\tif !found {\n\t\tpanic(\"reply does not exist with ID: \" + replyID.String())\n\t}\n\treturn reply\n}\n\nfunc mustGetPermissions(bid BoardID) Permissions {\n\tif bid != 0 {\n\t\tboard := mustGetBoard(bid)\n\t\treturn board.perms\n\t}\n\treturn gPerms\n}\n"},{"name":"flag.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n// DefaultFlaggingThreshold defines the default number of flags that hides flaggable items.\nconst DefaultFlaggingThreshold = 1\n\nvar gFlaggingThresholds avl.Tree // string(board ID) -\u003e int\n\ntype Flag struct {\n\tUser   std.Address\n\tReason string\n}\n\ntype Flaggable interface {\n\t// AddFlag adds a new flag to an item.\n\t//\n\t// Returns false if item was already flagged by user.\n\tAddFlag(flag Flag) bool\n\n\t// FlagsCount returns number of times item was flagged.\n\tFlagsCount() int\n}\n\n// flagItem adds a flag to a flaggable item (post, thread, etc).\n//\n// Returns whether flag count threshold is reached and item can be hidden.\n//\n// Panics if flag count threshold was already reached.\nfunc flagItem(item Flaggable, flag Flag, threshold int) bool {\n\tif item.FlagsCount() \u003e= threshold {\n\t\tpanic(\"item flag count threshold exceeded: \" + strconv.Itoa(threshold))\n\t}\n\n\tif !item.AddFlag(flag) {\n\t\tpanic(\"item has been already flagged by a current user\")\n\t}\n\n\treturn item.FlagsCount() == threshold\n}\n\nfunc getFlaggingThreshold(bid BoardID) int {\n\tif v, ok := gFlaggingThresholds.Get(bid.String()); ok {\n\t\treturn v.(int)\n\t}\n\treturn DefaultFlaggingThreshold\n}\n"},{"name":"format.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/r/sys/users\"\n)\n\nfunc padLeft(s string, length int) string {\n\tif len(s) \u003e= length {\n\t\treturn s\n\t}\n\treturn strings.Repeat(\" \", length-len(s)) + s\n}\n\nfunc padZero(u64 uint64, length int) string {\n\ts := strconv.Itoa(int(u64))\n\tif len(s) \u003e= length {\n\t\treturn s\n\t}\n\treturn strings.Repeat(\"0\", length-len(s)) + s\n}\n\nfunc indentBody(indent string, body string) string {\n\tvar (\n\t\tres   string\n\t\tlines = strings.Split(body, \"\\n\")\n\t)\n\tfor i, line := range lines {\n\t\tif i \u003e 0 {\n\t\t\tres += \"\\n\"\n\t\t}\n\t\tres += indent + line\n\t}\n\treturn res\n}\n\n// NOTE: length must be greater than 3.\nfunc summaryOf(text string, length int) string {\n\tlines := strings.SplitN(text, \"\\n\", 2)\n\tline := lines[0]\n\tif len(line) \u003e length {\n\t\tline = line[:(length-3)] + \"...\"\n\t} else if len(lines) \u003e 1 {\n\t\t// len(line) \u003c= 80\n\t\tline = line + \"...\"\n\t}\n\treturn line\n}\n\n// newLink returns a Markdown link.\nfunc newLink(label, uri string) string {\n\treturn \"[\" + label + \"](\" + uri + \")\"\n}\n\n// newButtonLink returns a Makdown link with label wrapped in brackets.\nfunc newButtonLink(label, uri string) string {\n\treturn `[\\[` + label + `\\]](` + uri + \")\"\n}\n\n// newUserLink returns a Markdown link for an account to the users\n// realm or the address as string when a user is not registered.\nfunc newUserLink(addr std.Address) string {\n\tuser := users.ResolveAddress(addr)\n\tif user != nil {\n\t\treturn user.RenderLink(\"\")\n\t}\n\treturn addr.String()\n}\n"},{"name":"migrations.gno","body":"package boards2\n\nimport (\n\tv1rc1 \"gno.land/r/devx000/gnoland/boards2/v1rc1\"\n)\n\nfunc initFromPrevVersion() {\n\timportRealmMembers()\n}\n\nfunc importRealmMembers() {\n\tv1rc1.IterateRealmMembers(0, func(member v1rc1.User) bool {\n\t\t// XXX: This wouldn't be required if a boards2 package is created\n\t\troles := make([]Role, len(member.Roles))\n\t\tfor i, r := range member.Roles {\n\t\t\troles[i] = Role(r)\n\t\t}\n\n\t\tgPerms.AddUser(member.Address, roles...)\n\t\treturn false\n\t})\n}\n"},{"name":"permissions.gno","body":"package boards2\n\nimport \"std\"\n\nconst (\n\tPermissionRealmHelp           Permission = \"realm:help\"\n\tPermissionRealmLock                      = \"realm:lock\"\n\tPermissionRealmNotice                    = \"realm:notice\"\n\tPermissionBoardCreate                    = \"board:create\"\n\tPermissionBoardFlaggingUpdate            = \"board:flagging-update\"\n\tPermissionBoardFreeze                    = \"board:freeze\"\n\tPermissionBoardRename                    = \"board:rename\"\n\tPermissionThreadCreate                   = \"thread:create\"\n\tPermissionThreadDelete                   = \"thread:delete\"\n\tPermissionThreadEdit                     = \"thread:edit\"\n\tPermissionThreadFlag                     = \"thread:flag\"\n\tPermissionThreadFreeze                   = \"thread:freeze\"\n\tPermissionThreadRepost                   = \"thread:repost\"\n\tPermissionReplyCreate                    = \"reply:create\"\n\tPermissionReplyDelete                    = \"reply:delete\"\n\tPermissionReplyFlag                      = \"reply:flag\"\n\tPermissionReplyFreeze                    = \"reply:freeze\"\n\tPermissionMemberInvite                   = \"member:invite\"\n\tPermissionMemberRemove                   = \"member:remove\"\n\tPermissionRoleChange                     = \"role:change\"\n\tPermissionPermissionsUpdate              = \"permissions:update\"\n)\n\nconst (\n\tRoleGuest     Role = \"\"\n\tRoleOwner          = \"owner\"\n\tRoleAdmin          = \"admin\"\n\tRoleModerator      = \"moderator\"\n)\n\ntype (\n\t// Permission defines the type for permissions.\n\tPermission string\n\n\t// Role defines the type for user roles.\n\tRole string\n\n\t// Args is a list of generic arguments.\n\tArgs []interface{}\n\n\t// User contains user info.\n\tUser struct {\n\t\tAddress std.Address\n\t\tRoles   []Role\n\t}\n\n\t// UsersIterFn defines a function type to iterate users.\n\tUsersIterFn func(User) bool\n\n\t// Permissions define an interface to for permissioned execution.\n\tPermissions interface {\n\t\t// HasRole checks if a user has a specific role assigned.\n\t\tHasRole(std.Address, Role) bool\n\n\t\t// HasPermission checks if a user has a specific permission.\n\t\tHasPermission(std.Address, Permission) bool\n\n\t\t// WithPermission calls a callback when a user has a specific permission.\n\t\t// It panics on error.\n\t\tWithPermission(std.Address, Permission, Args, func(Args))\n\n\t\t// AddUser adds a new user to the permissioner.\n\t\tAddUser(std.Address, ...Role) error\n\n\t\t// SetUserRoles sets the roles of a user.\n\t\tSetUserRoles(std.Address, ...Role) error\n\n\t\t// RemoveUser removes a user from the permissioner.\n\t\tRemoveUser(std.Address) (removed bool)\n\n\t\t// HasUser checks if a user exists.\n\t\tHasUser(std.Address) bool\n\n\t\t// UsersCount returns the total number of users the permissioner contains.\n\t\tUsersCount() int\n\n\t\t// IterateUsers iterates permissions' users.\n\t\tIterateUsers(start, count int, fn UsersIterFn) bool\n\t}\n)\n"},{"name":"permissions_default.gno","body":"package boards2\n\nimport (\n\t\"errors\"\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\t\"gno.land/r/sys/users\"\n)\n\n// DefaultPermissions manages users, roles and permissions.\ntype DefaultPermissions struct {\n\tsuperRole Role\n\tdao       *commondao.CommonDAO\n\tusers     *avl.Tree // string(std.Address) -\u003e []Role\n\troles     *avl.Tree // string(role) -\u003e []Permission\n}\n\n// NewDefaultPermissions creates a new permissions type.\n// This type is a default implementation to handle users, roles and permissions.\nfunc NewDefaultPermissions(dao *commondao.CommonDAO) *DefaultPermissions {\n\tif dao == nil {\n\t\tpanic(\"default permissions require a DAO\")\n\t}\n\n\tdp := \u0026DefaultPermissions{\n\t\tdao:   dao,\n\t\troles: avl.NewTree(),\n\t\tusers: avl.NewTree(),\n\t}\n\n\t// Make sure that DAO users are indexed when DAO has members\n\tdao.Members().IterateByOffset(0, dao.Members().Size(), func(m std.Address) bool {\n\t\tdp.users.Set(m.String(), []Role(nil))\n\t\treturn false\n\t})\n\n\treturn dp\n}\n\n// SetSuperRole assigns a super role.\n// A super role is one that have all permissions.\n// These type of role doesn't need to be mapped to any permission.\nfunc (dp *DefaultPermissions) SetSuperRole(r Role) {\n\tdp.superRole = r\n}\n\n// AddRole add a role with one or more assigned permissions.\nfunc (dp *DefaultPermissions) AddRole(r Role, p Permission, extra ...Permission) {\n\tdp.roles.Set(string(r), append([]Permission{p}, extra...))\n}\n\n// RoleExists checks if a role exists.\nfunc (dp DefaultPermissions) RoleExists(r Role) bool {\n\tif dp.superRole != \"\" \u0026\u0026 r == dp.superRole {\n\t\treturn true\n\t}\n\n\treturn dp.roles.Iterate(\"\", \"\", func(name string, _ interface{}) bool {\n\t\treturn Role(name) == r\n\t})\n}\n\n// GetUserRoles returns the list of roles assigned to a user.\nfunc (dp DefaultPermissions) GetUserRoles(user std.Address) []Role {\n\tv, found := dp.users.Get(user.String())\n\tif !found {\n\t\treturn nil\n\t}\n\treturn v.([]Role)\n}\n\n// HasRole checks if a user has a specific role assigned.\nfunc (dp DefaultPermissions) HasRole(user std.Address, r Role) bool {\n\tfor _, role := range dp.GetUserRoles(user) {\n\t\tif role == r {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// HasPermission checks if a user has a specific permission.\nfunc (dp DefaultPermissions) HasPermission(user std.Address, perm Permission) bool {\n\tfor _, r := range dp.GetUserRoles(user) {\n\t\tif dp.superRole == r {\n\t\t\treturn true\n\t\t}\n\n\t\tv, found := dp.roles.Get(string(r))\n\t\tif !found {\n\t\t\tcontinue\n\t\t}\n\n\t\tfor _, p := range v.([]Permission) {\n\t\t\tif p == perm {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// AddUser adds a new user to permissions.\nfunc (dp *DefaultPermissions) AddUser(user std.Address, roles ...Role) error {\n\tif dp.users.Has(user.String()) {\n\t\treturn errors.New(\"user already exists\")\n\t}\n\n\tdp.dao.Members().Add(user)\n\treturn dp.setUserRoles(user, roles...)\n}\n\n// SetUserRoles sets the roles of a user.\nfunc (dp *DefaultPermissions) SetUserRoles(user std.Address, roles ...Role) error {\n\tif !dp.users.Has(user.String()) {\n\t\treturn errors.New(\"user not found\")\n\t}\n\treturn dp.setUserRoles(user, roles...)\n}\n\n// RemoveUser removes a user from permissions.\nfunc (dp *DefaultPermissions) RemoveUser(user std.Address) bool {\n\t_, removed := dp.users.Remove(user.String())\n\tdp.dao.Members().Remove(user)\n\treturn removed\n}\n\n// HasUser checks if a user exists.\nfunc (dp DefaultPermissions) HasUser(user std.Address) bool {\n\treturn dp.users.Has(user.String())\n}\n\n// UsersCount returns the total number of users the permissioner contains.\nfunc (dp DefaultPermissions) UsersCount() int {\n\treturn dp.users.Size()\n}\n\n// IterateUsers iterates permissions' users.\nfunc (dp DefaultPermissions) IterateUsers(start, count int, fn UsersIterFn) bool {\n\treturn dp.users.IterateByOffset(start, count, func(k string, v interface{}) bool {\n\t\treturn fn(User{\n\t\t\tAddress: std.Address(k),\n\t\t\tRoles:   v.([]Role),\n\t\t})\n\t})\n}\n\n// WithPermission calls a callback when a user has a specific permission.\n// It panics on error or when a handler panics.\n// Callbacks are by default called when there is no handle registered for the permission.\nfunc (dp *DefaultPermissions) WithPermission(user std.Address, perm Permission, args Args, cb func(Args)) {\n\tif !dp.HasPermission(user, perm) || !dp.dao.Members().Has(user) {\n\t\tpanic(\"unauthorized\")\n\t}\n\n\tswitch perm {\n\tcase PermissionBoardCreate:\n\t\tdp.handleBoardCreate(args, cb)\n\tcase PermissionBoardRename:\n\t\tdp.handleBoardRename(args, cb)\n\tcase PermissionMemberInvite:\n\t\tdp.handleMemberInvite(args, cb)\n\tcase PermissionRoleChange:\n\t\tdp.handleRoleChange(args, cb)\n\tdefault:\n\t\tcb(args)\n\t}\n}\n\nfunc (dp *DefaultPermissions) setUserRoles(user std.Address, roles ...Role) error {\n\tfor _, r := range roles {\n\t\tif !dp.RoleExists(r) {\n\t\t\treturn errors.New(\"invalid role: \" + string(r))\n\t\t}\n\t}\n\n\tdp.users.Set(user.String(), append([]Role(nil), roles...))\n\treturn nil\n}\n\nfunc (DefaultPermissions) handleBoardCreate(args Args, cb func(Args)) {\n\tname, ok := args[0].(string)\n\tif !ok {\n\t\tpanic(\"expected board name to be a string\")\n\t}\n\n\tassertBoardNameIsNotAddress(name)\n\tassertBoardNameBelongsToCaller(name)\n\n\tcb(args)\n}\n\nfunc (DefaultPermissions) handleBoardRename(args Args, cb func(Args)) {\n\tnewName, ok := args[2].(string)\n\tif !ok {\n\t\tpanic(\"expected new board name to be a string\")\n\t}\n\n\tassertBoardNameIsNotAddress(newName)\n\tassertBoardNameBelongsToCaller(newName)\n\n\tcb(args)\n}\n\nfunc (dp DefaultPermissions) handleMemberInvite(args Args, cb func(Args)) {\n\t// Make sure that only owners invite other owners\n\trole, ok := args[1].(Role)\n\tif !ok {\n\t\tpanic(\"expected a valid new member role\")\n\t}\n\n\tif role == RoleOwner {\n\t\tif !dp.HasRole(std.PreviousRealm().Address(), RoleOwner) {\n\t\t\tpanic(\"only owners are allowed to invite other owners\")\n\t\t}\n\t}\n\n\tcb(args)\n}\n\nfunc (dp DefaultPermissions) handleRoleChange(args Args, cb func(Args)) {\n\t// Owners and Admins can change roles.\n\t// Admins should not be able to assign or remove the Owner role from members.\n\tif dp.HasRole(std.PreviousRealm().Address(), RoleAdmin) {\n\t\trole, ok := args[2].(Role)\n\t\tif !ok {\n\t\t\tpanic(\"expected a valid member role\")\n\t\t}\n\n\t\tif role == RoleOwner {\n\t\t\tpanic(\"admins are not allowed to promote members to Owner\")\n\t\t} else {\n\t\t\tmember, ok := args[1].(std.Address)\n\t\t\tif !ok {\n\t\t\t\tpanic(\"expected a valid member address\")\n\t\t\t}\n\n\t\t\tif dp.HasRole(member, RoleOwner) {\n\t\t\t\tpanic(\"admins are not allowed to remove the Owner role\")\n\t\t\t}\n\t\t}\n\t}\n\n\tcb(args)\n}\n\nfunc createDefaultPermissions(owner std.Address) *DefaultPermissions {\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.SetSuperRole(RoleOwner)\n\tperms.AddRole(RoleAdmin, PermissionBoardCreate)\n\tperms.AddUser(owner, RoleOwner)\n\treturn perms\n}\n\nfunc assertBoardNameIsNotAddress(s string) {\n\tif std.Address(s).IsValid() {\n\t\tpanic(\"addresses are not allowed as board name\")\n\t}\n}\n\nfunc assertBoardNameBelongsToCaller(name string) {\n\t// When the board name is the name of a registered user\n\t// check that caller is the owner of the name.\n\tuser, _ := users.ResolveName(name)\n\tif user != nil \u0026\u0026 user.Addr() != std.PreviousRealm().Address() {\n\t\tpanic(\"board name is a user name registered to a different user\")\n\t}\n}\n"},{"name":"permissions_default_test.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/urequire\"\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n)\n\nvar _ Permissions = (*DefaultPermissions)(nil)\n\nfunc TestDefaultPermissionsWithPermission(t *testing.T) {\n\tcases := []struct {\n\t\tname       string\n\t\tuser       std.Address\n\t\tpermission Permission\n\t\targs       Args\n\t\tsetup      func() *DefaultPermissions\n\t\terr        string\n\t\tcalled     bool\n\t}{\n\t\t{\n\t\t\tname:       \"ok\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\tcalled: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with arguments\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\targs:       Args{\"a\", \"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\tcalled: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"no permission\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"unauthorized\",\n\t\t},\n\t\t{\n\t\t\tname:       \"is not a DAO member\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t\terr: \"unauthorized\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar (\n\t\t\t\tcalled bool\n\t\t\t\targs   Args\n\t\t\t)\n\n\t\t\tperms := tc.setup()\n\t\t\tcallback := func(a Args) {\n\t\t\t\targs = a\n\t\t\t\tcalled = true\n\t\t\t}\n\n\t\t\ttestCaseFn := func() {\n\t\t\t\tperms.WithPermission(tc.user, tc.permission, tc.args, callback)\n\t\t\t}\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.PanicsWithMessage(t, tc.err, testCaseFn, \"panic\")\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NotPanics(t, testCaseFn, \"no panic\")\n\t\t\t}\n\n\t\t\turequire.Equal(t, tc.called, called, \"callback called\")\n\t\t\turequire.Equal(t, len(tc.args), len(args), \"args count\")\n\t\t\tfor i, a := range args {\n\t\t\t\tuassert.Equal(t, tc.args[i].(string), a.(string))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsGetUserRoles(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []string\n\t\tsetup func() *DefaultPermissions\n\t}{\n\t\t{\n\t\t\tname:  \"single role\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple roles\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\", \"foo\", \"bar\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddRole(\"bar\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\", \"foo\", \"bar\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"without roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"not a user\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple users\",\n\t\t\tuser:  \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\troles: []string{\"admin\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"bar\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"admin\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\", \"admin\", \"bar\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\troles := perms.GetUserRoles(tc.user)\n\n\t\t\turequire.Equal(t, len(tc.roles), len(roles), \"user role count\")\n\t\t\tfor i, r := range roles {\n\t\t\t\tuassert.Equal(t, tc.roles[i], string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsHasRole(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\trole  Role\n\t\tsetup func() *DefaultPermissions\n\t\twant  bool\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"admin\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"ok with multiple roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"foo\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"admin\", \"x\")\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"admin\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"user without roles\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"has no role\",\n\t\t\tuser: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\trole: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"x\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.HasRole(tc.user, tc.role)\n\t\t\tuassert.Equal(t, got, tc.want)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsHasPermission(t *testing.T) {\n\tcases := []struct {\n\t\tname       string\n\t\tuser       std.Address\n\t\tpermission Permission\n\t\tsetup      func() *DefaultPermissions\n\t\twant       bool\n\t}{\n\t\t{\n\t\t\tname:       \"ok\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with multiple users\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"bar\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with multiple roles\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"other\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddRole(\"baz\", \"other\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\", \"baz\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname:       \"no permission\",\n\t\t\tuser:       \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tpermission: \"other\",\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"foo\", \"bar\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"foo\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.HasPermission(tc.user, tc.permission)\n\t\t\tuassert.Equal(t, got, tc.want)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsAddUser(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []Role\n\t\tsetup func() *DefaultPermissions\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname:  \"single user\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple users\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", \"a\")\n\t\t\t\tperms.AddUser(\"g1w4ek2u3jta047h6lta047h6lta047h6l9huexc\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"duplicated user\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"user already exists\",\n\t\t},\n\t\t{\n\t\t\tname:  \"duplicated user\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"foo\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"invalid role: foo\",\n\t\t},\n\t\t{\n\t\t\tname: \"already a DAO member\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(\n\t\t\t\t\tcommondao.New(commondao.WithMember(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")),\n\t\t\t\t)\n\t\t\t},\n\t\t\terr: \"user already exists\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\n\t\t\terr := perms.AddUser(tc.user, tc.roles...)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.Error(t, err, \"expected an error\")\n\t\t\t\tuassert.Equal(t, tc.err, err.Error())\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NoError(t, err)\n\t\t\t}\n\n\t\t\troles := perms.GetUserRoles(tc.user)\n\t\t\tuassert.Equal(t, len(tc.roles), len(roles))\n\t\t\tfor i, r := range roles {\n\t\t\t\turequire.Equal(t, string(tc.roles[i]), string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsSetUserRoles(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\troles []Role\n\t\tsetup func() *DefaultPermissions\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname:  \"single role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"b\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"multiple roles\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"b\", \"c\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddRole(\"c\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"duplicated role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"a\", \"c\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddRole(\"c\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\", \"c\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"remove roles\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddRole(\"b\", \"permission2\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\", \"b\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid role\",\n\t\t\tuser:  std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\troles: []Role{\"x\", \"a\"},\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddRole(\"a\", \"permission1\")\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\", \"a\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\terr: \"invalid role: x\",\n\t\t},\n\t\t{\n\t\t\tname: \"user not found\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t\terr: \"user not found\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\n\t\t\terr := perms.SetUserRoles(tc.user, tc.roles...)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\turequire.True(t, err != nil, \"expected an error\")\n\t\t\t\tuassert.Equal(t, tc.err, err.Error())\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\turequire.NoError(t, err)\n\t\t\t}\n\n\t\t\troles := perms.GetUserRoles(tc.user)\n\t\t\tuassert.Equal(t, len(tc.roles), len(roles))\n\t\t\tfor i, r := range roles {\n\t\t\t\turequire.Equal(t, string(tc.roles[i]), string(r))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsRemoveUser(t *testing.T) {\n\tcases := []struct {\n\t\tname  string\n\t\tuser  std.Address\n\t\tsetup func() *DefaultPermissions\n\t\twant  bool\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\tperms := NewDefaultPermissions(commondao.New())\n\t\t\t\tperms.AddUser(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n\t\t\t\treturn perms\n\t\t\t},\n\t\t\twant: true,\n\t\t},\n\t\t{\n\t\t\tname: \"user not found\",\n\t\t\tuser: std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\"),\n\t\t\tsetup: func() *DefaultPermissions {\n\t\t\t\treturn NewDefaultPermissions(commondao.New())\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tperms := tc.setup()\n\t\t\tgot := perms.RemoveUser(tc.user)\n\t\t\tuassert.Equal(t, tc.want, got)\n\t\t})\n\t}\n}\n\nfunc TestDefaultPermissionsIterateUsers(t *testing.T) {\n\tusers := []User{\n\t\t{\n\t\t\tAddress: \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\",\n\t\t\tRoles:   []Role{\"foo\"},\n\t\t},\n\t\t{\n\t\t\tAddress: \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\",\n\t\t\tRoles:   []Role{\"foo\", \"bar\"},\n\t\t},\n\t\t{\n\t\t\tAddress: \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\",\n\t\t\tRoles:   []Role{\"bar\"},\n\t\t},\n\t}\n\n\tperms := NewDefaultPermissions(commondao.New())\n\tperms.AddRole(\"foo\", \"perm1\")\n\tperms.AddRole(\"bar\", \"perm2\")\n\tfor _, u := range users {\n\t\tperms.AddUser(u.Address, u.Roles...)\n\t}\n\n\tcases := []struct {\n\t\tname               string\n\t\tstart, count, want int\n\t}{\n\t\t{\n\t\t\tname:  \"exceed users count\",\n\t\t\tcount: 50,\n\t\t\twant:  3,\n\t\t},\n\t\t{\n\t\t\tname:  \"exact users count\",\n\t\t\tcount: 3,\n\t\t\twant:  3,\n\t\t},\n\t\t{\n\t\t\tname:  \"two users\",\n\t\t\tstart: 1,\n\t\t\tcount: 2,\n\t\t\twant:  2,\n\t\t},\n\t\t{\n\t\t\tname:  \"one user\",\n\t\t\tstart: 1,\n\t\t\tcount: 1,\n\t\t\twant:  1,\n\t\t},\n\t\t{\n\t\t\tname:  \"no iteration\",\n\t\t\tstart: 50,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar i int\n\t\t\tperms.IterateUsers(0, len(users), func(u User) bool {\n\t\t\t\turequire.True(t, i \u003c len(users), \"expect iterator to respect number of users\")\n\t\t\t\tuassert.Equal(t, users[i].Address, u.Address)\n\n\t\t\t\turequire.Equal(t, len(users[i].Roles), len(u.Roles), \"expect number of roles to match\")\n\t\t\t\tfor j, r := range u.Roles {\n\t\t\t\t\tuassert.Equal(t, string(users[i].Roles[j]), string(u.Roles[j]))\n\t\t\t\t}\n\n\t\t\t\ti++\n\t\t\t})\n\n\t\t\tuassert.Equal(t, i, len(users), \"expect iterator to iterate all users\")\n\t\t})\n\t}\n}\n"},{"name":"post.gno","body":"package boards2\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nconst dateFormat = \"2006-01-02 3:04pm MST\"\n\ntype PostID uint64\n\nfunc (id PostID) String() string {\n\treturn strconv.Itoa(int(id))\n}\n\nfunc (id PostID) Key() string {\n\treturn padZero(uint64(id), 10)\n}\n\n// A Post is a \"thread\" or a \"reply\" depending on context.\n// A thread is a Post of a Board that holds other replies.\ntype Post struct {\n\tboard         *Board\n\tid            PostID\n\tcreator       std.Address\n\ttitle         string // optional\n\tbody          string\n\tisHidden      bool\n\tisReadonly    bool\n\treplies       avl.Tree // Post.id -\u003e *Post\n\trepliesAll    avl.Tree // Post.id -\u003e *Post (all replies, for top-level posts)\n\treposts       avl.Tree // Board.id -\u003e Post.id\n\tflags         []Flag\n\tthreadID      PostID  // original Post.id\n\tparentID      PostID  // parent Post.id (if reply or repost)\n\trepostBoardID BoardID // original Board.id (if repost)\n\trepostsCount  uint64\n\tcreatedAt     time.Time\n\tupdatedAt     time.Time\n}\n\nfunc newPost(board *Board, id PostID, creator std.Address, title, body string, threadID, parentID PostID, repostBoardID BoardID) *Post {\n\treturn \u0026Post{\n\t\tboard:         board,\n\t\tid:            id,\n\t\tcreator:       creator,\n\t\ttitle:         title,\n\t\tbody:          body,\n\t\treplies:       avl.Tree{},\n\t\trepliesAll:    avl.Tree{},\n\t\treposts:       avl.Tree{},\n\t\tthreadID:      threadID,\n\t\tparentID:      parentID,\n\t\trepostBoardID: repostBoardID,\n\t\tcreatedAt:     time.Now(),\n\t}\n}\n\nfunc (post *Post) IsRepost() bool {\n\treturn post.repostBoardID != 0\n}\n\nfunc (post *Post) IsThread() bool {\n\t// repost threads also have parent ID\n\treturn post.parentID == 0 || post.IsRepost()\n}\n\nfunc (post *Post) GetBoard() *Board {\n\treturn post.board\n}\n\nfunc (post *Post) GetPostID() PostID {\n\treturn post.id\n}\n\nfunc (post *Post) GetParentID() PostID {\n\treturn post.parentID\n}\n\nfunc (post *Post) GetRepostBoardID() BoardID {\n\treturn post.repostBoardID\n}\n\nfunc (post *Post) GetCreator() std.Address {\n\treturn post.creator\n}\n\nfunc (post *Post) GetTitle() string {\n\treturn post.title\n}\n\nfunc (post *Post) GetBody() string {\n\treturn post.body\n}\n\nfunc (post *Post) GetCreatedAt() time.Time {\n\treturn post.createdAt\n}\n\nfunc (post *Post) GetUpdatedAt() time.Time {\n\treturn post.updatedAt\n}\n\nfunc (post *Post) AddFlag(flag Flag) bool {\n\t// TODO: sort flags for fast search in case of big thresholds\n\tfor _, v := range post.flags {\n\t\tif v.User == flag.User {\n\t\t\treturn false\n\t\t}\n\t}\n\n\tpost.flags = append(post.flags, flag)\n\treturn true\n}\n\nfunc (post *Post) FlagsCount() int {\n\treturn len(post.flags)\n}\n\nfunc (post *Post) SetVisible(isVisible bool) {\n\tpost.isHidden = !isVisible\n}\n\nfunc (post *Post) IsHidden() bool {\n\treturn post.isHidden\n}\n\nfunc (post *Post) SetReadonly(isReadonly bool) {\n\tpost.isReadonly = isReadonly\n}\n\nfunc (post *Post) IsReadonly() bool {\n\treturn post.isReadonly\n}\n\nfunc (post *Post) AddReply(creator std.Address, body string) *Post {\n\tboard := post.board\n\tpid := board.incGetPostID()\n\tpKey := pid.Key()\n\treply := newPost(board, pid, creator, \"\", body, post.threadID, post.id, 0)\n\t// TODO: Figure out how to remove this redundancy of data \"replies==repliesAll\" in threads\n\tpost.replies.Set(pKey, reply)\n\tif post.threadID == post.id {\n\t\tpost.repliesAll.Set(pKey, reply)\n\t} else {\n\t\tthread, _ := board.GetThread(post.threadID)\n\t\tthread.repliesAll.Set(pKey, reply)\n\t}\n\treturn reply\n}\n\nfunc (post *Post) Update(title string, body string) {\n\tpost.title = title\n\tpost.body = body\n\tpost.updatedAt = time.Now()\n}\n\nfunc (post *Post) HasReplies() bool {\n\treturn post.replies.Size() \u003e 0\n}\n\nfunc (thread *Post) GetReply(pid PostID) (_ *Post, found bool) {\n\tv, found := thread.repliesAll.Get(pid.Key())\n\tif !found {\n\t\treturn nil, false\n\t}\n\treturn v.(*Post), true\n}\n\nfunc (post *Post) AddRepostTo(creator std.Address, repost *Post, dst *Board) {\n\tif !post.IsThread() {\n\t\tpanic(\"cannot repost non-thread post\")\n\t}\n\n\tpost.repostsCount++\n\tdst.threads.Set(repost.id.Key(), repost)\n\tpost.reposts.Set(dst.id.Key(), repost.id)\n}\n\nfunc (post *Post) DeleteReply(replyID PostID) error {\n\tif !post.IsThread() {\n\t\t// TODO: Allow removing replies from parent replies too\n\t\tpanic(\"cannot delete reply from a non-thread post\")\n\t}\n\n\tif post.id == replyID {\n\t\treturn errors.New(\"expected an ID of an inner reply\")\n\t}\n\n\tkey := replyID.Key()\n\tv, removed := post.repliesAll.Remove(key)\n\tif !removed {\n\t\treturn errors.New(\"reply not found in thread\")\n\t}\n\n\t// TODO: Shouldn't reply be hidden instead of deleted? Maybe replace reply by a deleted message.\n\treply := v.(*Post)\n\tif reply.parentID != post.id {\n\t\tparent, _ := post.GetReply(reply.parentID)\n\t\tparent.replies.Remove(key)\n\t} else {\n\t\tpost.replies.Remove(key)\n\t}\n\treturn nil\n}\n\nfunc (post *Post) GetSummary() string {\n\treturn summaryOf(post.body, 80)\n}\n\nfunc (post *Post) GetURL() string {\n\tif post.IsThread() {\n\t\treturn post.board.GetURLFromThreadID(post.id)\n\t}\n\treturn post.board.GetURLFromReplyID(post.threadID, post.id)\n}\n\nfunc (post *Post) GetReplyFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"CreateReply\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"replyID\", \"0\",\n\t\t\t\"body\", \"\",\n\t\t)\n\t}\n\treturn txlink.Call(\n\t\t\"CreateReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t\t\"body\", \"\",\n\t)\n}\n\nfunc (post *Post) GetRepostFormURL() string {\n\treturn txlink.Call(\n\t\t\"CreateRepost\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.id.String(),\n\t\t\"title\", \"\",\n\t\t\"body\", \"\",\n\t\t\"destinationBoardID\", \"\",\n\t)\n}\n\nfunc (post *Post) GetDeleteFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"DeleteThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t)\n\t}\n\treturn txlink.Call(\n\t\t\"DeleteReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t)\n}\n\nfunc (post *Post) GetEditFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"EditThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"title\", post.GetTitle(),\n\t\t\t\"body\", post.GetBody(),\n\t\t)\n\t}\n\n\treturn txlink.Call(\n\t\t\"EditReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t\t\"body\", post.GetBody(),\n\t)\n}\n\nfunc (post *Post) GetFlagFormURL() string {\n\tif post.IsThread() {\n\t\treturn txlink.Call(\n\t\t\t\"FlagThread\",\n\t\t\t\"boardID\", post.board.id.String(),\n\t\t\t\"threadID\", post.threadID.String(),\n\t\t\t\"reason\", \"\",\n\t\t)\n\t}\n\n\treturn txlink.Call(\n\t\t\"FlagReply\",\n\t\t\"boardID\", post.board.id.String(),\n\t\t\"threadID\", post.threadID.String(),\n\t\t\"replyID\", post.id.String(),\n\t\t\"reason\", \"\",\n\t)\n}\n\nfunc (post *Post) RenderSummary() string {\n\tvar (\n\t\tb       strings.Builder\n\t\tpostURL = post.GetURL()\n\t\ttitle   = post.title\n\t)\n\n\tb.WriteString(\"**≡ \" + newLink(summaryOf(title, 80), postURL) + \"**  \\n\")\n\tb.WriteString(\"Created by \" + newUserLink(post.creator) + \" on \" + post.createdAt.Format(dateFormat))\n\tb.WriteString(\"  \\n**\")\n\tb.WriteString(strconv.Itoa(post.repliesAll.Size()) + \" replies • \")\n\tb.WriteString(strconv.Itoa(post.reposts.Size()) + \" reposts**\\n\")\n\treturn b.String()\n}\n\nfunc (post *Post) renderSourcePost(indent string) (string, *Post) {\n\tif !post.IsRepost() {\n\t\treturn \"\", nil\n\t}\n\n\tindent += \"\u003e \"\n\n\t// TODO: figure out a way to decouple posts from a global storage.\n\tboard, ok := getBoard(post.repostBoardID)\n\tif !ok {\n\t\treturn indentBody(indent, \"*⚠ Source board has been deleted*\\n\\n\"), nil\n\t}\n\n\tsrcPost, ok := board.GetThread(post.parentID)\n\tif !ok {\n\t\treturn indentBody(indent, \"*⚠ Source post has been deleted*\\n\\n\"), nil\n\t}\n\n\tif srcPost.isHidden {\n\t\treturn indentBody(indent, \"*⚠ Source post has been flagged as inappropriate*\\n\\n\"), nil\n\t}\n\n\treturn indentBody(indent, srcPost.GetSummary()) + \"\\n\\n\", srcPost\n}\n\n// renderPostContent renders post text content (including repost body).\n// Function will dump a predefined message instead of a body if post is hidden.\nfunc (post *Post) renderPostContent(sb *strings.Builder, indent string, levels int) {\n\tif post.isHidden {\n\t\t// Flagged comment should be hidden, but replies still visible (see: #3480)\n\t\t// Flagged threads will be hidden by render function caller.\n\t\tsb.WriteString(indentBody(indent, \"_⚠ Reply is hidden as it has been flagged as inappropriate_\"))\n\t\tsb.WriteString(\"\\n\")\n\t\treturn\n\t}\n\n\tsrcContent, srcPost := post.renderSourcePost(indent)\n\tif post.IsRepost() \u0026\u0026 srcPost != nil {\n\t\tsb.WriteString(\"  \\nThis thread is a repost of [another thread](\" + srcPost.GetURL() + \"): \\n\")\n\t}\n\n\tsb.WriteString(srcContent)\n\n\tif post.IsRepost() \u0026\u0026 srcPost == nil \u0026\u0026 len(post.body) \u003e 0 {\n\t\t// Add a newline to separate source deleted message from repost body content\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\tsb.WriteString(indentBody(indent, post.body))\n\tsb.WriteString(\"\\n\")\n\n\tif post.IsThread() {\n\t\t// Split content and controls for threads.\n\t\tsb.WriteString(\"\\n\")\n\t}\n\n\t// Buttons \u0026 counters\n\tsb.WriteString(indent)\n\tif !post.IsThread() {\n\t\tsb.WriteString(\"  \\n\")\n\t\tsb.WriteString(indent)\n\t}\n\n\tsb.WriteString(\"Created by \")\n\tsb.WriteString(newUserLink(post.creator))\n\tsb.WriteString(\" on \")\n\tsb.WriteString(post.createdAt.Format(dateFormat))\n\n\t// Add a reply view link to each top level reply\n\tif !post.IsThread() {\n\t\tsb.WriteString(\", \")\n\t\tsb.WriteString(newLink(\"#\"+post.id.String(), post.GetURL()))\n\t}\n\n\tif post.repostsCount \u003e 0 {\n\t\tsb.WriteString(\", \")\n\t\tsb.WriteString(strconv.FormatUint(post.repostsCount, 10))\n\t\tsb.WriteString(\" repost(s)\")\n\t}\n\n\tsb.WriteString(\"  \\n\")\n\tsb.WriteString(newLink(\"Flag\", post.GetFlagFormURL()))\n\n\tif post.IsThread() {\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Repost\", post.GetRepostFormURL()))\n\t}\n\n\tisReadonly := post.IsReadonly() || post.GetBoard().IsReadonly()\n\tif !isReadonly {\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Reply\", post.GetReplyFormURL()))\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Edit\", post.GetEditFormURL()))\n\t\tsb.WriteString(\" • \")\n\t\tsb.WriteString(newLink(\"Delete\", post.GetDeleteFormURL()))\n\t}\n\n\tif levels == 0 {\n\t\tsb.WriteString(\" • \")\n\t\tif post.IsThread() {\n\t\t\tsb.WriteString(newLink(\"Show all Replies\", post.board.GetURLFromThreadID(post.GetPostID())))\n\t\t} else {\n\t\t\tsb.WriteString(newLink(\"View Thread\", post.board.GetURLFromThreadID(post.threadID)))\n\t\t}\n\t}\n\n\tsb.WriteString(\" \\n\")\n}\n\nfunc (post *Post) Render(path string, indent string, levels int) string {\n\tif post == nil {\n\t\treturn \"nil post\"\n\t}\n\n\t// TODO: pass a builder as arg into Render.\n\tvar sb strings.Builder\n\n\t// Thread reposts might not have a title, if so get title from source thread\n\ttitle := post.title\n\tif post.IsRepost() \u0026\u0026 title == \"\" {\n\t\tif board, ok := getBoard(post.repostBoardID); ok {\n\t\t\tif src, ok := board.GetThread(post.parentID); ok {\n\t\t\t\ttitle = src.GetTitle()\n\t\t\t}\n\t\t}\n\t}\n\n\tsb.WriteString(indent)\n\tif title != \"\" { // Replies don't have a title\n\t\tsb.WriteString(\"## \" + title + \"\\n\")\n\t}\n\tsb.WriteString(indent + \"\\n\")\n\n\tpost.renderPostContent(\u0026sb, indent, levels)\n\n\tif post.replies.Size() == 0 {\n\t\treturn sb.String()\n\t}\n\n\t// XXX: This triggers for reply views\n\tif levels == 0 {\n\t\tsb.WriteString(indent + \"\\n\")\n\t\tsb.WriteString(indent)\n\t\tsb.WriteString(\"\\n\")\n\t\treturn sb.String()\n\t}\n\n\tif path != \"\" {\n\t\tsb.WriteString(post.renderTopLevelReplies(path, indent, levels-1))\n\t} else {\n\t\tsb.WriteString(post.renderSubReplies(indent, levels-1))\n\t}\n\treturn sb.String()\n}\n\nfunc (post *Post) renderTopLevelReplies(path, indent string, levels int) string {\n\tp, err := pager.New(path, post.replies.Size(), pager.WithPageSize(pageSizeReplies))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tvar (\n\t\tb              strings.Builder\n\t\tcommentsIndent = indent + \"\u003e \"\n\t)\n\n\trender := func(_ string, v any) bool {\n\t\treply := v.(*Post)\n\n\t\tb.WriteString(indent)\n\t\tb.WriteString(\"\\n\")\n\t\tb.WriteString(reply.Render(\"\", commentsIndent, levels-1))\n\t\treturn false\n\t}\n\n\tb.WriteString(\"\\n\\n---\\nSort by: \")\n\tr := realmpath.Parse(path)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tb.WriteString(newLink(\"newest first\", r.String()))\n\t\tb.WriteString(\"\\n\")\n\t\tpost.replies.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tb.WriteString(newLink(\"oldest first\", r.String()))\n\t\tb.WriteString(\"\\n\")\n\t\tpost.replies.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tb.WriteString(\"\\n---\\n\")\n\t\tb.WriteString(pager.Picker(p))\n\t}\n\n\treturn b.String()\n}\n\nfunc (post *Post) renderSubReplies(indent string, levels int) string {\n\tvar (\n\t\tb              strings.Builder\n\t\tcommentsIndent = indent + \"\u003e \"\n\t)\n\n\tpost.replies.Iterate(\"\", \"\", func(_ string, v any) bool {\n\t\treply := v.(*Post)\n\n\t\tb.WriteString(indent)\n\t\tb.WriteString(\"\\n\")\n\t\tb.WriteString(reply.Render(\"\", commentsIndent, levels-1))\n\t\treturn false\n\t})\n\n\treturn b.String()\n}\n\nfunc (post *Post) RenderInner() string {\n\tif post.IsThread() {\n\t\tpanic(\"unexpected thread\")\n\t}\n\n\tvar (\n\t\ts         string\n\t\tthreadID  = post.threadID\n\t\tthread, _ = post.board.GetThread(threadID) // TODO: This seems redundant (post == thread)\n\t)\n\n\t// Fully render parent if it's not a repost.\n\tif !post.IsRepost() {\n\t\tvar (\n\t\t\tparent   *Post\n\t\t\tparentID = post.parentID\n\t\t)\n\n\t\tif thread.id == parentID {\n\t\t\tparent = thread\n\t\t} else {\n\t\t\tparent, _ = thread.GetReply(parentID)\n\t\t}\n\n\t\ts += parent.Render(\"\", \"\", 0) + \"\\n\"\n\t}\n\n\ts += post.Render(\"\", \"\u003e \", 5)\n\treturn s\n}\n"},{"name":"post_test.gno","body":"package boards2\n\nimport (\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n\t\"gno.land/p/demo/uassert\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nfunc TestPostUpdate(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(addr)\n\tboard := newBoard(1, \"test123\", addr, perms)\n\tcreator := testutils.TestAddress(\"creator\")\n\tpost := newPost(board, 1, creator, \"Title\", \"Body\", 1, 0, 0)\n\ttitle := \"New Title\"\n\tbody := \"New body\"\n\n\tpost.Update(title, body)\n\n\tuassert.Equal(t, title, post.GetTitle())\n\tuassert.Equal(t, body, post.GetBody())\n\tuassert.False(t, post.GetUpdatedAt().IsZero())\n}\n\nfunc TestPostAddFlag(t *testing.T) {\n\taddr := testutils.TestAddress(\"creator\")\n\tpost := createTestThread(t)\n\n\tflag := Flag{\n\t\tUser:   addr,\n\t\tReason: \"foobar\",\n\t}\n\tuassert.True(t, post.AddFlag(flag))\n\tuassert.False(t, post.AddFlag(flag), \"should reject flag from duplicate user\")\n\tuassert.Equal(t, post.FlagsCount(), 1)\n}\n\nfunc TestPostSetVisible(t *testing.T) {\n\tpost := createTestThread(t)\n\tuassert.False(t, post.IsHidden(), \"post should be visible by default\")\n\n\tpost.SetVisible(false)\n\tuassert.True(t, post.IsHidden(), \"post should be hidden\")\n\n\tpost.SetVisible(true)\n\tuassert.False(t, post.IsHidden(), \"post should be visible\")\n}\n\nfunc TestPostAddRepostTo(t *testing.T) {\n\t// TODO: Improve this unit test\n\taddr := testutils.TestAddress(\"creatorDstBoard\")\n\tperms := createDefaultBoardPermissions(addr)\n\tcases := []struct {\n\t\tname, title, body string\n\t\tdstBoard          *Board\n\t\tthread            *Post\n\t\tsetup             func() *Post\n\t\terr               string\n\t}{\n\t\t{\n\t\t\tname:     \"repost thread\",\n\t\t\ttitle:    \"Repost Title\",\n\t\t\tbody:     \"Repost body\",\n\t\t\tdstBoard: newBoard(42, \"dst123\", addr, perms),\n\t\t\tsetup:    func() *Post { return createTestThread(t) },\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid repost from reply\",\n\t\t\tsetup: func() *Post { return createTestReply(t) },\n\t\t\terr:   \"cannot repost non-thread post\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar (\n\t\t\t\trepost  *Post\n\t\t\t\tcreator = testutils.TestAddress(\"repostCreator\")\n\t\t\t\tthread  = tc.setup()\n\t\t\t)\n\n\t\t\tcreateRepost := func() {\n\t\t\t\tvar repostId PostID\n\t\t\t\tif tc.dstBoard != nil {\n\t\t\t\t\trepostId = tc.dstBoard.incGetPostID()\n\t\t\t\t}\n\n\t\t\t\trepost = newPost(tc.dstBoard, repostId, creator, tc.title, tc.body, repostId, thread.GetPostID(), thread.GetBoard().GetID())\n\t\t\t\tthread.AddRepostTo(creator, repost, tc.dstBoard)\n\t\t\t}\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\tuassert.PanicsWithMessage(t, tc.err, createRepost)\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\tuassert.NotPanics(t, createRepost)\n\t\t\t}\n\n\t\t\tr, found := tc.dstBoard.GetThread(repost.GetPostID())\n\t\t\tuassert.True(t, found)\n\t\t\tuassert.True(t, repost == r)\n\t\t\tuassert.Equal(t, tc.title, repost.GetTitle())\n\t\t\tuassert.Equal(t, tc.body, repost.GetBody())\n\t\t\tuassert.Equal(t, uint(thread.GetBoard().GetID()), uint(repost.GetRepostBoardID()))\n\t\t})\n\t}\n}\n\nfunc TestNewThread(t *testing.T) {\n\tcreator := testutils.TestAddress(\"creator\")\n\ttitle := \"Test Title\"\n\tbody := strings.Repeat(\"A\", 82)\n\tboardID := BoardID(1)\n\tthreadID := PostID(42)\n\tboardName := \"test123\"\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(boardID, boardName, creator, perms)\n\turl := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2:%s/%d\",\n\t\tboardName,\n\t\tuint(threadID),\n\t)\n\treplyURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=CreateReply\u0026boardID=%d\u0026body=\u0026replyID=0\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\teditURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=EditThread\u0026boardID=%d\u0026body=%s\u0026threadID=%d\u0026title=%s\",\n\t\tuint(boardID),\n\t\tbody,\n\t\tuint(threadID),\n\t\tstrings.ReplaceAll(title, \" \", \"+\"),\n\t)\n\trepostURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=CreateRepost\u0026boardID=%d\u0026body=\u0026destinationBoardID=\u0026threadID=%d\u0026title=\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\tdeleteURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=DeleteThread\u0026boardID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\tflagURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=FlagThread\u0026boardID=%d\u0026reason=\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(threadID),\n\t)\n\n\tthread := newPost(board, threadID, creator, title, body, threadID, 0, 0)\n\n\tuassert.True(t, thread.IsThread())\n\tuassert.Equal(t, uint(threadID), uint(thread.GetPostID()))\n\tuassert.False(t, thread.GetCreatedAt().IsZero())\n\tuassert.True(t, thread.GetUpdatedAt().IsZero())\n\tuassert.Equal(t, title, thread.GetTitle())\n\tuassert.Equal(t, body[:77]+\"...\", thread.GetSummary())\n\tuassert.False(t, thread.HasReplies())\n\tuassert.Equal(t, url, thread.GetURL())\n\tuassert.Equal(t, replyURL, thread.GetReplyFormURL())\n\tuassert.Equal(t, editURL, thread.GetEditFormURL())\n\tuassert.Equal(t, repostURL, thread.GetRepostFormURL())\n\tuassert.Equal(t, deleteURL, thread.GetDeleteFormURL())\n\tuassert.Equal(t, flagURL, thread.GetFlagFormURL())\n}\n\nfunc TestThreadAddReply(t *testing.T) {\n\treplier := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\tthreadID := uint(thread.GetPostID())\n\tbody := \"A reply\"\n\n\treply := thread.AddReply(replier, body)\n\n\tr, found := thread.GetReply(reply.GetPostID())\n\tuassert.True(t, found)\n\tuassert.True(t, reply == r)\n\tuassert.Equal(t, threadID+1, uint(reply.GetPostID()))\n\tuassert.Equal(t, reply.GetCreator(), replier)\n\tuassert.Equal(t, reply.GetBody(), body)\n\tuassert.True(t, thread.HasReplies())\n}\n\nfunc TestThreadGetReply(t *testing.T) {\n\tcases := []struct {\n\t\tname   string\n\t\tthread *Post\n\t\tsetup  func(thread *Post) (replyID PostID)\n\t\tfound  bool\n\t}{\n\t\t{\n\t\t\tname:   \"found\",\n\t\t\tthread: createTestThread(t),\n\t\t\tsetup: func(thread *Post) PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t\tfound: true,\n\t\t},\n\t\t{\n\t\t\tname:   \"not found\",\n\t\t\tthread: createTestThread(t),\n\t\t\tsetup:  func(*Post) PostID { return 42 },\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup(tc.thread)\n\n\t\t\treply, found := tc.thread.GetReply(replyID)\n\n\t\t\tuassert.Equal(t, tc.found, found)\n\t\t\tif reply != nil {\n\t\t\t\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestThreadDeleteReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tcases := []struct {\n\t\tname  string\n\t\tsetup func() PostID\n\t\terr   string\n\t}{\n\t\t{\n\t\t\tname: \"ok\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"ok nested\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.AddReply(testutils.TestAddress(\"replier2\"), \"\").GetPostID()\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"invalid\",\n\t\t\tsetup: func() PostID { return thread.GetPostID() },\n\t\t\terr:   \"expected an ID of an inner reply\",\n\t\t},\n\t\t{\n\t\t\tname:  \"not found\",\n\t\t\tsetup: func() PostID { return 42 },\n\t\t\terr:   \"reply not found in thread\",\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup()\n\n\t\t\terr := thread.DeleteReply(replyID)\n\n\t\t\tif tc.err != \"\" {\n\t\t\t\tuassert.ErrorContains(t, err, tc.err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tuassert.NoError(t, err)\n\t\t\t_, found := thread.GetReply(replyID)\n\t\t\tuassert.False(t, found)\n\t\t})\n\t}\n}\n\nfunc TestThreadRenderSummary(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestThreadRender(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestThreadRenderInner(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc TestNewReply(t *testing.T) {\n\tcreator := testutils.TestAddress(\"creator\")\n\tbody := strings.Repeat(\"A\", 82)\n\tboardID := BoardID(1)\n\tthreadID := PostID(42)\n\tparentID := PostID(1)\n\treplyID := PostID(2)\n\tboardName := \"test123\"\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(boardID, boardName, creator, perms)\n\turl := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2:%s/%d/%d\",\n\t\tboardName,\n\t\tuint(threadID),\n\t\tuint(replyID),\n\t)\n\treplyURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=CreateReply\u0026boardID=%d\u0026body=\u0026replyID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(replyID),\n\t\tuint(threadID),\n\t)\n\tdeleteURL := ufmt.Sprintf(\n\t\t\"/r/devx000/gnoland/boards2/v1rc2$help\u0026func=DeleteReply\u0026boardID=%d\u0026replyID=%d\u0026threadID=%d\",\n\t\tuint(boardID),\n\t\tuint(replyID),\n\t\tuint(threadID),\n\t)\n\n\treply := newPost(board, replyID, creator, \"\", body, threadID, parentID, 0)\n\n\tuassert.False(t, reply.IsThread())\n\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\tuassert.False(t, reply.GetCreatedAt().IsZero())\n\tuassert.True(t, reply.GetUpdatedAt().IsZero())\n\tuassert.False(t, reply.HasReplies())\n\tuassert.Equal(t, body[:77]+\"...\", reply.GetSummary())\n\tuassert.Equal(t, url, reply.GetURL())\n\tuassert.Equal(t, replyURL, reply.GetReplyFormURL())\n\tuassert.Equal(t, deleteURL, reply.GetDeleteFormURL())\n}\n\nfunc TestReplyAddReply(t *testing.T) {\n\treplier := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"parentReplier\"), \"\")\n\tparentReplyID := uint(parentReply.GetPostID())\n\tbody := \"A child reply\"\n\n\treply := parentReply.AddReply(replier, body)\n\n\tr, found := thread.GetReply(reply.GetPostID())\n\tuassert.True(t, found)\n\tuassert.True(t, reply == r)\n\tuassert.Equal(t, parentReplyID, uint(reply.GetParentID()))\n\tuassert.Equal(t, parentReplyID+1, uint(reply.GetPostID()))\n\tuassert.Equal(t, reply.GetCreator(), replier)\n\tuassert.Equal(t, reply.GetBody(), body)\n\tuassert.False(t, reply.HasReplies())\n\tuassert.True(t, parentReply.HasReplies())\n}\n\nfunc TestReplyGetReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"parentReplier\"), \"\")\n\tcases := []struct {\n\t\tname  string\n\t\tsetup func() PostID\n\t\tfound bool\n\t}{\n\t\t{\n\t\t\tname: \"found\",\n\t\t\tsetup: func() PostID {\n\t\t\t\treply := parentReply.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\t\t\t\treturn reply.GetPostID()\n\t\t\t},\n\t\t\tfound: true,\n\t\t},\n\t\t{\n\t\t\tname:  \"not found\",\n\t\t\tsetup: func() PostID { return 42 },\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\treplyID := tc.setup()\n\n\t\t\treply, found := thread.GetReply(replyID)\n\n\t\t\tuassert.Equal(t, tc.found, found)\n\t\t\tif reply != nil {\n\t\t\t\tuassert.Equal(t, uint(replyID), uint(reply.GetPostID()))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestReplyDeleteReply(t *testing.T) {\n\tthread := createTestThread(t)\n\tparentReply := thread.AddReply(testutils.TestAddress(\"replier\"), \"\")\n\treply := parentReply.AddReply(testutils.TestAddress(\"replier2\"), \"\")\n\n\t// NOTE: Deleting a reply from a parent reply should eventually be suported\n\tuassert.PanicsWithMessage(t, \"cannot delete reply from a non-thread post\", func() {\n\t\tparentReply.DeleteReply(reply.GetPostID())\n\t})\n}\n\nfunc TestReplyRender(t *testing.T) {\n\tt.Skip(\"TODO: implement\")\n}\n\nfunc createTestThread(t *testing.T) *Post {\n\tt.Helper()\n\n\tcreator := testutils.TestAddress(\"creator\")\n\tperms := createDefaultBoardPermissions(creator)\n\tboard := newBoard(1, \"test_board_123\", creator, perms)\n\treturn board.AddThread(creator, \"Title\", \"Body\")\n}\n\nfunc createTestReply(t *testing.T) *Post {\n\tt.Helper()\n\n\tcreator := testutils.TestAddress(\"replier\")\n\tthread := createTestThread(t)\n\treturn thread.AddReply(creator, \"Test message\")\n}\n"},{"name":"public.gno","body":"package boards2\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nconst (\n\t// MaxBoardNameLength defines the maximum length allowed for board names.\n\tMaxBoardNameLength = 50\n\n\t// MaxThreadTitleLength defines the maximum length allowed for thread titles.\n\tMaxThreadTitleLength = 100\n\n\t// MaxReplyLength defines the maximum length allowed for replies.\n\tMaxReplyLength = 300\n)\n\nvar (\n\treBoardName = regexp.MustCompile(`(?i)^[a-z]+[a-z0-9_\\-]{2,50}$`)\n\n\t// Minimalistic Markdown line prefix checks that if allowed would\n\t// break the current UI when submitting a reply. It denies replies\n\t// with headings, blockquotes or horizontal lines.\n\treDeniedReplyLinePrefixes = regexp.MustCompile(`(?m)^\\s*(#|---|\u003e)+`)\n)\n\n// SetHelp sets or updates boards realm help content.\nfunc SetHelp(content string) {\n\tcontent = strings.TrimSpace(content)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{content}\n\tgPerms.WithPermission(caller, PermissionRealmHelp, args, func(Args) {\n\t\tgHelp = content\n\t})\n}\n\n// SetPermissions sets a permissions implementation for boards2 realm or a board.\nfunc SetPermissions(bid BoardID, p Permissions) {\n\tassertRealmIsNotLocked()\n\n\tif p == nil {\n\t\tpanic(\"permissions is required\")\n\t}\n\n\tif bid != 0 {\n\t\tassertBoardExists(bid)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{bid}\n\tgPerms.WithPermission(caller, PermissionPermissionsUpdate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\n\t\t// When board ID is zero it means that realm permissions are being updated\n\t\tif bid == 0 {\n\t\t\tgPerms = p\n\n\t\t\tstd.Emit(\n\t\t\t\t\"RealmPermissionsUpdated\",\n\t\t\t\t\"caller\", caller.String(),\n\t\t\t)\n\t\t\treturn\n\t\t}\n\n\t\t// Otherwise update the permissions of a single board\n\t\tboard := mustGetBoard(bid)\n\t\tboard.perms = p\n\n\t\tstd.Emit(\n\t\t\t\"BoardPermissionsUpdated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", bid.String(),\n\t\t)\n\t})\n}\n\n// SetRealmNotice sets a notice to be displayed globally by the realm.\n// An empty message removes the realm notice.\nfunc SetRealmNotice(message string) {\n\tmessage = strings.TrimSpace(message)\n\tcaller := std.PreviousRealm().Address()\n\tgPerms.WithPermission(caller, PermissionRealmNotice, nil, func(Args) {\n\t\tgNotice = message\n\n\t\tstd.Emit(\n\t\t\t\"RealmNoticeChanged\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"message\", message,\n\t\t)\n\t})\n}\n\n// GetBoardIDFromName searches a board by name and returns it's ID.\nfunc GetBoardIDFromName(name string) (_ BoardID, found bool) {\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\treturn 0, false\n\t}\n\treturn v.(*Board).id, true\n}\n\n// CreateBoard creates a new board.\nfunc CreateBoard(name string) BoardID {\n\tassertRealmIsNotLocked()\n\n\tname = strings.TrimSpace(name)\n\tassertIsValidBoardName(name)\n\tassertBoardNameNotExists(name)\n\n\tcaller := std.PreviousRealm().Address()\n\tid := incGetBoardID()\n\targs := Args{name, id}\n\tgPerms.WithPermission(caller, PermissionBoardCreate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardNameNotExists(name)\n\n\t\tperms := createDefaultBoardPermissions(caller)\n\t\tboard := newBoard(id, name, caller, perms)\n\t\tgBoardsByID.Set(id.Key(), board)\n\t\tgBoardsByName.Set(name, board)\n\n\t\tstd.Emit(\n\t\t\t\"BoardCreated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", id.String(),\n\t\t\t\"name\", name,\n\t\t)\n\t})\n\treturn id\n}\n\n// RenameBoard changes the name of an existing board.\n//\n// A history of previous board names is kept when boards are renamed.\n// Because of that boards are also accesible using previous name(s).\nfunc RenameBoard(name, newName string) {\n\tassertRealmIsNotLocked()\n\n\tnewName = strings.TrimSpace(newName)\n\tassertIsValidBoardName(newName)\n\tassertBoardNameNotExists(newName)\n\n\tboard := mustGetBoardByName(name)\n\tassertBoardIsNotFrozen(board)\n\n\tbid := board.GetID()\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{bid, name, newName}\n\tboard.perms.WithPermission(caller, PermissionBoardRename, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardNameNotExists(newName)\n\n\t\tboard := mustGetBoard(bid)\n\t\tboard.aliases = append(board.aliases, board.name)\n\t\tboard.name = newName\n\n\t\t// Index board for the new name keeping previous indexes for older names\n\t\tgBoardsByName.Set(newName, board)\n\n\t\tstd.Emit(\n\t\t\t\"BoardRenamed\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", bid.String(),\n\t\t\t\"name\", name,\n\t\t\t\"newName\", newName,\n\t\t)\n\t})\n}\n\n// CreateThread creates a new thread within a board.\nfunc CreateThread(boardID BoardID, title, body string) PostID {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tbody = strings.TrimSpace(body)\n\tassertBodyIsNotEmpty(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionThreadCreate)\n\n\tthread := board.AddThread(caller, title, body)\n\n\tstd.Emit(\n\t\t\"ThreadCreated\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", thread.GetPostID().String(),\n\t\t\"title\", title,\n\t)\n\n\treturn thread.id\n}\n\n// CreateReply creates a new comment or reply within a thread.\n//\n// The value of `replyID` is only required when creating a reply of another reply.\nfunc CreateReply(boardID BoardID, threadID, replyID PostID, body string) PostID {\n\tassertRealmIsNotLocked()\n\n\tbody = strings.TrimSpace(body)\n\tassertReplyBodyIsValid(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionReplyCreate)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\tassertThreadIsNotFrozen(thread)\n\n\tvar reply *Post\n\tif replyID == 0 {\n\t\t// When the parent reply is the thread just add reply to thread\n\t\treply = thread.AddReply(caller, body)\n\t} else {\n\t\t// Try to get parent reply and add a new child reply\n\t\tparent := mustGetReply(thread, replyID)\n\t\tif parent.IsHidden() || parent.IsReadonly() {\n\t\t\tpanic(\"replying to a hidden or frozen reply is not allowed\")\n\t\t}\n\n\t\treply = parent.AddReply(caller, body)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyCreate\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", reply.GetPostID().String(),\n\t)\n\n\treturn reply.id\n}\n\n// CreateRepost reposts a thread into another board.\nfunc CreateRepost(boardID BoardID, threadID PostID, title, body string, destinationBoardID BoardID) PostID {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tcaller := std.PreviousRealm().Address()\n\tdst := mustGetBoard(destinationBoardID)\n\tassertBoardIsNotFrozen(dst)\n\tassertHasBoardPermission(dst, caller, PermissionThreadRepost)\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\tif thread.IsRepost() {\n\t\tpanic(\"reposting a thread that is a repost is not allowed\")\n\t}\n\n\trepostId := dst.incGetPostID()\n\tbody = strings.TrimSpace(body)\n\trepost := newPost(dst, repostId, caller, title, body, repostId, thread.GetPostID(), thread.GetBoard().GetID())\n\tthread.AddRepostTo(caller, repost, dst)\n\n\tstd.Emit(\n\t\t\"Repost\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"destinationBoardID\", destinationBoardID.String(),\n\t\t\"title\", title,\n\t)\n\n\treturn repostId\n}\n\n// DeleteThread deletes a thread from a board.\n//\n// Threads can be deleted by the users who created them or otherwise by users with special permissions.\nfunc DeleteThread(boardID BoardID, threadID PostID) {\n\t// Council members should always be able to delete\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner) // TODO: Add DeleteThread filetest cases for realm owners\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\n\tif !isRealmOwner {\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertThreadIsNotFrozen(thread)\n\n\t\tif caller != thread.GetCreator() {\n\t\t\tassertHasBoardPermission(board, caller, PermissionThreadDelete)\n\t\t}\n\t}\n\n\t// Hard delete thread and all its replies\n\tboard.DeleteThread(threadID)\n\n\tstd.Emit(\n\t\t\"ThreadDeleted\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t)\n}\n\n// DeleteReply deletes a reply from a thread.\n//\n// Replies can be deleted by the users who created them or otherwise by users with special permissions.\n// Soft deletion is used when the deleted reply contains sub replies, in which case the reply content\n// is replaced by a text informing that reply has been deleted to avoid deleting sub-replies.\nfunc DeleteReply(boardID BoardID, threadID, replyID PostID) {\n\t// Council members should always be able to delete\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner) // TODO: Add DeleteReply filetest cases for realm owners\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\treply := mustGetReply(thread, replyID)\n\n\tif !isRealmOwner {\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertThreadIsNotFrozen(thread)\n\t\tassertReplyIsVisible(reply)\n\t\tassertReplyIsNotFrozen(reply)\n\n\t\tif caller != reply.GetCreator() {\n\t\t\tassertHasBoardPermission(board, caller, PermissionReplyDelete)\n\t\t}\n\t}\n\n\t// Soft delete reply by changing its body when it contains\n\t// sub-replies, otherwise hard delete it.\n\tif reply.HasReplies() {\n\t\treply.Update(reply.GetTitle(), \"This reply has been deleted\")\n\t} else {\n\t\tthread.DeleteReply(replyID)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyDeleted\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t)\n}\n\n// EditThread updates the title and body of thread.\n//\n// Threads can be updated by the users who created them or otherwise by users with special permissions.\nfunc EditThread(boardID BoardID, threadID PostID, title, body string) {\n\tassertRealmIsNotLocked()\n\n\ttitle = strings.TrimSpace(title)\n\tassertTitleIsValid(title)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\tbody = strings.TrimSpace(body)\n\tif !thread.IsRepost() {\n\t\tassertBodyIsNotEmpty(body)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tif caller != thread.GetCreator() {\n\t\tassertHasBoardPermission(board, caller, PermissionThreadEdit)\n\t}\n\n\tthread.Update(title, body)\n\n\tstd.Emit(\n\t\t\"ThreadEdited\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"title\", title,\n\t)\n}\n\n// EditReply updates the body of comment or reply.\n//\n// Replies can be updated only by the users who created them.\nfunc EditReply(boardID BoardID, threadID, replyID PostID, body string) {\n\tassertRealmIsNotLocked()\n\n\tbody = strings.TrimSpace(body)\n\tassertReplyBodyIsValid(body)\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\tassertReplyIsNotFrozen(reply)\n\n\tcaller := std.PreviousRealm().Address()\n\tif caller != reply.GetCreator() {\n\t\tpanic(\"only the reply creator is allowed to edit it\")\n\t}\n\n\treply.Update(\"\", body)\n\n\tstd.Emit(\n\t\t\"ReplyEdited\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"body\", body,\n\t)\n}\n\n// InviteMember adds a member to the realm or to a boards.\n//\n// A role can optionally be specified to be assigned to the new member.\n// Board ID is only required when inviting a member to a board.\nfunc InviteMember(boardID BoardID, user std.Address, role Role) {\n\tassertUserAddressIsValid(user)\n\tassertMembersUpdateIsEnabled(boardID)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{user, role}\n\tperms.WithPermission(caller, PermissionMemberInvite, args, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif err := perms.AddUser(user, role); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"MemberInvited\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", user.String(),\n\t\t\t\"role\", string(role),\n\t\t)\n\t})\n}\n\n// RemoveMember removes a member from the realm or a boards.\n//\n// Board ID is only required when removing a member from board.\nfunc RemoveMember(boardID BoardID, member std.Address) {\n\tassertMembersUpdateIsEnabled(boardID)\n\tassertMemberAddressIsValid(member)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\tperms.WithPermission(caller, PermissionMemberRemove, Args{member}, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif !perms.RemoveUser(member) {\n\t\t\tpanic(\"member not found\")\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"MemberRemoved\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", member.String(),\n\t\t)\n\t})\n}\n\n// IsMember checks if an user is a member of the realm or a board.\n//\n// Board ID is only required when checking if a user is a member of a board.\nfunc IsMember(boardID BoardID, user std.Address) bool {\n\tassertUserAddressIsValid(user)\n\n\tif boardID != 0 {\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tperms := mustGetPermissions(boardID)\n\treturn perms.HasUser(user)\n}\n\n// HasMemberRole checks if a realm or board member has a specific role assigned.\n//\n// Board ID is only required when checking a member of a board.\nfunc HasMemberRole(boardID BoardID, member std.Address, role Role) bool {\n\tassertMemberAddressIsValid(member)\n\n\tif boardID != 0 {\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tperms := mustGetPermissions(boardID)\n\treturn perms.HasRole(member, role)\n}\n\n// ChangeMemberRole changes the role of a realm or board member.\n//\n// Board ID is only required when changing the role for a member of a board.\nfunc ChangeMemberRole(boardID BoardID, member std.Address, role Role) {\n\tassertMemberAddressIsValid(member)\n\tassertMembersUpdateIsEnabled(boardID)\n\n\tperms := mustGetPermissions(boardID)\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{boardID, member, role}\n\tperms.WithPermission(caller, PermissionRoleChange, args, func(Args) {\n\t\tassertMembersUpdateIsEnabled(boardID)\n\n\t\tif err := perms.SetUserRoles(member, role); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tstd.Emit(\n\t\t\t\"RoleChanged\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", member.String(),\n\t\t\t\"newRole\", string(role),\n\t\t)\n\t})\n}\n\n// IterateRealmMembers iterates realm members.\n// The iteration is done only for realm members, board members are not iterated.\nfunc IterateRealmMembers(offset int, fn UsersIterFn) (halted bool) {\n\tcount := gPerms.UsersCount() - offset\n\treturn gPerms.IterateUsers(offset, count, fn)\n}\n\n// IterateBoards iterates realm boards.\nfunc IterateBoards(offset int, fn func(ReadonlyBoard) bool) (halted bool) {\n\tcount := gBoardsByID.Size() - offset\n\treturn gBoardsByID.IterateByOffset(offset, count, func(_ string, v any) bool {\n\t\tboard, _ := v.(*Board)\n\t\treturn fn(readonlyBoard{board})\n\t})\n}\n\nfunc assertMemberAddressIsValid(member std.Address) {\n\tif !member.IsValid() {\n\t\tpanic(\"invalid member address\")\n\t}\n}\n\nfunc assertUserAddressIsValid(user std.Address) {\n\tif !user.IsValid() {\n\t\tpanic(\"invalid user address\")\n\t}\n}\n\nfunc assertHasBoardPermission(b *Board, user std.Address, p Permission) {\n\tif !b.perms.HasPermission(user, p) {\n\t\tpanic(\"unauthorized\")\n\t}\n}\n\nfunc assertBoardExists(id BoardID) {\n\tif _, found := getBoard(id); !found {\n\t\tpanic(\"board not found: \" + id.String())\n\t}\n}\n\nfunc assertBoardIsNotFrozen(b *Board) {\n\tif b.IsReadonly() {\n\t\tpanic(\"board is frozen\")\n\t}\n}\n\nfunc assertIsValidBoardName(name string) {\n\tsize := len(name)\n\tif size == 0 {\n\t\tpanic(\"board name is empty\")\n\t}\n\n\tif size \u003e MaxBoardNameLength {\n\t\tn := strconv.Itoa(MaxBoardNameLength)\n\t\tpanic(\"board name is too long, maximum allowed is \" + n + \" characters\")\n\t}\n\n\tif !reBoardName.MatchString(name) {\n\t\tpanic(\"board name contains invalid characters\")\n\t}\n}\n\nfunc assertThreadIsNotFrozen(t *Post) {\n\tif t.IsReadonly() {\n\t\tpanic(\"thread is frozen\")\n\t}\n}\n\nfunc assertReplyIsNotFrozen(r *Post) {\n\tif r.IsReadonly() {\n\t\tpanic(\"reply is frozen\")\n\t}\n}\n\nfunc assertNameIsNotEmpty(name string) {\n\tif name == \"\" {\n\t\tpanic(\"name is empty\")\n\t}\n}\n\nfunc assertTitleIsValid(title string) {\n\tif title == \"\" {\n\t\tpanic(\"title is empty\")\n\t}\n\n\tif len(title) \u003e MaxThreadTitleLength {\n\t\tn := strconv.Itoa(MaxThreadTitleLength)\n\t\tpanic(\"thread title is too long, maximum allowed is \" + n + \" characters\")\n\t}\n}\n\nfunc assertBodyIsNotEmpty(body string) {\n\tif body == \"\" {\n\t\tpanic(\"body is empty\")\n\t}\n}\n\nfunc assertBoardNameNotExists(name string) {\n\tif gBoardsByName.Has(name) {\n\t\tpanic(\"board already exists\")\n\t}\n}\n\nfunc assertThreadExists(b *Board, threadID PostID) {\n\tif _, found := b.GetThread(threadID); !found {\n\t\tpanic(\"thread not found: \" + threadID.String())\n\t}\n}\n\nfunc assertReplyExists(thread *Post, replyID PostID) {\n\tif _, found := thread.GetReply(replyID); !found {\n\t\tpanic(\"reply not found: \" + replyID.String())\n\t}\n}\n\nfunc assertThreadIsVisible(thread *Post) {\n\tif thread.IsHidden() {\n\t\tpanic(\"thread is hidden\")\n\t}\n}\n\nfunc assertReplyIsVisible(thread *Post) {\n\tif thread.IsHidden() {\n\t\tpanic(\"reply is hidden\")\n\t}\n}\n\nfunc assertReplyBodyIsValid(body string) {\n\tassertBodyIsNotEmpty(body)\n\n\tif len(body) \u003e MaxReplyLength {\n\t\tn := strconv.Itoa(MaxReplyLength)\n\t\tpanic(\"reply is too long, maximum allowed is \" + n + \" characters\")\n\t}\n\n\tif reDeniedReplyLinePrefixes.MatchString(body) {\n\t\tpanic(\"using Markdown headings, blockquotes or horizontal lines is not allowed in replies\")\n\t}\n}\n\nfunc assertMembersUpdateIsEnabled(boardID BoardID) {\n\tif boardID != 0 {\n\t\tassertRealmIsNotLocked()\n\t} else {\n\t\tassertRealmMembersAreNotLocked()\n\t}\n}\n"},{"name":"public_flag.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// SetFlaggingThreshold sets the number of flags required to hide a thread or comment.\n//\n// Threshold is only applicable within the board where it's setted.\nfunc SetFlaggingThreshold(boardID BoardID, threshold int) {\n\tif threshold \u003c 1 {\n\t\tpanic(\"invalid flagging threshold\")\n\t}\n\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\targs := Args{boardID, threshold}\n\tboard.perms.WithPermission(caller, PermissionBoardFlaggingUpdate, args, func(Args) {\n\t\tassertRealmIsNotLocked()\n\n\t\tboard := mustGetBoard(boardID)\n\t\tassertBoardIsNotFrozen(board)\n\n\t\tgFlaggingThresholds.Set(boardID.String(), threshold)\n\t\tstd.Emit(\n\t\t\t\"FlaggingThresholdUpdated\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"threshold\", strconv.Itoa(threshold),\n\t\t)\n\t})\n}\n\n// GetFlaggingThreshold returns the number of flags required to hide a thread or comment within a board.\nfunc GetFlaggingThreshold(boardID BoardID) int {\n\tassertBoardExists(boardID)\n\treturn getFlaggingThreshold(boardID)\n}\n\n// FlagThread adds a new flag to a thread.\n//\n// Flagging requires special permissions and hides the thread when\n// the number of flags reaches a pre-defined flagging threshold.\nfunc FlagThread(boardID BoardID, threadID PostID, reason string) {\n\tboard := mustGetBoard(boardID)\n\n\t// Realm owners should be able to flag without permissions even when board is frozen\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner)\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertHasBoardPermission(board, caller, PermissionThreadFlag)\n\t}\n\n\tt, ok := board.GetThread(threadID)\n\tif !ok {\n\t\tpanic(\"post doesn't exist\")\n\t}\n\tassertThreadIsNotFrozen(t)\n\n\tf := Flag{\n\t\tUser:   caller,\n\t\tReason: reason,\n\t}\n\n\t// Realm owners can hide with a single flag\n\thide := flagItem(t, f, getFlaggingThreshold(boardID))\n\tif hide || isRealmOwner {\n\t\tt.SetVisible(false)\n\t}\n\n\tstd.Emit(\n\t\t\"ThreadFlagged\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"reason\", reason,\n\t)\n}\n\n// FlagReply adds a new flag to a comment or reply.\n//\n// Flagging requires special permissions and hides the comment or reply\n// when the number of flags reaches a pre-defined flagging threshold.\nfunc FlagReply(boardID BoardID, threadID, replyID PostID, reason string) {\n\tboard := mustGetBoard(boardID)\n\n\t// Realm owners should be able to flag without permissions even when board is frozen\n\tcaller := std.PreviousRealm().Address()\n\tisRealmOwner := gPerms.HasRole(caller, RoleOwner)\n\tif !isRealmOwner {\n\t\tassertRealmIsNotLocked()\n\t\tassertBoardIsNotFrozen(board)\n\t\tassertHasBoardPermission(board, caller, PermissionReplyFlag)\n\t}\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsNotFrozen(thread)\n\n\tf := Flag{\n\t\tUser:   caller,\n\t\tReason: reason,\n\t}\n\n\t// Realm owners can hide with a single flag\n\thide := flagItem(reply, f, getFlaggingThreshold(boardID))\n\tif hide || isRealmOwner {\n\t\treply.SetVisible(false)\n\t}\n\n\tstd.Emit(\n\t\t\"ReplyFlagged\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"reason\", reason,\n\t)\n}\n"},{"name":"public_freeze.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// FreezeBoard freezes a board so no more threads and comments can be created or modified.\nfunc FreezeBoard(boardID BoardID) {\n\tsetBoardReadonly(boardID, true)\n}\n\n// UnfreezeBoard removes frozen status from a board.\nfunc UnfreezeBoard(boardID BoardID) {\n\tsetBoardReadonly(boardID, false)\n}\n\n// IsBoardFrozen checks if a board has been frozen.\nfunc IsBoardFrozen(boardID BoardID) bool {\n\tboard := mustGetBoard(boardID)\n\treturn board.IsReadonly()\n}\n\n// FreezeThread freezes a thread so thread cannot be replied, modified or deleted.\n//\n// Fails if board is frozen.\nfunc FreezeThread(boardID BoardID, threadID PostID) {\n\tsetThreadReadonly(boardID, threadID, true)\n}\n\n// UnfreezeThread removes frozen status from a thread.\n//\n// Fails if board is frozen.\nfunc UnfreezeThread(boardID BoardID, threadID PostID) {\n\tsetThreadReadonly(boardID, threadID, false)\n}\n\n// IsThreadFrozen checks if a thread has been frozen.\n//\n// Returns true if board is frozen.\nfunc IsThreadFrozen(boardID BoardID, threadID PostID) bool {\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\treturn board.IsReadonly() || thread.IsReadonly()\n}\n\n// UnfreezeReply removes frozen status from a reply.\n//\n// Fails when parent thread or board are frozen.\nfunc UnfreezeReply(boardID BoardID, threadID, replyID PostID) {\n\t// XXX: Is there a use case for also freezing replies?\n\tsetReplyReadonly(boardID, threadID, replyID, false)\n}\n\n// FreezeReply freezes a thread reply so it cannot be modified or deleted.\n//\n// Fails when parent thread or board are frozen.\nfunc FreezeReply(boardID BoardID, threadID, replyID PostID) {\n\tsetReplyReadonly(boardID, threadID, replyID, true)\n}\n\n// IsReplyFrozen checks if a thread reply has been frozen.\n//\n// Returns true when board or a parent thread is frozen.\nfunc IsReplyFrozen(boardID BoardID, threadID, replyID PostID) bool {\n\tboard := mustGetBoard(boardID)\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\n\treturn board.IsReadonly() || thread.IsReadonly() || reply.IsReadonly()\n}\n\nfunc setReplyReadonly(boardID BoardID, threadID, replyID PostID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionReplyFreeze)\n\n\tthread := mustGetThread(board, threadID)\n\tassertThreadIsVisible(thread)\n\tassertThreadIsNotFrozen(thread)\n\n\treply := mustGetReply(thread, replyID)\n\tassertReplyIsVisible(reply)\n\n\tif isReadonly {\n\t\tassertReplyIsNotFrozen(reply)\n\t}\n\n\treply.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"ReplyFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"replyID\", replyID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n\nfunc setThreadReadonly(boardID BoardID, threadID PostID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tassertBoardIsNotFrozen(board)\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionThreadFreeze)\n\n\tthread := mustGetThread(board, threadID)\n\tif isReadonly {\n\t\tassertThreadIsNotFrozen(thread)\n\t}\n\n\tthread.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"ThreadFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"threadID\", threadID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n\nfunc setBoardReadonly(boardID BoardID, isReadonly bool) {\n\tassertRealmIsNotLocked()\n\n\tboard := mustGetBoard(boardID)\n\tif isReadonly {\n\t\tassertBoardIsNotFrozen(board)\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tassertHasBoardPermission(board, caller, PermissionBoardFreeze)\n\n\tboard.SetReadonly(isReadonly)\n\n\tstd.Emit(\n\t\t\"BoardFreeze\",\n\t\t\"caller\", caller.String(),\n\t\t\"boardID\", boardID.String(),\n\t\t\"frozen\", strconv.FormatBool(isReadonly),\n\t)\n}\n"},{"name":"public_lock.gno","body":"package boards2\n\nimport (\n\t\"std\"\n\t\"strconv\"\n)\n\n// LockRealm locks the realm making it readonly.\n//\n// WARNING: Realm can't be unlocked once locked.\n//\n// Realm can also be locked without locking realm members.\n// Realm members can be locked when locking the realm or afterwards.\n// This is relevant for two reasons, one so members can be modified after lock.\n// The other is for realm owners, which can delete threads and comments after lock.\nfunc LockRealm(lockRealmMembers bool) {\n\tassertRealmMembersAreNotLocked()\n\n\t// If realm members are not being locked assert that realm is no locked.\n\t// Members can be locked after locking the realm, in a second `LockRealm` call.\n\tif !lockRealmMembers {\n\t\tassertRealmIsNotLocked()\n\t}\n\n\tcaller := std.PreviousRealm().Address()\n\tgPerms.WithPermission(caller, PermissionRealmLock, nil, func(Args) {\n\t\tgLocked.realm = true\n\t\tgLocked.realmMembers = lockRealmMembers\n\n\t\tstd.Emit(\n\t\t\t\"RealmLocked\",\n\t\t\t\"caller\", caller.String(),\n\t\t\t\"lockRealmMembers\", strconv.FormatBool(lockRealmMembers),\n\t\t)\n\t})\n}\n\n// IsRealmLocked checks if boards realm has been locked.\nfunc IsRealmLocked() bool {\n\treturn gLocked.realm\n}\n\n// AreRealmMembersLocked checks if realm members has been locked.\nfunc AreRealmMembersLocked() bool {\n\treturn gLocked.realmMembers\n}\n\nfunc assertRealmIsNotLocked() { // TODO: Add filtests for locked realm case to all public functions\n\tif gLocked.realm {\n\t\tpanic(\"realm is locked\")\n\t}\n}\n\nfunc assertRealmMembersAreNotLocked() { // TODO: Add filtests for locked members case to all public member functions\n\tif gLocked.realmMembers {\n\t\tpanic(\"realm and members are locked\")\n\t}\n}\n"},{"name":"render.gno","body":"package boards2\n\nimport (\n\t\"net/url\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/mux\"\n\t\"gno.land/p/jeronimoalbi/pager\"\n\t\"gno.land/p/moul/realmpath\"\n\t\"gno.land/p/moul/txlink\"\n)\n\nconst (\n\tpageSizeBoards  = 6\n\tpageSizeThreads = 6\n\tpageSizeReplies = 10\n)\n\nconst menuManageBoard = \"manageBoard\"\n\nfunc Render(path string) string {\n\trouter := mux.NewRouter()\n\trouter.HandleFunc(\"\", renderBoardsList)\n\trouter.HandleFunc(\"help\", renderHelp)\n\trouter.HandleFunc(\"admin-users\", renderMembers)\n\trouter.HandleFunc(\"{board}\", renderBoard)\n\trouter.HandleFunc(\"{board}/members\", renderMembers)\n\trouter.HandleFunc(\"{board}/{thread}\", renderThread)\n\trouter.HandleFunc(\"{board}/{thread}/{reply}\", renderReply)\n\n\trouter.NotFoundHandler = func(res *mux.ResponseWriter, _ *mux.Request) {\n\t\tres.Write(\"Path not found\")\n\t}\n\n\treturn router.Render(path)\n}\n\nfunc renderHelp(res *mux.ResponseWriter, _ *mux.Request) {\n\tres.Write(\"# Boards Help\\n\")\n\tif gHelp != \"\" {\n\t\tres.Write(gHelp)\n\t} else {\n\t\tres.Write(\"### Help content has not been uploaded\\n\")\n\t\tres.Write(\"Do you want to \")\n\t\tres.Write(newLink(\"upload boards help\", txlink.Call(\"SetHelp\", \"content\", \"\")))\n\t\tres.Write(\" ?\")\n\t}\n}\n\nfunc renderBoardsList(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tres.Write(\"# Boards\\n\\n\")\n\trenderBoardListMenu(res, req)\n\tres.Write(\"\\n\\n---\\n\")\n\n\tif gBoardsByID.Size() == 0 {\n\t\tlink := txlink.Call(\"CreateBoard\", \"name\", \"\")\n\t\tres.Write(\"### Currently there are no boards\\n\")\n\t\tres.Write(\"Be the first to \")\n\t\tres.Write(newLink(\"create a new board\", link))\n\t\tres.Write(\" !\")\n\n\t\treturn\n\t}\n\n\tp, err := pager.New(req.RawPath, gBoardsByID.Size(), pager.WithPageSize(pageSizeBoards))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\trender := func(_ string, v any) bool {\n\t\tboard := v.(*Board)\n\n\t\tres.Write(\"**\" + newLink(board.GetName(), board.GetURL()) + \"**  \\n\")\n\t\tres.Write(\"Created by \" + newUserLink(board.creator) + \" \")\n\t\tres.Write(\"on \" + board.createdAt.Format(dateFormat))\n\t\tres.Write(\", #\" + board.id.String() + \"  \\n\")\n\t\tres.Write(\"**\" + strconv.Itoa(board.threads.Size()) + \" threads\")\n\t\tif board.IsReadonly() {\n\t\t\tres.Write(\", read-only\")\n\t\t}\n\n\t\tres.Write(\"**\\n\\n\")\n\t\treturn false\n\t}\n\n\tres.Write(\"Sort by: \")\n\tr := realmpath.Parse(req.RawPath)\n\tif r.Query.Get(\"order\") == \"desc\" {\n\t\tr.Query.Set(\"order\", \"asc\")\n\t\tres.Write(newLink(\"newest first\", r.String()))\n\t\tres.Write(\"\\n\\n\")\n\t\tgBoardsByID.ReverseIterateByOffset(p.Offset(), p.PageSize(), render)\n\t} else {\n\t\tr.Query.Set(\"order\", \"desc\")\n\t\tres.Write(newLink(\"oldest first\", r.String()))\n\t\tres.Write(\"\\n\\n\")\n\t\tgBoardsByID.IterateByOffset(p.Offset(), p.PageSize(), render)\n\t}\n\n\tif p.HasPages() {\n\t\tres.Write(\"\\n---\\n\")\n\t\tres.Write(pager.Picker(p))\n\t}\n}\n\nfunc renderBoardListMenu(res *mux.ResponseWriter, req *mux.Request) {\n\tpath := strings.TrimPrefix(std.CurrentRealm().PkgPath(), \"gno.land\")\n\n\tres.Write(newLink(\"Create Board\", txlink.Call(\"CreateBoard\", \"name\", \"\")))\n\tres.Write(\" • \")\n\tres.Write(newLink(\"List Admin Users\", path+\":admin-users\"))\n\tres.Write(\" • \")\n\tres.Write(newLink(\"Help\", path+\":help\"))\n\tres.Write(\"\\n\\n\")\n}\n\nfunc renderBoard(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tlink := newLink(\"create a new board\", txlink.Call(\"CreateBoard\", \"name\", name))\n\t\tres.Write(\"### The board you are looking for does not exist\\n\")\n\t\tres.Write(\"Do you want to \")\n\t\tres.Write(link)\n\t\tres.Write(\" ?\")\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tmenu := renderBoardMenu(board, req)\n\n\tres.Write(board.Render(req.RawPath, menu))\n}\n\nfunc renderBoardMenu(board *Board, req *mux.Request) string {\n\tvar (\n\t\tb               strings.Builder\n\t\tboardMembersURL = board.GetPath() + \"/members\"\n\t)\n\n\tif board.IsReadonly() {\n\t\tb.WriteString(newLink(\"List Members\", boardMembersURL))\n\t\tb.WriteString(\" • \")\n\t\tb.WriteString(newLink(\"Unfreeze Board\", board.GetUnfreezeFormURL()))\n\t\tb.WriteString(\"\\n\")\n\t} else {\n\t\tb.WriteString(newLink(\"Create Thread\", board.GetPostFormURL()))\n\t\tb.WriteString(\" • \")\n\n\t\tmenu := getCurrentMenu(req.RawPath)\n\t\tif menu == menuManageBoard {\n\t\t\tb.WriteString(\"**Manage Board**\")\n\t\t} else {\n\t\t\tb.WriteString(newLink(\"Manage Board\", menuURL(menuManageBoard)))\n\t\t}\n\n\t\tb.WriteString(\"  \\n\")\n\n\t\tif menu == menuManageBoard {\n\t\t\tb.WriteString(\"↳\")\n\t\t\tb.WriteString(newLink(\"Invite Member\", board.GetInviteMemberFormURL()))\n\t\t\tb.WriteString(\" • \")\n\t\t\tb.WriteString(newLink(\"List Members\", boardMembersURL))\n\t\t\tb.WriteString(\" • \")\n\t\t\tb.WriteString(newLink(\"Freeze Board\", board.GetFreezeFormURL()))\n\t\t\tb.WriteString(\"\\n\\n\")\n\t\t}\n\t}\n\n\treturn b.String()\n}\n\nfunc renderThread(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tres.Write(\"Board does not exist: \" + name)\n\t\treturn\n\t}\n\n\trawID := req.GetVar(\"thread\")\n\ttID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid thread ID: \" + rawID)\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tthread, found := board.GetThread(PostID(tID))\n\tif !found {\n\t\tres.Write(\"Thread does not exist with ID: \" + rawID)\n\t} else if thread.IsHidden() {\n\t\tres.Write(\"Thread with ID: \" + rawID + \" has been flagged as inappropriate\")\n\t} else {\n\t\tres.Write(thread.Render(req.RawPath, \"\", 5))\n\t}\n}\n\nfunc renderReply(res *mux.ResponseWriter, req *mux.Request) {\n\trenderNotice(res)\n\n\tname := req.GetVar(\"board\")\n\tv, found := gBoardsByName.Get(name)\n\tif !found {\n\t\tres.Write(\"Board does not exist: \" + name)\n\t\treturn\n\t}\n\n\trawID := req.GetVar(\"thread\")\n\ttID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid thread ID: \" + rawID)\n\t\treturn\n\t}\n\n\trawID = req.GetVar(\"reply\")\n\trID, err := strconv.Atoi(rawID)\n\tif err != nil {\n\t\tres.Write(\"Invalid reply ID: \" + rawID)\n\t\treturn\n\t}\n\n\tboard := v.(*Board)\n\tthread, found := board.GetThread(PostID(tID))\n\tif !found {\n\t\tres.Write(\"Thread does not exist with ID: \" + req.GetVar(\"thread\"))\n\t\treturn\n\t}\n\n\treply, found := thread.GetReply(PostID(rID))\n\tif !found {\n\t\tres.Write(\"Reply does not exist with ID: \" + rawID)\n\t\treturn\n\t}\n\n\t// Call render even for hidden replies to display children.\n\t// Original comment content will be hidden under the hood.\n\t// See: #3480\n\tres.Write(reply.RenderInner())\n}\n\nfunc renderMembers(res *mux.ResponseWriter, req *mux.Request) {\n\tboardID := BoardID(0)\n\tperms := gPerms\n\tname := req.GetVar(\"board\")\n\tif name != \"\" {\n\t\tv, found := gBoardsByName.Get(name)\n\t\tif !found {\n\t\t\tres.Write(\"### Board not found\")\n\t\t\treturn\n\t\t}\n\n\t\tboard := v.(*Board)\n\t\tboardID = board.GetID()\n\t\tperms = board.perms\n\n\t\tres.Write(\"# \" + board.GetName() + \" Members\\n\")\n\t\tres.Write(\"### These are the board members\\n\\n\")\n\t} else {\n\t\tres.Write(\"# Admin Users\\n\")\n\t\tres.Write(\"### These are the admin users of the realm\\n\\n\")\n\t}\n\n\t// Create a pager with a small page size to reduce\n\t// the number of username lookups per page.\n\tp, err := pager.New(req.RawPath, perms.UsersCount(), pager.WithPageSize(5))\n\tif err != nil {\n\t\tres.Write(err.Error())\n\t\treturn\n\t}\n\n\tres.Write(\"| Member | Role | Actions |\\n| --- | --- | --- |\\n\")\n\tperms.IterateUsers(p.Offset(), p.PageSize(), func(u User) bool {\n\t\tres.Write(\"| \")\n\t\tres.Write(newUserLink(u.Address))\n\t\tres.Write(\" | \")\n\t\tres.Write(rolesToString(u.Roles))\n\t\tres.Write(\" | \")\n\t\tres.Write(newLink(\"remove\", txlink.Call(\n\t\t\t\"RemoveMember\",\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", u.Address.String(),\n\t\t)))\n\t\tres.Write(\" • \")\n\t\tres.Write(newLink(\"change role\", txlink.Call(\n\t\t\t\"ChangeMemberRole\",\n\t\t\t\"boardID\", boardID.String(),\n\t\t\t\"member\", u.Address.String(),\n\t\t\t\"role\", \"\",\n\t\t)))\n\t\tres.Write(\" |\\n\")\n\t\treturn false\n\t})\n\n\tif p.HasPages() {\n\t\tres.Write(\"\\n\\n\" + pager.Picker(p))\n\t}\n}\n\nfunc renderNotice(res *mux.ResponseWriter) {\n\tif gNotice == \"\" {\n\t\treturn\n\t}\n\n\tres.Write(\"\u003e \")\n\tres.Write(gNotice)\n\tres.Write(\"\\n\\n\")\n}\n\nfunc rolesToString(roles []Role) string {\n\tif len(roles) == 0 {\n\t\treturn \"\"\n\t}\n\n\tnames := make([]string, len(roles))\n\tfor i, r := range roles {\n\t\tnames[i] = string(r)\n\t}\n\treturn strings.Join(names, \", \")\n}\n\nfunc menuURL(name string) string {\n\t// TODO: Menu URL works because no other GET arguments are being used\n\treturn \"?menu=\" + name\n}\n\nfunc getCurrentMenu(rawURL string) string {\n\t_, rawQuery, found := strings.Cut(rawURL, \"?\")\n\tif !found {\n\t\treturn \"\"\n\t}\n\n\tquery, _ := url.ParseQuery(rawQuery)\n\treturn query.Get(\"menu\")\n}\n"},{"name":"z_0_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tbid := boards2.CreateBoard(\"test123\")\n\tprintln(\"ID =\", bid)\n}\n\n// Output:\n// ID = 1\n"},{"name":"z_0_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"\")\n}\n\n// Error:\n// board name is empty\n"},{"name":"z_0_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tboardName = \"test123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(boardName)\n}\n\nfunc main() {\n\tboards2.CreateBoard(boardName)\n}\n\n// Error:\n// board already exists\n"},{"name":"z_0_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n}\n\n// Error:\n// addresses are not allowed as board name\n"},{"name":"z_0_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"gnoland\")\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_0_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar name = strings.Repeat(\"X\", boards2.MaxBoardNameLength+1)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(name)\n}\n\n// Error:\n// board name is too long, maximum allowed is 50 characters\n"},{"name":"z_0_h_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname   = \"test123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\tboards2.InviteMember(0, member, boards2.RoleOwner) // Operate on realm DAO members instead of individual boards\n\ttesting.SetOriginCaller(member)\n\tusers.Register(name)\n}\n\nfunc main() {\n\tbid := boards2.CreateBoard(name)\n\tprintln(\"ID =\", bid)\n}\n\n// Output:\n// ID = 1\n"},{"name":"z_0_i_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateBoard(\"test123\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_10_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\n\t// Invite a moderator to the new board\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\n\t// Create a new thread as a moderator\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_10_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.FlagThread(404, 1, \"\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_10_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Make the next call as an uninvited user\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_10_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, 404, \"\")\n}\n\n// Error:\n// post doesn't exist\n"},{"name":"z_10_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// item flag count threshold exceeded: 1\n"},{"name":"z_10_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to flag threads\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\ttesting.SetOriginCaller(moderator)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_10_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with a specific flagging threshold\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Invite a moderator to the new board\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\n\t// Create a new thread and flag it as a moderator\n\ttesting.SetOriginCaller(moderator)\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n}\n\n// Error:\n// item has been already flagged by a current user\n"},{"name":"z_10_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with flagging threshold greater than 1\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Create a thread so the realm owner can flag and hide it with a single flag\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\t// Also freeze board to make sure that realm owner can still flag the thread\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FlagThread(bid, pid, \"\")\n\n\t// Ensure that original thread content not visible\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread with ID: 1 has been flagged as inappropriate\n"},{"name":"z_11_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, body)\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_11_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"\", \"bar\")\n}\n\n// Error:\n// title is empty\n"},{"name":"z_11_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_11_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.EditThread(404, 1, \"Foo\", \"bar\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_11_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_11_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, \"Foo\", \"bar\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_11_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to edit threads\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, body)\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_11_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid   boards2.BoardID\n\tpid   boards2.PostID\n\ttitle = strings.Repeat(\"X\", boards2.MaxThreadTitleLength+1)\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditThread(bid, pid, title, \"bar\")\n}\n\n// Error:\n// thread title is too long, maximum allowed is 100 characters\n"},{"name":"z_12_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbody  = \"Test reply\"\n\tpath  = \"test-board/1/2\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, body)\n\n\t// Render content must contain the modified reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \"+body+\"\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_12_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbody  = \"Test reply\"\n\tpath  = \"test-board/1/2\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Create a reply and a sub reply\n\tparentRID := boards2.CreateReply(bid, tid, 0, \"Parent\")\n\trid = boards2.CreateReply(bid, tid, parentRID, \"Child\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, body)\n\n\t// Render content must contain the modified reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e \"+body+\"\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_12_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.EditReply(404, 1, 0, \"body\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_12_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, 404, 0, \"body\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_12_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, 404, \"body\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_12_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"new body\")\n}\n\n// Error:\n// only the reply creator is allowed to edit it\n"},{"name":"z_12_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Flag the reply so it's hidden\n\tboards2.FlagReply(bid, tid, rid, \"reason\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"body\")\n}\n\n// Error:\n// reply is hidden\n"},{"name":"z_12_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.EditReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_13_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_13_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.FlagReply(404, 1, 1, \"\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_13_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, 404, 1, \"\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_13_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, 404, \"\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_13_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// item flag count threshold exceeded: 1\n"},{"name":"z_13_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_13_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Invite a member using a role with permission to flag replies\n\tboards2.InviteMember(bid, moderator, boards2.RoleModerator)\n\ttesting.SetOriginCaller(moderator)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_13_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner     = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmoderator = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\trid, tid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Created a board with flagging threshold greater than 1\n\tbid = boards2.CreateBoard(\"test-board\")\n\tboards2.SetFlaggingThreshold(bid, 2)\n\n\t// Create a reply so the realm owner can flag and hide it with a single flag\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\t// Also freeze board to make sure that realm owner can still flag the reply\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FlagReply(bid, tid, rid, \"\")\n\n\t// Render content must contain a message about the hidden reply\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\u003e _⚠ Reply is hidden as it has been flagged as inappropriate_\"))\n}\n\n// Output:\n// true\n"},{"name":"z_14_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Ensure reply doesn't exist\n\tprintln(boards2.Render(\"test-board/1/2\"))\n}\n\n// Output:\n// Reply does not exist with ID: 2\n"},{"name":"z_14_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.DeleteReply(404, 1, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_14_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, 404, 1)\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_14_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, 404)\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_14_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\trid = boards2.CreateReply(bid, tid, 0, \"Parent\")\n\tboards2.CreateReply(bid, tid, rid, \"Child reply\")\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Render content must contain the releted message instead of reply's body\n\tcontent := boards2.Render(\"test-board/1/2\")\n\tprintln(strings.Contains(content, \"\\n\u003e This reply has been deleted\\n\"))\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e Child reply\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_14_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Call using a user that has not permission to delete replies\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_14_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"body\")\n\n\t// Invite a member using a role with permission to delete replies\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(member)\n}\n\nfunc main() {\n\tboards2.DeleteReply(bid, tid, rid)\n\n\t// Ensure reply doesn't exist\n\tprintln(boards2.Render(\"test-board/1/2\"))\n}\n\n// Output:\n// Reply does not exist with ID: 2\n"},{"name":"z_15_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"Foo\", \"bar\")\n\tboards2.FlagThread(srcBID, srcTID, \"idk\")\n}\n\nfunc main() {\n\t// Repost should fail if source thread is flagged\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_15_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID = 1024\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n}\n\nfunc main() {\n\t// Repost should fail if source thread doesn't exist\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// thread does not exist with ID: 1024\n"},{"name":"z_15_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"Foo\", \"bar\")\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateRepost(srcBID, srcTID, \"foo\", \"bar\", dstBID)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_15_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/ufmt\"\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tsrcBID = boards2.CreateBoard(\"src-board\")\n\tdstBID = boards2.CreateBoard(\"dst-board\")\n\n\tsrcTID = boards2.CreateThread(srcBID, \"original title\", \"original text\")\n}\n\nfunc main() {\n\t// Success case\n\ttID := boards2.CreateRepost(srcBID, srcTID, \"repost title\", \"repost text\", dstBID)\n\tp := ufmt.Sprintf(\"dst-board/%s\", tID)\n\tout := boards2.Render(p)\n\n\tprintln(strings.Contains(out, \"original text\"))\n\tprintln(strings.Contains(out, \"repost title\"))\n\tprintln(strings.Contains(out, \"repost text\"))\n}\n\n// Output:\n// true\n// true\n// true\n"},{"name":"z_15_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tsrcBID boards2.BoardID\n\tdstBID boards2.BoardID\n\tsrcTID boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Create a board with a thread\n\torigBID := boards2.CreateBoard(\"origin-board\")\n\torigTID := boards2.CreateThread(origBID, \"title\", \"text\")\n\n\t// Create a second board and repost a thread using an empty title\n\tsrcBID = boards2.CreateBoard(\"source-board\")\n\tsrcTID = boards2.CreateRepost(origBID, origTID, \"original title\", \"original text\", srcBID)\n\n\t// Create a third board to try reposting the repost\n\tdstBID = boards2.CreateBoard(\"destination-board\")\n}\n\nfunc main() {\n\tboards2.CreateRepost(srcBID, srcTID, \"repost title\", \"repost text\", dstBID)\n}\n\n// Error:\n// reposting a thread that is a repost is not allowed\n"},{"name":"z_16_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(bid, 4)\n\n\t// Ensure that flagging threshold changed\n\tprintln(boards2.GetFlaggingThreshold(bid))\n}\n\n// Output:\n// 4\n"},{"name":"z_16_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nconst bid boards2.BoardID = 404\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(bid, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_16_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetFlaggingThreshold(1, 0)\n}\n\n// Error:\n// invalid flagging threshold\n"},{"name":"z_17_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.FreezeBoard(bid)\n\tprintln(boards2.IsBoardFrozen(bid))\n}\n\n// Output:\n// true\n"},{"name":"z_17_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\tboards2.FreezeBoard(bid)\n}\n\n// Error:\n// board is frozen\n"},{"name":"z_18_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbid   = boards2.BoardID(0)                                      // Operate on realm instead of individual boards\n)\n\nvar perms boards2.Permissions\n\nfunc init() {\n\t// Create a new permissions instance without users\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n\n\t// Owner that setted new permissions is not a member of the new permissions\n\tprintln(boards2.IsMember(bid, owner))\n}\n\n// Output:\n// false\n"},{"name":"z_18_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\tuser = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid  = boards2.BoardID(0)                                      // Operate on realm instead of individual boards\n)\n\nvar perms boards2.Permissions\n\nfunc init() {\n\t// Create a new permissions instance\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_18_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tcommondao \"gno.land/p/devx000/gnoland/commondao/v1rc1\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tperms boards2.Permissions\n\tbid   boards2.BoardID\n)\n\nfunc init() {\n\t// Create a new permissions instance without users\n\tperms = boards2.NewDefaultPermissions(commondao.New())\n\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foobar\")\n}\n\nfunc main() {\n\tboards2.SetPermissions(bid, perms)\n\n\t// Owner that setted new board permissions is not a member of the new permissions\n\tprintln(boards2.IsMember(bid, owner))\n}\n\n// Output:\n// false\n"},{"name":"z_19_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\n\tboards2.FreezeBoard(bid)\n}\n\nfunc main() {\n\t// Attempt to freeze a thread on frozen board\n\tboards2.FreezeThread(bid, tid)\n}\n\n// Error:\n// board is frozen\n"},{"name":"z_19_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// Attempt to freeze a frozen thread\n\tboards2.FreezeThread(bid, tid)\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_19_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.FreezeThread(bid, tid)\n\tprintln(boards2.IsThreadFrozen(bid, tid))\n}\n\n// Output:\n// true\n"},{"name":"z_1_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// true\n"},{"name":"z_1_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tuser  = std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\t// Add an admin member\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\t// Next call will be done by the admin member\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, boards2.RoleOwner)\n}\n\n// Error:\n// only owners are allowed to invite other owners\n"},{"name":"z_1_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tuser  = std.Address(\"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\")\n\trole  = boards2.RoleAdmin\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\t// Add an admin member\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\t// Next call will be done by the admin member\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// true\n"},{"name":"z_1_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(0, user, boards2.Role(\"foobar\")) // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// invalid role: foobar\n"},{"name":"z_1_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\trole  = boards2.RoleOwner\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foo123\") // Operate on board DAO members\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n\n\t// Check that user is invited\n\tprintln(boards2.HasMemberRole(0, user, role)) // Operate on realm DAO\n\tprintln(boards2.HasMemberRole(bid, user, role))\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_1_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, user, role)\n}\n\nfunc main() {\n\tboards2.InviteMember(bid, user, role)\n}\n\n// Error:\n// user already exists\n"},{"name":"z_1_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.InviteMember(0, \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\", boards2.RoleGuest)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_20_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// Attempt to freeze a reply on frozen thread\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_20_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\nfunc main() {\n\t// Attempt to freeze already frozen reply\n\tboards2.FreezeReply(bid, tid, rid)\n}\n\n// Error:\n// reply is frozen\n"},{"name":"z_20_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n}\n\nfunc main() {\n\t// reply frozen\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.FreezeReply(bid, tid, rid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeReply(bid, tid, rid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\n\t// thread frozen\n\tboards2.FreezeThread(bid, tid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeThread(bid, tid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\n\t// board frozen\n\tboards2.FreezeBoard(bid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n\tboards2.UnfreezeBoard(bid)\n\tprintln(boards2.IsReplyFrozen(bid, tid, rid))\n}\n\n// Output:\n// false\n// true\n// false\n// true\n// false\n// true\n// false\n"},{"name":"z_20_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n\trid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply\")\n}\n\nfunc main() {\n\t// unfrozen thread - should work\n\tr2 := boards2.CreateReply(bid, tid, rid, \"child 1\")\n\n\t// frozen thread - can't reply\n\tboards2.FreezeReply(bid, tid, rid)\n\tboards2.CreateReply(bid, tid, r2, \"child 2\")\n}\n\n// Error:\n// reply is frozen\n"},{"name":"z_21_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"This is a test realm message\")\n\n\t// Render content must contain the message\n\tcontent := boards2.Render(\"\")\n\tprintln(strings.HasPrefix(content, \"\u003e This is a test realm message\\n\\n\"))\n}\n\n// Output:\n// true\n"},{"name":"z_21_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Set an initial message so it can be cleared\n\tboards2.SetRealmNotice(\"This is a test realm message\")\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"\")\n\n\t// Render content must contain the message\n\tcontent := boards2.Render(\"\")\n\tprintln(strings.HasPrefix(content, \"\u003e This is a test realm message\\n\\n\"))\n\tprintln(strings.HasPrefix(content, \"# Boards\"))\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_21_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\t// Call realm with a user that has not permission to set realm notice\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.SetRealmNotice(\"Foo\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_22_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(false)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// false\n"},{"name":"z_22_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.LockRealm(false)\n}\n\nfunc main() {\n\t// Should fail because realm is already locked\n\tboards2.LockRealm(false)\n}\n\n// Error:\n// realm is locked\n"},{"name":"z_22_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\t// Call realm with a user that has not permission to lock the realm\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(false)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_22_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.LockRealm(true)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_22_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.LockRealm(true)\n}\n\nfunc main() {\n\t// Should fail because realm is already locked\n\tboards2.LockRealm(true)\n}\n\n// Error:\n// realm and members are locked\n"},{"name":"z_22_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\t// Lock the realm without locking realm members\n\tboards2.LockRealm(false)\n}\n\nfunc main() {\n\tboards2.LockRealm(true)\n\tprintln(boards2.IsRealmLocked())\n\tprintln(boards2.AreRealmMembersLocked())\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_23_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleOwner)\n\tboards2.InviteMember(bid, \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\", boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.IterateRealmMembers(0, func(u boards2.User) bool {\n\t\tprintln(u.Address, string(u.Roles[0]))\n\t\treturn false\n\t})\n}\n\n// Output:\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj owner\n// g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5 admin\n"},{"name":"z_24_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid := boards2.CreateBoard(\"test123\")\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleAdmin)\n\n\tbid = boards2.CreateBoard(\"foo123\")\n\tboards2.InviteMember(bid, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleOwner)\n\tboards2.InviteMember(bid, \"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\", boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.IterateBoards(0, func(b boards2.ReadonlyBoard) bool {\n\t\tprintln(b.ID().String())\n\t\tprintln(b.Name())\n\n\t\tb.IterateMembers(0, b.MembersCount(), func(u boards2.User) bool {\n\t\t\tprintln(u.Address, string(u.Roles[0]))\n\t\t\treturn false\n\t\t})\n\t})\n}\n\n// Output:\n// 1\n// test123\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj admin\n// 2\n// foo123\n// g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5 owner\n// g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj owner\n// g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5 admin\n"},{"name":"z_2_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tpath    = \"test-board/1/2\"\n\tcomment = \"Test comment\"\n)\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\trid := boards2.CreateReply(bid, tid, 0, comment)\n\n\t// Ensure that returned ID is right\n\tprintln(rid == 2)\n\n\t// Render content must contain the reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \"+comment+\"\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_2_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateReply(404, 1, 0, \"comment\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_2_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, 404, 0, \"comment\")\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_2_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 404, \"comment\")\n}\n\n// Error:\n// reply does not exist with ID: 404\n"},{"name":"z_2_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Hide thread by flagging it so reply can't be submitted\n\tboards2.FlagThread(bid, tid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"Test reply\")\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_2_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply1\")\n\n\t// Hide thread by flagging it so reply of a reply can't be submitted\n\tboards2.FlagThread(bid, tid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"reply1.1\")\n}\n\n// Error:\n// thread is hidden\n"},{"name":"z_2_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"thread\", \"thread\")\n\trid = boards2.CreateReply(bid, tid, 0, \"reply1\")\n\n\t// Hide reply by flagging it so sub reply can't be submitted\n\tboards2.FlagReply(bid, tid, rid, \"reason\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"reply1.1\")\n}\n\n// Error:\n// replying to a hidden or frozen reply is not allowed\n"},{"name":"z_2_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"Test reply\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_2_i_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_2_j_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tpath    = \"test-board/1/2\"\n\tcomment = \"Second comment\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"First comment\")\n}\n\nfunc main() {\n\trid2 := boards2.CreateReply(bid, tid, rid, comment)\n\n\t// Ensure that returned ID is right\n\tprintln(rid2 == 3)\n\n\t// Render content must contain the sub-reply\n\tcontent := boards2.Render(path)\n\tprintln(strings.Contains(content, \"\\n\u003e \u003e \"+comment+\"\\n\"))\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_2_k_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tcomment = \"Second comment\"\n)\n\nvar (\n\tbid      boards2.BoardID\n\ttid, rid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\trid = boards2.CreateReply(bid, tid, 0, \"Parent comment\")\n\n\t// Flag parent post so it's hidden\n\tboards2.FlagReply(bid, tid, rid, \"\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, rid, \"Sub comment\")\n}\n\n// Error:\n// replying to a hidden or frozen reply is not allowed\n"},{"name":"z_2_l_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\ttid = boards2.CreateThread(bid, \"foo\", \"bar\")\n\tboards2.FreezeThread(bid, tid)\n}\n\nfunc main() {\n\t// cannot reply to a frozen thread\n\tboards2.CreateReply(bid, tid, 0, \"foobar\")\n}\n\n// Error:\n// thread is frozen\n"},{"name":"z_2_m_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, strings.Repeat(\"x\", boards2.MaxReplyLength+1))\n}\n\n// Error:\n// reply is too long, maximum allowed is 300 characters\n"},{"name":"z_2_n_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar (\n\tbid boards2.BoardID\n\ttid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\ttid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\nfunc main() {\n\tboards2.CreateReply(bid, tid, 0, \"\u003e Markdown blockquote\")\n}\n\n// Error:\n// using Markdown headings, blockquotes or horizontal lines is not allowed in replies\n"},{"name":"z_3_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname    = \"foo123\"\n\tnewName = \"bar123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n\n\t// Ensure board is renamed by the default board owner\n\tbid2, _ := boards2.GetBoardIDFromName(newName)\n\tprintln(\"IDs match =\", bid == bid2)\n}\n\n// Output:\n// IDs match = true\n"},{"name":"z_3_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"\")\n}\n\n// Error:\n// board name is empty\n"},{"name":"z_3_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, name)\n}\n\n// Error:\n// board already exists\n"},{"name":"z_3_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RenameBoard(\"unexisting\", \"foo\")\n}\n\n// Error:\n// board does not exist with name: unexisting\n"},{"name":"z_3_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\")\n}\n\n// Error:\n// addresses are not allowed as board name\n"},{"name":"z_3_f_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n\n\t// Ensure board is renamed by another board owner\n\tbid2, _ := boards2.GetBoardIDFromName(newName)\n\tprintln(\"IDs match =\", bid == bid2)\n}\n\n// Output:\n// IDs match = true\n"},{"name":"z_3_g_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tmember2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n\n\t// Invite a new member that doesn't own the user that matches the new board name\n\tboards2.InviteMember(bid, member2, boards2.RoleOwner)\n\ttesting.SetOriginCaller(member2)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_3_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"short\")\n}\n\n// Error:\n// the minimum allowed board name length is 6 characters\n"},{"name":"z_3_i_filetest.gno","body":"package main\n\n// SEND: 1000000ugnot\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n\tusers \"gno.land/r/gnoland/users/v1\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tmember2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n\tname    = \"foo123\"\n\tnewName = \"barbaz123\"\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\n\tbid = boards2.CreateBoard(name)\n\tboards2.InviteMember(bid, member, boards2.RoleOwner)\n\n\t// Test1 is the boards owner and its address has a user already registered\n\t// so a new member must register a user with the new board name.\n\ttesting.SetOriginCaller(member)\n\tusers.Register(newName)\n\n\t// Invite a new member that doesn't own the user that matches the new board name\n\tboards2.InviteMember(bid, member2, boards2.RoleOwner)\n\ttesting.SetOriginCaller(member2)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, newName)\n}\n\n// Error:\n// board name is a user name registered to a different user\n"},{"name":"z_3_j_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tname  = \"foo123\"\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.CreateBoard(name)\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.RenameBoard(name, \"barbaz\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_4_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tnewRole = boards2.RoleOwner\n\tbid     = boards2.BoardID(0) // Operate on realm DAO instead of individual boards\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole)\n\n\t// Ensure that new role has been changed\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tnewRole = boards2.RoleAdmin\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"foo123\")\n\tboards2.InviteMember(bid, member, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole)\n\n\t// Ensure that new role has been changed\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\towner2 = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tadmin  = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, owner2, boards2.RoleOwner)\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, owner2, boards2.RoleAdmin)\n}\n\n// Error:\n// admins are not allowed to remove the Owner role\n"},{"name":"z_4_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tadmin2 = std.Address(\"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5\")\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleAdmin)\n\tboards2.InviteMember(bid, admin2, boards2.RoleAdmin)\n\n\ttesting.SetOriginCaller(admin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, admin2, boards2.RoleOwner)\n}\n\n// Error:\n// admins are not allowed to promote members to Owner\n"},{"name":"z_4_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner   = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid     = boards2.BoardID(0)                                      // Operate on realm DAO members instead of individual boards\n\tnewRole = boards2.RoleOwner\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, member, newRole) // Owner can promote other members to Owner\n\n\t// Ensure that new role has been changed to owner\n\tprintln(boards2.HasMemberRole(bid, member, newRole))\n}\n\n// Output:\n// true\n"},{"name":"z_4_f_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, admin, boards2.Role(\"foo\"))\n}\n\n// Error:\n// invalid role: foo\n"},{"name":"z_4_g_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tadmin = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, admin, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(bid, \"invalid address\", boards2.RoleModerator)\n}\n\n// Error:\n// invalid member address\n"},{"name":"z_4_h_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.ChangeMemberRole(0, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\", boards2.RoleGuest)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_5_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, user, boards2.RoleGuest)\n}\n\nfunc main() {\n\tboards2.RemoveMember(bid, user)\n\n\t// Check that user is not a member\n\tprintln(boards2.IsMember(bid, user))\n}\n\n// Output:\n// false\n"},{"name":"z_5_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RemoveMember(0, \"g1w4ek2u33ta047h6lta047h6lta047h6ldvdwpn\") // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_5_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.RemoveMember(0, \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // Operate on realm DAO instead of individual boards\n}\n\n// Error:\n// member not found\n"},{"name":"z_6_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\trole   = boards2.RoleGuest\n)\n\nvar bid boards2.BoardID // Operate on board DAO\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\tboards2.InviteMember(bid, member, role)\n}\n\nfunc main() {\n\tprintln(boards2.HasMemberRole(bid, member, role))\n\tprintln(boards2.HasMemberRole(bid, member, \"invalid\"))\n\tprintln(boards2.IsMember(bid, member))\n}\n\n// Output:\n// true\n// false\n// true\n"},{"name":"z_6_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n\tbid   = boards2.BoardID(0)                                      // Operate on realm DAO instead of individual boards\n\trole  = boards2.RoleGuest\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tprintln(boards2.HasMemberRole(bid, user, role))\n\tprintln(boards2.IsMember(bid, user))\n}\n\n// Output:\n// false\n// false\n"},{"name":"z_7_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tname  = \"test123\"\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(name)\n}\n\nfunc main() {\n\tbid2, found := boards2.GetBoardIDFromName(name)\n\tprintln(found)\n\tprintln(bid2 == bid)\n}\n\n// Output:\n// true\n// true\n"},{"name":"z_7_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tbid, found := boards2.GetBoardIDFromName(\"foobar\")\n\tprintln(found)\n\tprintln(bid == 0)\n}\n\n// Output:\n// false\n// true\n"},{"name":"z_8_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n\tpath  = \"test-board/1\"\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\ttid := boards2.CreateThread(bid, title, body)\n\n\t// Ensure that returned ID is right\n\tprintln(tid == 1)\n\n\t// Thread should not be frozen by default\n\tprintln(boards2.IsThreadFrozen(bid, tid))\n\n\t// Render content must contains thread's title and body\n\tcontent := boards2.Render(path)\n\tprintln(strings.HasPrefix(content, \"## \"+title))\n\tprintln(strings.Contains(content, body))\n}\n\n// Output:\n// true\n// false\n// true\n// true\n"},{"name":"z_8_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.CreateThread(404, \"Foo\", \"bar\")\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_8_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"Foo\", \"bar\")\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_8_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"\", \"bar\")\n}\n\n// Error:\n// title is empty\n"},{"name":"z_8_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test123\")\n}\n\nfunc main() {\n\tboards2.CreateThread(bid, \"Foo\", \"\")\n}\n\n// Error:\n// body is empty\n"},{"name":"z_9_a_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\ttitle = \"Test Thread\"\n\tbody  = \"Test body\"\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, title, body)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n\n\t// Ensure thread doesn't exist\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread does not exist with ID: 1\n"},{"name":"z_9_b_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n}\n\nfunc main() {\n\tboards2.DeleteThread(404, 1)\n}\n\n// Error:\n// board does not exist with ID: 404\n"},{"name":"z_9_c_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst owner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\nvar bid boards2.BoardID\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, 404)\n}\n\n// Error:\n// thread does not exist with ID: 404\n"},{"name":"z_9_d_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tuser  = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Call using a user that has not permission to delete threads\n\ttesting.SetOriginCaller(user)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n}\n\n// Error:\n// unauthorized\n"},{"name":"z_9_e_filetest.gno","body":"package main\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\tboards2 \"gno.land/r/devx000/gnoland/boards2/v1rc2\"\n)\n\nconst (\n\towner  = std.Address(\"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5\") // @test1\n\tmember = std.Address(\"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\") // @test2\n)\n\nvar (\n\tbid boards2.BoardID\n\tpid boards2.PostID\n)\n\nfunc init() {\n\ttesting.SetOriginCaller(owner)\n\tbid = boards2.CreateBoard(\"test-board\")\n\tpid = boards2.CreateThread(bid, \"Foo\", \"bar\")\n\n\t// Invite a member using a role with permission to delete threads\n\tboards2.InviteMember(bid, member, boards2.RoleAdmin)\n\ttesting.SetOriginCaller(member)\n}\n\nfunc main() {\n\tboards2.DeleteThread(bid, pid)\n\n\t// Ensure thread doesn't exist\n\tprintln(boards2.Render(\"test-board/1\"))\n}\n\n// Output:\n// Thread does not exist with ID: 1\n"}]},"deposit":""}],"fee":{"gas_wanted":"90000000","gas_fee":"900000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"U2iKoHGW6K7bep8UtLBr97zzq/LMSZH7rS2n3lwDYEYf+3lmLs82V256UquOYW8bqvniG3wQopQl2FhYarGSCA=="}],"memo":""},"metadata":{"timestamp":"1743761702"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"RemoveMember","args":["0","g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"3yQ9Uzcug0E/gUI15Ebz6SpmQpMnj+6lf5K3fKPcDvCVrg6yeVepgeK7maTHsm57883RG/9+j5AU0C3RRd8ICg=="}],"memo":""},"metadata":{"timestamp":"1743761807"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["EmptyWithManyMembers"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"PxJx3iE6e2NocMnVTOy4bq7MiK0YVDlIefLAFm9ytsrBRFtruHjDDRQeIoBVJNCmf72D0kRRVii3naZz94OrBQ=="}],"memo":""},"metadata":{"timestamp":"1743761888"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","owner"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"aWHYIIEcmAv3uSgt9ECrBv6Q/z9dZ8u8fWFbYVjqhfO8ELEnn73KcwZlmA43SSclJVlRiVN/TghMf7hCaHb/BA=="}],"memo":""},"metadata":{"timestamp":"1743761893"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1e5hud66rs7ye4zgeqmqvwfhurs2mnf408hdqcl","owner"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"aj9gw0cR3xQIe1cBU2JEMPQyK0ft7NWyAgq4kanFCI2b79JmmEGo45VMfscffxmfJUuzNgeJTnsxOwRupQ4ZAA=="}],"memo":""},"metadata":{"timestamp":"1743761898"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5","admin"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"JF8sEBvqo4OCT8APgZXc/GxPzX+Ij2UJMj+YxTgesHsa1W6sTG8Q4RkshZK15LT99mse4pb9GtGjgG0i33E/Bw=="}],"memo":""},"metadata":{"timestamp":"1743761903"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g12chzmwxw8sezcxe9h2csp0tck76r4ptwdlyyqk","moderator"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"0rEX/wEVQfzwTCwrwK9aV4B7qRiIeB88uq4PFCiemlGg4qf2NMspIUhcynlqzqSU6Y/0+OMxzq3bZJSyoqmHDQ=="}],"memo":""},"metadata":{"timestamp":"1743761908"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["1","g1ym6zxff3xq7wfldcs3uyu7x7z40gstggcx8zdj","moderator"]}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"GO3MGKbeMgas+NtO+OTUGo2VNt9tv9pfQ48SzKyOMmRUOFk96b0E7yc0L1hLfHhlmIry1TN67/W2hw9wpJ81AA=="}],"memo":""},"metadata":{"timestamp":"1743761913"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["TheNumber42"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"muDrsNLE7kZGItSiBNy3vYoe7tyGAyWIfoDYcx4uIIPx+UgjgcJizyiPS6aqEsXrxpyak0+WJ3jUj1HuKARgDQ=="}],"memo":""},"metadata":{"timestamp":"1743761918"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kuCtWj1TUpFzucoJ8iAhcnx9Kmvr629VZ2v3JFLL9O/GX4U97k2O0jpn4usPHV3W6RvsRihX+bXQSZHyYYkNDw=="}],"memo":""},"metadata":{"timestamp":"1743761918"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["2","What's your take on it\\?","Seen in many places, unknown to many"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"3Q6yjDFalubJjr79zO/5N6efvvBVaAoDzu7QlcDORuipWi+9MNQ8cUPGnsT4faRiGwrvvQAMl17xIOoR11VTAg=="}],"memo":""},"metadata":{"timestamp":"1743761923"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["2","1","0","What do you mean\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"i+Zfx47nUWx4qGnftxJrLOpKME3B4VXvHWdLc/pO0HXd3ims6sTH/NHt8E/t1qUlPA8ndK1lgg7Qo8+v0fpyCQ=="}],"memo":""},"metadata":{"timestamp":"1743761928"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["2","1","0","よんじゅうに\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Rup+YIfuQpIu3I3VGXx97u6EZtXZ1yyiEtAcXegacsnu4WB3YnXEIzJauCcw2Edx5Ym3lo/BqVJrwVpoqDigAA=="}],"memo":""},"metadata":{"timestamp":"1743761933"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["2","1","2","Cuarenta y dos\\?"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"5VJ9Q10yIK4j0vvm4fcCgbmem6rUzOaXZA8hkKKYNUQJ5tur+8ClyPSpUn70XEYhfe2RSREvwHSplt0SehAaBg=="}],"memo":""},"metadata":{"timestamp":"1743761938"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["ThreadsExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"I6ZlzBsGf1qOsfnBjwHKJyar1cuDCh+N/VDvsHBVQbqQvMdpJvotHS4oJSzI0267kSV0P3aj0eRhg24/HqSeBA=="}],"memo":""},"metadata":{"timestamp":"1743761943"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Seventh","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"lEnbWEYdUoTq+RPp8RRG0VACcZR6gvelM5uVdzRaiT4x1JcrKelclMGFyC7f1dByoxPx4wYVhDjiA5PERnAtAQ=="}],"memo":""},"metadata":{"timestamp":"1743761948"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Sixth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"N6G8Nonx6w/paVsrfnTLs/BsUN/GJ3iKTbf9YbmLq4/WiHTLsSnSq9XmM3geonSJvM+uvmR/ygD0Roj1Lq3PBw=="}],"memo":""},"metadata":{"timestamp":"1743761953"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kuCtWj1TUpFzucoJ8iAhcnx9Kmvr629VZ2v3JFLL9O/GX4U97k2O0jpn4usPHV3W6RvsRihX+bXQSZHyYYkNDw=="}],"memo":""},"metadata":{"timestamp":"1743761953"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Fifth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"zKIVafDZwKsorlEQcB5gH3Cfxa6RSRyNmrJ6lrLiVASJsm1PEOQX1rAmeq0xECiyzlywQi2QosQ6SOXRpGcKAQ=="}],"memo":""},"metadata":{"timestamp":"1743761958"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Fourth","Let's discuss something"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"2NjemoRCvFjqMm1EqLenIWuaNEP3dGb4dF31urjXy2Z9inS0g/pQNWkU+rTMGVWtqgn9vpL8hW0yZT6VhZL8BQ=="}],"memo":""},"metadata":{"timestamp":"1743761963"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Third","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"lnuXkGx9zXZqVCGfzQQOiQTynjx+lYkydTRxqoHw7s9XA7jIOCfjVFk63sr66TxRNUrGRHKxpcEzUB2vSE3RDQ=="}],"memo":""},"metadata":{"timestamp":"1743761968"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","Second","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"vi5VQFW7xYjrl0jtUMwtWwJEVTW1Bcbimgwz2mU/s91fZWJwYdK/lg0LEcO9TdQCPV8EWvsS3DGNpjNfNu/kBA=="}],"memo":""},"metadata":{"timestamp":"1743761973"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["3","First with many Replies","Let's discuss"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"IvThbQ7fDNCuxPjXCB4aUngctbAz8wI4qZ1Y2p9cGp6315zr8tXylNS+n9V/xnYztqYBOO0acV8NTLAjtr6dCQ=="}],"memo":""},"metadata":{"timestamp":"1743761978"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","First"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"yH3slx61rIFtSsDZKTHeIYYn+mL4n+xiht985eukgKk2POWaKf5BGdBULgkJ21kbnsV65vPJIsgYejbQ/9GjCg=="}],"memo":""},"metadata":{"timestamp":"1743761983"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","8","Sub First"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"R0nUwVIAQ59kP/sZjQ3/xgCXzeo5hbSwLMPz4g4s6pBX9KW3/0vAi9kzz+swwp7END9IC6apNlYC303ZEVuyAA=="}],"memo":""},"metadata":{"timestamp":"1743761988"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Second"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"GG4QHf1tSirS6I9cDjng1Xir1Ql+q4x93bm9kODUL6KEanKmD84gKh5/YVMstRkHPp60Et1UsFHC9J6knxI3AQ=="}],"memo":""},"metadata":{"timestamp":"1743761993"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Third"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"voI0taAnzfanaNNKskt12IivTt4qWbCuWtHXV5huhAOOp7B+K4OPQsIHg7+LwAQeTmWXPyrNdB60OX1BjR1KDg=="}],"memo":""},"metadata":{"timestamp":"1743761998"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Fourth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"aTmh1rKQmbiIfSmfSP8ylV9vBoPqZYV9T0aYgwPB/eFEK7rvZ1eW5+3QP5f8Edrgl4B2kf5WwnA3Fhqu5qc8BQ=="}],"memo":""},"metadata":{"timestamp":"1743762003"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Fifth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"rjiWLoD5Mg1Ulv9b3s299jm2HcmJfoKDeg7WQzgKccmyQ8BQUHBbHEYVar+6wSdjl09RpP/F+CnOUP9JN6gVDQ=="}],"memo":""},"metadata":{"timestamp":"1743762008"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Sixth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"TDO4Ji9JE1mdyomiVRL6Nc2Z22xABNA2xy/Gvi2DaF3Q8Ur56106k7DWgAwKkYnWJO2DjPQH0mry3Dn3K5ygDg=="}],"memo":""},"metadata":{"timestamp":"1743762013"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Seventh"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ID/GjdOyQf3DL8tOLPKgRDkmlxK/VNPej1HGPrmDL2XXqSP8VLHWuE8fhmk6yI8FFMrC5TsRBbIVbmmAhARmDA=="}],"memo":""},"metadata":{"timestamp":"1743762018"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Eigth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xg3AUWGaisRcJwnAGHz6JA0Eb+muoI4YznApNB1ZOcqj/ZKbYwk7LJ/f7aJ9QBUO9YMwCkBRwNr/NBGFPzW9Cg=="}],"memo":""},"metadata":{"timestamp":"1743762023"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Ninth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Z28hKxhoyOqbhWsNCkPreWiq0BgyCxB9AxqfTFLKVKYra+RfANNuljqFuCzVhElqDhkP/RlrBl7TfV5Q2AuBBQ=="}],"memo":""},"metadata":{"timestamp":"1743762028"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Tenth"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ujgja3YG7j2hRcob5WWrlBZxfAJzr+TicEeQhHLbr7Xa4cQkxHbWI0DTvEKUqV8RYU52xI20s4p6gt0+D2zZCw=="}],"memo":""},"metadata":{"timestamp":"1743762033"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateReply","args":["3","7","0","Eleventh"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"AHZ+TfFaMfccMtF4jX+U8Ruq2zNMVI1RyekXJ0KQ91Y0tkqRK8yn4lvv7Vb+AvDVDkAO3MqO9TfVXr28vGHuBg=="}],"memo":""},"metadata":{"timestamp":"1743762039"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["ReadOnlyExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"/KLIc34sqQrmajzkcFfDjtqgtdjiuGAPgO+qrfJd+WIhzN7gkixqzUSXPj3wZDiKikBqc+T+Wb5tp65m6bK9BA=="}],"memo":""},"metadata":{"timestamp":"1743762044"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["4","Example Thread","This thread shouldn't be writable"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"NXhPiUeq9YcNnkudvz745FgxJsebQ01odghXhRQbQGU40Q83p02OzzOJ3VVKV0yhuBxON7Y181/zxZOiTi4MDQ=="}],"memo":""},"metadata":{"timestamp":"1743762049"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"FreezeBoard","args":["4"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"wd/5jD5gLOF9jEvpFuTKkuln4fbytMqJzZPYN4LOiZY/xVrhM8T3QCr7/d6s8uAr2WxqxBiSGh0yZIp2wQ6UBg=="}],"memo":""},"metadata":{"timestamp":"1743762054"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["RepostExample"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"5TRSh5UmPK8KI/+8sTSI5upXLvb8LXP4YGLzMaJC5Bu69gu5ZIj+SEBez22Ek25bpVLkqHHtqhpmU5QMvIYuAQ=="}],"memo":""},"metadata":{"timestamp":"1743762059"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kuCtWj1TUpFzucoJ8iAhcnx9Kmvr629VZ2v3JFLL9O/GX4U97k2O0jpn4usPHV3W6RvsRihX+bXQSZHyYYkNDw=="}],"memo":""},"metadata":{"timestamp":"1743762059"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateRepost","args":["2","1","Custom repost title","Custom repost body","5"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"JPJZiP3S/FhZUnPZXP93PAzHt4GpBQ4kAopWnRstMp7D3rye1kMdx+qyKaxGGbiAwI+YKrKK12gud8NAJnRbDw=="}],"memo":""},"metadata":{"timestamp":"1743762064"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"SetRealmNotice","args":["A new [version](https://gno.land/r/devx000/gnoland/boards2/v1rc2) is available which fixes a couple of issues and explores a UI which is is more in line with classic Reddit"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"rAsbllvRLrYeD2MhA3PT5+8yfYQ96MY6bt087UKt4uMH5pknjSYHqygG1h9GRtVUuYDZzvwtrgfgw52OvXGKCA=="}],"memo":""},"metadata":{"timestamp":"1743762325"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"SetRealmNotice","args":["A new boards [version](https://gno.land/r/devx000/gnoland/boards2/v1rc2) is available which fixes a couple of issues and explores a UI which is is more in line with classic Reddit"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Ppe3T0NpwmRcYGu73lTjp9yQAmB8G032mX/yTIeOOqn3nJcP9WKCR1OSznIw1PFoYXea1fMEyrgibY17UVavBQ=="}],"memo":""},"metadata":{"timestamp":"1743762441"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"SetRealmNotice","args":["A new boards [version](https://gno.land/r/devx000/gnoland/boards2/v1rc2) is available which fixes a couple of issues and explores a UI which is more in line with classic Reddit"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"QcTtCygzcmmMQ9oCvrxZEO7KVS2rVwjaJvkFvVlJD1f1gHMe6QHWWnh7rqigtGEFROrHKE9X5SXfsKsR2xJ+Cw=="}],"memo":""},"metadata":{"timestamp":"1743762466"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15dz69sch7fkhc9gk57hpe4qea77thmy20apu9x","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Hp9yyz8tbzWiTA9XmiOMfxdRnhtTNFymcsAoxCj3svu85ZXXa9C48RsdAa1OcVmVYAlVaOKa00F5qrqHJ4NgDQ=="}],"memo":""},"metadata":{"timestamp":"1743762511"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1743762858"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1743762953"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1aykqe5ddemku5mwd3elmwtpj8jgss47xrqpag4","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"5W8pvzVVTwqR0USett9a5LYheSuuFicEmPt++BwXxXEqHWgVQtCQkClsJbLdf5hw1cSGg5h7KW1GVrL6b466DA=="}],"memo":""},"metadata":{"timestamp":"1743767985"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1dtuj65mgja87gh0c45pd3rt4cah0kkw9lzld4y","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"gVIdQBBxy3FqNuvip5XH1L48VyKevaNiPaa4nYyyW/3tDm1f82uOznciajCfJAe8rw2wSRB2W3UAg/Ds/RWPBw=="}],"memo":""},"metadata":{"timestamp":"1743768151"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1743769312"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1manfred47kzduec920z88wfr64ylksmdcedlf5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["test-manfred"]}],"fee":{"gas_wanted":"50000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"zIEkKLWS6zeUOjqJGwRvhP+ncHZYYHC7ps9USK+aWU+LXhRXgKvDSdSfbaaDc48kNeXPDc/sU23o4ZFIYPpBBg=="}],"memo":""},"metadata":{"timestamp":"1743774399"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1manfred47kzduec920z88wfr64ylksmdcedlf5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["6","testing testing","👋"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"sJcvKDbrNWnVo0ozE9r4AvUR3bVGhn4t4OrM/H+7gJ2YwBmQ20u56JUG1AeZl/WSdrlLl8pjTBZZskyT49+NAA=="}],"memo":""},"metadata":{"timestamp":"1743774450"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1etcvlu8zyuwnd7w0x0lcu4g2r7yzllyy62gpa5","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"9104212","gas_fee":"4742446ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"hUM8x4T6MQUzpf04aCJ2OtaF5uHBhNuulFwBKJZfLhNCs/3Wm7rCO5wuHUd+iFscgXk6dvnG8G4l7AFSQNqlBA=="}],"memo":""},"metadata":{"timestamp":"1743775038"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bXyHJdtgDmBHTgSUfcLbWb8QmJPrI9s457gJW1yahUnysV2CEJKBbj3TjSy91WEnIgxMWq21Ki9usgKlfzU4Cg=="}],"memo":""},"metadata":{"timestamp":"1743775997"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bXyHJdtgDmBHTgSUfcLbWb8QmJPrI9s457gJW1yahUnysV2CEJKBbj3TjSy91WEnIgxMWq21Ki9usgKlfzU4Cg=="}],"memo":""},"metadata":{"timestamp":"1743776002"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bXyHJdtgDmBHTgSUfcLbWb8QmJPrI9s457gJW1yahUnysV2CEJKBbj3TjSy91WEnIgxMWq21Ki9usgKlfzU4Cg=="}],"memo":""},"metadata":{"timestamp":"1743776017"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"UpdateStatus","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ub3uoxEExL3jMuQoAegvKmDOW1LWrOercf9BdWQkTdVih3mPoIH/7NqWsOjm/+gIgkLa0kYuSbQBsPfadlwYCQ=="}],"memo":""},"metadata":{"timestamp":"1743776022"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","send":"","pkg_path":"gno.land/r/moul/home","func":"AddTodo","args":null}],"fee":{"gas_wanted":"2000000000","gas_fee":"6250880ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bXyHJdtgDmBHTgSUfcLbWb8QmJPrI9s457gJW1yahUnysV2CEJKBbj3TjSy91WEnIgxMWq21Ki9usgKlfzU4Cg=="}],"memo":""},"metadata":{"timestamp":"1743776027"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1743776083"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"name":"hello","path":"gno.land/r/test12/hello","files":[{"name":"package.gno","body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/eco","func":"Render","args":["Deployed through play.gno.land"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ot/V8bS6JNMgzRPR5JTnCh1C/IrUSVBplj9YxTkdum9+xncnn+Bz1wkK83vV5pnwz3yQG7k5wmzwegSGsvvkAw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743788578"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","package":{"name":"hworld","path":"gno.land/r/g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5/hworld","files":[{"name":"package.gno","body":"package hworld\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""},{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/sys/users","func":"ResolveName","args":["abc"]}],"fee":{"gas_wanted":"3428737","gas_fee":"7144ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"p1kO3fql5GXI69qID2B2pfmvydiypFq+4IIC0iUvpenfZH36w/ccxUKizKYfxh/egfg1Tl/EOVOwwixdPLi8Aw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1743793364"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g150gdvn780ws7a3s9qpdvv7h4d9hq6vh672ely0","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"DxumKZ8V42aBbpxBQMjTnP7r0pdLPXmD1ThtvXJj2H14j1jd6gFr9fGXDjlSeuh4U8VqPKskC3uL+3nCsvjtCw=="}],"memo":""},"metadata":{"timestamp":"1743859813"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g150gdvn780ws7a3s9qpdvv7h4d9hq6vh672ely0","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"DxumKZ8V42aBbpxBQMjTnP7r0pdLPXmD1ThtvXJj2H14j1jd6gFr9fGXDjlSeuh4U8VqPKskC3uL+3nCsvjtCw=="}],"memo":""},"metadata":{"timestamp":"1743937361"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":["FirstCatPost"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"6zChAbF3Z6OpdHfgdhMy1W2NSeLFMGXf2/5HpraFAN1q0lmpbE5t5QBMk72Bhe8tO50XW42X17Fk+A+CguXBBQ=="}],"memo":""},"metadata":{"timestamp":"1744009485"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateThread","args":["8","First cat post on boards2!","Katt Williams is an American stand-up comedian and actor. https://en.wikipedia.org/wiki/Katt_Williams"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"nYLnj0q+Y9u5pj2j1qttYx5hK3UmYqWXAfh2PB3HFVcQosvaiRpEOitMnre/aoSJ8BIh1jH9CxYn1zAdhpYXAQ=="}],"memo":""},"metadata":{"timestamp":"1744009736"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["FirstCatPost"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bi+q7rOHbU6AAvDLV3R+eHbwwSNAcMxWGDOGf3neUylsgbVeCpdkKSKPxNOfvz9jCDH+ZhTffYO8DOvRn2CYAQ=="}],"memo":""},"metadata":{"timestamp":"1744009852"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1juz2yxmdsa6audkp6ep9vfv80c8p5u76e03vvh","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateThread","args":["7","First cat post on boards2!","Katt Williams is an American stand-up comedian and actor. https://en.wikipedia.org/wiki/Katt_Williams"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"AOMDntLfkB4kP8rjoGLw15cDTc6mnwbz8xRXkJk1avZt35hoxynSbYXUwKv1D3CkvoEs8LIPbY7h0uEAgSNbDw=="}],"memo":""},"metadata":{"timestamp":"1744009907"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15nw3tn7623tr48j0awzhg2757lf5yf4mxf9htg","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"3BfEKlcqJsICu0aVbBD0B7LLRxB6gMhoskfT46TN3ysJSNDQogBwKyjwkI5b+lR6RLB/YiI28B4U2cI2maT6DQ=="}],"memo":""},"metadata":{"timestamp":"1744016099"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1u72w5pflnegza4akd2dpqmrmtf76xkp9q5gkkv","amount":"1000000ugnot"}],"fee":{"gas_wanted":"65330","gas_fee":"137ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"2+UeYtWXYcllPDB8Y+x4caT8T6xtHV5qu1wDfELr4NLX9VFYIylA8i3cQpk8GBCjcMYt99FWv/WpekixymWhCg=="}],"memo":""},"metadata":{"timestamp":"1744017391"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ej0qca5ptsw9kfr64ey8jvfy9eacga6mpj2z0y","send":"23ugnot","pkg_path":"gno.land/r/matijamarjanovic/gnoxchange","func":"CreateCoinToTokenTicket","args":["ugnot","gno.land/r/demo/grc20factory.MOUL","231","2"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"3HmHaA3ti+EGjCbvezwwaqkSjuOy3sn3EqZySkjv1PIi20cPCwuvNuKDx6z6lzrAJuFzNzaNe7PwfwbjnI8CAQ=="}],"memo":""},"metadata":{"timestamp":"1744042135"}}
{"tx":{"msg":[{"@type":"/vm.m_run","caller":"g1kjsl2ungmc95mgluq96w8dqlep8d4n8cxdfthk","send":"","package":{"name":"main","path":"gno.land/r/g1kjsl2ungmc95mgluq96w8dqlep8d4n8cxdfthk/run","files":[{"name":"main.gno","body":"package main\n\nimport (\n    \"std\"\n    \"gno.land/r/matijamarjanovic/tokenhub\"\n    \"gno.land/r/matijamarjanovic/gnoxchange\"\n)\n\nfunc main() {\n    gnoxchangeAddr := std.DerivePkgAddr(\"gno.land/r/matijamarjanovic/gnoxchange\")\n\n    if \"token\" == \"token\" {\n        token := tokenhub.GetToken(\"gno.land/r/matijamarjanovic/tokenhub.gno.land/r/matijamarjanovic/test.token-a\")\n        if token == nil {\n            panic(\"token not found\")\n        }\n        \n        teller := token.CallerTeller()\n        teller.Approve(gnoxchangeAddr, 280000000)\n    }\n\n    err := gnoxchange.FulfillTicket(\"swap-9\", 280000000)\n    if err != nil {\n        panic(\"error fulfilling ticket\")\n    }\n}"}]}}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kWCK8efXo0vzbgUOX2jtQo4UlFx6cjzPUatxN3r4PUqwS089Us/ylWrQw0RjxL+ZbGP7NOsVn4Dume9JnNOdAQ=="}],"memo":"memo"},"metadata":{"timestamp":"1744042195"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ej0qca5ptsw9kfr64ey8jvfy9eacga6mpj2z0y","send":"23ugnot","pkg_path":"gno.land/r/matijamarjanovic/gnoxchange","func":"CreateCoinToTokenTicket","args":["ugnot","gno.land/r/demo/grc20factory.MOUL","231","2"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"3HmHaA3ti+EGjCbvezwwaqkSjuOy3sn3EqZySkjv1PIi20cPCwuvNuKDx6z6lzrAJuFzNzaNe7PwfwbjnI8CAQ=="}],"memo":""},"metadata":{"timestamp":"1744042135"}}
{"tx":{"msg":[{"@type":"/vm.m_run","caller":"g1kjsl2ungmc95mgluq96w8dqlep8d4n8cxdfthk","send":"","package":{"name":"main","path":"gno.land/r/g1kjsl2ungmc95mgluq96w8dqlep8d4n8cxdfthk/run","files":[{"name":"main.gno","body":"package main\n\nimport (\n    \"std\"\n    \"gno.land/r/matijamarjanovic/tokenhub\"\n    \"gno.land/r/matijamarjanovic/gnoxchange\"\n)\n\nfunc main() {\n    gnoxchangeAddr := std.DerivePkgAddr(\"gno.land/r/matijamarjanovic/gnoxchange\")\n\n    if \"token\" == \"token\" {\n        token := tokenhub.GetToken(\"gno.land/r/matijamarjanovic/tokenhub.gno.land/r/matijamarjanovic/test.token-a\")\n        if token == nil {\n            panic(\"token not found\")\n        }\n        \n        teller := token.CallerTeller()\n        teller.Approve(gnoxchangeAddr, 280000000)\n    }\n\n    err := gnoxchange.FulfillTicket(\"swap-9\", 280000000)\n    if err != nil {\n        panic(\"error fulfilling ticket\")\n    }\n}"}]}}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kWCK8efXo0vzbgUOX2jtQo4UlFx6cjzPUatxN3r4PUqwS089Us/ylWrQw0RjxL+ZbGP7NOsVn4Dume9JnNOdAQ=="}],"memo":"memo"},"metadata":{"timestamp":"1744042195"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ej0qca5ptsw9kfr64ey8jvfy9eacga6mpj2z0y","send":"23ugnot","pkg_path":"gno.land/r/matijamarjanovic/gnoxchange","func":"CreateCoinToTokenTicket","args":["ugnot","gno.land/r/demo/grc20factory.MOUL","231","2"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"3HmHaA3ti+EGjCbvezwwaqkSjuOy3sn3EqZySkjv1PIi20cPCwuvNuKDx6z6lzrAJuFzNzaNe7PwfwbjnI8CAQ=="}],"memo":""},"metadata":{"timestamp":"1744042135"}}
{"tx":{"msg":[{"@type":"/vm.m_run","caller":"g1kjsl2ungmc95mgluq96w8dqlep8d4n8cxdfthk","send":"","package":{"name":"main","path":"gno.land/r/g1kjsl2ungmc95mgluq96w8dqlep8d4n8cxdfthk/run","files":[{"name":"main.gno","body":"package main\n\nimport (\n    \"std\"\n    \"gno.land/r/matijamarjanovic/tokenhub\"\n    \"gno.land/r/matijamarjanovic/gnoxchange\"\n)\n\nfunc main() {\n    gnoxchangeAddr := std.DerivePkgAddr(\"gno.land/r/matijamarjanovic/gnoxchange\")\n\n    if \"token\" == \"token\" {\n        token := tokenhub.GetToken(\"gno.land/r/matijamarjanovic/tokenhub.gno.land/r/matijamarjanovic/test.token-a\")\n        if token == nil {\n            panic(\"token not found\")\n        }\n        \n        teller := token.CallerTeller()\n        teller.Approve(gnoxchangeAddr, 280000000)\n    }\n\n    err := gnoxchange.FulfillTicket(\"swap-9\", 280000000)\n    if err != nil {\n        panic(\"error fulfilling ticket\")\n    }\n}"}]}}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kWCK8efXo0vzbgUOX2jtQo4UlFx6cjzPUatxN3r4PUqwS089Us/ylWrQw0RjxL+ZbGP7NOsVn4Dume9JnNOdAQ=="}],"memo":"memo"},"metadata":{"timestamp":"1744042195"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g13sdl3zradeuc4pmeykz40x4457rh8kvj8gmfnp","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"mZ2vfOFDrhSMgAAbV3pgl9iGUVcUnYRNf2IWmf3Of+G4EJMtMm0EucSFxEe3OuRPqj/uWfCo/XhLUq9WCs0rDw=="}],"memo":""},"metadata":{"timestamp":"1744113943"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g13sdl3zradeuc4pmeykz40x4457rh8kvj8gmfnp","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"2242500ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"nf+sjW4O3qblb/preDOAc2hzO9CN4oZmlnIvfinHKS2CgkLISpZz2jv8xjrLYYbAuUiPKDGDcBX5kNfnRxzpCQ=="}],"memo":""},"metadata":{"timestamp":"1744113963"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1744115898"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1nc8pcz6xslpp8fxz308h0pxvztd7vuq7456a0w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"hmG3xCZ/FvdrsV2sqFfIMXvaUVltiQo9o6LdNITV7fPFBQy3goT8ZPO8dW5uY0tlxO738ompX4ozRyBETUOpDw=="}],"memo":""},"metadata":{"timestamp":"1744116446"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ej0qca5ptsw9kfr64ey8jvfy9eacga6mpj2z0y","send":"23ugnot","pkg_path":"gno.land/r/matijamarjanovic/gnoxchange","func":"CreateCoinToTokenTicket","args":["ugnot","gno.land/r/demo/grc20factory.MOUL","231","2"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"3HmHaA3ti+EGjCbvezwwaqkSjuOy3sn3EqZySkjv1PIi20cPCwuvNuKDx6z6lzrAJuFzNzaNe7PwfwbjnI8CAQ=="}],"memo":""},"metadata":{"timestamp":"1744042135"}}
{"tx":{"msg":[{"@type":"/vm.m_run","caller":"g1kjsl2ungmc95mgluq96w8dqlep8d4n8cxdfthk","send":"","package":{"name":"main","path":"gno.land/r/g1kjsl2ungmc95mgluq96w8dqlep8d4n8cxdfthk/run","files":[{"name":"main.gno","body":"package main\n\nimport (\n    \"std\"\n    \"gno.land/r/matijamarjanovic/tokenhub\"\n    \"gno.land/r/matijamarjanovic/gnoxchange\"\n)\n\nfunc main() {\n    gnoxchangeAddr := std.DerivePkgAddr(\"gno.land/r/matijamarjanovic/gnoxchange\")\n\n    if \"token\" == \"token\" {\n        token := tokenhub.GetToken(\"gno.land/r/matijamarjanovic/tokenhub.gno.land/r/matijamarjanovic/test.token-a\")\n        if token == nil {\n            panic(\"token not found\")\n        }\n        \n        teller := token.CallerTeller()\n        teller.Approve(gnoxchangeAddr, 280000000)\n    }\n\n    err := gnoxchange.FulfillTicket(\"swap-9\", 280000000)\n    if err != nil {\n        panic(\"error fulfilling ticket\")\n    }\n}"}]}}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kWCK8efXo0vzbgUOX2jtQo4UlFx6cjzPUatxN3r4PUqwS089Us/ylWrQw0RjxL+ZbGP7NOsVn4Dume9JnNOdAQ=="}],"memo":"memo"},"metadata":{"timestamp":"1744042195"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g13sdl3zradeuc4pmeykz40x4457rh8kvj8gmfnp","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"mZ2vfOFDrhSMgAAbV3pgl9iGUVcUnYRNf2IWmf3Of+G4EJMtMm0EucSFxEe3OuRPqj/uWfCo/XhLUq9WCs0rDw=="}],"memo":""},"metadata":{"timestamp":"1744113943"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g13sdl3zradeuc4pmeykz40x4457rh8kvj8gmfnp","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"2242500ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"nf+sjW4O3qblb/preDOAc2hzO9CN4oZmlnIvfinHKS2CgkLISpZz2jv8xjrLYYbAuUiPKDGDcBX5kNfnRxzpCQ=="}],"memo":""},"metadata":{"timestamp":"1744113963"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1744115898"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1nc8pcz6xslpp8fxz308h0pxvztd7vuq7456a0w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"hmG3xCZ/FvdrsV2sqFfIMXvaUVltiQo9o6LdNITV7fPFBQy3goT8ZPO8dW5uY0tlxO738ompX4ozRyBETUOpDw=="}],"memo":""},"metadata":{"timestamp":"1744116446"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1j39fhg29uehm7twwnhvnpz3ggrm6tprhq65t0t","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"AwwUIhHvMFMpQWCPRLxqJZUcZfgo3QPpYZm0kWYgDf2GMoB89BCJb4w7F0lrPlcfjowtsTXj58UibAySV0xUBw=="}],"memo":""},"metadata":{"timestamp":"1744123121"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ej0qca5ptsw9kfr64ey8jvfy9eacga6mpj2z0y","send":"23ugnot","pkg_path":"gno.land/r/matijamarjanovic/gnoxchange","func":"CreateCoinToTokenTicket","args":["ugnot","gno.land/r/demo/grc20factory.MOUL","231","2"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"3HmHaA3ti+EGjCbvezwwaqkSjuOy3sn3EqZySkjv1PIi20cPCwuvNuKDx6z6lzrAJuFzNzaNe7PwfwbjnI8CAQ=="}],"memo":""},"metadata":{"timestamp":"1744042135"}}
{"tx":{"msg":[{"@type":"/vm.m_run","caller":"g1kjsl2ungmc95mgluq96w8dqlep8d4n8cxdfthk","send":"","package":{"name":"main","path":"gno.land/r/g1kjsl2ungmc95mgluq96w8dqlep8d4n8cxdfthk/run","files":[{"name":"main.gno","body":"package main\n\nimport (\n    \"std\"\n    \"gno.land/r/matijamarjanovic/tokenhub\"\n    \"gno.land/r/matijamarjanovic/gnoxchange\"\n)\n\nfunc main() {\n    gnoxchangeAddr := std.DerivePkgAddr(\"gno.land/r/matijamarjanovic/gnoxchange\")\n\n    if \"token\" == \"token\" {\n        token := tokenhub.GetToken(\"gno.land/r/matijamarjanovic/tokenhub.gno.land/r/matijamarjanovic/test.token-a\")\n        if token == nil {\n            panic(\"token not found\")\n        }\n        \n        teller := token.CallerTeller()\n        teller.Approve(gnoxchangeAddr, 280000000)\n    }\n\n    err := gnoxchange.FulfillTicket(\"swap-9\", 280000000)\n    if err != nil {\n        panic(\"error fulfilling ticket\")\n    }\n}"}]}}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kWCK8efXo0vzbgUOX2jtQo4UlFx6cjzPUatxN3r4PUqwS089Us/ylWrQw0RjxL+ZbGP7NOsVn4Dume9JnNOdAQ=="}],"memo":"memo"},"metadata":{"timestamp":"1744042195"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g13sdl3zradeuc4pmeykz40x4457rh8kvj8gmfnp","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"mZ2vfOFDrhSMgAAbV3pgl9iGUVcUnYRNf2IWmf3Of+G4EJMtMm0EucSFxEe3OuRPqj/uWfCo/XhLUq9WCs0rDw=="}],"memo":""},"metadata":{"timestamp":"1744113943"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g13sdl3zradeuc4pmeykz40x4457rh8kvj8gmfnp","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"2242500ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"nf+sjW4O3qblb/preDOAc2hzO9CN4oZmlnIvfinHKS2CgkLISpZz2jv8xjrLYYbAuUiPKDGDcBX5kNfnRxzpCQ=="}],"memo":""},"metadata":{"timestamp":"1744113963"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1672qjrndnpe5gcef3s889lp6fdpeft3ym3pg9w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qhY6H12Vr67tl/uVdPXLZ34zHK/mN5z4AENSFAkPcg6o+CRypS+VaC7sS/1cM1huPRDzV3QyadiPs+PG7rHxDw=="}],"memo":""},"metadata":{"timestamp":"1744115898"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1nc8pcz6xslpp8fxz308h0pxvztd7vuq7456a0w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"hmG3xCZ/FvdrsV2sqFfIMXvaUVltiQo9o6LdNITV7fPFBQy3goT8ZPO8dW5uY0tlxO738ompX4ozRyBETUOpDw=="}],"memo":""},"metadata":{"timestamp":"1744116446"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"InviteMember","args":["0","g1j39fhg29uehm7twwnhvnpz3ggrm6tprhq65t0t","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"AwwUIhHvMFMpQWCPRLxqJZUcZfgo3QPpYZm0kWYgDf2GMoB89BCJb4w7F0lrPlcfjowtsTXj58UibAySV0xUBw=="}],"memo":""},"metadata":{"timestamp":"1744123121"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1j39fhg29uehm7twwnhvnpz3ggrm6tprhq65t0t","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateReply","args":["3","0","1"]}],"fee":{"gas_wanted":"12000000","gas_fee":"1640130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"blr5JNJ5MExy5RznObS7GKxboaM5MqzWQjdyjyOnXwNgNIzbsJgJv+Lav0UdtvOo7Lq2M+bIII3g8xRFwKl5CA=="}],"memo":""},"metadata":{"timestamp":"1744124191"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16jpf0puufcpcjkph5nxueec8etpcldz7zwgydq","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"InviteMember","args":["0","g1j39fhg29uehm7twwnhvnpz3ggrm6tprhq65t0t","owner"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"CFsKFp41n/SqLDj7V/Gjpz3usb9pjHlgsvHZBsFfGpsUBOY65LiqfTXL130ZHL0Le8NpdXdEDJj2i82+kaYsAA=="}],"memo":""},"metadata":{"timestamp":"1744124764"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1j39fhg29uehm7twwnhvnpz3ggrm6tprhq65t0t","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":["lulz"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"+L2WHlXHTSLsPU9V9jrlZ9W61nf2kIiPh5w0PFWSogrGNcGs08uRdWcqUX0bIpD4JuLaZM//y81G4tEVVjXQAQ=="}],"memo":""},"metadata":{"timestamp":"1744125041"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/leon/home","func":"UpdatePFP","args":["https://i.imgur.com/hgq1DEK.jpeg",""]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"pzW0mQvfY2e02Zg9u3cJDo3tDjYpLtGOvjMxdjED7c3oWYaBXuspMpELj6wKfrQHFaJEBj4aIYaS2pFaVCocCQ=="}],"memo":""},"metadata":{"timestamp":"1744139820"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/leon/home","func":"UpdatePFP","args":["https://i.imgur.com/Hvz7Iwl.jpeg",""]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"w0rYkIzVpj9YlEWgbwQG5bGKP5AJn7Bm9yo6WUzBS+CMmEapPwlCzt/Eq/AsXh2AieQ7Glwz1rBBfFB1AzPrBA=="}],"memo":""},"metadata":{"timestamp":"1744140282"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/docs/events","func":"Emit","args":["Wow!"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Lf7dMm1vOkoSIvqOkx3ZTv4cH+maPX7KLqCWqBi3O2kc7Uvp6ZYfZIZDbN09hZfG3T4ah9tKrs71FgXU+fQ5Dw=="}],"memo":""},"metadata":{"timestamp":"1744193597"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1jlpnhgldj7lnz9s525k2vk64xdtnhyj8xchpcw","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"K6HUFdGEZHYrsT8FFqugEfnwLYY5EKp9VVVXCJMmXhciio8PGYYNCRzrTCCqBqIVo/y31LIwsSi7lK7x7TpmAg=="}],"memo":""},"metadata":{"timestamp":"1744198494"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jlpnhgldj7lnz9s525k2vk64xdtnhyj8xchpcw","to_address":"g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v","amount":"1000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"352230ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"+pEzfnS5WB/Vo/cef/XziLz0dM0HlcvpV01J+h8WKXVXqwKQnEbRcW2TJKgyyOLzBFwu0EAk0tUMSTSMyq0pBQ=="}],"memo":""},"metadata":{"timestamp":"1744198524"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jlpnhgldj7lnz9s525k2vk64xdtnhyj8xchpcw","to_address":"g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v","amount":"1000000ugnot"}],"fee":{"gas_wanted":"51664","gas_fee":"108ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"NpY6zBbt+ilJqiSiZ5SQqOID6wGfo+xj8TBp3GbkdafjhfxBJr1YgNWvYjMWfmW7tJMXCXFEotv/5y2+CxRUDQ=="}],"memo":""},"metadata":{"timestamp":"1744198549"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"XzGVcHaml1CymQwLxv3pL2GhByaeOLpLNGLUH0dPrNObuUJ6Pd3aDb/QmYI0aEXsvvtxGzUDg/30p6jIGGZ6DQ=="}],"memo":""},"metadata":{"timestamp":"1744199036"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v","package":{"name":"hello","path":"gno.land/r/shjang/hello","files":[{"name":"package.gno","body":"package hello\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"7kZ2UVMsL72zXty7gW7NwJ0f5xyF0rRCAisnxfZguF1V9AW1F0Q8KM6PITzk4kY/yicO4S4Ly2r+ReA6gyARDg=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1744199117"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v","package":{"name":"hello","path":"gno.land/r/g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v/hello","files":[{"name":"package.gno","body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"2245340","gas_fee":"4678ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"fgqvPbyYt+HGE+IpiOGLAuSZp4MEqFz66Aw8ONrDy4lpsfErx+v+w9fS0TLLzY1LozQbscQqLpKfn6+BUmBnCA=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1744199936"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v","package":{"name":"foo20","path":"gno.land/r/g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v/foo20","files":[{"name":"package.gno","body":"// foo20 is a GRC20 token contract where all the grc20.Teller methods are\n// proxified with top-level functions. see also gno.land/r/demo/bar20.\npackage foo20\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/grc20reg\"\n)\n\nvar (\n\tToken, privateLedger = grc20.NewToken(\"shj\", \"SHJ\", 4)\n\tUserTeller           = Token.CallerTeller()\n\tOwnable              = ownable.NewWithAddress(\"g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v\") // @manfred\n)\n\nfunc init() {\n\tprivateLedger.Mint(Ownable.Owner(), 1_000_000*10_000) // @privateLedgeristrator (1M)\n\tgrc20reg.Register(Token.Getter(), \"\")\n}\n\nfunc TotalSupply() uint64 {\n\treturn UserTeller.TotalSupply()\n}\n\nfunc BalanceOf(owner std.Address) uint64 {\n\treturn UserTeller.BalanceOf(owner)\n}\n\nfunc Allowance(owner, spender std.Address) uint64 {\n\treturn UserTeller.Allowance(owner, spender)\n}\n\nfunc Transfer(to std.Address, amount uint64) {\n\tcheckErr(UserTeller.Transfer(to, amount))\n}\n\nfunc Approve(spender std.Address, amount uint64) {\n\tcheckErr(UserTeller.Approve(spender, amount))\n}\n\nfunc TransferFrom(from, to std.Address, amount uint64) {\n\tcheckErr(UserTeller.TransferFrom(from, to, amount))\n}\n\n// Faucet is distributing foo20 tokens without restriction (unsafe).\n// For a real token faucet, you should take care of setting limits are asking payment.\nfunc Faucet() {\n\tcaller := std.PreviousRealm().Address()\n\tamount := uint64(1_000 * 10_000) // 1k\n\tcheckErr(privateLedger.Mint(caller, amount))\n}\n\nfunc Mint(to std.Address, amount uint64) {\n\tOwnable.AssertCallerIsOwner()\n\tcheckErr(privateLedger.Mint(to, amount))\n}\n\nfunc Burn(from std.Address, amount uint64) {\n\tOwnable.AssertCallerIsOwner()\n\tcheckErr(privateLedger.Burn(from, amount))\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn Token.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := std.Address(parts[1])\n\t\tbalance := UserTeller.BalanceOf(owner)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc checkErr(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"20817585","gas_fee":"43370ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"MjH7MhWx+3Ci9YhtNp2e5WrxNtKcZxl+pSrgkiMntZoUhkwnTsPPFeKD6I3f3TGmqXxha8+5WsqhVKPCtKGhCg=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1744200057"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v","send":"","pkg_path":"gno.land/r/g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v/foo20","func":"Transfer","args":["g1jlpnhgldj7lnz9s525k2vk64xdtnhyj8xchpcw","10000"]}],"fee":{"gas_wanted":"54444","gas_fee":"114ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"40Y/2yKHRBPtc+ZHH7QZuw+MyIbRnKa3GzFX/YX3OeE2Hcu5ThCnqjDfzwo58uLS5upuXkuE0DvIvYHKSaZqCg=="}],"memo":""},"metadata":{"timestamp":"1744200203"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v","send":"","pkg_path":"gno.land/r/g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v/foo20","func":"Transfer","args":["g1jlpnhgldj7lnz9s525k2vk64xdtnhyj8xchpcw","10000"]}],"fee":{"gas_wanted":"54444","gas_fee":"114ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"40Y/2yKHRBPtc+ZHH7QZuw+MyIbRnKa3GzFX/YX3OeE2Hcu5ThCnqjDfzwo58uLS5upuXkuE0DvIvYHKSaZqCg=="}],"memo":""},"metadata":{"timestamp":"1744200273"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v","send":"","pkg_path":"gno.land/r/g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v/foo20","func":"Transfer","args":["g1jlpnhgldj7lnz9s525k2vk64xdtnhyj8xchpcw","10000"]}],"fee":{"gas_wanted":"9527391","gas_fee":"19849ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"/lkt42kPJ6L/zURND5KZ7eDn9IRQpN2Bszfe1b+D0mKHsL585mSqAjFzyNsOtqxnqB9i6FLbBzdD/LwMJpzBCg=="}],"memo":""},"metadata":{"timestamp":"1744200384"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1hdw3yjc6sqj6rp6m4s0dwhrw8u853u080qy0u3","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"G8eD96gp9pvkzhT09JIbreQeX+cLAC5gCay/G4/PwskMUB/9Zny5uA5jBWd5aoKZ6jXF1Su0bbx0KiuWEZvDAw=="}],"memo":""},"metadata":{"timestamp":"1744214700"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1njsjh74dkq5xsl6pkz43nez0ga38wytayp0y2y","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"6NH7XKdmmXQt8PO3PO9nzevMZePQMi53d0donwnc4cstj0kvJCPe+01gTr1z+4CIg34Fy/b42QJoCg5K+a9SAw=="}],"memo":""},"metadata":{"timestamp":"1744226338"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1938ape0hjs3d8vemwrg52rvwxy25l24jf4r64u","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ozEm14KMRjpiaezMej5dHIIZkd+17zH1vhe7rQrE005IjljKQwIlmJRraq10W21eufcZ06Wwuoth8RguS2LQDg=="}],"memo":""},"metadata":{"timestamp":"1744226419"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1938ape0hjs3d8vemwrg52rvwxy25l24jf4r64u","package":{"name":"blog","path":"gno.land/r/g1938ape0hjs3d8vemwrg52rvwxy25l24jf4r64u/counter","files":[{"name":"blog.gno","body":"package blog\n\nimport (\n\t\"std\"\n\t\"time\"\n)\n\n// Post represents a single blog entry.\ntype Post struct {\n\tTitle     string\n\tContent   string\n\tAuthor    std.Address\n\tCreatedAt time.Time\n}\n\n// Global list to store all posts.\nvar Posts []Post\n\n// AddPost appends a new post to the Posts list.\nfunc AddPost(title, content string) {\n\tnewPost := \u0026Post{\n\t\tTitle:   title,\n\t\tContent: content,\n\t\t// The author of the address is the previous realm, the realm that called this one\n\t\tAuthor:    std.PreviousRealm().Address(),\n\t\tCreatedAt: time.Now(),\n\t}\n\tPosts = append(Posts, *newPost)\n}\n\n// Render displays all posts in a readable format.\nfunc Render(_ string) string {\n\tvar result string\n\tif len(Posts) == 0 {\n\t\treturn \"No posts\"\n\t}\n\tfor _, post := range Posts {\n\t\tresult += \"Title: \" + post.Title + \"\\n\\n\"\n\t\tresult += \"Content: \" + post.Content + \"\\n\\n\"\n\t\tresult += \"Author: \" + post.Author.String() + \"\\n\\n\"\n\t\tresult += \"-------------------------\\n\"\n\t}\n\treturn result\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"80000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"4YkvBYwYSb1Rga0BJiozyJHudxG5FRHOY0gHrMFoFymIfiHBE972ntLXWKpRSZnoxXf/98cVOG/JdB/y7HHzDQ=="}],"memo":""},"metadata":{"timestamp":"1744226449"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1rpggzwfcz2kstgxk68psd4lsgfqhvppr63y8ag","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"+ZmDK1AQgop2JLjWc/1Q71doSlNxJYtrO8wL+SyTByyaXXjbgyoeVftaVj5aaJ1Vmud+ewY4sr/jJOngn4+YCQ=="}],"memo":""},"metadata":{"timestamp":"1744226610"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1whw4wzz78lp2udgz24gj63lq4jn2fdkumexe53","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"3763vn3sRSK+67G2yysAZ7e/vkM0JlVqhFGHH6BiBe5Fmhhc/RrBfeC6LA5pkEw0okGM7CjxnJmaZl3Dhg/6BQ=="}],"memo":""},"metadata":{"timestamp":"1744227258"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1whw4wzz78lp2udgz24gj63lq4jn2fdkumexe53","package":{"name":"blog","path":"gno.land/r/g1whw4wzz78lp2udgz24gj63lq4jn2fdkumexe53/blog","files":[{"name":"blog.gno","body":"package blog\n\nimport (\n\t\"std\"\n\t\"time\"\n)\n\n// Post represents a single blog entry.\ntype Post struct {\n\tTitle     string\n\tContent   string\n\tAuthor    std.Address\n\tCreatedAt time.Time\n}\n\n// Global list to store all posts.\nvar Posts []Post\n\n// AddPost appends a new post to the Posts list.\nfunc AddPost(title, content string) {\n\tnewPost := \u0026Post{\n\t\tTitle:   title,\n\t\tContent: content,\n\t\t// The author of the address is the previous realm, the realm that called this one\n\t\tAuthor:    std.PreviousRealm().Address(),\n\t\tCreatedAt: time.Now(),\n\t}\n\tPosts = append(Posts, *newPost)\n}\n\n// Render displays all posts in a readable format.\nfunc Render(_ string) string {\n\tvar result string\n\tif len(Posts) == 0 {\n\t\treturn \"No posts\"\n\t}\n\tfor _, post := range Posts {\n\t\tresult += \"Title: \" + post.Title + \"\\n\\n\"\n\t\tresult += \"Content: \" + post.Content + \"\\n\\n\"\n\t\tresult += \"Author: \" + post.Author.String() + \"\\n\\n\"\n\t\tresult += \"-------------------------\\n\"\n\t}\n\treturn result\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"80000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"idYm2yInLzSTsGFx33zpAmaF5kqGgIikPb5QdDW2GwQLnRUlg90YEZlygdL+mMMBRJxVOUNByh+LvDuwfZMrCw=="}],"memo":""},"metadata":{"timestamp":"1744227293"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1dtuj65mgja87gh0c45pd3rt4cah0kkw9lzld4y","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"iRJ/0adxvj/+Ei+g2oDGUAjpX8Zkh3X1GBZyUU7sR768xwHFGAHNwLAwgHKRbcHCMt/KkJhf15GucU8EbCU0Dw=="}],"memo":""},"metadata":{"timestamp":"1744263069"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1mywdth2kdgn08t9dygk43rp5dn9jkavs9eu3xs","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"mlKLfffVlEBcrEsCmjLIEkf/l5A3GD3HyLfvPHsiM3lrBWwfhM8YKRxwk7qeQbxYGP2yvTPzjUdZiujRYEDNBg=="}],"memo":""},"metadata":{"timestamp":"1744265969"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1mywdth2kdgn08t9dygk43rp5dn9jkavs9eu3xs","package":{"name":"blog","path":"gno.land/r/g1mywdth2kdgn08t9dygk43rp5dn9jkavs9eu3xs/counter","files":[{"name":"blog.gno","body":"package blog\n\nimport (\n\t\"std\"\n\t\"time\"\n)\n\n// Post represents a single blog entry.\ntype Post struct {\n\tTitle     string\n\tContent   string\n\tAuthor    std.Address\n\tCreatedAt time.Time\n}\n\n// Global list to store all posts.\nvar Posts []Post\n\n// AddPost appends a new post to the Posts list.\nfunc AddPost(title, content string) {\n\tnewPost := \u0026Post{\n\t\tTitle:   title,\n\t\tContent: content,\n\t\t// The author of the address is the previous realm, the realm that called this one\n\t\tAuthor:    std.PreviousRealm().Address(),\n\t\tCreatedAt: time.Now(),\n\t}\n\tPosts = append(Posts, *newPost)\n}\n\n// Render displays all posts in a readable format.\nfunc Render(_ string) string {\n\tvar result string\n\tif len(Posts) == 0 {\n\t\treturn \"No posts\"\n\t}\n\tfor _, post := range Posts {\n\t\tresult += \"Title: \" + post.Title + \"\\n\\n\"\n\t\tresult += \"Content: \" + post.Content + \"\\n\\n\"\n\t\tresult += \"Author: \" + post.Author.String() + \"\\n\\n\"\n\t\tresult += \"-------------------------\\n\"\n\t}\n\treturn result\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"100000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"973zK2GkmTkSt79OWrKsH/iukfebJ5eLKIjO40uvODGb1DoJvcbMXVFemzKuAF0xrT9IRynPJ2CebNQLMXbdDQ=="}],"memo":""},"metadata":{"timestamp":"1744266105"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v","package":{"name":"foo721","path":"gno.land/r/g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v/foo721","files":[{"name":"package.gno","body":"package foo721\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/grc/grc721\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tadmin std.Address = \"g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v\"\n\tfoo               = grc721.NewBasicNFT(\"ShjNFT\", \"SNFT\")\n)\n\nfunc init() {\n\tmintNNFT(admin, 10)                                     // @administrator (10)\n\tmintNNFT(\"g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v\", 5) // @hariom (5)\n}\n\nfunc mintNNFT(owner std.Address, n uint64) {\n\tcount := foo.TokenCount()\n\tfor i := count; i \u003c count+n; i++ {\n\t\ttid := grc721.TokenID(ufmt.Sprintf(\"%d\", i))\n\t\tfoo.Mint(owner, tid)\n\t}\n}\n\n// Getters\n\nfunc BalanceOf(user std.Address) uint64 {\n\tbalance, err := foo.BalanceOf(user)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc OwnerOf(tid grc721.TokenID) std.Address {\n\towner, err := foo.OwnerOf(tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn owner\n}\n\nfunc IsApprovedForAll(owner, user std.Address) bool {\n\treturn foo.IsApprovedForAll(owner, user)\n}\n\nfunc GetApproved(tid grc721.TokenID) std.Address {\n\taddr, err := foo.GetApproved(tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn addr\n}\n\n// Setters\n\nfunc Approve(user std.Address, tid grc721.TokenID) {\n\terr := foo.Approve(user, tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc SetApprovalForAll(user std.Address, approved bool) {\n\terr := foo.SetApprovalForAll(user, approved)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(from, to std.Address, tid grc721.TokenID) {\n\terr := foo.TransferFrom(from, to, tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\n// Admin\n\nfunc Mint(to std.Address, tid grc721.TokenID) {\n\tcaller := std.PreviousRealm().Address()\n\tassertIsAdmin(caller)\n\terr := foo.Mint(to, tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(tid grc721.TokenID) {\n\tcaller := std.PreviousRealm().Address()\n\tassertIsAdmin(caller)\n\terr := foo.Burn(tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\n// Render\n\nfunc Render(path string) string {\n\tswitch {\n\tcase path == \"\":\n\t\treturn foo.RenderHome()\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\n// Util\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"jD3q3y7No/xJ1w6rb2vzeT8ynK9XiBpNahgGsUkuJr5NebP7Xk/n2Dt78/JfYjbOQUJ9RY4s24jQrPxoZqwyBw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1744268075"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v","package":{"name":"foo721","path":"gno.land/r/g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v/foo721","files":[{"name":"package.gno","body":"package foo721\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/grc/grc721\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tadmin std.Address = \"g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v\"\n\tfoo               = grc721.NewBasicNFT(\"ShjNFT\", \"SNFT\")\n)\n\nfunc init() {\n\tmintNNFT(admin, 10)                                     // @administrator (10)\n\tmintNNFT(\"g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v\", 5) // @hariom (5)\n}\n\nfunc mintNNFT(owner std.Address, n uint64) {\n\tcount := foo.TokenCount()\n\tfor i := count; i \u003c count+n; i++ {\n\t\ttid := grc721.TokenID(ufmt.Sprintf(\"%d\", i))\n\t\tfoo.Mint(owner, tid)\n\t}\n}\n\n// Getters\n\nfunc BalanceOf(user std.Address) uint64 {\n\tbalance, err := foo.BalanceOf(user)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc OwnerOf(tid grc721.TokenID) std.Address {\n\towner, err := foo.OwnerOf(tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn owner\n}\n\nfunc IsApprovedForAll(owner, user std.Address) bool {\n\treturn foo.IsApprovedForAll(owner, user)\n}\n\nfunc GetApproved(tid grc721.TokenID) std.Address {\n\taddr, err := foo.GetApproved(tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn addr\n}\n\n// Setters\n\nfunc Approve(user std.Address, tid grc721.TokenID) {\n\terr := foo.Approve(user, tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc SetApprovalForAll(user std.Address, approved bool) {\n\terr := foo.SetApprovalForAll(user, approved)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(from, to std.Address, tid grc721.TokenID) {\n\terr := foo.TransferFrom(from, to, tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\n// Admin\n\nfunc Mint(to std.Address, tid grc721.TokenID) {\n\tcaller := std.PreviousRealm().Address()\n\tassertIsAdmin(caller)\n\terr := foo.Mint(to, tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(tid grc721.TokenID) {\n\tcaller := std.PreviousRealm().Address()\n\tassertIsAdmin(caller)\n\terr := foo.Burn(tid)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\n// Render\n\nfunc Render(path string) string {\n\tswitch {\n\tcase path == \"\":\n\t\treturn foo.RenderHome()\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\n// Util\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"83722718","gas_fee":"235959ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"w3jZjnnx1hkRgA/fvw/T/9eW/qhj5DhKgsNJRx48NzwtXr3JOFHVxri/Dy5BmM0TG+WPlLIDq57Ltj1c13q4Bg=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1744268101"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","amount":"1000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"100000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"aQY/GIpAMYrZZUCZQ0uwtHaeaZ7+q6nfuYhWE1S77CZvYIJv4hPfvMXOLtCflGJCxeU0nudCzs51lkkpJX7EBA=="}],"memo":""},"metadata":{"timestamp":"1744268322"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Transfer","args":["g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","1"]}],"fee":{"gas_wanted":"65330","gas_fee":"21130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"j33m6irgcl6Xh45eMtlTuSet47nVjUD0/K3hfYeVnoFKZyYkF60iY5UXeb283l1dJDImTvinhMBFBBB5g/NEAQ=="}],"memo":""},"metadata":{"timestamp":"1744269081"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Transfer","args":["g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","1"]}],"fee":{"gas_wanted":"65330","gas_fee":"5000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"0p87R5dvJZJSve+RJf/GnTzVvarzprF3LzrD7wSsMi6Wzjy1lp3ARS/yWzJvCYRT7ve3ZyGXWdEC+mx3JRDCBg=="}],"memo":""},"metadata":{"timestamp":"1744269201"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v","package":{"name":"foo201","path":"gno.land/r/g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v/foo201","files":[{"name":"package.gno","body":"// foo20 is a GRC20 token contract where all the grc20.Teller methods are\n// proxified with top-level functions. see also gno.land/r/demo/bar20.\npackage foo201\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/grc20reg\"\n)\n\nvar (\n\tToken, privateLedger = grc20.NewToken(\"Foo1\", \"FOO1\", 6)\n\tUserTeller           = Token.CallerTeller()\n\tOwnable              = ownable.NewWithAddress(\"g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v\") // @manfred\n)\n\nfunc init() {\n\tprivateLedger.Mint(Ownable.Owner(), 1_000_000*10_000) // @privateLedgeristrator (1M)\n\tgrc20reg.Register(Token.Getter(), \"\")\n}\n\nfunc TotalSupply() uint64 {\n\treturn UserTeller.TotalSupply()\n}\n\nfunc BalanceOf(owner std.Address) uint64 {\n\treturn UserTeller.BalanceOf(owner)\n}\n\nfunc Allowance(owner, spender std.Address) uint64 {\n\treturn UserTeller.Allowance(owner, spender)\n}\n\nfunc Transfer(to std.Address, amount uint64) {\n\tcheckErr(UserTeller.Transfer(to, amount))\n}\n\nfunc Approve(spender std.Address, amount uint64) {\n\tcheckErr(UserTeller.Approve(spender, amount))\n}\n\nfunc TransferFrom(from, to std.Address, amount uint64) {\n\tcheckErr(UserTeller.TransferFrom(from, to, amount))\n}\n\n// Faucet is distributing foo20 tokens without restriction (unsafe).\n// For a real token faucet, you should take care of setting limits are asking payment.\nfunc Faucet() {\n\tcaller := std.PreviousRealm().Address()\n\tamount := uint64(1_000 * 10_000) // 1k\n\tcheckErr(privateLedger.Mint(caller, amount))\n}\n\nfunc Mint(to std.Address, amount uint64) {\n\tOwnable.AssertCallerIsOwner()\n\tcheckErr(privateLedger.Mint(to, amount))\n}\n\nfunc Burn(from std.Address, amount uint64) {\n\tOwnable.AssertCallerIsOwner()\n\tcheckErr(privateLedger.Burn(from, amount))\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn Token.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := std.Address(parts[1])\n\t\tbalance := UserTeller.BalanceOf(owner)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc checkErr(err error) {\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}"}]},"deposit":""}],"fee":{"gas_wanted":"20944564","gas_fee":"59029ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"34/EPWrX+BmZ+m/IzJb/lxvq4955hctyx2DQlJ9vjvNV3LKJGL+Da8r39Q62eoecXmifIU6zfRlmoyt0blCuAQ=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1744269553"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Transfer","args":["g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","1"]}],"fee":{"gas_wanted":"10142014","gas_fee":"21130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"LNEiBVNYm+T6eZDP6BuKwF9idwB85KatkXyB3VOpcm7opccrzVIGMqF+nNn16gK8BwhiaxfiVia/gzHlTnwfAg=="}],"memo":""},"metadata":{"timestamp":"1744269820"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","amount":"1000000ugnot"}],"fee":{"gas_wanted":"59959","gas_fee":"125ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"eH6f9PHG0ovZyrm/CvS6ad1JumRg8QNEZfUGYhkszIOOQiAbF2UP8eYqyfwupzXepE+OfukeD44PRiSOv2ReCQ=="}],"memo":""},"metadata":{"timestamp":"1744269855"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Transfer","args":["g193wtm0r2gu5w4tfrwn92nsunnuya9jxyz03dsu","1"]}],"fee":{"gas_wanted":"10142130","gas_fee":"21130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"BG1mKo0qRwEoEiJbZi60WCNT1dwes/NeCkoKo3s7NsON+m/9wJah1haDOTPxNdOoPjcLp1Aqk7ohi5vXY0MgDA=="}],"memo":""},"metadata":{"timestamp":"1744269890"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v","send":"","pkg_path":"gno.land/r/g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v/foo721","func":"TransferFrom","args":["g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v","g1jlpnhgldj7lnz9s525k2vk64xdtnhyj8xchpcw","0"]}],"fee":{"gas_wanted":"13461775","gas_fee":"28046ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"RHjxrnDqLa5gOLEfLK2nZLaQyj76GaIw3V7nIHqNvatNfmd3F4KTBxUphD86lIPhiy6lhZgkJpCnmj8lPZMqBg=="}],"memo":""},"metadata":{"timestamp":"1744270026"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g103j98q25ux30yn7cznt3swdlk3xkg09qe34z48","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"G9dJfBVxW5+lw1TLeHQjGT9glv0Vpdnh/3WHrC9enOdyLPDBmP14KSZNPmExwGqimebWgHOy22viobArsOLtDw=="}],"memo":""},"metadata":{"timestamp":"1744283372"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1asmyqqnvx24tqhvagymv8pvwgmf2c0l05prp7w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"RMAcBIIkhc3Kh/TiNH1AEDzKuGWJADZPv8gZ9FiWANyr+OCdEtRt46NPjmcc143K5zegNE2mw0Wrzfv7hQEvCQ=="}],"memo":""},"metadata":{"timestamp":"1744283855"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1kagq9l2j6w5tadd6fq6eyrnydktqnzkkmc35jz","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"EpYttpSM3ZtSUjlFFIQbnM7YCgcYNv4WPg48X6jWNfCZFIwcU7lWM34D/SuWBsx6bOeFaZe3ITuTSeHbDi+AAg=="}],"memo":""},"metadata":{"timestamp":"1744291290"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","package":{"name":"renderproxydemo","path":"gno.land/r/connecttest/renderproxydemo","files":[{"name":"package.gno","body":"package latest\n\nvar (\n  actualRealmPath string\n)\n\n// ProxyRealmPath returns a path to a target realm which this proxy points to.\nfunc ProxyRealmPath() string {\n  return actualRealmPath\n}\n\n// SetTargetRealm sets a new realm to which proxy is pointing to.\nfunc SetTargetRealm(newPath string) {\n  actualRealmPath = newPath\n}\n\nfunc Render(path string) string {\n  return \"Hello from proxy!\"\n}\n\nfunc ProxyFunc() string {\n  return \"This func belongs to a proxy\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"yHNEtfnWymEPECiOB+IPBDsNq6OlQn1+yNYcGi2A4eBD0/O0hyltB5rmygUzkB3YJpNdRkewCRGsrTyoRYPhDg=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1744297031"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["monthly-dev-15","The More You Gno 15: Getting Ready for the Mainnet Beta","\n\nAs we gear up for the launch of the Mainnet Beta, this edition of _The More You Gno_ takes a look at the progress we’ve made, what’s currently in the works, and what’s coming next. From critical governance updates to improvements in storage and gas mechanisms, we’re laying the groundwork for a stable and feature-rich mainnet. Let’s dive in.\n\n## Mainnet Beta Progress\n\nThere are several key components that we need to complete before we launch the mainnet beta.\n\nDone:\n* [Token lock \u0026 params keeper](https://github.com/gnolang/gno/pull/3176) allows us to lock token transfers, except for paying gas fees to add a package or call a contract. The restriction will eventually be unlocked through a GovDAO vote.\n* [GovDAO v3](https://github.com/gnolang/gno/issues/3078): new iteration of the governance realms that introduces the multi-tiered membership.\n\nIn review:\n* [Garbage collector](https://github.com/gnolang/gno/pull/3789): capable of synchronous garbage collection, greatly reducing memory allocation and costs.\n* [Realm ownership spec](https://github.com/gnolang/gno/pull/4028): a critical piece that will dictate how realms interact with one another.\n* [Gas storage fee mechanism](https://github.com/gnolang/gno/issues/3418): a system to manage storage fees for transactions by locking GNOT proportional to additional storage usage. This ensures fair accounting for storage costs and provides incentives for efficient storage use.\n* [Balance checker and genesis distribution](https://github.com/gnolang/gno/pull/3899): a realm and interface enabling you to quickly check any account balance.\n* [Drip faucet](https://github.com/gnolang/gno/pull/3808): since tokens initially can't be purchased or traded, the faucet will enable you to cover gas fees while using gno.land.\n* [Gas fee distribution](https://github.com/gnolang/gno/pull/3956): the cornerstone of the transaction fee logic, routing fees to the collector addresses.\n\nIn development:\n* [std refactor](https://github.com/gnolang/gno/issues/3874): the division into packages should help to reduce the scope of each package, helping us create modular packages.\n\n## Test6 Preview\n\nTest6 has been delayed because we wanted to launch it with both the token lock and GovDAO v3 components, so we could test them together and figure out how they could break. The new testnet will also introduce some new components, like the username registry and the valoper (validator operator) registry; prospective validators will be able to register a public profile before getting nominated to become a network validator.\n\nWe aim to launch Test6 next week, so stay tuned!\n\n## Events and Meetups\n\n### Introduction to gno.land @ Belgrade\n\nIf you're in the Belgrade area, join us for an [in-person workshop](https://lu.ma/gyesps56) on April 10, where we’ll explore Gno, and give you a solid understanding of gno.land and how it differs from other smart contract platforms.","2025-04-10T00:00:00Z","Kouteki","gnoland,ecosystem,updates,gnovm"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"U059uL53dQ6NqggguT7gFHbE4qabEzt9wf1DKCorNuMKeFwU1IeTxMKzYUCFyExHaidnOLbSwxcjw2mZhJVBAg=="}],"memo":"Posted from gnoblog-cli"},"metadata":{"timestamp":"1744297036"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","package":{"name":"renderproxydemo","path":"gno.land/r/g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd/renderproxydemo","files":[{"name":"package.gno","body":"package renderproxydemo\n\nvar (\n  actualRealmPath string\n)\n\n// ProxyRealmPath returns a path to a target realm which this proxy points to.\nfunc ProxyRealmPath() string {\n  return actualRealmPath\n}\n\n// SetTargetRealm sets a new realm to which proxy is pointing to.\nfunc SetTargetRealm(newPath string) {\n  actualRealmPath = newPath\n}\n\nfunc Render(path string) string {\n  return \"Hello from proxy!\"\n}\n\nfunc ProxyFunc() string {\n  return \"This func belongs to a proxy\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"2327686","gas_fee":"239329ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"4EdF2QuvA/4q2ZgV5NHsrEWpiR2dLc/C8+AyyEVxth5pShL2Z+BnOJO02r1I3IMBkrvXKnxMuxcV7JbvlEBbAQ=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1744297141"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","package":{"name":"v1","path":"gno.land/r/g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd/renderproxydemo/v1","files":[{"name":"package.gno","body":"package v1\n\nfunc Render(path string) string {\n\treturn \"Hello from v1!\"\n}\n\n// Factorial func belongs to a target realm.\nfunc Factorial(n uint64) (result uint64) {\n\tif n \u003e 0 {\n\t\tresult = n * Factorial(n-1)\n\t\treturn result\n\t}\n\n\treturn 1\n}"}]},"deposit":""}],"fee":{"gas_wanted":"2295798","gas_fee":"236051ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"n6ouUddoGUn7Q4D5baRVe6lyCNmpSJCOvRffNzzrSv+pR801/qZPcYKirkLJtQDIs0cxXZflkhAen/kGQZpXBg=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1744297468"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/docs/minisocial/v1","func":"CreatePost","args":["Hello from Belgrade!"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kqGs88hRotHfWsPLuocPXDbzHnu7kXWRMqSaasyJyic4xgZAzAEP6q4cBiH87YA6LEKmTQWU3JNnCWyvbZaDBA=="}],"memo":""},"metadata":{"timestamp":"1744299406"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","package":{"name":"latest","path":"gno.land/r/g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd/renderproxydemo/latest","files":[{"name":"package.gno","body":"package latest\n\nvar actualRealmPath = \"gno.land/r/g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd/renderproxydemo/v1\"\n\n// ProxyRealmPath returns a path to a target realm which this proxy points to.\nfunc ProxyRealmPath() string {\n\treturn actualRealmPath\n}\n\n// SetTargetRealm sets a new realm to which proxy is pointing to.\nfunc SetTargetRealm(newPath string) {\n\tactualRealmPath = newPath\n}\n\nfunc Render(path string) string {\n\treturn \"Hello from proxy!\"\n}\n\nfunc ProxyFunc() string {\n\treturn \"This func belongs to a proxy\"\n}"}]},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"6EBVmIrMx4O1xuKgXwtFcVUhVuQjsotkT1tPs/L9u9tb9geo7zEt69MNyvAFBkbPJLPNB/Ze3HynIpxsM3kiCg=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1744300080"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"127850ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"WLRM7+sf21hVG6IJMOzG7WlbRMOpWR/scYX60lpqranPcQn45cp5f4KlU6ZDHeF9OguE/cCJxxUlD6P6OqNXCQ=="}],"memo":""},"metadata":{"timestamp":"1744301241"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/docs/minisocial/v1","func":"CreatePost","args":["Hey, from the Belgrade meetup in Nova Iskra!"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"B2Q+tAecqIBsIGekzIE+HLpuOrnmwY2bh200/Pj+cAAiyDNn75pFv6aHLvx+WrZMDHsJQh7ZqXAgeqg5bguYCg=="}],"memo":""},"metadata":{"timestamp":"1744306138"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1urt7pdmwg2m6z3rsgu4e8peppm4027fvpwkmj8","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":[""]}],"fee":{"gas_wanted":"12000000","gas_fee":"75610ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"L49sfz7MtZXjR74xN+XtZrcO6cXKFoG7ERbiqk6heuo7KPHID6f6A0kN4EPXYPk7VZB465jvjQCKFIos8VCoDw=="}],"memo":""},"metadata":{"timestamp":"1744306243"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1urt7pdmwg2m6z3rsgu4e8peppm4027fvpwkmj8","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["leoninbelgrade123"]}],"fee":{"gas_wanted":"14643087","gas_fee":"92264ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"JkJ0NzefsSDGsRo0aXq1hKZeu0Iw7Z00xp3Z/7AX610t8/Rjbs5OCcE+XycTfGSWH6/sp6kVGp/SyNon4m9cAA=="}],"memo":""},"metadata":{"timestamp":"1744306379"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1xxzjcgcq3y3hh3s8sa36xzjhy22y3elrxx5l9v","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xzVtJ/afAeWjDuEVDFrILPcelApn2nEhX8cJHvJQXFLXwA7gL4mDqGiRKdTDa+IuX/qLeT6xUG9j5Ug3vYFqDQ=="}],"memo":""},"metadata":{"timestamp":"1744315127"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1xxzjcgcq3y3hh3s8sa36xzjhy22y3elrxx5l9v","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["awnion000"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2231690ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"B7CLMVhxJqN//wo8hN7Tl1aRE4gxbwTjw0y5JmqM2Ntk9+cwXfsWykSGbxdQduggi3ZMMTz8vU5TUCFDO1DDDw=="}],"memo":""},"metadata":{"timestamp":"1744315173"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xxzjcgcq3y3hh3s8sa36xzjhy22y3elrxx5l9v","package":{"name":"home","path":"gno.land/r/awnion000/home","files":[{"name":"package.gno","body":"package home\n\nfunc Render(_ string) string {\n  return \"# 🦀☕️🐳\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"3374122","gas_fee":"627500ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"IbCbPD1qKHwuQ5JzLPG8jQ1vTGD8L02tccxVzIZ5D+jKcyIzq8rZcs4dy/cEjrWWYFPG8uVWMaMqAjXD3UuBCQ=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1744315771"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["testnytest"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Z4QTRgIoX84C0I+mhRXy5BQDA/1Sg743dTnAy4Hp9VGZ5Eo+7jLo/IOhJD4tZ/Bwj4Syuu+h03oqTlO+KQ0GDg=="}],"memo":""},"metadata":{"timestamp":"1744336778"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["test551_551"]}],"fee":{"gas_wanted":"13922324","gas_fee":"29005ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"0bKA2ZceOBniuJkR5wSOupUph5BgIME7T8g7bTTzgyfnHBkqlAzT50OM0xyVbtY99upolBnLZ17J+VrSnZQHAQ=="}],"memo":""},"metadata":{"timestamp":"1744337275"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["tester"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"rO4fPLZny1lOWZ4pVz1Nl5sraH2jPbdpEnl2rEEQXTBpSmI2dNq5vCt0LDVMUlhggxuNcuFR3d8Bgs5UMD5tDw=="}],"memo":""},"metadata":{"timestamp":"1744351456"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1urt7pdmwg2m6z3rsgu4e8peppm4027fvpwkmj8","send":"","pkg_path":"gno.land/r/demo/boards","func":"CreateThread","args":["2","Leon's thread","Hey all!"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"vU/ueMvJSMxSxfks2YHJPpPsX28rUBl7+ya1Wa0FodpZqKas0E8MOv6pdrhqy02/oPmXq1w/ZoLUz8+xcV8/Dw=="}],"memo":""},"metadata":{"timestamp":"1744380847"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g127l4gkhk0emwsx5tmxe96sp86c05h8vg5tufzq","send":"","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["maxwell999"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"oXB8CD0J+rL1JYo+bU8NOsPdADQnSOkfTDmKNFT2QFB7pe8wAmOJWJphtVyeoRtQj1tyMtVQsUSenUOn5/kpAA=="}],"memo":""},"metadata":{"timestamp":"1744507033"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g127l4gkhk0emwsx5tmxe96sp86c05h8vg5tufzq","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["maxwell999"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"othQ8qZy/juOCy/EprXfe7XoNg+T653fFIh0R/c/bN3V/9Fv4jvfXir53BhE/A17EuYru5VluSK9gOqNX3yKAg=="}],"memo":""},"metadata":{"timestamp":"1744507244"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g16qa3v5u8m7x55dx8l0xacqwdecxzjp4thdpdhw","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"8qv4/pV3r+IkGlWnv8BJGTKrFmml3YfFvfhQ+g8cdGhVsHlwVuuMqCqPrzOYAKwo8TWqMRq4dgxOPYR0QStfAA=="}],"memo":""},"metadata":{"timestamp":"1744507697"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16qa3v5u8m7x55dx8l0xacqwdecxzjp4thdpdhw","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":[""]}],"fee":{"gas_wanted":"12000000","gas_fee":"2231690ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Y8SAjzmPQxKdn1rSSahrcfJL4eN3ZnxtogDWMnHy4JfMI81/CfNBTpQe97NU3ffM+FhbhR91C6wdjsIV94esCA=="}],"memo":""},"metadata":{"timestamp":"1744508290"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16qa3v5u8m7x55dx8l0xacqwdecxzjp4thdpdhw","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["test_910"]}],"fee":{"gas_wanted":"13715319","gas_fee":"2550696ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"DSXue5tVD6DU870OBq2sZQUKT6nRKcbIHvAJHFXn8aioPP3bpoKsnlkAW9AGR+yKJlQ1ihhzw5Ss5okj7Xg8Cw=="}],"memo":""},"metadata":{"timestamp":"1744508466"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"","pkg_path":"gno.land/r/gnoswap/v1/position","func":"Mint","args":["gno.land/r/gnoswap/v1/gns","gno.land/r/gnoswap/v1/test_token/usdc","3000","-1080","960","23451000000","26040018069","23333745000","25909817979","7282571140","g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","g1ffzxha57dh0qgv9ma5v393ur0zexfvp6lsjpae"]},{"@type":"/vm.m_call","caller":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","send":"","pkg_path":"gno.land/r/gnoswap/v1/gnft","func":"SetTokenURILast","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"yRMNrLHwGgem2JO4doziv/4nApghnNmXafiTVloDg9jXIUHWVNywvQDgGQ+NHAeaRIjkrIphjcUA7CEr4gEwCQ=="}],"memo":""},"metadata":{"timestamp":"1744518484"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1kkhrcr7rnay67zsynmrrxmwrlfr7yfsuu669wk","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":[""]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"yYoFsPcVm9Fn0z3N/JgmDtLPQb/e4sppImceHlqymzaC96LjEsQrgjpDjkzLHGuF9vGGGNGhoXWZZOm05Ps1DA=="}],"memo":""},"metadata":{"timestamp":"1744566559"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1kkhrcr7rnay67zsynmrrxmwrlfr7yfsuu669wk","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["deepre123"]}],"fee":{"gas_wanted":"13917970","gas_fee":"28996ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Od3JqoiGx4Cz+5OPpHnP4X9alGNi3PjFhLMYzPE251o4muTlxObcmH1ly5frfgUWPCaCVfD+udr6JiHSf1Y9Dg=="}],"memo":""},"metadata":{"timestamp":"1744567087"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ngywvql2ql7t8uzl63w60eqcejkwg4rm4lxdw9","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["Mandoue344"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"BHxMDb2AP5c1gE9a9Izo/2/NtICq9XoKROWr2sdbeUgIpfeixXqniCJCo055sRmccdOBpde+aYsbmlrHDhtuAQ=="}],"memo":""},"metadata":{"timestamp":"1744567238"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ngywvql2ql7t8uzl63w60eqcejkwg4rm4lxdw9","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["mandook456"]}],"fee":{"gas_wanted":"14054079","gas_fee":"29280ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"2ulDm6rQyKR9Etg9V0tDD5x6TU0uSKLPHXgtTdnZ13gGhfqTuCacZu4kuNFpB3pdjXLvBsDj6ol/KwZP0URIDA=="}],"memo":""},"metadata":{"timestamp":"1744567489"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1j3ggnsjh6rzqpwh970l3wpywnavahvyyzr4mc6","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["neestra999"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"UH+iPkqdC/nsB3/GVard0mh+ghRVfbDEoTzlWa0KyfWTj6002uCwQ5Rwfz97x6JAsB6I6GpScIY64R5J72ElCg=="}],"memo":""},"metadata":{"timestamp":"1744567555"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18djgscernafce2ak57jhz4ep2u4jx0ckykjuz7","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["botto000"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ybkP/X1Hl8GTIk/eI0Hh547eUk9XZ5k5Hw46Blt9toa7k9+VH2WMcU2h8OkJhkXJg/nqP8Ia//HmYmzWLvwQCg=="}],"memo":""},"metadata":{"timestamp":"1744567690"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g16znvp6wxupkkds8mmmtxhvmdly08xpa4rqagp3","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"q90mjxETzuKiJbeb6y1fAyA9ms1fSV76jyrfZCceG7FQSChdYXRksAmeB5LaaBHCQLnVtM1O+cILfcfvULZZCA=="}],"memo":""},"metadata":{"timestamp":"1744577406"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g16znvp6wxupkkds8mmmtxhvmdly08xpa4rqagp3","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["g1foobar123"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"aScJTBXpPNxr5rY1QH6+HXMNB6WhmX2kvNbpIo6OI/fbS/b6rCivxvoh3Axv/XKoKd+f/Hb6q2wMRWJWY5YpCA=="}],"memo":""},"metadata":{"timestamp":"1744577592"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1m6y3zt3cu8rka86cczw4vtcp7fvu4z46tj0wqj","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"U2RnJRQ8p6s0/I0Fzrea8qyHyu8n46KkQ2YswYEw+m7FW7qejeaXVQa775KcZzCmT2gtCharZmaRRDERpjlcAQ=="}],"memo":""},"metadata":{"timestamp":"1744591384"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1m6y3zt3cu8rka86cczw4vtcp7fvu4z46tj0wqj","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["test_91112"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2231690ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"WCUcWpNu61FrFQLslph74RSOK3BS0r6HJMA3OJNLahWDlwtJNrrVtKzWskCK5llQWlztcgcmdKj1WmDQYlsGDQ=="}],"memo":""},"metadata":{"timestamp":"1744591429"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1z40f70cwczka9zuwhar0agp8yhp877nsc7zmvt","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"OhNxQixTrkngC4cCpkGucweNQd8G2j/xdzoki34ND3pO/3syNODfethqQKDYxMWjxD8PRT13jt2D8yiw6o6tCw=="}],"memo":""},"metadata":{"timestamp":"1744591514"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1z40f70cwczka9zuwhar0agp8yhp877nsc7zmvt","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":[""]}],"fee":{"gas_wanted":"12000000","gas_fee":"2231690ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"SJQdCd3Glzm79LE0YS8QnKMx7y7O1mBOiDrF/fr8w2g0aBYpnWhJn53Iz8uu7i8uNx/9SvNttuEIV+WehrrHCw=="}],"memo":""},"metadata":{"timestamp":"1744591544"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15wmukt79xymnnu6c4de32trnufudqum60yrxu8","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"sM35yi4kFtkUqC0A01xD7G+PXo443lwubtud3r3rfJxSdneO9ohm2P+A4+pJgt5RyVTaHNfL5gXLOvp0u6IeBQ=="}],"memo":""},"metadata":{"timestamp":"1744608181"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15wmukt79xymnnu6c4de32trnufudqum60yrxu8","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"sM35yi4kFtkUqC0A01xD7G+PXo443lwubtud3r3rfJxSdneO9ohm2P+A4+pJgt5RyVTaHNfL5gXLOvp0u6IeBQ=="}],"memo":""},"metadata":{"timestamp":"1744608312"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15wmukt79xymnnu6c4de32trnufudqum60yrxu8","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"sM35yi4kFtkUqC0A01xD7G+PXo443lwubtud3r3rfJxSdneO9ohm2P+A4+pJgt5RyVTaHNfL5gXLOvp0u6IeBQ=="}],"memo":""},"metadata":{"timestamp":"1744608775"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15wmukt79xymnnu6c4de32trnufudqum60yrxu8","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"sM35yi4kFtkUqC0A01xD7G+PXo443lwubtud3r3rfJxSdneO9ohm2P+A4+pJgt5RyVTaHNfL5gXLOvp0u6IeBQ=="}],"memo":""},"metadata":{"timestamp":"1744610926"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15wmukt79xymnnu6c4de32trnufudqum60yrxu8","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"sM35yi4kFtkUqC0A01xD7G+PXo443lwubtud3r3rfJxSdneO9ohm2P+A4+pJgt5RyVTaHNfL5gXLOvp0u6IeBQ=="}],"memo":""},"metadata":{"timestamp":"1744611057"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g15wmukt79xymnnu6c4de32trnufudqum60yrxu8","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"sM35yi4kFtkUqC0A01xD7G+PXo443lwubtud3r3rfJxSdneO9ohm2P+A4+pJgt5RyVTaHNfL5gXLOvp0u6IeBQ=="}],"memo":""},"metadata":{"timestamp":"1744611670"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g150gdvn780ws7a3s9qpdvv7h4d9hq6vh672ely0","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"DxumKZ8V42aBbpxBQMjTnP7r0pdLPXmD1ThtvXJj2H14j1jd6gFr9fGXDjlSeuh4U8VqPKskC3uL+3nCsvjtCw=="}],"memo":""},"metadata":{"timestamp":"1744616283"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":[""]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"FnjroH+KxjVyJ48MoPC5Yflhe8iN9T1wXJcGnYsBRT5yrvtXt77VUNmoVFkHZBQbE12nhVGQCptcQ4azGVP4CA=="}],"memo":""},"metadata":{"timestamp":"1744617545"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g14x2crt492f84shxa9s7e5ulk7lnf2p3euz7r9n","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ypeuw5yE7NFexRNVgL9H4v0UpcoQ3xW1oAQE1H9NsMBOAyvI8Gu7oEjjQIv4PLdEKoOz/nhL5mpQ3SHWPbgxDw=="}],"memo":""},"metadata":{"timestamp":"1744623848"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1pfyhn0d7g4tnp6wft9ge4cuu88ppr9u8mdggfs","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"5dGzw9/05Zf9NhKQEraPlxl6mAfrvcoitKbwmTo6qflbGx9SdS//9IATwN8W/TPwzf9zRsZm4ZjHneKnL1lrBw=="}],"memo":""},"metadata":{"timestamp":"1744624169"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1e6gxg5tvc55mwsn7t7dymmlasratv7mkv0rap2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"EOSgK2H4KxLEXCL35H0rMnJWQPVgmx/rAam/0WIdn42eID9/E33IW4jC75I6uVLUTza5WS921FyXySfO0JDECw=="}],"memo":""},"metadata":{"timestamp":"1744644580"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1sd5ezmxt4rwpy52u6wl3l3y085n8x0p6nllxm8","send":"","pkg_path":"gno.land/r/leon/hor","func":"Upvote","args":["gno.land%2Fr%2Fstefann%2Ffomo3d"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"GnuaZYFl09UdzS87iitZ6S+bV+5LbqjQq0s7qz2NuJMxJeZCaNU3OIXEJpgituxmAj7bzc5Ar+dNEaadMTNfCA=="}],"memo":""},"metadata":{"timestamp":"1744649294"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1urt7pdmwg2m6z3rsgu4e8peppm4027fvpwkmj8","send":"","pkg_path":"gno.land/r/leon/hor","func":"Upvote","args":["gno.land%2Fr%2Fleon%2Fhome"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bS9Iq74VrjvObny9ir5JnPcVAWd2LF5xPnkwexuR+BhJxj/8q8kLoXnIyE97G6hMZR7UbUSkZuvdKInu5AlCBQ=="}],"memo":""},"metadata":{"timestamp":"1744650837"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/leon/hor","func":"Upvote","args":["gno.land/r/leon/home"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"FVLDk7/YTJyJujhktgbwqUxJ6RFgrhzq7RVn+IrYlywysQAXoQRI80rSf+5WFiYxtk9lBvodvgMHn43eFgRyBQ=="}],"memo":""},"metadata":{"timestamp":"1744651003"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/gnoland/events","func":"AddEvent","args":["Writing Smart Contracts in Go","Join our meetup in Belgrade!","https://lu.ma/gyesps56","Belgrade, Serbia","2025-04-10T18:00:00+02:00","2025-04-10T22:00:00+02:00"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"JROEBUx5+MZl7zODmKd/drCBm1PO89+R10vvSO+K9YtBtAM54pjgDubrGj9TZXYH71uPVina+V2ecsPyPmNNBw=="}],"memo":""},"metadata":{"timestamp":"1744651511"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1sd5ezmxt4rwpy52u6wl3l3y085n8x0p6nllxm8","send":"","pkg_path":"gno.land/r/leon/hor","func":"Upvote","args":["gno.land/r/matijamarjanovic/tokenhub"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Wwk8NprjpQdMS295j9ZFIqlEioHEUaC+kyEcnEN3lZ2JTMyUw75exkCiO6VZSkk18yxPp/9jUldzRMhyJ0JQBg=="}],"memo":""},"metadata":{"timestamp":"1744652838"}}
{"tx":{"msg":[{"@type":"/vm.m_run","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","package":{"name":"main","path":"gno.land/r/g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5/run","files":[{"name":"script.gno","body":"package main\n\nimport \"gno.land/r/devrels/config\"\n\nfunc main() {\n\tprintln(config.GnoDevRels.String())\n}\n"}]}}],"fee":{"gas_wanted":"1000000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"8RNPxxRhq5pHiUCBHFIY+nsw2lbLCJC7ToARI7zHXldW+Hf7r070ger3mZfh70PLja22uophqIffQqQr5FgeCw=="}],"memo":""},"metadata":{"timestamp":"1744655396"}}
{"tx":{"msg":[{"@type":"/vm.m_run","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","package":{"name":"main","path":"gno.land/r/g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5/run","files":[{"name":"script.gno","body":"package main\n\nimport \"gno.land/r/devrels/config\"\n\nfunc main() {\n\tprintln(config.GnoDevRels.Has(\"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\"))\n}\n"}]}}],"fee":{"gas_wanted":"1000000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"/ecpX8Emck33GnPZ0+TjBg8C+N9CfGG4op5dl1/pR2mZ4/TnG6URY30Ft/4fuwA/B6gwrCiCpH67FaaJFsT3CA=="}],"memo":""},"metadata":{"timestamp":"1744655517"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1pfyhn0d7g4tnp6wft9ge4cuu88ppr9u8mdggfs","send":"","pkg_path":"gno.land/r/leon/hor","func":"Upvote","args":["gno.land%2Fr%2Fgfanton%2Fgnomaze"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Dc7AMgBUuIzEI2X8+AANjBtVE03cmDMF65nYPqc1O2l6C6jrJoVJ+q70ktucKMXeuoCyNSKj1r1sStr/42lUCw=="}],"memo":""},"metadata":{"timestamp":"1744717048"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g127l4gkhk0emwsx5tmxe96sp86c05h8vg5tufzq","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"k2x71ceG7xqERV52vHeBeywBBBrSVR5CnEqOQ+bdylbp0iWyFUoA3Gr17ZkGTJsArhqgN0HMxznb1Id5T1HWDQ=="}],"memo":""},"metadata":{"timestamp":"1744759807"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g127l4gkhk0emwsx5tmxe96sp86c05h8vg5tufzq","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"k2x71ceG7xqERV52vHeBeywBBBrSVR5CnEqOQ+bdylbp0iWyFUoA3Gr17ZkGTJsArhqgN0HMxznb1Id5T1HWDQ=="}],"memo":""},"metadata":{"timestamp":"1744760395"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g127l4gkhk0emwsx5tmxe96sp86c05h8vg5tufzq","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["maxwell999"]}],"fee":{"gas_wanted":"5500000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"tGf9DjvOc8ZMmc1jvAaY4PzbmYDYG2k3AfknPO46NUfq7JGwpGOk3ctTJDj6J7c6PZaXpDjItrjI+laT3JiiBg=="}],"memo":""},"metadata":{"timestamp":"1744760506"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g127l4gkhk0emwsx5tmxe96sp86c05h8vg5tufzq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"dKulCmcPOTvPOwRM5fPiKkWhUOAJjBglWXBO5riHrAfdDZFku49l7begQiiYlzCwchKJp73pF1lC3+7BmfzUAQ=="}],"memo":""},"metadata":{"timestamp":"1744760526"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g127l4gkhk0emwsx5tmxe96sp86c05h8vg5tufzq","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["maxwell999"]}],"fee":{"gas_wanted":"6000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Mss+RKbrDUJzihls54RzLttbAk5LW1bNa4UNsyAnJhBOWQfQSBJL5qFHBkVJHT+Uyrr1k6Ff2szyOjPs/Y+zBQ=="}],"memo":""},"metadata":{"timestamp":"1744760576"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g127l4gkhk0emwsx5tmxe96sp86c05h8vg5tufzq","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["maxwell999"]}],"fee":{"gas_wanted":"6000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Mss+RKbrDUJzihls54RzLttbAk5LW1bNa4UNsyAnJhBOWQfQSBJL5qFHBkVJHT+Uyrr1k6Ff2szyOjPs/Y+zBQ=="}],"memo":""},"metadata":{"timestamp":"1744760707"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g127l4gkhk0emwsx5tmxe96sp86c05h8vg5tufzq","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["maxwell999"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"othQ8qZy/juOCy/EprXfe7XoNg+T653fFIh0R/c/bN3V/9Fv4jvfXir53BhE/A17EuYru5VluSK9gOqNX3yKAg=="}],"memo":""},"metadata":{"timestamp":"1744760923"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g127l4gkhk0emwsx5tmxe96sp86c05h8vg5tufzq","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["maxwell999"]}],"fee":{"gas_wanted":"9000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Uvb7mpbHJBqZEz+gL0bKG+zx6zZEF96RpigKY2NV7bslBqoajqH/UD+JnX3VnVZf8ZGjfVf3Z4aZ94M3vJeaCw=="}],"memo":""},"metadata":{"timestamp":"1744760994"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ze2ye5u5k3qdlexvt2e0nn0508p04094pnsc8r","to_address":"g1rsl5pw5rsgjqsu8m9s7tz0lt93azeghpv3qd7f","amount":"2000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"KA/GH6v+3Uz7AfY0JxrstIDyHk0CPr5QbffBo8lC3nzoG/6VVJBePFBR/+/qbqel2Jfq79GSjxHvLp4fJQ+kBA=="}],"memo":""},"metadata":{"timestamp":"1744780481"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ze2ye5u5k3qdlexvt2e0nn0508p04094pnsc8r","send":"1ugnot","pkg_path":"gno.land/r/g1zu2q85kmtqlgk0etm3vde85geyqtp2zxr09s3v/foo20","func":"Faucet","args":null}],"fee":{"gas_wanted":"7343960","gas_fee":"3659569ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"H3y3I50ZqJ+4YgreGHPY7WOjlUEe0f1fSxJTGFy7euwnfUkcklhprc6Nv56/paYuEsozjkifu7SSSzTC+GYiCw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1744780974"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc1","func":"CreateBoard","args":["SCP Discussions Board"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"9ma9oeRVRgE2IDGCEmUYj3+u5cchNmLTNh5rBo7tL/D7nAnuDnYebXyW1oE4KGRERtejiSM77vkQRlSZNuPlDw=="}],"memo":""},"metadata":{"timestamp":"1744806853"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/devx000/gnoland/boards2/v1rc2","func":"CreateBoard","args":["SCP-Discussions"]}],"fee":{"gas_wanted":"19279236","gas_fee":"40166ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"rP08uzoGlFGOGHOQdXiodn+1XUMw/mZGLATULFdbQ9nUGDfRAJjL+3vXh7f4Qdckxsq6QBJzd2GsIqEidGLQCA=="}],"memo":""},"metadata":{"timestamp":"1744807984"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g169xfg3xhz69kezz8q8t9uwd0a4dvw07cprtnrn","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"WkonJDeVXsn9bWXO0ZEPyTBAOJGdOK+PYsBYCr0eCSrAllkEmhEC+5fZBrhQbKqcGDI7pefPm4B0ecxMdZPHCA=="}],"memo":""},"metadata":{"timestamp":"1744811532"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1d9etfuh7zrkawx256j6dpckmrll8nz5pxe64gr","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"x5RCJSWF5xaXyRmZTJ1HrtbnxL7LGuhvGSSROZ82TWHe3jB6QbVXteIpmQExnKyDllu9MmUgXOqe6gTY3LDvDg=="}],"memo":""},"metadata":{"timestamp":"1744812405"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g19vfnpn752u2xgzzhl8qe60kufdr3v6tepgueeh","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"PE7YiRGTGwqhIWiFK2Wqs2r+Lw8H6x8C+DgOuhDiobAEF4y/AgpbDAJME/lXKRwwbKYHqZJPB9sWNRTbbDANBQ=="}],"memo":""},"metadata":{"timestamp":"1744812410"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1d9etfuh7zrkawx256j6dpckmrll8nz5pxe64gr","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["ttttt999"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"U2ePWDTpsw7BUmtp/vWJkS0gGCxJ+1S5nSMDznGQEVQezIgwvYoalFdZPpYcD5r+5oYkfq2HNGKSbCDxRVidCw=="}],"memo":""},"metadata":{"timestamp":"1744812890"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1smr6exgm86ycjwr283fp78szq8zpell5gdrpdf","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qPZvH9XbeA1WMKB/kNBoaMY6A0GiNAOtXRjFcslbcmRgzi2L5ku9zZviW1OJMHmabaIWUbkQQ8c9anXr3elEBg=="}],"memo":""},"metadata":{"timestamp":"1744813377"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1smr6exgm86ycjwr283fp78szq8zpell5gdrpdf","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["deeep448"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2231690ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"rKq5UUwqjvjy6G418NDRSNHhiV60C8Zh3S3EYxGk1nPipxyZb0wOCA1pKWvACvJJmU+EFwCt1QSPufPf46QnDA=="}],"memo":""},"metadata":{"timestamp":"1744813443"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["ouiouibaguette420"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2231690ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"B8o5u+RrdSUOC9c+XS8u/J9vHlfpv/sgP+mniX5hYH7+aLwaWnR7N/YjTDnmhM0yZ4k/IBu/1RT988YQH4oFDA=="}],"memo":""},"metadata":{"timestamp":"1744814699"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g187cnauzcsmw7wwt6h6xrwa5cq2qmcqs82nn7j9","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"0mx/Rs8avbnJZaTWTFfKosCGPGo/jcU6BhwwGno6D+hPWYxLstFpZrqS4N99pqdT0E0VE+s6lzXvzdlM40QlBw=="}],"memo":""},"metadata":{"timestamp":"1744815860"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g187cnauzcsmw7wwt6h6xrwa5cq2qmcqs82nn7j9","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["onbloc_1111"]}],"fee":{"gas_wanted":"12000000","gas_fee":"2231690ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"9iwrV7pzjFOG+WC6RqeINTQq8pSoUzaGaxf1XygGo9O0/9BFCM9B2hS52czFZojb7HjEWB944luZkGgcJTpfDw=="}],"memo":""},"metadata":{"timestamp":"1744815911"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","package":{"name":"complextypestest","path":"gno.land/r/g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd/complextypestest","files":[{"name":"package.gno","body":"// Package complextypestest is a test realm to check Connect dynamic form builder for complex types.\npackage complextypestest\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\n// Basic type aliases to test rendering of custom types\ntype UserID string\ntype Temperature float64\ntype Age int\ntype Enabled bool\n\n// Map type aliases\ntype Properties map[string]string\ntype Scores map[string]int\ntype UserRoles map[UserID][]string\n\n// Some enum-like constants\ntype Status int\n\nconst (\n\tStatusPending Status = iota\n\tStatusActive\n\tStatusSuspended\n\tStatusClosed\n)\n\nfunc (s Status) String() string {\n\treturn []string{\"Pending\", \"Active\", \"Suspended\", \"Closed\"}[s]\n}\n\n// Nested structs to test form generation for complex types\ntype Address struct {\n\tStreet     string\n\tCity       string\n\tPostalCode string\n\tCountry    string\n}\n\ntype Contact struct {\n\tEmail     string\n\tPhone     string\n\tAddresses []Address\n}\n\ntype User struct {\n\tID        UserID\n\tFirstName string\n\tLastName  string\n\tAge       Age\n\tActive    Enabled\n\tStatus    Status\n\tContact   Contact\n\tTags      []string\n\tMetadata  map[string]string\n\tCreatedAt time.Time\n}\n\n// Team structure for testing map of structs\ntype Team struct {\n\tID          string\n\tName        string\n\tDepartment  string\n\tLeadUserID  UserID\n\tMemberCount int\n\tActive      bool\n}\n\n// Function with basic scalar types\nfunc CalculateTotal(price float64, quantity int, applyDiscount bool) float64 {\n\ttotal := price * float64(quantity)\n\tif applyDiscount {\n\t\ttotal *= 0.9 // 10% discount\n\t}\n\treturn total\n}\n\n// Function with strings and arrays\nfunc FormatGreeting(name string, titles []string) string {\n\tgreeting := \"Hello\"\n\tif len(titles) \u003e 0 {\n\t\tgreeting += \" \" + titles[0]\n\t}\n\tgreeting += \" \" + name\n\tif len(titles) \u003e 1 {\n\t\tgreeting += \", \" + titles[1]\n\t}\n\treturn greeting\n}\n\n// Function with custom type aliases\nfunc RegisterUser(id UserID, age Age, isEnabled Enabled) string {\n\treturn fmt.Sprintf(\"User %s (age: %d) registered with enabled status: %t\", id, age, isEnabled)\n}\n\n// Function with slices, maps and enum-like parameters\nfunc ProcessUserPreferences(userID UserID, preferences []string, settings map[string]string, status Status) User {\n\tuser := User{\n\t\tID:       userID,\n\t\tStatus:   status,\n\t\tTags:     preferences,\n\t\tMetadata: settings,\n\t\tActive:   true,\n\t}\n\treturn user\n}\n\n// Function with map type alias parameter\nfunc AssignUserProperties(userID UserID, props Properties) bool {\n\t// This is just a stub implementation\n\tif userID == \"\" || len(props) == 0 {\n\t\treturn false\n\t}\n\treturn true\n}\n\n// Function with complex map type alias\nfunc AssignUserRoles(roles UserRoles) map[string]int {\n\tresult := make(map[string]int)\n\tfor _, roleList := range roles {\n\t\tfor _, role := range roleList {\n\t\t\tresult[role]++\n\t\t}\n\t}\n\treturn result\n}\n\n// Function with map of structs\nfunc ProcessTeams(teams map[string]Team) []string {\n\tresult := make([]string, 0, len(teams))\n\tfor _, team := range teams {\n\t\tif team.Active {\n\t\t\tresult = append(result, team.Name)\n\t\t}\n\t}\n\treturn result\n}\n\n// Function with complex struct parameter\nfunc CreateNewUser(firstName string, lastName string, age int, contact Contact) User {\n\treturn User{\n\t\tID:        UserID(fmt.Sprintf(\"user_%s_%s\", firstName, lastName)),\n\t\tFirstName: firstName,\n\t\tLastName:  lastName,\n\t\tAge:       Age(age),\n\t\tActive:    true,\n\t\tStatus:    StatusActive,\n\t\tContact:   contact,\n\t\tCreatedAt: time.Now(),\n\t}\n}\n\n// Function with variadic parameters\nfunc CombineStrings(separator string, parts ...string) string {\n\tresult := \"\"\n\tfor i, part := range parts {\n\t\tresult += part\n\t\tif i \u003c len(parts)-1 {\n\t\t\tresult += separator\n\t\t}\n\t}\n\treturn result\n}\n\n// Function with function parameter - challenging for form generation\nfunc ProcessData(data []int, processor func(int) int) []int {\n\tresult := make([]int, len(data))\n\tfor i, val := range data {\n\t\tresult[i] = processor(val)\n\t}\n\treturn result\n}\n\n// Function returning multiple values\nfunc ParseUserInput(input string) (name string, age int, isAdmin bool, err error) {\n\t// This is just a stub\n\treturn \"John Doe\", 30, false, nil\n}\n\n// Function with nested complex structures\nfunc AssignUserToTeam(user User, teamID string, roles map[string][]string) (teamName string, success bool) {\n\t// This is just a stub\n\treturn \"Engineering\", true\n}\n\n// Function with map of structs parameter and return value\nfunc FilterTeamsByDepartment(teams map[string]Team, department string) map[string]Team {\n\tresult := make(map[string]Team)\n\tfor id, team := range teams {\n\t\tif team.Department == department {\n\t\t\tresult[id] = team\n\t\t}\n\t}\n\treturn result\n}\n\n// Function with pointer parameters\nfunc UpdateUserStatus(userID *UserID, newStatus *Status) bool {\n\tif userID == nil || newStatus == nil {\n\t\treturn false\n\t}\n\t// Just a stub\n\treturn true\n}\n\n// Function with interface parameter\nfunc LogMessage(level string, message interface{}) string {\n\treturn fmt.Sprintf(\"[%s] %v\", level, message)\n}\n\n// Function with anonymous struct\nfunc ConfigureSystem(config struct {\n\tTimeout  int\n\tRetries  int\n\tLogLevel string\n\tFeatures []string\n}) bool {\n\t// Just a stub\n\treturn true\n}\n\n// Function with scores map type alias and nested map result\nfunc ProcessUserScores(userScores map[UserID]Scores) map[UserID]float64 {\n\taverages := make(map[UserID]float64)\n\t\n\tfor userID, scores := range userScores {\n\t\ttotal := 0\n\t\tcount := 0\n\t\tfor _, score := range scores {\n\t\t\ttotal += score\n\t\t\tcount++\n\t\t}\n\t\t\n\t\tif count \u003e 0 {\n\t\t\taverages[userID] = float64(total) / float64(count)\n\t\t}\n\t}\n\t\n\treturn averages\n}"}]},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"8vAQIUR9jqb1eQ8fx+VunLIdZ0jpB6XFvdFyfH6bM34H/QR44aLKuqORsal8E35gk9a8yfFYHxasI7ZVqcK7AA=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1744817763"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","package":{"name":"complextypestest","path":"gno.land/r/g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd/complextypestest","files":[{"name":"package.gno","body":"// Package complextypestest is a test realm to check Connect dynamic form builder for complex types.\npackage complextypestest\n\nimport (\n\t\"gno.land/p/demo/ufmt\"\n\t\"time\"\n)\n\n// Basic type aliases to test rendering of custom types\ntype UserID string\ntype Temperature float64\ntype Age int\ntype Enabled bool\n\n// Map type aliases\ntype Properties map[string]string\ntype Scores map[string]int\ntype UserRoles map[UserID][]string\n\n// Some enum-like constants\ntype Status int\n\nconst (\n\tStatusPending Status = iota\n\tStatusActive\n\tStatusSuspended\n\tStatusClosed\n)\n\nfunc (s Status) String() string {\n\treturn []string{\"Pending\", \"Active\", \"Suspended\", \"Closed\"}[s]\n}\n\n// Nested structs to test form generation for complex types\ntype Address struct {\n\tStreet     string\n\tCity       string\n\tPostalCode string\n\tCountry    string\n}\n\ntype Contact struct {\n\tEmail     string\n\tPhone     string\n\tAddresses []Address\n}\n\ntype User struct {\n\tID        UserID\n\tFirstName string\n\tLastName  string\n\tAge       Age\n\tActive    Enabled\n\tStatus    Status\n\tContact   Contact\n\tTags      []string\n\tMetadata  map[string]string\n\tCreatedAt time.Time\n}\n\n// Team structure for testing map of structs\ntype Team struct {\n\tID          string\n\tName        string\n\tDepartment  string\n\tLeadUserID  UserID\n\tMemberCount int\n\tActive      bool\n}\n\n// Function with basic scalar types\nfunc CalculateTotal(price float64, quantity int, applyDiscount bool) float64 {\n\ttotal := price * float64(quantity)\n\tif applyDiscount {\n\t\ttotal *= 0.9 // 10% discount\n\t}\n\treturn total\n}\n\n// Function with strings and arrays\nfunc FormatGreeting(name string, titles []string) string {\n\tgreeting := \"Hello\"\n\tif len(titles) \u003e 0 {\n\t\tgreeting += \" \" + titles[0]\n\t}\n\tgreeting += \" \" + name\n\tif len(titles) \u003e 1 {\n\t\tgreeting += \", \" + titles[1]\n\t}\n\treturn greeting\n}\n\n// Function with custom type aliases\nfunc RegisterUser(id UserID, age Age, isEnabled Enabled) string {\n\treturn ufmt.Sprintf(\"User %s (age: %d) registered with enabled status: %t\", id, age, isEnabled)\n}\n\n// Function with slices, maps and enum-like parameters\nfunc ProcessUserPreferences(userID UserID, preferences []string, settings map[string]string, status Status) User {\n\tuser := User{\n\t\tID:       userID,\n\t\tStatus:   status,\n\t\tTags:     preferences,\n\t\tMetadata: settings,\n\t\tActive:   true,\n\t}\n\treturn user\n}\n\n// Function with map type alias parameter\nfunc AssignUserProperties(userID UserID, props Properties) bool {\n\t// This is just a stub implementation\n\tif userID == \"\" || len(props) == 0 {\n\t\treturn false\n\t}\n\treturn true\n}\n\n// Function with complex map type alias\nfunc AssignUserRoles(roles UserRoles) map[string]int {\n\tresult := make(map[string]int)\n\tfor _, roleList := range roles {\n\t\tfor _, role := range roleList {\n\t\t\tresult[role]++\n\t\t}\n\t}\n\treturn result\n}\n\n// Function with map of structs\nfunc ProcessTeams(teams map[string]Team) []string {\n\tresult := make([]string, 0, len(teams))\n\tfor _, team := range teams {\n\t\tif team.Active {\n\t\t\tresult = append(result, team.Name)\n\t\t}\n\t}\n\treturn result\n}\n\n// Function with complex struct parameter\nfunc CreateNewUser(firstName string, lastName string, age int, contact Contact) User {\n\treturn User{\n\t\tID:        UserID(ufmt.Sprintf(\"user_%s_%s\", firstName, lastName)),\n\t\tFirstName: firstName,\n\t\tLastName:  lastName,\n\t\tAge:       Age(age),\n\t\tActive:    true,\n\t\tStatus:    StatusActive,\n\t\tContact:   contact,\n\t\tCreatedAt: time.Now(),\n\t}\n}\n\n// Function with variadic parameters\nfunc CombineStrings(separator string, parts ...string) string {\n\tresult := \"\"\n\tfor i, part := range parts {\n\t\tresult += part\n\t\tif i \u003c len(parts)-1 {\n\t\t\tresult += separator\n\t\t}\n\t}\n\treturn result\n}\n\n// Function with function parameter - challenging for form generation\nfunc ProcessData(data []int, processor func(int) int) []int {\n\tresult := make([]int, len(data))\n\tfor i, val := range data {\n\t\tresult[i] = processor(val)\n\t}\n\treturn result\n}\n\n// Function returning multiple values\nfunc ParseUserInput(input string) (name string, age int, isAdmin bool, err error) {\n\t// This is just a stub\n\treturn \"John Doe\", 30, false, nil\n}\n\n// Function with nested complex structures\nfunc AssignUserToTeam(user User, teamID string, roles map[string][]string) (teamName string, success bool) {\n\t// This is just a stub\n\treturn \"Engineering\", true\n}\n\n// Function with map of structs parameter and return value\nfunc FilterTeamsByDepartment(teams map[string]Team, department string) map[string]Team {\n\tresult := make(map[string]Team)\n\tfor id, team := range teams {\n\t\tif team.Department == department {\n\t\t\tresult[id] = team\n\t\t}\n\t}\n\treturn result\n}\n\n// Function with pointer parameters\nfunc UpdateUserStatus(userID *UserID, newStatus *Status) bool {\n\tif userID == nil || newStatus == nil {\n\t\treturn false\n\t}\n\t// Just a stub\n\treturn true\n}\n\n// Function with interface parameter\nfunc LogMessage(level string, message interface{}) string {\n\treturn ufmt.Sprintf(\"[%s] %v\", level, message)\n}\n\n// Function with anonymous struct\nfunc ConfigureSystem(config struct {\n\tTimeout  int\n\tRetries  int\n\tLogLevel string\n\tFeatures []string\n}) bool {\n\t// Just a stub\n\treturn true\n}\n\n// Function with scores map type alias and nested map result\nfunc ProcessUserScores(userScores map[UserID]Scores) map[UserID]float64 {\n\taverages := make(map[UserID]float64)\n\t\n\tfor userID, scores := range userScores {\n\t\ttotal := 0\n\t\tcount := 0\n\t\tfor _, score := range scores {\n\t\t\ttotal += score\n\t\t\tcount++\n\t\t}\n\t\t\n\t\tif count \u003e 0 {\n\t\t\taverages[userID] = float64(total) / float64(count)\n\t\t}\n\t}\n\t\n\treturn averages\n}"}]},"deposit":""}],"fee":{"gas_wanted":"29391906","gas_fee":"61234ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Bw2GjEyvsG3gL4Vu5C3+f0nLMFSXTRyWM8XQBnwoW4jTkpobp3PrHOwgaQtkSf4BDhG1Quf/w9oZU0xyBhd+Cg=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1744817965"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","package":{"name":"types","path":"gno.land/p/g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd/connecttest/compextypes/types","files":[{"name":"package.gno","body":"package types\n\ntype UserID string\ntype Temperature float64\ntype Age int\ntype Enabled bool\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"2197614","gas_fee":"4579ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"alJVFiixAfnGsz/iDzWJc7gM1WPJepgCUvfcuSszt42PV1RyUh9tTcxN+XXjyj18IxIgA6lcYjl1PlL56khDCg=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1744818708"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","package":{"name":"complextypes","path":"gno.land/r/g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd/connecttest/complextypes","files":[{"name":"package.gno","body":"// Package complextypes is a test realm to check Connect dynamic form builder for complex types.\npackage complextypes\n\nimport (\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/p/g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd/connecttest/compextypes/types\"\n\t\"time\"\n)\n\n// Basic type aliases to test rendering of custom types\ntype Temperature float64\ntype Age int\ntype Enabled bool\n\n// Map type aliases\ntype Properties map[string]string\ntype Scores map[string]int\ntype UserRoles map[types.UserID][]string\n\n// Some enum-like constants\ntype Status int\n\nconst (\n\tStatusPending Status = iota\n\tStatusActive\n\tStatusSuspended\n\tStatusClosed\n)\n\nfunc (s Status) String() string {\n\treturn []string{\"Pending\", \"Active\", \"Suspended\", \"Closed\"}[s]\n}\n\n// Nested structs to test form generation for complex types\ntype Address struct {\n\tStreet     string\n\tCity       string\n\tPostalCode string\n\tCountry    string\n}\n\ntype Contact struct {\n\tEmail     string\n\tPhone     string\n\tAddresses []Address\n}\n\ntype User struct {\n\tID        types.UserID\n\tFirstName string\n\tLastName  string\n\tAge       Age\n\tActive    Enabled\n\tStatus    Status\n\tContact   Contact\n\tTags      []string\n\tMetadata  map[string]string\n\tCreatedAt time.Time\n}\n\n// Team structure for testing map of structs\ntype Team struct {\n\tID          string\n\tName        string\n\tDepartment  string\n\tLeadUserID  types.UserID\n\tMemberCount int\n\tActive      bool\n}\n\n// Function with basic scalar types\nfunc CalculateTotal(price float64, quantity int, applyDiscount bool) float64 {\n\ttotal := price * float64(quantity)\n\tif applyDiscount {\n\t\ttotal *= 0.9 // 10% discount\n\t}\n\treturn total\n}\n\n// Function with strings and arrays\nfunc FormatGreeting(name string, titles []string) string {\n\tgreeting := \"Hello\"\n\tif len(titles) \u003e 0 {\n\t\tgreeting += \" \" + titles[0]\n\t}\n\tgreeting += \" \" + name\n\tif len(titles) \u003e 1 {\n\t\tgreeting += \", \" + titles[1]\n\t}\n\treturn greeting\n}\n\n// Function with custom type aliases\nfunc RegisterUser(id types.UserID, age Age, isEnabled Enabled) string {\n\treturn ufmt.Sprintf(\"User %s (age: %d) registered with enabled status: %t\", id, age, isEnabled)\n}\n\n// Function with slices, maps and enum-like parameters\nfunc ProcessUserPreferences(userID types.UserID, preferences []string, settings map[string]string, status Status) User {\n\tuser := User{\n\t\tID:       userID,\n\t\tStatus:   status,\n\t\tTags:     preferences,\n\t\tMetadata: settings,\n\t\tActive:   true,\n\t}\n\treturn user\n}\n\n// Function with map type alias parameter\nfunc AssignUserProperties(userID types.UserID, props Properties) bool {\n\t// This is just a stub implementation\n\tif userID == \"\" || len(props) == 0 {\n\t\treturn false\n\t}\n\treturn true\n}\n\n// Function with complex map type alias\nfunc AssignUserRoles(roles UserRoles) map[string]int {\n\tresult := make(map[string]int)\n\tfor _, roleList := range roles {\n\t\tfor _, role := range roleList {\n\t\t\tresult[role]++\n\t\t}\n\t}\n\treturn result\n}\n\n// Function with map of structs\nfunc ProcessTeams(teams map[string]Team) []string {\n\tresult := make([]string, 0, len(teams))\n\tfor _, team := range teams {\n\t\tif team.Active {\n\t\t\tresult = append(result, team.Name)\n\t\t}\n\t}\n\treturn result\n}\n\n// Function with complex struct parameter\nfunc CreateNewUser(firstName string, lastName string, age int, contact Contact) User {\n\treturn User{\n\t\tID:        types.UserID(ufmt.Sprintf(\"user_%s_%s\", firstName, lastName)),\n\t\tFirstName: firstName,\n\t\tLastName:  lastName,\n\t\tAge:       Age(age),\n\t\tActive:    true,\n\t\tStatus:    StatusActive,\n\t\tContact:   contact,\n\t\tCreatedAt: time.Now(),\n\t}\n}\n\n// Function with variadic parameters\nfunc CombineStrings(separator string, parts ...string) string {\n\tresult := \"\"\n\tfor i, part := range parts {\n\t\tresult += part\n\t\tif i \u003c len(parts)-1 {\n\t\t\tresult += separator\n\t\t}\n\t}\n\treturn result\n}\n\n// Function with function parameter - challenging for form generation\nfunc ProcessData(data []int, processor func(int) int) []int {\n\tresult := make([]int, len(data))\n\tfor i, val := range data {\n\t\tresult[i] = processor(val)\n\t}\n\treturn result\n}\n\n// Function returning multiple values\nfunc ParseUserInput(input string) (name string, age int, isAdmin bool, err error) {\n\t// This is just a stub\n\treturn \"John Doe\", 30, false, nil\n}\n\n// Function with nested complex structures\nfunc AssignUserToTeam(user User, teamID string, roles map[string][]string) (teamName string, success bool) {\n\t// This is just a stub\n\treturn \"Engineering\", true\n}\n\n// Function with map of structs parameter and return value\nfunc FilterTeamsByDepartment(teams map[string]Team, department string) map[string]Team {\n\tresult := make(map[string]Team)\n\tfor id, team := range teams {\n\t\tif team.Department == department {\n\t\t\tresult[id] = team\n\t\t}\n\t}\n\treturn result\n}\n\n// Function with pointer parameters\nfunc UpdateUserStatus(userID *types.UserID, newStatus *Status) bool {\n\tif userID == nil || newStatus == nil {\n\t\treturn false\n\t}\n\t// Just a stub\n\treturn true\n}\n\n// Function with interface parameter\nfunc LogMessage(level string, message interface{}) string {\n\treturn ufmt.Sprintf(\"[%s] %v\", level, message)\n}\n\n// Function with anonymous struct\nfunc ConfigureSystem(config struct {\n\tTimeout  int\n\tRetries  int\n\tLogLevel string\n\tFeatures []string\n}) bool {\n\t// Just a stub\n\treturn true\n}\n\n// Function with scores map type alias and nested map result\nfunc ProcessUserScores(userScores map[types.UserID]Scores) map[types.UserID]float64 {\n\taverages := make(map[types.UserID]float64)\n\n\tfor userID, scores := range userScores {\n\t\ttotal := 0\n\t\tcount := 0\n\t\tfor _, score := range scores {\n\t\t\ttotal += score\n\t\t\tcount++\n\t\t}\n\n\t\tif count \u003e 0 {\n\t\t\taverages[userID] = float64(total) / float64(count)\n\t\t}\n\t}\n\n\treturn averages\n}"}]},"deposit":""}],"fee":{"gas_wanted":"29500252","gas_fee":"61459ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"I7tlGUYUOMwXe8O2HB0YKcWES8Kg37GSkAJ8NzstPoDk9hWdonEdW0z8lH/6wT2yZOHBv4b2EImwobWdbLf4BQ=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1744818925"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ze2ye5u5k3qdlexvt2e0nn0508p04094pnsc8r","to_address":"g1rsl5pw5rsgjqsu8m9s7tz0lt93azeghpv3qd7f","amount":"100000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Urmj9+ZisdZcu226nHbE/Cx+hehC9gkGXwKSlnwhpa/HnB2OsCLAcRKl/9y1SjnNsTcWnTCzxB47uya7XVosAA=="}],"memo":""},"metadata":{"timestamp":"1744876925"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ze2ye5u5k3qdlexvt2e0nn0508p04094pnsc8r","to_address":"g1rsl5pw5rsgjqsu8m9s7tz0lt93azeghpv3qd7f","amount":"100000ugnot"}],"fee":{"gas_wanted":"51806","gas_fee":"25822ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"emyKhS9VlZt90FpVEr8rxXkLBKMoZh45Koyw/Ne3/bkrcOnewHxuc/719poHyCMrGr0cdN3ULcCDL9ynoBlxBA=="}],"memo":""},"metadata":{"timestamp":"1744877594"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ze2ye5u5k3qdlexvt2e0nn0508p04094pnsc8r","to_address":"g1rsl5pw5rsgjqsu8m9s7tz0lt93azeghpv3qd7f","amount":"100000ugnot"}],"fee":{"gas_wanted":"51782","gas_fee":"108ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ORK++mYO+npn+gU3QlBIrM1Bnwr8IwcHc7dbAEqTTU/WM4aANIKKDMza9q1XH3Rt1t05Aex+ukiscVQXlMlfDg=="}],"memo":""},"metadata":{"timestamp":"1744882218"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g127l4gkhk0emwsx5tmxe96sp86c05h8vg5tufzq","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["maxwell999"]}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ltsXPj5nTklh7bBxC4zlqzDkxSfEfMTFJee5xIS/tzUVaDBtdvmdfC5fxhdq2FGpu7XU5KOXMmk6tbjrt9e7Dw=="}],"memo":""},"metadata":{"timestamp":"1744892682"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ze2ye5u5k3qdlexvt2e0nn0508p04094pnsc8r","to_address":"g1rsl5pw5rsgjqsu8m9s7tz0lt93azeghpv3qd7f","amount":"100000ugnot"}],"fee":{"gas_wanted":"120000","gas_fee":"480ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"q2WPuQFIccrK1ei+Lym7ynyiRdWXIeMYqkoxT92Ne24rUd4CXO5GLbBCOUy8vBZHR62E0XTOcmOv59+cEyciBQ=="}],"memo":""},"metadata":{"timestamp":"1744945965"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1ze2ye5u5k3qdlexvt2e0nn0508p04094pnsc8r","to_address":"g1rsl5pw5rsgjqsu8m9s7tz0lt93azeghpv3qd7f","amount":"100000ugnot"}],"fee":{"gas_wanted":"51734","gas_fee":"207ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"E5oJ9ipcZaED4Uf0i/ZcqFnGHlUAQtubzczC8E9Fn5fWwNl8F2ioxR4VlRiqkHuNb1SzBTDZPToy8sBIhJP/Aw=="}],"memo":""},"metadata":{"timestamp":"1744962322"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1rsl5pw5rsgjqsu8m9s7tz0lt93azeghpv3qd7f","to_address":"g1ze2ye5u5k3qdlexvt2e0nn0508p04094pnsc8r","amount":"1000000ugnot"}],"fee":{"gas_wanted":"120000","gas_fee":"480ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"85B3EpVsi/S032FU9wGNvnCOjFVatnFt4SEWbT67avQWm2YqX8iHK8xTj4hPSCg5R/Clg7jkAXZIwQ6CXuylBw=="}],"memo":""},"metadata":{"timestamp":"1744964277"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1w3saysjxdlsyczysnyfd55tuvhhz5533nef8y7","send":"","pkg_path":"gno.land/r/leon/hor","func":"Upvote","args":["gno.land%2Fr%2Fleon%2Fhome"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"uIV9ppUvWykx+U1SVgaUHmZz5xWHmMRxElL+YMY9pHVz1Eyjic0B++rNSomnusnggLQBSrgAn6vWz2pd0gtMBg=="}],"memo":""},"metadata":{"timestamp":"1745057791"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g12q0tdpyj0r3vgshamq3fqa0mjhteay2r80m23r","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qgkpcMCw8jOPoQice+MZ/Ft3bnRFVtwB/GmWuPUGphVprJILBuyxu78ZKxRDmGO54+GJMnxrii9RUHCfa0lJDQ=="}],"memo":""},"metadata":{"timestamp":"1745129657"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1uj698fsjeu4xz79nyjxfnsesaqh6dx5qxf5mpp","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Mksy3qNrkoIwODclBQNk/GPAWsrRb3qRrR2C1bm5jTiYEgXOD/vl+drFfcz68s7bfI9gNdXheY6CZz6fqz7jAg=="}],"memo":""},"metadata":{"timestamp":"1745129672"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1jazghxvvgz3egnr2fc8uf72z4g0l03596y9ls7","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"vh0tJl7xCAhje36H2bE94wqsr/n3B/RAQNJeR4OS90NwvQCzZotPzdkhdQVbLdiNPbOdmbxRkK6FjDVIn8acCA=="}],"memo":""},"metadata":{"timestamp":"1745180537"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","package":{"name":"slicestest","path":"gno.land/r/g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd/connecttest/slicestest","files":[{"name":"gnostudio.gno","body":"// This file is automatically generated and contains metadata about this\n// package deployment. It serves as a marker that this package was deployed\n// using Gno Studio (or Gno Playground) and may be used by tools for analytics, verification,\n// and ecosystem features.\n//\n// This file does not affect package execution and should not be modified.\npackage slicestest"},{"name":"package.gno","body":"package slicestest\n\nimport (\n\t\"math\"\n)\n\nfunc IntSlice(vals []int) int {\n\tsum := 0\n\tfor _, v := range vals {\n\t\tsum += v\n\t}\n\n\treturn sum / len(vals)\n}\n\nfunc Uint64Slice(vals []uint64) uint64 {\n\tsum := uint64(0)\n\tfor _, v := range vals {\n\t\tsum += v\n\t}\n\n\treturn sum / uint64(len(vals))\n}\n\nfunc StrBoolIntSlices(a []string, b []bool) []string {\n\tout := make([]string, 0, len(a))\n\tif len(a) != len(b) {\n\t\tpanic(\"len of all args should be equal\")\n\t}\n\n\tfor i, s := range a {\n\t\tif !b[i] {\n\t\t\tcontinue\n\t\t}\n\n\t\tout = append(out, s)\n\t}\n\n\treturn out\n}\n\nfunc Dot(a, b []float64) float64 {\n\tif len(a) != len(b) {\n\t\tpanic(\"vectors must be the same length\")\n\t}\n\n\tvar sum float64\n\tfor i := range a {\n\t\tsum += a[i] * b[i]\n\t}\n\treturn sum\n}\n\nconst encodeStd = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#$%\u0026()*+,./:;\u003c=\u003e?@[]^_`{|}~\\\"\"\n\nfunc B91Encode(src []byte) string {\n\tdst := make([]byte, b91EncLen(len(src)))\n\n\tvar queue, numBits uint\n\tencode := []byte(encodeStd)\n\n\tn := 0\n\tfor i := 0; i \u003c len(src); i++ {\n\t\tqueue |= uint(src[i]) \u003c\u003c numBits\n\t\tnumBits += 8\n\t\tif numBits \u003e 13 {\n\t\t\tvar v uint = queue \u0026 8191\n\n\t\t\tif v \u003e 88 {\n\t\t\t\tqueue \u003e\u003e= 13\n\t\t\t\tnumBits -= 13\n\t\t\t} else {\n\t\t\t\t// We can take 14 bits.\n\t\t\t\tv = queue \u0026 16383\n\t\t\t\tqueue \u003e\u003e= 14\n\t\t\t\tnumBits -= 14\n\t\t\t}\n\t\t\tdst[n] = encode[v%91]\n\t\t\tn++\n\t\t\tdst[n] = encode[v/91]\n\t\t\tn++\n\t\t}\n\t}\n\n\tif numBits \u003e 0 {\n\t\tdst[n] = encode[queue%91]\n\t\tn++\n\n\t\tif numBits \u003e 7 || queue \u003e 90 {\n\t\t\tdst[n] = encode[queue/91]\n\t\t\tn++\n\t\t}\n\t}\n\n\treturn string(dst[:n])\n}\n\nfunc b91EncLen(n int) int {\n\treturn int(math.Ceil(float64(n) * 16.0 / 13.0))\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"SGkEO95xkuhR8TO094wvg2XB6jM8+47LeF0nA9sc9lmRJhV3A/uiLtRV2ljDaX/DlAtMVWM6bnl842Zim5ceDg=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1745206871"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"4IJbWdvZ3YhU6m5A+DQM99idJDvd0QvyfViCS1E15PgC0YtSQcOn+JZzUW026vESnBTrSVwC/V8GWdbZzaSXAA=="}],"memo":""},"metadata":{"timestamp":"1745219010"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g150dyzuzadzgt327p4t7gdc35szjyx40w7t62dk","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"hektq2Xe3rGzXPXkYl2Z3f6yYCfV7RWJzy6H2ZS4PcJ5ivddGCwggOB5gRukjyWqhFdN6bpl+8GICU10hpf7Bg=="}],"memo":""},"metadata":{"timestamp":"1745229230"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1y32739457fagexluuf3f7czfx0c3k0ayr658rv","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"2TYItpW1+taJIPD3RPnPaCiYk5OSLxcwqXBBz8gShKj0vKpEfbeNb5DHY4c7Edxlq2DnO/TobRgu6TMqL3rJCg=="}],"memo":""},"metadata":{"timestamp":"1745231567"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1y32739457fagexluuf3f7czfx0c3k0ayr658rv","to_address":"g150dyzuzadzgt327p4t7gdc35szjyx40w7t62dk","amount":"2000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"2109130ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"hrLkVgfJ9qGg55KSuyPx1qHPMd5pdvvjGrg6PkSssaFSoOS+QIvfofn6NHebkv2TwjX7boJM49iTUa8AkD9+CQ=="}],"memo":""},"metadata":{"timestamp":"1745231964"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1aa5umzchlwqxtdfh58exmydmzsgpzcg3u9egcp","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ikFvDGJKZGY8SFnZiWLO6FDW/pVAttb9LN5EOyK8Rp4cey/i6POns0yx7ZTpnt4EAduWar32XvIl09f5wRx+Dg=="}],"memo":""},"metadata":{"timestamp":"1745248412"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1aa5umzchlwqxtdfh58exmydmzsgpzcg3u9egcp","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ikFvDGJKZGY8SFnZiWLO6FDW/pVAttb9LN5EOyK8Rp4cey/i6POns0yx7ZTpnt4EAduWar32XvIl09f5wRx+Dg=="}],"memo":""},"metadata":{"timestamp":"1745248432"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1aa5umzchlwqxtdfh58exmydmzsgpzcg3u9egcp","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ikFvDGJKZGY8SFnZiWLO6FDW/pVAttb9LN5EOyK8Rp4cey/i6POns0yx7ZTpnt4EAduWar32XvIl09f5wRx+Dg=="}],"memo":""},"metadata":{"timestamp":"1745248517"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1aa5umzchlwqxtdfh58exmydmzsgpzcg3u9egcp","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ikFvDGJKZGY8SFnZiWLO6FDW/pVAttb9LN5EOyK8Rp4cey/i6POns0yx7ZTpnt4EAduWar32XvIl09f5wRx+Dg=="}],"memo":""},"metadata":{"timestamp":"1745248552"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1aa5umzchlwqxtdfh58exmydmzsgpzcg3u9egcp","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["linker000"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"7qSM16qAlouximRlM9/SghcmON9wXGoPIjwbOe8W7dBIT/7NwcuRKkxFCBfCc9jF2Z7SoIiYzGTua0egkQZQDQ=="}],"memo":""},"metadata":{"timestamp":"1745249950"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aa5umzchlwqxtdfh58exmydmzsgpzcg3u9egcp","package":{"name":"mockevent","path":"gno.land/r/linker000/mockevent","files":[{"name":"mockevent.gno","body":"package mockevent\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\n\n\n\n\nvar (\n\torganizers []std.Address\n\tspeakers []std.Address\n\tattendees []std.Address\n)\n\nfunc init() {\n\torganizers = []std.Address{\n\t\t\"g1j39fhg29uehm7twwnhvnpz3ggrm6tprhq65t0t\",\n\t\t\"g1aa5umzchlwqxtdfh58exmydmzsgpzcg3u9egcp\",\n\t}\n\n\tspeakers = []std.Address{\n\t\t\"g1j39fhg29uehm7twwnhvnpz3ggrm6tprhq65t0t\",\n\t\t\"g12m4ecssg9j0pvnhxct3sfky70dy9fk7xrvfwx2\",\n\t}\n\n\tattendees = []std.Address{\n\t\t\"g1j39fhg29uehm7twwnhvnpz3ggrm6tprhq65t0t\",\n\t\t\"g12m4ecssg9j0pvnhxct3sfky70dy9fk7xrvfwx2\",\n\t\t\"g1yfts8fy9jyfeca4p42em6mcttfwcypkpkfx0rv\",\n\t}\n}\n\nfunc HasRole(role string, addr std.Address) bool {\n\tswitch role {\n\tcase \"attendee\":\n\t\treturn isMember(addr,attendees)\n\tcase \"speaker\":\n\t\treturn isMember(addr, speakers)\n\tcase \"organizer\":\n\t\treturn isMember(addr, organizers)\n\tdefault:\n\t\treturn false\n\t}\n}\n\nfunc isMember(addr std.Address, list []std.Address) bool {\n\tfor _, listAddr := range list {\n\t\tif addr == listAddr {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n\nfunc Render(_ string) string {\n\treturn ufmt.Sprintf(`# Mock Event\n\nThis represents an Event organizer and attendee list.\nThis realm can check membership by Querying HasRole(role, addr), where\na role can be attendee, speaker, or organizer.\n\n## Organizers\n\n%v\n\n## Speakers\n\n%v\n\n## Attendees\n\n%v\n\n`, toList(organizers), toList(speakers), toList(attendees))\n}\n\n\nfunc toList(addrs []std.Address) (result string) {\n\tfor _, addr := range addrs {\n\t\tresult += \"- \" + string(addr) + \"\\n\"\n\t}\n\treturn result\n}"}]},"deposit":""}],"fee":{"gas_wanted":"80000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xP48VbmnB2evTJs4PG1jsBll/Mq2SuAbtbAl7oB/B4DRKiYw59wngwgP62o+8GWdFZW9Zm5DmxrHvAGbGYw2DQ=="}],"memo":""},"metadata":{"timestamp":"1745271474"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aa5umzchlwqxtdfh58exmydmzsgpzcg3u9egcp","package":{"name":"keyring","path":"gno.land/r/linker000/discord/keyring/v0","files":[{"name":"keyring.gno","body":"package keyring\n\nimport (\n\t\"encoding/hex\"\n\t\"std\"\n\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\n\nvar (\n\tcurrent []byte\n\tprevious []byte\n\n\t// linker000 address\n\towner  = ownable.NewWithAddress(\"g1aa5umzchlwqxtdfh58exmydmzsgpzcg3u9egcp\")\n\t// n2p5 address\n\tbackup = ownable.NewWithAddress(\"g1j39fhg29uehm7twwnhvnpz3ggrm6tprhq65t0t\")\n)\n\n\nfunc init() {\n\t// initial pubkey\n\tpkHex := \"159feebfac754a23d1f04a88c3e21ebc7aa55afe8e8262d773a75a98c62dfb62\"\n\tcurrent, _ = hex.DecodeString(pkHex)\n\tprevious = current\n}\n\n\n// PubKey returns a byte slice of the current pubkey\nfunc PubKey() []byte {\n\treturn current\n}\n\n\n// PreviousPubKey returns a byte slice of the previous pubkey\nfunc PreviousPubKey() []byte {\n\treturn previous\n}\n\n\n// Rotate takes a hex encoded ed25519 public key and rotates the current key to previous\n// and the new key becomes the current key. The caller must be either the owner or backup\n// address specified in the contract. The hexKey must be exactly 64 characters long, and\n// the hexKey must be valid hex encoding, otherwise, rotate panics. \nfunc Rotate(hexKey string) {\n\tassertIsAuthorized()\n\tif len(hexKey) != 64 {\n\t\tpanic(\"rotation error: invalid key length\")\n\t}\n\tkey, err := hex.DecodeString(hexKey)\n\tif err != nil {\n\t\tpanic(\"rotation error: invalid hex encoding\")\n\t}\n\tprevious = current\n\tcurrent = key\n}\n\n// assertIsAuthorized checks that the caller is either the owner or the backup user.\nfunc assertIsAuthorized() {\n\tcaller := std.PreviousRealm().Address()\n\tif !(caller == owner.Owner() || caller == backup.Owner()) {\n\t\tpanic(\"rotation error: not authorized\")\n\t}\n}\n\n// Render displays basic information about the contract, including the hex encoded\n// current and previous pubkey.\nfunc Render(_ string) string {\n\tc := hex.EncodeToString(current)\n\tp := hex.EncodeToString(previous)\n\n\treturn ufmt.Sprintf(`\n# Discord Bot Keyring\n\nDiscord Bot maintains an ed25519 private key for signing claims. This contract keeps\ntrack of the current active public key as well as the previous public key so that change\nmanagement processes on the discord bot can happen smoothly.\n\n## Current Pubkey: \n\n%v\n\n## Previous Pubkey: \n\n%v\n`, c, p)\n\n\n}"}]},"deposit":""}],"fee":{"gas_wanted":"80000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"m6nTJYS2d3ouqam5y0g7xgkLr5JWgOtrAFNR0iWeCO2Zx/4vMjOK1Ts31BhXrifeFkpj/V05fLCv580JSmXtCQ=="}],"memo":""},"metadata":{"timestamp":"1745272183"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aa5umzchlwqxtdfh58exmydmzsgpzcg3u9egcp","package":{"name":"user","path":"gno.land/r/linker000/discord/user/v0","files":[{"name":"claim.gno","body":"package user\n\nimport (\n\t\"crypto/ed25519\"\n\t\"encoding/base64\"\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\tkeyring \"gno.land/r/linker000/discord/keyring/v0\"\n)\n\nconst (\n\t// claimTTL is the maximum duration allowed for a claim to be valid.\n\tclaimTTL = 5 * time.Minute\n\t//maxClockSkew represents the maximum allowed time skew for claims to exist in the future.\n\tmaxClockSkew = 30 * time.Second\n)\n\n// Claim is a struct that represents the contents of a signed claim from the discord bot.\ntype Claim struct {\n\ttimestamp time.Time\n\tdiscordID string\n\taddr      std.Address\n}\n\n// validateEncodedClaim takes a base64 encoded ed25519 based nacl.Sign claim. If the claim is valid\n// and all verifications pass, the discord ID and gno address are linked.\n// A valid claim must:\n// - have a valid signature\n// - the payload must be in the format `timestamp,discord_id,gno_address`\n// - timestamp must be within the TTL\n// - timestamp must not exceed future time clock skew\n// - address must match caller\nfunc validateEncodedClaim(encodedClaim string) (*Claim, error) {\n\t// decode the base64 encoded claim\n\tdecodedClaim, err := base64.StdEncoding.DecodeString(encodedClaim)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// attempt to verify with primary public key, and failover to previous public key\n\tpayload, ok := verifySignature(decodedClaim, keyring.PubKey())\n\tif !ok {\n\t\tpayload, ok = verifySignature(decodedClaim, keyring.PreviousPubKey())\n\t\tif !ok {\n\t\t\treturn nil, errors.New(\"claim: not a valid signature\")\n\t\t}\n\t}\n\n\t// create claim from payload\n\tclaim, err := claimFromPayload(string(payload))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// verify timestamp\n\tif err := verifyTimestamp(claim.timestamp, time.Now(), claimTTL, maxClockSkew); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// verify address\n\tif err := verifyAddress(claim.addr); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn claim, nil\n}\n\nfunc claimFromPayload(payload string) (*Claim, error) {\n\tsplitPayload := strings.Split(payload, \",\")\n\tif len(splitPayload) != 3 {\n\t\treturn nil, errors.New(\"claim: invalid arg length, expecting timestamp,discord_id,gno_addr\")\n\t}\n\tunixSeconds, err := strconv.ParseInt(splitPayload[0], 10, 64)\n\ttimestamp := time.Unix(unixSeconds, 0)\n\tif err != nil {\n\t\treturn nil, errors.New(\"claim: failed to parse timestamp\")\n\t}\n\treturn \u0026Claim{\n\t\ttimestamp: timestamp,\n\t\tdiscordID: splitPayload[1],\n\t\taddr:      std.Address(splitPayload[2]),\n\t}, nil\n}\n\nfunc verifyAddress(addr std.Address) error {\n\tcaller := std.PreviousRealm().Address()\n\tif addr != caller {\n\t\treturn errors.New(\"claim: address does not match caller\")\n\t}\n\treturn nil\n}\n\nfunc verifyTimestamp(claim, evaluated time.Time, ttl, skew time.Duration) error {\n\tclaimAge := evaluated.Sub(claim)\n\tif claimAge \u003e ttl {\n\t\treturn errors.New(\"claim: timestamp exceeds ttl window\")\n\t}\n\tif claim.After(evaluated.Add(skew)) {\n\t\treturn errors.New(\"claim: timestamp exceeds clock skew tolerance\")\n\t}\n\treturn nil\n}\n\n// verifySignature takes a signedMessage and a pubkey and attempts to verify.\n// If it is able to verify, it returns the payload and true, otherwise it\n// returns nil and false.\nfunc verifySignature(signedMessage, pubkey []byte) ([]byte, bool) {\n\toverhead := 64\n\tif len(signedMessage) \u003c overhead {\n\t\treturn nil, false\n\t}\n\tif ed25519.Verify(pubkey, signedMessage[overhead:], signedMessage[:overhead]) {\n\t\tout := make([]byte, len(signedMessage)-overhead)\n\t\tcopy(out, signedMessage[overhead:])\n\t\treturn out, true\n\t}\n\treturn nil, false\n}\n"},{"name":"datastore.gno","body":"package user\n\nimport (\n\t\"errors\"\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\ntype datastore struct {\n\tbyAddr      *avl.Tree\n\tbyDiscordID *avl.Tree\n}\n\nfunc (ds *datastore) set(claim *Claim) error {\n\tif ds.getByAddress(claim.addr) != nil {\n\t\treturn errors.New(\"datastore: gno address is already linked\")\n\t}\n\tif ds.getByDiscordID(claim.discordID) != nil {\n\t\treturn errors.New(\"datastore: discord id is already linked\")\n\t}\n\tds.byAddr.Set(string(claim.addr), claim)\n\tds.byDiscordID.Set(claim.discordID, claim)\n\treturn nil\n}\n\nfunc (ds *datastore) removeByAddress(addr std.Address) {\n\tvalue, removed := ds.byAddr.Remove(string(addr))\n\tif removed {\n\t\tclaim := value.(*Claim)\n\t\tds.byDiscordID.Remove(claim.discordID)\n\t}\n}\n\nfunc (ds *datastore) removeByDiscordID(id string) {\n\tvalue, removed := ds.byDiscordID.Remove(id)\n\tif removed {\n\t\tclaim := value.(*Claim)\n\t\tds.byAddr.Remove(string(claim.addr))\n\t}\n}\n\nfunc (ds datastore) getByAddress(addr std.Address) *Claim {\n\tvalue, ok := ds.byAddr.Get(string(addr))\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn value.(*Claim)\n}\n\nfunc (ds datastore) getByDiscordID(id string) *Claim {\n\tvalue, ok := ds.byDiscordID.Get(id)\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn value.(*Claim)\n}\n"},{"name":"render.gno","body":"package user\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/mux\"\n)\n\nvar (\n\trouter = mux.NewRouter()\n)\n\nfunc init() {\n\trouter.HandleFunc(\"\", renderHome)\n\trouter.HandleFunc(\"link/d/{id}\", renderLinkByDiscordID)\n\trouter.HandleFunc(\"link/g/{addr}\", renderLinkByGnoAddr)\n}\n\nfunc Render(path string) string {\n\treturn router.Render(path)\n}\n\nfunc renderHome(w *mux.ResponseWriter, r *mux.Request) {\n\tw.Write(\"# DiscordLinker Home\\n\\n\")\n\tw.Write(\"Welcome. This smart contract is used to link your Discord ID to your gno address.\\n\\n\")\n\tw.Write(\"To get started, go to the discord bot on the gno.land discord server and type `!help` for additional information.\\n\")\n\tw.Write(\"Once you've linked your accounts, you can search for the link by your gno address by going [here](http://localhost:8888/r/linker/discord/user:link/g/g1j39fhg29uehm7twwnhvnpz3ggrm6tprhq65t0t).\\n\")\n}\n\nfunc renderLinkByDiscordID(w *mux.ResponseWriter, r *mux.Request) {\n\tdiscordID := r.GetVar(\"id\")\n\tw.Write(\"# Linked Account by Discord ID\\n\\n\")\n\tgnoAddr := GetLinkedAddress(discordID)\n\n\tif string(gnoAddr) == \"\" {\n\t\tw.Write(\"Sorry, We couldn't find Link for that Discord ID.\")\n\t\treturn\n\t}\n\tw.Write(\"```\\ngno Address:  \" + string(gnoAddr) + \"\\n\\n\")\n\tw.Write(\"Discord ID:   \" + discordID + \"\\n```\")\n\n}\n\nfunc renderLinkByGnoAddr(w *mux.ResponseWriter, r *mux.Request) {\n\tgnoAddr := r.GetVar(\"addr\")\n\tw.Write(\"# Linked Account by gno Address\\n\\n\")\n\tdiscordID := GetLinkedDiscordID(std.Address(gnoAddr))\n\n\tif discordID == \"\" {\n\t\tw.Write(\"Sorry, We couldn't find Link for that gno Address.\")\n\t\treturn\n\t}\n\tw.Write(\"```\\ngno Address:  \" + string(gnoAddr) + \"\\n\\n\")\n\tw.Write(\"Discord ID:   \" + discordID + \"\\n```\")\n}\n"},{"name":"user.gno","body":"package user\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\nvar (\n\t// ds is the primary datastore for claims\n\tds datastore\n)\n\nfunc init() {\n\tds = datastore{\n\t\tbyAddr:      avl.NewTree(),\n\t\tbyDiscordID: avl.NewTree(),\n\t}\n}\n\n// Link takes a base64 encoded ed25519 signed claim from the gno discord linker bot.\n// If the claim is valid, it will use the claim to link a gno address to a discord id.\n// A gno address may only be linked to a single discord ID and a single discord ID may\n// only be linked to a single gno address.\nfunc Link(encodedClaim string) {\n\tclaim, err := validateEncodedClaim(encodedClaim)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tif err := ds.set(claim); err != nil {\n\t\tpanic(err)\n\t}\n}\n\n// UnlinkByCaller removes a discord link, based on the caller address\n// This does not require a claim because the caller is the link owner\nfunc UnlinkByCaller() {\n\tcaller := std.PreviousRealm().Address()\n\tds.removeByAddress(caller)\n}\n\n// UnlinkByClaim takes an encodedClaim from a valid discord bot\n// and unlinks a discordID from a gno address. This is useful if you\n// still have access to your discord account, but you have lost\n// access to your old gno address.\nfunc UnlinkByClaim(encodedClaim string) {\n\tclaim, err := validateEncodedClaim(encodedClaim)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tds.removeByDiscordID(claim.discordID)\n}\n\n// GetLinkedAddress takes a discord ID and returns a linked gno address\nfunc GetLinkedAddress(discordID string) std.Address {\n\tclaim := ds.getByDiscordID(discordID)\n\tif claim == nil {\n\t\treturn std.Address(\"\")\n\t}\n\treturn claim.addr\n}\n\n// GetLinkedDiscordID takes an address and returns a linked discord ID\nfunc GetLinkedDiscordID(address std.Address) string {\n\tclaim := ds.getByAddress(address)\n\tif claim == nil {\n\t\treturn \"\"\n\t}\n\treturn claim.discordID\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"80000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"BGJu3ODAgq1AIhC2gE7UmepZ6YbWb11XYVw6w4eOSmZDOQ34dM27A4DuI7RqGSXezG/bfMt1pood58wUP3ekDA=="}],"memo":""},"metadata":{"timestamp":"1745272725"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1aa5umzchlwqxtdfh58exmydmzsgpzcg3u9egcp","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ikFvDGJKZGY8SFnZiWLO6FDW/pVAttb9LN5EOyK8Rp4cey/i6POns0yx7ZTpnt4EAduWar32XvIl09f5wRx+Dg=="}],"memo":""},"metadata":{"timestamp":"1745273726"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1aa5umzchlwqxtdfh58exmydmzsgpzcg3u9egcp","package":{"name":"role","path":"gno.land/r/linker000/discord/role/v0","files":[{"name":"claim.gno","body":"package role\n\nimport (\n\t\"crypto/ed25519\"\n\t\"encoding/base64\"\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n\tkeyring \"gno.land/r/linker000/discord/keyring/v0\"\n)\n\nconst (\n\t// claimTTL is the maximum duration allowed for a claim to be valid.\n\tclaimTTL = 5 * time.Minute\n\t//maxClockSkew represents the maximum allowed time skew for claims to exist in the future.\n\tmaxClockSkew = 30 * time.Second\n)\n\ntype Claim struct {\n\ttimestamp        time.Time\n\tdiscordAccountID string\n\tdiscordGuildID   string\n\tdiscordRoleID    string\n\taddr             std.Address\n\troleName         string\n\trealmPath        string\n}\n\nfunc (c *Claim) PathRoleGuildKey() string {\n\treturn fmtPathRoleGuildKey(c.realmPath, c.roleName, c.discordGuildID)\n}\n\nfunc (c *Claim) GuildRoleKey() string {\n\treturn fmtGuildRoleKey(c.discordGuildID, c.discordRoleID)\n}\n\nfunc (c *Claim) RoleID() string {\n\treturn c.discordRoleID\n}\n\nfunc (c *Claim) RealmRoleDetails() LinkedRealmRole {\n\treturn LinkedRealmRole{\n\t\tRealmPath:      c.realmPath,\n\t\tRealmRoleName:  c.roleName,\n\t\tDiscordRoleID:  c.discordRoleID,\n\t\tDiscordGuildID: c.discordGuildID,\n\t}\n}\n\nfunc fmtPathGuildKey(realmPath, guildID string) string {\n\treturn ufmt.Sprintf(\"%s|%s\", realmPath, guildID)\n}\n\nfunc fmtPathRoleGuildKey(realmPath, roleName, guildID string) string {\n\treturn ufmt.Sprintf(\"%s|%s|%s\", realmPath, roleName, guildID)\n}\n\nfunc fmtGuildRoleKey(guildID, roleID string) string {\n\treturn ufmt.Sprintf(\"%s|%s\", guildID, roleID)\n}\n\nfunc validateEncodedClaim(encodedClaim string) (*Claim, error) {\n\n\t// decode the base64 encoded claim\n\tdecodedClaim, err := base64.StdEncoding.DecodeString(encodedClaim)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// attempt to verify with primary public key, and failover to previous public key\n\tpayload, ok := verifySignature(decodedClaim, keyring.PubKey())\n\tif !ok {\n\t\tpayload, ok = verifySignature(decodedClaim, keyring.PreviousPubKey())\n\t\tif !ok {\n\t\t\treturn nil, errors.New(\"claim: not a valid signature\")\n\t\t}\n\t}\n\t// create claim from payload\n\tclaim, err := claimFromPayload(string(payload))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// verify timestamp\n\tif err := verifyTimestamp(claim.timestamp, time.Now(), claimTTL, maxClockSkew); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// verify address\n\tif err := verifyAddress(claim.addr); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn claim, nil\n}\n\nfunc claimFromPayload(payload string) (*Claim, error) {\n\tsplitPayload := strings.Split(payload, \",\")\n\tif len(splitPayload) != 7 {\n\t\treturn nil, errors.New(\"claim: invalid arg length, expecting 7 values\")\n\t}\n\tunixSeconds, err := strconv.ParseInt(splitPayload[0], 10, 64)\n\ttimestamp := time.Unix(unixSeconds, 0)\n\tif err != nil {\n\t\treturn nil, errors.New(\"claim: failed to parse timestamp\")\n\t}\n\treturn \u0026Claim{\n\t\ttimestamp:        timestamp,\n\t\tdiscordAccountID: splitPayload[1],\n\t\tdiscordGuildID:   splitPayload[2],\n\t\tdiscordRoleID:    splitPayload[3],\n\t\taddr:             std.Address(splitPayload[4]),\n\t\troleName:         splitPayload[5],\n\t\trealmPath:        splitPayload[6],\n\t}, nil\n}\n\n// verifySignature takes a signedMessage and attempts to verify it with any pubkey in the set of pubkeys\n// if it is able to verify, it returns the payload and true, otherwise it returns nil and false.\nfunc verifySignature(signedMessage, pubkey []byte) ([]byte, bool) {\n\toverhead := 64\n\tif len(signedMessage) \u003c overhead {\n\t\treturn nil, false\n\t}\n\tif ed25519.Verify(pubkey, signedMessage[overhead:], signedMessage[:overhead]) {\n\t\tout := make([]byte, len(signedMessage)-overhead)\n\t\tcopy(out, signedMessage[overhead:])\n\t\treturn out, true\n\t}\n\treturn nil, false\n}\n\nfunc verifyTimestamp(claim, evaluated time.Time, ttl, skew time.Duration) error {\n\tclaimAge := evaluated.Sub(claim)\n\tif claimAge \u003e ttl {\n\t\treturn errors.New(\"claim: timestamp exceeds ttl window\")\n\t}\n\tif claim.After(evaluated.Add(skew)) {\n\t\treturn errors.New(\"claim: timestamp exceeds clock skew tolerance\")\n\t}\n\treturn nil\n}\n\nfunc verifyAddress(addr std.Address) error {\n\tcaller := std.PreviousRealm().Address()\n\tif addr != caller {\n\t\treturn errors.New(\"claim: address does not match caller\")\n\t}\n\treturn nil\n}\n\ntype LinkedRealmRole struct {\n\tRealmPath      string\n\tRealmRoleName  string\n\tDiscordRoleID  string\n\tDiscordGuildID string\n}\n\n// Method for a single LinkedRealmRole\nfunc (lrr *LinkedRealmRole) ToJSON() string {\n\tvar sb strings.Builder\n\n\tsb.WriteString(\"{\")\n\tsb.WriteString(ufmt.Sprintf(\"\\\"RealmPath\\\":\\\"%s\\\",\", escapeString(lrr.RealmPath)))\n\tsb.WriteString(ufmt.Sprintf(\"\\\"RealmRoleName\\\":\\\"%s\\\",\", escapeString(lrr.RealmRoleName)))\n\tsb.WriteString(ufmt.Sprintf(\"\\\"DiscordRoleID\\\":\\\"%s\\\",\", escapeString(lrr.DiscordRoleID)))\n\tsb.WriteString(ufmt.Sprintf(\"\\\"DiscordGuildID\\\":\\\"%s\\\"\", escapeString(lrr.DiscordGuildID)))\n\tsb.WriteString(\"}\")\n\n\treturn sb.String()\n}\n\n// Function for a slice of LinkedRealmRole\nfunc linkedRealmRolesToJSON(roles []LinkedRealmRole) string {\n\tvar sb strings.Builder\n\n\tsb.WriteString(\"[\")\n\n\tfor i, role := range roles {\n\t\t// Use the individual ToJSON method for each role\n\t\tsb.WriteString(role.ToJSON())\n\n\t\t// Add comma for all elements except the last one\n\t\tif i \u003c len(roles)-1 {\n\t\t\tsb.WriteString(\",\")\n\t\t}\n\t}\n\n\tsb.WriteString(\"]\")\n\treturn sb.String()\n}\n\n// Helper function to escape special characters in JSON strings\nfunc escapeString(s string) string {\n\ts = strings.Replace(s, \"\\\\\", \"\\\\\\\\\", -1)\n\ts = strings.Replace(s, \"\\\"\", \"\\\\\\\"\", -1)\n\ts = strings.Replace(s, \"\\n\", \"\\\\n\", -1)\n\ts = strings.Replace(s, \"\\r\", \"\\\\r\", -1)\n\ts = strings.Replace(s, \"\\t\", \"\\\\t\", -1)\n\treturn s\n}\n"},{"name":"datastore.gno","body":"package role\n\nimport (\n\t\"errors\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n// datastore keeps a *Claim database indexed by key/value store optimized for 3 types of queries\n// byPathRoleGuild is keyed by realmPath|roleName|guildID, if you know these 3 pieces of information\n// you can quickly find the discordRoleID linked to this realm and discord server\n// byGuildRole is keyed by discordGuildID|discordRoleID, if you know the discord server and role information\n// this will let you find the linked gno.land realm and role combination it is linked to\n// byGuildRealm is a nested AVL tree keyed by RealmPath and Guild, contains a nested AVL tree that\n// keeps track of all registered roles for that realm and discord server combination, making it easier\n// to perform membership lookups\ntype datastore struct {\n\tbyPathRoleGuild *avl.Tree\n\tbyGuildRole     *avl.Tree\n\tbyPathGuild     *avl.Tree\n}\n\nfunc newDatastore() *datastore {\n\treturn \u0026datastore{\n\t\tbyPathRoleGuild: avl.NewTree(),\n\t\tbyGuildRole:     avl.NewTree(),\n\t\tbyPathGuild:     avl.NewTree(),\n\t}\n}\n\nfunc (ds *datastore) set(claim *Claim) error {\n\tif claim == nil {\n\t\treturn errors.New(\"datastore: cannot set nil claim\")\n\t}\n\tif ds.getByPathRoleGuild(claim.realmPath, claim.roleName, claim.discordGuildID) != nil {\n\t\treturn errors.New(\"datastore: the unique path-role-guild key is already linked\")\n\t}\n\tif ds.getByGuildRole(claim.discordGuildID, claim.discordRoleID) != nil {\n\t\treturn errors.New(\"datastore: the unique guild-role key is already linked\")\n\t}\n\tds.byPathRoleGuild.Set(claim.PathRoleGuildKey(), claim)\n\tds.byGuildRole.Set(claim.GuildRoleKey(), claim)\n\tds.addRoleToPathGuild(claim.roleName, claim.realmPath, claim.discordGuildID)\n\treturn nil\n}\n\nfunc (ds *datastore) removeByPathRoleGuild(realmPath, roleName, guildID string) {\n\tkey := fmtPathRoleGuildKey(realmPath, roleName, guildID)\n\tvalue, removed := ds.byPathRoleGuild.Remove(key)\n\tif removed {\n\t\tclaim := value.(*Claim)\n\t\tkey := fmtGuildRoleKey(claim.discordGuildID, claim.discordRoleID)\n\t\tds.byPathRoleGuild.Remove(key)\n\t\tds.removeRoleFromPathGuild(claim.roleName, claim.realmPath, claim.discordGuildID)\n\t}\n}\n\nfunc (ds *datastore) removeByGuildRole(guildID, roleID string) {\n\tkey := fmtGuildRoleKey(guildID, roleID)\n\tvalue, removed := ds.byGuildRole.Remove(key)\n\tif removed {\n\t\tclaim := value.(*Claim)\n\t\tkey := fmtPathRoleGuildKey(claim.realmPath, claim.roleName, claim.discordGuildID)\n\t\tds.byPathRoleGuild.Remove(key)\n\t\tds.removeRoleFromPathGuild(claim.roleName, claim.realmPath, claim.discordGuildID)\n\t}\n}\n\nfunc (ds *datastore) getByPathRoleGuild(realmPath, roleName, guildID string) *Claim {\n\tkey := fmtPathRoleGuildKey(realmPath, roleName, guildID)\n\tvalue, ok := ds.byPathRoleGuild.Get(key)\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn value.(*Claim)\n}\n\nfunc (ds *datastore) getByGuildRole(guildID, roleID string) *Claim {\n\tkey := fmtGuildRoleKey(guildID, roleID)\n\tvalue, ok := ds.byGuildRole.Get(key)\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn value.(*Claim)\n}\n\nfunc (ds *datastore) addRoleToPathGuild(roleName, realmPath, guildID string) {\n\tkey := fmtPathGuildKey(realmPath, guildID)\n\tvalue, ok := ds.byPathGuild.Get(key)\n\tif !ok {\n\t\tds.byPathGuild.Set(key, avl.NewTree())\n\t\tvalue, _ = ds.byPathGuild.Get(key)\n\t}\n\troles := value.(*avl.Tree)\n\troles.Set(roleName, struct{}{})\n}\n\nfunc (ds *datastore) removeRoleFromPathGuild(roleName, realmPath, guildID string) {\n\tkey := fmtPathGuildKey(realmPath, guildID)\n\tvalue, ok := ds.byPathGuild.Get(key)\n\tif !ok {\n\t\treturn\n\t}\n\troles := value.(*avl.Tree)\n\troles.Remove(roleName)\n}\n\nfunc (ds *datastore) listRolesByPathGuild(realmPath, guildID string) []string {\n\tkey := fmtPathGuildKey(realmPath, guildID)\n\tvalue, ok := ds.byPathGuild.Get(key)\n\tif !ok {\n\t\treturn []string{}\n\t}\n\troles := value.(*avl.Tree)\n\tresults := []string{}\n\troles.Iterate(\"\", \"\", func(key string, _ any) bool {\n\t\tresults = append(results, key)\n\t\treturn false\n\t})\n\treturn results\n}\n"},{"name":"render.gno","body":"package role\n\nimport (\n\t// \"std\"\n\t\"gno.land/p/demo/mux\"\n)\n\nvar (\n\trouter = mux.NewRouter()\n)\n\nfunc init() {\n\trouter.HandleFunc(\"\", renderHome)\n\trouter.HandleFunc(\"link/d/{discordGuidID}/{discordRoleID}\", renderGetLinkedRealmRole)\n\trouter.HandleFunc(\"link/r/{discordGuidID}\", renderListLinkedRoles)\n}\n\nfunc Render(path string) string {\n\treturn router.Render(path)\n}\n\nfunc renderHome(w *mux.ResponseWriter, r *mux.Request) {\n\tw.Write(\"# Discord Role Realm Linker \\n\\n\")\n\tw.Write(\"Welcome. This realm is used for registering linked roles between Discord and a Realm.\\n\\n\")\n}\n\nfunc renderGetLinkedRealmRole(w *mux.ResponseWriter, r *mux.Request) {\n\tdiscordGuidID := r.GetVar(\"discordGuidID\")\n\tdiscordRoleID := r.GetVar(\"discordRoleID\")\n\n\tlrr := GetLinkedRealmRole(discordGuidID, discordRoleID)\n\n\tw.Write(lrr.ToJSON())\n}\n\nfunc renderListLinkedRoles(w *mux.ResponseWriter, r *mux.Request) {\n\tdiscordGuidID := r.GetVar(\"discordGuidID\")\n\tqueryParams := r.Query\n\trealmPath := queryParams.Get(\"realm\")\n\tif realmPath == \"\" {\n\t\tw.Write(\"No realm path in query, please use `?realm={realm_path}`\")\n\t\treturn\n\t}\n\tw.Write(ListLinkedRolesJSON(realmPath, discordGuidID))\n\n}\n"},{"name":"role.gno","body":"package role\n\nvar (\n\n\t// ds is the primary datastore for claims\n\tds *datastore\n)\n\nfunc init() {\n\tds = newDatastore()\n}\n\n// Link takes an encoded claim and saves it to the datastore, or it panics and rolls back the transaction\nfunc Link(encodedClaim string) {\n\n\tclaim, err := validateEncodedClaim(encodedClaim)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := ds.set(claim); err != nil {\n\t\tpanic(err)\n\t}\n}\n\n// UnlinkByClaim takes a base64 encoded string of a ed25519 signed claim, if if it passes\n// validation, it removes the linked role from registry.\nfunc UnlinkByClaim(encodedClaim string) {\n\tclaim, err := validateEncodedClaim(encodedClaim)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tds.removeByPathRoleGuild(claim.realmPath, claim.roleName, claim.discordGuildID)\n}\n\n// GetLinkedDiscordRole takes a realmPath, roleName, and discordGuildID and returns a LinkedRealmRole\n// If no link exists, it returns an empty LinkedRealmRole. The combination of realm path + realm role\n// + discord server gives a globally unique namespace to associate with a discord role id\nfunc GetLinkedDiscordRole(realmPath, roleName, discordGuildID string) LinkedRealmRole {\n\tclaim := ds.getByPathRoleGuild(realmPath, roleName, discordGuildID)\n\tif claim == nil {\n\t\treturn LinkedRealmRole{}\n\t}\n\treturn claim.RealmRoleDetails()\n}\n\n// GetLinkedDiscordRoleJSON returns a json encoded string for GetLinkedDiscordRole\nfunc GetLinkedDiscordRoleJSON(realmPath, roleName, discordGuildID string) string {\n\tlrr := GetLinkedDiscordRole(realmPath, roleName, discordGuildID)\n\treturn lrr.ToJSON()\n}\n\n// GetLinkedRealmRole takes a discordGuildID and discordRoleID and returns a LinkedRealmRole.\n// The combination of discord server + role id gives a globally unique way to identify this link.\nfunc GetLinkedRealmRole(discordGuildID, discordRoleID string) LinkedRealmRole {\n\tclaim := ds.getByGuildRole(discordGuildID, discordRoleID)\n\tif claim == nil {\n\t\treturn LinkedRealmRole{}\n\t}\n\treturn claim.RealmRoleDetails()\n}\n\n// GetLinkedRealmRoleJSON provides a json encoded string for GetLinkedRealmRole\nfunc GetLinkedRealmRoleJSON(discordGuildID, discordRoleID string) string {\n\tlrr := GetLinkedRealmRole(discordGuildID, discordRoleID)\n\treturn lrr.ToJSON()\n}\n\n// ListLinkedRoles takes a realmPath and discord guildID and returns a list of\n// all LinkedRealmRoles with based on role names.\nfunc ListLinkedRoles(realmPath, guildID string) []LinkedRealmRole {\n\tresults := []LinkedRealmRole{}\n\troles := ds.listRolesByPathGuild(realmPath, guildID)\n\tfor _, roleName := range roles {\n\t\tclaim := ds.getByPathRoleGuild(realmPath, roleName, guildID)\n\t\tresults = append(results, claim.RealmRoleDetails())\n\t}\n\treturn results\n}\n\n// ListLinkedRolesJSON returns a json encoded string for ListLinkedRoles.\nfunc ListLinkedRolesJSON(realmPath, guildID string) string {\n\treturn linkedRealmRolesToJSON(ListLinkedRoles(realmPath, guildID))\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"80000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"QQpiwDZzR/Z09I1IPumAhfD9ipMtqUXIP0WQDvvSFD5Q8JdEJxt4+Ehz/BTFtN0Ww5t7m3K7NZ74gZcqszvvDA=="}],"memo":""},"metadata":{"timestamp":"1745273736"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1aa5umzchlwqxtdfh58exmydmzsgpzcg3u9egcp","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"ikFvDGJKZGY8SFnZiWLO6FDW/pVAttb9LN5EOyK8Rp4cey/i6POns0yx7ZTpnt4EAduWar32XvIl09f5wRx+Dg=="}],"memo":""},"metadata":{"timestamp":"1745273741"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1j39fhg29uehm7twwnhvnpz3ggrm6tprhq65t0t","send":"","pkg_path":"gno.land/r/linker000/discord/user/v0","func":"Link","args":["IxRXnNuA+t9gfHEW/g+iYIul5q0cCS0aKFC7y3N1JSLtuAYOGkOBk54EKeEe3OvnI5knYmgiA+HCq0m1W3baCTE3NDUyOTUwODIsMTAzMDE5NDYzMDMzMzA1OTEzNCxnMWozOWZoZzI5dWVobTd0d3duaHZucHozZ2dybTZ0cHJocTY1dDB0"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xVEa7ikFGBUw3Gld9chhpAaVM8WogGqmy/GeL/zDCDwfEjc9Ct1MTS7yA0ySPTO58gwcTJ9nzZK7ghjDzbRaAg=="}],"memo":""},"metadata":{"timestamp":"1745295330"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1j39fhg29uehm7twwnhvnpz3ggrm6tprhq65t0t","send":"","pkg_path":"gno.land/r/linker000/discord/user/v0","func":"UnlinkByCaller","args":null}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"gBPxJx2xa9ey/esthVnMTNDnN7gs2vCP3EKn64nmj7SPTQTI4oJ7gCllPecHL0gIydq8csfrdJGkhypgfxZeDw=="}],"memo":""},"metadata":{"timestamp":"1745295445"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1j39fhg29uehm7twwnhvnpz3ggrm6tprhq65t0t","send":"","pkg_path":"gno.land/r/linker000/discord/user/v0","func":"Link","args":["KR1Pmt2kPEmL9orYYL+ud5Slh8GljzxFwHlNQXki/U7ksHzkxLjUGBrjXR7C9PAhfVHg0Cpv3huiCPp7suF9BjE3NDUyOTU0NzUsMTAzMDE5NDYzMDMzMzA1OTEzNCxnMWozOWZoZzI5dWVobTd0d3duaHZucHozZ2dybTZ0cHJocTY1dDB0"]}],"fee":{"gas_wanted":"50000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"AFg1mA8CzDmbjQkHIoc3QFcBsJu8kP6hacav/UTm3oOmhhIw8tSWDswW6Sq0RGaIZXrmMMSP+ryj9iKc/mulAw=="}],"memo":""},"metadata":{"timestamp":"1745295501"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1j39fhg29uehm7twwnhvnpz3ggrm6tprhq65t0t","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"AGfbpMdk6bffFqT1GWDfC9iAurq55BqAPVir51hYeSihFJNQS9w/UmsUxpMOBrKuAz9L5LSRzJzVyt4OLi6HBg=="}],"memo":""},"metadata":{"timestamp":"1745331567"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1j39fhg29uehm7twwnhvnpz3ggrm6tprhq65t0t","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"AGfbpMdk6bffFqT1GWDfC9iAurq55BqAPVir51hYeSihFJNQS9w/UmsUxpMOBrKuAz9L5LSRzJzVyt4OLi6HBg=="}],"memo":""},"metadata":{"timestamp":"1745331592"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1j39fhg29uehm7twwnhvnpz3ggrm6tprhq65t0t","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"AGfbpMdk6bffFqT1GWDfC9iAurq55BqAPVir51hYeSihFJNQS9w/UmsUxpMOBrKuAz9L5LSRzJzVyt4OLi6HBg=="}],"memo":""},"metadata":{"timestamp":"1745331602"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1j39fhg29uehm7twwnhvnpz3ggrm6tprhq65t0t","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"AGfbpMdk6bffFqT1GWDfC9iAurq55BqAPVir51hYeSihFJNQS9w/UmsUxpMOBrKuAz9L5LSRzJzVyt4OLi6HBg=="}],"memo":""},"metadata":{"timestamp":"1745331617"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1j39fhg29uehm7twwnhvnpz3ggrm6tprhq65t0t","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"AGfbpMdk6bffFqT1GWDfC9iAurq55BqAPVir51hYeSihFJNQS9w/UmsUxpMOBrKuAz9L5LSRzJzVyt4OLi6HBg=="}],"memo":""},"metadata":{"timestamp":"1745331627"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1j39fhg29uehm7twwnhvnpz3ggrm6tprhq65t0t","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"AGfbpMdk6bffFqT1GWDfC9iAurq55BqAPVir51hYeSihFJNQS9w/UmsUxpMOBrKuAz9L5LSRzJzVyt4OLi6HBg=="}],"memo":""},"metadata":{"timestamp":"1745331657"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1y00hfegs3dyvnj45udnvy646mcx3z288na0rl8","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"t25IfCKQlnYeMnAgeMwbwJyRCa9/zg5o9BrUs/A1ex2cuvseFDw8w9iuqloquARYpDGlaCaBifwhm5WUtJiCBw=="}],"memo":""},"metadata":{"timestamp":"1745360555"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1y00hfegs3dyvnj45udnvy646mcx3z288na0rl8","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"t25IfCKQlnYeMnAgeMwbwJyRCa9/zg5o9BrUs/A1ex2cuvseFDw8w9iuqloquARYpDGlaCaBifwhm5WUtJiCBw=="}],"memo":""},"metadata":{"timestamp":"1745360666"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1wakznah7y08cxszh3s2hcup277w3u7dfewatuy","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"vnLYYRgNq9xR84JEKJAkmCFrjgTHVI+40fy/HnuuZtUKjmowAhtVhgsgmThRiyIr3W7tqdiDX66+VzmWAzCZCQ=="}],"memo":""},"metadata":{"timestamp":"1745360816"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","package":{"name":"slicestest2","path":"gno.land/r/g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd/connecttest/slicestest2","files":[{"name":"gnostudio.gno","body":"// This file is automatically generated and contains metadata about this\n// package deployment. It serves as a marker that this package was deployed\n// using Gno Studio (or Gno Playground) and may be used by tools for analytics, verification,\n// and ecosystem features.\n//\n// This file does not affect package execution and should not be modified.\npackage slicestest2"},{"name":"package.gno","body":"package slicestest2\n\nimport (\n\t\"math\"\n)\n\nfunc IntSlice(vals []int) int {\n\tsum := 0\n\tfor _, v := range vals {\n\t\tsum += v\n\t}\n\n\treturn sum / len(vals)\n}\n\nfunc Uint64Slice(vals []uint64) uint64 {\n\tsum := uint64(0)\n\tfor _, v := range vals {\n\t\tsum += v\n\t}\n\n\treturn sum / uint64(len(vals))\n}\n\nfunc NestedSlices(vals [][]string) string {\n  out := \"\"\n  for _, arr := range vals {\n    for _, str := range arr {\n      if out != \"\" {\n        out += \", \"\n      }\n      \n      out += str\n    }\n  }\n\n  return out\n}\n\nfunc StrBoolIntSlices(a []string, b []bool) []string {\n\tout := make([]string, 0, len(a))\n\tif len(a) != len(b) {\n\t\tpanic(\"len of all args should be equal\")\n\t}\n\n\tfor i, s := range a {\n\t\tif !b[i] {\n\t\t\tcontinue\n\t\t}\n\n\t\tout = append(out, s)\n\t}\n\n\treturn out\n}\n\nfunc Dot(a, b []float64) float64 {\n\tif len(a) != len(b) {\n\t\tpanic(\"vectors must be the same length\")\n\t}\n\n\tvar sum float64\n\tfor i := range a {\n\t\tsum += a[i] * b[i]\n\t}\n\treturn sum\n}\n\nconst encodeStd = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#$%\u0026()*+,./:;\u003c=\u003e?@[]^_`{|}~\\\"\"\n\nfunc B91Encode(src []byte) string {\n\tdst := make([]byte, b91EncLen(len(src)))\n\n\tvar queue, numBits uint\n\tencode := []byte(encodeStd)\n\n\tn := 0\n\tfor i := 0; i \u003c len(src); i++ {\n\t\tqueue |= uint(src[i]) \u003c\u003c numBits\n\t\tnumBits += 8\n\t\tif numBits \u003e 13 {\n\t\t\tvar v uint = queue \u0026 8191\n\n\t\t\tif v \u003e 88 {\n\t\t\t\tqueue \u003e\u003e= 13\n\t\t\t\tnumBits -= 13\n\t\t\t} else {\n\t\t\t\t// We can take 14 bits.\n\t\t\t\tv = queue \u0026 16383\n\t\t\t\tqueue \u003e\u003e= 14\n\t\t\t\tnumBits -= 14\n\t\t\t}\n\t\t\tdst[n] = encode[v%91]\n\t\t\tn++\n\t\t\tdst[n] = encode[v/91]\n\t\t\tn++\n\t\t}\n\t}\n\n\tif numBits \u003e 0 {\n\t\tdst[n] = encode[queue%91]\n\t\tn++\n\n\t\tif numBits \u003e 7 || queue \u003e 90 {\n\t\t\tdst[n] = encode[queue/91]\n\t\t\tn++\n\t\t}\n\t}\n\n\treturn string(dst[:n])\n}\n\nfunc b91EncLen(n int) int {\n\treturn int(math.Ceil(float64(n) * 16.0 / 13.0))\n}"}]},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"85JkmrpaZg7nunwfzJGT9Ryc1EP9SKgRAmm9eYZ0Uh/GCvtdQV+cyAwC/kAr0GD09sPQWwyAj5hlknZ/wJxADQ=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1745433929"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1745458218_0","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"454642","gas_fee":"455ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"tPvr6OvNnzhIyLUHkQ8qqPLgo5WtNpY5rYJskM1PKILr6RZbaLvpHuRHG1mkg/57k4FMJaxSw175oRkPOQmYAw=="}],"memo":""},"metadata":{"timestamp":"1745458217"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1745458218_1","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"454642","gas_fee":"455ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"95f7eeYlkm8LQsNIXCiUW0WLFV5krgmOG6luDRkQpgS/HSZHXFyIGuQA1ztnTIClgnRCW12gbqLy73EdHfyuAQ=="}],"memo":""},"metadata":{"timestamp":"1745458217"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1745458218_2","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"454642","gas_fee":"455ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"pc9ACl7Mm7ajQeElaWiiedhk4weT7I+TJNHZoN8dyS6vwjZtgM5o8QYt2N0rYNCrDZhOegdMM8Bk3etTW1CEBg=="}],"memo":""},"metadata":{"timestamp":"1745458217"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1745458218_3","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"454642","gas_fee":"455ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"OaPslfme7zEJZ/rHixEqao9W7AllFomsxNjSLikifurY4rOZ1EU7qE0kRAifagpJF5AUP3sNV82s3HPMKL0FBA=="}],"memo":""},"metadata":{"timestamp":"1745458217"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1745458218_4","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"454642","gas_fee":"455ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"SGoSQR2Imnjzr+zyhdzUh3BaZJ+an0mqCO7Okb8vXXsGcs1sFUis/0cA/Qirr5sA0MeXSPm9bBiNldTI/ICvDw=="}],"memo":""},"metadata":{"timestamp":"1745458217"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1745458218_5","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"454642","gas_fee":"455ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"B7XV6mwv+4Ut/0RvXyb3kHOhO/tIy4k2WLnvmDQxmn253SNHiMsNYyHmHZTKj4Tv32mhnxkRae94iYIpwsmHDQ=="}],"memo":""},"metadata":{"timestamp":"1745458217"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1745458218_6","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"454642","gas_fee":"455ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"NN2BApJUdNUK3k/xlhc7KTpGfic0CeWap/LahA7lieR8gefAiaS4CD3lM4F/seIrUMB4jjSNo3l9/+iLjWzODg=="}],"memo":""},"metadata":{"timestamp":"1745458217"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1745458218_7","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"454642","gas_fee":"455ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"A6frR5U94tbcr88vchx4MhmSmCe7VAQ+k954oPIcX1G6lweI1ZjcD59sRGfrv2OIHaVIWSJbx8gFSeZxMjINDQ=="}],"memo":""},"metadata":{"timestamp":"1745458217"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1745458218_8","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"454642","gas_fee":"455ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"k3jihO4I19plZHjw4V7QphKcW+gmJc35r3alYiedAHfG/RxXFqIVia49NkiAD+rOqi2CI84VIbDkp9x6W+o4Dg=="}],"memo":""},"metadata":{"timestamp":"1745458217"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1745458218_9","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"454642","gas_fee":"455ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qA8E2FKIxIjFx573cGzPclmhrd+usCmF6SIl9Gwtsz4jDOV7vzpytMwJfbTpgyNGZgLBtKfW/cTv94xDKD3TDA=="}],"memo":""},"metadata":{"timestamp":"1745458217"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["kernel-realm","Gno realms vs system kernels","\n\nLet's explore the analogy between Gno and existing operating systems.\n\nIn computers, the role of the operating system is to isolate each process from\nthe others, for memory integrity and security, and to control access to system\nresources, including time sharing access to the CPU. It also lets processes\ncommunicate with others, or externally through the network.\n\nThe operating system provides those capabilities through the kernel, which\nexecutes system calls.  When invoked by a user process,  the kernel switches\nthe CPU into a privileged mode, to perform the services outside user reach.\nEach resource located outside the process means the private user memory must\nbe manipulated through system calls. This is done under the strict supervision\nof the kernel, which acts as a neutral trusted facilitator between untrusted\nprocesses. On bare metal systems, this is enforced by the hardware itself.\n\nGno is a distributed multi-user virtual computer implemented on top of the\nblockchain, ensuring all operations execute deterministically. The distributed\nstorage layer of the blockchain provides Merkle trees and consensus-based\nverification that makes program code and memory tamper-proof. \n\nIn Gno, the equivalent of computer processes are *realms*. Each realm is like\nan always-active process, running forever, similar to a web server. In a\nregular system, a live process is defined by its Process Identifier (PID, a\nnumber set by the system for the life of the process), its memory, and the set\nof system resources it uses at a given time (files, connections, etc).\nSimilarly in Gno, a realm is defined by its identity (a unique package path),\nits global memory state (the content of memory when the realm is at rest),\nwhich may contain for example the amount of coins it retains.\n\nA realm may provide services to other realms through the exported\nfunctions it declares, and it may use services provided by other realms by\nimporting the realm using an `import`  statement, and directly calling its\nfunctions in code. The way of declaring exported functions and importing them\nis exactly identical to how packages are defined in the Go language. A realm is\na Gno process, but is also a package (in the Go sense).\n\nFunctions in packages can be pure (in the functional programming sense: the\nfunction has no side effects and operates only on temporary local variables\nwhich are discarded at return), or not: some variable outside the function\nscope is modified. In that case, the modified variable must be defined in the\nsame package as the function. Functions can only write to global variables\ndeclared within their own package space (assuming variables are unexported),\nand static code analysis, as in Go, enforces this rule.\n\nHowever, since realms are also stateful processes with their own identity and\nprotected space, and because a process can write only in its own space, calling\na non-pure function imported from another realm means that the caller realm\nwould attempt to write in the callee realm space, which is forbidden!\n\nTo resolve this, the current realm identity is switched from the caller to the\ncallee until the function returns, like when crossing the user-kernel boundary\nin a regular system call. From the system's point of view, the current realm is\nset to the callee, the previous realm to the caller. At function return, the\ncurrent realm and previous realm are restored to their original value.\n\nSo non-pure exported functions act exactly like a system call: they provide the\nability to write outside the calling realm space, by crossing the realm\nboundary. A realm doesn't need to trust the calling realm: only itself can\nwrite in its own space. A realm doesn't need to trust an external kernel: it is\nits own kernel, it decides exactly how its data can be accessed and/or modified\nby caller realms.\n\nGno unifies the concepts of Go packages and Unix processes in a single, simple\nconcept: the realm. The kernel is decentralized and put back in control of\npackage developers. The operating system itself becomes transparent: realm\nprocesses are both resource users and providers, with full control and\naccountability.\n\nIn Gno, programs are processes are packages are realms. Gno rethinks the\ntraditional boundaries between processes, packages, and system calls. By making\neach realm self-contained and in control of its own state, it replaces the need\nfor a central kernel with a decentralized model where programs define their own\naccess rules. It’s a practical and minimal approach to building secure,\ncomposable software on-chain.\n","2025-06-09T13:17:22Z","mvertes","kernel,process,realm"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"BeprFWAk+uWgjy3aQU62DFI9P7tJ+XO80bVNsiov8ZuKLW5wRfiuZmqqy5i4fZ4KLtnqeBBD2ZErGowKc/3zDQ=="}],"memo":"Posted from gnoblog-cli"},"metadata":{"timestamp":"1750175701"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","send":"","pkg_path":"gno.land/r/gnoland/blog","func":"ModAddPost","args":["gnoland-the-first-logoverse","Gno.land - The First Logoverse, or Alternate Reality of Logical Objects","\n\nTendermint changed the way blockchain developers think about blockchain\nconsensus algorithms. Gno.land will change the way developers think about\nprogramming.\n\nGno.land represents a paradigm shift in multi-user programming that no other\nsolution offers. It is not just a smart contract platform and blockchain; it is\nthe world's first viable language-based multi-user operating system. Its\nultimate goal is to host the world's knowledge base for the new millennium.\n\n## Why Gno.land?\n\nCompare publishing a blog site in Gno.land to all prior smart contract systems.\n\n```go\n// Realm: gno.land/r/me/myblog\n\npackage gnoblog\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/blog\"\n)\n\nvar b = \u0026blog.Blog{\n\tTitle:  \"gno.land's blog\",\n\tPrefix: \"/r/gnoland/blog:\",\n}\n\nfunc AddComment(postSlug, comment string) {\n    crossing()\n\tassertIsCommenter()\n\tassertNotInPause()\n\n\tcaller := std.OriginCaller()\n\terr := b.GetPost(postSlug).AddComment(caller, comment)\n\tcheckErr(err)\n}\n\nfunc Render(path string) string {\n\treturn b.Render(path)\n}\n```\n\nYou can see the Gno source code that rendered this webpage by clicking\non \"\\\u003c\\/\\\u003eSource\" on the top right of the webpage.\n\nQ: Why is everything else so complicated?\n\nA: Strangely difficult to answer, but ultimately because our languages,\ncompilers, interpreters, and programming paradigms are still evolving.\n\n## Brief Evolution of Language\n\nWritten human language has only been around for a mere 6000 years, a blip in\nour evolutionary history. Like living species, our language and writing have\nevolved alongside us and within us. Adam was not the first Homo sapiens on\nearth, but he may have been the first with written language, and thereby a new\nkind of man. \n\nProgramming languages likewise have been evolving rapidly, but only for a\nhandful of decades; it was in the 1970s when Alan Kay developed Smalltalk, the\nfirst object-oriented programming language. In the 1990’s Brendan Eich of\nNetscape invented JavaScript which forever transformed the World Wide Web; Sun\nMicrosystem made Java, and industries prospered greatly by these and similar\nlanguage technologies. \n\n## Gno vs Previous\n\nOur languages, compilers \u0026 interpreters, and programs are today:\n - Nondeterministic - randomness is the norm in concurrent programming, but\n   even Go randomizes map iteration. \n - Disk Bound - programs need to be designed to save to disk —\u003e SQL solutions;\n   NOT native language\n - Dependent - running programs are owned by an owner; dependent on\n   individuals, not self-sustaining\n - Ephemeral - running programs are expected to fail; no guarantee of\n   presence.\n - Single User Realm - import of internal libraries are native, but\n   interactions with external programs are NOT native; generally no `import\n   “gno.land/r/external/realm”`, but leaky abstractions synthesized ie GRPC\n\nGno, GnoVM, and Gno.land is in contrast:\n - Deterministic - gno routines not yet supported, but even these will be\n   deterministic.\n - Auto Persistent - all changes to instantiated Gno objects in the transaction\n   are persisted transparently.\n - Self-Sustaining - every transaction locks $GNOT up for new storage allocated;\n   CPU gas fees paid in any language.\n - Timeless - every Gno object that is referenced (not GC’d) remains forever.\n - Multi User Realm - all objects are stored in realm packages (namespaces). \n\n## Gno Language Innovation\n\nAll modern popular programming languages are designed for a single programmer\nuser. Programming languages support the importing of program libraries natively\nfor components of the single user's program, but this does not hold true for\ninteracting with components of another user's (other) program. Gno is an\nextension of the Go language for multi-user programming. Gno allows a massive\nnumber of programmers to iteratively and interactively develop a single shared\nprogram such as Gno.land.\n\nThe added dimension of the program domain means the language should be extended\nto best express the complexities of programming in the inter-realm (inter-user)\ndomain. In other words, Go is a restricted subset of the Gno language in the\nsingle-user context. (In this analogy client requests for Go web servers don't\ncount as they run outside the server program).\n\nGno is Go plus:\n - [`cross(fn)(…)`](https://github.com/gnolang/gno/blob/master/docs/resources/gno-interrealm.md#crossfn-and-crossing-specification)\n   calls `fn(…)` where fn is another realm.\n - `std.CurrentRealm()` and `std.PreviousRealm()` changes upon cross-calls.\n - `func fn() { crossing(); … }` signifies that fn is a crossing-function where\n   std.CurrentRealm() returns the realm in which the function is declared.\n   [Gno2 proposed syntax](https://github.com/gnolang/gno/issues/4223):\n   `@fn(…)`, `@func @fn() { … }`. These are like verb (function) modifiers in\n   [honorifics in Korean and Japanese](https://en.wikipedia.org/wiki/Honorifics_%28linguistics%29)\n - While all data is readable by other realms, dot.selector access\n   across realms get [tainted with 'readonly' attribute](https://github.com/gnolang/gno/blob/master/docs/resources/gno-interrealm.md#readonly-taint-specification).\n - [`revive(fn)`](https://github.com/gnolang/gno/blob/master/docs/resources/gno-interrealm.md#panic-and-revivefn)\n   for Software Transactional Memory (STM). \n - Function/method return implies access without readonly taint.\n - Inter-realm type conversion limitations to prevent exploits.\n - More and refinements to come in Gno2.\n\nThese language innovations/extensions allow for safer multi-user application\ndevelopment where many users are collaboratively programming a single timeless\n(immortal) communal program.\n\n## The Logoverse\n\nἘν ἀρχῇ ἦν ὁ Λόγος καὶ ὁ Λόγος ἦν πρὸς τὸν Θεόν καὶ Θεὸς ἦν ὁ Λόγος.  In the\nbeginning was the Word (Logos), and the Word was with God, and the Word was\nGod. - John 1:1\n\nLogos means “word, discourse; reason”, and shares its root with the word\n“logic”. \n\nWith these elements altogether you can derive a new property:\n - Gno expressions become \"real\" on Gno.land.\n - Ethereum comes close but isn't object-oriented and Solidity has no pronouns.\n - TBL's WWW, DOM model, HTTP verbs, Plan 9, Ethereum, and FB Meta are all\n   attempts to arrive at the logoverse.\n - Gno.land is the first complete logoverse.\n\n## Adoption Strategy\n\nThere are over a million Go developers and growing. Go as a language remains a\npopular language for developers, an order of magnitude more than Rust\ndevelopers, on par with JavaScript developers but growing faster than\nJavaScript.\n\n[![TIOBE 2025](https://gnolang.github.io/blog/2025-05-05_gnoland-the-first-logoverse/src/thumbs/tiobe_2025.png)](https://gnolang.github.io/blog/2025-05-05_gnoland-the-first-logoverse/src/tiobe_2025.png)\n[![GitHut2 2024](https://gnolang.github.io/blog/2025-05-05_gnoland-the-first-logoverse/src/thumbs/githut2_2024.png)](https://gnolang.github.io/blog/2025-05-05_gnoland-the-first-logoverse/src/githut2_2024.png)\n\nGno.land and its associated network of Gno VM chains, and AtomOne if it hosts\nit, will become the nexus of human to human, human to machine, and machine to\nmachine coordination; but only after it finds a self-sustaining organic growth\ncycle.\n\nThe best way to ensure success and to accelerate adoption is to seed the\ninitial community with the right community. There are many types of\ncommunities, such as the crypto community, ethereum community, student community,\nbut since Bitcoin has gone mainstream, these communities aren't always in\nagreement about the purpose of blockchain technology; because they aren't aware\nof the history and fabric of the hidden power structures that run the\nnarrative--both mainstream AND controlled oppositions. They do not feel that\nthey need something, so their habits are not as obvious to change.\n\nBut the \"free-thinking\" and \"conspiracy\" and \"anti-war\" and \"anti-Covid19-vax\"\nand even the \"true Christian\" communities feel an urgent need for\ncensorship-proof coordination and communication tools. These communities have\ninfluencers who are kept hidden from the broader public; they have suffered\ndeplatforming, defamation, and even death.\n\nBuild tools, connections, and relations with these particular communities and\nespecially those influencers who are nuanced in their research and speech.\nEven those that don't promote crypto will see the benefits uniquely offered by\nGno.land.\n\n## Gno.land License\n\nAnyone can make Gno VM powered chains derived from Gno.land according to the\nviral copyleft license terms and strong attribution requirement. The Strong\nAttribution clause of the Gno Network GPL license preserves the spirit of the\nGNU AGPL license for the blockchain world.\n\n## Tokenomics\n\n$GNOT is the storage lock-up utility token, so Gno.land is to Gno England like\n$GNOT is to presence in Gno England, where total storage is kept finite for\nvery-long-term existential purposes, and value is derived from the Gno\nartifacts created by its users, and some new users competing for attention from\nmany existing users.\n\nGno.land may migrate to AtomOne ICS once it is support hard-fork upgrades.\nThere Gno.land would be one ICS shard, and many Gno VM shards may also exist,\neach with their own namespace and probably each their own storage token unless\nseparate treaties are made between the main Gno.land chain (ICS shard) and\nother Gno VM shards. Transaction fees for CPU usage may be paid in either $GNOT\nor $PHOTON.\n\n## Team\n\n### New Tendermint, LLC\n\nNewTendermint, LLC is the core maintainer of the GnoVM, Tendermint2, and \nat present Gno.land.\n\n#### GnoVM \u0026 Gno.land Core Team\n\n * Jae Kwon before and after creating Tendermint and Cosmos always had a\n   passion for programming languages and wrote multiple parsers and\n   interpreters, and initially also wrote an EVM on top of the framework which\n   became the Cosmos SDK. Gno.land is the result of two decades of search for\n   the logoverse.\n\n * Manfred Touron, builder focused on open-source and resilient technologies;\n   co-founded scaleway (cloud) and berty (p2p messaging), with contributions to\n   900+ open-source projects.\n\n * Miloš Živković - Senior distributed systems engineer; passion for solving\n   protocol-level problems in the blockchain space.\n\n * Morgan Bazalgette - Senior Go engineer; bringing the joy of developing Go to\n   Gno.\n\n * Ray Qin - With over 15 years of experience in software development and\n   building large-scale networks, I have a deep passion for Go programming\n   language and blockchain technology.\n\n * Marc Vertes - Senior VM and hardware developer; more than 3 decades of\n   experience, Co-founder of 3 companies (1 acquired by IBM), author of 34\n   patents, author of the Yaegi Go interpreter.\n\n * Alexis Colin - Senior Frontend Engineer with 10+ years of experience\n   building user-focused interfaces and exploring modern tech stacks. Driven to\n   push forward efficient UX in the blockchain space through clean code and\n   technical precision. Currently working on gnoweb.\n\n#### Gno Studio Team\n\n * Ìlker Öztürk - Senior software architect; 17 years in building and designing\n   products, distributed p2p systems, leadership and strategic vision.\n\n * Jerónimo Albi - Experienced full-stack systems engineer with attention on\n   simplicity and minimalism, focused on Blockchain and Golang development\n\n * Salvatore Mazzarino - Site Reliability Engineer with over 10 years of\n   experience in building and mantaining high and scalable distribute systems\n   across different range of platforms. \"If it is not monitored, it does not\n   exist\"\n\n * Danny Salman - Vast experience in blockchain developer relations, technical\n   writing and education, and product, with a background in full-stack\n   development, engineering, and policy.\n\n * Alan Soares - A Brazilian lost in middle earth.  Passionate coder with love\n   for open-source and software craftsmanship. Taking the web forward for over\n   16 years.\n\n * Lucio Caetano - Senior Frontend Engineer with 10+ years of experience\n   building web applications, specializing in web3 and blockchain technologies.\n   With a background in data analysis, providing data-driven decisions and\n   reporting with large datasets.\n\n### All in Bits, Inc \n\nMembers of All in Bits, Inc also build applications and community on top of\nGno.land.\n\n * Kristov Atlas - Since 2012, I’ve been a crypto security engineer and\n   researcher focusing on non-custodial wallets, CeFi exchanges, Bitcoin,\n   Ethereum, and the Cosmos ecosystem.\n\n * Michelle Leech - Experienced marketing and ecosystem builder skilled at\n   creating and driving strategic initiatives that foster relationship building\n   and boost developer advocacy, engagement, education, and product\n   utilization.\n\n * Lav Leon Hudak - DevRel Engineer with a strong background in blockchain\n   development, documentation, and education.\n\n * Sean Casey - CFO (Chief Financial Gnome) - 10+ years’ experience in finance,\n   aircraft leasing, and blockchain. Leads financial strategy, and treasury\n   operations, ensuring capital discipline, regulatory compliance, and\n   long-term value creation.\n\n * Jordan Magazine - Experienced General Counsel with over a decade of\n   practice, specializing in designing frameworks that enable blockchain\n   ecosystems to operate with clarity and compliance, empowering projects to\n   scale confidently and with integrity.\n\n * Carolyn Pehrson - Paralegal keeping AIB,Inc and NT,LLC alive. Thinks you\n   should get a pet mini pig.\n\n### Onbloc Co., Ltd.\n\nOnbloc Co., Ltd. is a core contributor to Gno, delivering essential tools to \nthe Gno.land ecosystem—including the Adena Wallet, GnoScan Explorer, and GnoSwap \nAMM DEX—for both developers and everyday users.\n\n * Dongwon Shin - Blockchain evangelist and product‑driven builder, obsessed with\n   user experience and ecosystem growth. Before founding Onbloc, he worked on several\n   crypto initiatives, including a research firm, a crypto exchange, and a consulting firm.\n\n * Peter Yoon - Blockchain advocate and strategic specialist. A long-time supporter\n   of Cosmos since its inception, he was an early member of Cosmos Korea and founded\n   Lunamint, the first crypto wallet integrated with Telegram.\n\n * Jinwoo Choi - Full-stack engineer behind the Adena Wallet and GnoScan, with\n   extensive experience building stable and scalable software systems. Passionate\n   about designing robust architectures that endure scale and complexity.\n\n * Byeongjun Lee - Core engineer for Gno.land and the GnoSwap project, passionate about\n   compilers and programming languages. He's dedicated to making developers’ lives easier.\n\n * Andrew Kang - Experienced product manager and researcher, skilled at identifying\n   trends and driving strategic initiatives that advance the crypto ecosystem.\n","2025-05-05T00:00:00Z","jaekwon","gnoland"]}],"fee":{"gas_wanted":"100000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"4y35MUwqmGB4arDmBila0mw6ph+zR1nqmr0Rrmranh31g0HwQx4yAN/JVJg9jT4+pBekgFnsTj5K0GZzPdvJAA=="}],"memo":"Posted from gnoblog-cli"},"metadata":{"timestamp":"1750175726"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1nmczthfmwhl36w6hewn7wl93mz762kd3nh9rlf","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"wGq+CUkHVfBzB+8NcIOhIJu6/efC0l0ticm/etHUYprESffY6Wv++x23uvmje0Pm0HxrgiCqAHyaJy2VHHpRBg=="}],"memo":""},"metadata":{"timestamp":"1750178049"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1nmczthfmwhl36w6hewn7wl93mz762kd3nh9rlf","to_address":"g1nmczthfmwhl36w6hewn7wl93mz762kd3nh9rlf","amount":"1000000ugnot"}],"fee":{"gas_wanted":"48313","gas_fee":"49ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"QCFHzgTsY3CVFIwYLeMAJdFWOZ7tLcTR4eWW0xUs6dUjkvmnITp2DBYgccCtLkGNOU3mL107IUZJpHZWKnLhAw=="}],"memo":""},"metadata":{"timestamp":"1750178064"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","to_address":"g1m6y3zt3cu8rka86cczw4vtcp7fvu4z46tj0wqj","amount":"11000000ugnot"}],"fee":{"gas_wanted":"46096","gas_fee":"47ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"S6eSIs0vBGYR30Rsjz2ytBEBl1nWDQWh5eDKVNUWV5ISaI3EyehzoMkSVImyL3hMYOte0j9qrmN2KKoznyFhBw=="}],"memo":""},"metadata":{"timestamp":"1750216990"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","to_address":"g16qa3v5u8m7x55dx8l0xacqwdecxzjp4thdpdhw","amount":"1000000ugnot"}],"fee":{"gas_wanted":"45966","gas_fee":"46ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"fqI9dGiyeW/sZx5SL1q3AksC8vJ0hdff6mBoZcfHggDXfVZ7q0nbJDCfa8189+yjg7Rd9V0GTajcz0I7jad0Dg=="}],"memo":""},"metadata":{"timestamp":"1750295446"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1utesex52ndszqs2afg6fhhc0hqlrfee6ngjw9x","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"zZoUwUm5FIHmdZlC1+LXa95wKU6/8BhmFoQxFhXouOYqTbdqOk/Ipbb1+rnj7oYIfq0GP6a8przNrJ1fpgJ1AQ=="}],"memo":""},"metadata":{"timestamp":"1750299301"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1utesex52ndszqs2afg6fhhc0hqlrfee6ngjw9x","to_address":"g102zd05gsvsa8vt4jmk6zar4udx9wggyxq56l3w","amount":"5000000ugnot"}],"fee":{"gas_wanted":"48758","gas_fee":"49ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"vB3JHuiYXNjV5Eiw2OjLsJQuVc6BD5K/QMPl6g6/UGNFsqnK4abvAMgzqeVTrQmclZoAGoCb7KQ9dHEVwUVBCg=="}],"memo":""},"metadata":{"timestamp":"1750299327"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1y7ymzrsxarh94afaytlnfpl0x2yarwzusuvxzs","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"TuOJcQ/u+q9/TXRzreRDB+3D9Jixl45UbHSDRqbaL0l8lTiLac/KQcCJ+4MzRQEDkUr0pm9Saype5nu2KFH/Bg=="}],"memo":""},"metadata":{"timestamp":"1750299402"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1sjp73mlzpj9cv48vm94pq2nkq8qs5yh9suzrau","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"hPVQrGVIWEiXj64xSYSc0V6hgIr3Yl7ICtjlUTnpIPxcIp52QWcrkX+k7JQeU/b3HOojT5YLA0e9f+XyP1AcCw=="}],"memo":""},"metadata":{"timestamp":"1750299482"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1xudtpfn8fm0sk4y8q26pjy9u3htcfpgfrv03lg","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"9dJbQvt57tuEWgZK7vg8LdzHf3VS0g70CvysMVaXWRHN2zIITScFL0EmYB8E2mSbpJ4yVuD4oAP041t7yaaaBg=="}],"memo":""},"metadata":{"timestamp":"1750302799"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g13mwq7wcx58v2320et3n5fu2x08ymfrmn3dvz2d","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"xXvLOe9oNsPykwq8YgTaz1VdyJ1nsYiZFEYDvIHxAzIF5fAZ0kE3JNznPbe93ZaFJaoWOt8g1L13l7DhxGWyBw=="}],"memo":""},"metadata":{"timestamp":"1750302945"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13mwq7wcx58v2320et3n5fu2x08ymfrmn3dvz2d","to_address":"g1c4pwtp94c36y6w0apg34fluwg46xmpzqnwwtzk","amount":"3000000ugnot"}],"fee":{"gas_wanted":"48758","gas_fee":"49ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"5KI4Yn72L+eDK8G7EY+dWdq8Tbg44glLjaypf6tTn1dOFrBYhodABj25WGwvfs4KNPgOw+MYaeg8tEbjTT77AQ=="}],"memo":""},"metadata":{"timestamp":"1750303006"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1smr6exgm86ycjwr283fp78szq8zpell5gdrpdf","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"qPZvH9XbeA1WMKB/kNBoaMY6A0GiNAOtXRjFcslbcmRgzi2L5ku9zZviW1OJMHmabaIWUbkQQ8c9anXr3elEBg=="}],"memo":""},"metadata":{"timestamp":"1750309238"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1smr6exgm86ycjwr283fp78szq8zpell5gdrpdf","to_address":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","amount":"2000000ugnot"}],"fee":{"gas_wanted":"48461","gas_fee":"49ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"geRLwwxLdGyYR/GGYj1qbyBWhOloVENym7/licD3KMctekot+DJtXKt6yOAGPbGtTW5Z6IOmE9vrLpv5UgATBA=="}],"memo":""},"metadata":{"timestamp":"1750309268"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1smr6exgm86ycjwr283fp78szq8zpell5gdrpdf","to_address":"g1z40f70cwczka9zuwhar0agp8yhp877nsc7zmvt","amount":"1000000ugnot"}],"fee":{"gas_wanted":"48831","gas_fee":"49ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"iTkK1UbsZgTiHrBI7NupmBPMEpzOuX/UfUp+f5uPvfcnStKAiC8Aa6dB9gpjxdzY52ODl6Q3j6JzSr+Eg2bPCw=="}],"memo":""},"metadata":{"timestamp":"1750309278"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1qlz4nw42f335u803289fmlj9u5ecqjre20nagz","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"tA9eoJMdq7nZchxzQWxRV9P33oXIx59ZsiPw536k1Z8PnWBaulXTeMK/u46YzEKnQwK1eoYtIqrq1HkxTeruDw=="}],"memo":""},"metadata":{"timestamp":"1750309378"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1ker4vvggvsyatexxn3hkthp2hu80pkhrwmuczr","amount":"5000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"/KnVKWip7F8ReFqK0bZzYGUavhmvVHp0TPEQZ0SFaPXqM5hmpmg2De0+WsngSnnGS0S5CorYKmTath0bxtmkAg=="}],"memo":""},"metadata":{"timestamp":"1750342411"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1e6gxg5tvc55mwsn7t7dymmlasratv7mkv0rap2","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"EOSgK2H4KxLEXCL35H0rMnJWQPVgmx/rAam/0WIdn42eID9/E33IW4jC75I6uVLUTza5WS921FyXySfO0JDECw=="}],"memo":""},"metadata":{"timestamp":"1750342442"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g13kytw9mpyutwmyg5eq7arqxqcszfl6uq4p89zg","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Lx7BliouQ5f6ybMC0c5djUjxfyV5ReR2aBm9p1qmTWrlTkGoKzlTBLHZgaTGP6Hsvbeobuqt1NJPTrwqvsmUCg=="}],"memo":""},"metadata":{"timestamp":"1750347553"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g13kytw9mpyutwmyg5eq7arqxqcszfl6uq4p89zg","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Lx7BliouQ5f6ybMC0c5djUjxfyV5ReR2aBm9p1qmTWrlTkGoKzlTBLHZgaTGP6Hsvbeobuqt1NJPTrwqvsmUCg=="}],"memo":""},"metadata":{"timestamp":"1750347729"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g13kytw9mpyutwmyg5eq7arqxqcszfl6uq4p89zg","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Lx7BliouQ5f6ybMC0c5djUjxfyV5ReR2aBm9p1qmTWrlTkGoKzlTBLHZgaTGP6Hsvbeobuqt1NJPTrwqvsmUCg=="}],"memo":""},"metadata":{"timestamp":"1750347744"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1yamrs6u442927qgkltahcqrk37huhv6285zzrl","amount":"5000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"zZo+AaUQu5QNWps/bRQAHzG4omZ0oTFgbsaa/89j6H5lUBIvpxxsBvUdd5RrJn078VHBcr1BZ+jxuYtZ+tLTCg=="}],"memo":""},"metadata":{"timestamp":"1750390498"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hhtaell4jfjdxfylxlnhspjq3t9wje3gjf4p54","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"+u+MbmwWxZxaDQC1v1y63dUS8G2ZbpksSC3009t+72Xho1urIkPvebwlRCN9PHEd6QDMMDVyZDQ7R0kW5pE2CA=="}],"memo":""},"metadata":{"timestamp":"1750391358"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1e6gxg5tvc55mwsn7t7dymmlasratv7mkv0rap2","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"VTZjsfMuqs5ZxcO0fn1hLQfzREAmzYRuCkSMmGrI9IFyv0qalTGeWEt5/w2tjNCbZbSIuZqEA2aVwbz9PuhzAQ=="}],"memo":""},"metadata":{"timestamp":"1750411678"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18q9q9ygzcdj4yh47ywex5j6nhmk05qmwkqqnrd","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"PGnFkuex1vQGso7D9dv50263xCy0U/V/q8MjG0oa0ylEw6fQBFVjvfLuYLEwWTC4oL6Pmt+GrhmKErm5l7XGCg=="}],"memo":""},"metadata":{"timestamp":"1750505296"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g13uje7wyghhh4dfpdll8sjayzatacuqujft0pej","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"6pIJVS0IHVyUVRAg816Y66RSNiMyiJSJ64oq2eAltzKvsiM7su70UqJGYLeNiSz3uzDvwNeX1GLmQwEHsLicDg=="}],"memo":""},"metadata":{"timestamp":"1750560192"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g10tkwdlafzxgkusg3hqh0yj3wvdmvhx3taxrs9c","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"10000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"YZVDXsUMnv6sbDRKaRmV3FPmRXD1vGeVmSBIVS/EWv/FzVMMIENL1bPzZHY7b4MbsgS9AoXwDro1TkXhqwEeCw=="}],"memo":""},"metadata":{"timestamp":"1750561081"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hhtaell4jfjdxfylxlnhspjq3t9wje3gjf4p54","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"+u+MbmwWxZxaDQC1v1y63dUS8G2ZbpksSC3009t+72Xho1urIkPvebwlRCN9PHEd6QDMMDVyZDQ7R0kW5pE2CA=="}],"memo":""},"metadata":{"timestamp":"1750570258"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g17amut3c6g0pej326n6nq56pgd63ulmu74ars5g","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"2O/IhlUEqP4V4SM5FGY8TxWK3t4oTUJHsd3+YjCMx09Vm56LP8hAA0QXYD7aMOGPfcXaPrh6nhq0Hu5nBttNCA=="}],"memo":""},"metadata":{"timestamp":"1750571424"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g17amut3c6g0pej326n6nq56pgd63ulmu74ars5g","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"gwp+Lz+Ne+hzdhuzG5SNDf1bB84vYhwUM8SDbc+l1/nribzs2lOFeIzbyQr450qe1xmgOn/koIV7wENOUP1SDg=="}],"memo":""},"metadata":{"timestamp":"1750571484"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g17amut3c6g0pej326n6nq56pgd63ulmu74ars5g","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["testvault234"]}],"fee":{"gas_wanted":"20000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"rjWQPyD6BW5PVs/kjAdyl2yRtviIhIcXcQohQwMAxfaPRC8nchuacdfDnKMj3LS9t9pEFAWzhOWspXeBpH1BBA=="}],"memo":""},"metadata":{"timestamp":"1750571494"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1vyxrpfledz4vxe76zp02varayc0n0vy5er8u3u","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Z7RdNBnm45QOm7JN4ic+7LsMZcIxB8hPFXPDP8rMZXeTX7u+xcjVnVdKZpZiywovdlnprHPjCkQSOqau4CaKAQ=="}],"memo":""},"metadata":{"timestamp":"1750600070"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1x28tyqaydlkypuxxr3en0tppzmg47d0guzlr5w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Q8YJ6GzR9TzgFuOaAWXMX2f191nfsoytfbyAoJq5CIp+PzW6LnxwD2OPX0zA8NemRMeYHQ4lceqdDUyW13rfDA=="}],"memo":""},"metadata":{"timestamp":"1750606925"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g10ytj0g07883z30vyraz27aet7vf9n7vh3yetjl","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"HvgGgBsFcqs7UlL0f6N5HW8vd3orBGZOYvCZvu1uaiBXUe5IdE9Wunu+LqL4/wXWnt3c+dOPqfkwRxR2C58UAw=="}],"memo":""},"metadata":{"timestamp":"1750607272"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g10ytj0g07883z30vyraz27aet7vf9n7vh3yetjl","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["mytestkey126"]}],"fee":{"gas_wanted":"20000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"2+dnKJPD/PchcfNZb3ut8K9n0jW7j2zayxWaFyjVyjbSqy7fCwBs7JQ1/iIq3JDIeK5PvG+M9vGQA5dGEoLABA=="}],"memo":""},"metadata":{"timestamp":"1750607277"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g18k2zjfn5v5d0w2yrt0j2e2k7p8g0awl6lv6jv5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"kKY8n+YLSOiPScY6HyEhVF9BxHYcGUOuLVfNM6tYLwqziULRNn0RuwoZIebioocdUrigbX9Gg/vdePO32nqxDw=="}],"memo":""},"metadata":{"timestamp":"1750608649"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18k2zjfn5v5d0w2yrt0j2e2k7p8g0awl6lv6jv5","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["testkey128"]}],"fee":{"gas_wanted":"20000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"frRCuZEaw5Zene62ImOcJnHkzqEIHAy+FscFnhxROR3qawOL5V1X3i1ArVILOOaB/92MrvO9mrYprSrDcqJwBA=="}],"memo":""},"metadata":{"timestamp":"1750608659"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1hvcvlcx8zja3h0j0qn3zd3xshznn75h9436fnm","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"faL8nKu4WfERXYLw7c7ZKLZah51blvc/EysC9wFbFi0mQUAZj/ht0MwEhOkYm1hwEGBRUA8GJFd+7fdukMvaBA=="}],"memo":""},"metadata":{"timestamp":"1750608759"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hvcvlcx8zja3h0j0qn3zd3xshznn75h9436fnm","send":"100000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["mytestkey129"]}],"fee":{"gas_wanted":"20000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"9Mg3jrACnYZ1EeuFljZqw70yCBOiXKzK+cLBQ9xr5yrELLyvKcRs16Zg67pct8R9DMvGDj8VfApmwMN6lLgsBQ=="}],"memo":""},"metadata":{"timestamp":"1750608769"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1x28tyqaydlkypuxxr3en0tppzmg47d0guzlr5w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"Q8YJ6GzR9TzgFuOaAWXMX2f191nfsoytfbyAoJq5CIp+PzW6LnxwD2OPX0zA8NemRMeYHQ4lceqdDUyW13rfDA=="}],"memo":""},"metadata":{"timestamp":"1750609770"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1x28tyqaydlkypuxxr3en0tppzmg47d0guzlr5w","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["david123"]}],"fee":{"gas_wanted":"20000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"bAfe+edY/lxDr1n8r6MMj9UM52L67L51g+SlS9rfnpUWA7Bk2jcG0wuEuO1NM7smW2Cm9CMiw87wVCBIomG7Aw=="}],"memo":""},"metadata":{"timestamp":"1750609825"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1z6e026nwv5fq96d8vgjnhe7qqg64aeruegytcl","amount":"1000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"riaJ4rac2hDfB1qPwvEJbFXR/NOEFw8V0bkl3lC10ys41NYczH4G1ObIwdlT+bYKLSq6U/JGIPVnW+Jn5L4qCg=="}],"memo":""},"metadata":{"timestamp":"1750616801"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1z6e026nwv5fq96d8vgjnhe7qqg64aeruegytcl","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"PEljqMtkcAk7SxPYFg0N83psEXD+BIHaZmGGLxLVP7kfR1st9V2p49k7aToA1w4Cr7O03ydbY/Ou+L73b4xhBw=="}],"memo":""},"metadata":{"timestamp":"1750616816"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1z6e026nwv5fq96d8vgjnhe7qqg64aeruegytcl","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"PEljqMtkcAk7SxPYFg0N83psEXD+BIHaZmGGLxLVP7kfR1st9V2p49k7aToA1w4Cr7O03ydbY/Ou+L73b4xhBw=="}],"memo":""},"metadata":{"timestamp":"1750616826"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1z6e026nwv5fq96d8vgjnhe7qqg64aeruegytcl","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["testkey123"]}],"fee":{"gas_wanted":"20000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"DBzfiLWuSy+z0ZDcdvB1KZjeNIkgZDN0Kr4eJnDhCgKR0XCEvFTIdfMra6glw86cKLStxqF4UWj+Feris35rDQ=="}],"memo":""},"metadata":{"timestamp":"1750616861"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1z6e026nwv5fq96d8vgjnhe7qqg64aeruegytcl","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["testkey123"]}],"fee":{"gas_wanted":"20000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"DBzfiLWuSy+z0ZDcdvB1KZjeNIkgZDN0Kr4eJnDhCgKR0XCEvFTIdfMra6glw86cKLStxqF4UWj+Feris35rDQ=="}],"memo":""},"metadata":{"timestamp":"1750616896"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1f3je6aze5mhuk9dzxq8z922rc3gvz790t52u3w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"tTf+QZaOa7BOrhzF5jG2XXSbtnNkDKot7Xe0CC/ahKmChRDVB4tbV98Abyj9OC/HkB2lj5AE1x/paDLwTpOOBA=="}],"memo":""},"metadata":{"timestamp":"1750664692"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1f3je6aze5mhuk9dzxq8z922rc3gvz790t52u3w","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"tTf+QZaOa7BOrhzF5jG2XXSbtnNkDKot7Xe0CC/ahKmChRDVB4tbV98Abyj9OC/HkB2lj5AE1x/paDLwTpOOBA=="}],"memo":""},"metadata":{"timestamp":"1750664702"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1f3je6aze5mhuk9dzxq8z922rc3gvz790t52u3w","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["testkey127"]}],"fee":{"gas_wanted":"20000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"0K4v8XXymIrduWtIwpZcQd/uIxdvClui8S02RQCZRbWfpXn+AOkkJkm4lwmlp9t38LY7HM46ikT6pC6rm08RAQ=="}],"memo":""},"metadata":{"timestamp":"1750664712"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1h297t9m0kwuyhhpj8hpf0486gwdsnj0qknegpn","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"FAtA6hD1KkBDKEol2Wj/7v9JTWz9iKZcntEebnUDiteltLqVEeS8TyrzXwVIY0PQ+rpFmVDRSbH3YlUXCnzEAQ=="}],"memo":""},"metadata":{"timestamp":"1750664928"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1h297t9m0kwuyhhpj8hpf0486gwdsnj0qknegpn","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"FAtA6hD1KkBDKEol2Wj/7v9JTWz9iKZcntEebnUDiteltLqVEeS8TyrzXwVIY0PQ+rpFmVDRSbH3YlUXCnzEAQ=="}],"memo":""},"metadata":{"timestamp":"1750664943"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1h297t9m0kwuyhhpj8hpf0486gwdsnj0qknegpn","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["testkey130"]}],"fee":{"gas_wanted":"20000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"tMRXvzs48OGARQCStBnIXsayYm1IVIOXtoSoC5AoKEqLWCMiNPwk1rUPQgBh50FPjBinz+Scjk7aplOIjJfbCA=="}],"memo":""},"metadata":{"timestamp":"1750664954"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1f3devtdw5srjyhze7zwqr8hty2mwz4z00j9lcl","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"tkDusPngsnLqY+BKlHogjwhsiMXZoq/UodxoR1NxEnUAQlMzxDub972QaSkfG8yH/xeSP+nTuxDKMEhrp3zLDA=="}],"memo":""},"metadata":{"timestamp":"1750666657"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1f3devtdw5srjyhze7zwqr8hty2mwz4z00j9lcl","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["testkey142"]}],"fee":{"gas_wanted":"20000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"z5k+AjUMq1N9cVpqrNxBgwLGQNP5DT1bBeJLU2DvRlU4O+zQV8cM2fzPyJPiUUlN3PaoROQF18grG+exe6IsCA=="}],"memo":""},"metadata":{"timestamp":"1750666692"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1f3devtdw5srjyhze7zwqr8hty2mwz4z00j9lcl","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"tkDusPngsnLqY+BKlHogjwhsiMXZoq/UodxoR1NxEnUAQlMzxDub972QaSkfG8yH/xeSP+nTuxDKMEhrp3zLDA=="}],"memo":""},"metadata":{"timestamp":"1750666733"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1f3devtdw5srjyhze7zwqr8hty2mwz4z00j9lcl","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["testkey142"]}],"fee":{"gas_wanted":"20000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"z5k+AjUMq1N9cVpqrNxBgwLGQNP5DT1bBeJLU2DvRlU4O+zQV8cM2fzPyJPiUUlN3PaoROQF18grG+exe6IsCA=="}],"memo":""},"metadata":{"timestamp":"1750666748"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g1t902yjsh6wq9yfahhdl248fewn69nq9x9nm0t0","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"o63VuErvYqALOvbqKfduEETdV3MH80VlwfsR8en+MOHtMhQui/VBJy3B159m88ixVvENf3zTJkWFM/0fsih6Ag=="}],"memo":""},"metadata":{"timestamp":"1750674909"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1t902yjsh6wq9yfahhdl248fewn69nq9x9nm0t0","send":"1000000ugnot","pkg_path":"gno.land/r/gnoland/users/v1","func":"Register","args":["mykey123"]}],"fee":{"gas_wanted":"20000000","gas_fee":"10000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"RJJuKgj3IVATJhYouyq/TfUmP3Ip6VWrHra0AyYSeXI="},"signature":"MFCofV7Rquj3L1E5iYbX3t8ymTtISHyIMazZThw3/nxNowWXfOrC/39I+xm40I0JWADrUgTtWL2tlqGjmDBQDg=="}],"memo":""},"metadata":{"timestamp":"1750675110"}}
