{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g12z0wfst254qfthj82mt0g667xqfzze9myjcuyk","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"TXX8TMSGArphyzIiMFCym0j2JxvbkaycoxL4BzNp8V1iRla2hKjbObXnXyykWR9ohCH4o8ZXEyKQKvLUDS/VAQ=="}],"memo":""},"metadata":{"timestamp":"1740759398"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g12z0wfst254qfthj82mt0g667xqfzze9myjcuyk","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"2MjzIuPQ9OKQZzbvHE6sb4Bry9i81tYjH76ZwAMkMsaaEmGpgjC7fzj0zmQvSUmnAn7gQSz8ypMd2TynXqtTAA=="}],"memo":""},"metadata":{"timestamp":"1740759414"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g12z0wfst254qfthj82mt0g667xqfzze9myjcuyk","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"8151508","gas_fee":"16983ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"NxkRiCZsoVvfqkVI7Cw469Lf1nvocFtbrVtjiNx2pvaeaANYb5AJnatP8Pp+LMu8iymqox18giPqrqezDPHFDg=="}],"memo":""},"metadata":{"timestamp":"1740759429"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g12z0wfst254qfthj82mt0g667xqfzze9myjcuyk","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Transfer","args":["g1vjwm0zjcupx4rn72r38en7pdsped6hwxx3y96c","1000000"]}],"fee":{"gas_wanted":"9968715","gas_fee":"20769ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"APIlcwBUWLl4YUBMCCX2T9Kla5MJMYoFzqFOoJ9OLLuRy7P2yMm5SlvcsFr7kOdZkvl9YQLrHU3mBf0jhaLmDQ=="}],"memo":""},"metadata":{"timestamp":"1740759484"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g12z0wfst254qfthj82mt0g667xqfzze9myjcuyk","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Transfer","args":["g1vjwm0zjcupx4rn72r38en7pdsped6hwxx3y96c","1000000"]}],"fee":{"gas_wanted":"9968715","gas_fee":"20769ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"APIlcwBUWLl4YUBMCCX2T9Kla5MJMYoFzqFOoJ9OLLuRy7P2yMm5SlvcsFr7kOdZkvl9YQLrHU3mBf0jhaLmDQ=="}],"memo":""},"metadata":{"timestamp":"1740759494"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g12z0wfst254qfthj82mt0g667xqfzze9myjcuyk","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Transfer","args":["g1vjwm0zjcupx4rn72r38en7pdsped6hwxx3y96c","1000000"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"3Pfx8wuKA4NZfVPqDLxAksxe5x7FOBqcREUi0q2vWXL/nCSboLMI6gHxvVzs89cqhsFrBVJbfL0JKOcSiO3bBQ=="}],"memo":""},"metadata":{"timestamp":"1740759594"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1zpefwvx4lyw7cua67qrnjsa9xlqueunjyvmqdl","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"NWYkOdTEnG737YrRwJLK7nDzvydZLuFDtM2cxswlY2v0MVrMNDL73UPyj7M9x2DV+g9e9RgRy3oO3SBNVAz2BA=="}],"memo":""},"metadata":{"timestamp":"1740760011"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1zpefwvx4lyw7cua67qrnjsa9xlqueunjyvmqdl","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"psQOKM1nDWhs2+2WojUOCr2T6/mIIZC4QQTxILmet1jo6J/hFZInnSIpg+v5UlCM6zqLslrD3efTyqxa/ISsAQ=="}],"memo":"12313"},"metadata":{"timestamp":"1740760041"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1zpefwvx4lyw7cua67qrnjsa9xlqueunjyvmqdl","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Transfer","args":["g1vjwm0zjcupx4rn72r38en7pdsped6hwxx3y96c","100000"]}],"fee":{"gas_wanted":"9995599","gas_fee":"20825ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"QhDq+8U6/pmtlDpx6982VyYHLfwqKK++2J72aqqjqJqeKlxUiKoZAlly99p4KqeI5cGzHRs/Dhnfp/SJ5/mqDQ=="}],"memo":"12313"},"metadata":{"timestamp":"1740760212"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1zpefwvx4lyw7cua67qrnjsa9xlqueunjyvmqdl","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Transfer","args":["g1vjwm0zjcupx4rn72r38en7pdsped6hwxx3y96c","100000"]}],"fee":{"gas_wanted":"9995541","gas_fee":"20825ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"BCFTJcLkIbGWzZPNw/OFR2zVy+0zXUvTh1FOOpY8pyl811nYJ1LW6Ys/TiKPwgJUjLs763PHeXNTbHbuURJGAQ=="}],"memo":"12313"},"metadata":{"timestamp":"1740761964"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1zpefwvx4lyw7cua67qrnjsa9xlqueunjyvmqdl","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Transfer","args":["g1vjwm0zjcupx4rn72r38en7pdsped6hwxx3y96c","100000"]}],"fee":{"gas_wanted":"9995541","gas_fee":"20825ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"BCFTJcLkIbGWzZPNw/OFR2zVy+0zXUvTh1FOOpY8pyl811nYJ1LW6Ys/TiKPwgJUjLs763PHeXNTbHbuURJGAQ=="}],"memo":"12313"},"metadata":{"timestamp":"1740762250"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g12gfmjss0z6xaz20plq3h7qw6cnz05t0eequldk","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"b+9mAr7KeC3iDzFAwloTbdqJsX6Hucbft6ZxC1rQATTseui+yRFKLWOSzpRlAJ2iAlqbrPSKvlLWQ6tWqooqAA=="}],"memo":""},"metadata":{"timestamp":"1740763475"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g12gfmjss0z6xaz20plq3h7qw6cnz05t0eequldk","send":"","pkg_path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1740706178_9","func":"SayHello","args":[""]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"vQ6TvX5mKMx5S+QZFUoqyUk8nQRll4lRP9CqjBOquD/PQsWv/+yGjJWcvi0D+ABb3u1reikK8lFaeYfGH3x+AA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1740763505"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g12gfmjss0z6xaz20plq3h7qw6cnz05t0eequldk","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"8355706","gas_fee":"17408ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"0m2JEJYc+8c889jlYJVg4wlm9zJfTMU3JbuxyDC6HHhQIsLutDTe0tE5H8fIouoyXcbRN9sQbSVq/zAKSip1Cg=="}],"memo":""},"metadata":{"timestamp":"1740763575"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1sdfwe205vmt92ch5gp5xm3y333vxq6fdp4k47n","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"upDSloijgLLzclsgg/1EYW0gaaYBKc5ii3bNlVe5ZglcD2CLe7mDKdCO11abQrLTV2SYJuO1CivL5miQm2BeAg=="}],"memo":""},"metadata":{"timestamp":"1740763821"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1sdfwe205vmt92ch5gp5xm3y333vxq6fdp4k47n","send":"","pkg_path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1740706178_9","func":"SayHello","args":[""]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"UabAxPf8/SC38fLDQVMUgh5LQwjzx2UOqgLIXMexeysBjAmvDaeXpBNCAt1/mG4RFRGUWSc0DyEs1ToTJiusCw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1740763831"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1lmzhene7vxkt93exmds6rqjqsh849nta4k7hzy","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"+dDpeVa8kPHsPFs/1IvaEB6z2k6wg8u4mVzegMeGPWrW3wGauo9xUCNJVLHyLpF4IlFoM/WvMXZLzNL+/0C5CQ=="}],"memo":""},"metadata":{"timestamp":"1740764404"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lmzhene7vxkt93exmds6rqjqsh849nta4k7hzy","package":{"name":"shifumi","path":"gno.land/r/g1lmzhene7vxkt93exmds6rqjqsh849nta4k7hzy/shifumi","files":[{"name":"package.gno","body":"package shifumi\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\n\t\"gno.land/r/demo/users\"\n)\n\nconst (\n\tempty = iota\n\trock\n\tpaper\n\tscissors\n\tlast\n)\n\ntype game struct {\n\tplayer1, player2 std.Address // shifumi is a 2 players game\n\tmove1, move2     int         // can be empty, rock, paper, or scissors\n}\n\nvar games avl.Tree\nvar id seqid.ID\n\nfunc (g *game) play(player std.Address, move int) error {\n\tif !(move \u003e empty \u0026\u0026 move \u003c last) {\n\t\treturn errors.New(\"invalid move\")\n\t}\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\tif player == g.player1 \u0026\u0026 g.move1 == empty {\n\t\tg.move1 = move\n\t\treturn nil\n\t}\n\tif player == g.player2 \u0026\u0026 g.move2 == empty {\n\t\tg.move2 = move\n\t\treturn nil\n\t}\n\treturn errors.New(\"already played\")\n}\n\nfunc (g *game) winner() int {\n\tif g.move1 == empty || g.move2 == empty {\n\t\treturn -1\n\t}\n\tif g.move1 == g.move2 {\n\t\treturn 0\n\t}\n\tif g.move1 == rock \u0026\u0026 g.move2 == scissors ||\n\t\tg.move1 == paper \u0026\u0026 g.move2 == rock ||\n\t\tg.move1 == scissors \u0026\u0026 g.move2 == paper {\n\t\treturn 1\n\t}\n\treturn 2\n}\n\n// NewGame creates a new game where player1 is the caller and player2 the argument.\n// A new game index is returned.\nfunc NewGame(player std.Address) int {\n\tgames.Set(id.Next().String(), \u0026game{player1: std.PreviousRealm().Address(), player2: player})\n\treturn int(id)\n}\n\n// Play executes a move for the game at index idx, where move can be:\n// 1 (rock), 2 (paper), 3 (scissors).\nfunc Play(idx, move int) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\tpanic(\"game not found\")\n\t}\n\tif err := v.(*game).play(std.PreviousRealm().Address(), move); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Render(path string) string {\n\tmov1 := []string{\"\", \" 🤜  \", \" 🫱  \", \" 👉  \"}\n\tmov2 := []string{\"\", \" 🤛  \", \" 🫲  \", \" 👈  \"}\n\twin := []string{\"pending\", \"draw\", \"player1\", \"player2\"}\n\n\toutput := `# 👊  ✋  ✌️  Shifumi\nActions:\n* [NewGame](shifumi$help\u0026func=NewGame) opponentAddress\n* [Play](shifumi$help\u0026func=Play) gameIndex move (1=rock, 2=paper, 3=scissors)\n\n game  | player1 |     | player2 |       | win \n --- | --- | --- | --- | --- | ---\n`\n\t// Output the 100 most recent games.\n\tmaxGames := 100\n\tfor n := int(id); n \u003e 0 \u0026\u0026 int(id)-n \u003c maxGames; n-- {\n\t\tv, ok := games.Get(seqid.ID(n).String())\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tg := v.(*game)\n\t\toutput += strconv.Itoa(n) + \" | \" +\n\t\t\tshortName(g.player1) + \" | \" + mov1[g.move1] + \" | \" +\n\t\t\tshortName(g.player2) + \" | \" + mov2[g.move2] + \" | \" +\n\t\t\twin[g.winner()+1] + \"\\n\"\n\t}\n\treturn output\n}\n\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"K+ieBGYGF5vSESsanZOc/uyA1csBoep/2+xYtFle84kGRf4NhzHbZI7BdN53uLn85lSa+z62NXD4sjbZ8btfAg=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1740764439"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lmzhene7vxkt93exmds6rqjqsh849nta4k7hzy","package":{"name":"shifumi","path":"gno.land/r/g1lmzhene7vxkt93exmds6rqjqsh849nta4k7hzy/shifumi","files":[{"name":"package.gno","body":"package shifumi\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\n\t\"gno.land/r/demo/users\"\n)\n\nconst (\n\tempty = iota\n\trock\n\tpaper\n\tscissors\n\tlast\n)\n\ntype game struct {\n\tplayer1, player2 std.Address // shifumi is a 2 players game\n\tmove1, move2     int         // can be empty, rock, paper, or scissors\n}\n\nvar games avl.Tree\nvar id seqid.ID\n\nfunc (g *game) play(player std.Address, move int) error {\n\tif !(move \u003e empty \u0026\u0026 move \u003c last) {\n\t\treturn errors.New(\"invalid move\")\n\t}\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\tif player == g.player1 \u0026\u0026 g.move1 == empty {\n\t\tg.move1 = move\n\t\treturn nil\n\t}\n\tif player == g.player2 \u0026\u0026 g.move2 == empty {\n\t\tg.move2 = move\n\t\treturn nil\n\t}\n\treturn errors.New(\"already played\")\n}\n\nfunc (g *game) winner() int {\n\tif g.move1 == empty || g.move2 == empty {\n\t\treturn -1\n\t}\n\tif g.move1 == g.move2 {\n\t\treturn 0\n\t}\n\tif g.move1 == rock \u0026\u0026 g.move2 == scissors ||\n\t\tg.move1 == paper \u0026\u0026 g.move2 == rock ||\n\t\tg.move1 == scissors \u0026\u0026 g.move2 == paper {\n\t\treturn 1\n\t}\n\treturn 2\n}\n\n// NewGame creates a new game where player1 is the caller and player2 the argument.\n// A new game index is returned.\nfunc NewGame(player std.Address) int {\n\tgames.Set(id.Next().String(), \u0026game{player1: std.PreviousRealm().Address(), player2: player})\n\treturn int(id)\n}\n\n// Play executes a move for the game at index idx, where move can be:\n// 1 (rock), 2 (paper), 3 (scissors).\nfunc Play(idx, move int) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\tpanic(\"game not found\")\n\t}\n\tif err := v.(*game).play(std.PreviousRealm().Address(), move); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Render(path string) string {\n\tmov1 := []string{\"\", \" 🤜  \", \" 🫱  \", \" 👉  \"}\n\tmov2 := []string{\"\", \" 🤛  \", \" 🫲  \", \" 👈  \"}\n\twin := []string{\"pending\", \"draw\", \"player1\", \"player2\"}\n\n\toutput := `# 👊  ✋  ✌️  Shifumi\nActions:\n* [NewGame](shifumi$help\u0026func=NewGame) opponentAddress\n* [Play](shifumi$help\u0026func=Play) gameIndex move (1=rock, 2=paper, 3=scissors)\n\n game  | player1 |     | player2 |       | win \n --- | --- | --- | --- | --- | ---\n`\n\t// Output the 100 most recent games.\n\tmaxGames := 100\n\tfor n := int(id); n \u003e 0 \u0026\u0026 int(id)-n \u003c maxGames; n-- {\n\t\tv, ok := games.Get(seqid.ID(n).String())\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tg := v.(*game)\n\t\toutput += strconv.Itoa(n) + \" | \" +\n\t\t\tshortName(g.player1) + \" | \" + mov1[g.move1] + \" | \" +\n\t\t\tshortName(g.player2) + \" | \" + mov2[g.move2] + \" | \" +\n\t\t\twin[g.winner()+1] + \"\\n\"\n\t}\n\treturn output\n}\n\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"21556849","gas_fee":"44911ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"yvbmzo46X/YGSYxQwzCJr5zgCzpG453T8N3EQ6UD2ty76cOg56bYtRYLAPTV5r4ej7vNmxVZBxZbFytoskxRDQ=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1740764474"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lmzhene7vxkt93exmds6rqjqsh849nta4k7hzy","package":{"name":"shifumi2","path":"gno.land/r/g1lmzhene7vxkt93exmds6rqjqsh849nta4k7hzy/shifumi2","files":[{"name":"package.gno","body":"package shifumi2\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\n\t\"gno.land/r/demo/users\"\n)\n\nconst (\n\tempty = iota\n\trock\n\tpaper\n\tscissors\n\tlast\n)\n\ntype game struct {\n\tplayer1, player2 std.Address // shifumi is a 2 players game\n\tmove1, move2     int         // can be empty, rock, paper, or scissors\n}\n\nvar games avl.Tree\nvar id seqid.ID\n\nfunc (g *game) play(player std.Address, move int) error {\n\tif !(move \u003e empty \u0026\u0026 move \u003c last) {\n\t\treturn errors.New(\"invalid move\")\n\t}\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\tif player == g.player1 \u0026\u0026 g.move1 == empty {\n\t\tg.move1 = move\n\t\treturn nil\n\t}\n\tif player == g.player2 \u0026\u0026 g.move2 == empty {\n\t\tg.move2 = move\n\t\treturn nil\n\t}\n\treturn errors.New(\"already played\")\n}\n\nfunc (g *game) winner() int {\n\tif g.move1 == empty || g.move2 == empty {\n\t\treturn -1\n\t}\n\tif g.move1 == g.move2 {\n\t\treturn 0\n\t}\n\tif g.move1 == rock \u0026\u0026 g.move2 == scissors ||\n\t\tg.move1 == paper \u0026\u0026 g.move2 == rock ||\n\t\tg.move1 == scissors \u0026\u0026 g.move2 == paper {\n\t\treturn 1\n\t}\n\treturn 2\n}\n\n// NewGame creates a new game where player1 is the caller and player2 the argument.\n// A new game index is returned.\nfunc NewGame(player std.Address) int {\n\tgames.Set(id.Next().String(), \u0026game{player1: std.PreviousRealm().Address(), player2: player})\n\treturn int(id)\n}\n\n// Play executes a move for the game at index idx, where move can be:\n// 1 (rock), 2 (paper), 3 (scissors).\nfunc Play(idx, move int) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\tpanic(\"game not found\")\n\t}\n\tif err := v.(*game).play(std.PreviousRealm().Address(), move); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Render(path string) string {\n\tmov1 := []string{\"\", \" 🤜  \", \" 🫱  \", \" 👉  \"}\n\tmov2 := []string{\"\", \" 🤛  \", \" 🫲  \", \" 👈  \"}\n\twin := []string{\"pending\", \"draw\", \"player1\", \"player2\"}\n\n\toutput := `# 👊  ✋  ✌️  Shifumi\nActions:\n* [NewGame](shifumi$help\u0026func=NewGame) opponentAddress\n* [Play](shifumi$help\u0026func=Play) gameIndex move (1=rock, 2=paper, 3=scissors)\n\n game  | player1 |     | player2 |       | win \n --- | --- | --- | --- | --- | ---\n`\n\t// Output the 100 most recent games.\n\tmaxGames := 100\n\tfor n := int(id); n \u003e 0 \u0026\u0026 int(id)-n \u003c maxGames; n-- {\n\t\tv, ok := games.Get(seqid.ID(n).String())\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tg := v.(*game)\n\t\toutput += strconv.Itoa(n) + \" | \" +\n\t\t\tshortName(g.player1) + \" | \" + mov1[g.move1] + \" | \" +\n\t\t\tshortName(g.player2) + \" | \" + mov2[g.move2] + \" | \" +\n\t\t\twin[g.winner()+1] + \"\\n\"\n\t}\n\treturn output\n}\n\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"21560211","gas_fee":"58393ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"evoVrQcKp+b/L+g9MzuYZIFNiWjwTEk61Tdh83nrvaem1dmJ+oRV5vP0VohnX+jjLpF3FKptMttzaTvBU7qiCw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1740764574"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1l66px0rl8khfqeltzhvk0rtd3rqawf6g0c27xl","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"dY33B5qs6KmAM/eyAIjrScXVsU0V0acgX4XFKf2DkCOYsjGslNbCjRZ4Yz9vMPqTSI+DZ7i2SayjVMVfFVUEDA=="}],"memo":""},"metadata":{"timestamp":"1740764881"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1l66px0rl8khfqeltzhvk0rtd3rqawf6g0c27xl","to_address":"g1l66px0rl8khfqeltzhvk0rtd3rqawf6g0c27xl","amount":"1000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"I6pf1xqHuKYJxOvMm8JMZxk5O1tDt//m07OQc04AqCFC5VvKxVqlF0BF2RKsQVE+ZQrlwbjhW/ZLhbt6OJryDA=="}],"memo":""},"metadata":{"timestamp":"1740764891"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1l66px0rl8khfqeltzhvk0rtd3rqawf6g0c27xl","package":{"name":"shifumi","path":"gno.land/r/g1l66px0rl8khfqeltzhvk0rtd3rqawf6g0c27xl/shifumi","files":[{"name":"package.gno","body":"package shifumi\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\n\t\"gno.land/r/demo/users\"\n)\n\nconst (\n\tempty = iota\n\trock\n\tpaper\n\tscissors\n\tlast\n)\n\ntype game struct {\n\tplayer1, player2 std.Address // shifumi is a 2 players game\n\tmove1, move2     int         // can be empty, rock, paper, or scissors\n}\n\nvar games avl.Tree\nvar id seqid.ID\n\nfunc (g *game) play(player std.Address, move int) error {\n\tif !(move \u003e empty \u0026\u0026 move \u003c last) {\n\t\treturn errors.New(\"invalid move\")\n\t}\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\tif player == g.player1 \u0026\u0026 g.move1 == empty {\n\t\tg.move1 = move\n\t\treturn nil\n\t}\n\tif player == g.player2 \u0026\u0026 g.move2 == empty {\n\t\tg.move2 = move\n\t\treturn nil\n\t}\n\treturn errors.New(\"already played\")\n}\n\nfunc (g *game) winner() int {\n\tif g.move1 == empty || g.move2 == empty {\n\t\treturn -1\n\t}\n\tif g.move1 == g.move2 {\n\t\treturn 0\n\t}\n\tif g.move1 == rock \u0026\u0026 g.move2 == scissors ||\n\t\tg.move1 == paper \u0026\u0026 g.move2 == rock ||\n\t\tg.move1 == scissors \u0026\u0026 g.move2 == paper {\n\t\treturn 1\n\t}\n\treturn 2\n}\n\n// NewGame creates a new game where player1 is the caller and player2 the argument.\n// A new game index is returned.\nfunc NewGame(player std.Address) int {\n\tgames.Set(id.Next().String(), \u0026game{player1: std.PreviousRealm().Address(), player2: player})\n\treturn int(id)\n}\n\n// Play executes a move for the game at index idx, where move can be:\n// 1 (rock), 2 (paper), 3 (scissors).\nfunc Play(idx, move int) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\tpanic(\"game not found\")\n\t}\n\tif err := v.(*game).play(std.PreviousRealm().Address(), move); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Render(path string) string {\n\tmov1 := []string{\"\", \" 🤜  \", \" 🫱  \", \" 👉  \"}\n\tmov2 := []string{\"\", \" 🤛  \", \" 🫲  \", \" 👈  \"}\n\twin := []string{\"pending\", \"draw\", \"player1\", \"player2\"}\n\n\toutput := `# 👊  ✋  ✌️  Shifumi\nActions:\n* [NewGame](shifumi$help\u0026func=NewGame) opponentAddress\n* [Play](shifumi$help\u0026func=Play) gameIndex move (1=rock, 2=paper, 3=scissors)\n\n game  | player1 |     | player2 |       | win \n --- | --- | --- | --- | --- | ---\n`\n\t// Output the 100 most recent games.\n\tmaxGames := 100\n\tfor n := int(id); n \u003e 0 \u0026\u0026 int(id)-n \u003c maxGames; n-- {\n\t\tv, ok := games.Get(seqid.ID(n).String())\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tg := v.(*game)\n\t\toutput += strconv.Itoa(n) + \" | \" +\n\t\t\tshortName(g.player1) + \" | \" + mov1[g.move1] + \" | \" +\n\t\t\tshortName(g.player2) + \" | \" + mov2[g.move2] + \" | \" +\n\t\t\twin[g.winner()+1] + \"\\n\"\n\t}\n\treturn output\n}\n\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"21556837","gas_fee":"44911ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"F7G9g3DZbzLow0JdWi6Ikk0WmlBNYBjNG5YfC8Y6w+95EqbWAcMUPheyeAJHGM/HIfu2c5jXSAgs1Wl4BW0hDg=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1740764951"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d","package":{"name":"shifumi612","path":"gno.land/r/g17290cwvmrapvp869xfnhhawa8sm9edpufzat7d/shifumi612","files":[{"name":"package.gno","body":"package shifumi\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\n\t\"gno.land/r/demo/users\"\n)\n\nconst (\n\tempty = iota\n\trock\n\tpaper\n\tscissors\n\tlast\n)\n\ntype game struct {\n\tplayer1, player2 std.Address // shifumi is a 2 players game\n\tmove1, move2     int         // can be empty, rock, paper, or scissors\n}\n\nvar games avl.Tree\nvar id seqid.ID\n\nfunc (g *game) play(player std.Address, move int) error {\n\tif !(move \u003e empty \u0026\u0026 move \u003c last) {\n\t\treturn errors.New(\"invalid move\")\n\t}\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\tif player == g.player1 \u0026\u0026 g.move1 == empty {\n\t\tg.move1 = move\n\t\treturn nil\n\t}\n\tif player == g.player2 \u0026\u0026 g.move2 == empty {\n\t\tg.move2 = move\n\t\treturn nil\n\t}\n\treturn errors.New(\"already played\")\n}\n\nfunc (g *game) winner() int {\n\tif g.move1 == empty || g.move2 == empty {\n\t\treturn -1\n\t}\n\tif g.move1 == g.move2 {\n\t\treturn 0\n\t}\n\tif g.move1 == rock \u0026\u0026 g.move2 == scissors ||\n\t\tg.move1 == paper \u0026\u0026 g.move2 == rock ||\n\t\tg.move1 == scissors \u0026\u0026 g.move2 == paper {\n\t\treturn 1\n\t}\n\treturn 2\n}\n\n// NewGame creates a new game where player1 is the caller and player2 the argument.\n// A new game index is returned.\nfunc NewGame(player std.Address) int {\n\tgames.Set(id.Next().String(), \u0026game{player1: std.PreviousRealm().Address(), player2: player})\n\treturn int(id)\n}\n\n// Play executes a move for the game at index idx, where move can be:\n// 1 (rock), 2 (paper), 3 (scissors).\nfunc Play(idx, move int) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\tpanic(\"game not found\")\n\t}\n\tif err := v.(*game).play(std.PreviousRealm().Address(), move); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Render(path string) string {\n\tmov1 := []string{\"\", \" 🤜  \", \" 🫱  \", \" 👉  \"}\n\tmov2 := []string{\"\", \" 🤛  \", \" 🫲  \", \" 👈  \"}\n\twin := []string{\"pending\", \"draw\", \"player1\", \"player2\"}\n\n\toutput := `# 👊  ✋  ✌️  Shifumi\nActions:\n* [NewGame](shifumi$help\u0026func=NewGame) opponentAddress\n* [Play](shifumi$help\u0026func=Play) gameIndex move (1=rock, 2=paper, 3=scissors)\n\n game  | player1 |     | player2 |       | win \n --- | --- | --- | --- | --- | ---\n`\n\t// Output the 100 most recent games.\n\tmaxGames := 100\n\tfor n := int(id); n \u003e 0 \u0026\u0026 int(id)-n \u003c maxGames; n-- {\n\t\tv, ok := games.Get(seqid.ID(n).String())\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tg := v.(*game)\n\t\toutput += strconv.Itoa(n) + \" | \" +\n\t\t\tshortName(g.player1) + \" | \" + mov1[g.move1] + \" | \" +\n\t\t\tshortName(g.player2) + \" | \" + mov2[g.move2] + \" | \" +\n\t\t\twin[g.winner()+1] + \"\\n\"\n\t}\n\treturn output\n}\n\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"30000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"4UOlOtDYKngqnuoP6G+extK29TGRIQvcEUymz5RSinSPH8ChqVfgs3GezsCoN8jAk9Zcz9hr9b4K4GSmdVeZCQ=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1740765111"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1qzfcraqc228wgv3rkux5n5c6qpe5xz5vaph8rw","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"Rtu5aRZl1Z0mMB7n6gRLmNVeCChHhIVvEq8tLHGudkn6fxhsOcAYK2o8z3UmXInWk35qSmaB/BKrsmztmaFYAg=="}],"memo":""},"metadata":{"timestamp":"1740765973"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1qzfcraqc228wgv3rkux5n5c6qpe5xz5vaph8rw","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Transfer","args":["g1vjwm0zjcupx4rn72r38en7pdsped6hwxx3y96c","1000000"]}],"fee":{"gas_wanted":"12000000","gas_fee":"40000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"HY1kjjGi9v4i12ygLRfl/VKT3ovgdN8630RrUayG1kpPTOax7uVzbcjBr7U+XZ2+7a49KKKo+V69gcq/3/y/DA=="}],"memo":"12313"},"metadata":{"timestamp":"1740766023"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1qzfcraqc228wgv3rkux5n5c6qpe5xz5vaph8rw","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"8145512","gas_fee":"16970ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"0Dr3UMpM9qUqtXKBCMLEXjWNjNT9DTOPauhqNHetFbPbwJRUChuC04Bn17Q3pj8OegM5MziyMHlQbo+r3Np5Dg=="}],"memo":"12313"},"metadata":{"timestamp":"1740766073"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1qzfcraqc228wgv3rkux5n5c6qpe5xz5vaph8rw","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Transfer","args":["g1vjwm0zjcupx4rn72r38en7pdsped6hwxx3y96c","1000000"]}],"fee":{"gas_wanted":"9853588","gas_fee":"20529ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"xROioqOj+CtXAT85uXkE0XJpb79zqiEEw4Bh0JE1pZdjAzhcXvJBRLsimTv786GjNnPWPuPQ2ec5xuM4OSozDw=="}],"memo":"12313"},"metadata":{"timestamp":"1740766078"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1r2mpz3p873vtrrkj0em6qw4h6mkwu7aw3lmk2t","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"g9mqjRaQQEoYfyCjdohpNmWucX+cHWXSZCwSRaUVmyAjhZntC1iH3ssio8ssMS08A4t1y7cejkHB0jSXtHDSAw=="}],"memo":""},"metadata":{"timestamp":"1740766274"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1r2mpz3p873vtrrkj0em6qw4h6mkwu7aw3lmk2t","package":{"name":"shifumi","path":"gno.land/r/g1r2mpz3p873vtrrkj0em6qw4h6mkwu7aw3lmk2t/shifumi","files":[{"name":"package.gno","body":"package shifumi\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\n\t\"gno.land/r/demo/users\"\n)\n\nconst (\n\tempty = iota\n\trock\n\tpaper\n\tscissors\n\tlast\n)\n\ntype game struct {\n\tplayer1, player2 std.Address // shifumi is a 2 players game\n\tmove1, move2     int         // can be empty, rock, paper, or scissors\n}\n\nvar games avl.Tree\nvar id seqid.ID\n\nfunc (g *game) play(player std.Address, move int) error {\n\tif !(move \u003e empty \u0026\u0026 move \u003c last) {\n\t\treturn errors.New(\"invalid move\")\n\t}\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\tif player == g.player1 \u0026\u0026 g.move1 == empty {\n\t\tg.move1 = move\n\t\treturn nil\n\t}\n\tif player == g.player2 \u0026\u0026 g.move2 == empty {\n\t\tg.move2 = move\n\t\treturn nil\n\t}\n\treturn errors.New(\"already played\")\n}\n\nfunc (g *game) winner() int {\n\tif g.move1 == empty || g.move2 == empty {\n\t\treturn -1\n\t}\n\tif g.move1 == g.move2 {\n\t\treturn 0\n\t}\n\tif g.move1 == rock \u0026\u0026 g.move2 == scissors ||\n\t\tg.move1 == paper \u0026\u0026 g.move2 == rock ||\n\t\tg.move1 == scissors \u0026\u0026 g.move2 == paper {\n\t\treturn 1\n\t}\n\treturn 2\n}\n\n// NewGame creates a new game where player1 is the caller and player2 the argument.\n// A new game index is returned.\nfunc NewGame(player std.Address) int {\n\tgames.Set(id.Next().String(), \u0026game{player1: std.PreviousRealm().Address(), player2: player})\n\treturn int(id)\n}\n\n// Play executes a move for the game at index idx, where move can be:\n// 1 (rock), 2 (paper), 3 (scissors).\nfunc Play(idx, move int) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\tpanic(\"game not found\")\n\t}\n\tif err := v.(*game).play(std.PreviousRealm().Address(), move); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Render(path string) string {\n\tmov1 := []string{\"\", \" 🤜  \", \" 🫱  \", \" 👉  \"}\n\tmov2 := []string{\"\", \" 🤛  \", \" 🫲  \", \" 👈  \"}\n\twin := []string{\"pending\", \"draw\", \"player1\", \"player2\"}\n\n\toutput := `# 👊  ✋  ✌️  Shifumi\nActions:\n* [NewGame](shifumi$help\u0026func=NewGame) opponentAddress\n* [Play](shifumi$help\u0026func=Play) gameIndex move (1=rock, 2=paper, 3=scissors)\n\n game  | player1 |     | player2 |       | win \n --- | --- | --- | --- | --- | ---\n`\n\t// Output the 100 most recent games.\n\tmaxGames := 100\n\tfor n := int(id); n \u003e 0 \u0026\u0026 int(id)-n \u003c maxGames; n-- {\n\t\tv, ok := games.Get(seqid.ID(n).String())\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tg := v.(*game)\n\t\toutput += strconv.Itoa(n) + \" | \" +\n\t\t\tshortName(g.player1) + \" | \" + mov1[g.move1] + \" | \" +\n\t\t\tshortName(g.player2) + \" | \" + mov2[g.move2] + \" | \" +\n\t\t\twin[g.winner()+1] + \"\\n\"\n\t}\n\treturn output\n}\n\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"v+K0gmUjR6baqijsHZPxsVDaMvAG2b+oW01US9qT/OtAy4oTl3AbK3/hoiFwbPDDRbWaU4OSPXoqYJCBaSiFBg=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1740766329"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1r2mpz3p873vtrrkj0em6qw4h6mkwu7aw3lmk2t","package":{"name":"shifumi","path":"gno.land/r/g1r2mpz3p873vtrrkj0em6qw4h6mkwu7aw3lmk2t/shifumi","files":[{"name":"package.gno","body":"package shifumi\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\n\t\"gno.land/r/demo/users\"\n)\n\nconst (\n\tempty = iota\n\trock\n\tpaper\n\tscissors\n\tlast\n)\n\ntype game struct {\n\tplayer1, player2 std.Address // shifumi is a 2 players game\n\tmove1, move2     int         // can be empty, rock, paper, or scissors\n}\n\nvar games avl.Tree\nvar id seqid.ID\n\nfunc (g *game) play(player std.Address, move int) error {\n\tif !(move \u003e empty \u0026\u0026 move \u003c last) {\n\t\treturn errors.New(\"invalid move\")\n\t}\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\tif player == g.player1 \u0026\u0026 g.move1 == empty {\n\t\tg.move1 = move\n\t\treturn nil\n\t}\n\tif player == g.player2 \u0026\u0026 g.move2 == empty {\n\t\tg.move2 = move\n\t\treturn nil\n\t}\n\treturn errors.New(\"already played\")\n}\n\nfunc (g *game) winner() int {\n\tif g.move1 == empty || g.move2 == empty {\n\t\treturn -1\n\t}\n\tif g.move1 == g.move2 {\n\t\treturn 0\n\t}\n\tif g.move1 == rock \u0026\u0026 g.move2 == scissors ||\n\t\tg.move1 == paper \u0026\u0026 g.move2 == rock ||\n\t\tg.move1 == scissors \u0026\u0026 g.move2 == paper {\n\t\treturn 1\n\t}\n\treturn 2\n}\n\n// NewGame creates a new game where player1 is the caller and player2 the argument.\n// A new game index is returned.\nfunc NewGame(player std.Address) int {\n\tgames.Set(id.Next().String(), \u0026game{player1: std.PreviousRealm().Address(), player2: player})\n\treturn int(id)\n}\n\n// Play executes a move for the game at index idx, where move can be:\n// 1 (rock), 2 (paper), 3 (scissors).\nfunc Play(idx, move int) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\tpanic(\"game not found\")\n\t}\n\tif err := v.(*game).play(std.PreviousRealm().Address(), move); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Render(path string) string {\n\tmov1 := []string{\"\", \" 🤜  \", \" 🫱  \", \" 👉  \"}\n\tmov2 := []string{\"\", \" 🤛  \", \" 🫲  \", \" 👈  \"}\n\twin := []string{\"pending\", \"draw\", \"player1\", \"player2\"}\n\n\toutput := `# 👊  ✋  ✌️  Shifumi\nActions:\n* [NewGame](shifumi$help\u0026func=NewGame) opponentAddress\n* [Play](shifumi$help\u0026func=Play) gameIndex move (1=rock, 2=paper, 3=scissors)\n\n game  | player1 |     | player2 |       | win \n --- | --- | --- | --- | --- | ---\n`\n\t// Output the 100 most recent games.\n\tmaxGames := 100\n\tfor n := int(id); n \u003e 0 \u0026\u0026 int(id)-n \u003c maxGames; n-- {\n\t\tv, ok := games.Get(seqid.ID(n).String())\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tg := v.(*game)\n\t\toutput += strconv.Itoa(n) + \" | \" +\n\t\t\tshortName(g.player1) + \" | \" + mov1[g.move1] + \" | \" +\n\t\t\tshortName(g.player2) + \" | \" + mov2[g.move2] + \" | \" +\n\t\t\twin[g.winner()+1] + \"\\n\"\n\t}\n\treturn output\n}\n\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"21556849","gas_fee":"44911ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"OkPnI7bRX2s2QKHvVCxg4bqPIwuV9ZMlGGRw7FUammuXq3rHpDF6Y2SRtmlNVr/Y0fzDo+65xc53vKp3ced4Cg=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1740766339"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1muscq008thavsdxlgfu5vmmuxhn5uju37l68q4","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"Y1d9Z9Gr8+fl41W+5rqEIs2PG32s4yXBwuRdP8WkbuTgBr04W513bQAO+1b7gTrBQvpk3vR4PDjSCa/GWzbjCw=="}],"memo":""},"metadata":{"timestamp":"1740766565"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1muscq008thavsdxlgfu5vmmuxhn5uju37l68q4","package":{"name":"shifumi","path":"gno.land/r/g1muscq008thavsdxlgfu5vmmuxhn5uju37l68q4/shifumi","files":[{"name":"package.gno","body":"package shifumi\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\n\t\"gno.land/r/demo/users\"\n)\n\nconst (\n\tempty = iota\n\trock\n\tpaper\n\tscissors\n\tlast\n)\n\ntype game struct {\n\tplayer1, player2 std.Address // shifumi is a 2 players game\n\tmove1, move2     int         // can be empty, rock, paper, or scissors\n}\n\nvar games avl.Tree\nvar id seqid.ID\n\nfunc (g *game) play(player std.Address, move int) error {\n\tif !(move \u003e empty \u0026\u0026 move \u003c last) {\n\t\treturn errors.New(\"invalid move\")\n\t}\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\tif player == g.player1 \u0026\u0026 g.move1 == empty {\n\t\tg.move1 = move\n\t\treturn nil\n\t}\n\tif player == g.player2 \u0026\u0026 g.move2 == empty {\n\t\tg.move2 = move\n\t\treturn nil\n\t}\n\treturn errors.New(\"already played\")\n}\n\nfunc (g *game) winner() int {\n\tif g.move1 == empty || g.move2 == empty {\n\t\treturn -1\n\t}\n\tif g.move1 == g.move2 {\n\t\treturn 0\n\t}\n\tif g.move1 == rock \u0026\u0026 g.move2 == scissors ||\n\t\tg.move1 == paper \u0026\u0026 g.move2 == rock ||\n\t\tg.move1 == scissors \u0026\u0026 g.move2 == paper {\n\t\treturn 1\n\t}\n\treturn 2\n}\n\n// NewGame creates a new game where player1 is the caller and player2 the argument.\n// A new game index is returned.\nfunc NewGame(player std.Address) int {\n\tgames.Set(id.Next().String(), \u0026game{player1: std.PreviousRealm().Address(), player2: player})\n\treturn int(id)\n}\n\n// Play executes a move for the game at index idx, where move can be:\n// 1 (rock), 2 (paper), 3 (scissors).\nfunc Play(idx, move int) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\tpanic(\"game not found\")\n\t}\n\tif err := v.(*game).play(std.PreviousRealm().Address(), move); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Render(path string) string {\n\tmov1 := []string{\"\", \" 🤜  \", \" 🫱  \", \" 👉  \"}\n\tmov2 := []string{\"\", \" 🤛  \", \" 🫲  \", \" 👈  \"}\n\twin := []string{\"pending\", \"draw\", \"player1\", \"player2\"}\n\n\toutput := `# 👊  ✋  ✌️  Shifumi\nActions:\n* [NewGame](shifumi$help\u0026func=NewGame) opponentAddress\n* [Play](shifumi$help\u0026func=Play) gameIndex move (1=rock, 2=paper, 3=scissors)\n\n game  | player1 |     | player2 |       | win \n --- | --- | --- | --- | --- | ---\n`\n\t// Output the 100 most recent games.\n\tmaxGames := 100\n\tfor n := int(id); n \u003e 0 \u0026\u0026 int(id)-n \u003c maxGames; n-- {\n\t\tv, ok := games.Get(seqid.ID(n).String())\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tg := v.(*game)\n\t\toutput += strconv.Itoa(n) + \" | \" +\n\t\t\tshortName(g.player1) + \" | \" + mov1[g.move1] + \" | \" +\n\t\t\tshortName(g.player2) + \" | \" + mov2[g.move2] + \" | \" +\n\t\t\twin[g.winner()+1] + \"\\n\"\n\t}\n\treturn output\n}\n\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"NVcUSksZqVjXTlGw9Exa3wb5KSMjA5wVPHnNWKIby6t/1xFRah73VtKkGrwMnayawWU7fIMxMtnLbHbnBV9hDA=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1740766656"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1muscq008thavsdxlgfu5vmmuxhn5uju37l68q4","package":{"name":"shifumi","path":"gno.land/r/g1muscq008thavsdxlgfu5vmmuxhn5uju37l68q4/shifumi","files":[{"name":"package.gno","body":"package shifumi\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\n\t\"gno.land/r/demo/users\"\n)\n\nconst (\n\tempty = iota\n\trock\n\tpaper\n\tscissors\n\tlast\n)\n\ntype game struct {\n\tplayer1, player2 std.Address // shifumi is a 2 players game\n\tmove1, move2     int         // can be empty, rock, paper, or scissors\n}\n\nvar games avl.Tree\nvar id seqid.ID\n\nfunc (g *game) play(player std.Address, move int) error {\n\tif !(move \u003e empty \u0026\u0026 move \u003c last) {\n\t\treturn errors.New(\"invalid move\")\n\t}\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\tif player == g.player1 \u0026\u0026 g.move1 == empty {\n\t\tg.move1 = move\n\t\treturn nil\n\t}\n\tif player == g.player2 \u0026\u0026 g.move2 == empty {\n\t\tg.move2 = move\n\t\treturn nil\n\t}\n\treturn errors.New(\"already played\")\n}\n\nfunc (g *game) winner() int {\n\tif g.move1 == empty || g.move2 == empty {\n\t\treturn -1\n\t}\n\tif g.move1 == g.move2 {\n\t\treturn 0\n\t}\n\tif g.move1 == rock \u0026\u0026 g.move2 == scissors ||\n\t\tg.move1 == paper \u0026\u0026 g.move2 == rock ||\n\t\tg.move1 == scissors \u0026\u0026 g.move2 == paper {\n\t\treturn 1\n\t}\n\treturn 2\n}\n\n// NewGame creates a new game where player1 is the caller and player2 the argument.\n// A new game index is returned.\nfunc NewGame(player std.Address) int {\n\tgames.Set(id.Next().String(), \u0026game{player1: std.PreviousRealm().Address(), player2: player})\n\treturn int(id)\n}\n\n// Play executes a move for the game at index idx, where move can be:\n// 1 (rock), 2 (paper), 3 (scissors).\nfunc Play(idx, move int) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\tpanic(\"game not found\")\n\t}\n\tif err := v.(*game).play(std.PreviousRealm().Address(), move); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Render(path string) string {\n\tmov1 := []string{\"\", \" 🤜  \", \" 🫱  \", \" 👉  \"}\n\tmov2 := []string{\"\", \" 🤛  \", \" 🫲  \", \" 👈  \"}\n\twin := []string{\"pending\", \"draw\", \"player1\", \"player2\"}\n\n\toutput := `# 👊  ✋  ✌️  Shifumi\nActions:\n* [NewGame](shifumi$help\u0026func=NewGame) opponentAddress\n* [Play](shifumi$help\u0026func=Play) gameIndex move (1=rock, 2=paper, 3=scissors)\n\n game  | player1 |     | player2 |       | win \n --- | --- | --- | --- | --- | ---\n`\n\t// Output the 100 most recent games.\n\tmaxGames := 100\n\tfor n := int(id); n \u003e 0 \u0026\u0026 int(id)-n \u003c maxGames; n-- {\n\t\tv, ok := games.Get(seqid.ID(n).String())\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tg := v.(*game)\n\t\toutput += strconv.Itoa(n) + \" | \" +\n\t\t\tshortName(g.player1) + \" | \" + mov1[g.move1] + \" | \" +\n\t\t\tshortName(g.player2) + \" | \" + mov2[g.move2] + \" | \" +\n\t\t\twin[g.winner()+1] + \"\\n\"\n\t}\n\treturn output\n}\n\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"21556849","gas_fee":"44911ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"s0YXOWGhl3NuzSH+RwRf8wp1X28iwcOzAKM35WL+owYfMwKWi1XRzUk0zRSuO2tTQ52D7yNAJ3WA/brl2jFBCQ=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1740766671"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1398ujj4nsaw8uh87c6aemj58akg0g2ku6eg08n","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"PLhjiR1RUc4n/evr+r6U1AQc7EURynq0DRFTIuof5q4GJKyOquIlYZMpBN/48Qq6exjzPYUahJ0ZL1c/DF0uCA=="}],"memo":""},"metadata":{"timestamp":"1740766756"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1398ujj4nsaw8uh87c6aemj58akg0g2ku6eg08n","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Transfer","args":["g1vjwm0zjcupx4rn72r38en7pdsped6hwxx3y96c","10000000"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"2QmB452y4MZ8om+cTmRv3/mtzw36OaB2azj2UWGAc8VJ2fSqfedFT9oLAupjsOlZ2NsIAMmmYWqKMCNpXicADg=="}],"memo":"12313"},"metadata":{"timestamp":"1740766811"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1398ujj4nsaw8uh87c6aemj58akg0g2ku6eg08n","send":"1000000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null}],"fee":{"gas_wanted":"8650513","gas_fee":"18022ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"fYe+JUZkDH91tpsRGhFcxXgbUOzDEgbW8VyHWSPnm+0rR0EspwbEQ3y4F0vus0PccaIo2Wy5RrG9+IgwOQgMCQ=="}],"memo":"12313"},"metadata":{"timestamp":"1740766836"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1740792603_0","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"316473","gas_fee":"317ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"FEeNYbIy7M6W9/SDIU3n1wCG4wVkOcOtFzfHHDq98hV3O7NQvGFQDrcdp8jmIWCjEp01JRxS3ydXGmdNweh5AQ=="}],"memo":""},"metadata":{"timestamp":"1740792602"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1740792603_1","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"316473","gas_fee":"317ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"qRI1Gv2ttS/WwmGxSEoqy/+3212JWSsjx7RGww/gKyVzWKO04GhL9/Z0NBfUU5qZd88n41Qla+RDd/H+IHHWCg=="}],"memo":""},"metadata":{"timestamp":"1740792602"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1740792603_2","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"316473","gas_fee":"317ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"VepZXqg0qb1RukziVMrAfDj+qG6SlwtM4mvcyTP/D7kXnaWvl4h7wDmcNfSEktubDx0xItEsNcvKG9DfA/0ZCw=="}],"memo":""},"metadata":{"timestamp":"1740792602"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1740792603_3","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"316473","gas_fee":"317ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"MBI+WoaqfyP/4aUdC6K2KVIPcWN51pkSzFf638jEJ8xQQr6y+7rHp1FfTirXLB51ocv94zR+w2v9KpNTUn4oCA=="}],"memo":""},"metadata":{"timestamp":"1740792602"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1740792603_4","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"316473","gas_fee":"317ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"I/jxYIAjtNJL1weICWx8xK0W/xfcoHhrD5uaNw/W684A1hFUNcVQ1/pSGG/0P/Vjcw3daIWi0PBYCI7nlvzrDw=="}],"memo":""},"metadata":{"timestamp":"1740792602"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1740792603_5","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"316473","gas_fee":"317ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"HaIZI4R2TgqWEtLkb3gspQAdOwclW7UwMZ5s6aTNREYDRAr9OzNli1nHD/uvyza4OyuvOfslI9H+69GYXGmiDQ=="}],"memo":""},"metadata":{"timestamp":"1740792602"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1740792603_6","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"316473","gas_fee":"317ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"NvW/Ji4CWGQRaFiwsAZaFMzNfmseyS9F/3AOlYeoUcaA3U+tb/f/Tz32BAUNQN3ciSwzrZ9afGMCxI2RxYE+BQ=="}],"memo":""},"metadata":{"timestamp":"1740792602"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1740792603_7","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"316473","gas_fee":"317ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"5vEBOHZu+GZ2gtDWnQv8GC1tCZ3UDMqMkF0aWQDOHhyUopXuE0Od12ZK0YYnkUvr6ZU+A2msLTqpJHOH8CpUBA=="}],"memo":""},"metadata":{"timestamp":"1740792602"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1740792603_8","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"316473","gas_fee":"317ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"B1WE3F4h9mP/iTCcQ7r0+tN1932MfJAKDEfpXm1h9WvO1fYnDhSCo2nptsKUUxsXt7srtRSieDPjji/g5wMuDw=="}],"memo":""},"metadata":{"timestamp":"1740792602"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1740792603_9","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"316473","gas_fee":"317ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"jqGN5k78byA9b8mjrhpD5b0W1sWOMNzx8ySq2DghX9rZhtzV6Zo4NFDFpOzeETi2YhhGcEu/YW2vPIDAXM1yBg=="}],"memo":""},"metadata":{"timestamp":"1740792602"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","package":{"name":"shifumi555","path":"gno.land/r/g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c/shifumi555","files":[{"name":"package.gno","body":"package shifumi\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\n\t\"gno.land/r/demo/users\"\n)\n\nconst (\n\tempty = iota\n\trock\n\tpaper\n\tscissors\n\tlast\n)\n\ntype game struct {\n\tplayer1, player2 std.Address // shifumi is a 2 players game\n\tmove1, move2     int         // can be empty, rock, paper, or scissors\n}\n\nvar games avl.Tree\nvar id seqid.ID\n\nfunc (g *game) play(player std.Address, move int) error {\n\tif !(move \u003e empty \u0026\u0026 move \u003c last) {\n\t\treturn errors.New(\"invalid move\")\n\t}\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\tif player == g.player1 \u0026\u0026 g.move1 == empty {\n\t\tg.move1 = move\n\t\treturn nil\n\t}\n\tif player == g.player2 \u0026\u0026 g.move2 == empty {\n\t\tg.move2 = move\n\t\treturn nil\n\t}\n\treturn errors.New(\"already played\")\n}\n\nfunc (g *game) winner() int {\n\tif g.move1 == empty || g.move2 == empty {\n\t\treturn -1\n\t}\n\tif g.move1 == g.move2 {\n\t\treturn 0\n\t}\n\tif g.move1 == rock \u0026\u0026 g.move2 == scissors ||\n\t\tg.move1 == paper \u0026\u0026 g.move2 == rock ||\n\t\tg.move1 == scissors \u0026\u0026 g.move2 == paper {\n\t\treturn 1\n\t}\n\treturn 2\n}\n\n// NewGame creates a new game where player1 is the caller and player2 the argument.\n// A new game index is returned.\nfunc NewGame(player std.Address) int {\n\tgames.Set(id.Next().String(), \u0026game{player1: std.PreviousRealm().Address(), player2: player})\n\treturn int(id)\n}\n\n// Play executes a move for the game at index idx, where move can be:\n// 1 (rock), 2 (paper), 3 (scissors).\nfunc Play(idx, move int) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\tpanic(\"game not found\")\n\t}\n\tif err := v.(*game).play(std.PreviousRealm().Address(), move); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Render(path string) string {\n\tmov1 := []string{\"\", \" 🤜  \", \" 🫱  \", \" 👉  \"}\n\tmov2 := []string{\"\", \" 🤛  \", \" 🫲  \", \" 👈  \"}\n\twin := []string{\"pending\", \"draw\", \"player1\", \"player2\"}\n\n\toutput := `# 👊  ✋  ✌️  Shifumi\nActions:\n* [NewGame](shifumi$help\u0026func=NewGame) opponentAddress\n* [Play](shifumi$help\u0026func=Play) gameIndex move (1=rock, 2=paper, 3=scissors)\n\n game  | player1 |     | player2 |       | win \n --- | --- | --- | --- | --- | ---\n`\n\t// Output the 100 most recent games.\n\tmaxGames := 100\n\tfor n := int(id); n \u003e 0 \u0026\u0026 int(id)-n \u003c maxGames; n-- {\n\t\tv, ok := games.Get(seqid.ID(n).String())\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tg := v.(*game)\n\t\toutput += strconv.Itoa(n) + \" | \" +\n\t\t\tshortName(g.player1) + \" | \" + mov1[g.move1] + \" | \" +\n\t\t\tshortName(g.player2) + \" | \" + mov2[g.move2] + \" | \" +\n\t\t\twin[g.winner()+1] + \"\\n\"\n\t}\n\treturn output\n}\n\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"30000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"GprTlHJNPtKnuc2OiNO6QkFJQt/vM/3ShSavWy9N3hwDtmMTGYUjMNtbiOB6HkuoKCJeyGN3D//9OAuyr91JDA=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1740810125"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","package":{"name":"shifumi777","path":"gno.land/r/g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c/shifumi777","files":[{"name":"package.gno","body":"package shifumi\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\n\t\"gno.land/r/demo/users\"\n)\n\nconst (\n\tempty = iota\n\trock\n\tpaper\n\tscissors\n\tlast\n)\n\ntype game struct {\n\tplayer1, player2 std.Address // shifumi is a 2 players game\n\tmove1, move2     int         // can be empty, rock, paper, or scissors\n}\n\nvar games avl.Tree\nvar id seqid.ID\n\nfunc (g *game) play(player std.Address, move int) error {\n\tif !(move \u003e empty \u0026\u0026 move \u003c last) {\n\t\treturn errors.New(\"invalid move\")\n\t}\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\tif player == g.player1 \u0026\u0026 g.move1 == empty {\n\t\tg.move1 = move\n\t\treturn nil\n\t}\n\tif player == g.player2 \u0026\u0026 g.move2 == empty {\n\t\tg.move2 = move\n\t\treturn nil\n\t}\n\treturn errors.New(\"already played\")\n}\n\nfunc (g *game) winner() int {\n\tif g.move1 == empty || g.move2 == empty {\n\t\treturn -1\n\t}\n\tif g.move1 == g.move2 {\n\t\treturn 0\n\t}\n\tif g.move1 == rock \u0026\u0026 g.move2 == scissors ||\n\t\tg.move1 == paper \u0026\u0026 g.move2 == rock ||\n\t\tg.move1 == scissors \u0026\u0026 g.move2 == paper {\n\t\treturn 1\n\t}\n\treturn 2\n}\n\n// NewGame creates a new game where player1 is the caller and player2 the argument.\n// A new game index is returned.\nfunc NewGame(player std.Address) int {\n\tgames.Set(id.Next().String(), \u0026game{player1: std.PreviousRealm().Address(), player2: player})\n\treturn int(id)\n}\n\n// Play executes a move for the game at index idx, where move can be:\n// 1 (rock), 2 (paper), 3 (scissors).\nfunc Play(idx, move int) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\tpanic(\"game not found\")\n\t}\n\tif err := v.(*game).play(std.PreviousRealm().Address(), move); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Render(path string) string {\n\tmov1 := []string{\"\", \" 🤜  \", \" 🫱  \", \" 👉  \"}\n\tmov2 := []string{\"\", \" 🤛  \", \" 🫲  \", \" 👈  \"}\n\twin := []string{\"pending\", \"draw\", \"player1\", \"player2\"}\n\n\toutput := `# 👊  ✋  ✌️  Shifumi\nActions:\n* [NewGame](shifumi$help\u0026func=NewGame) opponentAddress\n* [Play](shifumi$help\u0026func=Play) gameIndex move (1=rock, 2=paper, 3=scissors)\n\n game  | player1 |     | player2 |       | win \n --- | --- | --- | --- | --- | ---\n`\n\t// Output the 100 most recent games.\n\tmaxGames := 100\n\tfor n := int(id); n \u003e 0 \u0026\u0026 int(id)-n \u003c maxGames; n-- {\n\t\tv, ok := games.Get(seqid.ID(n).String())\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tg := v.(*game)\n\t\toutput += strconv.Itoa(n) + \" | \" +\n\t\t\tshortName(g.player1) + \" | \" + mov1[g.move1] + \" | \" +\n\t\t\tshortName(g.player2) + \" | \" + mov2[g.move2] + \" | \" +\n\t\t\twin[g.winner()+1] + \"\\n\"\n\t}\n\treturn output\n}\n\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"jVfwAYmAsDORZX12VG6Tc4Zn+B1yJ4rNN3XhqGjW/EWazrq50hOReshU8eneYpm75CUNatwRGgInskr3vfEADw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1740811802"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","package":{"name":"shifumi777","path":"gno.land/r/g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c/shifumi777","files":[{"name":"package.gno","body":"package shifumi\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\n\t\"gno.land/r/demo/users\"\n)\n\nconst (\n\tempty = iota\n\trock\n\tpaper\n\tscissors\n\tlast\n)\n\ntype game struct {\n\tplayer1, player2 std.Address // shifumi is a 2 players game\n\tmove1, move2     int         // can be empty, rock, paper, or scissors\n}\n\nvar games avl.Tree\nvar id seqid.ID\n\nfunc (g *game) play(player std.Address, move int) error {\n\tif !(move \u003e empty \u0026\u0026 move \u003c last) {\n\t\treturn errors.New(\"invalid move\")\n\t}\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\tif player == g.player1 \u0026\u0026 g.move1 == empty {\n\t\tg.move1 = move\n\t\treturn nil\n\t}\n\tif player == g.player2 \u0026\u0026 g.move2 == empty {\n\t\tg.move2 = move\n\t\treturn nil\n\t}\n\treturn errors.New(\"already played\")\n}\n\nfunc (g *game) winner() int {\n\tif g.move1 == empty || g.move2 == empty {\n\t\treturn -1\n\t}\n\tif g.move1 == g.move2 {\n\t\treturn 0\n\t}\n\tif g.move1 == rock \u0026\u0026 g.move2 == scissors ||\n\t\tg.move1 == paper \u0026\u0026 g.move2 == rock ||\n\t\tg.move1 == scissors \u0026\u0026 g.move2 == paper {\n\t\treturn 1\n\t}\n\treturn 2\n}\n\n// NewGame creates a new game where player1 is the caller and player2 the argument.\n// A new game index is returned.\nfunc NewGame(player std.Address) int {\n\tgames.Set(id.Next().String(), \u0026game{player1: std.PreviousRealm().Address(), player2: player})\n\treturn int(id)\n}\n\n// Play executes a move for the game at index idx, where move can be:\n// 1 (rock), 2 (paper), 3 (scissors).\nfunc Play(idx, move int) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\tpanic(\"game not found\")\n\t}\n\tif err := v.(*game).play(std.PreviousRealm().Address(), move); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Render(path string) string {\n\tmov1 := []string{\"\", \" 🤜  \", \" 🫱  \", \" 👉  \"}\n\tmov2 := []string{\"\", \" 🤛  \", \" 🫲  \", \" 👈  \"}\n\twin := []string{\"pending\", \"draw\", \"player1\", \"player2\"}\n\n\toutput := `# 👊  ✋  ✌️  Shifumi\nActions:\n* [NewGame](shifumi$help\u0026func=NewGame) opponentAddress\n* [Play](shifumi$help\u0026func=Play) gameIndex move (1=rock, 2=paper, 3=scissors)\n\n game  | player1 |     | player2 |       | win \n --- | --- | --- | --- | --- | ---\n`\n\t// Output the 100 most recent games.\n\tmaxGames := 100\n\tfor n := int(id); n \u003e 0 \u0026\u0026 int(id)-n \u003c maxGames; n-- {\n\t\tv, ok := games.Get(seqid.ID(n).String())\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tg := v.(*game)\n\t\toutput += strconv.Itoa(n) + \" | \" +\n\t\t\tshortName(g.player1) + \" | \" + mov1[g.move1] + \" | \" +\n\t\t\tshortName(g.player2) + \" | \" + mov2[g.move2] + \" | \" +\n\t\t\twin[g.winner()+1] + \"\\n\"\n\t}\n\treturn output\n}\n\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"jVfwAYmAsDORZX12VG6Tc4Zn+B1yJ4rNN3XhqGjW/EWazrq50hOReshU8eneYpm75CUNatwRGgInskr3vfEADw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1740811817"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1gtqxswx0sxmjgkxwjjse82t62fk2lt7dgkg3ea","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"8R/YN3h27Nlz1+EWvH1Sb36Y6O+qjs7yROG7wQnX9xqhzTApbkRxHhNQxZ2r2s4+Q4In+9SdKc7MPlesb3LVCQ=="}],"memo":""},"metadata":{"timestamp":"1740811847"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1gtqxswx0sxmjgkxwjjse82t62fk2lt7dgkg3ea","package":{"name":"shifumi999","path":"gno.land/r/g1gtqxswx0sxmjgkxwjjse82t62fk2lt7dgkg3ea/shifumi999","files":[{"name":"package.gno","body":"package shifumi\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\n\t\"gno.land/r/demo/users\"\n)\n\nconst (\n\tempty = iota\n\trock\n\tpaper\n\tscissors\n\tlast\n)\n\ntype game struct {\n\tplayer1, player2 std.Address // shifumi is a 2 players game\n\tmove1, move2     int         // can be empty, rock, paper, or scissors\n}\n\nvar games avl.Tree\nvar id seqid.ID\n\nfunc (g *game) play(player std.Address, move int) error {\n\tif !(move \u003e empty \u0026\u0026 move \u003c last) {\n\t\treturn errors.New(\"invalid move\")\n\t}\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\tif player == g.player1 \u0026\u0026 g.move1 == empty {\n\t\tg.move1 = move\n\t\treturn nil\n\t}\n\tif player == g.player2 \u0026\u0026 g.move2 == empty {\n\t\tg.move2 = move\n\t\treturn nil\n\t}\n\treturn errors.New(\"already played\")\n}\n\nfunc (g *game) winner() int {\n\tif g.move1 == empty || g.move2 == empty {\n\t\treturn -1\n\t}\n\tif g.move1 == g.move2 {\n\t\treturn 0\n\t}\n\tif g.move1 == rock \u0026\u0026 g.move2 == scissors ||\n\t\tg.move1 == paper \u0026\u0026 g.move2 == rock ||\n\t\tg.move1 == scissors \u0026\u0026 g.move2 == paper {\n\t\treturn 1\n\t}\n\treturn 2\n}\n\n// NewGame creates a new game where player1 is the caller and player2 the argument.\n// A new game index is returned.\nfunc NewGame(player std.Address) int {\n\tgames.Set(id.Next().String(), \u0026game{player1: std.PreviousRealm().Address(), player2: player})\n\treturn int(id)\n}\n\n// Play executes a move for the game at index idx, where move can be:\n// 1 (rock), 2 (paper), 3 (scissors).\nfunc Play(idx, move int) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\tpanic(\"game not found\")\n\t}\n\tif err := v.(*game).play(std.PreviousRealm().Address(), move); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Render(path string) string {\n\tmov1 := []string{\"\", \" 🤜  \", \" 🫱  \", \" 👉  \"}\n\tmov2 := []string{\"\", \" 🤛  \", \" 🫲  \", \" 👈  \"}\n\twin := []string{\"pending\", \"draw\", \"player1\", \"player2\"}\n\n\toutput := `# 👊  ✋  ✌️  Shifumi\nActions:\n* [NewGame](shifumi$help\u0026func=NewGame) opponentAddress\n* [Play](shifumi$help\u0026func=Play) gameIndex move (1=rock, 2=paper, 3=scissors)\n\n game  | player1 |     | player2 |       | win \n --- | --- | --- | --- | --- | ---\n`\n\t// Output the 100 most recent games.\n\tmaxGames := 100\n\tfor n := int(id); n \u003e 0 \u0026\u0026 int(id)-n \u003c maxGames; n-- {\n\t\tv, ok := games.Get(seqid.ID(n).String())\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tg := v.(*game)\n\t\toutput += strconv.Itoa(n) + \" | \" +\n\t\t\tshortName(g.player1) + \" | \" + mov1[g.move1] + \" | \" +\n\t\t\tshortName(g.player2) + \" | \" + mov2[g.move2] + \" | \" +\n\t\t\twin[g.winner()+1] + \"\\n\"\n\t}\n\treturn output\n}\n\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"VG68rtcbzU667opYMzB/zRh6dDgZsT/vBXrsVvaUlCWj3q1bgXUGE97fOA7v+jUG4mCU5q9QAdDX5LiHIq8GBQ=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1740811897"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1gtqxswx0sxmjgkxwjjse82t62fk2lt7dgkg3ea","package":{"name":"shifumi9999","path":"gno.land/r/g1gtqxswx0sxmjgkxwjjse82t62fk2lt7dgkg3ea/shifumi9999","files":[{"name":"package.gno","body":"package shifumi\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\n\t\"gno.land/r/demo/users\"\n)\n\nconst (\n\tempty = iota\n\trock\n\tpaper\n\tscissors\n\tlast\n)\n\ntype game struct {\n\tplayer1, player2 std.Address // shifumi is a 2 players game\n\tmove1, move2     int         // can be empty, rock, paper, or scissors\n}\n\nvar games avl.Tree\nvar id seqid.ID\n\nfunc (g *game) play(player std.Address, move int) error {\n\tif !(move \u003e empty \u0026\u0026 move \u003c last) {\n\t\treturn errors.New(\"invalid move\")\n\t}\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\tif player == g.player1 \u0026\u0026 g.move1 == empty {\n\t\tg.move1 = move\n\t\treturn nil\n\t}\n\tif player == g.player2 \u0026\u0026 g.move2 == empty {\n\t\tg.move2 = move\n\t\treturn nil\n\t}\n\treturn errors.New(\"already played\")\n}\n\nfunc (g *game) winner() int {\n\tif g.move1 == empty || g.move2 == empty {\n\t\treturn -1\n\t}\n\tif g.move1 == g.move2 {\n\t\treturn 0\n\t}\n\tif g.move1 == rock \u0026\u0026 g.move2 == scissors ||\n\t\tg.move1 == paper \u0026\u0026 g.move2 == rock ||\n\t\tg.move1 == scissors \u0026\u0026 g.move2 == paper {\n\t\treturn 1\n\t}\n\treturn 2\n}\n\n// NewGame creates a new game where player1 is the caller and player2 the argument.\n// A new game index is returned.\nfunc NewGame(player std.Address) int {\n\tgames.Set(id.Next().String(), \u0026game{player1: std.PreviousRealm().Address(), player2: player})\n\treturn int(id)\n}\n\n// Play executes a move for the game at index idx, where move can be:\n// 1 (rock), 2 (paper), 3 (scissors).\nfunc Play(idx, move int) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\tpanic(\"game not found\")\n\t}\n\tif err := v.(*game).play(std.PreviousRealm().Address(), move); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Render(path string) string {\n\tmov1 := []string{\"\", \" 🤜  \", \" 🫱  \", \" 👉  \"}\n\tmov2 := []string{\"\", \" 🤛  \", \" 🫲  \", \" 👈  \"}\n\twin := []string{\"pending\", \"draw\", \"player1\", \"player2\"}\n\n\toutput := `# 👊  ✋  ✌️  Shifumi\nActions:\n* [NewGame](shifumi$help\u0026func=NewGame) opponentAddress\n* [Play](shifumi$help\u0026func=Play) gameIndex move (1=rock, 2=paper, 3=scissors)\n\n game  | player1 |     | player2 |       | win \n --- | --- | --- | --- | --- | ---\n`\n\t// Output the 100 most recent games.\n\tmaxGames := 100\n\tfor n := int(id); n \u003e 0 \u0026\u0026 int(id)-n \u003c maxGames; n-- {\n\t\tv, ok := games.Get(seqid.ID(n).String())\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tg := v.(*game)\n\t\toutput += strconv.Itoa(n) + \" | \" +\n\t\t\tshortName(g.player1) + \" | \" + mov1[g.move1] + \" | \" +\n\t\t\tshortName(g.player2) + \" | \" + mov2[g.move2] + \" | \" +\n\t\t\twin[g.winner()+1] + \"\\n\"\n\t}\n\treturn output\n}\n\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"adAA2I0HS76oNzfK6Jsfn+Tn8ytGwAslaSvFoXpuTAVGzPz06Vv9tYXXksqO18KrDzAvWBNjN5CRg2RWu4F+CA=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1740811912"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1gtqxswx0sxmjgkxwjjse82t62fk2lt7dgkg3ea","to_address":"g105mv9pq5uqzfm82vj5caef0s2ddxxa88ha3fa4","amount":"9949837ugnot"}],"fee":{"gas_wanted":"54259","gas_fee":"114ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"THsXNcPV5hDYJ5ZTehSS8Mr9Wxmbq+E/kpEqjr6fbzybDVP0ckQhYed19ShI5enRp69IIqdOosUkR9avIsI6DA=="}],"memo":""},"metadata":{"timestamp":"1740812394"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g105mv9pq5uqzfm82vj5caef0s2ddxxa88ha3fa4","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"N9CH61WinEPXPN5KM7jiDyVchaEckuA0QLeaOiMyd4SqMdRaiS5evcXaqc3sKiRCvSfZs4dOio1UoaOlRPqNCA=="}],"memo":""},"metadata":{"timestamp":"1740812414"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g105mv9pq5uqzfm82vj5caef0s2ddxxa88ha3fa4","package":{"name":"test99","path":"gno.land/r/g105mv9pq5uqzfm82vj5caef0s2ddxxa88ha3fa4/test99","files":[{"name":"package.gno","body":"package shifumi\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\n\t\"gno.land/r/demo/users\"\n)\n\nconst (\n\tempty = iota\n\trock\n\tpaper\n\tscissors\n\tlast\n)\n\ntype game struct {\n\tplayer1, player2 std.Address // shifumi is a 2 players game\n\tmove1, move2     int         // can be empty, rock, paper, or scissors\n}\n\nvar games avl.Tree\nvar id seqid.ID\n\nfunc (g *game) play(player std.Address, move int) error {\n\tif !(move \u003e empty \u0026\u0026 move \u003c last) {\n\t\treturn errors.New(\"invalid move\")\n\t}\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\tif player == g.player1 \u0026\u0026 g.move1 == empty {\n\t\tg.move1 = move\n\t\treturn nil\n\t}\n\tif player == g.player2 \u0026\u0026 g.move2 == empty {\n\t\tg.move2 = move\n\t\treturn nil\n\t}\n\treturn errors.New(\"already played\")\n}\n\nfunc (g *game) winner() int {\n\tif g.move1 == empty || g.move2 == empty {\n\t\treturn -1\n\t}\n\tif g.move1 == g.move2 {\n\t\treturn 0\n\t}\n\tif g.move1 == rock \u0026\u0026 g.move2 == scissors ||\n\t\tg.move1 == paper \u0026\u0026 g.move2 == rock ||\n\t\tg.move1 == scissors \u0026\u0026 g.move2 == paper {\n\t\treturn 1\n\t}\n\treturn 2\n}\n\n// NewGame creates a new game where player1 is the caller and player2 the argument.\n// A new game index is returned.\nfunc NewGame(player std.Address) int {\n\tgames.Set(id.Next().String(), \u0026game{player1: std.PreviousRealm().Address(), player2: player})\n\treturn int(id)\n}\n\n// Play executes a move for the game at index idx, where move can be:\n// 1 (rock), 2 (paper), 3 (scissors).\nfunc Play(idx, move int) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\tpanic(\"game not found\")\n\t}\n\tif err := v.(*game).play(std.PreviousRealm().Address(), move); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Render(path string) string {\n\tmov1 := []string{\"\", \" 🤜  \", \" 🫱  \", \" 👉  \"}\n\tmov2 := []string{\"\", \" 🤛  \", \" 🫲  \", \" 👈  \"}\n\twin := []string{\"pending\", \"draw\", \"player1\", \"player2\"}\n\n\toutput := `# 👊  ✋  ✌️  Shifumi\nActions:\n* [NewGame](shifumi$help\u0026func=NewGame) opponentAddress\n* [Play](shifumi$help\u0026func=Play) gameIndex move (1=rock, 2=paper, 3=scissors)\n\n game  | player1 |     | player2 |       | win \n --- | --- | --- | --- | --- | ---\n`\n\t// Output the 100 most recent games.\n\tmaxGames := 100\n\tfor n := int(id); n \u003e 0 \u0026\u0026 int(id)-n \u003c maxGames; n-- {\n\t\tv, ok := games.Get(seqid.ID(n).String())\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tg := v.(*game)\n\t\toutput += strconv.Itoa(n) + \" | \" +\n\t\t\tshortName(g.player1) + \" | \" + mov1[g.move1] + \" | \" +\n\t\t\tshortName(g.player2) + \" | \" + mov2[g.move2] + \" | \" +\n\t\t\twin[g.winner()+1] + \"\\n\"\n\t}\n\treturn output\n}\n\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"6gz5Y7RUhImBDed7xyrRJK4TCfzIVwF9ry2wbEeTUenIhlMrr2Slix2Kp88rWCQSN1IjeCQm9IP8b7NbVvP8Dw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1740812459"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g105mv9pq5uqzfm82vj5caef0s2ddxxa88ha3fa4","package":{"name":"test99","path":"gno.land/r/g105mv9pq5uqzfm82vj5caef0s2ddxxa88ha3fa4/test99","files":[{"name":"package.gno","body":"package shifumi\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\n\t\"gno.land/r/demo/users\"\n)\n\nconst (\n\tempty = iota\n\trock\n\tpaper\n\tscissors\n\tlast\n)\n\ntype game struct {\n\tplayer1, player2 std.Address // shifumi is a 2 players game\n\tmove1, move2     int         // can be empty, rock, paper, or scissors\n}\n\nvar games avl.Tree\nvar id seqid.ID\n\nfunc (g *game) play(player std.Address, move int) error {\n\tif !(move \u003e empty \u0026\u0026 move \u003c last) {\n\t\treturn errors.New(\"invalid move\")\n\t}\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\tif player == g.player1 \u0026\u0026 g.move1 == empty {\n\t\tg.move1 = move\n\t\treturn nil\n\t}\n\tif player == g.player2 \u0026\u0026 g.move2 == empty {\n\t\tg.move2 = move\n\t\treturn nil\n\t}\n\treturn errors.New(\"already played\")\n}\n\nfunc (g *game) winner() int {\n\tif g.move1 == empty || g.move2 == empty {\n\t\treturn -1\n\t}\n\tif g.move1 == g.move2 {\n\t\treturn 0\n\t}\n\tif g.move1 == rock \u0026\u0026 g.move2 == scissors ||\n\t\tg.move1 == paper \u0026\u0026 g.move2 == rock ||\n\t\tg.move1 == scissors \u0026\u0026 g.move2 == paper {\n\t\treturn 1\n\t}\n\treturn 2\n}\n\n// NewGame creates a new game where player1 is the caller and player2 the argument.\n// A new game index is returned.\nfunc NewGame(player std.Address) int {\n\tgames.Set(id.Next().String(), \u0026game{player1: std.PreviousRealm().Address(), player2: player})\n\treturn int(id)\n}\n\n// Play executes a move for the game at index idx, where move can be:\n// 1 (rock), 2 (paper), 3 (scissors).\nfunc Play(idx, move int) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\tpanic(\"game not found\")\n\t}\n\tif err := v.(*game).play(std.PreviousRealm().Address(), move); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Render(path string) string {\n\tmov1 := []string{\"\", \" 🤜  \", \" 🫱  \", \" 👉  \"}\n\tmov2 := []string{\"\", \" 🤛  \", \" 🫲  \", \" 👈  \"}\n\twin := []string{\"pending\", \"draw\", \"player1\", \"player2\"}\n\n\toutput := `# 👊  ✋  ✌️  Shifumi\nActions:\n* [NewGame](shifumi$help\u0026func=NewGame) opponentAddress\n* [Play](shifumi$help\u0026func=Play) gameIndex move (1=rock, 2=paper, 3=scissors)\n\n game  | player1 |     | player2 |       | win \n --- | --- | --- | --- | --- | ---\n`\n\t// Output the 100 most recent games.\n\tmaxGames := 100\n\tfor n := int(id); n \u003e 0 \u0026\u0026 int(id)-n \u003c maxGames; n-- {\n\t\tv, ok := games.Get(seqid.ID(n).String())\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tg := v.(*game)\n\t\toutput += strconv.Itoa(n) + \" | \" +\n\t\t\tshortName(g.player1) + \" | \" + mov1[g.move1] + \" | \" +\n\t\t\tshortName(g.player2) + \" | \" + mov2[g.move2] + \" | \" +\n\t\t\twin[g.winner()+1] + \"\\n\"\n\t}\n\treturn output\n}\n\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"6gz5Y7RUhImBDed7xyrRJK4TCfzIVwF9ry2wbEeTUenIhlMrr2Slix2Kp88rWCQSN1IjeCQm9IP8b7NbVvP8Dw=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1740812509"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1qhuef2450xh7g7na8s865nreu2xw8j84kgkvt5","to_address":"g150gdvn780ws7a3s9qpdvv7h4d9hq6vh672ely0","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"7N3WeJXFvR8Bj+XnQ57bfksnGp2E3vfuBEE36vJ+OQnmatYeecgDxg11Jgbnnsg6gD4F3Js29ZTtjKMPjBYcAw=="}],"memo":""},"metadata":{"timestamp":"1740815160"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","to_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","amount":"1000000ugnot"}],"fee":{"gas_wanted":"54432","gas_fee":"114ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"5yKr/QmoW/Jpjr+0m4kHDncVBDSvZA4Jh4XfMI/MSW06v03plHABdBtj9AvaU+nbn1Saq3/cHixzeSZ0yvxYBQ=="}],"memo":""},"metadata":{"timestamp":"1740815938"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"test01","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/test01","files":[{"name":"package.gno","body":"package test01\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\n\t\"gno.land/r/demo/users\"\n)\n\nconst (\n\tempty = iota\n\trock\n\tpaper\n\tscissors\n\tlast\n)\n\ntype game struct {\n\tplayer1, player2 std.Address // shifumi is a 2 players game\n\tmove1, move2     int         // can be empty, rock, paper, or scissors\n}\n\nvar games avl.Tree\nvar id seqid.ID\n\nfunc (g *game) play(player std.Address, move int) error {\n\tif !(move \u003e empty \u0026\u0026 move \u003c last) {\n\t\treturn errors.New(\"invalid move\")\n\t}\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\tif player == g.player1 \u0026\u0026 g.move1 == empty {\n\t\tg.move1 = move\n\t\treturn nil\n\t}\n\tif player == g.player2 \u0026\u0026 g.move2 == empty {\n\t\tg.move2 = move\n\t\treturn nil\n\t}\n\treturn errors.New(\"already played\")\n}\n\nfunc (g *game) winner() int {\n\tif g.move1 == empty || g.move2 == empty {\n\t\treturn -1\n\t}\n\tif g.move1 == g.move2 {\n\t\treturn 0\n\t}\n\tif g.move1 == rock \u0026\u0026 g.move2 == scissors ||\n\t\tg.move1 == paper \u0026\u0026 g.move2 == rock ||\n\t\tg.move1 == scissors \u0026\u0026 g.move2 == paper {\n\t\treturn 1\n\t}\n\treturn 2\n}\n\n// NewGame creates a new game where player1 is the caller and player2 the argument.\n// A new game index is returned.\nfunc NewGame(player std.Address) int {\n\tgames.Set(id.Next().String(), \u0026game{player1: std.PreviousRealm().Address(), player2: player})\n\treturn int(id)\n}\n\n// Play executes a move for the game at index idx, where move can be:\n// 1 (rock), 2 (paper), 3 (scissors).\nfunc Play(idx, move int) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\tpanic(\"game not found\")\n\t}\n\tif err := v.(*game).play(std.PreviousRealm().Address(), move); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Render(path string) string {\n\tmov1 := []string{\"\", \" 🤜  \", \" 🫱  \", \" 👉  \"}\n\tmov2 := []string{\"\", \" 🤛  \", \" 🫲  \", \" 👈  \"}\n\twin := []string{\"pending\", \"draw\", \"player1\", \"player2\"}\n\n\toutput := `# 👊  ✋  ✌️  Shifumi\nActions:\n* [NewGame](shifumi$help\u0026func=NewGame) opponentAddress\n* [Play](shifumi$help\u0026func=Play) gameIndex move (1=rock, 2=paper, 3=scissors)\n\n game  | player1 |     | player2 |       | win \n --- | --- | --- | --- | --- | ---\n`\n\t// Output the 100 most recent games.\n\tmaxGames := 100\n\tfor n := int(id); n \u003e 0 \u0026\u0026 int(id)-n \u003c maxGames; n-- {\n\t\tv, ok := games.Get(seqid.ID(n).String())\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tg := v.(*game)\n\t\toutput += strconv.Itoa(n) + \" | \" +\n\t\t\tshortName(g.player1) + \" | \" + mov1[g.move1] + \" | \" +\n\t\t\tshortName(g.player2) + \" | \" + mov2[g.move2] + \" | \" +\n\t\t\twin[g.winner()+1] + \"\\n\"\n\t}\n\treturn output\n}\n\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"21553608","gas_fee":"44904ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"dDpZIMw8cQ8nHnukRV0T8ZW9I6Do6Iserk11Fj77MadLMZRsMRfSaVYffBk27vAqTmRXkd14VTXFawJUsF0XAg=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1740815988"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1jdzayw444fzmyzj3ff2e2czsvq87h83939knk6","amount":"10000000ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"Z1+VBHiHuHTsa4IaSv0J4xocCj/9cPfri1It68qrs1u5t515gsYBXxLVH/b/+Y25+uiMnJRb0RcN9XGQCkpKDA=="}],"memo":""},"metadata":{"timestamp":"1740816264"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jdzayw444fzmyzj3ff2e2czsvq87h83939knk6","to_address":"g1jdzayw444fzmyzj3ff2e2czsvq87h83939knk6","amount":"1000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"EScbUCo6aX2YFCiCYMJGJpqHzPoKoUFVKe9s6vNavptIt81/RvMo5ArMQx3vP98y9PoEWAcWe+uRdDVw19cWDQ=="}],"memo":""},"metadata":{"timestamp":"1740816284"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","package":{"name":"test99","path":"gno.land/r//test99","files":[{"name":"package.gno","body":"package test99\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\n\t\"gno.land/r/demo/users\"\n)\n\nconst (\n\tempty = iota\n\trock\n\tpaper\n\tscissors\n\tlast\n)\n\ntype game struct {\n\tplayer1, player2 std.Address // shifumi is a 2 players game\n\tmove1, move2     int         // can be empty, rock, paper, or scissors\n}\n\nvar games avl.Tree\nvar id seqid.ID\n\nfunc (g *game) play(player std.Address, move int) error {\n\tif !(move \u003e empty \u0026\u0026 move \u003c last) {\n\t\treturn errors.New(\"invalid move\")\n\t}\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\tif player == g.player1 \u0026\u0026 g.move1 == empty {\n\t\tg.move1 = move\n\t\treturn nil\n\t}\n\tif player == g.player2 \u0026\u0026 g.move2 == empty {\n\t\tg.move2 = move\n\t\treturn nil\n\t}\n\treturn errors.New(\"already played\")\n}\n\nfunc (g *game) winner() int {\n\tif g.move1 == empty || g.move2 == empty {\n\t\treturn -1\n\t}\n\tif g.move1 == g.move2 {\n\t\treturn 0\n\t}\n\tif g.move1 == rock \u0026\u0026 g.move2 == scissors ||\n\t\tg.move1 == paper \u0026\u0026 g.move2 == rock ||\n\t\tg.move1 == scissors \u0026\u0026 g.move2 == paper {\n\t\treturn 1\n\t}\n\treturn 2\n}\n\n// NewGame creates a new game where player1 is the caller and player2 the argument.\n// A new game index is returned.\nfunc NewGame(player std.Address) int {\n\tgames.Set(id.Next().String(), \u0026game{player1: std.PreviousRealm().Address(), player2: player})\n\treturn int(id)\n}\n\n// Play executes a move for the game at index idx, where move can be:\n// 1 (rock), 2 (paper), 3 (scissors).\nfunc Play(idx, move int) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\tpanic(\"game not found\")\n\t}\n\tif err := v.(*game).play(std.PreviousRealm().Address(), move); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Render(path string) string {\n\tmov1 := []string{\"\", \" 🤜  \", \" 🫱  \", \" 👉  \"}\n\tmov2 := []string{\"\", \" 🤛  \", \" 🫲  \", \" 👈  \"}\n\twin := []string{\"pending\", \"draw\", \"player1\", \"player2\"}\n\n\toutput := `# 👊  ✋  ✌️  Shifumi\nActions:\n* [NewGame](shifumi$help\u0026func=NewGame) opponentAddress\n* [Play](shifumi$help\u0026func=Play) gameIndex move (1=rock, 2=paper, 3=scissors)\n\n game  | player1 |     | player2 |       | win \n --- | --- | --- | --- | --- | ---\n`\n\t// Output the 100 most recent games.\n\tmaxGames := 100\n\tfor n := int(id); n \u003e 0 \u0026\u0026 int(id)-n \u003c maxGames; n-- {\n\t\tv, ok := games.Get(seqid.ID(n).String())\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tg := v.(*game)\n\t\toutput += strconv.Itoa(n) + \" | \" +\n\t\t\tshortName(g.player1) + \" | \" + mov1[g.move1] + \" | \" +\n\t\t\tshortName(g.player2) + \" | \" + mov2[g.move2] + \" | \" +\n\t\t\twin[g.winner()+1] + \"\\n\"\n\t}\n\treturn output\n}\n\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"MiYIzLnrqNeKOZrCO6FarjJPsv0qXZPg1pUMExuzwNfMlmxD7BoJPYAeiOrHEsB0zJy+diJy5sxshwDcxDNlAQ=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1740831409"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c","package":{"name":"test99","path":"gno.land/r/g1lmvrrrr4er2us84h2732sru76c9zl2nvknha8c/test99","files":[{"name":"package.gno","body":"package test99\n\nimport (\n\t\"errors\"\n\t\"std\"\n\t\"strconv\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/seqid\"\n\n\t\"gno.land/r/demo/users\"\n)\n\nconst (\n\tempty = iota\n\trock\n\tpaper\n\tscissors\n\tlast\n)\n\ntype game struct {\n\tplayer1, player2 std.Address // shifumi is a 2 players game\n\tmove1, move2     int         // can be empty, rock, paper, or scissors\n}\n\nvar games avl.Tree\nvar id seqid.ID\n\nfunc (g *game) play(player std.Address, move int) error {\n\tif !(move \u003e empty \u0026\u0026 move \u003c last) {\n\t\treturn errors.New(\"invalid move\")\n\t}\n\tif player != g.player1 \u0026\u0026 player != g.player2 {\n\t\treturn errors.New(\"invalid player\")\n\t}\n\tif player == g.player1 \u0026\u0026 g.move1 == empty {\n\t\tg.move1 = move\n\t\treturn nil\n\t}\n\tif player == g.player2 \u0026\u0026 g.move2 == empty {\n\t\tg.move2 = move\n\t\treturn nil\n\t}\n\treturn errors.New(\"already played\")\n}\n\nfunc (g *game) winner() int {\n\tif g.move1 == empty || g.move2 == empty {\n\t\treturn -1\n\t}\n\tif g.move1 == g.move2 {\n\t\treturn 0\n\t}\n\tif g.move1 == rock \u0026\u0026 g.move2 == scissors ||\n\t\tg.move1 == paper \u0026\u0026 g.move2 == rock ||\n\t\tg.move1 == scissors \u0026\u0026 g.move2 == paper {\n\t\treturn 1\n\t}\n\treturn 2\n}\n\n// NewGame creates a new game where player1 is the caller and player2 the argument.\n// A new game index is returned.\nfunc NewGame(player std.Address) int {\n\tgames.Set(id.Next().String(), \u0026game{player1: std.PreviousRealm().Address(), player2: player})\n\treturn int(id)\n}\n\n// Play executes a move for the game at index idx, where move can be:\n// 1 (rock), 2 (paper), 3 (scissors).\nfunc Play(idx, move int) {\n\tv, ok := games.Get(seqid.ID(idx).String())\n\tif !ok {\n\t\tpanic(\"game not found\")\n\t}\n\tif err := v.(*game).play(std.PreviousRealm().Address(), move); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Render(path string) string {\n\tmov1 := []string{\"\", \" 🤜  \", \" 🫱  \", \" 👉  \"}\n\tmov2 := []string{\"\", \" 🤛  \", \" 🫲  \", \" 👈  \"}\n\twin := []string{\"pending\", \"draw\", \"player1\", \"player2\"}\n\n\toutput := `# 👊  ✋  ✌️  Shifumi\nActions:\n* [NewGame](shifumi$help\u0026func=NewGame) opponentAddress\n* [Play](shifumi$help\u0026func=Play) gameIndex move (1=rock, 2=paper, 3=scissors)\n\n game  | player1 |     | player2 |       | win \n --- | --- | --- | --- | --- | ---\n`\n\t// Output the 100 most recent games.\n\tmaxGames := 100\n\tfor n := int(id); n \u003e 0 \u0026\u0026 int(id)-n \u003c maxGames; n-- {\n\t\tv, ok := games.Get(seqid.ID(n).String())\n\t\tif !ok {\n\t\t\tcontinue\n\t\t}\n\t\tg := v.(*game)\n\t\toutput += strconv.Itoa(n) + \" | \" +\n\t\t\tshortName(g.player1) + \" | \" + mov1[g.move1] + \" | \" +\n\t\t\tshortName(g.player2) + \" | \" + mov2[g.move2] + \" | \" +\n\t\t\twin[g.winner()+1] + \"\\n\"\n\t}\n\treturn output\n}\n\nfunc shortName(addr std.Address) string {\n\tuser := users.GetUserByAddress(addr)\n\tif user != nil {\n\t\treturn user.Name\n\t}\n\tif len(addr) \u003c 10 {\n\t\treturn string(addr)\n\t}\n\treturn string(addr)[:10] + \"...\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"21553608","gas_fee":"44904ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"Uj04sEG1mqKbfxS8FOu1nw6YSO7FzNaFkAUIfveA7JfgOQWE+2b4uSJqVCmOgHdjXAr4ll+DT+IUa15Re7bZCg=="}],"memo":"Deployed through play.gno.land"},"metadata":{"timestamp":"1740831484"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1740878987_0","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"316473","gas_fee":"317ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"Xi3nDO8dsbhtWejsLwPYCcoIUuj49BVBWCACx9qUDbHEjKZVUJhCc2teMCYrsK/yctUYAMI7aCFyLx/Z3H5oDQ=="}],"memo":""},"metadata":{"timestamp":"1740878985"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1740878987_1","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"316473","gas_fee":"317ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"8B50KU8lxmFUK061n0k6aMUACTtH57B5sfW5EGuUMEIb/ZrZPb/ZV7UsHz15bKZkWYD66smThZRa4gIEs8xbCQ=="}],"memo":""},"metadata":{"timestamp":"1740878985"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1740878987_2","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"316473","gas_fee":"317ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"oKRx/HQQaMMj15HtP6GkJkoyhZU5bh1a1hPsDbdHTSifogp7yJLFIGFEZAEKvuacuVpfm9BM+ZKcof1WEVqCCw=="}],"memo":""},"metadata":{"timestamp":"1740878985"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1740878987_3","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"316473","gas_fee":"317ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"J0Xen3Ftx+QhX6zEQ07TH1b4xoDuHgw+fMxogIdK3c2e/kGr2p80leZ4BqRYsWs6pl9my5ZF4gOt932UraQ8BA=="}],"memo":""},"metadata":{"timestamp":"1740878985"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1740878987_4","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"316473","gas_fee":"317ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"+VZQefQce7OSIvBplOrQ/+RE7OCUeLg/Sl5ngyEk7S43c5VxsV5e0U68hLdm/o7frM3vayP+PPSA5adw5Mx8Dg=="}],"memo":""},"metadata":{"timestamp":"1740878985"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1740878987_5","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"316473","gas_fee":"317ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"Llc1l+cdbjRbn2zPb5Zd1q7JHaP7EebbhxMIEQte7tkB29hFYs84CjeLVnia5l5QGyslaiafuh7kkXO5PbpxAA=="}],"memo":""},"metadata":{"timestamp":"1740878985"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1740878987_6","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"316473","gas_fee":"317ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"aumVyNfchraBxM6uFBFML3JKpwZxIoq6xMj1388BgGA7ZdlkRgNdNTfZ3cb9TxsNlmVv7WDvvsnyv56T9umwDA=="}],"memo":""},"metadata":{"timestamp":"1740878985"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1740878987_7","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"316473","gas_fee":"317ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"hF6UaXbf5OtgPGovfDKLwRGovcU7WeNW5wYWWjgefPvIi6vUXROcuv4ZGgu7WWURDGqyWTXhSsLa5+JTt1kRBg=="}],"memo":""},"metadata":{"timestamp":"1740878985"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1740878987_8","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"316473","gas_fee":"317ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"HFUi+GoGGFy4r0oPV/qlVq0mawuS4WOcv2CqOfdXdphPVGx3furWRItcK9KTmTQoTwWrXVsHe3ITVplIxDSmBQ=="}],"memo":""},"metadata":{"timestamp":"1740878985"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1740878987_9","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"316473","gas_fee":"317ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"zuyRCGp5VJYvfOjBmIk6RN9ePAcm5TpuDoc92mjZ1Ckqy1oipUmYhGsQIAy8EVS2fPbUrFzOINM/bFENKCUMBA=="}],"memo":""},"metadata":{"timestamp":"1740878985"}}
{"tx":{"msg":[{"@type":"/vm.m_run","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","package":{"name":"main","path":"gno.land/r/g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5/run","files":[{"name":"main.gno","body":"package main\n\nfunc main() {\n\tprintln(\"HELLO WORLD\")\n}"}]}}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"Gah/WORda6s0CdbSxhcFWBtnW0i4QCR+auT5a8pVCR44gmOomBxLlsoTdZrjAIHIzcM6k9bh2KfHdm7Pbn9YBw=="}],"memo":""},"metadata":{"timestamp":"1740886258"}}
{"tx":{"msg":[{"@type":"/vm.m_run","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","package":{"name":"main","path":"gno.land/r/g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5/run","files":[{"name":"main.go","body":"package main\n\nfunc main() {\n\tprintln(\"HELLO WORLD\")\n}"}]}}],"fee":{"gas_wanted":"12000000","gas_fee":"4398700ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"3giWGH5OwaRXQXhajbfmAU42GabZOf7wbjHAFQGWdYfDsfco5ezEUUzq6K4nKl0U9h/zzRDGjr+A+vHHJ6dRBg=="}],"memo":""},"metadata":{"timestamp":"1740886353"}}
{"tx":{"msg":[{"@type":"/vm.m_run","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","package":{"name":"main","path":"gno.land/r/g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5/run","files":[{"name":"main.go","body":"package main\n\nfunc main() {\n\tprintln(\"HELLO WORLD\")\n}"}]}}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"01BZOhcgD1nvEylRgVNHsyNwT87OeMRDoFfkB0dS2U/80H5FAE3y/YOd9UgBNjpgB2Yjdvke8a2htz+PEMTPAg=="}],"memo":""},"metadata":{"timestamp":"1740886479"}}
{"tx":{"msg":[{"@type":"/vm.m_run","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","package":{"name":"main","path":"gno.land/r/g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5/run","files":[{"name":"main.gno","body":"package main\n\nfunc main() {\n\tprintln(\"HELLO WORLD\")\n}"}]}}],"fee":{"gas_wanted":"69939","gas_fee":"25637ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"ola8yViqFP5YehlLplSfaK37FQn3VelS7hNhP0K/i5mdmKkinKatgypVVj8fkMr5f/HVdKBxe1p/HOkIgz1dDQ=="}],"memo":""},"metadata":{"timestamp":"1740886524"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14yr553ykn7lw7ex6lr6uafek2gaedvlyq0d68r","send":"","pkg_path":"gno.land/r/demo/postit/v1","func":"CreateUser","args":["gojo","gojo"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"iRnpAwntpOnw6ypHJCTjQXS+tIaQq6eVXnJDDrZyP0HmodhbYkSlkdrMSP1by+YajJ2RHV4Bn+vzGKj1JxDyBg=="}],"memo":"createUser"},"metadata":{"timestamp":"1740958860"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14yr553ykn7lw7ex6lr6uafek2gaedvlyq0d68r","send":"","pkg_path":"gno.land/r/demo/postit/v1","func":"CreateUser","args":["gojo","gojo"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"iRnpAwntpOnw6ypHJCTjQXS+tIaQq6eVXnJDDrZyP0HmodhbYkSlkdrMSP1by+YajJ2RHV4Bn+vzGKj1JxDyBg=="}],"memo":"createUser"},"metadata":{"timestamp":"1740958885"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1740965399_0","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"319077","gas_fee":"320ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"xaVtFVVOTm6+h0WMPNS5Rwga6DLvxxyMSCV63JzLOP5yzVOxSZVCb+aBCkoJYQAzf9N1FTeLneE+UQUOFfxJBw=="}],"memo":""},"metadata":{"timestamp":"1740965397"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1740965399_1","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"319077","gas_fee":"320ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"1TnQyDo6dGVjxqTgjeHdgtvF8WW+SnA/sHECxCHcbv9ZcaPngfnPkyKExGGT9EJskkx0oKSxlHIrjqwRfP2lCg=="}],"memo":""},"metadata":{"timestamp":"1740965397"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1740965399_2","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"319077","gas_fee":"320ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"BsRlKKQO9G8GkjjXLjrUcGgLoY3vV2wLt0tG/x8fkPcTcheYgfG9e+q3BnYWb/OlKoeJ15tXKjlzysIXWCuZAQ=="}],"memo":""},"metadata":{"timestamp":"1740965397"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1740965399_3","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"319077","gas_fee":"320ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"Ix3r/HNqa+sHU929XPin5kjB+AXM7m/TXoeilQYQUyusdv22KR2Hh5IBFS0ENUaNoiO9ZQWIczqsUQz8KvztAA=="}],"memo":""},"metadata":{"timestamp":"1740965397"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1740965399_4","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"319077","gas_fee":"320ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"1aFjqWnMMs+RwFgVyEKelNiH5bSqvopyeNUAcKjTfjKVfN8vsEamwfimlRn0k0EKAyiSOlG51hZyJ2Gc7wcXCw=="}],"memo":""},"metadata":{"timestamp":"1740965397"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1740965399_5","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"319077","gas_fee":"320ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"GxN43bL1Mfwcdp8NZl3nSY5cc2A1BNXubJJB6KAEER17u/h5VmhXeh8um0tYFkP1+lW+N2tW1AsPmv8P4+0gCw=="}],"memo":""},"metadata":{"timestamp":"1740965397"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1740965399_6","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"319077","gas_fee":"320ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"iqaRYVIHHDiugmNnOf6TP0rVYrrSJjf002Hq9JqorJ83gP4M2x7O0dq4Mn2jfxlCxQ9Si1eOwxeQHANW/CT6BA=="}],"memo":""},"metadata":{"timestamp":"1740965397"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1740965399_7","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"319077","gas_fee":"320ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"c6jSNNW+SKF9UJ5SkkAbzI5CBOXC/n54lhexcG6xuDXsBcdXTObX3r2Z+iL4pk7Vm4lpZiXFo2jhJwGNl+CvDg=="}],"memo":""},"metadata":{"timestamp":"1740965397"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","package":{"name":"runtime","path":"gno.land/r/g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f/stress_1740965399_8","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"319077","gas_fee":"320ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"gF99V08EHi5CEEBtOBH/fr9jrahBMMxnEkjF9gsDFGeU1ANWigrwoRDIfWLVnK4uHYp5CF5FfvZekkfafmxKBQ=="}],"memo":""},"metadata":{"timestamp":"1740965397"}}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","package":{"name":"runtime","path":"gno.land/r/g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg/stress_1740965399_9","files":[{"name":"realm.gno","body":"package runtime\n\nvar greeting string\n\nfunc init() {\n\tgreeting = \"Hello\"\n}\n\n// SayHello says hello to the specified name, using\n// the saved greeting\nfunc SayHello(name string) string {\n\treturn greeting + \" \" + name + \"!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"319077","gas_fee":"320ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"mGEV5ZrL0uf+WkaQ7TGatDNWoz1IcYVvQb4FVeviSzQP7zbkHUS03L0UmQBLNaJvwkFo6COehgSbkjygwmMfAQ=="}],"memo":""},"metadata":{"timestamp":"1740965397"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","Michelle",""]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"khujbXz8k+Gt5MX4PiySXxubBvV4Z2305OQDIIDhtiTWdlutFEyQNtsvYu9cjIgvo/dc2wTfcCJpWH0Vw61iBw=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1740992726"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","michelle","gnome in training"]}],"fee":{"gas_wanted":"12000000","gas_fee":"25000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"7qz/i3KGh6pwFWLH2IIKv4m+UuaXVZ/IWT/xZYngRA559b52JPOaT1wKFAe0WGG5VRHoUgVzol8QWbiEvadoAA=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1740998795"}}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","to_address":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","amount":"1000000000ugnot"}],"fee":{"gas_wanted":"12000000","gas_fee":"30000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"dAnLH6v7/QZWPHdved2gv1ZtYJuHiUVq9E+phjN6nR6VfJQopQsIvcjXJtRBc65Gq+6ulo6SXn4YMAYLgRMFDw=="}],"memo":""},"metadata":{"timestamp":"1740998906"}}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","michelle","gnome in training"]}],"fee":{"gas_wanted":"6934302","gas_fee":"3906035ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeyEd25519","value":"kUpGhm/0lnexzS/jXvSCOSubqhkj0fARnmZylbcNEe4="},"signature":"vidhFCIXNoFtuqR6Ix4V/Rq/VOcEUViDPpGdg1VnVRx2KHt09TlRhswR4s9X2H3SlNLVcWyTxJm3n8qT163ZDQ=="}],"memo":"Called through gno.studio"},"metadata":{"timestamp":"1740998961"}}
