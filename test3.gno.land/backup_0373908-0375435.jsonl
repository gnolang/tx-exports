{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1rc56q5zdwv40ytq3y355tvxjlxgs8frcgz8eyw","send":"","pkg_path":"gno.land/r/demo/faucet","func":"Faucet","args":["g1rc56q5zdwv40ytq3y355tvxjlxgs8frcgz8eyw"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A42FwT2HY7ckcYp9V8MEoeZ1rM/rJOLTTilrjxU9VH6J"},"signature":"U0eR8M4eoZHzqTyKZkV4ywQxsal/o9CqUJJ8kLbAP7FJkgCe2VYxbeH0YLADJVZr/jZzqcMZ7KB66V9yguO4YA=="}],"memo":""},"blockNum":"374008"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1rc56q5zdwv40ytq3y355tvxjlxgs8frcgz8eyw","send":"","pkg_path":"gno.land/r/demo/faucet","func":"Faucet","args":["g1rc56q5zdwv40ytq3y355tvxjlxgs8frcgz8eyw"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A42FwT2HY7ckcYp9V8MEoeZ1rM/rJOLTTilrjxU9VH6J"},"signature":"dNFUOODmR8WKhVG8EYUWwdfc70UmhnRD56vsWfUUBl4XVX5SOx9StzTGcSGwRTZPCErJLsBdKD7vrpr8wtfjfQ=="}],"memo":""},"blockNum":"374011"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1xucn4845ay9fwcx55d5nmetagu67fke9jjazqv","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"TxuyvhazTduSfL/0OkV9z+B4cjhONzA3WCHteZ1UpvQsTwTQNAI8NSOhSjIZ/UX0y8Y/mSFCOcQEQnMSR2UQeA=="}],"memo":""},"blockNum":"374017"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1qgtegddn7xcl5aq2ze8khnzxxaneh7vl2vyumq","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"+gZT0mxKt+/U9dnl38GQHn8BOoS34cbHDtNu2uUT5ygjcQ08Kp9q8QvGfZFWqLoC7QtHalGPZrQjd9xuInCteg=="}],"memo":""},"blockNum":"374110"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1zelq69gvlytut072w0d7pak9meh4q0ns3585nm","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"zfVFgI7zMOnZhpo9b1iHBgl9QSUPx1QgNx64bNDnL/kBLiaOrfTAn69qonvgmY3UEuKThsxKYSPmcqaxfyjmEw=="}],"memo":""},"blockNum":"374115"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1q50ht04re4239txdvwdfzvrehhdmqak8g46wzr","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"xNZVeVkrV3evyRFkLGALoPcOk5C8Ezh8dyhZMw2IlA9wOtgh3q7OLPJXeCMVUzVsDJxKZK+vQxCFoDL5olnKAA=="}],"memo":""},"blockNum":"374117"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1q50ht04re4239txdvwdfzvrehhdmqak8g46wzr","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"p1JF+sSTvtKshWqgLI9ylSR/kRJTThG1nXozvXJlvLkesfRdFi6CbFFtglP+MI0liFS6sK3c5MTeafdlXZKx+g=="}],"memo":""},"blockNum":"374119"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g186ds44vhuuwpjergp934q9x9f6m2ujr0375gz0","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"XlH6zxldb6eNMuTkcXDIAo5OxMWQoseIhwI6/HpAwSsHnDfSLQ7a/uiMDJrheWcJwabcLfsjWBoOPtGoYhHR/w=="}],"memo":""},"blockNum":"374121"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1zelq69gvlytut072w0d7pak9meh4q0ns3585nm","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"quKgRGWk5HWbzO037gWqMruXcE4fpNlWhTHsp83IrQsA2zojQ9vVQFv1Yfa0TnfGJS0PLeMZkCXJLc0zYU92gQ=="}],"memo":""},"blockNum":"374123"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1qgtegddn7xcl5aq2ze8khnzxxaneh7vl2vyumq","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"cfzy0yHlCdpr0pGYakbChf4d4CnwGPmC4W3Ino2QvQ9eJXqcCu7q3nLvnJ9QMhSZ80mhsaJo2X0o7LuVNOEneA=="}],"memo":""},"blockNum":"374125"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"16wusuVh9/Gbv2lMKlkLzrJXLCJI5XkAQN7kqcGILUsMkJNKPuKlSNpui9PgrGY3EVrvZWQL9qedRDPRPvvewA=="}],"memo":""},"blockNum":"374282"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","package":{"Name":"poll","Path":"gno.land/r/jero/poll","Files":[{"Name":"gno.mod","Body":"module gno.land/r/gnoyourdate/poll\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)\n"},{"Name":"poll.gno","Body":"package poll\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar answerLabels = map[Choice]string{\n\tChoiceThisMonth:        \"This month\",\n\tChoiceThisYear:         \"This year\",\n\tChoiceOneOrTwoYearsAgo: \"1-2 years ago\",\n\tChoiceSinceInception:   \"Since its inception\",\n}\n\nvar (\n\trealmURL string\n\tadmin    std.Address\n\tpoll     = Poll{\n\t\tQuestion:  \"When did you first learn about Gno.land?\",\n\t\tVotingURL: \"https://gno.studio/connect/gno.land/r/gnoyourdate/poll?network=test3\u0026tab=functions#Vote\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n)\n\nfunc init() {\n\trealmURL = \"https://test3.gno.land\" + strings.TrimPrefix(std.CurrentRealmPath(), \"gno.land\")\n\tadmin = std.GetOrigCaller()\n}\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion     string\n\t\tVotingURL    string\n\t\tAnswers      []Answer\n\t\tParticipants []std.Address // TODO: Use AVL tree for better search performance?\n\t\tEnded        bool\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice Choice\n\t\tCount  uint\n\t}\n)\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) uint {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn a.Count\n\t\t}\n\t}\n\treturn 0\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, a := range p.Participants {\n\t\tif a == addr {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// Vote submits a vote for one of the poll choices.\n//\n// Only one of the choices should be selected to consider the vote as valid.\n// The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\n//\n// When did you first learn about Gno.land?\n// - This month\n// - This year\n// - 1-2 years ago\n// - Since its inception\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tassertPollIsActive()\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tcaller := std.GetOrigCaller()\n\tassertFirstVote(caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Count++\n\t\t\tpoll.Participants = append(poll.Participants, caller)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted yes on \"%s\" you can check out the result at %s`,\n\t\tanswerLabels[choice],\n\t\trealmURL,\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Poll: %s\\n\", poll.Question))\n\n\tif poll.Ended {\n\t\tbuf.WriteString(\"The poll has ended\\n\")\n\t} else {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"You can participate in the poll by [submitting your vote](%s)\\n\", poll.VotingURL),\n\t\t)\n\t}\n\n\tbuf.WriteString(\"### Answers:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", answerLabels[c], poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\", len(poll.Participants)),\n\t)\n\n\treturn buf.String()\n}\n\n// EndPoll ends the poll to stop receiving new votes.\nfunc EndPoll() string {\n\tassertCallerIsAdmin()\n\tassertPollIsActive()\n\n\tpoll.Ended = true\n\treturn \"Poll ended successfully\"\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"No choice has been selected, you should submit a vote for one of the answers.\\n\" +\n\t\t\t\t\"Only one of the choices should be selected to consider the vote as valid.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple choices has been selected, you should submit a vote for only one answer.\\n\" +\n\t\t\t\t\"The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\",\n\t\t)\n\t}\n}\n\nfunc assertPollIsActive() {\n\tif poll.Ended {\n\t\tpanic(\"Poll has ended\")\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tfor _, a := range poll.Participants {\n\t\tif a == addr {\n\t\t\tpanic(\"This address already voted\")\n\t\t}\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Forbidden\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"cJh28CPc0Mc5cYEm9QfbiFBmvr0mbgheqZeLEeUQ5lVKqPc0Jxo1sXIMhteP9uwK/ZbTm11PuUKIP2gLqTAgkg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"374284"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1ndzpczjr2rzrchtkm3tsut2xjfn50mlgax2v77","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"X7GrAxRCB18PG+L3TiyatD9sPuhLHLAo5kGl6YKYVOgQGOUls8K1gUajMcgCWBmkyZoiJwGZRV9CdkHdL+TipA=="}],"memo":""},"blockNum":"374366"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1ndzpczjr2rzrchtkm3tsut2xjfn50mlgax2v77","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"TGZxlt7ugt6U/aMDMYdBg24rZThN9Wa8hMHZXwlHiDJutqXZaO2yQzGh33urQj2Yaov0GFHx9HjJsuK/xVgMsQ=="}],"memo":""},"blockNum":"374395"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1ndzpczjr2rzrchtkm3tsut2xjfn50mlgax2v77","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"ApwICI7QeFPlQTIY6EUG5yPwzFLJ+KNWjxYYVh0zTihFcyiTMfNRZLnJwWW0UJ3An982m55eS7sVlvtHTqW0fA=="}],"memo":""},"blockNum":"374397"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1ndzpczjr2rzrchtkm3tsut2xjfn50mlgax2v77","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"Am9jhMlu3AsqkF6EIwkWAkVzCydaBNQTBIadO0vdXpFMg1GJmMnv8s0Ze7wDARxu9mMrWnlMfASZ6vjA98uJUA=="}],"memo":""},"blockNum":"374399"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ndzpczjr2rzrchtkm3tsut2xjfn50mlgax2v77","package":{"Name":"fullemal","Path":"gno.land/r/demo/fullemal","Files":[{"Name":"package.gno","Body":"package fullmetal\n\nfunc Render(path string) string {\n  return \"Hello Fullmetal!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlPPfH2Io3wMzoHGYZZrFe5fBvCjwPeMssJTP239gMYH"},"signature":"PoqJqfCpaPFaE+3GvUYjIXXQ53rK2phtgPIKlg9f1/Qc9AXuooBh8aobbaYn4xbFywndIRraSfbOSSH4cXR+Ag=="}],"memo":"Deployed through play.gno.land"},"blockNum":"374401"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ndzpczjr2rzrchtkm3tsut2xjfn50mlgax2v77","package":{"Name":"fullmetal","Path":"gno.land/r/demo/fullmetal","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlPPfH2Io3wMzoHGYZZrFe5fBvCjwPeMssJTP239gMYH"},"signature":"JUNu9ZY4vDJoIkl/PltuEBOjZdbQyNZiV8Pleza4KHdA5sBUi6qInQ3YOZhfFabB4Uk5VIjdFG6r7wyxUo9FRA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"374403"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ndzpczjr2rzrchtkm3tsut2xjfn50mlgax2v77","package":{"Name":"lal","Path":"gno.land/r/demo/lal","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlPPfH2Io3wMzoHGYZZrFe5fBvCjwPeMssJTP239gMYH"},"signature":"jQ5KJ+DFD8nWm89vbMdAvDSnUY+hcBRnx2piqhHdpf5/FaaA1oPHGt7xN59CbZ+N/EBISoKDeIr3W0FibzT5+Q=="}],"memo":"Deployed through play.gno.land"},"blockNum":"374405"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ndzpczjr2rzrchtkm3tsut2xjfn50mlgax2v77","package":{"Name":"hello","Path":"gno.land/r/demo/hello","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlPPfH2Io3wMzoHGYZZrFe5fBvCjwPeMssJTP239gMYH"},"signature":"C0FXgBElLn5Eks5L86FO2fPfQZdylxim1Y/X0XKjN2AAEjnVCAC4F8fCyPV22gfWYZYNMH8OLYoECL2UDKLw/w=="}],"memo":"Deployed through play.gno.land"},"blockNum":"374407"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ndzpczjr2rzrchtkm3tsut2xjfn50mlgax2v77","package":{"Name":"fullmetal","Path":"gno.land/r/demo/fullmetal","Files":[{"Name":"package.gno","Body":"package fullmetal\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AlPPfH2Io3wMzoHGYZZrFe5fBvCjwPeMssJTP239gMYH"},"signature":"KDjzyCs4qqEy7ugzWiVKkzfxGEVBwAOvmxSN4al0fasDwg3vc1YOb9UbBGeXopDq2Irmiyv2UhDLaa+HH5z94g=="}],"memo":"Deployed through play.gno.land"},"blockNum":"374409"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1ndzpczjr2rzrchtkm3tsut2xjfn50mlgax2v77","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"OcAXaQdnQa80BvLVG8lz9iEdbHn8LbkGpjAXgugH3m89djNAhS3it7eTDft2OAtJ/Usb517JA4kFym5PDjylkg=="}],"memo":""},"blockNum":"374411"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g19y8hwqwp43ena79yg95nv6nfzhmyn90zcvx0u8","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"IrkmGSJdgaadSWxZDPPedGlkXbbTaSOqpUJkg/erJ/5USoHa1bIKPlxYNMBZB+9rH52A00J1fOF8kD5avDfvcA=="}],"memo":""},"blockNum":"374424"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1yzzpazt7rtp0xzve33t6mmdvlfevdg0pw9jzts","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"DU0kkIdELgNQEG9E7PQvTHc6TeDnvk0MKfDIt0F1ZNRO9TPC3mdOn5zI3dmomJDrdBf25zypNabVkwhofbWYhA=="}],"memo":""},"blockNum":"374460"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zd3aykct4yr4steu6f6n9t9z9emwhrkc0wgzef","package":{"Name":"pmn","Path":"gno.land/r/parmenion/pmn","Files":[{"Name":"package.gno","Body":"package pmn\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tpmn   *grc20.AdminToken\n\tadmin std.Address = \"g1zd3aykct4yr4steu6f6n9t9z9emwhrkc0wgzef\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tpmn = grc20.NewAdminToken(\"Cryptopunkstar\", \"CPS\", 4)\n\tpmn.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tpmn.Mint(\"g1yzzpazt7rtp0xzve33t6mmdvlfevdg0pw9jzts\", 100000*100000) // @cryptopunkstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn pmn.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := pmn.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := pmn.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tpmn.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tpmn.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tpmn.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tpmn.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tpmn.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tpmn.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn pmn.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := pmn.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0yKzurCYH3tCglpJlbOlwBHla7694EUZKb6lJu+3ugA"},"signature":"BLpv8h3vNuet45MX130VFwIRwdPoQaKeac4m//adzUVbL9btvA3Q9WK0wdzSYWKpehf6sU9W6EI+5iZd3yxxFA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"374467"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zd3aykct4yr4steu6f6n9t9z9emwhrkc0wgzef","package":{"Name":"pmn","Path":"gno.land/r/parmenion/pmn","Files":[{"Name":"package.gno","Body":"package pmn\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tpmn   *grc20.AdminToken\n\tadmin std.Address = \"g1zd3aykct4yr4steu6f6n9t9z9emwhrkc0wgzef\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tpmn = grc20.NewAdminToken(\"Cryptopunkstar\", \"CPS\", 4)\n\tpmn.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tpmn.Mint(\"g1yzzpazt7rtp0xzve33t6mmdvlfevdg0pw9jzts\", 100000*100000) // @cryptopunkstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn pmn.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := pmn.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := pmn.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tpmn.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tpmn.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tpmn.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tpmn.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tpmn.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tpmn.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn pmn.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := pmn.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"},{"Name":"pmn.gno","Body":"package pmn\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tpmn   *grc20.AdminToken\n\tadmin std.Address = \"g1zd3aykct4yr4steu6f6n9t9z9emwhrkc0wgzef\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tpmn = grc20.NewAdminToken(\"Cryptopunkstar\", \"CPS\", 4)\n\tpmn.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tpmn.Mint(\"g1yzzpazt7rtp0xzve33t6mmdvlfevdg0pw9jzts\", 100000*100000) // @cryptopunkstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn pmn.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := pmn.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := pmn.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tpmn.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tpmn.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tpmn.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tpmn.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tpmn.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tpmn.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn pmn.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := pmn.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0yKzurCYH3tCglpJlbOlwBHla7694EUZKb6lJu+3ugA"},"signature":"YeyN5uqTx6C7MzmJV568S1O+zf0NRwkl8OzKf8X20B1CohOBstBOfr4ggON5PpDCXyvrtUNnBmymgjb4bAj3Jg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"374471"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zd3aykct4yr4steu6f6n9t9z9emwhrkc0wgzef","package":{"Name":"pmn","Path":"gno.land/r/parmenion/pmn","Files":[{"Name":"pmn.gno","Body":"package pmn\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tpmn   *grc20.AdminToken\n\tadmin std.Address = \"g1zd3aykct4yr4steu6f6n9t9z9emwhrkc0wgzef\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tpmn = grc20.NewAdminToken(\"Parmenion\", \"PMN\", 4)\n\tpmn.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tpmn.Mint(\"g1yzzpazt7rtp0xzve33t6mmdvlfevdg0pw9jzts\", 100000*100000) // @cryptopunkstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn pmn.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := pmn.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := pmn.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tpmn.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tpmn.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tpmn.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tpmn.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tpmn.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tpmn.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn pmn.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := pmn.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0yKzurCYH3tCglpJlbOlwBHla7694EUZKb6lJu+3ugA"},"signature":"GvMEyve1qlE54wpSY6TXK5MKRkYqfn6bY2m5kUr7wVY82pmgKolj/mhXYDHpNMHWFH2z8iwzqeIXZq6leFuhpQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"374478"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zd3aykct4yr4steu6f6n9t9z9emwhrkc0wgzef","package":{"Name":"pmn","Path":"gno.land/r/parmenion/pmn","Files":[{"Name":"pmn.gno","Body":"package pmn\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tpmn   *grc20.AdminToken\n\tadmin std.Address = \"g1zd3aykct4yr4steu6f6n9t9z9emwhrkc0wgzef\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tpmn = grc20.NewAdminToken(\"Parmenion\", \"PMN\", 4)\n\tpmn.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tpmn.Mint(\"g1yzzpazt7rtp0xzve33t6mmdvlfevdg0pw9jzts\", 100000*100000) // @cryptopunkstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn pmn.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := pmn.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := pmn.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tpmn.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tpmn.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tpmn.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tpmn.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tpmn.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tpmn.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn pmn.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := pmn.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0yKzurCYH3tCglpJlbOlwBHla7694EUZKb6lJu+3ugA"},"signature":"9VkUJ1/6SHFq636lYTylESmWO0Mnr8BZ8T4cSSZGWmYUysiFYUEq/rKyMYg82MqeGKKGie29kcAr6yL584NOoQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"374480"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zd3aykct4yr4steu6f6n9t9z9emwhrkc0wgzef","package":{"Name":"pmn","Path":"gno.land/r/parmenionmacedoine/pmn","Files":[{"Name":"pmn.gno","Body":"package pmn\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tpmn   *grc20.AdminToken\n\tadmin std.Address = \"g1zd3aykct4yr4steu6f6n9t9z9emwhrkc0wgzef\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tpmn = grc20.NewAdminToken(\"Parmenion\", \"PMN\", 4)\n\tpmn.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tpmn.Mint(\"g1yzzpazt7rtp0xzve33t6mmdvlfevdg0pw9jzts\", 100000*100000) // @cryptopunkstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn pmn.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := pmn.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := pmn.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tpmn.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tpmn.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tpmn.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tpmn.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tpmn.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tpmn.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn pmn.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := pmn.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0yKzurCYH3tCglpJlbOlwBHla7694EUZKb6lJu+3ugA"},"signature":"ssRKqspZ14xMovYyV+5GIvf+R/R+eHmjeYEwXIs1E/E2cLeObhAMhPh1+PHFb89NI/ZrOvx1+RwlbsNU8C1gqw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"374482"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g19y8hwqwp43ena79yg95nv6nfzhmyn90zcvx0u8","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"OH2NXt1iCIemeeXSCrKRaru4FCvHh222ZRc+ryGJXfQGIBRVYgOgzDiPEH7DEdBH///KccAtA2/e+0EbQFfylA=="}],"memo":""},"blockNum":"374501"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g19y8hwqwp43ena79yg95nv6nfzhmyn90zcvx0u8","send":"500000ugnot","pkg_path":"gno.land/r/demo/wugnot","func":"Deposit","args":null},{"@type":"/vm.m_call","caller":"g19y8hwqwp43ena79yg95nv6nfzhmyn90zcvx0u8","send":"","pkg_path":"gno.land/r/demo/wugnot","func":"Approve","args":["g15z32w7txv6lw259xzhzzmwtwmcjjc0m6dqzh6f","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g19y8hwqwp43ena79yg95nv6nfzhmyn90zcvx0u8","send":"","pkg_path":"gno.land/r/demo/gns","func":"Approve","args":["g15z32w7txv6lw259xzhzzmwtwmcjjc0m6dqzh6f","18446744073709551615"]},{"@type":"/vm.m_call","caller":"g19y8hwqwp43ena79yg95nv6nfzhmyn90zcvx0u8","send":"","pkg_path":"gno.land/r/demo/router","func":"SwapRoute","args":["gno.land/r/demo/wugnot","gno.land/r/demo/gns","500000","EXACT_IN","gno.land/r/demo/wugnot:gno.land/r/demo/bar:100*POOL*gno.land/r/demo/bar:gno.land/r/demo/gns:100","100","1477934"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9ABK1ikjJNzBdE6cNiD+2r/OW6a7KdUm6Xu0+4H0gdl"},"signature":"gqm78wpw/weQE+r7c6lTn2ke+sCA77w8nHQq/lgE+LlAJ0iGbVFoTZmD9Qzmxm/fl+aJkQPzgsTao+IcFPDOAw=="}],"memo":""},"blockNum":"374529"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1ndzpczjr2rzrchtkm3tsut2xjfn50mlgax2v77","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"acfY9hePIIwNZavz7S2IjzAU7ovgJguAQGTea2GNkjdrYHKd/DU2aoWMpMaiIvVLJE/opXD3d3PKLrTcLNr9cA=="}],"memo":""},"blockNum":"374575"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1n8rlzqk9wv0c34nxg929znrnf2c26f29ug4kv3","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"Vglj2hkJj0p0+8URUUTY/qoUe/nwKAg1HUZXactL8bNGP08itZO4O7EXOKqPa8KSl7IhRdwicZy/yqMpsrZggQ=="}],"memo":""},"blockNum":"374587"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g13jt6wq3z2mp2wg9dkcejn046f8fnyu74002ftq","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"FHfWRGvyfKsEz2wH7tHo3gtyjys+AbCIAXwrBk6jVbEw/NTj1/32CA6LRBobDLG3JXGe07K5uSWuGstmg0rrsQ=="}],"memo":""},"blockNum":"374606"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g13jt6wq3z2mp2wg9dkcejn046f8fnyu74002ftq","package":{"Name":"restart","Path":"gno.land/r/demo2/restart","Files":[{"Name":"res.gno","Body":"package res\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tres   *grc20.AdminToken\n\tadmin std.Address = \"g13jt6wq3z2mp2wg9dkcejn046f8fnyu74002ftq\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tres = grc20.NewAdminToken(\"restart\", \"RES\", 4)\n\tres.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tres.Mint(\"g142nyevvsxcezxfmq4pc2eja96mxrvm75xdymf5\", 100000*100000) // @cryptopunkstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn res.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := res.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := res.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tres.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tres.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tres.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tres.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tres.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tres.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn res.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := res.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4666afZWctProTzm/8jsq2l5TIw560uoSXSEyv7NaDr"},"signature":"PMxUUkRPlNCU6OQdEXyg5PKypbFHEDAzPn7NPD3qTJgxYva3i1MzaZxRIDUAuRXjk87OrPvRErVEKiDkm+IVhg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"374647"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g13jt6wq3z2mp2wg9dkcejn046f8fnyu74002ftq","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"DlLRJfi9XbYWDDBCRSiXfHoTaLlShyMKqvoZpIkefiEHzOz1r93Jgz9pUyFMSyf5Wbj6Ovyrl+ZPh5zjzkMOpA=="}],"memo":""},"blockNum":"374651"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g13jt6wq3z2mp2wg9dkcejn046f8fnyu74002ftq","package":{"Name":"restart","Path":"gno.land/r/demo2/restart","Files":[{"Name":"res.gno","Body":"package res\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tres   *grc20.AdminToken\n\tadmin std.Address = \"g13jt6wq3z2mp2wg9dkcejn046f8fnyu74002ftq\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tres = grc20.NewAdminToken(\"restart\", \"RES\", 4)\n\tres.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tres.Mint(\"g142nyevvsxcezxfmq4pc2eja96mxrvm75xdymf5\", 100000*100000) // @cryptopunkstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn res.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := res.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := res.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tres.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tres.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tres.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tres.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tres.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tres.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn res.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := res.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4666afZWctProTzm/8jsq2l5TIw560uoSXSEyv7NaDr"},"signature":"5uiG1i6gAdYl0TtsaQtjmJE6IsxYLkAWG++HRhhUX4EghpFjFgDDigMCMZbrk12W0nNOziO5fHpMbt7UwBnqpQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"374653"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g13jt6wq3z2mp2wg9dkcejn046f8fnyu74002ftq","package":{"Name":"res","Path":"gno.land/r/demo/res","Files":[{"Name":"res.gno","Body":"package res\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tres   *grc20.AdminToken\n\tadmin std.Address = \"g13jt6wq3z2mp2wg9dkcejn046f8fnyu74002ftq\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tres = grc20.NewAdminToken(\"res\", \"RES\", 4)\n\tres.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tres.Mint(\"g142nyevvsxcezxfmq4pc2eja96mxrvm75xdymf5\", 100000*100000) // @cryptopunkstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn res.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := res.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := res.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tres.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tres.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tres.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tres.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tres.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tres.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn res.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := res.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4666afZWctProTzm/8jsq2l5TIw560uoSXSEyv7NaDr"},"signature":"GI2p4+Rjo0KL8OWfhvc2N9w6NNzXxB3fNSuu19WwKN1rEuKQu1xBuDlZc0yrWLNZI/L7HqN+wAJXd1n1qx4bGw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"374655"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g19y8hwqwp43ena79yg95nv6nfzhmyn90zcvx0u8","package":{"Name":"dpxtr","Path":"gno.land/r/demo2/dpxtr","Files":[{"Name":"dpxtr.gno","Body":"package dpxtr\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tdpxtr   *grc20.AdminToken\r\n\tadmin std.Address = \"g19y8hwqwp43ena79yg95nv6nfzhmyn90zcvx0u8\" // TODO: helper to change admin\r\n)\r\n\r\nfunc init() {\r\n\tdpxtr = grc20.NewAdminToken(\"Dropxtor\", \"DPXTR\", 4)\r\n\tdpxtr.Mint(admin, 1000000*100000)                                    // @administrator (1M)\r\n\tdpxtr.Mint(\"g1h7yteaj4ewnms5az558manaw68fa8ldtt66376\", 100000*100000) // @cryptopunkstar (100k)\r\n}\r\n\r\n// method proxies as public functions.\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn dpxtr.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := dpxtr.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := dpxtr.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tdpxtr.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tdpxtr.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tdpxtr.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// faucet.\r\n\r\nfunc Faucet() {\r\n\t// FIXME: add limits?\r\n\t// FIXME: add payment in gnot?\r\n\tcaller := std.GetOrigCaller()\r\n\tdpxtr.Mint(caller, 1000*10000) // 1k\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tdpxtr.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tdpxtr.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render le rendu\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn dpxtr.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := dpxtr.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n// secure access for admin :)\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9ABK1ikjJNzBdE6cNiD+2r/OW6a7KdUm6Xu0+4H0gdl"},"signature":"HyQ3VitiNTKToGE45sa92nGPDLZR34JE/Mn4v1nq5nRr0qWC92qYPYq5rXBzslEg0Tkd4cAziZg7ehNInQRH7A=="}],"memo":"Deployed through play.gno.land"},"blockNum":"374683"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g19y8hwqwp43ena79yg95nv6nfzhmyn90zcvx0u8","send":"","pkg_path":"gno.land/r/demo2/dpxtr","func":"Transfer","args":["g1h7yteaj4ewnms5az558manaw68fa8ldtt66376","50000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9ABK1ikjJNzBdE6cNiD+2r/OW6a7KdUm6Xu0+4H0gdl"},"signature":"NwgrryEVzVZoTg0XvaSeJTSoCraCXRNUXQrYdyj7TOoaXwGl55DVBsA07gj3YISejXeXbim3JGf1j3KGcQni9A=="}],"memo":""},"blockNum":"374689"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g19y8hwqwp43ena79yg95nv6nfzhmyn90zcvx0u8","send":"","pkg_path":"gno.land/r/demo2/dpxtr","func":"Transfer","args":["g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","50000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9ABK1ikjJNzBdE6cNiD+2r/OW6a7KdUm6Xu0+4H0gdl"},"signature":"D1O9jv5qOHXyml5X0Spw8yA0j65DbHaXqHktGtOxHZQolHlzxdVLPjUm4/fksr/U8hZ6FHr2XSzwmMUP0zq+rQ=="}],"memo":""},"blockNum":"374693"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g19y8hwqwp43ena79yg95nv6nfzhmyn90zcvx0u8","send":"","pkg_path":"gno.land/r/demo2/dpxtr","func":"Transfer","args":["g1p9ap4pqc74uwek9zqk0kxx9wq90ljpyz9av6lc","50000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9ABK1ikjJNzBdE6cNiD+2r/OW6a7KdUm6Xu0+4H0gdl"},"signature":"NpwIHxZH7oLWcRzWoPdBWfkTSTUexY0aAfW4PjM+td4W0q1P+YaPGJznZUYG48+WIn2z/wuENQ80lgzd60Ht7g=="}],"memo":""},"blockNum":"374696"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g19y8hwqwp43ena79yg95nv6nfzhmyn90zcvx0u8","send":"","pkg_path":"gno.land/r/demo2/dpxtr","func":"Transfer","args":["g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","50000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9ABK1ikjJNzBdE6cNiD+2r/OW6a7KdUm6Xu0+4H0gdl"},"signature":"Bsbc/UTN5/PgXXiYf/bT9a9aZ+Fmcy2NbImtZPSoWh0DknOeXB4wIgPVuCepISLe673qUgU0tcqa0IOzEDm2tg=="}],"memo":""},"blockNum":"374699"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1t03agwh7uu8xe0sx6y0pl2ntrc85ks72xenwy8","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"JP7MqY+KTTgYImpEDpIt7B+d9LF/Btq8NZAHJCjE+Qk+b9IUm+ro2/tCxp87WqEqi62ApPsWy9eOwwxmxNoJRw=="}],"memo":""},"blockNum":"374740"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","package":{"Name":"poll_v1","Path":"gno.land/r/jeronimoalbi/poll_v1","Files":[{"Name":"gno.mod","Body":"module gno.land/r/gnoyourdate/poll_v1\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)\n"},{"Name":"poll.gno","Body":"package poll_v1\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nconst network = \"test3\"\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first learn about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t\tEnded    bool\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []std.Address\n\t}\n)\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, a := range answer.Participants {\n\t\t\tif a == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// Vote submits a vote for one of the poll choices.\n//\n// Only one of the choices should be selected to consider the vote as valid.\n// The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\n//\n// When did you first learn about Gno.land?\n// - This month\n// - This year\n// - 1-2 years ago\n// - Since its inception\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tassertRealmIsNotLocked()\n\tassertPollIsActive()\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tcaller := std.GetOrigCaller()\n\tassertFirstVote(caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, caller)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted yes on \"%s\" you can check out the result at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tnetwork,\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tmsg := \"Realm is locked\"\n\t\tif nextRealmPath != \"\" {\n\t\t\tmsg += ufmt.Sprintf(`. An updated realm version can be found at \u003ca href=\"%s\"\u003egno.land%s\u003c/a\u003e.`, nextRealmPath, nextRealmPath)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Poll: %s\\n\", poll.Question))\n\n\tif poll.Ended {\n\t\tbuf.WriteString(\"The poll has ended\\n\")\n\t} else if !isRealmLocked {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\n\t\t\t\t\"You can participate in the poll by [submitting your vote]\"+\n\t\t\t\t\t\"(https://gno.studio/connect/%s?network=%s\u0026tab=functions#Vote)\\n\",\n\t\t\t\tstd.CurrentRealmPath(),\n\t\t\t\tnetwork,\n\t\t\t),\n\t\t)\n\t}\n\n\tbuf.WriteString(\"### Answers:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their voted answer\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"- \" + getAnswerLabel(a.Choice) + \":\\n\")\n\t\t\tfor _, addr := range a.Participants {\n\t\t\t\tbuf.WriteString(\"  - \" + addr.String() + \"\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// EndPoll ends the poll to stop receiving new votes.\nfunc EndPoll() string {\n\tassertCallerIsAdmin()\n\tassertPollIsActive()\n\n\tpoll.Ended = true\n\treturn \"Poll ended successfully\"\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tif !strings.HasPrefix(realmPath, \"/r/\") {\n\t\tpanic(\"Realm path must start with /r/\")\n\t}\n\n\tif realmPath == strings.TrimPrefix(std.CurrentRealmPath(), \"gno.land\") {\n\t\tpanic(\"Realm path must be different than current realm's path\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"Realm deprecated in favor of https://\" + network + \".gno.land\" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"No choice has been selected, you should submit a vote for one of the answers.\\n\" +\n\t\t\t\t\"Only one of the choices should be selected to consider the vote as valid.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple choices has been selected, you should submit a vote for only one answer.\\n\" +\n\t\t\t\t\"The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\",\n\t\t)\n\t}\n}\n\nfunc assertPollIsActive() {\n\tif poll.Ended {\n\t\tpanic(\"Poll has ended\")\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}\n\nfunc assertRealmIsNotLocked() {\n\tif isRealmLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"tn8CDocH/rH6AAFymO5JT8S78MLllkjC8P9kUU+EMAU85qqCgjMoJUNFpSyVGNpKIht1WTK82yeQTsZKtrRR/g=="}],"memo":"Deployed through play.gno.land"},"blockNum":"374742"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1t03agwh7uu8xe0sx6y0pl2ntrc85ks72xenwy8","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"D6RR6p3mHOi9njp6mKox8BS3TGY7+jD34mPVIt+avbghqVi1EQcS08k9b5XYIEK3j/4e0dEZLqkyV0hYy7j81Q=="}],"memo":""},"blockNum":"374744"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/jeronimoalbi/poll_v1","func":"GetAdmin","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"GdZPXvOdn38Tz6C0n+PqZBJy+3JaRqihPiRAJIMDPDIx3ha/UaR3UgrI8RsB5r40yTZ/OOWvT+FAXei4jekuHg=="}],"memo":"Called through gno.studio"},"blockNum":"374746"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/jeronimoalbi/poll_v1","func":"Vote","args":["false","false","false","true"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"gNQuon42LiNo6HEOdEEF06635I5gVOp/NdoxMMQdK99+vZMjg9SzaXx61ysUygA5xzN2RxD+STi1S98qu/PnMw=="}],"memo":"Called through gno.studio"},"blockNum":"374748"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1t03agwh7uu8xe0sx6y0pl2ntrc85ks72xenwy8","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"G84mt5ktAnN1XqIOa52NS2YY64uIcHTpsJsFFQIVps8MCeBNLYwKr7IfzxYZOGr1xGwPYmRy+OU1sYI+fbP+ww=="}],"memo":""},"blockNum":"374750"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1e5hud66rs7ye4zgeqmqvwfhurs2mnf408hdqcl","send":"","pkg_path":"gno.land/r/jeronimoalbi/poll_v1","func":"Vote","args":["false","false","true","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnoTnz/ZqcoKxamS1Jb/cqISxscIS4VNFYjUrA6hDD0L"},"signature":"+p0hZSArTz+m8WSDK/kaQlaSDIFBZUKNiGAOAwZ8IpQxedgbyyAX57Yzq3vU7QORJmSAIbCM7DvquRHiKt3zkw=="}],"memo":"Called through gno.studio"},"blockNum":"374752"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1e5hud66rs7ye4zgeqmqvwfhurs2mnf408hdqcl","send":"","pkg_path":"gno.land/r/jeronimoalbi/poll_v1","func":"LockRealm","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnoTnz/ZqcoKxamS1Jb/cqISxscIS4VNFYjUrA6hDD0L"},"signature":"hhijhyaWn/zY+GKUjLX3SAAsVk15N2N4GWINZ8+8Ln1lGhW7kPLuZ41p5UXSO9788x+LIoW3MO7zy1/Y/TU/QQ=="}],"memo":"Called through gno.studio"},"blockNum":"374754"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/jeronimoalbi/poll_v1","func":"LockRealm","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"L9iBO7ZzfCPduzWaIxaK79roQ2vY3g2i6Nx5R0qdzlZSTgK4poiQS2bwzDNRKERJwsxNO8xMcKIm1sUitguGUA=="}],"memo":"Called through gno.studio"},"blockNum":"374756"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","send":"","pkg_path":"gno.land/r/sdm/somedudefeedbacktest_8","func":"MarkRealmDeprecated","args":["http://google.com"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8dMlyeZTx7/5c7upbCj/sMsgJdjajg4b8kgHZ+d1mV"},"signature":"vYAqw/D/a7w3PTJmPV6txbUj3TrrDh9AD88OZQ2H6ylldv1ZDnXXEbaBTh83+ycQmNhGaS25y00RVgN+G3dvKw=="}],"memo":"Called through gno.studio"},"blockNum":"374986"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","send":"","pkg_path":"gno.land/r/sdm/somedudefeedbacktest_8","func":"MarkRealmDeprecated","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8dMlyeZTx7/5c7upbCj/sMsgJdjajg4b8kgHZ+d1mV"},"signature":"p2T8YqvNmJ1l+cuaxMzSAWZSnFjxvrul4vH2uQH4unp7BD3VgRxryNhgkRf+vr2UTbz5socGxFc1zVghdwFJcg=="}],"memo":"Called through gno.studio"},"blockNum":"374989"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","send":"","pkg_path":"gno.land/r/sdm/somedudefeedbacktest_8","func":"SubmitFeedback","args":["Test \u003cb\u003eHTML\u003c/b\u003e message"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8dMlyeZTx7/5c7upbCj/sMsgJdjajg4b8kgHZ+d1mV"},"signature":"4tyGwGvej7HcoG++daQfW1KhxpskcqdAes27vXgqvQ8n/lIpXzCFRHXDBwEWxSwQJffcl9rZSn6Pv47gPnHS9w=="}],"memo":"Called through gno.studio"},"blockNum":"374992"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","send":"","pkg_path":"gno.land/r/sdm/somedudefeedbacktest_8","func":"UnlockRealm","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8dMlyeZTx7/5c7upbCj/sMsgJdjajg4b8kgHZ+d1mV"},"signature":"FHZoI6Cx6tWaW0D567vU0EAhmfOp+YGcae4OKXHP+Cgcsjkv/2pvqZRmM6taJIC7NTIFyANGTBR+Kk0nrm9Z9A=="}],"memo":"Called through gno.studio"},"blockNum":"374994"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","send":"","pkg_path":"gno.land/r/sdm/somedudefeedbacktest_8","func":"SubmitFeedback","args":["Test Message with \u003ci\u003eHTML\u003c/i\u003e"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8dMlyeZTx7/5c7upbCj/sMsgJdjajg4b8kgHZ+d1mV"},"signature":"84UPQh1caYCGKaC3zKccVEFlXqeuGGjEjBg6R4SgIXZPjcxPOR0d3MCu1ZArhS9U2kL00fsP2ra8AYt2VK9zEA=="}],"memo":"Called through gno.studio"},"blockNum":"374996"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g17zumnvtv34mpzcva2n7jnux9jnq9kdau7km580","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"7VOOLhSD8GxrmjnMWBskniDFHEOtmlZ+6Sa71XoXicQkny1xgKQksLKI4JGGuck5IlMmp2bYT4uGdIGZCxuw7A=="}],"memo":""},"blockNum":"374998"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g17zumnvtv34mpzcva2n7jnux9jnq9kdau7km580","package":{"Name":"llb","Path":"gno.land/r/lololabs/llb","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"},{"Name":"llb.gno","Body":"package llb\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tllb   *grc20.AdminToken\r\n\tadmin std.Address = \"g1àààààààààààààààyouraddressààààààààààààà0000000\" // TODO: helper to change admin\r\n)\r\n\r\nfunc init() {\r\n\tllb = grc20.NewAdminToken(\"Cryptopunkstar\", \"LLB\", 4)\r\n\tllb.Mint(admin, 1000000*100000)                                    // @administrator (1M)\r\n\tllb.Mint(\"g1àààààààààààààààyouraddressààààààààààààà0000000\", 100000*100000) // @cryptopunkstar (100k)\r\n}\r\n\r\n// method proxies as public functions.\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn llb.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := llb.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := llb.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tllb.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tllb.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tllb.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// faucet.\r\n\r\nfunc Faucet() {\r\n\t// FIXME: add limits?\r\n\t// FIXME: add payment in gnot?\r\n\tcaller := std.GetOrigCaller()\r\n\tllb.Mint(caller, 1000*10000) // 1k\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tllb.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tllb.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render le rendu\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn llb.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := llb.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n// secure access for admin :)\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At/re/CNup2LUOI1+WXKfcpWuk1nqrurL8bqre9o2x0F"},"signature":"6OO2cbu4iHIVB0LG8xBO9M8CHEOQorKf1wm2jkUhLPlV/Po9x+yjle07HChaCLLBfAkP3paFqdo40QpjNl/mhA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"375000"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","send":"","pkg_path":"gno.land/r/sdm/somedudefeedbacktest_8","func":"RespondToFeedback","args":["2","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Turpis massa tincidunt dui ut. Nunc consequat interdum varius sit. "]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8dMlyeZTx7/5c7upbCj/sMsgJdjajg4b8kgHZ+d1mV"},"signature":"uBNOYyoMpmqpWy5ajNDLw3szUXzeFyUcopF8urSLDHYNPrihj0/S/6YKDJhx4K4bwsfNT411R2sr983ymRXrjw=="}],"memo":"Called through gno.studio"},"blockNum":"375002"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g17zumnvtv34mpzcva2n7jnux9jnq9kdau7km580","package":{"Name":"llb","Path":"gno.land/r/lololabs/llb","Files":[{"Name":"llb.gno","Body":"package llb\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tllb   *grc20.AdminToken\r\n\tadmin std.Address = \"g1àààààààààààààààyouraddressààààààààààààà0000000\" // TODO: helper to change admin\r\n)\r\n\r\nfunc init() {\r\n\tllb = grc20.NewAdminToken(\"Cryptopunkstar\", \"LLB\", 4)\r\n\tllb.Mint(admin, 1000000*100000)                                    // @administrator (1M)\r\n\tllb.Mint(\"g1àààààààààààààààyouraddressààààààààààààà0000000\", 100000*100000) // @cryptopunkstar (100k)\r\n}\r\n\r\n// method proxies as public functions.\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn llb.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := llb.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := llb.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tllb.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tllb.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tllb.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// faucet.\r\n\r\nfunc Faucet() {\r\n\t// FIXME: add limits?\r\n\t// FIXME: add payment in gnot?\r\n\tcaller := std.GetOrigCaller()\r\n\tllb.Mint(caller, 1000*10000) // 1k\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tllb.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tllb.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render le rendu\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn llb.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := llb.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n// secure access for admin :)\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At/re/CNup2LUOI1+WXKfcpWuk1nqrurL8bqre9o2x0F"},"signature":"oJ/EvymyMvoSx+BSgCjQuAv4X8+JS5xo1glHWzf1u/kLujAl0+zTaP8dKPluoUMExWEn7sleuBFYiZfbnSfu4A=="}],"memo":"Deployed through play.gno.land"},"blockNum":"375004"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g17zumnvtv34mpzcva2n7jnux9jnq9kdau7km580","package":{"Name":"llb","Path":"gno.land/r/lololabs/llb","Files":[{"Name":"llb.gno","Body":"package llb\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tllb   *grc20.AdminToken\r\n\tadmin std.Address = \"g17zumnvtv34mpzcva2n7jnux9jnq9kdau7km580\" // TODO: helper to change admin\r\n)\r\n\r\nfunc init() {\r\n\tllb = grc20.NewAdminToken(\"Cryptopunkstar\", \"LLB\", 4)\r\n\tllb.Mint(admin, 1000000*100000)                                    // @administrator (1M)\r\n\tllb.Mint(\"g15gf7qdnvczcc95v6r6d9vxxd64u6nl37cj648y\", 100000*100000) // @cryptopunkstar (100k)\r\n}\r\n\r\n// method proxies as public functions.\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn llb.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := llb.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := llb.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tllb.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tllb.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tllb.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// faucet.\r\n\r\nfunc Faucet() {\r\n\t// FIXME: add limits?\r\n\t// FIXME: add payment in gnot?\r\n\tcaller := std.GetOrigCaller()\r\n\tllb.Mint(caller, 1000*10000) // 1k\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tllb.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tllb.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render le rendu\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn llb.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := llb.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n// secure access for admin :)\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At/re/CNup2LUOI1+WXKfcpWuk1nqrurL8bqre9o2x0F"},"signature":"mKf3QV2oIvxgVBOUQv1pSutbCbAJnVknUs6AH8Ho/cxlV+0x3s6JCAvka65Hhcf0eQVlNNoWPhAEayKyYcy2fg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"375006"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g17zumnvtv34mpzcva2n7jnux9jnq9kdau7km580","package":{"Name":"lll","Path":"gno.land/r/lololabs/lll","Files":[{"Name":"lll.gno","Body":"package lll\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/grc/grc20\"\r\n\t\"gno.land/p/demo/ufmt\"\r\n\t\"gno.land/r/demo/users\"\r\n)\r\n\r\nvar (\r\n\tlll   *grc20.AdminToken\r\n\tadmin std.Address = \"g17zumnvtv34mpzcva2n7jnux9jnq9kdau7km580\" // TODO: helper to change admin\r\n)\r\n\r\nfunc init() {\r\n\tlll = grc20.NewAdminToken(\"Cryptopunkstar\", \"LLL\", 4)\r\n\tlll.Mint(admin, 1000000*100000)                                    // @administrator (1M)\r\n\tlll.Mint(\"g15gf7qdnvczcc95v6r6d9vxxd64u6nl37cj648y\", 100000*100000) // @cryptopunkstar (100k)\r\n}\r\n\r\n// method proxies as public functions.\r\n\r\n// getters.\r\n\r\nfunc TotalSupply() uint64 {\r\n\treturn lll.TotalSupply()\r\n}\r\n\r\nfunc BalanceOf(owner users.AddressOrName) uint64 {\r\n\tbalance, err := lll.BalanceOf(owner.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn balance\r\n}\r\n\r\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\r\n\tallowance, err := lll.Allowance(owner.Resolve(), spender.Resolve())\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\treturn allowance\r\n}\r\n\r\n// setters.\r\n\r\nfunc Transfer(to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tlll.Transfer(caller, to.Resolve(), amount)\r\n}\r\n\r\nfunc Approve(spender users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tlll.Approve(caller, spender.Resolve(), amount)\r\n}\r\n\r\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tlll.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\r\n}\r\n\r\n// faucet.\r\n\r\nfunc Faucet() {\r\n\t// FIXME: add limits?\r\n\t// FIXME: add payment in gnot?\r\n\tcaller := std.GetOrigCaller()\r\n\tlll.Mint(caller, 1000*10000) // 1k\r\n}\r\n\r\n// administration.\r\n\r\nfunc Mint(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tlll.Mint(address.Resolve(), amount)\r\n}\r\n\r\nfunc Burn(address users.AddressOrName, amount uint64) {\r\n\tcaller := std.GetOrigCaller()\r\n\tassertIsAdmin(caller)\r\n\tlll.Burn(address.Resolve(), amount)\r\n}\r\n\r\n// render le rendu\r\n\r\nfunc Render(path string) string {\r\n\tparts := strings.Split(path, \"/\")\r\n\tc := len(parts)\r\n\r\n\tswitch {\r\n\tcase path == \"\":\r\n\t\treturn lll.RenderHome()\r\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\r\n\t\towner := users.AddressOrName(parts[1])\r\n\t\tbalance, _ := lll.BalanceOf(owner.Resolve())\r\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\r\n\tdefault:\r\n\t\treturn \"404\\n\"\r\n\t}\r\n}\r\n// secure access for admin :)\r\nfunc assertIsAdmin(address std.Address) {\r\n\tif address != admin {\r\n\t\tpanic(\"restricted access\")\r\n\t}\r\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"At/re/CNup2LUOI1+WXKfcpWuk1nqrurL8bqre9o2x0F"},"signature":"fRzh3n/a/woA/MnAbhFdHWSmWnNmEl9RWCFBzI/jE1pNM4ignE+rX73jkBDuddB09T1++sarQlPq5hRzrvW8Sw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"375008"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1u7y667z64x2h7vc6fmpcprgey4ck233jaww9zq","send":"","pkg_path":"gno.land/r/demo/users","func":"Invite","args":["g1rdld2ay4c3r3eghk563sz6ne79mmplcl8zatuu"]}],"fee":{"gas_wanted":"2000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnK+a6mcFDjY6b/v6p7r8QFW1M1PgIoQxBgrwOoyY7v3"},"signature":"XxzzVjliZqWl0MJ9UqsVEU2y7j/LLrHZLl9yEU9BYI0wyoV/Hx5Pm2WKmLxicgnAuOyVLQhDNzsE5Q4SDe8DVw=="}],"memo":""},"blockNum":"375017"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","send":"","pkg_path":"gno.land/r/sdm/somedudefeedbacktest_8","func":"SubmitFeedback","args":["Fuck"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8dMlyeZTx7/5c7upbCj/sMsgJdjajg4b8kgHZ+d1mV"},"signature":"Cj2uoRsOmQdwtLn1HB0cebCrluOf9ajW8T+P1k91QMg9Yo/8YWSWcH/ylTVShnRtNeWQwnsN4IOXbuyEDeFTJw=="}],"memo":"Called through gno.studio"},"blockNum":"375061"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","send":"","pkg_path":"gno.land/r/sdm/somedudefeedbacktest_8","func":"RespondToFeedback","args":["3","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Cras ornare arcu dui vivamus arcu felis bibendum ut. Donec ultrices tincidunt arcu non sodales neque sodales ut etiam. Felis eget nunc lobortis mattis aliquam. Ut placerat orci nulla pellentesque dignissim enim sit amet. Massa sapien faucibus et molestie ac feugiat sed lectus vestibulum. Egestas egestas fringilla phasellus faucibus scelerisque eleifend donec. Aliquet bibendum enim facilisis gravida neque convallis. Elit duis tristique sollicitudin nibh sit amet commodo. Sapien faucibus et molestie ac. Egestas diam in arcu cursus euismod."]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8dMlyeZTx7/5c7upbCj/sMsgJdjajg4b8kgHZ+d1mV"},"signature":"JvbhQ04sLJqNXFXeGsnuN6ZmTdraBvL0vIlUbnzGTfwu3lRWrtSg9cJ4uTH6KL3UKKrGxkn8agyT5CDSJrPDHw=="}],"memo":"Called through gno.studio"},"blockNum":"375063"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","send":"","pkg_path":"gno.land/r/sdm/somedudefeedbacktest_8","func":"RespondToFeedback","args":["3","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Cras ornare arcu dui vivamus arcu felis bibendum ut. Donec ultrices tincidunt arcu non sodales neque sodales ut etiam. Felis eget nunc lobortis mattis aliquam. Ut placerat orci nulla pellentesque dignissim enim sit amet. Massa sapien faucibus et molestie ac feugiat sed lectus vestibulum. Egestas egestas fringilla phasellus faucibus scelerisque eleifend donec. Aliquet bibendum enim facilisis gravida neque convallis. Elit duis tristique sollicitudin nibh sit amet commodo."]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8dMlyeZTx7/5c7upbCj/sMsgJdjajg4b8kgHZ+d1mV"},"signature":"uccEGiA6AoU0FWyxglOs6/yRoiVqd2UAVR43eedzec1Cub8HOYAjGigIiPomoc2ntbNhwDbakTlmshCwvE+Ahw=="}],"memo":"Called through gno.studio"},"blockNum":"375065"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","send":"","pkg_path":"gno.land/r/sdm/somedudefeedbacktest_8","func":"RespondToFeedback","args":["3","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Cras ornare arcu dui vivamus arcu felis bibendum ut. Donec ultrices tincidunt arcu non sodales neque sodales ut etiam. Felis eget nunc lobortis mattis aliquam. "]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8dMlyeZTx7/5c7upbCj/sMsgJdjajg4b8kgHZ+d1mV"},"signature":"7dcjWff/K4zQX/5s1PUqIKCOIBpgNucW344CbJJw+dFacyOH74uEO4+Od0jAine99keLT5RyKubg50z9bSJToA=="}],"memo":"Called through gno.studio"},"blockNum":"375067"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","send":"","pkg_path":"gno.land/r/sdm/somedudefeedbacktest_8","func":"RespondToFeedback","args":["3","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Cras ornare arcu dui vivamus arcu felis bibendum ut. "]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8dMlyeZTx7/5c7upbCj/sMsgJdjajg4b8kgHZ+d1mV"},"signature":"SUecXZBh5tVTDIWNfuozmrb17on1nPDUJkq5K/O1VMozvJN6waxQJBnxYLE+dbWlhox5OuCl+USTdqBtJx+Ipg=="}],"memo":"Called through gno.studio"},"blockNum":"375069"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","send":"","pkg_path":"gno.land/r/sdm/somedudefeedbacktest_8","func":"BanFeedback","args":["3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8dMlyeZTx7/5c7upbCj/sMsgJdjajg4b8kgHZ+d1mV"},"signature":"CRPKmWGHHIlDc5PFSeG2T6cprS1Pclr6MHSgetVwwZ80X/K9cJyoHNJjFzdbPQWfUoXvkuZRwqsmkz5rssJMUA=="}],"memo":"Called through gno.studio"},"blockNum":"375071"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test10/poll","func":"Vote","args":["Blue\n"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"KpuOmJMEGOEvmaJwK3hIe3lhX9hhVKDruC0yG2ZOxlcGjeATaFl9ukjkThHwFvUs47wJKfIailYTWwOXs7fFNA=="}],"memo":"Called through gno.studio"},"blockNum":"375199"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/gnostudio/feedback_v1","func":"SubmitFeedback","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"zwdGrxSFWfMxMVMwKllM+aYfhSMEIJnZ1hEWslz6dHZhO+xdkm8rSoL2ZlfOBVAThjEUDcviNYYHKwlA4Olcug=="}],"memo":"Called through gno.studio"},"blockNum":"375206"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g14pphz8c09skfghk67cg8dpp9sm3k6wy443xszz","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"W79Ka4naDiqaxQprRa4peSJ7BnZFgu1pmxjzKNcXKPhaYW2ZRo2lcGozIX3vWTEaPiHzfDlza/OOsRjh+7EmaA=="}],"memo":""},"blockNum":"375215"}
