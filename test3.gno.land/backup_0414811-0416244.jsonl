{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g18lj5pgadp3y98wawweavle2r0677w9z25zmnm0","package":{"Name":"mytoken","Path":"gno.land/r/thox/mytoken","Files":[{"Name":"package.gno","Body":"package mytoken\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tmytoken *grc20.AdminToken\n\tadmin   std.Address\n)\n\n// init is called once at time of deployment\nfunc init() {\n\t// Set deployer of Realm to admin\n\tadmin = std.PrevRealm().Addr()\n\n\t// Set token name, symbol and number of decimals\n\tmytoken = grc20.NewAdminToken(\"My Token\", \"TKN\", 4)\n\n\t// Mint 1 million tokens to admin\n\tmytoken.Mint(admin, 1000000*10000)\n}\n\nfunc TotalSupply() uint64 {\n\treturn mytoken.TotalSupply()\n}\n\nfunc Decimals() uint {\n\treturn mytoken.GetDecimals()\n}\n\nfunc BalanceOf(account std.Address) uint64 {\n\tbalance, err := mytoken.BalanceOf(account)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc Allowance(owner, spender std.Address) uint64 {\n\tallowance, err := mytoken.Allowance(owner, spender)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn allowance\n}\n\nfunc Transfer(recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Transfer(caller, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Approve(spender std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Approve(caller, spender, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(sender, recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"transfer amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.TransferFrom(caller, from, to, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Mint(address std.Address, amount uint64) {\n\tassertIsAdmin(std.PrevRealm().Addr())\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"mint amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.Mint(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(address std.Address, amount uint64) {\n\tassertIsAdmin(std.PrevRealm().Addr())\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"burn amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.Burn(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn mytoken.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := std.Address(parts[1])\n\t\tbalance, _ := mytoken.BalanceOf(owner)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7F3+SG0EvfD9EoMgxL8VSOFIb+XlP7eI0SIbyQYrAmF"},"signature":"XHSpRbFz/KOJ6liRvtf/Ae4iMOogvlXkztWemBpxLxYK0nASSVMyi+ex8c7ZWkiY/E4zM+Ufoq3DVbrcZb9j0A=="}],"memo":"Deployed through play.gno.land"},"blockNum":"415545"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g18lj5pgadp3y98wawweavle2r0677w9z25zmnm0","package":{"Name":"mytoken","Path":"gno.land/r/thox/mytoken","Files":[{"Name":"package.gno","Body":"package mytoken\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tmytoken *grc20.AdminToken\n\tadmin   std.Address\n)\n\n// init is called once at time of deployment\nfunc init() {\n\t// Set deployer of Realm to admin\n\tadmin = std.PrevRealm().Addr()\n\n\t// Set token name, symbol and number of decimals\n\tmytoken = grc20.NewAdminToken(\"My Token\", \"TKN\", 4)\n\n\t// Mint 1 million tokens to admin\n\tmytoken.Mint(admin, 1000000*10000)\n}\n\nfunc TotalSupply() uint64 {\n\treturn mytoken.TotalSupply()\n}\n\nfunc Decimals() uint {\n\treturn mytoken.GetDecimals()\n}\n\nfunc BalanceOf(account std.Address) uint64 {\n\tbalance, err := mytoken.BalanceOf(account)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc Allowance(owner, spender std.Address) uint64 {\n\tallowance, err := mytoken.Allowance(owner, spender)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn allowance\n}\n\nfunc Transfer(recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Transfer(caller, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Approve(spender std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Approve(caller, spender, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(sender, recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"transfer amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.TransferFrom(caller, from, to, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Mint(address std.Address, amount uint64) {\n\tassertIsAdmin(std.PrevRealm().Addr())\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"mint amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.Mint(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(address std.Address, amount uint64) {\n\tassertIsAdmin(std.PrevRealm().Addr())\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"burn amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.Burn(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn mytoken.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := std.Address(parts[1])\n\t\tbalance, _ := mytoken.BalanceOf(owner)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7F3+SG0EvfD9EoMgxL8VSOFIb+XlP7eI0SIbyQYrAmF"},"signature":"1c/bo0VFHSE4OpqxCn8jAm4LBK62TRfnAJNry+M+xyBodFBut74JJVUc78ktkwD+PqJCgs2rCiUr0qlKa03/1Q=="}],"memo":"Deployed through play.gno.land"},"blockNum":"415557"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g18lj5pgadp3y98wawweavle2r0677w9z25zmnm0","package":{"Name":"mytoken","Path":"gno.land/r/thox/mytoken","Files":[{"Name":"package.gno","Body":"package mytoken\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tmytoken *grc20.AdminToken\n\tadmin   std.Address\n)\n\n// init is called once at time of deployment\nfunc init() {\n\t// Set deployer of Realm to admin\n\tadmin = std.PrevRealm().Addr()\n\n\t// Set token name, symbol and number of decimals\n\tmytoken = grc20.NewAdminToken(\"My Token\", \"TKN\", 4)\n\n\t// Mint 1 million tokens to admin\n\tmytoken.Mint(admin, 1000000*10000)\n}\n\nfunc TotalSupply() uint64 {\n\treturn mytoken.TotalSupply()\n}\n\nfunc Decimals() uint {\n\treturn mytoken.GetDecimals()\n}\n\nfunc BalanceOf(account std.Address) uint64 {\n\tbalance, err := mytoken.BalanceOf(account)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc Allowance(owner, spender std.Address) uint64 {\n\tallowance, err := mytoken.Allowance(owner, spender)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn allowance\n}\n\nfunc Transfer(recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Transfer(caller, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Approve(spender std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Approve(caller, spender, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(sender, recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"transfer amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.TransferFrom(caller, sender, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Mint(address std.Address, amount uint64) {\n\tassertIsAdmin(std.PrevRealm().Addr())\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"mint amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.Mint(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(address std.Address, amount uint64) {\n\tassertIsAdmin(std.PrevRealm().Addr())\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"burn amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.Burn(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn mytoken.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := std.Address(parts[1])\n\t\tbalance, _ := mytoken.BalanceOf(owner)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7F3+SG0EvfD9EoMgxL8VSOFIb+XlP7eI0SIbyQYrAmF"},"signature":"SqnQ0BzI/DVDUUWXF4xo/GoAOBTaWGqOK9GFTk7Tn9AxGeoc6xpFzzfTiv4LWLUb+2dK0/a9Lklb0MGkpASgdw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"415561"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1v664qx78zhv2edtx6ypdylfpafrqjz8g2rlaea","package":{"Name":"mytoken","Path":"gno.land/r/okok/mytoken","Files":[{"Name":"package.gno","Body":"package mytoken\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tmytoken *grc20.AdminToken\n\tadmin   std.Address\n)\n\n// init is called once at time of deployment\nfunc init() {\n\t// Set deployer of Realm to admin\n\tadmin = std.PrevRealm().Addr()\n\n\t// Set token name, symbol and number of decimals\n\tmytoken = grc20.NewAdminToken(\"My Token\", \"TKN\", 4)\n\n\t// Mint 1 million tokens to admin\n\tmytoken.Mint(admin, 1000000*10000)\n}\n\nfunc TotalSupply() uint64 {\n\treturn mytoken.TotalSupply()\n}\n\nfunc Decimals() uint {\n\treturn mytoken.GetDecimals()\n}\n\nfunc BalanceOf(account std.Address) uint64 {\n\tbalance, err := mytoken.BalanceOf(account)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc Allowance(owner, spender std.Address) uint64 {\n\tallowance, err := mytoken.Allowance(owner, spender)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn allowance\n}\n\nfunc Transfer(recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Transfer(caller, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Approve(spender std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Approve(caller, spender, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(sender, recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"transfer amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.TransferFrom(caller, from, to, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Mint(address std.Address, amount uint64) {\n\tassertIsAdmin(std.PrevRealm().Addr())\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"mint amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.Mint(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(address std.Address, amount uint64) {\n\tassertIsAdmin(std.PrevRealm().Addr())\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"burn amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.Burn(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn mytoken.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := std.Address(parts[1])\n\t\tbalance, _ := mytoken.BalanceOf(owner)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// How-to: Create a GRC20 Token"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An36kfJTFLYv6qJ18qs3TguyUwiALNgLeCPHsZjzhSdI"},"signature":"jvmgv/ecxzN1gA7YhNqG0Ay0g7kyMoDBpvjfwped624felyqq4q38rQM0QtV6l7loX8kB4vMXHsQAY35/QGUgA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"415568"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1v664qx78zhv2edtx6ypdylfpafrqjz8g2rlaea","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"YzJ9XShK226X/L6xW74l8LHW56hUeLRV+Ok/rTIIiGt++fJTA47MHgopIiA1tzCHgALD62CyMjnqSydCrR/sZw=="}],"memo":""},"blockNum":"415570"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1v664qx78zhv2edtx6ypdylfpafrqjz8g2rlaea","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"8LYrt8LPvQl32hL7jq/zvUpa0erFeLb5WeoUyMMJpihnWvnt3g2btg34Sc2r0+wd8qkgh/BzryBYNPNjFKgNvA=="}],"memo":""},"blockNum":"415572"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g18lj5pgadp3y98wawweavle2r0677w9z25zmnm0","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"45yhonUH8No6Z2VfgRHZxp+uzp/MvdL6lu8DPezvIflB5lzz/1FpNhp6ltsgz9IigXXhSPO8pj0FOhpymrvXmw=="}],"memo":""},"blockNum":"415574"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g18lj5pgadp3y98wawweavle2r0677w9z25zmnm0","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"y6Pr3zHVaeKR6hl4aP4kjmC82/7ngZmM8/sdVWijEj5/0PjoUegRMJscnUo9g/yhcE4GqgPmktE6/a8Z7a9wKg=="}],"memo":""},"blockNum":"415576"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g18lj5pgadp3y98wawweavle2r0677w9z25zmnm0","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"zidO9FzlorgY3AgaH1BS3uI7LnibvUU42Lzp3MkDVzJ440aPTzRj5zsX+PUQ+G6Z1rkED7jtfUsm1k+2sXd1fA=="}],"memo":""},"blockNum":"415578"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g18lj5pgadp3y98wawweavle2r0677w9z25zmnm0","package":{"Name":"mytoken","Path":"gno.land/r/thox/mytoken","Files":[{"Name":"package.gno","Body":"package mytoken\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tmytoken *grc20.AdminToken\n\tadmin   std.Address\n)\n\n// init is called once at time of deployment\nfunc init() {\n\t// Set deployer of Realm to admin\n\tadmin = std.PrevRealm().Addr()\n\n\t// Set token name, symbol and number of decimals\n\tmytoken = grc20.NewAdminToken(\"My Token\", \"TKN\", 4)\n\n\t// Mint 1 million tokens to admin\n\tmytoken.Mint(admin, 1000000*10000)\n}\n\nfunc TotalSupply() uint64 {\n\treturn mytoken.TotalSupply()\n}\n\nfunc Decimals() uint {\n\treturn mytoken.GetDecimals()\n}\n\nfunc BalanceOf(account std.Address) uint64 {\n\tbalance, err := mytoken.BalanceOf(account)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc Allowance(owner, spender std.Address) uint64 {\n\tallowance, err := mytoken.Allowance(owner, spender)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn allowance\n}\n\nfunc Transfer(recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Transfer(caller, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Approve(spender std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Approve(caller, spender, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(sender, recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"transfer amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.TransferFrom(caller, sender, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Mint(address std.Address, amount uint64) {\n\tassertIsAdmin(std.PrevRealm().Addr())\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"mint amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.Mint(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(address std.Address, amount uint64) {\n\tassertIsAdmin(std.PrevRealm().Addr())\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"burn amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.Burn(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn mytoken.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := std.Address(parts[1])\n\t\tbalance, _ := mytoken.BalanceOf(owner)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7F3+SG0EvfD9EoMgxL8VSOFIb+XlP7eI0SIbyQYrAmF"},"signature":"Mr+VcVXx8iQVCHU+kDq+kDfInoRqupMrJuG46rmkRF4qoUpsKNfZ4WDrlkqwja8TcUOXdQC98mDNV+lMQPNRNA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"415580"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fjh9y7ausp27dqsdq0qrcsnmgvwm6829v2au7d","send":"","pkg_path":"gno.land/r/gnostudio/gnoyourdate","func":"Vote","args":["false","false","false","true"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1sQrIl4krsBIKtCTfMqWzbkKQDSfmPtMYQA9EvsJqmu"},"signature":"0ThCqlCOG6N9DJOf2KTgFYaxA0dXbgaevVZAFvnShtExHZbMoLpJ7xF5qGlu0sRApvf58VdMyGlBP6GKSn8gaQ=="}],"memo":"Called through gno.studio"},"blockNum":"416175"}
