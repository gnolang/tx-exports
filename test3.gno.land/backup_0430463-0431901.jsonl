{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","to_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1CWzHwZ/FjY00hsAQhl6pnpuR3ulUiXgkMx0Te14ATX"},"signature":"wfXkBoZJxbSKaYSsBUpq891H+nU9xaDjLQoBvdMS4kUd9IeLcfJhtJxDeduaL/3MdfgUQiTMhT1PtE1KeSXxTg=="}],"memo":""},"blockNum":"430635"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1ygw7f6c0ldm0ksdf8yqlfzpuj232smya9xgftm","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"KYIJxZaMTrxPCvHKEvsyCfyMQFcBvIdu5HHA17b4qzZAvyrTTQLTr6NkmldCNbc+YRbAKer6lSCuy8iXcepDbw=="}],"memo":""},"blockNum":"430880"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g15x46up6w3v9ey7wkltf05jt20pa6g39kkjjx8a","package":{"Name":"rezatestgrc20","Path":"gno.land/r/demo/rezatestgrc20","Files":[{"Name":"package.gno","Body":"package mytoken\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tmytoken *grc20.AdminToken\n\tadmin   std.Address\n)\n\n// init is called once at time of deployment\nfunc init() {\n\t// Set deployer of Realm to admin\n\tadmin = std.PrevRealm().Addr()\n\n\t// Set token name, symbol and number of decimals\n\tmytoken = grc20.NewAdminToken(\"Reza Test\", \"REZAT\", 4)\n\n\t// Mint 1 million tokens to admin\n\tmytoken.Mint(admin, 1000000*10000)\n}\n\nfunc TotalSupply() uint64 {\n\treturn mytoken.TotalSupply()\n}\n\nfunc Decimals() uint {\n\treturn mytoken.GetDecimals()\n}\n\nfunc BalanceOf(account std.Address) uint64 {\n\tbalance, err := mytoken.BalanceOf(account)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc Allowance(owner, spender std.Address) uint64 {\n\tallowance, err := mytoken.Allowance(owner, spender)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn allowance\n}\n\nfunc Transfer(recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Transfer(caller, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Approve(spender std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Approve(caller, spender, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(sender, recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"transfer amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.TransferFrom(caller, from, to, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Mint(address std.Address, amount uint64) {\n\tassertIsAdmin(std.PrevRealm().Addr())\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"mint amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.Mint(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(address std.Address, amount uint64) {\n\tassertIsAdmin(std.PrevRealm().Addr())\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"burn amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.Burn(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn mytoken.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := std.Address(parts[1])\n\t\tbalance, _ := mytoken.BalanceOf(owner)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// How-to: Create a GRC20 Token"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjyiEoWXSv+3rzZ5SAqyejVu1L/j2YLZq1F/0SHfEWBe"},"signature":"QLuSp+cw0aoi4w07xXRI6Rojgrj6pZ7Kf8WrvlZh7fRxRUZaF5RLqZP0ce7n1Gouvy8oWcFy5xVYx4emaf/PHA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"431091"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g15x46up6w3v9ey7wkltf05jt20pa6g39kkjjx8a","package":{"Name":"rezatestgrc20","Path":"gno.land/r/demo/rezatestgrc20","Files":[{"Name":"package.gno","Body":"package rezatestgrc20\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tmytoken *grc20.AdminToken\n\tadmin   std.Address\n)\n\n// init is called once at time of deployment\nfunc init() {\n\t// Set deployer of Realm to admin\n\tadmin = std.PrevRealm().Addr()\n\n\t// Set token name, symbol and number of decimals\n\tmytoken = grc20.NewAdminToken(\"Reza Test\", \"REZAT\", 4)\n\n\t// Mint 1 million tokens to admin\n\tmytoken.Mint(admin, 1000000*10000)\n}\n\nfunc TotalSupply() uint64 {\n\treturn mytoken.TotalSupply()\n}\n\nfunc Decimals() uint {\n\treturn mytoken.GetDecimals()\n}\n\nfunc BalanceOf(account std.Address) uint64 {\n\tbalance, err := mytoken.BalanceOf(account)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc Allowance(owner, spender std.Address) uint64 {\n\tallowance, err := mytoken.Allowance(owner, spender)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn allowance\n}\n\nfunc Transfer(recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Transfer(caller, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Approve(spender std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Approve(caller, spender, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(sender, recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"transfer amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.TransferFrom(caller, from, to, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Mint(address std.Address, amount uint64) {\n\tassertIsAdmin(std.PrevRealm().Addr())\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"mint amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.Mint(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(address std.Address, amount uint64) {\n\tassertIsAdmin(std.PrevRealm().Addr())\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"burn amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.Burn(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn mytoken.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := std.Address(parts[1])\n\t\tbalance, _ := mytoken.BalanceOf(owner)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// How-to: Create a GRC20 Token"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjyiEoWXSv+3rzZ5SAqyejVu1L/j2YLZq1F/0SHfEWBe"},"signature":"HguUk4mtghMnLe62POh+0edPDkd4h8DKb3iKe3WlP1QQaToi4ssr99tunIyJD9ifupo16eut6z3y2pKFfh8j+g=="}],"memo":"Deployed through play.gno.land"},"blockNum":"431093"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g15x46up6w3v9ey7wkltf05jt20pa6g39kkjjx8a","package":{"Name":"mytokenreza","Path":"gno.land/r/demo/mytokenreza","Files":[{"Name":"package.gno","Body":"package mytoken\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tmytoken *grc20.AdminToken\n\tadmin   std.Address\n)\n\n// init is called once at time of deployment\nfunc init() {\n\t// Set deployer of Realm to admin\n\tadmin = std.PrevRealm().Addr()\n\n\t// Set token name, symbol and number of decimals\n\tmytoken = grc20.NewAdminToken(\"My Token\", \"TKN\", 4)\n\n\t// Mint 1 million tokens to admin\n\tmytoken.Mint(admin, 1000000*10000)\n}\n\nfunc TotalSupply() uint64 {\n\treturn mytoken.TotalSupply()\n}\n\nfunc Decimals() uint {\n\treturn mytoken.GetDecimals()\n}\n\nfunc BalanceOf(account std.Address) uint64 {\n\tbalance, err := mytoken.BalanceOf(account)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc Allowance(owner, spender std.Address) uint64 {\n\tallowance, err := mytoken.Allowance(owner, spender)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn allowance\n}\n\nfunc Transfer(recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Transfer(caller, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Approve(spender std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Approve(caller, spender, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(sender, recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"transfer amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.TransferFrom(caller, from, to, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Mint(address std.Address, amount uint64) {\n\tassertIsAdmin(std.PrevRealm().Addr())\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"mint amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.Mint(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(address std.Address, amount uint64) {\n\tassertIsAdmin(std.PrevRealm().Addr())\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"burn amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.Burn(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn mytoken.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := std.Address(parts[1])\n\t\tbalance, _ := mytoken.BalanceOf(owner)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// How-to: Create a GRC20 Token"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjyiEoWXSv+3rzZ5SAqyejVu1L/j2YLZq1F/0SHfEWBe"},"signature":"TZMQNlXF6MXEdGHO5abz4SeolKMMxbfgRT7Khz9d61txnqI1EJRlEySK3ou+SODIxRGLvs1wSb501bpSRzosCg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"431098"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g15x46up6w3v9ey7wkltf05jt20pa6g39kkjjx8a","package":{"Name":"mytokenreza","Path":"gno.land/r/demo/mytokenreza","Files":[{"Name":"package.gno","Body":"package mytokenreza\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tmytoken *grc20.AdminToken\n\tadmin   std.Address\n)\n\n// init is called once at time of deployment\nfunc init() {\n\t// Set deployer of Realm to admin\n\tadmin = std.PrevRealm().Addr()\n\n\t// Set token name, symbol and number of decimals\n\tmytoken = grc20.NewAdminToken(\"My Token\", \"TKN\", 4)\n\n\t// Mint 1 million tokens to admin\n\tmytoken.Mint(admin, 1000000*10000)\n}\n\nfunc TotalSupply() uint64 {\n\treturn mytoken.TotalSupply()\n}\n\nfunc Decimals() uint {\n\treturn mytoken.GetDecimals()\n}\n\nfunc BalanceOf(account std.Address) uint64 {\n\tbalance, err := mytoken.BalanceOf(account)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc Allowance(owner, spender std.Address) uint64 {\n\tallowance, err := mytoken.Allowance(owner, spender)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn allowance\n}\n\nfunc Transfer(recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Transfer(caller, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Approve(spender std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Approve(caller, spender, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(sender, recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"transfer amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.TransferFrom(caller, from, to, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Mint(address std.Address, amount uint64) {\n\tassertIsAdmin(std.PrevRealm().Addr())\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"mint amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.Mint(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(address std.Address, amount uint64) {\n\tassertIsAdmin(std.PrevRealm().Addr())\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"burn amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.Burn(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn mytoken.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := std.Address(parts[1])\n\t\tbalance, _ := mytoken.BalanceOf(owner)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// How-to: Create a GRC20 Token"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjyiEoWXSv+3rzZ5SAqyejVu1L/j2YLZq1F/0SHfEWBe"},"signature":"SA06ax7iRwVaFgU4GcyQRP29ZKX9vfhJyuZmxH35bCcSZruPGd0z3j6qGo/HKTXNCAzlu4fsoQz5Lql01lZiIQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"431100"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g15x46up6w3v9ey7wkltf05jt20pa6g39kkjjx8a","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"EKEdWUNWhNqT/Nb1xv3mA1Fw7VRwCMT1m5JELdLrEAEPYpvXCQrZhGqouu7mc6rK2p1im5O2+D/YTWXyC77JCg=="}],"memo":""},"blockNum":"431103"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g15x46up6w3v9ey7wkltf05jt20pa6g39kkjjx8a","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"M92/nKNNzYcaD3TDPwxDM0NKzDYahFPlZ/VY5q5qH0FOpzElqTiM9oJ8obQH5dwNzrGiqiNehppRBqLwEb3RHw=="}],"memo":""},"blockNum":"431105"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g15x46up6w3v9ey7wkltf05jt20pa6g39kkjjx8a","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"1wGKlZYQDLZ6sF8yWTIB4OFR8BtdkCjlJeVmHQv8X6txkvGsmOAtDR+D8VV0zgBDKSE8dLtyFTZIbkHpHvryog=="}],"memo":""},"blockNum":"431107"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g15x46up6w3v9ey7wkltf05jt20pa6g39kkjjx8a","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"L/lF5Sida9jQoPazN0PAGNaZBaYR/FBg7kv+MKcLzokfZlaSiVPXdS7yRbtyfePLclUaXo/w0t2XYPhWGya83g=="}],"memo":""},"blockNum":"431110"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1h4zxu0hrgc5gyxeynf89mymspqjzs9pzadewqq","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"0l87ozXL226uzGlHLXMC1plBJywdhgHw2HtrhiACb/VwANFG6FbSEiz6JpwGYjt4urrTQnuBbFP7AGeNlvkOxQ=="}],"memo":""},"blockNum":"431172"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1h4zxu0hrgc5gyxeynf89mymspqjzs9pzadewqq","send":"","pkg_path":"gno.land/r/gnostudio/gnoyourdate","func":"Vote","args":["false","false","false","true"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjKSv78yW4EU81LH4Wn6fSPDiBs+pdNdu4G/WvAhGtt0"},"signature":"UnXhhL/9AXTkb8mgfBMBkv2+xjBpFVC6o7PV6t5Up+E7doe93hRSje/MsAXVkg/9S+ZiqWK+dVsroUt6qUmNxw=="}],"memo":"Called through gno.studio"},"blockNum":"431174"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g15x46up6w3v9ey7wkltf05jt20pa6g39kkjjx8a","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"/bvja+MiGd9zYCvjAzY141kei3Ssavb1s3bbMcmnYElj2mrxUBHbOWfVzSw9DU6ScbO0WNXLxWVUjJLv81PC4w=="}],"memo":""},"blockNum":"431196"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g18rxaq6fd9k2fe0tknfp2fg5wna8uv4wwd3a2nz","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"hYwqyCL2lj7vvmU8rvrpVHS/s0gDCXdoF5qcuE3sUeIrXZ9P2yeKPleycAit2aYy1N2wTZoFet+QduEdzU2SSw=="}],"memo":""},"blockNum":"431296"}
