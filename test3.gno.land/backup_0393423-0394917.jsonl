{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1zuy4mj3p725k82eentww0e5vg00t6yg47h7adz","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"uNSDG9At/5/4MT4gDmpVdXFXT9l1ZXlCMIqFbgNoYrJAfX0P/sOlVxc0PmAPz4zc4a2RQ1RntPbmJfCaqwMzeQ=="}],"memo":""},"blockNum":"393498"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zuy4mj3p725k82eentww0e5vg00t6yg47h7adz","package":{"Name":"hello","Path":"gno.land/r/quanghoangf/hello","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1x07iXg/zN1UwmViPyUx87iEFXwAA5BzEP6jqWK62Hm"},"signature":"qS1wRvlNvrwTdWf5X+5BoECRnBIeaKS4GA+ak7RYV+NXimOC+0Iu7E8KGGlMVIUso1fA+5FRbHFtK1rrI5hsLA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"393500"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zuy4mj3p725k82eentww0e5vg00t6yg47h7adz","package":{"Name":"events","Path":"gno.land/r/quanghoangf/events","Files":[{"Name":"package.gno","Body":"package events\n\nimport (\n    \"std\"\n)\n\nvar owner std.Address\n\nfunc init() {\n    owner = std.PrevRealm().Addr()\n}\n\nfunc ChangeOwner(newOwner std.Address) {\n    caller := std.PrevRealm().Addr()\n\n    if caller != owner {\n        panic(\"access denied\")\n    }\n    \n    owner = newOwner\n    std.Emit(\"OwnershipChange\", \"newOwner\", newOwner.String())\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1x07iXg/zN1UwmViPyUx87iEFXwAA5BzEP6jqWK62Hm"},"signature":"R9jvwdrVna0omjUjq9y+ZvPR/8b8u3VQbVKAMjs65YslOW4UMeTFjrz+1yZbU5UXLDl0c13eFORDfhDwLIIxmg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"393505"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","send":"","pkg_path":"gno.land/r/gnostudio/feedback_v1","func":"SubmitFeedback","args":["It's great!!"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1CWzHwZ/FjY00hsAQhl6pnpuR3ulUiXgkMx0Te14ATX"},"signature":"1/YbH0Vg4aOhP+JlBCPPmeIJGf5RKbeRHZozq1WkdnQGcFpym4PbMHRnAQtBM+x9d2vnUdkcqZaxnN89L3b1zQ=="}],"memo":"Called through gno.studio"},"blockNum":"393663"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zuy4mj3p725k82eentww0e5vg00t6yg47h7adz","package":{"Name":"users","Path":"gno.land/r/quanghoangf/users","Files":[{"Name":"package.gno","Body":"package users\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/users\"\n)\n\n//----------------------------------------\n// State\n\nvar (\n\tadmin      std.Address = \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\"\n\tname2User  avl.Tree                    // Name -\u003e *users.User\n\taddr2User  avl.Tree                    // std.Address -\u003e *users.User\n\tinvites    avl.Tree                    // string(inviter+\":\"+invited) -\u003e true\n\tcounter    int                         // user id counter\n\tminFee     int64       = 200 * 1000000 // minimum gnot must be paid to register.\n\tmaxFeeMult int64       = 10            // maximum multiples of minFee accepted.\n)\n\n//----------------------------------------\n// Top-level functions\n\nfunc Register(inviter std.Address, name string, profile string) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// assert invited or paid.\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tsentCoins := std.GetOrigSend()\n\tminCoin := std.Coin{\"ugnot\", minFee}\n\tif inviter == \"\" {\n\t\t// banker := std.GetBanker(std.BankerTypeOrigSend)\n\t\tif len(sentCoins) == 1 \u0026\u0026 sentCoins[0].IsGTE(minCoin) {\n\t\t\tif sentCoins[0].Amount \u003e minFee*maxFeeMult {\n\t\t\t\tpanic(\"payment must not be greater than \" + strconv.Itoa(int(minFee*maxFeeMult)))\n\t\t\t} else {\n\t\t\t\t// ok\n\t\t\t}\n\t\t} else {\n\t\t\tpanic(\"payment must not be less than \" + strconv.Itoa(int(minFee)))\n\t\t}\n\t} else {\n\t\tinvitekey := inviter.String() + \":\" + caller.String()\n\t\t_, ok := invites.Get(invitekey)\n\t\tif !ok {\n\t\t\tpanic(\"invalid invitation\")\n\t\t}\n\t\tinvites.Remove(invitekey)\n\t}\n\t// assert not already registered.\n\t_, ok := name2User.Get(name)\n\tif ok {\n\t\tpanic(\"name already registered\")\n\t}\n\t_, ok = addr2User.Get(caller.String())\n\tif ok {\n\t\tpanic(\"address already registered\")\n\t}\n\t// assert name is valid.\n\tif !reName.MatchString(name) {\n\t\tpanic(\"invalid name: \" + name + \" (must be at least 6 characters, lowercase alphanumeric with underscore)\")\n\t}\n\t// remainder of fees go toward invites.\n\tinvites := int(0)\n\tif len(sentCoins) == 1 {\n\t\tif sentCoins[0].Denom == \"ugnot\" \u0026\u0026 sentCoins[0].Amount \u003e= minFee {\n\t\t\tinvites = int(sentCoins[0].Amount / minFee)\n\t\t\tif inviter == \"\" \u0026\u0026 invites \u003e 0 {\n\t\t\t\tinvites -= 1\n\t\t\t}\n\t\t}\n\t}\n\t// register.\n\tcounter++\n\tuser := \u0026users.User{\n\t\tAddress: caller,\n\t\tName:    name,\n\t\tProfile: profile,\n\t\tNumber:  counter,\n\t\tInvites: invites,\n\t\tInviter: inviter,\n\t}\n\tname2User.Set(name, user)\n\taddr2User.Set(caller.String(), user)\n}\n\nfunc Invite(invitee string) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// get caller/inviter.\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tlines := strings.Split(invitee, \"\\n\")\n\tif caller == admin {\n\t\t// nothing to do, all good\n\t} else {\n\t\t// ensure has invites.\n\t\tuserI, ok := addr2User.Get(caller.String())\n\t\tif !ok {\n\t\t\tpanic(\"user unknown\")\n\t\t}\n\t\tuser := userI.(*users.User)\n\t\tif user.Invites \u003c= 0 {\n\t\t\tpanic(\"user has no invite tokens\")\n\t\t}\n\t\tuser.Invites -= len(lines)\n\t\tif user.Invites \u003c 0 {\n\t\t\tpanic(\"user has insufficient invite tokens\")\n\t\t}\n\t}\n\t// for each line...\n\tfor _, line := range lines {\n\t\tif line == \"\" {\n\t\t\tcontinue // file bodies have a trailing newline.\n\t\t} else if strings.HasPrefix(line, `//`) {\n\t\t\tcontinue // comment\n\t\t}\n\t\t// record invite.\n\t\tinvitekey := string(caller) + \":\" + string(line)\n\t\tinvites.Set(invitekey, true)\n\t}\n}\n\nfunc GrantInvites(invites string) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// assert admin.\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tif caller != admin {\n\t\tpanic(\"unauthorized\")\n\t}\n\t// for each line...\n\tlines := strings.Split(invites, \"\\n\")\n\tfor _, line := range lines {\n\t\tif line == \"\" {\n\t\t\tcontinue // file bodies have a trailing newline.\n\t\t} else if strings.HasPrefix(line, `//`) {\n\t\t\tcontinue // comment\n\t\t}\n\t\t// parse name and invites.\n\t\tvar name string\n\t\tvar invites int\n\t\tparts := strings.Split(line, \":\")\n\t\tif len(parts) == 1 { // short for :1.\n\t\t\tname = parts[0]\n\t\t\tinvites = 1\n\t\t} else if len(parts) == 2 {\n\t\t\tname = parts[0]\n\t\t\tinvites_, err := strconv.Atoi(parts[1])\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\tinvites = int(invites_)\n\t\t} else {\n\t\t\tpanic(\"should not happen\")\n\t\t}\n\t\t// give invites.\n\t\tuserI, ok := name2User.Get(name)\n\t\tif !ok {\n\t\t\t// maybe address.\n\t\t\tuserI, ok = addr2User.Get(name)\n\t\t\tif !ok {\n\t\t\t\tpanic(\"invalid user \" + name)\n\t\t\t}\n\t\t}\n\t\tuser := userI.(*users.User)\n\t\tuser.Invites += invites\n\t}\n}\n\n// Any leftover fees go toward invitations.\nfunc SetMinFee(newMinFee int64) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// assert admin caller.\n\tcaller := std.GetCallerAt(2)\n\tif caller != admin {\n\t\tpanic(\"unauthorized\")\n\t}\n\t// update global variables.\n\tminFee = newMinFee\n}\n\n// This helps prevent fat finger accidents.\nfunc SetMaxFeeMultiple(newMaxFeeMult int64) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// assert admin caller.\n\tcaller := std.GetCallerAt(2)\n\tif caller != admin {\n\t\tpanic(\"unauthorized\")\n\t}\n\t// update global variables.\n\tmaxFeeMult = newMaxFeeMult\n}\n\n//----------------------------------------\n// Exposed public functions\n\nfunc GetUserByName(name string) *users.User {\n\tuserI, ok := name2User.Get(name)\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn userI.(*users.User)\n}\n\nfunc GetUserByAddress(addr std.Address) *users.User {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn userI.(*users.User)\n}\n\n// unlike GetUserByName, input must be \"@\" prefixed for names.\nfunc GetUserByAddressOrName(input users.AddressOrName) *users.User {\n\tname, isName := input.GetName()\n\tif isName {\n\t\treturn GetUserByName(name)\n\t}\n\treturn GetUserByAddress(std.Address(input))\n}\n\nfunc Resolve(input users.AddressOrName) std.Address {\n\tname, isName := input.GetName()\n\tif !isName {\n\t\treturn std.Address(input) // TODO check validity\n\t}\n\tuser := GetUserByName(name)\n\treturn user.Address\n}\n\n//----------------------------------------\n// Constants\n\n// NOTE: name length must be clearly distinguishable from a bech32 address.\nvar reName = regexp.MustCompile(`^[a-z]+[_a-z0-9]{5,16}$`)\n\n//----------------------------------------\n// Render main page\n\nfunc Render(path string) string {\n\tif path == \"\" {\n\t\treturn renderHome()\n\t} else if len(path) \u003e= 38 { // 39? 40?\n\t\tif path[:2] != \"g1\" {\n\t\t\treturn \"invalid address \" + path\n\t\t}\n\t\tuser := GetUserByAddress(std.Address(path))\n\t\tif user == nil {\n\t\t\t// TODO: display basic information about account.\n\t\t\treturn \"unknown address \" + path\n\t\t}\n\t\treturn user.Render()\n\t} else {\n\t\tuser := GetUserByName(path)\n\t\tif user == nil {\n\t\t\treturn \"unknown username \" + path\n\t\t}\n\t\treturn user.Render()\n\t}\n}\n\nfunc renderHome() string {\n\tdoc := \"\"\n\tname2User.Iterate(\"\", \"\", func(key string, value interface{}) bool {\n\t\tuser := value.(*users.User)\n\t\tdoc += \" * [\" + user.Name + \"](/r/demo/users:\" + user.Name + \")\\n\"\n\t\treturn false\n\t})\n\treturn doc\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1x07iXg/zN1UwmViPyUx87iEFXwAA5BzEP6jqWK62Hm"},"signature":"YKqmhlviIt40RCL+04Rulj1sYdpbOVwT21RO6qCKsu9rNLs33f64/TsBoHnR5ctg+RrOc903UIwcgEqRV3xRpQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"393734"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zuy4mj3p725k82eentww0e5vg00t6yg47h7adz","package":{"Name":"users","Path":"gno.land/r/quanghoangf/users","Files":[{"Name":"package.gno","Body":"package users\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/users\"\n)\n\n//----------------------------------------\n// State\n\nvar (\n\tadmin      std.Address = \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\"\n\tname2User  avl.Tree                    // Name -\u003e *users.User\n\taddr2User  avl.Tree                    // std.Address -\u003e *users.User\n\tinvites    avl.Tree                    // string(inviter+\":\"+invited) -\u003e true\n\tcounter    int                         // user id counter\n\tminFee     int64       = 200 * 1000000 // minimum gnot must be paid to register.\n\tmaxFeeMult int64       = 10            // maximum multiples of minFee accepted.\n)\n\n//----------------------------------------\n// Top-level functions\n\nfunc Register(inviter std.Address, name string, profile string) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// assert invited or paid.\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tsentCoins := std.GetOrigSend()\n\tminCoin := std.Coin{\"ugnot\", minFee}\n\tif inviter == \"\" {\n\t\t// banker := std.GetBanker(std.BankerTypeOrigSend)\n\t\tif len(sentCoins) == 1 \u0026\u0026 sentCoins[0].IsGTE(minCoin) {\n\t\t\tif sentCoins[0].Amount \u003e minFee*maxFeeMult {\n\t\t\t\tpanic(\"payment must not be greater than \" + strconv.Itoa(int(minFee*maxFeeMult)))\n\t\t\t} else {\n\t\t\t\t// ok\n\t\t\t}\n\t\t} else {\n\t\t\tpanic(\"payment must not be less than \" + strconv.Itoa(int(minFee)))\n\t\t}\n\t} else {\n\t\tinvitekey := inviter.String() + \":\" + caller.String()\n\t\t_, ok := invites.Get(invitekey)\n\t\tif !ok {\n\t\t\tpanic(\"invalid invitation\")\n\t\t}\n\t\tinvites.Remove(invitekey)\n\t}\n\t// assert not already registered.\n\t_, ok := name2User.Get(name)\n\tif ok {\n\t\tpanic(\"name already registered\")\n\t}\n\t_, ok = addr2User.Get(caller.String())\n\tif ok {\n\t\tpanic(\"address already registered\")\n\t}\n\t// assert name is valid.\n\tif !reName.MatchString(name) {\n\t\tpanic(\"invalid name: \" + name + \" (must be at least 6 characters, lowercase alphanumeric with underscore)\")\n\t}\n\t// remainder of fees go toward invites.\n\tinvites := int(0)\n\tif len(sentCoins) == 1 {\n\t\tif sentCoins[0].Denom == \"ugnot\" \u0026\u0026 sentCoins[0].Amount \u003e= minFee {\n\t\t\tinvites = int(sentCoins[0].Amount / minFee)\n\t\t\tif inviter == \"\" \u0026\u0026 invites \u003e 0 {\n\t\t\t\tinvites -= 1\n\t\t\t}\n\t\t}\n\t}\n\t// register.\n\tcounter++\n\tuser := \u0026users.User{\n\t\tAddress: caller,\n\t\tName:    name,\n\t\tProfile: profile,\n\t\tNumber:  counter,\n\t\tInvites: invites,\n\t\tInviter: inviter,\n\t}\n\tname2User.Set(name, user)\n\taddr2User.Set(caller.String(), user)\n}\n\nfunc Invite(invitee string) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// get caller/inviter.\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tlines := strings.Split(invitee, \"\\n\")\n\tif caller == admin {\n\t\t// nothing to do, all good\n\t} else {\n\t\t// ensure has invites.\n\t\tuserI, ok := addr2User.Get(caller.String())\n\t\tif !ok {\n\t\t\tpanic(\"user unknown\")\n\t\t}\n\t\tuser := userI.(*users.User)\n\t\tif user.Invites \u003c= 0 {\n\t\t\tpanic(\"user has no invite tokens\")\n\t\t}\n\t\tuser.Invites -= len(lines)\n\t\tif user.Invites \u003c 0 {\n\t\t\tpanic(\"user has insufficient invite tokens\")\n\t\t}\n\t}\n\t// for each line...\n\tfor _, line := range lines {\n\t\tif line == \"\" {\n\t\t\tcontinue // file bodies have a trailing newline.\n\t\t} else if strings.HasPrefix(line, `//`) {\n\t\t\tcontinue // comment\n\t\t}\n\t\t// record invite.\n\t\tinvitekey := string(caller) + \":\" + string(line)\n\t\tinvites.Set(invitekey, true)\n\t}\n}\n\nfunc GrantInvites(invites string) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// assert admin.\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tif caller != admin {\n\t\tpanic(\"unauthorized\")\n\t}\n\t// for each line...\n\tlines := strings.Split(invites, \"\\n\")\n\tfor _, line := range lines {\n\t\tif line == \"\" {\n\t\t\tcontinue // file bodies have a trailing newline.\n\t\t} else if strings.HasPrefix(line, `//`) {\n\t\t\tcontinue // comment\n\t\t}\n\t\t// parse name and invites.\n\t\tvar name string\n\t\tvar invites int\n\t\tparts := strings.Split(line, \":\")\n\t\tif len(parts) == 1 { // short for :1.\n\t\t\tname = parts[0]\n\t\t\tinvites = 1\n\t\t} else if len(parts) == 2 {\n\t\t\tname = parts[0]\n\t\t\tinvites_, err := strconv.Atoi(parts[1])\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\tinvites = int(invites_)\n\t\t} else {\n\t\t\tpanic(\"should not happen\")\n\t\t}\n\t\t// give invites.\n\t\tuserI, ok := name2User.Get(name)\n\t\tif !ok {\n\t\t\t// maybe address.\n\t\t\tuserI, ok = addr2User.Get(name)\n\t\t\tif !ok {\n\t\t\t\tpanic(\"invalid user \" + name)\n\t\t\t}\n\t\t}\n\t\tuser := userI.(*users.User)\n\t\tuser.Invites += invites\n\t}\n}\n\n// Any leftover fees go toward invitations.\nfunc SetMinFee(newMinFee int64) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// assert admin caller.\n\tcaller := std.GetCallerAt(2)\n\tif caller != admin {\n\t\tpanic(\"unauthorized\")\n\t}\n\t// update global variables.\n\tminFee = newMinFee\n}\n\n// This helps prevent fat finger accidents.\nfunc SetMaxFeeMultiple(newMaxFeeMult int64) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// assert admin caller.\n\tcaller := std.GetCallerAt(2)\n\tif caller != admin {\n\t\tpanic(\"unauthorized\")\n\t}\n\t// update global variables.\n\tmaxFeeMult = newMaxFeeMult\n}\n\n//----------------------------------------\n// Exposed public functions\n\nfunc GetUserByName(name string) *users.User {\n\tuserI, ok := name2User.Get(name)\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn userI.(*users.User)\n}\n\nfunc GetUserByAddress(addr std.Address) *users.User {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn userI.(*users.User)\n}\n\n// unlike GetUserByName, input must be \"@\" prefixed for names.\nfunc GetUserByAddressOrName(input users.AddressOrName) *users.User {\n\tname, isName := input.GetName()\n\tif isName {\n\t\treturn GetUserByName(name)\n\t}\n\treturn GetUserByAddress(std.Address(input))\n}\n\nfunc Resolve(input users.AddressOrName) std.Address {\n\tname, isName := input.GetName()\n\tif !isName {\n\t\treturn std.Address(input) // TODO check validity\n\t}\n\tuser := GetUserByName(name)\n\treturn user.Address\n}\n\n//----------------------------------------\n// Constants\n\n// NOTE: name length must be clearly distinguishable from a bech32 address.\nvar reName = regexp.MustCompile(`^[a-z]+[_a-z0-9]{5,16}$`)\n\n//----------------------------------------\n// Render main page\n\nfunc Render(path string) string {\n\tif path == \"\" {\n\t\treturn renderHome()\n\t} else if len(path) \u003e= 38 { // 39? 40?\n\t\tif path[:2] != \"g1\" {\n\t\t\treturn \"invalid address \" + path\n\t\t}\n\t\tuser := GetUserByAddress(std.Address(path))\n\t\tif user == nil {\n\t\t\t// TODO: display basic information about account.\n\t\t\treturn \"unknown address \" + path\n\t\t}\n\t\treturn user.Render()\n\t} else {\n\t\tuser := GetUserByName(path)\n\t\tif user == nil {\n\t\t\treturn \"unknown username \" + path\n\t\t}\n\t\treturn user.Render()\n\t}\n}\n\nfunc renderHome() string {\n\tdoc := \"\"\n\tname2User.Iterate(\"\", \"\", func(key string, value interface{}) bool {\n\t\tuser := value.(*users.User)\n\t\tdoc += \" * [\" + user.Name + \"](/r/demo/users:\" + user.Name + \")\\n\"\n\t\treturn false\n\t})\n\treturn doc\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1x07iXg/zN1UwmViPyUx87iEFXwAA5BzEP6jqWK62Hm"},"signature":"qHcbRUxwOO9hvmq2djPm0Av8XSkdyBsTwExSWZOh+GlIPESzmyLDz1pBfxKiRp111Hfs1xCzrkyqW3HIO1JO5A=="}],"memo":"Deployed through play.gno.land"},"blockNum":"393736"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","send":"","pkg_path":"gno.land/r/quanghoangf/hello","func":"Render","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1CWzHwZ/FjY00hsAQhl6pnpuR3ulUiXgkMx0Te14ATX"},"signature":"C90YNNa9dcdX4U5vsR8HDvehmIBBGNl1Mndzh3wO2esdKuoO2zYR2azNuMbqritnwYWVjDplD9E/FnTmctlPow=="}],"memo":"Called through gno.studio"},"blockNum":"393741"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"EEt7WdeKxmLJnIIjSZR8q5zwEDC585s5BlD+mBrSBRQb2SEw2CdZ31FMIB/ClqymUg99gz968itZC0KpCHx4Zw=="}],"memo":""},"blockNum":"393748"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/quanghoangf/hello","func":"Render","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7MWSLkjf+z/CYfMh6KVHEaHLDWpnfGBRDqFO81j1FRN"},"signature":"+qU4qZKxl3TB++W5APIgfl1Vysu63+BpONKwEyZmbWE+v8eqS8J8G5npTGDBbPKrnbX3FFkcu/NpZayhOZ7e2g=="}],"memo":"Called through gno.studio"},"blockNum":"393787"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/test6/tictacgno","func":"Play","args":["3"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7MWSLkjf+z/CYfMh6KVHEaHLDWpnfGBRDqFO81j1FRN"},"signature":"TPokic04voNuLDOdNR/y0Ip8wWnIsH0wT3Kx2CIK70daOMLYhK/b5rrji6yIEBN1450PLsWwwV4xsW/nN4NUPg=="}],"memo":"Called through gno.studio"},"blockNum":"393790"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zuy4mj3p725k82eentww0e5vg00t6yg47h7adz","package":{"Name":"counter","Path":"gno.land/r/quanghoangf/counter","Files":[{"Name":"package.gno","Body":"package counter\n\nimport (\n    \"gno.land/p/demo/ufmt\"\n)\n\nvar count int\n\nfunc Increment() {\n    count++\n}\n\nfunc Decrement() {\n    count--\n}\n\nfunc Render(_ string) string {\n    return ufmt.Sprintf(\"Count: %d\", count)\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1x07iXg/zN1UwmViPyUx87iEFXwAA5BzEP6jqWK62Hm"},"signature":"e1mmBmrk9xHO1JQcEQPEg/ZxbCqD55dUR2xR0Xs4qylCjp5E492gC28pX/ppYwPcyUjVGXt6spH4KSbV/2b0nA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"393802"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1qgtegddn7xcl5aq2ze8khnzxxaneh7vl2vyumq","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"+wo6lQs/Qv7xspDHCA8x7zgbmFHepRh6k08e5T0KNDAt/QM1IUBZUe8i0wvoqUSZIBQMWhnxx229Elgnm7+g1A=="}],"memo":""},"blockNum":"393816"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zuy4mj3p725k82eentww0e5vg00t6yg47h7adz","package":{"Name":"poll","Path":"gno.land/r/quanghoangf/poll","Files":[{"Name":"package.gno","Body":"package poll\n\nimport (\n\t\"bytes\"\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/poll\"\n\t\"gno.land/p/demo/seqid\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\n// state variables\nvar (\n\tpolls         *avl.Tree // id -\u003e Poll\n\tpollIDCounter seqid.ID\n)\n\nfunc init() {\n\tpolls = avl.NewTree()\n}\n\n// NewPoll - Creates a new Poll instance\nfunc NewPoll(title, description string, deadline int64) string {\n\t// get block height\n\tif deadline \u003c= std.GetHeight() {\n\t\tpanic(\"deadline has to be in the future\")\n\t}\n\n\t// Generate int\n\tid := pollIDCounter.Next().String()\n\tp := poll.NewPoll(title, description, deadline)\n\n\t// add new poll in avl tree\n\tpolls.Set(id, p)\n\n\treturn ufmt.Sprintf(\"Successfully created poll #%s!\", id)\n}\n\n// Vote - vote for a specific Poll\n// yes - true, no - false\nfunc Vote(id string, vote bool) string {\n\t// get txSender\n\ttxSender := std.GetOrigCaller()\n\n\t// get specific Poll from AVL tree\n\tpollRaw, exists := polls.Get(id)\n\n\tif !exists {\n\t\tpanic(\"poll with specified doesn't exist\")\n\t}\n\n\t// cast Poll into proper format\n\tpoll, _ := pollRaw.(*poll.Poll)\n\n\tvoted, _ := poll.HasVoted(txSender)\n\tif voted {\n\t\tpanic(\"you've already voted!\")\n\t}\n\n\tif poll.Deadline() \u003c= std.GetHeight() {\n\t\tpanic(\"voting for this poll is closed\")\n\t}\n\n\t// record vote\n\tpoll.Vote(txSender, vote)\n\n\t// update Poll in tree\n\tpolls.Set(id, poll)\n\n\tif vote == true {\n\t\treturn ufmt.Sprintf(\"Successfully voted YAY for poll #%s!\", id)\n\t}\n\treturn ufmt.Sprintf(\"Successfully voted NAY for poll #%s!\", id)\n}\n\nfunc Render(path string) string {\n\tvar b bytes.Buffer\n\n\tb.WriteString(\"# Polls!\\n\\n\")\n\n\tif polls.Size() == 0 {\n\t\tb.WriteString(\"### No active polls currently!\")\n\t\treturn b.String()\n\t}\n\tpolls.Iterate(\"\", \"\", func(key string, value interface{}) bool {\n\n\t\t// cast raw data from tree into Poll struct\n\t\tp := value.(*poll.Poll)\n\t\tddl := p.Deadline()\n\n\t\tyay, nay := p.VoteCount()\n\t\tyayPercent := 0\n\t\tnayPercent := 0\n\n\t\tif yay+nay != 0 {\n\t\t\tyayPercent = yay * 100 / (yay + nay)\n\t\t\tnayPercent = nay * 100 / (yay + nay)\n\t\t}\n\n\t\tb.WriteString(\n\t\t\tufmt.Sprintf(\n\t\t\t\t\"## Poll #%s: %s\\n\",\n\t\t\t\tkey, // poll ID\n\t\t\t\tp.Title(),\n\t\t\t),\n\t\t)\n\n\t\tdropdown := \"\u003cdetails\u003e\\n\u003csummary\u003ePoll details\u003c/summary\u003e\u003cbr\u003e\"\n\n\t\tb.WriteString(dropdown + \"Description: \" + p.Description())\n\n\t\tb.WriteString(\n\t\t\tufmt.Sprintf(\"\u003cbr\u003eVoting until block: %d\u003cbr\u003eCurrent vote count: %d\",\n\t\t\t\tp.Deadline(),\n\t\t\t\tp.Voters().Size()),\n\t\t)\n\n\t\tb.WriteString(\n\t\t\tufmt.Sprintf(\"\u003cbr\u003eYAY votes: %d (%d%%)\", yay, yayPercent),\n\t\t)\n\t\tb.WriteString(\n\t\t\tufmt.Sprintf(\"\u003cbr\u003eNAY votes: %d (%d%%)\u003c/details\u003e\", nay, nayPercent),\n\t\t)\n\n\t\tdropdown = \"\u003cbr\u003e\u003cdetails\u003e\\n\u003csummary\u003eVote details\u003c/summary\u003e\"\n\t\tb.WriteString(dropdown)\n\n\t\tp.Voters().Iterate(\"\", \"\", func(key string, value interface{}) bool {\n\n\t\t\tvoter := key\n\t\t\tvote := value.(bool)\n\n\t\t\tif vote == true {\n\t\t\t\tb.WriteString(\n\t\t\t\t\tufmt.Sprintf(\"\u003cbr\u003e%s voted YAY!\", voter),\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tb.WriteString(\n\t\t\t\t\tufmt.Sprintf(\"\u003cbr\u003e%s voted NAY!\", voter),\n\t\t\t\t)\n\t\t\t}\n\t\t\treturn false\n\t\t})\n\n\t\tb.WriteString(\"\u003c/details\u003e\\n\\n\")\n\t\treturn false\n\t})\n\treturn b.String()\n}\n\n// How-to: Write Simple Dapp"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1x07iXg/zN1UwmViPyUx87iEFXwAA5BzEP6jqWK62Hm"},"signature":"BcND/pFzKvNoE5cvu/TsvVIKSno2ucIWWnjdRks5kzo8UiOVQi2Z+21vDyx/B7iHrg6QJYx12MdmSFWDCE9o/Q=="}],"memo":"Deployed through play.gno.land"},"blockNum":"393840"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zuy4mj3p725k82eentww0e5vg00t6yg47h7adz","package":{"Name":"poll","Path":"gno.land/r/quanghoangf/poll","Files":[{"Name":"package.gno","Body":"package poll\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n// Main struct\ntype Poll struct {\n\ttitle       string\n\tdescription string\n\tdeadline    int64     // block height\n\tvoters      *avl.Tree // addr -\u003e yes / no (bool)\n}\n\n// Getters\nfunc (p Poll) Title() string {\n\treturn p.title\n}\n\nfunc (p Poll) Description() string {\n\treturn p.description\n}\n\nfunc (p Poll) Deadline() int64 {\n\treturn p.deadline\n}\n\nfunc (p Poll) Voters() *avl.Tree {\n\treturn p.voters\n}\n\n// Poll instance constructor\nfunc NewPoll(title, description string, deadline int64) *Poll {\n\treturn \u0026Poll{\n\t\ttitle:       title,\n\t\tdescription: description,\n\t\tdeadline:    deadline,\n\t\tvoters:      avl.NewTree(),\n\t}\n}\n\n// Vote Votes for a user\nfunc (p *Poll) Vote(voter std.Address, vote bool) {\n\tp.Voters().Set(voter.String(), vote)\n}\n\n// HasVoted vote: yes - true, no - false\nfunc (p *Poll) HasVoted(address std.Address) (bool, bool) {\n\tvote, exists := p.Voters().Get(address.String())\n\tif exists {\n\t\treturn true, vote.(bool)\n\t}\n\treturn false, false\n}\n\n// VoteCount Returns the number of yay \u0026 nay votes\nfunc (p Poll) VoteCount() (int, int) {\n\tvar yay int\n\n\tp.Voters().Iterate(\"\", \"\", func(key string, value interface{}) bool {\n\t\tvote := value.(bool)\n\t\tif vote == true {\n\t\t\tyay = yay + 1\n\t\t}\n\t})\n\treturn yay, p.Voters().Size() - yay\n}\n// How to: Write Simple Dapp"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1x07iXg/zN1UwmViPyUx87iEFXwAA5BzEP6jqWK62Hm"},"signature":"jlhVLXMaLnVR/FK4dqe+iNr9DVxgx1XpDj99MK8VhU5mDJwzPOlWn7Os+U4x8xRfHgrx1QIzW4zR7WTZc/D4Jg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"393842"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zuy4mj3p725k82eentww0e5vg00t6yg47h7adz","package":{"Name":"poll","Path":"gno.land/r/quanghoangf/poll","Files":[{"Name":"package.gno","Body":"package poll\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n// Main struct\ntype Poll struct {\n\ttitle       string\n\tdescription string\n\tdeadline    int64     // block height\n\tvoters      *avl.Tree // addr -\u003e yes / no (bool)\n}\n\n// Getters\nfunc (p Poll) Title() string {\n\treturn p.title\n}\n\nfunc (p Poll) Description() string {\n\treturn p.description\n}\n\nfunc (p Poll) Deadline() int64 {\n\treturn p.deadline\n}\n\nfunc (p Poll) Voters() *avl.Tree {\n\treturn p.voters\n}\n\n// Poll instance constructor\nfunc NewPoll(title, description string, deadline int64) *Poll {\n\treturn \u0026Poll{\n\t\ttitle:       title,\n\t\tdescription: description,\n\t\tdeadline:    deadline,\n\t\tvoters:      avl.NewTree(),\n\t}\n}\n\n// Vote Votes for a user\nfunc (p *Poll) Vote(voter std.Address, vote bool) {\n\tp.Voters().Set(voter.String(), vote)\n}\n\n// HasVoted vote: yes - true, no - false\nfunc (p *Poll) HasVoted(address std.Address) (bool, bool) {\n\tvote, exists := p.Voters().Get(address.String())\n\tif exists {\n\t\treturn true, vote.(bool)\n\t}\n\treturn false, false\n}\n\n// VoteCount Returns the number of yay \u0026 nay votes\nfunc (p Poll) VoteCount() (int, int) {\n\tvar yay int\n\n\tp.Voters().Iterate(\"\", \"\", func(key string, value interface{}) bool {\n\t\tvote := value.(bool)\n\t\tif vote == true {\n\t\t\tyay = yay + 1\n\t\t}\n\t})\n\treturn yay, p.Voters().Size() - yay\n}\n\n// How to: Write Simple Dapp\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1x07iXg/zN1UwmViPyUx87iEFXwAA5BzEP6jqWK62Hm"},"signature":"7ZUJJbE2vqWN58y/WzLx6CfgVSzTTiYO0+GEOw5UWfofcNk4Kyu7WV6DhEmVjxGsDVnrzeRapgZyoyfkFpw9hg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"393845"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zuy4mj3p725k82eentww0e5vg00t6yg47h7adz","package":{"Name":"poll","Path":"gno.land/p/quanghoangf/poll","Files":[{"Name":"package.gno","Body":"package poll\n\nimport (\n    \"std\"\n\n    \"gno.land/p/demo/avl\"\n)\n\n// Main struct\ntype Poll struct {\n    title       string\n    description string\n    deadline    int64     // block height\n    voters      *avl.Tree // addr -\u003e yes / no (bool)\n}\n\n// Getters\nfunc (p Poll) Title() string {\n    return p.title\n}\n\nfunc (p Poll) Description() string {\n    return p.description\n}\n\nfunc (p Poll) Deadline() int64 {\n    return p.deadline\n}\n\nfunc (p Poll) Voters() *avl.Tree {\n    return p.voters\n}\n\n// Poll instance constructor\nfunc NewPoll(title, description string, deadline int64) *Poll {\n    return \u0026Poll{\n        title:       title,\n        description: description,\n        deadline:    deadline,\n        voters:      avl.NewTree(),\n    }\n}\n\n// Vote Votes for a user\nfunc (p *Poll) Vote(voter std.Address, vote bool) {\n    p.Voters().Set(voter.String(), vote)\n}\n\n// HasVoted vote: yes - true, no - false\nfunc (p *Poll) HasVoted(address std.Address) (bool, bool) {\n    vote, exists := p.Voters().Get(address.String())\n    if exists {\n        return true, vote.(bool)\n    }\n    return false, false\n}\n\n// VoteCount Returns the number of yay \u0026 nay votes\nfunc (p Poll) VoteCount() (int, int) {\n    var yay int\n\n    p.Voters().Iterate(\"\", \"\", func(key string, value interface{}) bool {\n        vote := value.(bool)\n        if vote == true {\n            yay = yay + 1\n        }\n    })\n    return yay, p.Voters().Size() - yay\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1x07iXg/zN1UwmViPyUx87iEFXwAA5BzEP6jqWK62Hm"},"signature":"NNJvkUX4JWc3RmMRiuakUQ+tEyHwFkx287RjUIwonhZtyBEY07EsH30jtzftDe95G2IuUPgiEMMtJpg1u1rRXw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"393848"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zuy4mj3p725k82eentww0e5vg00t6yg47h7adz","package":{"Name":"poll","Path":"gno.land/r/quanghoangf/poll","Files":[{"Name":"package.gno","Body":"package poll\n\nimport (\n    \"bytes\"\n    \"std\"\n\n    \"gno.land/p/demo/avl\"\n    \"gno.land/p/demo/poll\"\n    \"gno.land/p/demo/seqid\"\n    \"gno.land/p/demo/ufmt\"\n)\n\n// state variables\nvar (\n    polls         *avl.Tree // id -\u003e Polls\n    pollIDCounter seqid.ID\n)\n\nfunc init() {\n    polls = avl.NewTree()\n}\n\n// NewPoll - Creates a new Poll instance\nfunc NewPoll(title, description string, deadline int64) string {\n    // get block height\n    if deadline \u003c= std.GetHeight() {\n        panic(\"deadline has to be in the future\")\n    }\n\n    // Generate int\n    id := pollIDCounter.Next().String()\n    p := poll.NewPoll(title, description, deadline)\n\n    // add new poll in avl tree\n    polls.Set(id, p)\n\n    return ufmt.Sprintf(\"Successfully created poll #%s!\", id)\n}\n\n// Vote - vote for a specific Poll\n// yes - true, no - false\nfunc Vote(id string, vote bool) string {\n    // get txSender\n    txSender := std.GetOrigCaller()\n\n    // get specific Poll from AVL tree\n    pollRaw, exists := polls.Get(id)\n\n    if !exists {\n        panic(\"poll with specified doesn't exist\")\n    }\n\n    // cast Poll into proper format\n    poll, _ := pollRaw.(*poll.Poll)\n\n    voted, _ := poll.HasVoted(txSender)\n    if voted {\n        panic(\"you've already voted!\")\n    }\n\n    if poll.Deadline() \u003c= std.GetHeight() {\n        panic(\"voting for this poll is closed\")\n    }\n\n    // record vote\n    poll.Vote(txSender, vote)\n\n    // update Poll in tree\n    polls.Set(id, poll)\n\n    if vote == true {\n        return ufmt.Sprintf(\"Successfully voted YAY for poll #%s!\", id)\n    }\n    return ufmt.Sprintf(\"Successfully voted NAY for poll #%s!\", id)\n}\n\nfunc Render(path string) string {\n    var b bytes.Buffer\n\n    b.WriteString(\"# Polls!\\n\\n\")\n\n    if polls.Size() == 0 {\n        b.WriteString(\"### No active polls currently!\")\n        return b.String()\n    }\n    polls.Iterate(\"\", \"\", func(key string, value interface{}) bool {\n\n        // cast raw data from tree into Poll struct\n        p := value.(*poll.Poll)\n        ddl := p.Deadline()\n\n        yay, nay := p.VoteCount()\n        yayPercent := 0\n        nayPercent := 0\n\n        if yay+nay != 0 {\n            yayPercent = yay * 100 / (yay + nay)\n            nayPercent = nay * 100 / (yay + nay)\n        }\n\n        b.WriteString(\n            ufmt.Sprintf(\n                \"## Poll #%s: %s\\n\",\n                key, // poll ID\n                p.Title(),\n            ),\n        )\n\n        dropdown := \"\u003cdetails\u003e\\n\u003csummary\u003ePoll details\u003c/summary\u003e\u003cbr\u003e\"\n\n        b.WriteString(dropdown + \"Description: \" + p.Description())\n\n        b.WriteString(\n            ufmt.Sprintf(\"\u003cbr\u003eVoting until block: %d\u003cbr\u003eCurrent vote count: %d\",\n                p.Deadline(),\n                p.Voters().Size()),\n        )\n\n        b.WriteString(\n            ufmt.Sprintf(\"\u003cbr\u003eYAY votes: %d (%d%%)\", yay, yayPercent),\n        )\n        b.WriteString(\n            ufmt.Sprintf(\"\u003cbr\u003eNAY votes: %d (%d%%)\u003c/details\u003e\", nay, nayPercent),\n        )\n\n        dropdown = \"\u003cbr\u003e\u003cdetails\u003e\\n\u003csummary\u003eVote details\u003c/summary\u003e\"\n        b.WriteString(dropdown)\n\n        p.Voters().Iterate(\"\", \"\", func(key string, value interface{}) bool {\n\n            voter := key\n            vote := value.(bool)\n\n            if vote == true {\n                b.WriteString(\n                    ufmt.Sprintf(\"\u003cbr\u003e%s voted YAY!\", voter),\n                )\n            } else {\n                b.WriteString(\n                    ufmt.Sprintf(\"\u003cbr\u003e%s voted NAY!\", voter),\n                )\n            }\n            return false\n        })\n\n        b.WriteString(\"\u003c/details\u003e\\n\\n\")\n        return false\n    })\n    return b.String()\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1x07iXg/zN1UwmViPyUx87iEFXwAA5BzEP6jqWK62Hm"},"signature":"v8QJx7Nd4iRJrVRg4UPswr+CVD/SKCamQ+miDK0Yv4sXZgGihAuhIAbZDkdEqfXZnqfUL9HW0fAb6d+wIeH3DQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"393851"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g18lj5pgadp3y98wawweavle2r0677w9z25zmnm0","send":"","pkg_path":"gno.land/r/gnostudio/gnoyourdate","func":"Vote","args":["false","true","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7F3+SG0EvfD9EoMgxL8VSOFIb+XlP7eI0SIbyQYrAmF"},"signature":"shzctkGi0uOG2vqQSNB/3Rxhm4DOLrwinjlYz4oxlrkncY9mUtSCrYIDi451I8wWK8Qb9xnOMkK3qmPRO2klDw=="}],"memo":"Called through gno.studio"},"blockNum":"393854"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zuy4mj3p725k82eentww0e5vg00t6yg47h7adz","package":{"Name":"poll","Path":"gno.land/r/quanhoangf/poll","Files":[{"Name":"package.gno","Body":"package poll\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\n// Main struct\ntype Poll struct {\n\ttitle       string\n\tdescription string\n\tdeadline    int64     // block height\n\tvoters      *avl.Tree // addr -\u003e yes / no (bool)\n}\n\n// Getters\nfunc (p Poll) Title() string {\n\treturn p.title\n}\n\nfunc (p Poll) Description() string {\n\treturn p.description\n}\n\nfunc (p Poll) Deadline() int64 {\n\treturn p.deadline\n}\n\nfunc (p Poll) Voters() *avl.Tree {\n\treturn p.voters\n}\n\n// Poll instance constructor\nfunc NewPoll(title, description string, deadline int64) *Poll {\n\treturn \u0026Poll{\n\t\ttitle:       title,\n\t\tdescription: description,\n\t\tdeadline:    deadline,\n\t\tvoters:      avl.NewTree(),\n\t}\n}\n\n// Vote Votes for a user\nfunc (p *Poll) Vote(voter std.Address, vote bool) {\n\tp.Voters().Set(voter.String(), vote)\n}\n\n// HasVoted vote: yes - true, no - false\nfunc (p *Poll) HasVoted(address std.Address) (bool, bool) {\n\tvote, exists := p.Voters().Get(address.String())\n\tif exists {\n\t\treturn true, vote.(bool)\n\t}\n\treturn false, false\n}\n\n// VoteCount Returns the number of yay \u0026 nay votes\nfunc (p Poll) VoteCount() (int, int) {\n\tvar yay int\n\n\tp.Voters().Iterate(\"\", \"\", func(key string, value interface{}) bool {\n\t\tvote := value.(bool)\n\t\tif vote == true {\n\t\t\tyay = yay + 1\n\t\t}\n\t})\n\treturn yay, p.Voters().Size() - yay\n}\n// How to: Write Simple Dapp"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1x07iXg/zN1UwmViPyUx87iEFXwAA5BzEP6jqWK62Hm"},"signature":"Z00HM2vo0qb583I6Q68yvLrfqePqTS/i14mYTmSjhlNiIUGa7MJeTeP7+VPfp6cU27Su77N3a/Q+wmJFyUQqIg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"393856"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zuy4mj3p725k82eentww0e5vg00t6yg47h7adz","package":{"Name":"mytoken","Path":"gno.land/r/quanghoangf/mytoken","Files":[{"Name":"package.gno","Body":"package mytoken\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tmytoken *grc20.AdminToken\n\tadmin   std.Address\n)\n\n// init is called once at time of deployment\nfunc init() {\n\t// Set deployer of Realm to admin\n\tadmin = std.PrevRealm().Addr()\n\n\t// Set token name, symbol and number of decimals\n\tmytoken = grc20.NewAdminToken(\"My Token\", \"TKN\", 4)\n\n\t// Mint 1 million tokens to admin\n\tmytoken.Mint(admin, 1000000*10000)\n}\n\nfunc TotalSupply() uint64 {\n\treturn mytoken.TotalSupply()\n}\n\nfunc Decimals() uint {\n\treturn mytoken.GetDecimals()\n}\n\nfunc BalanceOf(account std.Address) uint64 {\n\tbalance, err := mytoken.BalanceOf(account)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc Allowance(owner, spender std.Address) uint64 {\n\tallowance, err := mytoken.Allowance(owner, spender)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn allowance\n}\n\nfunc Transfer(recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Transfer(caller, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Approve(spender std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Approve(caller, spender, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(sender, recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"transfer amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.TransferFrom(caller, from, to, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Mint(address std.Address, amount uint64) {\n\tassertIsAdmin(std.PrevRealm().Addr())\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"mint amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.Mint(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(address std.Address, amount uint64) {\n\tassertIsAdmin(std.PrevRealm().Addr())\n\n\tif amount \u003c= 0 {\n\t\tpanic(\"burn amount must be greater than zero\")\n\t}\n\n\tif err := mytoken.Burn(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn mytoken.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := std.Address(parts[1])\n\t\tbalance, _ := mytoken.BalanceOf(owner)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// How-to: Create a GRC20 Token"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1x07iXg/zN1UwmViPyUx87iEFXwAA5BzEP6jqWK62Hm"},"signature":"9JY9/nWbyuNnE6I4Pm2YIXZV8HBscilMewOBGevcpj9/ZfSnsZeeTkmwJ7L03Rhx1uMCzBGnjOQC69E7hc6VkA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"393858"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g19kxd33qkmp5pmn4dtt60l79n8watk7d33xzq45","send":"","pkg_path":"gno.land/r/game/tictacgno_2","func":"Play","args":["7"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AubLvndFsvt0ItmBjF95ARQQg7paon/WiHxY+YfL/mR+"},"signature":"rxVnWTaFdMRyBMgfwn2jreMOVSJXmKbk3e81nDgPFk8AiGWeRYSHKSCSifGOrKvUymCyr2opJvojR4b1M221dg=="}],"memo":"Called through gno.studio"},"blockNum":"393922"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1zuy4mj3p725k82eentww0e5vg00t6yg47h7adz","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"AXaXX4QKmCHzewIx3yE0do/za8OmNBy+yjBtWB0TYYpHbHnglf9/LziI4+NB4+RfCdgOMlMVaYAHaDUcqiIbkw=="}],"memo":""},"blockNum":"393959"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zuy4mj3p725k82eentww0e5vg00t6yg47h7adz","package":{"Name":"users","Path":"gno.land/r/quanghoangf/users","Files":[{"Name":"package.gno","Body":"package users\n\nimport (\n\t\"regexp\"\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/users\"\n)\n\n//----------------------------------------\n// State\n\nvar (\n\tadmin      std.Address = \"g1us8428u2a5satrlxzagqqa5m6vmuze025anjlj\"\n\tname2User  avl.Tree                    // Name -\u003e *users.User\n\taddr2User  avl.Tree                    // std.Address -\u003e *users.User\n\tinvites    avl.Tree                    // string(inviter+\":\"+invited) -\u003e true\n\tcounter    int                         // user id counter\n\tminFee     int64       = 200 * 1000000 // minimum gnot must be paid to register.\n\tmaxFeeMult int64       = 10            // maximum multiples of minFee accepted.\n)\n\n//----------------------------------------\n// Top-level functions\n\nfunc Register(inviter std.Address, name string, profile string) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// assert invited or paid.\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tsentCoins := std.GetOrigSend()\n\tminCoin := std.Coin{\"ugnot\", minFee}\n\tif inviter == \"\" {\n\t\t// banker := std.GetBanker(std.BankerTypeOrigSend)\n\t\tif len(sentCoins) == 1 \u0026\u0026 sentCoins[0].IsGTE(minCoin) {\n\t\t\tif sentCoins[0].Amount \u003e minFee*maxFeeMult {\n\t\t\t\tpanic(\"payment must not be greater than \" + strconv.Itoa(int(minFee*maxFeeMult)))\n\t\t\t} else {\n\t\t\t\t// ok\n\t\t\t}\n\t\t} else {\n\t\t\tpanic(\"payment must not be less than \" + strconv.Itoa(int(minFee)))\n\t\t}\n\t} else {\n\t\tinvitekey := inviter.String() + \":\" + caller.String()\n\t\t_, ok := invites.Get(invitekey)\n\t\tif !ok {\n\t\t\tpanic(\"invalid invitation\")\n\t\t}\n\t\tinvites.Remove(invitekey)\n\t}\n\t// assert not already registered.\n\t_, ok := name2User.Get(name)\n\tif ok {\n\t\tpanic(\"name already registered\")\n\t}\n\t_, ok = addr2User.Get(caller.String())\n\tif ok {\n\t\tpanic(\"address already registered\")\n\t}\n\t// assert name is valid.\n\tif !reName.MatchString(name) {\n\t\tpanic(\"invalid name: \" + name + \" (must be at least 6 characters, lowercase alphanumeric with underscore)\")\n\t}\n\t// remainder of fees go toward invites.\n\tinvites := int(0)\n\tif len(sentCoins) == 1 {\n\t\tif sentCoins[0].Denom == \"ugnot\" \u0026\u0026 sentCoins[0].Amount \u003e= minFee {\n\t\t\tinvites = int(sentCoins[0].Amount / minFee)\n\t\t\tif inviter == \"\" \u0026\u0026 invites \u003e 0 {\n\t\t\t\tinvites -= 1\n\t\t\t}\n\t\t}\n\t}\n\t// register.\n\tcounter++\n\tuser := \u0026users.User{\n\t\tAddress: caller,\n\t\tName:    name,\n\t\tProfile: profile,\n\t\tNumber:  counter,\n\t\tInvites: invites,\n\t\tInviter: inviter,\n\t}\n\tname2User.Set(name, user)\n\taddr2User.Set(caller.String(), user)\n}\n\nfunc Invite(invitee string) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// get caller/inviter.\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tlines := strings.Split(invitee, \"\\n\")\n\tif caller == admin {\n\t\t// nothing to do, all good\n\t} else {\n\t\t// ensure has invites.\n\t\tuserI, ok := addr2User.Get(caller.String())\n\t\tif !ok {\n\t\t\tpanic(\"user unknown\")\n\t\t}\n\t\tuser := userI.(*users.User)\n\t\tif user.Invites \u003c= 0 {\n\t\t\tpanic(\"user has no invite tokens\")\n\t\t}\n\t\tuser.Invites -= len(lines)\n\t\tif user.Invites \u003c 0 {\n\t\t\tpanic(\"user has insufficient invite tokens\")\n\t\t}\n\t}\n\t// for each line...\n\tfor _, line := range lines {\n\t\tif line == \"\" {\n\t\t\tcontinue // file bodies have a trailing newline.\n\t\t} else if strings.HasPrefix(line, `//`) {\n\t\t\tcontinue // comment\n\t\t}\n\t\t// record invite.\n\t\tinvitekey := string(caller) + \":\" + string(line)\n\t\tinvites.Set(invitekey, true)\n\t}\n}\n\nfunc GrantInvites(invites string) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// assert admin.\n\tcaller := std.GetCallerAt(2)\n\tif caller != std.GetOrigCaller() {\n\t\tpanic(\"should not happen\") // because std.AssertOrigCall().\n\t}\n\tif caller != admin {\n\t\tpanic(\"unauthorized\")\n\t}\n\t// for each line...\n\tlines := strings.Split(invites, \"\\n\")\n\tfor _, line := range lines {\n\t\tif line == \"\" {\n\t\t\tcontinue // file bodies have a trailing newline.\n\t\t} else if strings.HasPrefix(line, `//`) {\n\t\t\tcontinue // comment\n\t\t}\n\t\t// parse name and invites.\n\t\tvar name string\n\t\tvar invites int\n\t\tparts := strings.Split(line, \":\")\n\t\tif len(parts) == 1 { // short for :1.\n\t\t\tname = parts[0]\n\t\t\tinvites = 1\n\t\t} else if len(parts) == 2 {\n\t\t\tname = parts[0]\n\t\t\tinvites_, err := strconv.Atoi(parts[1])\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\tinvites = int(invites_)\n\t\t} else {\n\t\t\tpanic(\"should not happen\")\n\t\t}\n\t\t// give invites.\n\t\tuserI, ok := name2User.Get(name)\n\t\tif !ok {\n\t\t\t// maybe address.\n\t\t\tuserI, ok = addr2User.Get(name)\n\t\t\tif !ok {\n\t\t\t\tpanic(\"invalid user \" + name)\n\t\t\t}\n\t\t}\n\t\tuser := userI.(*users.User)\n\t\tuser.Invites += invites\n\t}\n}\n\n// Any leftover fees go toward invitations.\nfunc SetMinFee(newMinFee int64) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// assert admin caller.\n\tcaller := std.GetCallerAt(2)\n\tif caller != admin {\n\t\tpanic(\"unauthorized\")\n\t}\n\t// update global variables.\n\tminFee = newMinFee\n}\n\n// This helps prevent fat finger accidents.\nfunc SetMaxFeeMultiple(newMaxFeeMult int64) {\n\t// assert CallTx call.\n\tstd.AssertOriginCall()\n\t// assert admin caller.\n\tcaller := std.GetCallerAt(2)\n\tif caller != admin {\n\t\tpanic(\"unauthorized\")\n\t}\n\t// update global variables.\n\tmaxFeeMult = newMaxFeeMult\n}\n\n//----------------------------------------\n// Exposed public functions\n\nfunc GetUserByName(name string) *users.User {\n\tuserI, ok := name2User.Get(name)\n\tif !ok {\n\t\treturn nil\n\t}\n\tstd.Emit(\"TestEmit\", \"name\", name)\n\treturn userI.(*users.User)\n}\n\nfunc GetUserByAddress(addr std.Address) *users.User {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\treturn userI.(*users.User)\n}\n\n// unlike GetUserByName, input must be \"@\" prefixed for names.\nfunc GetUserByAddressOrName(input users.AddressOrName) *users.User {\n\tname, isName := input.GetName()\n\tif isName {\n\t\treturn GetUserByName(name)\n\t}\n\treturn GetUserByAddress(std.Address(input))\n}\n\nfunc Resolve(input users.AddressOrName) std.Address {\n\tname, isName := input.GetName()\n\tif !isName {\n\t\treturn std.Address(input) // TODO check validity\n\t}\n\tuser := GetUserByName(name)\n\treturn user.Address\n}\n\n//----------------------------------------\n// Constants\n\n// NOTE: name length must be clearly distinguishable from a bech32 address.\nvar reName = regexp.MustCompile(`^[a-z]+[_a-z0-9]{5,16}$`)\n\n//----------------------------------------\n// Render main page\n\nfunc Render(path string) string {\n\tif path == \"\" {\n\t\treturn renderHome()\n\t} else if len(path) \u003e= 38 { // 39? 40?\n\t\tif path[:2] != \"g1\" {\n\t\t\treturn \"invalid address \" + path\n\t\t}\n\t\tuser := GetUserByAddress(std.Address(path))\n\t\tif user == nil {\n\t\t\t// TODO: display basic information about account.\n\t\t\treturn \"unknown address \" + path\n\t\t}\n\t\treturn user.Render()\n\t} else {\n\t\tuser := GetUserByName(path)\n\t\tif user == nil {\n\t\t\treturn \"unknown username \" + path\n\t\t}\n\t\treturn user.Render()\n\t}\n}\n\nfunc renderHome() string {\n\tdoc := \"\"\n\tname2User.Iterate(\"\", \"\", func(key string, value interface{}) bool {\n\t\tuser := value.(*users.User)\n\t\tdoc += \" * [\" + user.Name + \"](/r/demo/users:\" + user.Name + \")\\n\"\n\t\treturn false\n\t})\n\treturn doc\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1x07iXg/zN1UwmViPyUx87iEFXwAA5BzEP6jqWK62Hm"},"signature":"TPecWWV8P4JUeAqTg3tN1y+TIoeEnfyekZdi2ZHYCbdwQ+yL0LU9e8da13Hhugc3Q88bFd/6/fFb6UvB9n8+Ug=="}],"memo":"Deployed through play.gno.land"},"blockNum":"393964"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1zuy4mj3p725k82eentww0e5vg00t6yg47h7adz","package":{"Name":"counter","Path":"gno.land/r/quanghoangf/counter","Files":[{"Name":"package_test.gno","Body":"package counter\n\nimport \"testing\"\n\nfunc TestCounter_Increment(t *testing.T) {\n\t// Reset the value\n\tcount = 0\n\n\t// Verify the initial value is 0\n\tif count != 0 {\n\t\tt.Fatalf(\"initial value != 0\")\n\t}\n\n\t// Increment the value\n\tIncrement()\n\n\t// Verify the initial value is 1\n\tif count != 1 {\n\t\tt.Fatalf(\"initial value != 1\")\n\t}\n}\n\nfunc TestCounter_Decrement(t *testing.T) {\n\t// Reset the value\n\tcount = 0\n\n\t// Verify the initial value is 0\n\tif count != 0 {\n\t\tt.Fatalf(\"initial value != 0\")\n\t}\n\n\t// Decrement the value\n\tDecrement()\n\n\t// Verify the initial value is 1\n\tif count != -1 {\n\t\tt.Fatalf(\"initial value != -1\")\n\t}\n}\n\nfunc TestCounter_Render(t *testing.T) {\n\t// Reset the value\n\tcount = 0\n\n\t// Verify the Render output\n\tif Render(\"\") != \"Count: 0\" {\n\t\tt.Fatalf(\"invalid Render value\")\n\t}\n}\n\n// How to: Deploy using Gno Playground"},{"Name":"package.gno","Body":"package counter\n\nimport (\n\t\"std\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar count int\n\nfunc Increment() {\n\tcount++\n\tstd.Emit(\"TestEmit\", \"Increment\", count)\n}\n\nfunc Decrement() {\n\tcount--\n\tstd.Emit(\"TestEmit\", \"Decrement\", count)\n}\n\nfunc Render(_ string) string {\n\treturn ufmt.Sprintf(\"Count: %d\", count)\n}\n\n// How to: Deploy using Gno Playground"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1x07iXg/zN1UwmViPyUx87iEFXwAA5BzEP6jqWK62Hm"},"signature":"IESmPDuUeYaBD9aMV8gqw6/F/4YkgHQmwHTUlOlcvTtNNmQ0GdKm18z1WB5+EHhcxcdCSixwgRSZUkNDWrtepw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"393983"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1hrfvdh7jdvnlxpk2y20tp3scj9jqal3zzu7wjz","package":{"Name":"hello","Path":"gno.land/r/demo/hello","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7UerjwiIlPJEvsPj92M2g1R3znO3Cfdeo3PBR4fmlQp"},"signature":"m8+PlOE41H0kXwnQz20oRwMHdbirJI8UVZwZ7VswhAsVt16/pM4AQFA7/9ZUih8L4MZhrdeTGQeR+7ahvzgutA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"393988"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1hrfvdh7jdvnlxpk2y20tp3scj9jqal3zzu7wjz","package":{"Name":"hellognopher","Path":"gno.land/r/demo/hellognopher","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello gnopher, we're here!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7UerjwiIlPJEvsPj92M2g1R3znO3Cfdeo3PBR4fmlQp"},"signature":"vF8Lg0ctoubJMrMW2cDn4LyrbWMgW55cvFaGmZRQO6sGTNioUnoSVcbHPYWSJ2dIpzhJx35cT30Ynmvi+kA6Cw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"393991"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1hrfvdh7jdvnlxpk2y20tp3scj9jqal3zzu7wjz","package":{"Name":"hellognopher","Path":"gno.land/r/demo/hellognopher","Files":[{"Name":"package.gno","Body":"package hellognopher\n\nfunc Render(path string) string {\n  return \"Hello gnopher, we're here!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7UerjwiIlPJEvsPj92M2g1R3znO3Cfdeo3PBR4fmlQp"},"signature":"tcBaAqXZh4DLkII320XuabqnytaYvv2mF41Xw9EmbcYamUfFioOivV6/UMv2vd7Gs6JZH+FtSZi5738MMpNq3Q=="}],"memo":"Deployed through play.gno.land"},"blockNum":"393993"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/myhellow/hello","func":"HelloWorld","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"19UrTVJ3vxc3jLLIC2FwtKMT+tX5vqVga3PB3oEmX9N3ynzJPUTLUVeg+h1hAtds9g7Buf9bOzG4uUaDkvkGBg=="}],"memo":"Called through gno.studio"},"blockNum":"394065"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1eahvkxg06c9euu74u2f7m5za6rvtc5x4u4tfxq","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"KwFrcqW7TQfAdfMKQqXqxyEbW/tfonVVNAJTNHUS6MkavfwIse9CVY32zfzXC96jNe8nxU5uSEkKWdGPoi9V9w=="}],"memo":""},"blockNum":"394123"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1eahvkxg06c9euu74u2f7m5za6rvtc5x4u4tfxq","send":"","pkg_path":"gno.land/r/gnostudio/gnoyourdate","func":"Vote","args":["false","false","false","true"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuJvij0Oir8qrB4cTJ3EelMxqXW6WbbbYs0vHXYmVz4i"},"signature":"/BQCYMCh1dSN9ZegDhSqejWJVF6FpzMwdANUgImHffBNV/FQkQMMasj6sWKqZYple2HQrSskWbbVhantGivR5A=="}],"memo":"Called through gno.studio"},"blockNum":"394125"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1eahvkxg06c9euu74u2f7m5za6rvtc5x4u4tfxq","send":"","pkg_path":"gno.land/r/gnostudio/gnoyourdate","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuJvij0Oir8qrB4cTJ3EelMxqXW6WbbbYs0vHXYmVz4i"},"signature":"jnzwCpe4QjVq94vQuasXDW7ncJ4DgOl7t0GOzqkKybh2YoJuVtyaZOFTZkJaAh6er4nwsPO2O8cAPJXpgqQwBQ=="}],"memo":"Called through gno.studio"},"blockNum":"394127"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1rck0vsjgm2nefcmgzg627lpjx3u0wtvajtarz9","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"igeeGKhUxWLVR8dRQpVXp4pLjYThQffwwSH8jB+7iXA9Nam2zzkQ0PEkHoBgLpSzfzRRoBbMvxm8MvPQaeAMyw=="}],"memo":""},"blockNum":"394130"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1rck0vsjgm2nefcmgzg627lpjx3u0wtvajtarz9","send":"","pkg_path":"gno.land/r/gnostudio/gnoyourdate","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AwoUqyVIEO26l5HRABfB8JfkcF3k7Wl2ftN7XEVahWW+"},"signature":"70mtMIqgqyWYb8h9dEsTj2qCo3gPYk1viJiEjE29ocZS130+xr1fVs0TAXXGqJGQOrm6axQSEPPt+801aHvNoA=="}],"memo":"Called through gno.studio"},"blockNum":"394132"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"zaIbsAdAZaWbCCDlGqsIGU5yi+bRVGhDog1bm9mmpCR4hXwzqa42QBW2Sf6+DFwT5os0IgIfzHBvGqPpGSIa2g=="}],"memo":""},"blockNum":"394198"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/boom/boom","func":"Render","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"JwVXP7Ktw67gZKYI3kNDVy2aLXW9WBrUeFRmKDzqEHZ24JtVO9tmxANKqgoIdzVKKsUuSZwc9KwBSSsiyFizSA=="}],"memo":"Called through gno.studio"},"blockNum":"394200"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g19uxvrxvxjn82wpcsreyd7rxz5v3r2lewvk50kj","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"JW3nBkT8T5s0SO8vemQfERDgN60zBZbUdDY5yNSYB81qiFf5Z0e07qkbSR9qOI5yVscP0ZTxj3/v1zhKxpo1rA=="}],"memo":""},"blockNum":"394277"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g19uxvrxvxjn82wpcsreyd7rxz5v3r2lewvk50kj","send":"","pkg_path":"gno.land/r/gnostudio/feedback_v1","func":"AddModerator","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvrDnIvhifLq9OLUNN5LekI5ud9BkH6frLv9MVgAAHyF"},"signature":"bUi40t3aQvkYCkya9hZcp8L3gBo8aDQqpEGP3LxczwEneSSw4lG/kbR09R1NwxQtd6SiRiQkKcLXy3UXkouStQ=="}],"memo":"Called through gno.studio"},"blockNum":"394279"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g19uxvrxvxjn82wpcsreyd7rxz5v3r2lewvk50kj","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"+Ea3hURDR13WRF1OsQrrHmOFmCbYgHrUCJsClCFX7QRET1OjZSvpzbu6RAP0I6XkilBPRT8ljtfC8ec2IFRUyg=="}],"memo":""},"blockNum":"394281"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g19uxvrxvxjn82wpcsreyd7rxz5v3r2lewvk50kj","send":"","pkg_path":"gno.land/r/gnostudio/gnoyourdate","func":"DeprecateRealm","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvrDnIvhifLq9OLUNN5LekI5ud9BkH6frLv9MVgAAHyF"},"signature":"lHlT8srbUGokX9I0rt7PrOw6wIPnJlnhCU8m1N7tTNtS8Vj8H9gRkwJkvS1WJEXjQNCOVDV1zvTEnTXHNHa46Q=="}],"memo":"Called through gno.studio"},"blockNum":"394283"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g19uxvrxvxjn82wpcsreyd7rxz5v3r2lewvk50kj","send":"","pkg_path":"gno.land/r/gnostudio/feedback_v1","func":"AddModerator","args":["w,sd"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvrDnIvhifLq9OLUNN5LekI5ud9BkH6frLv9MVgAAHyF"},"signature":"4yh3cZ8XiBbVK1JKnve+O/TvAFdlHXL+tDnayccVDRNdQuPFjQbNiVApm7kiLx9Vh3rsBMNib6YcdCE3qiwQGg=="}],"memo":"Called through gno.studio"},"blockNum":"394287"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g19uxvrxvxjn82wpcsreyd7rxz5v3r2lewvk50kj","send":"","pkg_path":"gno.land/r/gnostudio/feedback_v1","func":"UnlockRealm","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvrDnIvhifLq9OLUNN5LekI5ud9BkH6frLv9MVgAAHyF"},"signature":"s79fq4AonhE6baJmX7FNCNHRF5iOMo5C2EwOpZ05nxtZ/IPZkGB0cKLjoBtnnETa533yDdLEBYepKKJlhLjc8A=="}],"memo":"Called through gno.studio"},"blockNum":"394290"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g19uxvrxvxjn82wpcsreyd7rxz5v3r2lewvk50kj","send":"","pkg_path":"gno.land/r/demo/users","func":"Register","args":["g19uxvrxvxjn82wpcsreyd7rxz5v3r2lewvk50kj","12","asb"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvrDnIvhifLq9OLUNN5LekI5ud9BkH6frLv9MVgAAHyF"},"signature":"wBMxbxXAHQV+V7LOmOJuw3kPTmrTLa/jZ02gFxi4jvRVIe7hyIV2ZA8vZEf7Lb5Lom0PrD6w08fk7TZw4ZAvLw=="}],"memo":"Called through gno.studio"},"blockNum":"394295"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g19uxvrxvxjn82wpcsreyd7rxz5v3r2lewvk50kj","send":"","pkg_path":"gno.land/r/demo/users","func":"Register","args":["g1jg67hp6nrcapzv520vn7dglae3vvgsavnn9tsu","12","asb"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvrDnIvhifLq9OLUNN5LekI5ud9BkH6frLv9MVgAAHyF"},"signature":"2WtbiPBoHblnLES1d8tJskuny5E/XRtooZPTQIsC93MsKTUGloaPN+3mVeZidrCr8o2YG0gX8/tbp/GiCH/cog=="}],"memo":"Called through gno.studio"},"blockNum":"394297"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","package":{"Name":"schematest_7","Path":"gno.land/r/x1unix/schematest_7","Files":[{"Name":"package.gno","Body":"package schematest_7\n\nimport (\n  \"gno.land/p/demo/ufmt\"\n  \"strconv\"\n  \"strings\"\n)\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n\nfunc TestVoid() string {\n  return \"TestVoid result\"\n}\n\n// func TestSpread(a string, b ...string) string {\n//   sb := \u0026strings.Builder{}\n//   sb.WriteString(a)\n//   for _, v := range b {\n//     sb.WriteString(\", \")\n//     sb.WriteString(v)\n//   }\n\n//   return sb.String()\n// }\n\nfunc TestByte(b byte) string {\n  return string([]byte{b})\n}\n\nfunc TestB(b bool) string {\n  return ufmt.Sprintf(\"%t\", b)\n}\n\nfunc TestS(s string) string {\n  return s\n}\n\nfunc TestI(i int) string {\n  return strconv.Itoa(int(i))\n}\n\nfunc TestI8(i int8) string {\n  return strconv.Itoa(int(i))\n}\n\nfunc TestI16(i int16) string {\n  return strconv.Itoa(int(i))\n}\n\nfunc TestI32(i int32) string {\n  return strconv.Itoa(int(i))\n}\n\nfunc TestI64(i int64) string {\n  return strconv.Itoa(int(i))\n}\n\nfunc TestU(i uint) string {\n  return strconv.FormatUint(uint64(i), 10)\n}\n\nfunc TestU8(i uint8) string {\n  return strconv.FormatUint(uint64(i), 10)\n}\n\nfunc TestU16(i uint16) string {\n  return strconv.FormatUint(uint64(i), 10)\n}\n\nfunc TestU32(i uint32) string {\n  return strconv.FormatUint(uint64(i), 10)\n}\n\nfunc TestU64(i uint64) string {\n  return strconv.FormatUint(i, 10)\n}\n\nfunc TestF32(f float32) string {\n  mantissa := int(f)\n  expo := (f - float32(int(f))) * 10000\n  if expo \u003c= -1 {\n    expo *= -1\n  }\n\n  return ufmt.Sprintf(\"%d.%d\", mantissa, int(expo))\n}\n\nfunc TestF64(f float64) string {\n  mantissa := int(f)\n  expo := (f - float64(int(f))) * 10000\n  if expo \u003c= -1 {\n    expo *= -1\n  }\n\n  return ufmt.Sprintf(\"%d.%d\", mantissa, int(expo))\n}\n\nfunc TestVecU8(vals []uint8) string {\n  if len(vals) == 0 {\n    return \"\u003cempty\u003e\"\n  }\n\n  sb := \u0026strings.Builder{}\n  for i, v := range vals {\n    if i != 0 {\n      sb.WriteString(\", \")\n    }\n    sb.WriteString(strconv.FormatUint(uint64(v), 10))\n  }\n  \n  return sb.String()\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8dMlyeZTx7/5c7upbCj/sMsgJdjajg4b8kgHZ+d1mV"},"signature":"d2cxyVH7iSTTfdUHbUEZPlAPBV1kCA+DKW8MWmSVoQBmHybIwnuL1nv9CQQcZWV8SU733+zKfQYkUBOdfSlagQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"394471"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","package":{"Name":"schematest_7","Path":"gno.land/r/gstest/schematest_7","Files":[{"Name":"package.gno","Body":"package schematest_7\n\nimport (\n  \"gno.land/p/demo/ufmt\"\n  \"strconv\"\n  \"strings\"\n)\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n\nfunc TestVoid() string {\n  return \"TestVoid result\"\n}\n\n// func TestSpread(a string, b ...string) string {\n//   sb := \u0026strings.Builder{}\n//   sb.WriteString(a)\n//   for _, v := range b {\n//     sb.WriteString(\", \")\n//     sb.WriteString(v)\n//   }\n\n//   return sb.String()\n// }\n\nfunc TestByte(b byte) string {\n  return string([]byte{b})\n}\n\nfunc TestB(b bool) string {\n  return ufmt.Sprintf(\"%t\", b)\n}\n\nfunc TestS(s string) string {\n  return s\n}\n\nfunc TestI(i int) string {\n  return strconv.Itoa(int(i))\n}\n\nfunc TestI8(i int8) string {\n  return strconv.Itoa(int(i))\n}\n\nfunc TestI16(i int16) string {\n  return strconv.Itoa(int(i))\n}\n\nfunc TestI32(i int32) string {\n  return strconv.Itoa(int(i))\n}\n\nfunc TestI64(i int64) string {\n  return strconv.Itoa(int(i))\n}\n\nfunc TestU(i uint) string {\n  return strconv.FormatUint(uint64(i), 10)\n}\n\nfunc TestU8(i uint8) string {\n  return strconv.FormatUint(uint64(i), 10)\n}\n\nfunc TestU16(i uint16) string {\n  return strconv.FormatUint(uint64(i), 10)\n}\n\nfunc TestU32(i uint32) string {\n  return strconv.FormatUint(uint64(i), 10)\n}\n\nfunc TestU64(i uint64) string {\n  return strconv.FormatUint(i, 10)\n}\n\nfunc TestF32(f float32) string {\n  mantissa := int(f)\n  expo := (f - float32(int(f))) * 10000\n  if expo \u003c= -1 {\n    expo *= -1\n  }\n\n  return ufmt.Sprintf(\"%d.%d\", mantissa, int(expo))\n}\n\nfunc TestF64(f float64) string {\n  mantissa := int(f)\n  expo := (f - float64(int(f))) * 10000\n  if expo \u003c= -1 {\n    expo *= -1\n  }\n\n  return ufmt.Sprintf(\"%d.%d\", mantissa, int(expo))\n}\n\nfunc TestVecU8(vals []uint8) string {\n  if len(vals) == 0 {\n    return \"\u003cempty\u003e\"\n  }\n\n  sb := \u0026strings.Builder{}\n  for i, v := range vals {\n    if i != 0 {\n      sb.WriteString(\", \")\n    }\n    sb.WriteString(strconv.FormatUint(uint64(v), 10))\n  }\n  \n  return sb.String()\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8dMlyeZTx7/5c7upbCj/sMsgJdjajg4b8kgHZ+d1mV"},"signature":"i9YEzmBWsedTw80r5tEXHygGuldgirPe8J4W9hoXC2kh2q12ZzL0rtrK4AlTH6kAizu9Wx61CzLV9kv8jPRdlQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"394474"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g15ruzptpql4dpuyzej0wkt5rq6r26kw4nxu9fwd","package":{"Name":"schematest","Path":"gno.land/r/gstest/schematest","Files":[{"Name":"package.gno","Body":"package schematest\n\nimport (\n  \"gno.land/p/demo/ufmt\"\n  \"strconv\"\n  \"strings\"\n)\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n\nfunc TestVoid() string {\n  return \"TestVoid result\"\n}\n\n// func TestSpread(a string, b ...string) string {\n//   sb := \u0026strings.Builder{}\n//   sb.WriteString(a)\n//   for _, v := range b {\n//     sb.WriteString(\", \")\n//     sb.WriteString(v)\n//   }\n\n//   return sb.String()\n// }\n\nfunc TestByte(b byte) string {\n  return string([]byte{b})\n}\n\nfunc TestB(b bool) string {\n  return ufmt.Sprintf(\"%t\", b)\n}\n\nfunc TestS(s string) string {\n  return s\n}\n\nfunc TestI(i int) string {\n  return strconv.Itoa(int(i))\n}\n\nfunc TestI8(i int8) string {\n  return strconv.Itoa(int(i))\n}\n\nfunc TestI16(i int16) string {\n  return strconv.Itoa(int(i))\n}\n\nfunc TestI32(i int32) string {\n  return strconv.Itoa(int(i))\n}\n\nfunc TestI64(i int64) string {\n  return strconv.Itoa(int(i))\n}\n\nfunc TestU(i uint) string {\n  return strconv.FormatUint(uint64(i), 10)\n}\n\nfunc TestU8(i uint8) string {\n  return strconv.FormatUint(uint64(i), 10)\n}\n\nfunc TestU16(i uint16) string {\n  return strconv.FormatUint(uint64(i), 10)\n}\n\nfunc TestU32(i uint32) string {\n  return strconv.FormatUint(uint64(i), 10)\n}\n\nfunc TestU64(i uint64) string {\n  return strconv.FormatUint(i, 10)\n}\n\nfunc TestF32(f float32) string {\n  mantissa := int(f)\n  expo := (f - float32(int(f))) * 10000\n  if expo \u003c= -1 {\n    expo *= -1\n  }\n\n  return ufmt.Sprintf(\"%d.%d\", mantissa, int(expo))\n}\n\nfunc TestF64(f float64) string {\n  mantissa := int(f)\n  expo := (f - float64(int(f))) * 10000\n  if expo \u003c= -1 {\n    expo *= -1\n  }\n\n  return ufmt.Sprintf(\"%d.%d\", mantissa, int(expo))\n}\n\nfunc TestVecU8(vals []uint8) string {\n  if len(vals) == 0 {\n    return \"\u003cempty\u003e\"\n  }\n\n  sb := \u0026strings.Builder{}\n  for i, v := range vals {\n    if i != 0 {\n      sb.WriteString(\", \")\n    }\n    sb.WriteString(strconv.FormatUint(uint64(v), 10))\n  }\n  \n  return sb.String()\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax8dMlyeZTx7/5c7upbCj/sMsgJdjajg4b8kgHZ+d1mV"},"signature":"DMCxNvLB3UIHtRNC9/8YH1dVvbQgOPjTbNdgVlZQ8+s9Ekfp9scMA8Agn0zYVlZMnoTv0p9oM5BZHuodvUpazA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"394476"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","send":"","pkg_path":"gno.land/r/gnostudio/gnoyourdate","func":"Vote","args":["false","false","true","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"BAOe8o7LBfyuQaXSlXlfllvLSwP1ecHHqX5A00NSLc9o2t+Y0Ykf7tJKJ5sNTXTcpBb/tm7M3/ASN3FWyqZTTw=="}],"memo":"Called through gno.studio"},"blockNum":"394658"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g130qplr2dny02smprqcypk4t9fd3ahnjuf08yax","send":"","pkg_path":"gno.land/r/gnostudio/gnoyourdate","func":"Vote","args":["false","true","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A04IFxibM7qtpmahuxpedgHdR2yaU/jQP7LLUGFeaWfe"},"signature":"+5jUWFOv9mpvYsH6MMFf+MQrdlAZ4RAz5rmFFU2DInIhfMie+qCyYUVs1mbQG/lPRjaZ6S3qzxO87ToMXilTsg=="}],"memo":"Called through gno.studio"},"blockNum":"394806"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","send":"","pkg_path":"gno.land/r/demo/hello","func":"Hello","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1CWzHwZ/FjY00hsAQhl6pnpuR3ulUiXgkMx0Te14ATX"},"signature":"IIivB9kj8pNQFGnO87v5QSf79fIHKs8Qqmu1W30f2DsVHtNRtzCn4nmwaA2KoQ2iE0EiykkpAoLm4OKdQ+hJRw=="}],"memo":"Called through gno.studio"},"blockNum":"394902"}
