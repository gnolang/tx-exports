{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1d598tyfatprdstalqutk62cnzpm3thvyy9mypg","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"FIZTwXTJlm7xnLIHrjwkc4C9c7z/uAnmA0uFgmGGqF4RGVSBTNmIl3Cf62taoF/GM8dhDTdKYLO1H0w6kUFP3Q=="}],"memo":""},"blockNum":"370314"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"UPeu4e+LRZT7om1qiq0uKp+irkCn7Sx6TG5689LM+/p03ohiIwezQ3eOsY8cl9Crq91LQDTkdamIIcpFRfzhXA=="}],"memo":""},"blockNum":"370326"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","amount":"20000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"V5kXFdUo8OFT/+G3FLrUyYzqs4DXbjZgf8Fe8O3sdGU8gWHO49FXMRVq/klU8/qxsQfer9wSFb9twM2YMHFlTQ=="}],"memo":""},"blockNum":"370328"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"DttSPN0sKJumFHz4qlmwTi/ywUShwbsffO9UxF0pffY00DLXXxk4QTszxxNCEiBelNEcx31vtVFhHU2bQebrVg=="}],"memo":""},"blockNum":"370330"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/test24/hello","func":"hello","args":["gno.land/r/test24/hello"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"JsaQP0wSelq/tamqaokejdrCNYRO+AgnBvEOLLQ1B3R1Gaq8ERYgXz58Mv2WZjKzyqPw7PEDhuM2OVZVlJN27g=="}],"memo":""},"blockNum":"370333"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/test24/hello","func":"Render","args":["gno.land/r/test24/hello"]}],"fee":{"gas_wanted":"3000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"oK0bEhnS32uA1CYl9QtSpUlpAZsb+NGyMYKbW2vFUPE3XtUfL6tDseQCok9Zzz/JOnMHwj8iG8732Bcp/G/U1g=="}],"memo":""},"blockNum":"370335"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1a2p2dnm60y0v5u9gu5ffh4e3cuhfqrdsd80s05","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"kZghyYMnG5vWiyOFwK9r8X8HfB4BX1SRIjj4QBmhCQdsMJT8//Wl87xubgzrHnDsqwam8+fpbk6zz1BdilSqew=="}],"memo":""},"blockNum":"370604"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5","package":{"Name":"poll","Path":"gno.land/r/jeronimoalbi/test/poll","Files":[{"Name":"poll.gno","Body":"package poll\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar answerLabels = map[Choice]string{\n\tChoiceThisMonth:        \"This month\",\n\tChoiceThisYear:         \"This year\",\n\tChoiceOneOrTwoYearsAgo: \"1-2 years ago\",\n\tChoiceSinceInception:   \"Since its inception\",\n}\n\nvar (\n\trealmURL string\n\tadmin    std.Address\n\tpoll     = Poll{\n\t\tQuestion:  \"When did you first learn about Gno.land?\",\n\t\tVotingURL: \"https://gno.studio/connect/gno.land/r/gnoyourdate/poll?network=test3\u0026tab=functions#Vote\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n)\n\nfunc init() {\n\trealmURL = \"https://test3.gno.land\" + strings.TrimPrefix(std.CurrentRealmPath(), \"gno.land\")\n\tadmin = std.GetOrigCaller()\n}\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion     string\n\t\tVotingURL    string\n\t\tAnswers      []Answer\n\t\tParticipants []std.Address // TODO: Use AVL tree for better search performance?\n\t\tEnded        bool\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice Choice\n\t\tCount  uint\n\t}\n)\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) uint {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn a.Count\n\t\t}\n\t}\n\treturn 0\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, a := range p.Participants {\n\t\tif a == addr {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// Vote submits a vote for one of the poll choices.\n//\n// Only one of the choices should be selected to consider the vote as valid.\n// The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\n//\n// When did you first learn about Gno.land?\n// - This month\n// - This year\n// - 1-2 years ago\n// - Since its inception\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tassertPollIsActive()\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tcaller := std.GetOrigCaller()\n\tassertFirstVote(caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Count++\n\t\t\tpoll.Participants = append(poll.Participants, caller)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted yes on \"%s\" you can check out the result at %s`,\n\t\tanswerLabels[choice],\n\t\trealmURL,\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Poll: %s\\n\", poll.Question))\n\n\tif poll.Ended {\n\t\tbuf.WriteString(\"The poll has ended\\n\")\n\t} else {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"You can participate in the poll by [submitting your vote](%s)\\n\", poll.VotingURL),\n\t\t)\n\t}\n\n\tbuf.WriteString(\"### Answers:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", answerLabels[c], poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\", len(poll.Participants)),\n\t)\n\n\treturn buf.String()\n}\n\n// EndPoll ends the poll to stop receiving new votes.\nfunc EndPoll() string {\n\tassertCallerIsAdmin()\n\tassertPollIsActive()\n\n\tpoll.Ended = true\n\treturn \"Poll ended successfully\"\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"No choice has been selected, you should submit a vote for one of the answers.\\n\" +\n\t\t\t\t\"Only one of the choices should be selected to consider the vote as valid.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple choices has been selected, you should submit a vote for only one answer.\\n\" +\n\t\t\t\t\"The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\",\n\t\t)\n\t}\n}\n\nfunc assertPollIsActive() {\n\tif poll.Ended {\n\t\tpanic(\"Poll has ended\")\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tfor _, a := range poll.Participants {\n\t\tif a == addr {\n\t\t\tpanic(\"This address already voted\")\n\t\t}\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Forbidden\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhZQixZ1ZXKXC+czqzNTDa78qEvD1FKMeZg6quhKcfA1"},"signature":"m4hE4pHwIYiv60cB4sC0jmEMelGGIQwZI3UQcFmQK8UZszTDyK6eTFXDllUf73/mR681tckv/AD/szTlkYoy4A=="}],"memo":"Deployed through play.gno.land"},"blockNum":"370701"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5","package":{"Name":"poll","Path":"gno.land/r/jeronimoalbi/test/poll","Files":[{"Name":"poll.gno","Body":"package poll\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar answerLabels = map[Choice]string{\n\tChoiceThisMonth:        \"This month\",\n\tChoiceThisYear:         \"This year\",\n\tChoiceOneOrTwoYearsAgo: \"1-2 years ago\",\n\tChoiceSinceInception:   \"Since its inception\",\n}\n\nvar (\n\trealmURL string\n\tadmin    std.Address\n\tpoll     = Poll{\n\t\tQuestion:  \"When did you first learn about Gno.land?\",\n\t\tVotingURL: \"https://gno.studio/connect/gno.land/r/gnoyourdate/poll?network=test3\u0026tab=functions#Vote\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n)\n\nfunc init() {\n\trealmURL = \"https://test3.gno.land\" + strings.TrimPrefix(std.CurrentRealmPath(), \"gno.land\")\n\tadmin = std.GetOrigCaller()\n}\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion     string\n\t\tVotingURL    string\n\t\tAnswers      []Answer\n\t\tParticipants []std.Address // TODO: Use AVL tree for better search performance?\n\t\tEnded        bool\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice Choice\n\t\tCount  uint\n\t}\n)\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) uint {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn a.Count\n\t\t}\n\t}\n\treturn 0\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, a := range p.Participants {\n\t\tif a == addr {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// Vote submits a vote for one of the poll choices.\n//\n// Only one of the choices should be selected to consider the vote as valid.\n// The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\n//\n// When did you first learn about Gno.land?\n// - This month\n// - This year\n// - 1-2 years ago\n// - Since its inception\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tassertPollIsActive()\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tcaller := std.GetOrigCaller()\n\tassertFirstVote(caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Count++\n\t\t\tpoll.Participants = append(poll.Participants, caller)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted yes on \"%s\" you can check out the result at %s`,\n\t\tanswerLabels[choice],\n\t\trealmURL,\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Poll: %s\\n\", poll.Question))\n\n\tif poll.Ended {\n\t\tbuf.WriteString(\"The poll has ended\\n\")\n\t} else {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"You can participate in the poll by [submitting your vote](%s)\\n\", poll.VotingURL),\n\t\t)\n\t}\n\n\tbuf.WriteString(\"### Answers:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", answerLabels[c], poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\", len(poll.Participants)),\n\t)\n\n\treturn buf.String()\n}\n\n// EndPoll ends the poll to stop receiving new votes.\nfunc EndPoll() string {\n\tassertCallerIsAdmin()\n\tassertPollIsActive()\n\n\tpoll.Ended = true\n\treturn \"Poll ended successfully\"\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"No choice has been selected, you should submit a vote for one of the answers.\\n\" +\n\t\t\t\t\"Only one of the choices should be selected to consider the vote as valid.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple choices has been selected, you should submit a vote for only one answer.\\n\" +\n\t\t\t\t\"The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\",\n\t\t)\n\t}\n}\n\nfunc assertPollIsActive() {\n\tif poll.Ended {\n\t\tpanic(\"Poll has ended\")\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tfor _, a := range poll.Participants {\n\t\tif a == addr {\n\t\t\tpanic(\"This address already voted\")\n\t\t}\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Forbidden\")\n\t}\n}\n"},{"Name":"gno.mod","Body":"module gno.land/r/jeronimoalbi/test/poll\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)"},{"Name":"poll_test.gno","Body":"package poll\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n\n\trealm \"gno.land/r/jeronimoalbi/test/poll\"\n)\n\nfunc TestVote(t *testing.T) {\n\tcases := []struct {\n\t\tname        string\n\t\targs        [4]bool\n\t\taddr        std.Address\n\t\tmsg, errMsg string\n\t\thasVoted    bool\n\t\ttotalVotes  int\n\t\tchoiceVotes map[realm.Choice]uint\n\t\tsetup       func(*realm.Poll)\n\t}{\n\t\t{\n\t\t\tname:       \"ok\",\n\t\t\targs:       [4]bool{false, true, false, false},\n\t\t\taddr:       testutils.TestAddress(\"test\"),\n\t\t\thasVoted:   true,\n\t\t\ttotalVotes: 1,\n\t\t\tmsg:        `You have successfully voted yes on \"This year\" you can check out the result at https://test3.gno.land/r/gnoyourdate/poll`,\n\t\t\tchoiceVotes: map[realm.Choice]uint{\n\t\t\t\trealm.ChoiceThisMonth:        0,\n\t\t\t\trealm.ChoiceThisYear:         1,\n\t\t\t\trealm.ChoiceOneOrTwoYearsAgo: 0,\n\t\t\t\trealm.ChoiceSinceInception:   0,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with other votes\",\n\t\t\targs:       [4]bool{false, false, true, false},\n\t\t\taddr:       testutils.TestAddress(\"test\"),\n\t\t\thasVoted:   true,\n\t\t\ttotalVotes: 3,\n\t\t\tmsg:        `You have successfully voted yes on \"1-2 years ago\" you can check out the result at https://test3.gno.land/r/gnoyourdate/poll`,\n\t\t\tchoiceVotes: map[realm.Choice]uint{\n\t\t\t\trealm.ChoiceThisMonth:        1,\n\t\t\t\trealm.ChoiceThisYear:         0,\n\t\t\t\trealm.ChoiceOneOrTwoYearsAgo: 2,\n\t\t\t\trealm.ChoiceSinceInception:   0,\n\t\t\t},\n\t\t\tsetup: func(p *realm.Poll) {\n\t\t\t\tp.Participants = append(p.Participants, testutils.TestAddress(\"test2\"), testutils.TestAddress(\"test3\"))\n\t\t\t\tp.Answers[0].Count++\n\t\t\t\tp.Answers[2].Count++\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:       \"already voted\",\n\t\t\targs:       [4]bool{true, false, false, false},\n\t\t\taddr:       testutils.TestAddress(\"test\"),\n\t\t\thasVoted:   true,\n\t\t\ttotalVotes: 1,\n\t\t\terrMsg:     \"This address already voted\",\n\t\t\tchoiceVotes: map[realm.Choice]uint{\n\t\t\t\trealm.ChoiceThisMonth:        1,\n\t\t\t\trealm.ChoiceThisYear:         0,\n\t\t\t\trealm.ChoiceOneOrTwoYearsAgo: 0,\n\t\t\t\trealm.ChoiceSinceInception:   0,\n\t\t\t},\n\t\t\tsetup: func(p *realm.Poll) {\n\t\t\t\tp.Participants = append(p.Participants, testutils.TestAddress(\"test\"))\n\t\t\t\tp.Answers[0].Count++\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"multiple vote choices\",\n\t\t\targs: [4]bool{true, true, false, false},\n\t\t\taddr: testutils.TestAddress(\"test\"),\n\t\t\terrMsg: \"Multiple choices has been selected, you should submit a vote for only one answer.\\\\n\" +\n\t\t\t\t\"The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\",\n\t\t\tchoiceVotes: map[realm.Choice]uint{\n\t\t\t\trealm.ChoiceThisMonth:        0,\n\t\t\t\trealm.ChoiceThisYear:         0,\n\t\t\t\trealm.ChoiceOneOrTwoYearsAgo: 0,\n\t\t\t\trealm.ChoiceSinceInception:   0,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"no vote choice\",\n\t\t\taddr: testutils.TestAddress(\"test\"),\n\t\t\terrMsg: \"No choice has been selected, you should submit a vote for one of the answers.\\\\n\" +\n\t\t\t\t\"Only one of the choices should be selected to consider the vote as valid.\",\n\t\t\tchoiceVotes: map[realm.Choice]uint{\n\t\t\t\trealm.ChoiceThisMonth:        0,\n\t\t\t\trealm.ChoiceThisYear:         0,\n\t\t\t\trealm.ChoiceOneOrTwoYearsAgo: 0,\n\t\t\t\trealm.ChoiceSinceInception:   0,\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\t// Arrange\n\t\t\tdefer teardown(t)()\n\n\t\t\tstd.TestSetOrigCaller(tc.addr)\n\n\t\t\tif tc.setup != nil {\n\t\t\t\ttc.setup(\u0026realm.poll)\n\t\t\t}\n\n\t\t\tvar msg string\n\n\t\t\t// Act\n\t\t\terrMsg := catchPanic(t, func() {\n\t\t\t\tmsg = realm.Vote(tc.args[0], tc.args[1], tc.args[2], tc.args[3])\n\t\t\t})\n\n\t\t\t// Assert\n\t\t\tif msg != tc.msg {\n\t\t\t\tt.Fatalf(\"expected vote success message: '%s', got: '%s'\", tc.msg, msg)\n\t\t\t}\n\n\t\t\tif got := strings.ReplaceAll(errMsg, \"\\n\", \"\\\\n\"); got != tc.errMsg {\n\t\t\t\tt.Fatalf(\"expected vote panic: '%s', got: '%s'\", tc.errMsg, got)\n\t\t\t}\n\n\t\t\tif got := realm.poll.HasVoted(tc.addr); got != tc.hasVoted {\n\t\t\t\tt.Fatalf(\"expected has voted check: %v, got: %v\", tc.hasVoted, got)\n\t\t\t}\n\n\t\t\tif got := len(realm.poll.Participants); got != tc.totalVotes {\n\t\t\t\tt.Fatalf(\"expected total vote count: %d, got: %d\", tc.totalVotes, got)\n\t\t\t}\n\n\t\t\tfor choice, count := range tc.choiceVotes {\n\t\t\t\tif got := realm.poll.GetCount(choice); got != count {\n\t\t\t\t\tt.Fatalf(\"expected vote count for choice %s: %d, got: %d\", choice.String(), count, got)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\t// Arrange\n\twantMarkdown := \"## Poll: When did you first learn about Gno.land?\\\\n\" +\n\t\t\"You can participate in the poll by [submitting your vote]\" +\n\t\t\"(https://gno.studio/connect/gno.land/r/gnoyourdate/poll?network=test3\u0026tab=functions#Vote)\\\\n\" +\n\t\t\"### Answers:\\\\n\" +\n\t\t\"- This month: 0 vote(s)\\\\n\" +\n\t\t\"- This year: 0 vote(s)\\\\n\" +\n\t\t\"- 1-2 years ago: 0 vote(s)\\\\n\" +\n\t\t\"- Since its inception: 0 vote(s)\\\\n\\\\n\" +\n\t\t\"The total number of answers is **0**\"\n\n\t// Act\n\tmarkdown := realm.Render(\"\")\n\n\t// Assert\n\tif got := strings.ReplaceAll(markdown, \"\\n\", \"\\\\n\"); got != wantMarkdown {\n\t\tt.Fatalf(\"expected render output: '%s', got: '%s'\", wantMarkdown, got)\n\t}\n}\n\nfunc teardown(t *testing.T) func() {\n\tt.Helper()\n\n\t// Make a copy of the current Poll instance\n\tpoll := realm.poll\n\n\treturn func() {\n\t\t// Cleanup votes\n\t\tfor i := range poll.Answers {\n\t\t\tpoll.Answers[i].Count = 0\n\t\t}\n\n\t\t// Restore the global Poll instance\n\t\trealm.poll = poll\n\t}\n}\n\nfunc catchPanic(t *testing.T, fn func()) (reason string) {\n\tt.Helper()\n\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tif err, _ := r.(error); err != nil {\n\t\t\t\treason = err.Error()\n\t\t\t} else {\n\t\t\t\treason = r.(string)\n\t\t\t}\n\t\t}\n\t}()\n\n\tfn()\n\treturn\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhZQixZ1ZXKXC+czqzNTDa78qEvD1FKMeZg6quhKcfA1"},"signature":"qOVOtjvMZF3JTAkuHvCLAPj4G9UzzIzhrJ5aVDWThrhos1rZjw04J/NrQYvjIl/aYT1yYwzJrNEU4SAJ9o9TTQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"370708"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5","package":{"Name":"testpoll","Path":"gno.land/r/jeronimoalbi/testpoll","Files":[{"Name":"poll.gno","Body":"package poll\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar answerLabels = map[Choice]string{\n\tChoiceThisMonth:        \"This month\",\n\tChoiceThisYear:         \"This year\",\n\tChoiceOneOrTwoYearsAgo: \"1-2 years ago\",\n\tChoiceSinceInception:   \"Since its inception\",\n}\n\nvar (\n\trealmURL string\n\tadmin    std.Address\n\tpoll     = Poll{\n\t\tQuestion:  \"When did you first learn about Gno.land?\",\n\t\tVotingURL: \"https://gno.studio/connect/gno.land/r/gnoyourdate/poll?network=test3\u0026tab=functions#Vote\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n)\n\nfunc init() {\n\trealmURL = \"https://test3.gno.land\" + strings.TrimPrefix(std.CurrentRealmPath(), \"gno.land\")\n\tadmin = std.GetOrigCaller()\n}\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion     string\n\t\tVotingURL    string\n\t\tAnswers      []Answer\n\t\tParticipants []std.Address // TODO: Use AVL tree for better search performance?\n\t\tEnded        bool\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice Choice\n\t\tCount  uint\n\t}\n)\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) uint {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn a.Count\n\t\t}\n\t}\n\treturn 0\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, a := range p.Participants {\n\t\tif a == addr {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// Vote submits a vote for one of the poll choices.\n//\n// Only one of the choices should be selected to consider the vote as valid.\n// The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\n//\n// When did you first learn about Gno.land?\n// - This month\n// - This year\n// - 1-2 years ago\n// - Since its inception\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tassertPollIsActive()\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tcaller := std.GetOrigCaller()\n\tassertFirstVote(caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Count++\n\t\t\tpoll.Participants = append(poll.Participants, caller)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted yes on \"%s\" you can check out the result at %s`,\n\t\tanswerLabels[choice],\n\t\trealmURL,\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Poll: %s\\n\", poll.Question))\n\n\tif poll.Ended {\n\t\tbuf.WriteString(\"The poll has ended\\n\")\n\t} else {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"You can participate in the poll by [submitting your vote](%s)\\n\", poll.VotingURL),\n\t\t)\n\t}\n\n\tbuf.WriteString(\"### Answers:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", answerLabels[c], poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\", len(poll.Participants)),\n\t)\n\n\treturn buf.String()\n}\n\n// EndPoll ends the poll to stop receiving new votes.\nfunc EndPoll() string {\n\tassertCallerIsAdmin()\n\tassertPollIsActive()\n\n\tpoll.Ended = true\n\treturn \"Poll ended successfully\"\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"No choice has been selected, you should submit a vote for one of the answers.\\n\" +\n\t\t\t\t\"Only one of the choices should be selected to consider the vote as valid.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple choices has been selected, you should submit a vote for only one answer.\\n\" +\n\t\t\t\t\"The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\",\n\t\t)\n\t}\n}\n\nfunc assertPollIsActive() {\n\tif poll.Ended {\n\t\tpanic(\"Poll has ended\")\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tfor _, a := range poll.Participants {\n\t\tif a == addr {\n\t\t\tpanic(\"This address already voted\")\n\t\t}\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Forbidden\")\n\t}\n}\n"},{"Name":"gno.mod","Body":"module gno.land/r/jeronimoalbi/testpoll\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)"},{"Name":"poll_test.gno","Body":"package poll\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n\n\trealm \"gno.land/r/jeronimoalbi/testpoll\"\n)\n\nfunc TestVote(t *testing.T) {\n\tcases := []struct {\n\t\tname        string\n\t\targs        [4]bool\n\t\taddr        std.Address\n\t\tmsg, errMsg string\n\t\thasVoted    bool\n\t\ttotalVotes  int\n\t\tchoiceVotes map[realm.Choice]uint\n\t\tsetup       func(*realm.Poll)\n\t}{\n\t\t{\n\t\t\tname:       \"ok\",\n\t\t\targs:       [4]bool{false, true, false, false},\n\t\t\taddr:       testutils.TestAddress(\"test\"),\n\t\t\thasVoted:   true,\n\t\t\ttotalVotes: 1,\n\t\t\tmsg:        `You have successfully voted yes on \"This year\" you can check out the result at https://test3.gno.land/r/gnoyourdate/poll`,\n\t\t\tchoiceVotes: map[realm.Choice]uint{\n\t\t\t\trealm.ChoiceThisMonth:        0,\n\t\t\t\trealm.ChoiceThisYear:         1,\n\t\t\t\trealm.ChoiceOneOrTwoYearsAgo: 0,\n\t\t\t\trealm.ChoiceSinceInception:   0,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:       \"ok with other votes\",\n\t\t\targs:       [4]bool{false, false, true, false},\n\t\t\taddr:       testutils.TestAddress(\"test\"),\n\t\t\thasVoted:   true,\n\t\t\ttotalVotes: 3,\n\t\t\tmsg:        `You have successfully voted yes on \"1-2 years ago\" you can check out the result at https://test3.gno.land/r/gnoyourdate/poll`,\n\t\t\tchoiceVotes: map[realm.Choice]uint{\n\t\t\t\trealm.ChoiceThisMonth:        1,\n\t\t\t\trealm.ChoiceThisYear:         0,\n\t\t\t\trealm.ChoiceOneOrTwoYearsAgo: 2,\n\t\t\t\trealm.ChoiceSinceInception:   0,\n\t\t\t},\n\t\t\tsetup: func(p *realm.Poll) {\n\t\t\t\tp.Participants = append(p.Participants, testutils.TestAddress(\"test2\"), testutils.TestAddress(\"test3\"))\n\t\t\t\tp.Answers[0].Count++\n\t\t\t\tp.Answers[2].Count++\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:       \"already voted\",\n\t\t\targs:       [4]bool{true, false, false, false},\n\t\t\taddr:       testutils.TestAddress(\"test\"),\n\t\t\thasVoted:   true,\n\t\t\ttotalVotes: 1,\n\t\t\terrMsg:     \"This address already voted\",\n\t\t\tchoiceVotes: map[realm.Choice]uint{\n\t\t\t\trealm.ChoiceThisMonth:        1,\n\t\t\t\trealm.ChoiceThisYear:         0,\n\t\t\t\trealm.ChoiceOneOrTwoYearsAgo: 0,\n\t\t\t\trealm.ChoiceSinceInception:   0,\n\t\t\t},\n\t\t\tsetup: func(p *realm.Poll) {\n\t\t\t\tp.Participants = append(p.Participants, testutils.TestAddress(\"test\"))\n\t\t\t\tp.Answers[0].Count++\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"multiple vote choices\",\n\t\t\targs: [4]bool{true, true, false, false},\n\t\t\taddr: testutils.TestAddress(\"test\"),\n\t\t\terrMsg: \"Multiple choices has been selected, you should submit a vote for only one answer.\\\\n\" +\n\t\t\t\t\"The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\",\n\t\t\tchoiceVotes: map[realm.Choice]uint{\n\t\t\t\trealm.ChoiceThisMonth:        0,\n\t\t\t\trealm.ChoiceThisYear:         0,\n\t\t\t\trealm.ChoiceOneOrTwoYearsAgo: 0,\n\t\t\t\trealm.ChoiceSinceInception:   0,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"no vote choice\",\n\t\t\taddr: testutils.TestAddress(\"test\"),\n\t\t\terrMsg: \"No choice has been selected, you should submit a vote for one of the answers.\\\\n\" +\n\t\t\t\t\"Only one of the choices should be selected to consider the vote as valid.\",\n\t\t\tchoiceVotes: map[realm.Choice]uint{\n\t\t\t\trealm.ChoiceThisMonth:        0,\n\t\t\t\trealm.ChoiceThisYear:         0,\n\t\t\t\trealm.ChoiceOneOrTwoYearsAgo: 0,\n\t\t\t\trealm.ChoiceSinceInception:   0,\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\t// Arrange\n\t\t\tdefer teardown(t)()\n\n\t\t\tstd.TestSetOrigCaller(tc.addr)\n\n\t\t\tif tc.setup != nil {\n\t\t\t\ttc.setup(\u0026realm.poll)\n\t\t\t}\n\n\t\t\tvar msg string\n\n\t\t\t// Act\n\t\t\terrMsg := catchPanic(t, func() {\n\t\t\t\tmsg = realm.Vote(tc.args[0], tc.args[1], tc.args[2], tc.args[3])\n\t\t\t})\n\n\t\t\t// Assert\n\t\t\tif msg != tc.msg {\n\t\t\t\tt.Fatalf(\"expected vote success message: '%s', got: '%s'\", tc.msg, msg)\n\t\t\t}\n\n\t\t\tif got := strings.ReplaceAll(errMsg, \"\\n\", \"\\\\n\"); got != tc.errMsg {\n\t\t\t\tt.Fatalf(\"expected vote panic: '%s', got: '%s'\", tc.errMsg, got)\n\t\t\t}\n\n\t\t\tif got := realm.poll.HasVoted(tc.addr); got != tc.hasVoted {\n\t\t\t\tt.Fatalf(\"expected has voted check: %v, got: %v\", tc.hasVoted, got)\n\t\t\t}\n\n\t\t\tif got := len(realm.poll.Participants); got != tc.totalVotes {\n\t\t\t\tt.Fatalf(\"expected total vote count: %d, got: %d\", tc.totalVotes, got)\n\t\t\t}\n\n\t\t\tfor choice, count := range tc.choiceVotes {\n\t\t\t\tif got := realm.poll.GetCount(choice); got != count {\n\t\t\t\t\tt.Fatalf(\"expected vote count for choice %s: %d, got: %d\", choice.String(), count, got)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestRender(t *testing.T) {\n\t// Arrange\n\twantMarkdown := \"## Poll: When did you first learn about Gno.land?\\\\n\" +\n\t\t\"You can participate in the poll by [submitting your vote]\" +\n\t\t\"(https://gno.studio/connect/gno.land/r/gnoyourdate/poll?network=test3\u0026tab=functions#Vote)\\\\n\" +\n\t\t\"### Answers:\\\\n\" +\n\t\t\"- This month: 0 vote(s)\\\\n\" +\n\t\t\"- This year: 0 vote(s)\\\\n\" +\n\t\t\"- 1-2 years ago: 0 vote(s)\\\\n\" +\n\t\t\"- Since its inception: 0 vote(s)\\\\n\\\\n\" +\n\t\t\"The total number of answers is **0**\"\n\n\t// Act\n\tmarkdown := realm.Render(\"\")\n\n\t// Assert\n\tif got := strings.ReplaceAll(markdown, \"\\n\", \"\\\\n\"); got != wantMarkdown {\n\t\tt.Fatalf(\"expected render output: '%s', got: '%s'\", wantMarkdown, got)\n\t}\n}\n\nfunc teardown(t *testing.T) func() {\n\tt.Helper()\n\n\t// Make a copy of the current Poll instance\n\tpoll := realm.poll\n\n\treturn func() {\n\t\t// Cleanup votes\n\t\tfor i := range poll.Answers {\n\t\t\tpoll.Answers[i].Count = 0\n\t\t}\n\n\t\t// Restore the global Poll instance\n\t\trealm.poll = poll\n\t}\n}\n\nfunc catchPanic(t *testing.T, fn func()) (reason string) {\n\tt.Helper()\n\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tif err, _ := r.(error); err != nil {\n\t\t\t\treason = err.Error()\n\t\t\t} else {\n\t\t\t\treason = r.(string)\n\t\t\t}\n\t\t}\n\t}()\n\n\tfn()\n\treturn\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhZQixZ1ZXKXC+czqzNTDa78qEvD1FKMeZg6quhKcfA1"},"signature":"5LlOVomngYKpXjmSgwjfXC3QRSiCnSYmE4ZvzMRPwjw/fEwJ4KYycZrsqIcARWAFw1bhUUaRCJHPCmh3TWiu7A=="}],"memo":"Deployed through play.gno.land"},"blockNum":"370710"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5","package":{"Name":"testpoll","Path":"gno.land/r/jeronimoalbi/testpoll","Files":[{"Name":"testpoll.gno","Body":"package poll\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar answerLabels = map[Choice]string{\n\tChoiceThisMonth:        \"This month\",\n\tChoiceThisYear:         \"This year\",\n\tChoiceOneOrTwoYearsAgo: \"1-2 years ago\",\n\tChoiceSinceInception:   \"Since its inception\",\n}\n\nvar (\n\trealmURL string\n\tadmin    std.Address\n\tpoll     = Poll{\n\t\tQuestion:  \"When did you first learn about Gno.land?\",\n\t\tVotingURL: \"https://gno.studio/connect/gno.land/r/gnoyourdate/poll?network=test3\u0026tab=functions#Vote\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n)\n\nfunc init() {\n\trealmURL = \"https://test3.gno.land\" + strings.TrimPrefix(std.CurrentRealmPath(), \"gno.land\")\n\tadmin = std.GetOrigCaller()\n}\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion     string\n\t\tVotingURL    string\n\t\tAnswers      []Answer\n\t\tParticipants []std.Address // TODO: Use AVL tree for better search performance?\n\t\tEnded        bool\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice Choice\n\t\tCount  uint\n\t}\n)\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) uint {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn a.Count\n\t\t}\n\t}\n\treturn 0\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, a := range p.Participants {\n\t\tif a == addr {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// Vote submits a vote for one of the poll choices.\n//\n// Only one of the choices should be selected to consider the vote as valid.\n// The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\n//\n// When did you first learn about Gno.land?\n// - This month\n// - This year\n// - 1-2 years ago\n// - Since its inception\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tassertPollIsActive()\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tcaller := std.GetOrigCaller()\n\tassertFirstVote(caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Count++\n\t\t\tpoll.Participants = append(poll.Participants, caller)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted yes on \"%s\" you can check out the result at %s`,\n\t\tanswerLabels[choice],\n\t\trealmURL,\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Poll: %s\\n\", poll.Question))\n\n\tif poll.Ended {\n\t\tbuf.WriteString(\"The poll has ended\\n\")\n\t} else {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"You can participate in the poll by [submitting your vote](%s)\\n\", poll.VotingURL),\n\t\t)\n\t}\n\n\tbuf.WriteString(\"### Answers:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", answerLabels[c], poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\", len(poll.Participants)),\n\t)\n\n\treturn buf.String()\n}\n\n// EndPoll ends the poll to stop receiving new votes.\nfunc EndPoll() string {\n\tassertCallerIsAdmin()\n\tassertPollIsActive()\n\n\tpoll.Ended = true\n\treturn \"Poll ended successfully\"\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"No choice has been selected, you should submit a vote for one of the answers.\\n\" +\n\t\t\t\t\"Only one of the choices should be selected to consider the vote as valid.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple choices has been selected, you should submit a vote for only one answer.\\n\" +\n\t\t\t\t\"The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\",\n\t\t)\n\t}\n}\n\nfunc assertPollIsActive() {\n\tif poll.Ended {\n\t\tpanic(\"Poll has ended\")\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tfor _, a := range poll.Participants {\n\t\tif a == addr {\n\t\t\tpanic(\"This address already voted\")\n\t\t}\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Forbidden\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhZQixZ1ZXKXC+czqzNTDa78qEvD1FKMeZg6quhKcfA1"},"signature":"Hz7flYYNyWmyRfOoWH51NVQGGgPgJ4XlNCBkFkhnFr9wT5MMlDjeE/zmHGhW1wVtNRxOU2aO2ATbQas5bIRj5w=="}],"memo":"Deployed through play.gno.land"},"blockNum":"370713"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5","package":{"Name":"testpoll","Path":"gno.land/r/jeronimoalbi/testpoll","Files":[{"Name":"testpoll.gno","Body":"package poll\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar answerLabels = map[Choice]string{\n\tChoiceThisMonth:        \"This month\",\n\tChoiceThisYear:         \"This year\",\n\tChoiceOneOrTwoYearsAgo: \"1-2 years ago\",\n\tChoiceSinceInception:   \"Since its inception\",\n}\n\nvar (\n\trealmURL string\n\tadmin    std.Address\n\tpoll     = Poll{\n\t\tQuestion:  \"When did you first learn about Gno.land?\",\n\t\tVotingURL: \"https://gno.studio/connect/gno.land/r/gnoyourdate/poll?network=test3\u0026tab=functions#Vote\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n)\n\nfunc init() {\n\trealmURL = \"https://test3.gno.land\" + strings.TrimPrefix(std.CurrentRealmPath(), \"gno.land\")\n\tadmin = std.GetOrigCaller()\n}\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion     string\n\t\tVotingURL    string\n\t\tAnswers      []Answer\n\t\tParticipants []std.Address // TODO: Use AVL tree for better search performance?\n\t\tEnded        bool\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice Choice\n\t\tCount  uint\n\t}\n)\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) uint {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn a.Count\n\t\t}\n\t}\n\treturn 0\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, a := range p.Participants {\n\t\tif a == addr {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// Vote submits a vote for one of the poll choices.\n//\n// Only one of the choices should be selected to consider the vote as valid.\n// The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\n//\n// When did you first learn about Gno.land?\n// - This month\n// - This year\n// - 1-2 years ago\n// - Since its inception\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tassertPollIsActive()\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tcaller := std.GetOrigCaller()\n\tassertFirstVote(caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Count++\n\t\t\tpoll.Participants = append(poll.Participants, caller)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted yes on \"%s\" you can check out the result at %s`,\n\t\tanswerLabels[choice],\n\t\trealmURL,\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Poll: %s\\n\", poll.Question))\n\n\tif poll.Ended {\n\t\tbuf.WriteString(\"The poll has ended\\n\")\n\t} else {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"You can participate in the poll by [submitting your vote](%s)\\n\", poll.VotingURL),\n\t\t)\n\t}\n\n\tbuf.WriteString(\"### Answers:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", answerLabels[c], poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\", len(poll.Participants)),\n\t)\n\n\treturn buf.String()\n}\n\n// EndPoll ends the poll to stop receiving new votes.\nfunc EndPoll() string {\n\tassertCallerIsAdmin()\n\tassertPollIsActive()\n\n\tpoll.Ended = true\n\treturn \"Poll ended successfully\"\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"No choice has been selected, you should submit a vote for one of the answers.\\n\" +\n\t\t\t\t\"Only one of the choices should be selected to consider the vote as valid.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple choices has been selected, you should submit a vote for only one answer.\\n\" +\n\t\t\t\t\"The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\",\n\t\t)\n\t}\n}\n\nfunc assertPollIsActive() {\n\tif poll.Ended {\n\t\tpanic(\"Poll has ended\")\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tfor _, a := range poll.Participants {\n\t\tif a == addr {\n\t\t\tpanic(\"This address already voted\")\n\t\t}\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Forbidden\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhZQixZ1ZXKXC+czqzNTDa78qEvD1FKMeZg6quhKcfA1"},"signature":"BSfn4Lrm9v8fuKeRYfn3JjPrOZQx1FCyXGIc6+TGHkVvyCdJybVbbzRl0YlStGDXHHP7KGfoVccEwwO3NiP/xQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"370715"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1vh7krmmzfua5xjmkatvmx09z37w34lsvd2mxa5","package":{"Name":"testpoll","Path":"gno.land/r/jeronimoalbi/testpoll","Files":[{"Name":"testpoll.gno","Body":"package testpoll\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar answerLabels = map[Choice]string{\n\tChoiceThisMonth:        \"This month\",\n\tChoiceThisYear:         \"This year\",\n\tChoiceOneOrTwoYearsAgo: \"1-2 years ago\",\n\tChoiceSinceInception:   \"Since its inception\",\n}\n\nvar (\n\trealmURL string\n\tadmin    std.Address\n\tpoll     = Poll{\n\t\tQuestion:  \"When did you first learn about Gno.land?\",\n\t\tVotingURL: \"https://gno.studio/connect/gno.land/r/gnoyourdate/poll?network=test3\u0026tab=functions#Vote\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n)\n\nfunc init() {\n\trealmURL = \"https://test3.gno.land\" + strings.TrimPrefix(std.CurrentRealmPath(), \"gno.land\")\n\tadmin = std.GetOrigCaller()\n}\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion     string\n\t\tVotingURL    string\n\t\tAnswers      []Answer\n\t\tParticipants []std.Address // TODO: Use AVL tree for better search performance?\n\t\tEnded        bool\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice Choice\n\t\tCount  uint\n\t}\n)\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) uint {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn a.Count\n\t\t}\n\t}\n\treturn 0\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, a := range p.Participants {\n\t\tif a == addr {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// Vote submits a vote for one of the poll choices.\n//\n// Only one of the choices should be selected to consider the vote as valid.\n// The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\n//\n// When did you first learn about Gno.land?\n// - This month\n// - This year\n// - 1-2 years ago\n// - Since its inception\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tassertPollIsActive()\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tcaller := std.GetOrigCaller()\n\tassertFirstVote(caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Count++\n\t\t\tpoll.Participants = append(poll.Participants, caller)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted yes on \"%s\" you can check out the result at %s`,\n\t\tanswerLabels[choice],\n\t\trealmURL,\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Poll: %s\\n\", poll.Question))\n\n\tif poll.Ended {\n\t\tbuf.WriteString(\"The poll has ended\\n\")\n\t} else {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"You can participate in the poll by [submitting your vote](%s)\\n\", poll.VotingURL),\n\t\t)\n\t}\n\n\tbuf.WriteString(\"### Answers:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", answerLabels[c], poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\", len(poll.Participants)),\n\t)\n\n\treturn buf.String()\n}\n\n// EndPoll ends the poll to stop receiving new votes.\nfunc EndPoll() string {\n\tassertCallerIsAdmin()\n\tassertPollIsActive()\n\n\tpoll.Ended = true\n\treturn \"Poll ended successfully\"\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"No choice has been selected, you should submit a vote for one of the answers.\\n\" +\n\t\t\t\t\"Only one of the choices should be selected to consider the vote as valid.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple choices has been selected, you should submit a vote for only one answer.\\n\" +\n\t\t\t\t\"The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\",\n\t\t)\n\t}\n}\n\nfunc assertPollIsActive() {\n\tif poll.Ended {\n\t\tpanic(\"Poll has ended\")\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tfor _, a := range poll.Participants {\n\t\tif a == addr {\n\t\t\tpanic(\"This address already voted\")\n\t\t}\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Forbidden\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhZQixZ1ZXKXC+czqzNTDa78qEvD1FKMeZg6quhKcfA1"},"signature":"VxCJ1aCYj5VqDSq7PCz6yJ4Xkz0NsD0C9eYaRlygNh0kqNEZEe04f2QDzmmoJjlBjXBV17lf8w2rpBrW0eFDbQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"370717"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"pMfHkLYfcX6xBe/4iw0Y7Btkpnz62hGPaz3GrElat/AfHUs20YTMPrncxSb1j3+6OIKRtBbxZGHGShp9C6UE2g=="}],"memo":""},"blockNum":"370719"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"Name":"testpoll","Path":"gno.land/r/michelle/testpoll","Files":[{"Name":"poll.gno","Body":"package testpoll\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strconv\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/ufmt\"\r\n)\r\n\r\nconst (\r\n\tChoiceNone             Choice = 0x0\r\n\tChoiceSinceInception   Choice = 0x1\r\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\r\n\tChoiceThisYear         Choice = 0x4\r\n\tChoiceThisMonth        Choice = 0x8\r\n)\r\n\r\nvar answerLabels = map[Choice]string{\r\n\tChoiceThisMonth:        \"This month\",\r\n\tChoiceThisYear:         \"This year\",\r\n\tChoiceOneOrTwoYearsAgo: \"1-2 years ago\",\r\n\tChoiceSinceInception:   \"Since its inception\",\r\n}\r\n\r\nvar (\r\n\trealmURL string\r\n\tadmin    std.Address\r\n\tpoll     = Poll{\r\n\t\tQuestion:  \"When did you first learn about Gno.land?\",\r\n\t\tVotingURL: \"https://tendermintproductstaging-realm-interaction.web.app/connect/gno.land/r/gnoyourdate/poll?network=test3\u0026tab=functions#Vote\",\r\n\t\tAnswers: []Answer{\r\n\t\t\t{Choice: ChoiceThisMonth},\r\n\t\t\t{Choice: ChoiceThisYear},\r\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\r\n\t\t\t{Choice: ChoiceSinceInception},\r\n\t\t},\r\n\t}\r\n)\r\n\r\nfunc init() {\r\n\trealmURL = \"https://gno.land\" + strings.TrimPrefix(std.CurrentRealmPath(), \"gno.land\")\r\n\tadmin = std.GetOrigCaller()\r\n}\r\n\r\ntype (\r\n\t// Choice defines a type for poll choices.\r\n\tChoice byte\r\n\r\n\t// Poll tracks the number of votes for a set of pre defined answers.\r\n\tPoll struct {\r\n\t\tQuestion     string\r\n\t\tVotingURL    string\r\n\t\tAnswers      []Answer\r\n\t\tParticipants []std.Address // TODO: Use AVL tree for better search performance?\r\n\t\tEnded        bool\r\n\t}\r\n\r\n\t// Answer contains the number of votes for a poll choice.\r\n\tAnswer struct {\r\n\t\tChoice Choice\r\n\t\tCount  uint\r\n\t}\r\n)\r\n\r\n// String returns the choice as a string.\r\nfunc (c Choice) String() string {\r\n\treturn strconv.Itoa(int(c))\r\n}\r\n\r\n// GetCount returns the number of votes submitted for a poll choice.\r\nfunc (p Poll) GetCount(c Choice) uint {\r\n\tfor _, a := range p.Answers {\r\n\t\tif a.Choice == c {\r\n\t\t\treturn a.Count\r\n\t\t}\r\n\t}\r\n\treturn 0\r\n}\r\n\r\n// HasVoted checks if an address already submitted a vote.\r\nfunc (p Poll) HasVoted(addr std.Address) bool {\r\n\tfor _, a := range p.Participants {\r\n\t\tif a == addr {\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\treturn false\r\n}\r\n\r\n// Vote submits a vote for one of the poll choices.\r\n//\r\n// Only one of the choices should be selected to consider the vote as valid.\r\n// The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\r\n//\r\n// When did you first learn about Gno.land?\r\n// - This month\r\n// - This year\r\n// - 1-2 years ago\r\n// - Since its inception\r\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\r\n\tassertPollIsActive()\r\n\r\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\r\n\tcaller := std.GetOrigCaller()\r\n\tassertFirstVote(caller)\r\n\r\n\tfor i, a := range poll.Answers {\r\n\t\tif a.Choice == choice {\r\n\t\t\tpoll.Answers[i].Count++\r\n\t\t\tpoll.Participants = append(poll.Participants, caller)\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\treturn ufmt.Sprintf(\r\n\t\t`You have successfully voted yes on \"%s\" you can check out the result at %s`,\r\n\t\tanswerLabels[choice],\r\n\t\trealmURL,\r\n\t)\r\n}\r\n\r\n// Render returns a Markdown string with the poll details.\r\nfunc Render(string) string {\r\n\tvar buf strings.Builder\r\n\r\n\tbuf.WriteString(ufmt.Sprintf(\"## Poll: %s\\n\", poll.Question))\r\n\r\n\tif poll.Ended {\r\n\t\tbuf.WriteString(\"The poll has ended\\n\")\r\n\t} else {\r\n\t\tbuf.WriteString(\r\n\t\t\tufmt.Sprintf(\"You can participate in the poll by [submitting your vote](%s)\\n\", poll.VotingURL),\r\n\t\t)\r\n\t}\r\n\r\n\tbuf.WriteString(\"### Answers:\\n\")\r\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\r\n\t\tbuf.WriteString(\r\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", answerLabels[c], poll.GetCount(c)),\r\n\t\t)\r\n\t}\r\n\r\n\tbuf.WriteString(\r\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\", len(poll.Participants)),\r\n\t)\r\n\r\n\treturn buf.String()\r\n}\r\n\r\n// EndPoll ends the poll to stop receiving new votes.\r\nfunc EndPoll() string {\r\n\tassertCallerIsAdmin()\r\n\tassertPollIsActive()\r\n\r\n\tpoll.Ended = true\r\n\treturn \"Poll ended successfully\"\r\n}\r\n\r\n// GetAdmin returns the address of the Realm admin account.\r\nfunc GetAdmin() string {\r\n\treturn admin.String()\r\n}\r\n\r\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\r\n\tvar c Choice\r\n\tfor _, arg := range voteArgs {\r\n\t\tc \u003c\u003c= 1 // shift left\r\n\t\tif arg {\r\n\t\t\tc |= 1 // last bit on\r\n\t\t}\r\n\t}\r\n\r\n\tswitch c {\r\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\r\n\t\treturn c\r\n\tcase ChoiceNone:\r\n\t\tpanic(\r\n\t\t\t\"No choice has been selected, you should submit a vote for one of the answers.\\n\" +\r\n\t\t\t\t\"Only one of the choices should be selected to consider the vote as valid.\",\r\n\t\t)\r\n\tdefault:\r\n\t\tpanic(\r\n\t\t\t\"Multiple choices has been selected, you should submit a vote for only one answer.\\n\" +\r\n\t\t\t\t\"The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\",\r\n\t\t)\r\n\t}\r\n}\r\n\r\nfunc assertPollIsActive() {\r\n\tif poll.Ended {\r\n\t\tpanic(\"Poll has ended\")\r\n\t}\r\n}\r\n\r\nfunc assertFirstVote(addr std.Address) {\r\n\tfor _, a := range poll.Participants {\r\n\t\tif a == addr {\r\n\t\t\tpanic(\"This address already voted\")\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunc assertCallerIsAdmin() {\r\n\tif admin != std.GetOrigCaller() {\r\n\t\tpanic(\"Forbidden\")\r\n\t}\r\n}\r\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7MWSLkjf+z/CYfMh6KVHEaHLDWpnfGBRDqFO81j1FRN"},"signature":"HM43Co3Frp10AyGLmVJmLRhhqvOuCPVOc2tmNfxe6HlmbbkvMmnthgRw/vVWIQS6YYPVPN7f0drq33rwvsivdw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"370887"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"Name":"testpoll","Path":"gno.land/r/michelle22/testpoll","Files":[{"Name":"poll.gno","Body":"package testpoll\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strconv\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/ufmt\"\r\n)\r\n\r\nconst (\r\n\tChoiceNone             Choice = 0x0\r\n\tChoiceSinceInception   Choice = 0x1\r\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\r\n\tChoiceThisYear         Choice = 0x4\r\n\tChoiceThisMonth        Choice = 0x8\r\n)\r\n\r\nvar answerLabels = map[Choice]string{\r\n\tChoiceThisMonth:        \"This month\",\r\n\tChoiceThisYear:         \"This year\",\r\n\tChoiceOneOrTwoYearsAgo: \"1-2 years ago\",\r\n\tChoiceSinceInception:   \"Since its inception\",\r\n}\r\n\r\nvar (\r\n\trealmURL string\r\n\tadmin    std.Address\r\n\tpoll     = Poll{\r\n\t\tQuestion:  \"When did you first learn about Gno.land?\",\r\n\t\tVotingURL: \"https://tendermintproductstaging-realm-interaction.web.app/connect/gno.land/r/gnoyourdate/poll?network=test3\u0026tab=functions#Vote\",\r\n\t\tAnswers: []Answer{\r\n\t\t\t{Choice: ChoiceThisMonth},\r\n\t\t\t{Choice: ChoiceThisYear},\r\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\r\n\t\t\t{Choice: ChoiceSinceInception},\r\n\t\t},\r\n\t}\r\n)\r\n\r\nfunc init() {\r\n\trealmURL = \"https://gno.land\" + strings.TrimPrefix(std.CurrentRealmPath(), \"gno.land\")\r\n\tadmin = std.GetOrigCaller()\r\n}\r\n\r\ntype (\r\n\t// Choice defines a type for poll choices.\r\n\tChoice byte\r\n\r\n\t// Poll tracks the number of votes for a set of pre defined answers.\r\n\tPoll struct {\r\n\t\tQuestion     string\r\n\t\tVotingURL    string\r\n\t\tAnswers      []Answer\r\n\t\tParticipants []std.Address // TODO: Use AVL tree for better search performance?\r\n\t\tEnded        bool\r\n\t}\r\n\r\n\t// Answer contains the number of votes for a poll choice.\r\n\tAnswer struct {\r\n\t\tChoice Choice\r\n\t\tCount  uint\r\n\t}\r\n)\r\n\r\n// String returns the choice as a string.\r\nfunc (c Choice) String() string {\r\n\treturn strconv.Itoa(int(c))\r\n}\r\n\r\n// GetCount returns the number of votes submitted for a poll choice.\r\nfunc (p Poll) GetCount(c Choice) uint {\r\n\tfor _, a := range p.Answers {\r\n\t\tif a.Choice == c {\r\n\t\t\treturn a.Count\r\n\t\t}\r\n\t}\r\n\treturn 0\r\n}\r\n\r\n// HasVoted checks if an address already submitted a vote.\r\nfunc (p Poll) HasVoted(addr std.Address) bool {\r\n\tfor _, a := range p.Participants {\r\n\t\tif a == addr {\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\treturn false\r\n}\r\n\r\n// Vote submits a vote for one of the poll choices.\r\n//\r\n// Only one of the choices should be selected to consider the vote as valid.\r\n// The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\r\n//\r\n// When did you first learn about Gno.land?\r\n// - This month\r\n// - This year\r\n// - 1-2 years ago\r\n// - Since its inception\r\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\r\n\tassertPollIsActive()\r\n\r\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\r\n\tcaller := std.GetOrigCaller()\r\n\tassertFirstVote(caller)\r\n\r\n\tfor i, a := range poll.Answers {\r\n\t\tif a.Choice == choice {\r\n\t\t\tpoll.Answers[i].Count++\r\n\t\t\tpoll.Participants = append(poll.Participants, caller)\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\treturn ufmt.Sprintf(\r\n\t\t`You have successfully voted yes on \"%s\" you can check out the result at %s`,\r\n\t\tanswerLabels[choice],\r\n\t\trealmURL,\r\n\t)\r\n}\r\n\r\n// Render returns a Markdown string with the poll details.\r\nfunc Render(string) string {\r\n\tvar buf strings.Builder\r\n\r\n\tbuf.WriteString(ufmt.Sprintf(\"## Poll: %s\\n\", poll.Question))\r\n\r\n\tif poll.Ended {\r\n\t\tbuf.WriteString(\"The poll has ended\\n\")\r\n\t} else {\r\n\t\tbuf.WriteString(\r\n\t\t\tufmt.Sprintf(\"You can participate in the poll by [submitting your vote](%s)\\n\", poll.VotingURL),\r\n\t\t)\r\n\t}\r\n\r\n\tbuf.WriteString(\"### Answers:\\n\")\r\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\r\n\t\tbuf.WriteString(\r\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", answerLabels[c], poll.GetCount(c)),\r\n\t\t)\r\n\t}\r\n\r\n\tbuf.WriteString(\r\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\", len(poll.Participants)),\r\n\t)\r\n\r\n\treturn buf.String()\r\n}\r\n\r\n// EndPoll ends the poll to stop receiving new votes.\r\nfunc EndPoll() string {\r\n\tassertCallerIsAdmin()\r\n\tassertPollIsActive()\r\n\r\n\tpoll.Ended = true\r\n\treturn \"Poll ended successfully\"\r\n}\r\n\r\n// GetAdmin returns the address of the Realm admin account.\r\nfunc GetAdmin() string {\r\n\treturn admin.String()\r\n}\r\n\r\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\r\n\tvar c Choice\r\n\tfor _, arg := range voteArgs {\r\n\t\tc \u003c\u003c= 1 // shift left\r\n\t\tif arg {\r\n\t\t\tc |= 1 // last bit on\r\n\t\t}\r\n\t}\r\n\r\n\tswitch c {\r\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\r\n\t\treturn c\r\n\tcase ChoiceNone:\r\n\t\tpanic(\r\n\t\t\t\"No choice has been selected, you should submit a vote for one of the answers.\\n\" +\r\n\t\t\t\t\"Only one of the choices should be selected to consider the vote as valid.\",\r\n\t\t)\r\n\tdefault:\r\n\t\tpanic(\r\n\t\t\t\"Multiple choices has been selected, you should submit a vote for only one answer.\\n\" +\r\n\t\t\t\t\"The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\",\r\n\t\t)\r\n\t}\r\n}\r\n\r\nfunc assertPollIsActive() {\r\n\tif poll.Ended {\r\n\t\tpanic(\"Poll has ended\")\r\n\t}\r\n}\r\n\r\nfunc assertFirstVote(addr std.Address) {\r\n\tfor _, a := range poll.Participants {\r\n\t\tif a == addr {\r\n\t\t\tpanic(\"This address already voted\")\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunc assertCallerIsAdmin() {\r\n\tif admin != std.GetOrigCaller() {\r\n\t\tpanic(\"Forbidden\")\r\n\t}\r\n}\r\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7MWSLkjf+z/CYfMh6KVHEaHLDWpnfGBRDqFO81j1FRN"},"signature":"jgrfj5elCssPmCsnyDXR6EfMCFN4RqZXLxx5jPeTPUgPHeaKcCkUEoYrKN7TGqXZ/zu7KLUwzZpgkAyPLLV7xQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"370891"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"9UGmSJdLXqjqm7pydCV7VJg8DfMAXe2fJG37vF0iYdp703zeVz7opm0C12o3k8VI/Fvky9p8PL8BwVaEKuHJaA=="}],"memo":""},"blockNum":"370894"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"Name":"testpoll","Path":"gno.land/r/michelle22/testpoll","Files":[{"Name":"poll.gno","Body":"package testpoll\r\n\r\nimport (\r\n\t\"std\"\r\n\t\"strconv\"\r\n\t\"strings\"\r\n\r\n\t\"gno.land/p/demo/ufmt\"\r\n)\r\n\r\nconst (\r\n\tChoiceNone             Choice = 0x0\r\n\tChoiceSinceInception   Choice = 0x1\r\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\r\n\tChoiceThisYear         Choice = 0x4\r\n\tChoiceThisMonth        Choice = 0x8\r\n)\r\n\r\nvar answerLabels = map[Choice]string{\r\n\tChoiceThisMonth:        \"This month\",\r\n\tChoiceThisYear:         \"This year\",\r\n\tChoiceOneOrTwoYearsAgo: \"1-2 years ago\",\r\n\tChoiceSinceInception:   \"Since its inception\",\r\n}\r\n\r\nvar (\r\n\trealmURL string\r\n\tadmin    std.Address\r\n\tpoll     = Poll{\r\n\t\tQuestion:  \"When did you first learn about Gno.land?\",\r\n\t\tVotingURL: \"https://tendermintproductstaging-realm-interaction.web.app/connect/gno.land/r/gnoyourdate/poll?network=test3\u0026tab=functions#Vote\",\r\n\t\tAnswers: []Answer{\r\n\t\t\t{Choice: ChoiceThisMonth},\r\n\t\t\t{Choice: ChoiceThisYear},\r\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\r\n\t\t\t{Choice: ChoiceSinceInception},\r\n\t\t},\r\n\t}\r\n)\r\n\r\nfunc init() {\r\n\trealmURL = \"https://gno.land\" + strings.TrimPrefix(std.CurrentRealmPath(), \"gno.land\")\r\n\tadmin = std.GetOrigCaller()\r\n}\r\n\r\ntype (\r\n\t// Choice defines a type for poll choices.\r\n\tChoice byte\r\n\r\n\t// Poll tracks the number of votes for a set of pre defined answers.\r\n\tPoll struct {\r\n\t\tQuestion     string\r\n\t\tVotingURL    string\r\n\t\tAnswers      []Answer\r\n\t\tParticipants []std.Address // TODO: Use AVL tree for better search performance?\r\n\t\tEnded        bool\r\n\t}\r\n\r\n\t// Answer contains the number of votes for a poll choice.\r\n\tAnswer struct {\r\n\t\tChoice Choice\r\n\t\tCount  uint\r\n\t}\r\n)\r\n\r\n// String returns the choice as a string.\r\nfunc (c Choice) String() string {\r\n\treturn strconv.Itoa(int(c))\r\n}\r\n\r\n// GetCount returns the number of votes submitted for a poll choice.\r\nfunc (p Poll) GetCount(c Choice) uint {\r\n\tfor _, a := range p.Answers {\r\n\t\tif a.Choice == c {\r\n\t\t\treturn a.Count\r\n\t\t}\r\n\t}\r\n\treturn 0\r\n}\r\n\r\n// HasVoted checks if an address already submitted a vote.\r\nfunc (p Poll) HasVoted(addr std.Address) bool {\r\n\tfor _, a := range p.Participants {\r\n\t\tif a == addr {\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\treturn false\r\n}\r\n\r\n// Vote submits a vote for one of the poll choices.\r\n//\r\n// Only one of the choices should be selected to consider the vote as valid.\r\n// The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\r\n//\r\n// When did you first learn about Gno.land?\r\n// - This month\r\n// - This year\r\n// - 1-2 years ago\r\n// - Since its inception\r\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\r\n\tassertPollIsActive()\r\n\r\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\r\n\tcaller := std.GetOrigCaller()\r\n\tassertFirstVote(caller)\r\n\r\n\tfor i, a := range poll.Answers {\r\n\t\tif a.Choice == choice {\r\n\t\t\tpoll.Answers[i].Count++\r\n\t\t\tpoll.Participants = append(poll.Participants, caller)\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\treturn ufmt.Sprintf(\r\n\t\t`You have successfully voted yes on \"%s\" you can check out the result at %s`,\r\n\t\tanswerLabels[choice],\r\n\t\trealmURL,\r\n\t)\r\n}\r\n\r\n// Render returns a Markdown string with the poll details.\r\nfunc Render(string) string {\r\n\tvar buf strings.Builder\r\n\r\n\tbuf.WriteString(ufmt.Sprintf(\"## Poll: %s\\n\", poll.Question))\r\n\r\n\tif poll.Ended {\r\n\t\tbuf.WriteString(\"The poll has ended\\n\")\r\n\t} else {\r\n\t\tbuf.WriteString(\r\n\t\t\tufmt.Sprintf(\"You can participate in the poll by [submitting your vote](%s)\\n\", poll.VotingURL),\r\n\t\t)\r\n\t}\r\n\r\n\tbuf.WriteString(\"### Answers:\\n\")\r\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\r\n\t\tbuf.WriteString(\r\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", answerLabels[c], poll.GetCount(c)),\r\n\t\t)\r\n\t}\r\n\r\n\tbuf.WriteString(\r\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\", len(poll.Participants)),\r\n\t)\r\n\r\n\treturn buf.String()\r\n}\r\n\r\n// EndPoll ends the poll to stop receiving new votes.\r\nfunc EndPoll() string {\r\n\tassertCallerIsAdmin()\r\n\tassertPollIsActive()\r\n\r\n\tpoll.Ended = true\r\n\treturn \"Poll ended successfully\"\r\n}\r\n\r\n// GetAdmin returns the address of the Realm admin account.\r\nfunc GetAdmin() string {\r\n\treturn admin.String()\r\n}\r\n\r\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\r\n\tvar c Choice\r\n\tfor _, arg := range voteArgs {\r\n\t\tc \u003c\u003c= 1 // shift left\r\n\t\tif arg {\r\n\t\t\tc |= 1 // last bit on\r\n\t\t}\r\n\t}\r\n\r\n\tswitch c {\r\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\r\n\t\treturn c\r\n\tcase ChoiceNone:\r\n\t\tpanic(\r\n\t\t\t\"No choice has been selected, you should submit a vote for one of the answers.\\n\" +\r\n\t\t\t\t\"Only one of the choices should be selected to consider the vote as valid.\",\r\n\t\t)\r\n\tdefault:\r\n\t\tpanic(\r\n\t\t\t\"Multiple choices has been selected, you should submit a vote for only one answer.\\n\" +\r\n\t\t\t\t\"The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\",\r\n\t\t)\r\n\t}\r\n}\r\n\r\nfunc assertPollIsActive() {\r\n\tif poll.Ended {\r\n\t\tpanic(\"Poll has ended\")\r\n\t}\r\n}\r\n\r\nfunc assertFirstVote(addr std.Address) {\r\n\tfor _, a := range poll.Participants {\r\n\t\tif a == addr {\r\n\t\t\tpanic(\"This address already voted\")\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunc assertCallerIsAdmin() {\r\n\tif admin != std.GetOrigCaller() {\r\n\t\tpanic(\"Forbidden\")\r\n\t}\r\n}\r\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7MWSLkjf+z/CYfMh6KVHEaHLDWpnfGBRDqFO81j1FRN"},"signature":"2fJS+tTE66gjXDBAhVzIC1DooZ/KcvZpkDma4XKYaX5MzbwROYJt2R89dyW8kpfkSQzQKIfneDjw5vqDqgQHGQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"370897"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"VDIh8tRVWWDWQqVumOItzDfaeUAvVSsDhkhXxouuMIYBGq7QFDhkGbA5EUd4dcWWfIC8LyC7yQ9LKI3U3N8WdQ=="}],"memo":""},"blockNum":"370900"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"Name":"testpoll","Path":"gno.land/r/michelle22/testpoll","Files":[{"Name":"poll.gno","Body":"package testpoll\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar answerLabels = map[Choice]string{\n\tChoiceThisMonth:        \"This month\",\n\tChoiceThisYear:         \"This year\",\n\tChoiceOneOrTwoYearsAgo: \"1-2 years ago\",\n\tChoiceSinceInception:   \"Since its inception\",\n}\n\nvar (\n\trealmURL string\n\tadmin    std.Address\n\tpoll     = Poll{\n\t\tQuestion:  \"When did you first learn about Gno.land?\",\n\t\tVotingURL: \"https://tendermintproductstaging-realm-interaction.web.app/connect/gno.land/r/gnoyourdate/poll?network=test3\u0026tab=functions#Vote\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n)\n\nfunc init() {\n\trealmURL = \"https://gno.land\" + strings.TrimPrefix(std.CurrentRealmPath(), \"gno.land\")\n\tadmin = std.GetOrigCaller()\n}\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion     string\n\t\tVotingURL    string\n\t\tAnswers      []Answer\n\t\tParticipants []std.Address // TODO: Use AVL tree for better search performance?\n\t\tEnded        bool\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice Choice\n\t\tCount  uint\n\t}\n)\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) uint {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn a.Count\n\t\t}\n\t}\n\treturn 0\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, a := range p.Participants {\n\t\tif a == addr {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// Vote submits a vote for one of the poll choices.\n//\n// Only one of the choices should be selected to consider the vote as valid.\n// The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\n//\n// When did you first learn about Gno.land?\n// - This month\n// - This year\n// - 1-2 years ago\n// - Since its inception\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tassertPollIsActive()\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tcaller := std.GetOrigCaller()\n\tassertFirstVote(caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Count++\n\t\t\tpoll.Participants = append(poll.Participants, caller)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted yes on \"%s\" you can check out the result at %s`,\n\t\tanswerLabels[choice],\n\t\trealmURL,\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Poll: %s\\n\", poll.Question))\n\n\tif poll.Ended {\n\t\tbuf.WriteString(\"The poll has ended\\n\")\n\t} else {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"You can participate in the poll by [submitting your vote](%s)\\n\", poll.VotingURL),\n\t\t)\n\t}\n\n\tbuf.WriteString(\"### Answers:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", answerLabels[c], poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\", len(poll.Participants)),\n\t)\n\n\treturn buf.String()\n}\n\n// EndPoll ends the poll to stop receiving new votes.\nfunc EndPoll() string {\n\tassertCallerIsAdmin()\n\tassertPollIsActive()\n\n\tpoll.Ended = true\n\treturn \"Poll ended successfully\"\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"No choice has been selected, you should submit a vote for one of the answers.\\n\" +\n\t\t\t\t\"Only one of the choices should be selected to consider the vote as valid.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple choices has been selected, you should submit a vote for only one answer.\\n\" +\n\t\t\t\t\"The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\",\n\t\t)\n\t}\n}\n\nfunc assertPollIsActive() {\n\tif poll.Ended {\n\t\tpanic(\"Poll has ended\")\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tfor _, a := range poll.Participants {\n\t\tif a == addr {\n\t\t\tpanic(\"This address already voted\")\n\t\t}\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Forbidden\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7MWSLkjf+z/CYfMh6KVHEaHLDWpnfGBRDqFO81j1FRN"},"signature":"GidxNXrXJwfJbNbadCnJExGDU5zfvtg5XsGPwm8lA107+ToWifSqLqPGWi4Yc6bEZSqE/eFdiCeMy0HopoJQkQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"370904"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","package":{"Name":"testpoll","Path":"gno.land/r/michelle34/testpoll","Files":[{"Name":"poll.gno","Body":"package testpoll\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar answerLabels = map[Choice]string{\n\tChoiceThisMonth:        \"This month\",\n\tChoiceThisYear:         \"This year\",\n\tChoiceOneOrTwoYearsAgo: \"1-2 years ago\",\n\tChoiceSinceInception:   \"Since its inception\",\n}\n\nvar (\n\trealmURL string\n\tadmin    std.Address\n\tpoll     = Poll{\n\t\tQuestion:  \"When did you first learn about Gno.land?\",\n\t\tVotingURL: \"https://tendermintproductstaging-realm-interaction.web.app/connect/gno.land/r/gnoyourdate/poll?network=test3\u0026tab=functions#Vote\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n)\n\nfunc init() {\n\trealmURL = \"https://gno.land\" + strings.TrimPrefix(std.CurrentRealmPath(), \"gno.land\")\n\tadmin = std.GetOrigCaller()\n}\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion     string\n\t\tVotingURL    string\n\t\tAnswers      []Answer\n\t\tParticipants []std.Address // TODO: Use AVL tree for better search performance?\n\t\tEnded        bool\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice Choice\n\t\tCount  uint\n\t}\n)\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) uint {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn a.Count\n\t\t}\n\t}\n\treturn 0\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, a := range p.Participants {\n\t\tif a == addr {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// Vote submits a vote for one of the poll choices.\n//\n// Only one of the choices should be selected to consider the vote as valid.\n// The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\n//\n// When did you first learn about Gno.land?\n// - This month\n// - This year\n// - 1-2 years ago\n// - Since its inception\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tassertPollIsActive()\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tcaller := std.GetOrigCaller()\n\tassertFirstVote(caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Count++\n\t\t\tpoll.Participants = append(poll.Participants, caller)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted yes on \"%s\" you can check out the result at %s`,\n\t\tanswerLabels[choice],\n\t\trealmURL,\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Poll: %s\\n\", poll.Question))\n\n\tif poll.Ended {\n\t\tbuf.WriteString(\"The poll has ended\\n\")\n\t} else {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"You can participate in the poll by [submitting your vote](%s)\\n\", poll.VotingURL),\n\t\t)\n\t}\n\n\tbuf.WriteString(\"### Answers:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", answerLabels[c], poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\", len(poll.Participants)),\n\t)\n\n\treturn buf.String()\n}\n\n// EndPoll ends the poll to stop receiving new votes.\nfunc EndPoll() string {\n\tassertCallerIsAdmin()\n\tassertPollIsActive()\n\n\tpoll.Ended = true\n\treturn \"Poll ended successfully\"\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"No choice has been selected, you should submit a vote for one of the answers.\\n\" +\n\t\t\t\t\"Only one of the choices should be selected to consider the vote as valid.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple choices has been selected, you should submit a vote for only one answer.\\n\" +\n\t\t\t\t\"The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\",\n\t\t)\n\t}\n}\n\nfunc assertPollIsActive() {\n\tif poll.Ended {\n\t\tpanic(\"Poll has ended\")\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tfor _, a := range poll.Participants {\n\t\tif a == addr {\n\t\t\tpanic(\"This address already voted\")\n\t\t}\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Forbidden\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7MWSLkjf+z/CYfMh6KVHEaHLDWpnfGBRDqFO81j1FRN"},"signature":"XxdW6rzgSKDmObzchZPKlG874jVZnF/wWOgLRetOYJllgVBL7MasufALTNj57oZvA3hYh8j3jTvnNa1cllQHQQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"370906"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","package":{"Name":"testpoll","Path":"gno.land/r/jeronimo/testpoll","Files":[{"Name":"poll.gno","Body":"package testpoll\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar answerLabels = map[Choice]string{\n\tChoiceThisMonth:        \"This month\",\n\tChoiceThisYear:         \"This year\",\n\tChoiceOneOrTwoYearsAgo: \"1-2 years ago\",\n\tChoiceSinceInception:   \"Since its inception\",\n}\n\nvar (\n\trealmURL string\n\tadmin    std.Address\n\tpoll     = Poll{\n\t\tQuestion:  \"When did you first learn about Gno.land?\",\n\t\tVotingURL: \"https://tendermintproductstaging-realm-interaction.web.app/connect/gno.land/r/gnoyourdate/poll?network=test3\u0026tab=functions#Vote\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n)\n\nfunc init() {\n\trealmURL = \"https://gno.land\" + strings.TrimPrefix(std.CurrentRealmPath(), \"gno.land\")\n\tadmin = std.GetOrigCaller()\n}\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion     string\n\t\tVotingURL    string\n\t\tAnswers      []Answer\n\t\tParticipants []std.Address // TODO: Use AVL tree for better search performance?\n\t\tEnded        bool\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice Choice\n\t\tCount  uint\n\t}\n)\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) uint {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn a.Count\n\t\t}\n\t}\n\treturn 0\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, a := range p.Participants {\n\t\tif a == addr {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// Vote submits a vote for one of the poll choices.\n//\n// Only one of the choices should be selected to consider the vote as valid.\n// The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\n//\n// When did you first learn about Gno.land?\n// - This month\n// - This year\n// - 1-2 years ago\n// - Since its inception\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tassertPollIsActive()\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tcaller := std.GetOrigCaller()\n\tassertFirstVote(caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Count++\n\t\t\tpoll.Participants = append(poll.Participants, caller)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted yes on \"%s\" you can check out the result at %s`,\n\t\tanswerLabels[choice],\n\t\trealmURL,\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Poll: %s\\n\", poll.Question))\n\n\tif poll.Ended {\n\t\tbuf.WriteString(\"The poll has ended\\n\")\n\t} else {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"You can participate in the poll by [submitting your vote](%s)\\n\", poll.VotingURL),\n\t\t)\n\t}\n\n\tbuf.WriteString(\"### Answers:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", answerLabels[c], poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\", len(poll.Participants)),\n\t)\n\n\treturn buf.String()\n}\n\n// EndPoll ends the poll to stop receiving new votes.\nfunc EndPoll() string {\n\tassertCallerIsAdmin()\n\tassertPollIsActive()\n\n\tpoll.Ended = true\n\treturn \"Poll ended successfully\"\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"No choice has been selected, you should submit a vote for one of the answers.\\n\" +\n\t\t\t\t\"Only one of the choices should be selected to consider the vote as valid.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple choices has been selected, you should submit a vote for only one answer.\\n\" +\n\t\t\t\t\"The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\",\n\t\t)\n\t}\n}\n\nfunc assertPollIsActive() {\n\tif poll.Ended {\n\t\tpanic(\"Poll has ended\")\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tfor _, a := range poll.Participants {\n\t\tif a == addr {\n\t\t\tpanic(\"This address already voted\")\n\t\t}\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Forbidden\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"y575B0QLqzYIEQNREH9/YVCeVuHUESqMc9cmFtM05MV2eg5AGu+MnBox9PWPfXiew+F07GutCZ6znw+Er9zSGw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"370908"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"Goe5fNtHdPHkTbnZLQgamma+Lk5IDLfUpHSdB62u/7tb8UCdAdBClGBD+OyGB88lXwjRkv2IXr4Jf0R8NUWivw=="}],"memo":""},"blockNum":"370910"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"GWzZ2j06KUo9uCtyRcZAv1DMprQD1wuPZu5FIavsG6lqSVLeMn7D+BECuHVY4chBrAHwTT+C4LSMZM2eg+Sd8w=="}],"memo":""},"blockNum":"370914"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"oB+5t7/mP+XV9Ptnifsy3xzxerb1Jcb8luMpc6fagfA4fIRxx5/F1ny/XDEGhm7bEqeNsF6Rhno1cZNqOeHjoA=="}],"memo":""},"blockNum":"370922"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"rB+v9FCNSjFsCXB/B/Cphp4YH9alWOfyQ5ky3dr8JSB9AU+nkhwe7gAFxKi2gpq+1Fio0kk6t+N3Vr8d0b0zjA=="}],"memo":""},"blockNum":"370926"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"vGV+6zrYHXuQNmfL2uJqqz0Z5YzYDbGYl3PgK9WonyggeSUa7DYZkjHH30WoMvaM561Qgu+mZgKnIgEnSw6/oQ=="}],"memo":""},"blockNum":"370928"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"ii8LWRkljeQ87fKfS8/r44WBGKDxPVVx6QG6NeBsbDs6D7mXvbX0hlT0N3priLm7tOC+Rkd/NN2AHwXp3b0Puw=="}],"memo":""},"blockNum":"370930"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"c1mS5rAB+GGgexu3wLxwx4YtdCj7V5n5je4popkPUatY7XEoweYBj4coC2KSGC3OcdKwJZIXS/X7+vvGIiVSbg=="}],"memo":""},"blockNum":"370933"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"Vq45X9VnWm9WX79ef5ZF0b+aOxlFiVqVZrievIuZPzEugx9mjJVLV6wCaTmUrsQVeS4w8148stOYrlHAv9np8g=="}],"memo":""},"blockNum":"370939"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"QuIIQ1DD+llmzXUw35OAPoyv2C25jrM8Ah9bHlJ/2DVkHu0DqMdCFZhGIYdIB8SikCPWDEW/y6x9WBqa3hrmiw=="}],"memo":""},"blockNum":"370941"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"Yt+InNsiaBBs82g5aoLbtapdsGowqpsbONy3tMP5/w492xSRC3BYW+L445Z1uIMdbSIt88QW0zh3eJnq3biTEQ=="}],"memo":""},"blockNum":"370944"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"sJdtlu5egGOLCyO4Omp+BIhBlozuxYlj3nqi1lTOmN4y/eilHVYF0ozUzZT5VLR3udBnNIN9QKpEPeLoy7O8HA=="}],"memo":""},"blockNum":"371045"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v1","Path":"gno.land/r/sdm96/feedback/v1","Files":[{"Name":"package.gno","Body":"package v1\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\ntype addrSet map[std.Address]struct{}\n\nfunc newAddrSet(items ...std.Address) addrSet {\n\tset := make(addrSet, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nfunc (s addrSet) Has(addr std.Address) bool {\n\t_, ok := s[addr]\n\treturn ok\n}\n\nvar (\n\tnextID    = 0\n\tisLocked  = false\n\tfeedbacks map[int]Feedback\n\townerAddr = std.Address(\n\t// TODO: put realm's owner address\n\t)\n\tmodsAddrs = newAddrSet(\n\t// TODO: add mod wallets\n\t)\n)\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || modsAddrs.Has(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tnextID++\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(path string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"},{"Name":"gno.mod","Body":"module gno.land/r/sdm95/feedback/v1\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"seHYpOyrz/Bn9QE4amsJ7zwicu88rx6vxZynRfXafmpFr7pCrt7Gi6H5SPk1Ope7gypyVOR+oMm/Ea4UUypciA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371054"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","package":{"Name":"realmfeedbacktest","Path":"gno.land/r/feedback/realmfeedbacktest","Files":[{"Name":"realmfeedbacktest.gno","Body":"package v1\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponses []string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\ntype addrSet map[std.Address]struct{}\n\nfunc newAddrSet(items ...std.Address) addrSet {\n\tset := make(addrSet, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nfunc (s addrSet) Has(addr std.Address) bool {\n\t_, ok := s[addr]\n\treturn ok\n}\n\nvar (\n\tnextID    = 0\n\tisLocked  = false\n\tfeedbacks map[int]Feedback\n\townerAddr = std.Address(\n\t\"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7\"\n\t)\n\tmodsAddrs = newAddrSet(\n\t// TODO: add mod wallets\n\t)\n)\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || modsAddrs.Has(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tnextID++\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n    assertIsModerator()\n    assertNotLocked()\n\n    feedback, ok := feedbacks[feedbackID]\n    if !ok {\n        panic(\"Feedback not found\")\n    }\n\n    response = strings.TrimSpace(response)\n    if response == \"\" {\n        panic(\"Response can't be empty\")\n    }\n\n    if len(response) \u003e maxCharsCount {\n        panic(\"Response is too long\")\n    }\n\n    feedback.RespondAt = time.Now()\n    feedback.Responses = append(feedback.Responses, response)\n    feedbacks[feedbackID] = feedback\n\n    return \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(path string) string {\n    sb := strings.Builder{}\n    sb.WriteString(\"# Feedback Collection\\n\")\n    for id, fb := range feedbacks {\n        sb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n        sb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n        if fb.Content == \"\" {\n            sb.WriteString(\"*Feedback was removed by moderator*\")\n        } else {\n            sb.WriteString(fb.Content)\n        }\n        sb.WriteString(\"\\n\")\n\n        for _, resp := range fb.Responses {\n            sb.WriteString(\"### Response\")\n            sb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.RespondAt.Format(time.RFC1123)))\n            sb.WriteString(resp)\n            sb.WriteString(\"\\n\\n\")\n        }\n    }\n    return sb.String()\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"wHeyfszMsWsCBgVe1NhWHPsv2Zj7oAbQcFecaOcjrq9PPD7WNY/u5/B2qoYdejwVi/PVIrhLIwybD8w4Waw0fw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371060"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v1","Path":"gno.land/r/sdm95/feedback/v1","Files":[{"Name":"package.gno","Body":"package v1\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\ntype addrSet map[std.Address]struct{}\n\nfunc newAddrSet(items ...std.Address) addrSet {\n\tset := make(addrSet, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nfunc (s addrSet) Has(addr std.Address) bool {\n\t_, ok := s[addr]\n\treturn ok\n}\n\nvar (\n\tnextID    = 0\n\tisLocked  = false\n\tfeedbacks map[int]Feedback\n\townerAddr = std.Address(\n\t// TODO: put realm's owner address\n\t)\n\tmodsAddrs = newAddrSet(\n\t// TODO: add mod wallets\n\t)\n)\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || modsAddrs.Has(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tnextID++\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(path string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"},{"Name":"gno.mod","Body":"module gno.land/r/sdm95/feedback/v1\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"XioLJYHBwUXZ4fZ0AV3k4TSs7pNNHRRL1uBt/KE1CzkbCNVvaNOUYXjaBnh3HuKiCGF219xugC80VWHFkW6Csg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371062"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","package":{"Name":"realmfeedbacktest","Path":"gno.land/r/feedback/realmfeedbacktest","Files":[{"Name":"realmfeedbacktest.gno","Body":"package v1\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponses []string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\ntype addrSet map[std.Address]struct{}\n\nfunc newAddrSet(items ...std.Address) addrSet {\n\tset := make(addrSet, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nfunc (s addrSet) Has(addr std.Address) bool {\n\t_, ok := s[addr]\n\treturn ok\n}\n\nvar (\n\tnextID    = 0\n\tisLocked  = false\n\tfeedbacks map[int]Feedback\n\townerAddr = std.Address(\n\t\"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t// TODO: add mod wallets\n\t)\n)\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || modsAddrs.Has(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tnextID++\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n    assertIsModerator()\n    assertNotLocked()\n\n    feedback, ok := feedbacks[feedbackID]\n    if !ok {\n        panic(\"Feedback not found\")\n    }\n\n    response = strings.TrimSpace(response)\n    if response == \"\" {\n        panic(\"Response can't be empty\")\n    }\n\n    if len(response) \u003e maxCharsCount {\n        panic(\"Response is too long\")\n    }\n\n    feedback.RespondAt = time.Now()\n    feedback.Responses = append(feedback.Responses, response)\n    feedbacks[feedbackID] = feedback\n\n    return \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(path string) string {\n    sb := strings.Builder{}\n    sb.WriteString(\"# Feedback Collection\\n\")\n    for id, fb := range feedbacks {\n        sb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n        sb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n        if fb.Content == \"\" {\n            sb.WriteString(\"*Feedback was removed by moderator*\")\n        } else {\n            sb.WriteString(fb.Content)\n        }\n        sb.WriteString(\"\\n\")\n\n        for _, resp := range fb.Responses {\n            sb.WriteString(\"### Response\")\n            sb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.RespondAt.Format(time.RFC1123)))\n            sb.WriteString(resp)\n            sb.WriteString(\"\\n\\n\")\n        }\n    }\n    return sb.String()\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"EwxxCmMaFMBiNTU5Bmr2aKvDsdwwKY96j21NsY1ATDJbHJLwmqq3dsLKFZn/W9pDDrRuBcZPlSzNO5lYM8VBOA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371064"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","package":{"Name":"realmfeedbacktest","Path":"gno.land/r/feedback/realmfeedbacktest","Files":[{"Name":"realmfeedbacktest.gno","Body":"package realmfeedbacktest\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponses []string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\ntype addrSet map[std.Address]struct{}\n\nfunc newAddrSet(items ...std.Address) addrSet {\n\tset := make(addrSet, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nfunc (s addrSet) Has(addr std.Address) bool {\n\t_, ok := s[addr]\n\treturn ok\n}\n\nvar (\n\tnextID    = 0\n\tisLocked  = false\n\tfeedbacks map[int]Feedback\n\townerAddr = std.Address(\n\t\"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t// TODO: add mod wallets\n\t)\n)\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || modsAddrs.Has(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tnextID++\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n    assertIsModerator()\n    assertNotLocked()\n\n    feedback, ok := feedbacks[feedbackID]\n    if !ok {\n        panic(\"Feedback not found\")\n    }\n\n    response = strings.TrimSpace(response)\n    if response == \"\" {\n        panic(\"Response can't be empty\")\n    }\n\n    if len(response) \u003e maxCharsCount {\n        panic(\"Response is too long\")\n    }\n\n    feedback.RespondAt = time.Now()\n    feedback.Responses = append(feedback.Responses, response)\n    feedbacks[feedbackID] = feedback\n\n    return \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(path string) string {\n    sb := strings.Builder{}\n    sb.WriteString(\"# Feedback Collection\\n\")\n    for id, fb := range feedbacks {\n        sb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n        sb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n        if fb.Content == \"\" {\n            sb.WriteString(\"*Feedback was removed by moderator*\")\n        } else {\n            sb.WriteString(fb.Content)\n        }\n        sb.WriteString(\"\\n\")\n\n        for _, resp := range fb.Responses {\n            sb.WriteString(\"### Response\")\n            sb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.RespondAt.Format(time.RFC1123)))\n            sb.WriteString(resp)\n            sb.WriteString(\"\\n\\n\")\n        }\n    }\n    return sb.String()\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"dFPoPf9hEMIDa7IIzvwFZlBtxb6uyXN6mhRwHf95GFZUi9CtukmZ8tr9A4wpzXKkXDAp/ZPSmN5/JPyOjSZQ2A=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371066"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v2","Path":"gno.land/r/sdm95/feedback/v2","Files":[{"Name":"package.gno","Body":"package v2\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\ntype addrSet map[std.Address]struct{}\n\nfunc newAddrSet(items ...std.Address) addrSet {\n\tset := make(addrSet, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nfunc (s addrSet) Has(addr std.Address) bool {\n\t_, ok := s[addr]\n\treturn ok\n}\n\nvar (\n\tnextID    = 0\n\tisLocked  = false\n\tfeedbacks map[int]Feedback\n\townerAddr = std.Address(\n\t// TODO: put realm's owner address\n\t)\n\tmodsAddrs = newAddrSet(\n\t// TODO: add mod wallets\n\t)\n)\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || modsAddrs.Has(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tnextID++\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(path string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"},{"Name":"gno.mod","Body":"module gno.land/r/sdm95/feedback/v2\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"CVX6jZXYjuIiyYy8WbI5GJ7Jujdz8Exs/Te35kaNJxFPKnUMWYsHh+YH0QNDltBE3UAMnvtRO4Ogq0Q0UaH6Wg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371068"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test10/poll","func":"Vote","args":["asdsad"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"6m/vvNgfxGwzjSacrlGMQ88XP49UcraXv8eVN9Bs83wS6NmN4KpG+tX6/sLX7w7TUOggQiKP8RAT5eq4d0dfMQ=="}],"memo":"Called through gno.studio"},"blockNum":"371072"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v2","Path":"gno.land/r/x1unix/feedback/v2","Files":[{"Name":"package.gno","Body":"package v2\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\ntype addrSet map[std.Address]struct{}\n\nfunc newAddrSet(items ...std.Address) addrSet {\n\tset := make(addrSet, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nfunc (s addrSet) Has(addr std.Address) bool {\n\t_, ok := s[addr]\n\treturn ok\n}\n\nvar (\n\tnextID    = 0\n\tisLocked  = false\n\tfeedbacks map[int]Feedback\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\"\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\"\n\t)\n)\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || modsAddrs.Has(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tnextID++\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(path string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"},{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v2\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"IwxMw9MM+9Z75wQYlXUKscDvtq6Pr66ns/RCH2O4b69N/bB3pVy9Wo2+dhGsmh1gHB1GctHzpHVZcANNcsYHDg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371079"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v2","Path":"gno.land/r/x1unix/feedback/v2","Files":[{"Name":"package.gno","Body":"package v2\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\ntype addrSet map[std.Address]struct{}\n\nfunc newAddrSet(items ...std.Address) addrSet {\n\tset := make(addrSet, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nfunc (s addrSet) Has(addr std.Address) bool {\n\t_, ok := s[addr]\n\treturn ok\n}\n\nvar (\n\tnextID    = 0\n\tisLocked  = false\n\tfeedbacks map[int]Feedback\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || modsAddrs.Has(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tnextID++\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(path string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"},{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v2\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"tlC4DfpZsFfd5qrzpiOMTEFyLrHlaZfqE5y+UYFzo8EKiAT4b7YL33ZEiy3ndLWn7ixeudCp3Q0ALi+E23WX+w=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371081"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1np2s2gwq2ht0ulrvrdpzq9avkuhz0xqn448yll","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"6zgsi17Ns3Z623AIdLltiIoWBWPXZ4EF0DN4+OmnPtc6dbiFOFCHnB9hFkxfp+R12KLSnQy9Jfibndzrwue6jA=="}],"memo":""},"blockNum":"371085"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"P0CfkVoRAowcqCk1PpBIcbumLUn43tJEvcshepCun4kxaq3i8KlxcuRrGfphz3b+GDG4pR+tkHjLtmHJdOH4jg=="}],"memo":""},"blockNum":"371099"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"64iSHNMXXSZYcSXvXHKDUIZrLnARy1yDwrcWpnvb0mhSlUbxMxGIB/hv3QENVIj+Mwho9YdbnTMjDwGgfcEl8A=="}],"memo":""},"blockNum":"371101"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"CZTSn1COjvzUoLnecoqBdEl/N5Rah6BStfDdpc1M6qcj7wZoynRMRGoVP4uiIUEavVLbMnZO+g1IJndDnbbk+w=="}],"memo":""},"blockNum":"371103"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"8C1Ty6Xj2TdMYjUsNVde2ouWiIfCii7VWyQWSBE4kv0TiLt/yZ7V0Aqk/JM5n9iU/ekWAuT+ue7NFj7VbPwfmw=="}],"memo":""},"blockNum":"371105"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v2","Path":"gno.land/r/x1unix/feedback/v2","Files":[{"Name":"package.gno","Body":"package v2\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\ntype addrSet map[std.Address]struct{}\n\nfunc newAddrSet(items ...std.Address) addrSet {\n\tset := make(addrSet, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nfunc (s addrSet) Has(addr std.Address) bool {\n\t_, ok := s[addr]\n\treturn ok\n}\n\nvar (\n\tnextID    = 0\n\tisLocked  = false\n\tfeedbacks map[int]Feedback\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || modsAddrs.Has(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tnextID++\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(path string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"},{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v2\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"Jk5KQBQ+Nwbq4KKdqqf4QQvYetkvscMtF5X1TLVBYIAHA6poccAKv7quVjKtvBA5ldtES1w8lO8vDaYpGPhOuA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371108"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1h4tg9p2tf4krkrd2jqecs0wgtfpp9d5yp4l0tl","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"ofLX8wke7Kyyru0asL4nSFPXOkhpRFSh2xcnllRSm7A+LVkl831PbZ1PrTYbdgQ1Psww0a9ciXuIQ9ramsYOLQ=="}],"memo":""},"blockNum":"371111"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g12hz77yewaymym0uv08880e375z64esq4dandtk","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"aer37Da06uWD9JdEttO4sJerp7rCMVd/Cs1XjUjSqeJFdHhd8XoCbqmqyaxKUgtnJ4/+qXGL5PFo1n6QvQgCyA=="}],"memo":""},"blockNum":"371115"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1ctgqx0uc7qdvxur3j43p20sc4hev43ugrt0cw3","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"wEdpngpzjTtnaMIAyzc8UJ23hdnzBzuJledPQmLn+rpQ8otVlNSmRcmmpO4dfApKU+6zyNoi7B1wbCW4LdrmyQ=="}],"memo":""},"blockNum":"371122"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1uw2z2pusvmtlsu6ljrzcgzw4fxm3k6z3e72fg7","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"/z1lRJI96G2zf1mbQPwnKfC8ZNwVTKMLIgGFLKVYM01SVr93wfOAtUh7vaFva42PpVrT8WcLPbRP7CmcaJi+Sw=="}],"memo":""},"blockNum":"371136"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1uw2z2pusvmtlsu6ljrzcgzw4fxm3k6z3e72fg7","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"nQ5/9jY7FJ2JBw+kUjGbz2qKPx2XyodwwgMyi0z5gHolYri83W/rjkm0Pcu0Uxfmq93A0hdSEriGyqH3SMvXtA=="}],"memo":""},"blockNum":"371139"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"rp7U9/ws32bKcyeATtHH2AND/79rThQUvH9RqH9KQfR3FR5oa6e/atxuwdoGWenoKl+MsmxtBnWMOOf9Czj98w=="}],"memo":""},"blockNum":"371141"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/boom/boom","func":"Render","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"7SRfOX4lAY9viBFQVlruu/7Rs1fM2L5tij8+u8yt0q4Gt9LDFK6YjxfTv/+C4BJN38YB81S5z4Mrmd9O6cZLcg=="}],"memo":"Called through gno.studio"},"blockNum":"371143"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1uw2z2pusvmtlsu6ljrzcgzw4fxm3k6z3e72fg7","package":{"Name":"33","Path":"gno.land/r/22/33","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AolARWXEd4abYy3L+zXQ0lNO8Pf8JPx5g5dOVxShUm93"},"signature":"iI7MxarGFR4PePZzGTFDVU/tHOR4JaOTqu70Coj3shY8s3zs/3Uz3ic/0JqL2qDDqkDK5DfgefQxCecBjUIsog=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371145"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1uw2z2pusvmtlsu6ljrzcgzw4fxm3k6z3e72fg7","package":{"Name":"33","Path":"gno.land/r/22/33","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AolARWXEd4abYy3L+zXQ0lNO8Pf8JPx5g5dOVxShUm93"},"signature":"uMOIvckC9owoe9JpX5eX8knww2LujiZiAnnDRu0UiSIrwzc1WpYefUWpgCLm7sO1ysqV+b2FCrKHN+euRvFScg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371147"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1uw2z2pusvmtlsu6ljrzcgzw4fxm3k6z3e72fg7","package":{"Name":"agdewgvdsc","Path":"gno.land/p/22asdg/agdewgvdsc","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AolARWXEd4abYy3L+zXQ0lNO8Pf8JPx5g5dOVxShUm93"},"signature":"f5uMbvSrWp8hzT3nda/5U1YPrNXd4FbOmXFF00jg1G8ThggTXFmR+Z5eeoyce3NC57AakmkCV4QwndcjullcXw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371149"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1lh9m4un79rkcna3kzk2qav2nzu4c2rrn3599kt","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"CUtAYZiwPb2ulLWJlZWVbIGx9pxM42m+QV+cGDUrMg5yFB7DE8CMJcTKGjpeSPEPw6/zX26fA1ZT5KngU/M7JQ=="}],"memo":""},"blockNum":"371152"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1rkajd7ftnnv4v4kwgnsw7rqahqjcnqlafcjjhe","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"a7FCPHZVTJwtCBkq0cx6Q8+4lFmz0fAvCrmc0nw+VZ0Jx0Wu/dI/5BT/35/UCFAarEHh7Y610nQ+Jqkif0j6iQ=="}],"memo":""},"blockNum":"371158"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1yutkjdxs7ug393zdcp94c9nen7md9zuxme8vk9","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"5rDVIUWUmCTwGjzZe8N/njUm3HiIQOZNCkMIt0bfxu4zHnOZtm4S7V/2A+KlTKzpkNvqRHs4I0EoeenTYqm1bA=="}],"memo":""},"blockNum":"371161"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v2","Path":"gno.land/r/x1unix/feedback/v2","Files":[{"Name":"package.gno","Body":"package v2\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\ntype addrSet map[std.Address]struct{}\n\nfunc newAddrSet(items ...std.Address) addrSet {\n\tset := make(addrSet, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nfunc (s addrSet) Has(addr std.Address) bool {\n\t_, ok := s[addr]\n\treturn ok\n}\n\nvar (\n\tnextID    = 0\n\tisLocked  = false\n\tfeedbacks map[int]Feedback\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || modsAddrs.Has(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tnextID++\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(path string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"},{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v2\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"8IwNZUc1hKgVbGQ3CCaxgSHeAEVxOehEPDKgaH8Gzr5toI0Q51HUa1C1DQ+mMx/Z24OUFEG3tK4ne4u4khD/wQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371163"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","package":{"Name":"hello","Path":"gno.land/r/test99/hello","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  panic(\"asd\")\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"8+6YqCpLlCfFyOk9Xqne71FVZgvI5AObwsGkmeM1pKoTVt5TtEss8MqIkV1pimymiyjBNqVvAavPSLt0QWVD7A=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371167"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test99/hello","func":"Render","args":["asdads"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"0O1N6LPHsBDljnuHotRC0IC/qGV3GPZ9ywN/MD+cS2AqJ+LkS6s4YxAL0nMQzTl9NW7L8Fw//9Ozq65vDBSL+w=="}],"memo":"Called through gno.studio"},"blockNum":"371169"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1ep3ph73zszfygrfkautdz79dz2d3nwvxcwg4kp","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"WjnCVGfrUxa4rjusnvX0woL9yi5Ihv7xqyE07ne7rJNRWO4+IiyH2IoGCikCFFKFyCEXjy6cRRHLxptAnlIs+A=="}],"memo":""},"blockNum":"371171"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","package":{"Name":"example1","Path":"gno.land/r/jeronimoalbi/example1","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"BHoFn1gj8FhoJ6RatsEDkFG//5/AYXDmwXF8oXLBycp+BaAVRuwoGBB7c7IQkRge4nRz6Y74nfjixKpYuVnKhQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371179"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","package":{"Name":"example1","Path":"gno.land/r/jeronimoalbi/example1","Files":[{"Name":"package.gno","Body":"package example1\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"vKCLFghEeW7V8eFOE55GDMY3fB3sFckv1FPYEJMu8RdHbCvysH2GRgUatmTFEkHKH86l+nDLnMxD4qVRWp+peQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371181"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"EwuO9PmKQqY3NKIgTOUpD5wEOqXR86ERYdvBmtlxYjInHCD9Q7bG0aTt4p3SEQAy4L+lycOzW3xymxGBBg1w0g=="}],"memo":""},"blockNum":"371183"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v2","Path":"gno.land/r/x1unix/feedback/v2","Files":[{"Name":"package.gno","Body":"package v1\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\ntype addrSet map[std.Address]struct{}\n\nfunc newAddrSet(items ...std.Address) map[std.Address]struct{} {\n\tset := make(addrSet, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nfunc has(s addrSet, addr std.Address) bool {\n\t_, ok := s[addr]\n\treturn ok\n}\n\nvar (\n\tnextID    = 0\n\tisLocked  = false\n\tfeedbacks map[int]Feedback\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"\",\n\t)\n)\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || has(modsAddrs, actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tnextID++\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(path string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"},{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v2\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"iHLLh256NuDnY6pQVGZEw4R4AH4TGvr1MF7NkzTPCo8o2+tb4h2+NvSfAq1W0h17BfzKApG+5rS3uZ8zonPYbA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371185"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v2","Path":"gno.land/r/x1unix/feedback/v2","Files":[{"Name":"package.gno","Body":"package v2\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\ntype addrSet map[std.Address]struct{}\n\nfunc newAddrSet(items ...std.Address) map[std.Address]struct{} {\n\tset := make(addrSet, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nfunc has(s addrSet, addr std.Address) bool {\n\t_, ok := s[addr]\n\treturn ok\n}\n\nvar (\n\tnextID    = 0\n\tisLocked  = false\n\tfeedbacks map[int]Feedback\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"\",\n\t)\n)\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || has(modsAddrs, actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tnextID++\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(path string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"},{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v2\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"2B0z8jjFd7Jx/nHDShoyLF30nAXc8Hro++KjdOyKQcR7KaSRd02ptMSbd4vVsF8EqYdXtXOYjllNjfi4uxGjYw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371187"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"FVC/YIsw+3PS4I13OfVNLasR2F23QTchiyy2870hLEp7qNkKLzIC1nhxFd1/d18jUpWE9/pRieZkGkF1q0hjkQ=="}],"memo":""},"blockNum":"371189"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v2","Path":"gno.land/r/x1unix/feedback/v2","Files":[{"Name":"package.gno","Body":"package v2\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nfunc newAddrSet(items ...std.Address) map[std.Address]struct{} {\n\tset := make(addrSet, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nfunc has(s addrSet, addr std.Address) bool {\n\t_, ok := s[addr]\n\treturn ok\n}\n\nvar (\n\tnextID    = 0\n\tisLocked  = false\n\tfeedbacks map[int]Feedback\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"\",\n\t)\n)\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || has(modsAddrs, actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tnextID++\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(path string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"},{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v2\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"c79rBSLeiD5iE/gZ6jVfossmrKgOcVrfAi62gbeEYXVjPLel8L11QV//QmeT+sbmMj8X4nxr2P3VRfNQ9WT8cg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371191"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"xrIfA3EYxBrz32q3gVq3mQSPOhdpXOJPXtJjkyzGrxdDvy6hZYABx0esnZ28zLuSu208+em2liDWzTH1PhpE5g=="}],"memo":""},"blockNum":"371193"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v2","Path":"gno.land/r/x1unix/feedback/v2","Files":[{"Name":"package.gno","Body":"package v2\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nfunc newAddrSet(items ...std.Address) map[std.Address]struct{} {\n\tset := make(addrSet, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nfunc has(s map[string]struct{}, addr std.Address) bool {\n\t_, ok := s[addr]\n\treturn ok\n}\n\nvar (\n\tnextID    = 0\n\tisLocked  = false\n\tfeedbacks map[int]Feedback\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"\",\n\t)\n)\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || has(modsAddrs, actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tnextID++\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(path string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"},{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v2\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"2Xaq9/sb0a6v528DrmcY86m86lci5H/slsVyyl6zwpEsODzvlQzHufk6yrg5g73Y0XSWhbAIammMr7xioPOI/w=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371195"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v2","Path":"gno.land/r/x1unix/feedback/v2","Files":[{"Name":"package.gno","Body":"package v2\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nfunc newAddrSet(items ...std.Address) map[std.Address]struct{} {\n\tset := make(map[string]struct{}, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nfunc has(s map[string]struct{}, addr std.Address) bool {\n\t_, ok := s[addr]\n\treturn ok\n}\n\nvar (\n\tnextID    = 0\n\tisLocked  = false\n\tfeedbacks map[int]Feedback\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"\",\n\t)\n)\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || has(modsAddrs, actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tnextID++\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(path string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"},{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v2\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"aALMNneTPlUMhjC5WjzHTYs4IpQPoJ+uH2aSX2YdkxYWSSE8LZGlEWANi5RtrWKbsfvXGkJ/sML0BAn2lYc1Ew=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371197"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"3kNuhh40Vtf4WBt9/7KN3p88N4LJPApP3BhM2qAFNbM09PR6ADIGFJlHWvI49EIR4w2iDFV2ADz6qEUO5xD86Q=="}],"memo":""},"blockNum":"371199"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v2","Path":"gno.land/r/x1unix/feedback/v2","Files":[{"Name":"package.gno","Body":"package v2\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nfunc newAddrSet(items ...std.Address) map[std.Address]struct{} {\n\tset := make(map[std.Address]struct{}, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nfunc has(s map[string]struct{}, addr std.Address) bool {\n\t_, ok := s[addr]\n\treturn ok\n}\n\nvar (\n\tnextID    = 0\n\tisLocked  = false\n\tfeedbacks map[int]Feedback\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"\",\n\t)\n)\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || has(modsAddrs, actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tnextID++\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(path string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"},{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v2\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"jgmyDcxx+ghv0kyN6CrWwkmxCT+mzt2WARiWxpEuFllLS6+n/eCKxxJBDxuenx7QRZR6dOFahJ5YO4Pekdr/Yw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371201"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v2","Path":"gno.land/r/x1unix/feedback/v2","Files":[{"Name":"package.gno","Body":"package v2\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nfunc newAddrSet(items ...std.Address) map[std.Address]struct{} {\n\tset := make(map[std.Address]struct{}, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nfunc has(s map[std.Address]struct{}, addr std.Address) bool {\n\t_, ok := s[addr]\n\treturn ok\n}\n\nvar (\n\tnextID    = 0\n\tisLocked  = false\n\tfeedbacks map[int]Feedback\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"\",\n\t)\n)\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || has(modsAddrs, actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tnextID++\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(path string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"},{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v2\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"CwMy/xlP/behkYYkzO9OaN6zaEr7iPe9O2bMZgB4K2YG2Q9/eHgCFUouuW6RiqMzmBIdFfqT6ZeeikRGM8NpUA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371203"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"LciaLtky8gHf1kcaVesvdNAfh5QyF1dK/oDy5p5GDoB0vmj0McSFEj1BnKzKAFMRQEGagYrcvjkeJrd+n04OCg=="}],"memo":""},"blockNum":"371207"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"fK+6ipVGyq0cbrYobazk6supz86RNmnFGUVuWvXQU5l2eemlIM1vjYrxsFAMtqOYZytdB1jS1MLnjHMQQatUHQ=="}],"memo":""},"blockNum":"371209"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"efBZscpFvmJWzmHSln6HAsoIeGCzAbo2Zit5IUPpjENgD5YFSp4cH+fGKXGDhDTL9Lvs43PWAS4qN3xOe8jjaw=="}],"memo":""},"blockNum":"371211"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","package":{"Name":"testpoll","Path":"gno.land/r/jeronimoalbi2/testpoll","Files":[{"Name":"package.gno","Body":"package testpoll\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar answerLabels = map[Choice]string{\n\tChoiceThisMonth:        \"This month\",\n\tChoiceThisYear:         \"This year\",\n\tChoiceOneOrTwoYearsAgo: \"1-2 years ago\",\n\tChoiceSinceInception:   \"Since its inception\",\n}\n\nvar (\n\trealmURL string\n\tadmin    std.Address\n\tpoll     = Poll{\n\t\tQuestion:  \"When did you first learn about Gno.land?\",\n\t\tVotingURL: \"https://gno.studio/connect/gno.land/r/gnoyourdate/poll?network=test3\u0026tab=functions#Vote\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n)\n\nfunc init() {\n\trealmURL = \"https://test3.gno.land\" + strings.TrimPrefix(std.CurrentRealmPath(), \"gno.land\")\n\tadmin = std.GetOrigCaller()\n}\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion     string\n\t\tVotingURL    string\n\t\tAnswers      []Answer\n\t\tParticipants []std.Address // TODO: Use AVL tree for better search performance?\n\t\tEnded        bool\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice Choice\n\t\tCount  uint\n\t}\n)\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) uint {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn a.Count\n\t\t}\n\t}\n\treturn 0\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, a := range p.Participants {\n\t\tif a == addr {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\n// Vote submits a vote for one of the poll choices.\n//\n// Only one of the choices should be selected to consider the vote as valid.\n// The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\n//\n// When did you first learn about Gno.land?\n// - This month\n// - This year\n// - 1-2 years ago\n// - Since its inception\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tassertPollIsActive()\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tcaller := std.GetOrigCaller()\n\tassertFirstVote(caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Count++\n\t\t\tpoll.Participants = append(poll.Participants, caller)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted yes on \"%s\" you can check out the result at %s`,\n\t\tanswerLabels[choice],\n\t\trealmURL,\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Poll: %s\\n\", poll.Question))\n\n\tif poll.Ended {\n\t\tbuf.WriteString(\"The poll has ended\\n\")\n\t} else {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"You can participate in the poll by [submitting your vote](%s)\\n\", poll.VotingURL),\n\t\t)\n\t}\n\n\tbuf.WriteString(\"### Answers:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", answerLabels[c], poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\", len(poll.Participants)),\n\t)\n\n\treturn buf.String()\n}\n\n// EndPoll ends the poll to stop receiving new votes.\nfunc EndPoll() string {\n\tassertCallerIsAdmin()\n\tassertPollIsActive()\n\n\tpoll.Ended = true\n\treturn \"Poll ended successfully\"\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"No choice has been selected, you should submit a vote for one of the answers.\\n\" +\n\t\t\t\t\"Only one of the choices should be selected to consider the vote as valid.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple choices has been selected, you should submit a vote for only one answer.\\n\" +\n\t\t\t\t\"The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\",\n\t\t)\n\t}\n}\n\nfunc assertPollIsActive() {\n\tif poll.Ended {\n\t\tpanic(\"Poll has ended\")\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tfor _, a := range poll.Participants {\n\t\tif a == addr {\n\t\t\tpanic(\"This address already voted\")\n\t\t}\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Forbidden\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"mfxqPGP96LLIzEvGpXa1SyWcziJpjnW36J5n0wt7t6MLUGoxawVahBTDYz540dTCxLT1YOwDc1wsTsIl4d7yDQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371213"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15wmukt79xymnnu6c4de32trnufudqum60yrxu8","send":"","pkg_path":"gno.land/r/test10/poll","func":"Vote","args":["test"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6QxDeE9T4utsKFysdC0JZTyVwnc4UgqQ7vhHJf5pp+p"},"signature":"Wn1517HPMuQ3BPJlzNlorbVcLPnyjA76WWzEKnm29po8AihHFSc9kWrkSaHh7myHq1dRatLyIShUx8LWZc603Q=="}],"memo":"Called through gno.studio"},"blockNum":"371220"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15wmukt79xymnnu6c4de32trnufudqum60yrxu8","send":"","pkg_path":"gno.land/r/test10/poll","func":"Vote","args":["test"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6QxDeE9T4utsKFysdC0JZTyVwnc4UgqQ7vhHJf5pp+p"},"signature":"wqV7SLgTx7SRJrC4P4DMKNc9lgzEwSigi+V/QhXSWq9SHSoV7VCPG3EylQpKiMuPU7FlDxFXV0aGY6bCeHSrXQ=="}],"memo":"Called through gno.studio"},"blockNum":"371231"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"rpoQZES+TbdYMwRjEw7t4s1HBT3EI+ST2IG8NCEMybt1hlMO2dlpbbGTzCdwVMDy0HJruV62H3NshLUtL+EMeQ=="}],"memo":""},"blockNum":"371235"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"gTsUlXkH953PIdIQ0zYNMshvzr+AicpesBZtBC7LltYe/Eo1HGFfVOCEBEnf+nvYVgPg6McowdBNPbSPtRgaxA=="}],"memo":""},"blockNum":"371237"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"GCM/fuNQeKP4l3ArDfjYGbRKHsVzcg34bmXZCkrHbulRZ9D8uB/ohHvkv/LIL9nN+QAuv4VAjXNV2wjjeIYT7g=="}],"memo":""},"blockNum":"371239"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"QyWbCugziU1wEfh7TMyHE478odndWsPcMFgImWPay+ospLEDn8qIKrRGPZ1YJ/+MEb78Ek0+jUHt3v84dKa0Gg=="}],"memo":""},"blockNum":"371243"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"qFfJCteGaNQwnCbq6vch9eY90lVmfhnBeISQC9Zfi5dTvO2nrYGKE13Bg7bE74etf/ysYrImNVpdfNpZO6MPSw=="}],"memo":""},"blockNum":"371245"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"UIKCWs/+bZiJuS1n8s4pW8Dxr7yLg6JOzFILimjbjlAp0/La6wEi4dzsHwPAr+DqKmLQDQO9kPhjRJwg2VL/9w=="}],"memo":""},"blockNum":"371249"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"7VE5m4RnQrRJACz2XWrcbNkSJ7MrQolG2lg4hNdkmBwEXD5CnRvyZYy/6MIkc508I2KOHLJV8Q+jTiJh/R8k1A=="}],"memo":""},"blockNum":"371251"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"qZu6VOUCe+pNwjGfUlmkfHupRyfJJLF5OmQ68Ti51GFlEwDjJIa/HRSDEQqYzLznQmifCnUr/eBB6nmLIllz1A=="}],"memo":""},"blockNum":"371253"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"0ZMWme3rZe3RyIstW09DosHwRLcnL1EOz1YaSKSfVukFDLIDzGJbrOeMKC9/upRZ6+cXSCPf4riMNkITCPsttw=="}],"memo":""},"blockNum":"371255"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"hpJi0e5YyNYK5zurLTTU9r6Kl5Fmz5ENjLBgUTBKt90aTdwf5jSrFdbyOKKh/gyv4JVxEHrp95ToZ4Wq45dimg=="}],"memo":""},"blockNum":"371257"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test10/poll","func":"Vote","args":["Red"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"vi2HTDGG99YgZlR1W4dHmSJ8/bZs+s+dIOm4O5HyPcMTyP6BDM3n+5A1CrVgO0WdvLMZe8EbnyTQQfd9hQ2bCQ=="}],"memo":"Called through gno.studio"},"blockNum":"371259"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"+z5JlHnfPtOsG5QHLwOVitcbJyXds6GxB74xg0E+huMF5stHdfihSCFBQGKAVxwUwXfqrENHzjWdqbowf1MkDA=="}],"memo":""},"blockNum":"371261"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"wAyt8Z8YDZ4Wf9u9bJPwaYOXJzcoxzg6OiV5ca2WY/hesfAtLhet85OP2+FcTuMHDU7xfEy351GfRpv2TEqu5g=="}],"memo":""},"blockNum":"371263"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/demo12/hello","func":"Render","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"ElaO0hr3+1uZ/fNkYsgI0elPRCXMX3iE3I0DHGqbCQ4RR2sgnNBdx3dfXTmRMIiLHoDCEasXczVqcJLVJ0pjJw=="}],"memo":"Called through gno.studio"},"blockNum":"371266"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g15m6aajcafau8dy7nes9c5ejse5wtfgc6gcfmrg","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"SnKlJx7VzRdoYLoO7H8tEx9r9xHEcy+fEmWzYqrCJ7guOoICWckb6mcS5VleQOo3CRYfL/mhqCC2zy71C5M1NA=="}],"memo":""},"blockNum":"371269"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1322347tt6wuluc2vl8ym7ccfv7lf27t8pdnmre","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"UrFj+HTamtkN5axFSx9yvFfDEsje8ndVmIfZmWHIb+UeeQdxzuTPczfGrvYBkLAskNcriz1rKnarn1N9Dw6AiQ=="}],"memo":""},"blockNum":"371271"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1a0dj0866qn2ymus22fdpwgj58rmx526s3kck83","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"pLTC9c06ZrUhqj7VBhicNyMdxJ8p3rO9qTihTYDq8S5fdQlWZw7A+vslY7zrlKIByaAVpqWn9L1Y9Cl3J4gpZA=="}],"memo":""},"blockNum":"371274"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1hwnmzlurjxh4kfd2u64jqh7q50wu55vk408em5","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"7jean9ju7oKLQrY+v1XquPg7Fr7M1ZNjzXjNFHgcVCoCCjo+RwNv1hmClea5JL9JAhFTVeGgDIs8JC3As97riQ=="}],"memo":""},"blockNum":"371283"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1nujevt48ft2hn23nfs8wvggde4j8wm7457d0kj","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"WtFTkB+YfQ7rUCAp1gEeCZVVOvhdB/UTarJpk6WkOlku71GFjtx3/Um/un+MxWS+FYoU6439DSwSiC9VguT2cA=="}],"memo":""},"blockNum":"371287"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test10/poll","func":"Vote","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"UGthRMoCa9C/af7CFSUdPNBFI0bPLSVAeFva9OTGEppoB22Q5Sc7sBf7OMFWWYQOWhTDfD0fyWkrgdl8lEqJXQ=="}],"memo":"Called through gno.studio"},"blockNum":"371305"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test10/poll","func":"Vote","args":["Blue"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"GTMkHyKxStewqDjmOeVhSwB0uMx5laPAaTx0P2Pa7II5MgUMS5nhBNK/3//KKQzsE5vGs+3s6XSQzRNKmlYiRQ=="}],"memo":"Called through gno.studio"},"blockNum":"371307"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1kq9tf4wlpawsysxvz9s2ql0lf2jqyz3p20dajm","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"17JitIJe1zRyTVsdqbpVtUnWqzzJP5oftHKuAV+/TeJgVxgC5XnCWb0CQAQQNylq034TsFysVx+4YHwkj3qd+g=="}],"memo":""},"blockNum":"371310"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v2","Path":"gno.land/r/x1unix/feedback/v2","Files":[{"Name":"package.gno","Body":"package v2\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/seqid\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        seqid.ID\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nfunc newAddrSet(items ...std.Address) map[std.Address]struct{} {\n\tset := make(map[std.Address]struct{}, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nvar (\n\tnextID    seqid.ID\n\tisLocked  = false\n\tfeedbacks map[seqid.ID]Feedback\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\nfunc isModerator(addr std.Address) bool {\n\t_, ok := modsAddrs[addr]\n\treturn ok\n}\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || isModerator(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID.Next()\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID seqid.ID) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove a harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by a moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID seqid.ID, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(path string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by a moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n\n"},{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v2\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n\tgno.land/p/demo/seqid v0.0.0-latest\n)"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"x83NaUL+Mu7gOWcySBBJKPjDsnri38Qjn6cSi28HvMVsxNzJtXaZiGn/oqUzj2d0L5AXIkYkqq+yL/dJhYC2WQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371313"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v3","Path":"gno.land/r/x1unix/feedback/v3","Files":[{"Name":"package.gno","Body":"package v3\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/seqid\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        seqid.ID\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nfunc newAddrSet(items ...std.Address) map[std.Address]struct{} {\n\tset := make(map[std.Address]struct{}, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nvar (\n\tnextID    seqid.ID\n\tisLocked  = false\n\tfeedbacks map[seqid.ID]Feedback\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\nfunc isModerator(addr std.Address) bool {\n\t_, ok := modsAddrs[addr]\n\treturn ok\n}\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || isModerator(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID.Next()\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID seqid.ID) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove a harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by a moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID seqid.ID, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(path string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by a moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n\n"},{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v3\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n\tgno.land/p/demo/seqid v0.0.0-latest\n)"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"59q49HmK0g9icrPcLY9EmjxEcCvJr686vchHVpIFBVI6S1cLtfHjQAlLYDy/hCc/9iQs3Jcum2dfA8gb4veM4A=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371315"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v3","Path":"gno.land/r/x1unix/feedback/v3","Files":[{"Name":"package.gno","Body":"package v3\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        uint64\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nfunc newAddrSet(items ...std.Address) map[std.Address]struct{} {\n\tset := make(map[std.Address]struct{}, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nvar (\n\tnextID    uint64\n\tisLocked  = false\n\tfeedbacks map[uint64]Feedback\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\nfunc isModerator(addr std.Address) bool {\n\t_, ok := modsAddrs[addr]\n\treturn ok\n}\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || isModerator(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n  id := nextID\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n  nextID++\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID uint64) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove a harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by a moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID uint64, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(path string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by a moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n\n"},{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v3\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n\tgno.land/p/demo/seqid v0.0.0-latest\n)"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"c0R2jyJeL4yqVjQoXVcr31CnTyiHOxxMJGDcFPqA964R6ED5Z2oKSGYFlvg2FJo2VaPZZ/jtKlMbwi8Pajhphw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371319"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"iJoq+f2vVrytPq2/1wJydz0D4w3IMF23WRzk0BSzYE87YKJVCKsRr4uH7D5vfwr8EePk583MPPwG7FArSto8Tw=="}],"memo":""},"blockNum":"371323"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v4","Path":"gno.land/r/x1unix/feedback/v4","Files":[{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v4\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)"},{"Name":"feedback.gno","Body":"package v4\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        uint64\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nfunc newAddrSet(items ...std.Address) map[std.Address]struct{} {\n\tset := make(map[std.Address]struct{}, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nvar (\n\tnextID    uint64\n\tisLocked  = false\n\tfeedbacks map[uint64]Feedback\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\nfunc isModerator(addr std.Address) bool {\n\t_, ok := modsAddrs[addr]\n\treturn ok\n}\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || isModerator(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n  id := nextID\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n  nextID++\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID uint64) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove a harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by a moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID uint64, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(path string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by a moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"vD03khE4ju1+a45DB5mD+yjLoMyg+Q0Ksy7QAx/IYIZRSQaquu55QucVg05du825idx87hol/sHZEJaMW0o0eA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371329"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v5","Path":"gno.land/r/x1unix/feedback/v5","Files":[{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v5\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)"},{"Name":"feedback.gno","Body":"package v5\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        uint64\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nfunc newAddrSet(items ...std.Address) map[std.Address]struct{} {\n\tset := make(map[std.Address]struct{}, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nvar (\n\tnextID    uint64\n\tisLocked  = false\n\tfeedbacks map[uint64]Feedback\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\nfunc isModerator(addr std.Address) bool {\n\t_, ok := modsAddrs[addr]\n\treturn ok\n}\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || isModerator(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n  id := nextID\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n  nextID++\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID uint64) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove a harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by a moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID uint64, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render() string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by a moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"DPQ5YlIvXQijMG/TkdYIAhs4QNByb6Nl04nxQYMawo465JlIvsIJrq8Et6s+CpvbNjrple6B68f62pcpohS3yQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371332"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v5","Path":"gno.land/r/x1unix/feedback/v5","Files":[{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v5\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)"},{"Name":"v5.gno","Body":"package v5\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        uint64\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nfunc newAddrSet(items ...std.Address) map[std.Address]struct{} {\n\tset := make(map[std.Address]struct{}, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nvar (\n\tnextID    uint64\n\tisLocked  = false\n\tfeedbacks map[uint64]Feedback\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\nfunc isModerator(addr std.Address) bool {\n\t_, ok := modsAddrs[addr]\n\treturn ok\n}\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || isModerator(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n  id := nextID\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n  nextID++\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID uint64) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove a harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by a moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID uint64, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render() string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by a moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"8kxH7cgjOrF0ThUwDYWMakQ0pgRG2kEqGGaKucboYZ4fsNgcSbsEPtjoT2FaYnYBI+c8p/At5sVQ+hhzrkCk/A=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371335"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v6","Path":"gno.land/r/x1unix/feedback/v6","Files":[{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v6\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)"},{"Name":"v5.gno","Body":"package v6\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        uint64\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nfunc newAddrSet(items ...std.Address) map[std.Address]struct{} {\n\tset := make(map[std.Address]struct{}, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nvar (\n\tnextID    uint64\n\tisLocked  = false\n\tfeedbacks map[uint64]Feedback\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\nfunc isModerator(addr std.Address) bool {\n\t_, ok := modsAddrs[addr]\n\treturn ok\n}\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || isModerator(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n  id := nextID\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n  nextID++\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID uint64) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove a harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by a moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID uint64, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render() string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by a moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"G6EYx7Bcqck8WVyWhLC1+1/Mzm6mAECVGOYnMPqBqYVTr0mQKAHZ/DHrULu4j/yBye/cZW/6NYYqYl6SbUg6zQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371337"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v7","Path":"gno.land/r/x1unix/feedback/v7","Files":[{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v7\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)"},{"Name":"v7.gno","Body":"package v7\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        uint64\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nfunc newAddrSet(items ...std.Address) map[std.Address]struct{} {\n\tset := make(map[std.Address]struct{}, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nvar (\n\tnextID    uint64\n\tisLocked  = false\n\tfeedbacks map[uint64]Feedback\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\nfunc isModerator(addr std.Address) bool {\n\t_, ok := modsAddrs[addr]\n\treturn ok\n}\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || isModerator(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n  id := nextID\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n  nextID++\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID uint64) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove a harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by a moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID uint64, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render() string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by a moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"Jbwy8TEix4sSWecMIOupoehPzB/gaUyPtLBlsOZ7jGYbBPm/HrC5hJO6FsnIXoMWMbmswfJvam7gfcrFFD2Efg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371339"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1709nv99x5vmzuwzhc038h3kcgp5g8rsd2g06h8","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"sUvRzxnhY+Fm61enRDT+dYIdRAB/3SdRrzZN2ijjKTgu5OeM6GmUbiFalf4C8f373FtYXghBEckpAnb5kLfcZA=="}],"memo":""},"blockNum":"371341"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/feedback/v5","func":"SubmitFeedback","args":["Test"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"wTL0rnLyBXiGrTD32p5dm1NaQr6XOvf6kcV8HgTclwZt6cfNJOhVFH7AV1QAip+jbi0X+WBoxs9pIZRkHIVkEQ=="}],"memo":"Called through gno.studio"},"blockNum":"371344"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v8","Path":"gno.land/r/x1unix/feedback/v8","Files":[{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v8\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)"},{"Name":"v7.gno","Body":"package v8\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        uint64\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nfunc newAddrSet(items ...std.Address) map[std.Address]struct{} {\n\tset := make(map[std.Address]struct{}, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nvar (\n\tnextID    uint64 = 0\n\tisLocked  = false\n\tfeedbacks = make(map[uint64]Feedback)\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\nfunc isModerator(addr std.Address) bool {\n\t_, ok := modsAddrs[addr]\n\treturn ok\n}\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || isModerator(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n    id := nextID\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n  nextID++\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID uint64) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove a harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by a moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID uint64, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render() string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by a moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"lmlHvBEALDsWLeL8i4wnsdatByfvR2k1tqgRpBp6hKlqibaV19qnFYqI8FHsy651JpsKyElhtXCcqtBrJnQPgQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371348"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/feedback/v8","func":"SubmitFeedback","args":["test"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"7DRQIr75d7m8/3vFNuATbS/Da3BuA8LTocPREh/Bgtx2Dq5ln611s/FTGg+0E0saX8q/QGJtx/BfVs+bX2OT8g=="}],"memo":"Called through gno.studio"},"blockNum":"371350"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/feedback/v8","func":"Render","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"V9BgbiMYSHNwK6CHNAT3rNmU6mVbSUNw23H//7eogRABYg6U6bnWlxd8DvruHRRVNv16GB/HTMppL6kQ0mSCbQ=="}],"memo":"Called through gno.studio"},"blockNum":"371353"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g19ykf4md0gqea9d74n0vt45wfv5x2ytglcsv5m4","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"HJj1fAXS/hJMwrHILRtuZbGHPNAEoShw5lbLnFprrDoRoAdtYLitbDnHE6SGu8J7qeAZYgT152vKpNQHWd//Fg=="}],"memo":""},"blockNum":"371359"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/feedback/v8","func":"RespondToFeedback","args":["0","resp"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"KQ8PPLsZXxStSvZ0zE6pRJ91WuVTNTtNvud90OxPvVR9GZrg4WY0yu6YlLtytL1XN0gs8XH/p8m/J2hBZn67jA=="}],"memo":"Called through gno.studio"},"blockNum":"371361"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v9","Path":"gno.land/r/x1unix/feedback/v9","Files":[{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v9\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)"},{"Name":"v7.gno","Body":"package v9\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        uint64\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nfunc newAddrSet(items ...std.Address) map[std.Address]struct{} {\n\tset := make(map[std.Address]struct{}, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nvar (\n\tnextID    uint64 = 0\n\tisLocked         = false\n\tfeedbacks        = make(map[uint64]Feedback)\n\townerAddr        = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"\",\n\t)\n)\n\nfunc init() {\n\tfeedbacks = make(map[uint64]Feedback)\n}\n\nfunc isModerator(addr std.Address) bool {\n\t_, ok := modsAddrs[addr]\n\treturn ok\n}\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || isModerator(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\tnextID++\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID uint64) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove a harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by a moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID uint64, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(_ string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by a moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.RespondAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"/FPadS82+qxo9Yi+2ZmK6wFwajUUZNNv3YouXDgk3HtuzNqpHTpvhqFeUkL72Vx50LzcdnrH0lw0BEpGsB6Caw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371365"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/feedback/v9","func":"Render","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"bsdl3M63BHyLgFMlsJ2+bH7r1zKbfvGoyDzo3WXgvOQcyPcYWJgTGCFilCasV22Cahvv6+1DYgljtbGb+pTHYA=="}],"memo":"Called through gno.studio"},"blockNum":"371367"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v10","Path":"gno.land/r/x1unix/feedback/v10","Files":[{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v10\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)"},{"Name":"v7.gno","Body":"package v10\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        uint64\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nfunc newAddrSet(items ...std.Address) map[std.Address]struct{} {\n\tset := make(map[std.Address]struct{}, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nvar (\n\tnextID    uint64\n\tfeedbacks map[uint64]Feedback\n\tisLocked  = false\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\nfunc init() {\n\t// Gno throws nil panics if map is initialized on assignment.\n\tfeedbacks = make(map[uint64]Feedback)\n\tnextID = 0\n}\n\nfunc isModerator(addr std.Address) bool {\n\t_, ok := modsAddrs[addr]\n\treturn ok\n}\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || isModerator(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\tnextID++\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID uint64) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove a harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by a moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID uint64, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(_ string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by a moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.RespondAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"4k3tcOhl2H9cWiT/MdPCn/n7ObZI3fqmxrDDoShFeXcgp3LpYLZOAuPxDG5DnZE2V9ihSAaK9CsGvOSMuT6rmA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371372"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/feedback/v10","func":"Render","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"c8YTVZjG1eifVT8YD5PgqlHfaTQaFunMXYKnVM61XhQuZExXxoL0SHoApzVnv1zjHK25bjo2q7T1SwBIrJVxfA=="}],"memo":"Called through gno.studio"},"blockNum":"371374"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/feedback/v10","func":"SubmitFeedback","args":["test"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"6MB84G2dgDW9B+utppXfL2Pgn0kAIZ1rWEzqGLrC/05hsk6wb/uCRfgVG6z8R/QKKh4/D1uewdMLiSVFswKahQ=="}],"memo":"Called through gno.studio"},"blockNum":"371376"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/feedback/v10","func":"Render","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"RjgJk8zAgRcslTHt7zFG9IKjLo99UV/e/W+B51ilxM9gCCEevmxt6WeIayzsDp4rZFHNu2ygfAIGW2+suadpEA=="}],"memo":"Called through gno.studio"},"blockNum":"371378"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v11","Path":"gno.land/r/x1unix/feedback/v11","Files":[{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v11\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)"},{"Name":"v7.gno","Body":"package v11\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        uint64\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nfunc newAddrSet(items ...std.Address) map[std.Address]struct{} {\n\tset := make(map[std.Address]struct{}, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nvar (\n\tnextID    uint64\n\tfeedbacks = make(map[uint64]Feedback)\n\tisLocked  = false\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\nfunc init() {\n\t// Gno throws nil panics if map is initialized on assignment.\n\tfeedbacks = make(map[uint64]Feedback)\n\tmodAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n\tnextID = 0\n}\n\nfunc isModerator(addr std.Address) bool {\n\t_, ok := modsAddrs[addr]\n\treturn ok\n}\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || isModerator(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\tnextID++\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID uint64) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove a harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by a moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID uint64, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(_ string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by a moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.RespondAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"7CkdQB/KH9U6rg1jAY0jgS+Wvl45Xkfj9c7U923+kckrL3dD0n6RD6zFDc5XniJl02oZUqs+mF2dNSuLaLOjZA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371385"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v11","Path":"gno.land/r/x1unix/feedback/v11","Files":[{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v11\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)"},{"Name":"v7.gno","Body":"package v11\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        uint64\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nfunc newAddrSet(items ...std.Address) map[std.Address]struct{} {\n\tset := make(map[std.Address]struct{}, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nvar (\n\tnextID    uint64\n\tfeedbacks = make(map[uint64]Feedback)\n\tisLocked  = false\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\nfunc init() {\n\t// Gno throws nil panics if map is initialized on assignment.\n\tfeedbacks = make(map[uint64]Feedback)\n\tnextID = 0\n}\n\nfunc isModerator(addr std.Address) bool {\n\t_, ok := modsAddrs[addr]\n\treturn ok\n}\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || isModerator(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\tnextID++\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID uint64) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove a harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by a moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID uint64, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(_ string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by a moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.RespondAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"P1/Q6nNXOO5mAHPaxCtG99BiSXKo0YyL6I6utWiXZgkOvtolX3Wgai4hGyUdO4jJBkq4ntAtCW5lkB3/1tw6yw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371387"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/feedback/v11","func":"Render","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"qW2+z7UBnCpUR21H8xUPGhsho4JW7xrBq32x/fDAIFgsR41yHmTYTNphescJELAMOdslV98ckRUPNSn4GsHHHA=="}],"memo":"Called through gno.studio"},"blockNum":"371389"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/feedback/v11","func":"SubmitFeedback","args":["test"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"KwgZafg+yCDkOLvwfC7uvrb8V25PHSl/ndN0Pttn0SRsVymQr8M6yK+IQCdLeazkUz3dauEyVQwiEUOOFMCypw=="}],"memo":"Called through gno.studio"},"blockNum":"371392"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/feedback/v11","func":"Render","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"Vt0vNsZ36FK8YD8CB23sXsUT6UIlL0uk+0OT167OudxzADfn/lnOOGeggQeTMYhFXvFhA6iORT/zfmigWC0wgA=="}],"memo":"Called through gno.studio"},"blockNum":"371394"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/feedback/v11","func":"Render","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"R2TPUIkAHOszJdHRUqYPMIlDLEYXB9z9ICTk7WMtblVCAb2DGKcZXp7eSJnEMBw+YOyacVdMvckVAiyrXCpsoA=="}],"memo":"Called through gno.studio"},"blockNum":"371409"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"+PpertmC1U3X9LiYRvjm5ihIxSLI0y0I1uBAJaG2+jwRkh6LPRV+O+CL1FDllry+tR54gHzt3lf/4C6HOnTnOQ=="}],"memo":""},"blockNum":"371415"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1f748xee7gpwldyrz4xea3nk6hw24lfya49fus8","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"+qV1mFhk/QHhqnO6F9RKng/xRtqsx96INLN/NmuEKqhJaHs/S3qcUM5livHIJxU3uek1ZVRgRGMPwrYKWrgb1w=="}],"memo":""},"blockNum":"371417"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","package":{"Name":"feedbackdenystest","Path":"gno.land/r/feedback/feedbackdenystest","Files":[{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v11\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)"},{"Name":"v7.gno","Body":"package feedbackdenystest\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        uint64\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nfunc newAddrSet(items ...std.Address) map[std.Address]struct{} {\n\tset := make(map[std.Address]struct{}, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nvar (\n\tnextID    uint64\n\tfeedbacks = make(map[uint64]Feedback)\n\tisLocked  = false\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\nfunc init() {\n\t// Gno throws nil panics if map is initialized on assignment.\n\tfeedbacks = make(map[uint64]Feedback)\n\tnextID = 0\n}\n\nfunc isModerator(addr std.Address) bool {\n\t_, ok := modsAddrs[addr]\n\treturn ok\n}\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || isModerator(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\tnextID++\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID uint64) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove a harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by a moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID uint64, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(_ string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by a moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.RespondAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"+4MAnbBap0EpnRk/HGamAfCBsKIqeqUaez53BDxCFWkP8DQFWDmN30La6VwcAifrHePkVYOEkEho4S5wvtoqqg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371419"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","send":"","pkg_path":"gno.land/r/feedback/feedbackdenystest","func":"SubmitFeedback","args":["nice app"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"1V21C+a+zRa4v0/QK5+aXM9VL57BgJiEVERlthUXmz4rporlpyWVwE4A31CMCEmut4yE7MPu695afVCuTcFsCQ=="}],"memo":"Called through gno.studio"},"blockNum":"371421"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","package":{"Name":"feedbackdenystest1","Path":"gno.land/r/feedback/feedbackdenystest1","Files":[{"Name":"gno.mod","Body":"module gno.land/r/x1unix/feedback/v11\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)"},{"Name":"v7.gno","Body":"package feedbackdenystest1\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        uint64\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nfunc newAddrSet(items ...std.Address) map[std.Address]struct{} {\n\tset := make(map[std.Address]struct{}, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nvar (\n\tnextID    uint64\n\tfeedbacks = make(map[uint64]Feedback)\n\tisLocked  = false\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\nfunc init() {\n\t// Gno throws nil panics if map is initialized on assignment.\n\tfeedbacks = make(map[uint64]Feedback)\n\tnextID = 0\n}\n\nfunc isModerator(addr std.Address) bool {\n\t_, ok := modsAddrs[addr]\n\treturn ok\n}\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || isModerator(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\tnextID++\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID uint64) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove a harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by a moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID uint64, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(_ string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by a moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.RespondAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"AWKsqNZ5lF5Xjbu9Sf3iK/WUENctpfsmpV37/slgYZRwZEyg2f2cphb0IyLvMihs/9muUyChy0IYLBU/j52lag=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371425"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","send":"","pkg_path":"gno.land/r/feedback/feedbackdenystest1","func":"SubmitFeedback","args":["nice"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"WHGb53NCoPFlQrptIQByWQftWdaXWbX4swKu8tDBX2YYB4Y6My0EQR5x8ONgGDNkk1Ul1XUvbITWIouAtl3dLw=="}],"memo":"Called through gno.studio"},"blockNum":"371427"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","package":{"Name":"feedbackdenystest2","Path":"gno.land/r/feedback/feedbackdenystest2","Files":[{"Name":"v7.gno","Body":"package feedbackdenystest2\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        uint64\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nfunc newAddrSet(items ...std.Address) map[std.Address]struct{} {\n\tset := make(map[std.Address]struct{}, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nvar (\n\tnextID    uint64\n\tfeedbacks = make(map[uint64]Feedback)\n\tisLocked  = false\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n\tmodsAddrs = newAddrSet(\n\t\t// TODO: add mod wallets\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\nfunc init() {\n\t// Gno throws nil panics if map is initialized on assignment.\n\tfeedbacks = make(map[uint64]Feedback)\n\tnextID = 0\n}\n\nfunc isModerator(addr std.Address) bool {\n\t_, ok := modsAddrs[addr]\n\treturn ok\n}\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || isModerator(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\tnextID++\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID uint64) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove a harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by a moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID uint64, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(_ string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by a moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.RespondAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"SLzkhOmbPnib+iCRVC2Jx0UZpk1DT6XRxwOKGgBtL0lqZeggsOhVDhlN/U22tNi2xmWqGB6Q+CPlroRuvVOD+Q=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371431"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","send":"","pkg_path":"gno.land/r/feedback/feedbackdenystest2","func":"SubmitFeedback","args":["nice app"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"QgdL2rGuXcqQhEewQqdZLmmslGbH58RcsHQDsIWOVJ9SCUcKjNU7E/4ZGUMkUvZ3iXRq7peMzMWsUm1jcBJohw=="}],"memo":"Called through gno.studio"},"blockNum":"371433"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","send":"","pkg_path":"gno.land/r/feedback/feedbackdenystest2","func":"SubmitFeedback","args":["nice"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"4zPQQs9yj6u4ZTGU00Xy1GVQ+qfOzh1PHOnTvQkxZGtQBCVQcNS2mIeMiYJq/nYg3twt5Fg6Wn2FrqbsthSl1g=="}],"memo":"Called through gno.studio"},"blockNum":"371435"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1vudhmep9ns3f938heglxc3a5jfwpgh9pz4xtwe","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"Eq++l0+4S/4ryOXsO78s3ma2Uf3uvqc1Hkm1aJRcZ8Je2rDUK3Wj7WMNlasbd2PZmZ25b5lMOwTRV3fA3f7ZIA=="}],"memo":""},"blockNum":"371445"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1h8hux07qm0g29y34ajm34xnfpuwtv23r6d4rfs","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"tYXI8KDrG6+LERfCOENB5oOaBQugdJmofCW1QCh+uwo63Hx3cSKyojM8ftMfY9pyJcoXQWK1mWPpzgECv97OVA=="}],"memo":""},"blockNum":"371447"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1gud7hj52r0gnkxlj25cuk0knka6vrcqxy89h74","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"wpbHKhCPrjMZtBEk68Pat77+dSjrwUqQOFQbEFnRG5MU28cvyfi12/HxVntjoaz/YlZgfMU/r+GYG/dO/P3mkA=="}],"memo":""},"blockNum":"371449"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g138fqf9lvnrz9ayeq3jmkrss7kgx7ycvqe766pc","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"Vq2scmHgIoy7Q3jKoX0xwetD46cfUy63llMTbMDfT4FS2fEa3p6Hovh0MRCyXerWF3ZbanxNaJghUUajMkolxg=="}],"memo":""},"blockNum":"371451"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1nhvfrl8svw3wkfpy2grsr8h5akuxjsvhhxsfgn","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"74rla4YbgYMRMm56hQwTN/N3uGCuhBl+zJD7wh2vTYhhW/N33L/bU2apl7bE09cdUbImJ4dUUL1wloP6o7Mgag=="}],"memo":""},"blockNum":"371453"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","package":{"Name":"feedbackdenystest3","Path":"gno.land/r/feedback/feedbackdenystest3","Files":[{"Name":"v7.gno","Body":"package feedbackdenystest3\n\nimport (\n    \"avl\"\n    \"std\"\n    \"strings\"\n    \"time\"\n    \"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n    ID        uint64\n    User      std.Address\n    Content   string\n    Response  string\n    CreatedAt time.Time\n    RespondAt time.Time\n}\n\nvar (\n    nextID    uint64\n    feedbacks *avl.Tree[uint64, Feedback]\n    isLocked  = false\n    ownerAddr = std.Address(\n        \"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7\",\n    )\n    modsAddrs = newAddrSet(\n        \"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7\",\n    )\n)\n\nfunc init() {\n    feedbacks = avl.NewTree[uint64, Feedback]()\n    nextID = 0\n}\n\nfunc assertIsModerator() {\n    actorId := std.GetOrigCaller()\n    _, ok := modsAddrs[actorId]\n    if actorId != ownerAddr \u0026\u0026 !ok {\n        panic(\"Access Denied\")\n    }\n}\n\nfunc assertIsOwner() {\n    actorId := std.GetOrigCaller()\n    if actorId != ownerAddr {\n        panic(\"Access Denied\")\n    }\n}\n\nfunc assertNotLocked() {\n    if isLocked {\n        panic(\"Realm is locked\")\n    }\n}\n\nfunc LockFeedback() string {\n    assertIsOwner()\n    isLocked = true\n    return \"Locked\"\n}\n\nfunc UnlockFeedback() string {\n    assertIsOwner()\n    isLocked = false\n    return \"Unlocked\"\n}\n\nfunc SubmitFeedback(message string) string {\n    assertNotLocked()\n\n    message = strings.TrimSpace(message)\n    if message == \"\" {\n        panic(\"Message can't be empty\")\n    }\n\n    if len(message) \u003e maxCharsCount {\n        panic(\"Message is too long\")\n    }\n\n    id := nextID\n    feedback := Feedback{\n        ID:        id,\n        User:      std.GetOrigCaller(),\n        Content:   message,\n        CreatedAt: time.Now(),\n    }\n\n    feedbacks.Set(id, feedback)\n    nextID++\n    return ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\nfunc BanFeedback(feedbackID uint64) string {\n    assertIsModerator()\n    assertNotLocked()\n\n    feedback, exists := feedbacks.Get(feedbackID)\n    if !exists {\n        panic(\"Feedback not found\")\n    }\n\n    feedback.Content = \"\"\n    feedbacks.Set(feedbackID, feedback)\n    return \"Feedback was removed by a moderator\"\n}\n\nfunc RespondToFeedback(feedbackID uint64, response string) string {\n    assertIsModerator()\n    assertNotLocked()\n\n    feedback, exists := feedbacks.Get(feedbackID)\n    if !exists {\n        panic(\"Feedback not found\")\n    }\n\n    if feedback.Response != \"\" {\n        panic(\"Feedback already has a response\")\n    }\n\n    response = strings.TrimSpace(response)\n    if response == \"\" {\n        panic(\"Response can't be empty\")\n    }\n\n    if len(response) \u003e maxCharsCount {\n        panic(\"Response is too long\")\n    }\n\n    feedback.RespondAt = time.Now()\n    feedback.Response = response\n    feedbacks.Set(feedbackID, feedback)\n\n    return \"Response recorded successfully\"\n}\n\nfunc Render() string {\n    var sb strings.Builder\n    sb.WriteString(\"# Feedback Collection\\n\")\n    feedbacks.Each(func(id uint64, fb Feedback) bool {\n        sb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n        sb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n        if fb.Content == \"\" {\n            sb.WriteString(\"*Feedback was removed by a moderator*\")\n        } else {\n            sb.WriteString(fb.Content)\n        }\n        sb.WriteString(\"\\n\")\n        if fb.Response != \"\" {\n            sb.WriteString(\"### Response\")\n            sb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.RespondAt.Format(time.RFC1123)))\n            sb.WriteString(fb.Response)\n            sb.WriteString(\"\\n\\n\")\n        }\n        return true\n    })\n    return sb.String()\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"gLS5wVPhMF/V9mfF047Zvlz5cI1GxA3XQLaRucnhj4533mqll8rvPeUYrK6/kP84RKYjidBfujA9DLCeZ0DEhg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371467"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","package":{"Name":"feedbackdenystest4","Path":"gno.land/r/feedback/feedbackdenystest4","Files":[{"Name":"v7.gno","Body":"package feedbackdenystest4\n\nimport (\n    \"avl\"\n    \"std\"\n    \"strings\"\n    \"time\"\n    \"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n    ID        uint64\n    User      std.Address\n    Content   string\n    Response  string\n    CreatedAt time.Time\n    RespondAt time.Time\n}\n\nvar (\n    nextID    uint64\n    feedbacks *avl.Tree \n    isLocked  = false\n    ownerAddr = std.Address(\n        \"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7\",\n    )\n    modsAddrs = newAddrSet(\n        \"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7\",\n    )\n)\n\nfunc init() {\n    feedbacks = avl.NewTree()\n    nextID = 1\n}\n\nfunc assertIsModerator() {\n    actorId := std.GetOrigCaller()\n    _, ok := modsAddrs[actorId]\n    if actorId != ownerAddr \u0026\u0026 !ok {\n        panic(\"Access Denied\")\n    }\n}\n\nfunc assertIsOwner() {\n    actorId := std.GetOrigCaller()\n    if actorId != ownerAddr {\n        panic(\"Access Denied\")\n    }\n}\n\nfunc assertNotLocked() {\n    if isLocked {\n        panic(\"Realm is locked\")\n    }\n}\n\nfunc LockFeedback() string {\n    assertIsOwner()\n    isLocked = true\n    return \"Locked\"\n}\n\nfunc UnlockFeedback() string {\n    assertIsOwner()\n    isLocked = false\n    return \"Unlocked\"\n}\n\nfunc SubmitFeedback(message string) string {\n    assertNotLocked()\n\n    message = strings.TrimSpace(message)\n    if message == \"\" {\n        panic(\"Message can't be empty\")\n    }\n\n    if len(message) \u003e maxCharsCount {\n        panic(\"Message is too long\")\n    }\n\n    id := nextID\n    feedback := Feedback{\n        ID:        id,\n        User:      std.GetOrigCaller(),\n        Content:   message,\n        CreatedAt: time.Now(),\n    }\n\n    feedbacks.Set(id, feedback)\n    nextID++\n    return ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\nfunc BanFeedback(feedbackID uint64) string {\n    assertIsModerator()\n    assertNotLocked()\n\n    feedback, exists := feedbacks.Get(feedbackID)\n    if !exists {\n        panic(\"Feedback not found\")\n    }\n\n    feedback.Content = \"\"\n    feedbacks.Set(feedbackID, feedback)\n    return \"Feedback was removed by a moderator\"\n}\n\nfunc RespondToFeedback(feedbackID uint64, response string) string {\n    assertIsModerator()\n    assertNotLocked()\n\n    feedback, exists := feedbacks.Get(feedbackID)\n    if !exists {\n        panic(\"Feedback not found\")\n    }\n\n    if feedback.Response != \"\" {\n        panic(\"Feedback already has a response\")\n    }\n\n    response = strings.TrimSpace(response)\n    if response == \"\" {\n        panic(\"Response can't be empty\")\n    }\n\n    if len(response) \u003e maxCharsCount {\n        panic(\"Response is too long\")\n    }\n\n    feedback.RespondAt = time.Now()\n    feedback.Response = response\n    feedbacks.Set(feedbackID, feedback)\n\n    return \"Response recorded successfully\"\n}\n\nfunc Render() string {\n    var sb strings.Builder\n    sb.WriteString(\"# Feedback Collection\\n\")\n    feedbacks.Each(func(key, value interface{}) bool {\n        id := key.(uint64)\n        fb := value.(Feedback)\n        sb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n        sb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n        if fb.Content == \"\" {\n            sb.WriteString(\"*Feedback was removed by moderator*\")\n        } else {\n            sb.WriteString(fb.Content)\n        }\n        sb.WriteString(\"\\n\")\n        if fb.Response != \"\" {\n            sb.WriteString(\"### Response\\n\")\n            sb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.RespondAt.Format(time.RFC1123)))\n            sb.WriteString(fb.Response)\n            sb.WriteString(\"\\n\\n\")\n        }\n        return true\n    })\n    return sb.String()\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"TWxfh4WkUDpt2nijj/8S/yCO5mhWNWHeomjhq53VgWwDTo8e8K1l/0PnDuyMrTBiovl6Dvkc604yeii8p/RqAQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371473"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","package":{"Name":"feedbackdenystest3","Path":"gno.land/r/feedback/feedbackdenystest3","Files":[{"Name":"v7.gno","Body":"package feedbackdenystest3\n\nimport (\n    \"avl\"\n    \"std\"\n    \"strings\"\n    \"time\"\n    \"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n    ID        uint64\n    User      std.Address\n    Content   string\n    Response  string\n    CreatedAt time.Time\n    RespondAt time.Time\n}\n\nvar (\n    nextID    uint64\n    feedbacks *avl.Tree \n    isLocked  = false\n    ownerAddr = std.Address(\n        \"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7\",\n    )\n    modsAddrs = newAddrSet(\n        \"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7\",\n    )\n)\n\nfunc init() {\n    feedbacks = avl.NewTree()\n    nextID = 1\n}\n\nfunc assertIsModerator() {\n    actorId := std.GetOrigCaller()\n    _, ok := modsAddrs[actorId]\n    if actorId != ownerAddr \u0026\u0026 !ok {\n        panic(\"Access Denied\")\n    }\n}\n\nfunc assertIsOwner() {\n    actorId := std.GetOrigCaller()\n    if actorId != ownerAddr {\n        panic(\"Access Denied\")\n    }\n}\n\nfunc assertNotLocked() {\n    if isLocked {\n        panic(\"Realm is locked\")\n    }\n}\n\nfunc LockFeedback() string {\n    assertIsOwner()\n    isLocked = true\n    return \"Locked\"\n}\n\nfunc UnlockFeedback() string {\n    assertIsOwner()\n    isLocked = false\n    return \"Unlocked\"\n}\n\nfunc SubmitFeedback(message string) string {\n    assertNotLocked()\n\n    message = strings.TrimSpace(message)\n    if message == \"\" {\n        panic(\"Message can't be empty\")\n    }\n\n    if len(message) \u003e maxCharsCount {\n        panic(\"Message is too long\")\n    }\n\n    id := nextID\n    feedback := Feedback{\n        ID:        id,\n        User:      std.GetOrigCaller(),\n        Content:   message,\n        CreatedAt: time.Now(),\n    }\n\n    feedbacks.Set(id, feedback)\n    nextID++\n    return ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\nfunc BanFeedback(feedbackID uint64) string {\n    assertIsModerator()\n    assertNotLocked()\n\n    feedback, exists := feedbacks.Get(feedbackID)\n    if !exists {\n        panic(\"Feedback not found\")\n    }\n\n    feedback.Content = \"\"\n    feedbacks.Set(feedbackID, feedback)\n    return \"Feedback was removed by a moderator\"\n}\n\nfunc RespondToFeedback(feedbackID uint64, response string) string {\n    assertIsModerator()\n    assertNotLocked()\n\n    feedback, exists := feedbacks.Get(feedbackID)\n    if !exists {\n        panic(\"Feedback not found\")\n    }\n\n    if feedback.Response != \"\" {\n        panic(\"Feedback already has a response\")\n    }\n\n    response = strings.TrimSpace(response)\n    if response == \"\" {\n        panic(\"Response can't be empty\")\n    }\n\n    if len(response) \u003e maxCharsCount {\n        panic(\"Response is too long\")\n    }\n\n    feedback.RespondAt = time.Now()\n    feedback.Response = response\n    feedbacks.Set(feedbackID, feedback)\n\n    return \"Response recorded successfully\"\n}\n\nfunc Render() string {\n    var sb strings.Builder\n    sb.WriteString(\"# Feedback Collection\\n\")\n    feedbacks.Each(func(key, value interface{}) bool {\n        id := key.(uint64)\n        fb := value.(Feedback)\n        sb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n        sb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n        if fb.Content == \"\" {\n            sb.WriteString(\"*Feedback was removed by moderator*\")\n        } else {\n            sb.WriteString(fb.Content)\n        }\n        sb.WriteString(\"\\n\")\n        if fb.Response != \"\" {\n            sb.WriteString(\"### Response\\n\")\n            sb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.RespondAt.Format(time.RFC1123)))\n            sb.WriteString(fb.Response)\n            sb.WriteString(\"\\n\\n\")\n        }\n        return true\n    })\n    return sb.String()\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"RJ/+gG6g71DelNJCgtByzGD42ukhVDhsh0CA1Z8vNVET8nDK9AZ/lam9EC2BUGFkil8tEjiHHfY5qDeYAJKgiQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371475"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1tml20hzkmftlheal6jcg00h3qzadu8adsver64","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"4/eYu8LxdCPkq+EL9PuL+uB/lNplt7TN4sWDkX3fvSYYQfLwWu6vCPT4V/PdBzsbT+o2jY2jbG73z3APXjsxsg=="}],"memo":""},"blockNum":"371481"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1dndupzzhfffctfllzl765wfkckth30xrcp2r9k","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"VBZbb1PthRjF49S+dIZd8GMLHCNx6rbv7tqgaLVC2rc2ACn/T7DvWcCWKdGxv+S5olLkXi0xcaieIUgPXsSMDg=="}],"memo":""},"blockNum":"371487"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1t20he984hqsd79y32c20uezq0fgagw29zpstza","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"CEQxmVY/zqNwYT+8N6epna/Yt4apxNXqsvGoZktE+2QfC1dzph7O4pG7IDJtJkztThg4Cs4atefq5xtPCwZ3/A=="}],"memo":""},"blockNum":"371507"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1u5qnxr0h0u8gu2v7rzccqu7h2w7r8wu4282v6v","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"hkrJZx29vnO7naZ49w5icIEZ41JY2tiEYcurW6sAOr9BYKkC/7NR1CNIWVGsQP/jmlvgwQ9qEf3bO5SVuSqtlQ=="}],"memo":""},"blockNum":"371509"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1t20he984hqsd79y32c20uezq0fgagw29zpstza","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"KJjpEptMF5+sAaL2ftvahSAQj4YHGZsBWzf6GJ/sVEMmZ0ZayVPt8SHRTomNs8rHpLvlT+Sd3GCZhUI2E+FNBg=="}],"memo":""},"blockNum":"371513"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1t20he984hqsd79y32c20uezq0fgagw29zpstza","package":{"Name":"Kent","Path":"gno.land/r/joke/Kent","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1C8AFk3Q/6npoAs0QdS0O3S9+5Rv+LO/d7xHfsOClHP"},"signature":"9c9FCE9cDkLvQm59eyIDt3lSM5gez78IIgmvPHE3tEcoJSQ+7qTJBMf/8l7ASL8mCVA5JV/QsV3yxLGip8Kniw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371515"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g130g97u00ayr3gjr38w5qpf4he7xku8kszwe26y","package":{"Name":"jj","Path":"gno.land/r/j/jj","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9qrusMQFIDdLNttvkGh7qxDNZfcZFxbdDpBkzXDKEOt"},"signature":"klYy388ISV2F9W6PTULFStQpGWrgcx9y0GDZWhiQd6MW52Po0p5OsFFkRfGgh0zS+j7Qfkq7Xdu6HApVgsJJVA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371521"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g130g97u00ayr3gjr38w5qpf4he7xku8kszwe26y","package":{"Name":"jj","Path":"gno.land/r/j/jj","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9qrusMQFIDdLNttvkGh7qxDNZfcZFxbdDpBkzXDKEOt"},"signature":"AhnOkLU1mOHlnx9p8aw76Bb4LKMB8rGEXOrMv+JJgtMsu9jqHpAuDv+6Gf1qUB8r9RIsTetMV0aO2jrnTJHNPg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371523"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g130g97u00ayr3gjr38w5qpf4he7xku8kszwe26y","package":{"Name":"teste3","Path":"gno.land/p/demo/teste3","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9qrusMQFIDdLNttvkGh7qxDNZfcZFxbdDpBkzXDKEOt"},"signature":"eAFFlW56q4pN0jsbmwz19tr5C1lAwPNmf2wpgbczdF8rQa0i1EQF81ywz8P6Xmzcb4ub1Nrhp79crDY6AviFKg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371539"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1nyjd90gz36q6vjm8qwslg2v38ma8su6cz3jryv","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"os4vUrEwXfFSwvgpllau1eZ9zsox85HrNLuz2xP6uIdAYAmPtsZsD96sjJ0JzJeyMG69TyduSA3A3A7B58ZoRg=="}],"memo":""},"blockNum":"371542"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g130g97u00ayr3gjr38w5qpf4he7xku8kszwe26y","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"o1V5xsYxYu8bwbHbwCEuqx5NALdh7AeM6u+RaYWJZSlpkxjc87QO6o+POVY/cPtevAUBB4PZNWdbtCMF5fuuLw=="}],"memo":""},"blockNum":"371545"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g130g97u00ayr3gjr38w5qpf4he7xku8kszwe26y","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"tO8LOZSD2qKZCnZA+USCsYUH2MAo1E2anxt/8KR0a0I7cc0eWdi5P04irNjEaVS/0QJNiwOZgyuG9/oeK8vBwQ=="}],"memo":""},"blockNum":"371547"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1nyjd90gz36q6vjm8qwslg2v38ma8su6cz3jryv","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"eumZFxYUmpzhLKVQwJz3pi46nPiHOvvw56gzxbKGlRU3MiUh1Yme0SLEZg7wUPgfsfu4/adM54V5ItWVP1e1UQ=="}],"memo":""},"blockNum":"371550"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1nyjd90gz36q6vjm8qwslg2v38ma8su6cz3jryv","package":{"Name":"crypto38","Path":"gno.land/r/demo2/crypto38","Files":[{"Name":"package.gno","Body":"package crypto38\n\nfunc Render(path string) string {\n  return \"Hello Crypto38!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7PgP3bKSbI1FvmBOIOPcBUoFdEOhQaLQBNB6llDv9Cn"},"signature":"W1tHWMCJGT4AhP6KSHd0xqaqGi3l1Eyhl4TKDHJ368FhLGMbz4yZIm8orsdA98P6FWWjwaGiSNxw43Mm6t9Cfg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371552"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g130g97u00ayr3gjr38w5qpf4he7xku8kszwe26y","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"c5ZrgUGBC0tHDi+x4gUZwSCgG4LPFzlK4HanHDmfs+8Itl8v9Rw+orooUCadIjTk4aIv6dR2cHeZIDJKl0r9FA=="}],"memo":""},"blockNum":"371564"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g12w28y8g6feadunkl6wv7w2e8yjnal0j3p9dxhw","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"N321SqrqxEqAUVvxw688dghhof405Y47LK6+7KQqXVxc9K8lVUnUQZvlXHAJgSBfy7+6p/4NWHGdiR4acTI1Jw=="}],"memo":""},"blockNum":"371566"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1aggt5sr6y3dcsmhu4kp6vm857nj9mpey50yum7","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"AzwhWDbV+ywoZmYuCEDZ0MQZhpzmjwDsNwkPFyJ4yE9XKXKwIwSkX0iDHTsWy63Qc1o+MMK1kXVCvL7JhZLwbQ=="}],"memo":""},"blockNum":"371568"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g12w28y8g6feadunkl6wv7w2e8yjnal0j3p9dxhw","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"zPrkcet5YdLK8qDsNVPQZhz3KP9BYJVrXNh6kSylDGsfNbkVWOz6xKFfExTWchASwmlzXSzefP+ka5yaymy/+Q=="}],"memo":""},"blockNum":"371571"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g12w28y8g6feadunkl6wv7w2e8yjnal0j3p9dxhw","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"Jxd0rw/eeP3KYvc81bb7D0Ny9Ck5fSDn2+AKG63GS5I7TElA40dnoNBeciPYTkHsl1PTqDx0IThQ6Ve0lFeUYw=="}],"memo":""},"blockNum":"371573"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g12w28y8g6feadunkl6wv7w2e8yjnal0j3p9dxhw","package":{"Name":"oblos","Path":"gno.land/r/kestar/oblos","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuB8BNOWimpiFHaYn9DH45izPbiVxvZVbADaTft4iDD9"},"signature":"9wjFz1MuErDPJ4+qXkV9ZAxGMBS4p/ENHROw62ghFx8OfxjZAjR972jMPwmObee2i8+qIEKsh0rK1AGlo8e7OQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371576"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g12w28y8g6feadunkl6wv7w2e8yjnal0j3p9dxhw","package":{"Name":"DZPOWER","Path":"gno.land/r/kestar/DZPOWER","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"DZ POWER\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuB8BNOWimpiFHaYn9DH45izPbiVxvZVbADaTft4iDD9"},"signature":"gY/pgR96X/6Ds6nKOMRQcHR1kRDDpDiu7RHrDkvNnrI+Wi75oRIhGRXxqHK1fFlDrQNsM/rFeFzghTyTxo/9+A=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371579"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g12w28y8g6feadunkl6wv7w2e8yjnal0j3p9dxhw","package":{"Name":"obkos","Path":"gno.land/r/kestar/obkos","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuB8BNOWimpiFHaYn9DH45izPbiVxvZVbADaTft4iDD9"},"signature":"Z1fdIHCfcW/8Oy3Ol2/yexrMnjQmzC5uW5ulVMxGE2oG60wtzAuXynZL0O6jyjil2iW30jOO00f8H2bgsW0+jA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371582"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g12w28y8g6feadunkl6wv7w2e8yjnal0j3p9dxhw","package":{"Name":"obkos","Path":"gno.land/r/kestar/obkos","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuB8BNOWimpiFHaYn9DH45izPbiVxvZVbADaTft4iDD9"},"signature":"pvRkP62dwjEvejulff4XxU0exD/jPP+w71NJ34j/GuVXttm28edDkhCXgQqg1lHDJcdZ2s6IqwrBQMKsZom52A=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371584"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g12w28y8g6feadunkl6wv7w2e8yjnal0j3p9dxhw","package":{"Name":"obkos","Path":"gno.land/r/kestar/obkos","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AuB8BNOWimpiFHaYn9DH45izPbiVxvZVbADaTft4iDD9"},"signature":"ynwyd0zWkxhYDJ57o2qwU1ARPlCG5IuwYX5+F5loSklPVVTfRsbq5rYInLRD4hHJUbG3WpP9VzWPC9IKFeLbxg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371586"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1f9cz0xezps2mxcevdhc8nxcrzgnuyvzy6dmwhd","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"D3atqZhI52tN4LgvjVONGBnHm8e5iU7pFcF5ZFTzg7Rr1VvZvrgc/SkfWfr7HkKgYz1dgMmK0ytDtN8gOUbAsw=="}],"memo":""},"blockNum":"371588"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1f9cz0xezps2mxcevdhc8nxcrzgnuyvzy6dmwhd","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"lqtE0EhoTvwDN+n1A1HCj0fMsJFh1lECFvRaKe+2jRc0UEjtyc04FQOx9Yj8CtZUnllyhUEQdAJS+igBq7iSEg=="}],"memo":""},"blockNum":"371591"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1f9cz0xezps2mxcevdhc8nxcrzgnuyvzy6dmwhd","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"jQ1/su2PVo7OKrHsYZ7/FAZXLrYhCMrDBCm0qCXX8mcN/JHZFxdHBLUE4SqcWveileKLGoYGDWssXVKnAB/e1g=="}],"memo":""},"blockNum":"371593"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1f9cz0xezps2mxcevdhc8nxcrzgnuyvzy6dmwhd","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"YxhsJnCXgIf220dupcr9kpDdeKZt0eMLTX8xNdV3I5IIs0YAFAImfLBk/qzyB2efV5Nr+8f3kS5oJsex1SDeeg=="}],"memo":""},"blockNum":"371595"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1f9cz0xezps2mxcevdhc8nxcrzgnuyvzy6dmwhd","package":{"Name":"adnagi","Path":"gno.land/r/demo56/adnagi","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"go tot the HIVE for honeypot\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzwKh4+N5MIdvQGwVkrPwu8jTuoEKVhk4i1Z0RA2+yyK"},"signature":"Aqy78s3jLEsEqcmmGgnjrntM1ksfDL+E4P4HeLkF6UpBxySJXCWrcZkGNxStoIIWkcE/L/P1ncjZPuHJ4K20RA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371597"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1f9cz0xezps2mxcevdhc8nxcrzgnuyvzy6dmwhd","package":{"Name":"adnagi","Path":"gno.land/r/demo56/adnagi","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"go tot the HIVE for honeypot\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzwKh4+N5MIdvQGwVkrPwu8jTuoEKVhk4i1Z0RA2+yyK"},"signature":"w167QTCI0p0KUY/2wXWkfflCIPPudyIUFAfgg42yOuRytFIdZyALA73zsux528+dBpBkYJDCkQHJeBA91Bj27w=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371599"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1f9cz0xezps2mxcevdhc8nxcrzgnuyvzy6dmwhd","package":{"Name":"hive","Path":"gno.land/r/demo56/hive","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"hivehoneypot\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzwKh4+N5MIdvQGwVkrPwu8jTuoEKVhk4i1Z0RA2+yyK"},"signature":"b4y4u38DnkuaQB83KVcNbscVu0PNiUFzSuKBNAZy8JAeKWcdXkeMObhj66I8i4bBmZUj9KSYJPcjzeXtLWNjOQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371601"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1f9cz0xezps2mxcevdhc8nxcrzgnuyvzy6dmwhd","package":{"Name":"hive","Path":"gno.land/r/demohive/hive","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"},{"Name":"hive.gno","Body":"package hive\r\n\r\nfunc Render(path string) string {\r\n  return \"Hive !\"\r\n}\r\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzwKh4+N5MIdvQGwVkrPwu8jTuoEKVhk4i1Z0RA2+yyK"},"signature":"E8s/mv4PvQ+CHIu8y5UNJBNg8zly1OlIfaiLI4bljhMiP30CzniTeZYAWaKRVIshbP+J3yy6RSO0/8fwrgQwlQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371605"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1f9cz0xezps2mxcevdhc8nxcrzgnuyvzy6dmwhd","package":{"Name":"hive","Path":"gno.land/r/demo2/hive","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"},{"Name":"hive.gno","Body":"package hive\r\n\r\nfunc Render(path string) string {\r\n  return \"Hive !\"\r\n}\r\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzwKh4+N5MIdvQGwVkrPwu8jTuoEKVhk4i1Z0RA2+yyK"},"signature":"lkcJfCQX+qi1mfiiyzciM0phl6nDVafSXPM9X+k6eHYAP9dH/Fb2kLVQjiTHmeHndRnu3EPVbbMMG3FgnmK5Ig=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371608"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1f9cz0xezps2mxcevdhc8nxcrzgnuyvzy6dmwhd","package":{"Name":"hive","Path":"gno.land/r/demo2/hive","Files":[{"Name":"package.gno","Body":"package hive\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"},{"Name":"hive.gno","Body":"package hive\r\n\r\nfunc Render(path string) string {\r\n  return \"Hive !\"\r\n}\r\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzwKh4+N5MIdvQGwVkrPwu8jTuoEKVhk4i1Z0RA2+yyK"},"signature":"ZQPQE1khtganUOhlOh6i15D32dbqUuzK5NxAjJCHzGBGsHZfaNQ2k0eqNEdes6aNl/ISUY7rMGODGw0b1SFnpA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371610"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1f9cz0xezps2mxcevdhc8nxcrzgnuyvzy6dmwhd","package":{"Name":"hive","Path":"gno.land/r/demo2/hive","Files":[{"Name":"package.gno","Body":"package hive\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"},{"Name":"hive.gno","Body":"package hive\r\n\r\nfunc Render(path string) string {\r\n  return \"Hive !\"\r\n}\r\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzwKh4+N5MIdvQGwVkrPwu8jTuoEKVhk4i1Z0RA2+yyK"},"signature":"xsVJ8CQ53g7LXG/VX9OD3sGTHO8+BE46cyNbra6iQXgLCNvrQbTOozNNyJkTE5hN4lqamioTwVgRMG+loqXZ6Q=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371612"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1f9cz0xezps2mxcevdhc8nxcrzgnuyvzy6dmwhd","package":{"Name":"hive","Path":"gno.land/r/demo2/hive","Files":[{"Name":"package.gno","Body":"package hive\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"},{"Name":"hive.gno","Body":"package cryptopunkstar\r\n\r\nfunc Render(path string) string {\r\n  return \"Cryptopunkstar ! \"\r\n}\r\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzwKh4+N5MIdvQGwVkrPwu8jTuoEKVhk4i1Z0RA2+yyK"},"signature":"EJBeClOLQxo5r52xzO10LnVuoL2CdwrJMXG7c6r3AgBG9SWX/rOJFDDQsPeu85wJO1kdUdtkO8drYjHRob+1ow=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371615"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1f9cz0xezps2mxcevdhc8nxcrzgnuyvzy6dmwhd","package":{"Name":"cryptopunkstar","Path":"gno.land/r/demo2/cryptopunkstar","Files":[{"Name":"package.gno","Body":"package cryptopunkstar\n\nfunc Render(path string) string {\n  return \"Cryptopunkstar ! \"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AzwKh4+N5MIdvQGwVkrPwu8jTuoEKVhk4i1Z0RA2+yyK"},"signature":"RV9Y9XzzQek+cgmzSqhWpcAuD7cckIpcDOzHbdOVQoMc9J4AxM6nm55JojV/+stfHeQL9qdYL1jf//oCUNr70Q=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371617"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g130g97u00ayr3gjr38w5qpf4he7xku8kszwe26y","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"/huK86r7m14nlL9/9x3lthkpSQFgBafrrn5yH9sm+mE6T95LffPZQU1JbRLOUBnIoSnJbTXpKHMR5O03ei1Ghg=="}],"memo":""},"blockNum":"371647"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1lee0xzj5xmuaur3wf5pw6jexrrs2r0uygskcww","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"+1bN9jhlpptFFA4eODe2kz6FUJd/gOylISJNuqhbHNdXI3EsHxbqPgobuiXhDG9dkv2oq6n4iffMaK1gP/O8/Q=="}],"memo":""},"blockNum":"371665"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1m4lkf0dg9lar74x3xcukj6c0svesv5vduq5l35","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"mzAx3GzBkjlz5avonmwAJk6r7x8BnobqbQ2X8gKcTKhlEEy6gG0ZRMcB9Y11/1LSFbcffRh8m5P2v7adg+MVVg=="}],"memo":""},"blockNum":"371667"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g103f46t2k9jj26q2nvhvfc7v2j9e6w08snln5pa","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"Gr00I2r71iygxkCjluY25wcEZcDxHgNzQzTDNORU4BAY60j22jkQBCGfjBa8LwJRyLXpOf2OqGA10RwI+tOWVw=="}],"memo":""},"blockNum":"371674"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v1","Path":"gno.land/r/x1unix/sf/v1","Files":[{"Name":"gno.mod","Body":"module gno.land/r/x1unix/sf/v1\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)"},{"Name":"v7.gno","Body":"package v11\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nvar (\n\tnextID    int\n\tisLocked  bool\n\tfeedbacks []Feedback\n\tmodAddrs  = []std.Address{\n\t\t// TODO: put moderator addresses\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t}\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\nfunc findFeedback(id int) (int, bool) {\n\tif id \u003e= len(feedbacks) {\n\t\treturn 0, false\n\t}\n\n\t// Sanity check.\n\t//\n\t// Open addressing presents in original simplefeedback codebase.\n\t// Keep it as is, just in case.\n\tif feedbacks[id].ID == id {\n\t\treturn id, true\n\t}\n\n\tfor i := range feedbacks {\n\t\tif feedbacks[id].ID == id {\n\t\t\treturn i, true\n\t\t}\n\t}\n\n\treturn 0, false\n}\n\nfunc isModerator(addr std.Address) bool {\n\tfor _, modAddr := range modAddrs {\n\t\tif modAddr == addr {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || isModerator(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tnextID++\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertNotLocked()\n\tassertIsModerator()\n\n\ti, ok := findFeedback(feedbackID)\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove a harmful message.\n\tfeedbacks[i].Content = \"\"\n\treturn \"Feedback was removed by a moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertNotLocked()\n\tassertIsModerator()\n\n\ti, ok := findFeedback(feedbackID)\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tfeedback := feedbacks[i]\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[i] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(_ string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor _, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", fb.ID))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by a moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.RespondAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"gozHAZhNdBOpXu/Uhd+WhcEpQM8ra0x58R5DY5bwn+lnnRx2E9l817/GnzkzoSqaFTzPoYEWGGQY1Wcxue8KIw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371725"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v1","Path":"gno.land/r/x1unix/sf/v1","Files":[{"Name":"gno.mod","Body":"module gno.land/r/x1unix/sf/v1\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)"},{"Name":"v7.gno","Body":"package v1\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nvar (\n\tnextID    int\n\tisLocked  bool\n\tfeedbacks []Feedback\n\tmodAddrs  = []std.Address{\n\t\t// TODO: put moderator addresses\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t}\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\nfunc findFeedback(id int) (int, bool) {\n\tif id \u003e= len(feedbacks) {\n\t\treturn 0, false\n\t}\n\n\t// Sanity check.\n\t//\n\t// Open addressing presents in original simplefeedback codebase.\n\t// Keep it as is, just in case.\n\tif feedbacks[id].ID == id {\n\t\treturn id, true\n\t}\n\n\tfor i := range feedbacks {\n\t\tif feedbacks[id].ID == id {\n\t\t\treturn i, true\n\t\t}\n\t}\n\n\treturn 0, false\n}\n\nfunc isModerator(addr std.Address) bool {\n\tfor _, modAddr := range modAddrs {\n\t\tif modAddr == addr {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || isModerator(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tnextID++\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertNotLocked()\n\tassertIsModerator()\n\n\ti, ok := findFeedback(feedbackID)\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove a harmful message.\n\tfeedbacks[i].Content = \"\"\n\treturn \"Feedback was removed by a moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertNotLocked()\n\tassertIsModerator()\n\n\ti, ok := findFeedback(feedbackID)\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tfeedback := feedbacks[i]\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[i] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(_ string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor _, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", fb.ID))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by a moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.RespondAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"3u+ANbw0SIxrtK74diTKk4WXdRrMXrUhL2sYyf2yiYd0SsT0UQRPd2goS2Ua/1+d11v9Xp9zr+uKfCbmNyjX+Q=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371727"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/sf/v1","func":"Render","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"NlJc/4qcsguVysXNxJTgOYpUj52EIuKnVKQ0D1RMv6VLLNeaKhGqBCqRTEIzr+hCQ4J5yg2vTaorX0nrtMaSIQ=="}],"memo":"Called through gno.studio"},"blockNum":"371729"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/sf/v1","func":"SubmitFeedback","args":["test"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"+e4LCeEZIEDZYj60VYn3wCq1GZMFC9KgbTwLxpgigDcBDNNdJGHXTZSVpKKB5slThAFJYq3ikJ1/qkXMghdwHA=="}],"memo":"Called through gno.studio"},"blockNum":"371731"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v2","Path":"gno.land/r/x1unix/sf/v2","Files":[{"Name":"gno.mod","Body":"module gno.land/r/x1unix/sf/v2\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)"},{"Name":"v7.gno","Body":"package v2\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nvar (\n\tnextID    = 0\n\tisLocked  = false\n\tfeedbacks = []Feedback{}\n\tmodAddrs  = []std.Address{\n\t\t// TODO: put moderator addresses\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t}\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\n\nfunc findFeedback(id int) (int, bool) {\n\tif id \u003e= len(feedbacks) {\n\t\treturn 0, false\n\t}\n\n\t// Sanity check.\n\t//\n\t// Open addressing presents in original simplefeedback codebase.\n\t// Keep it as is, just in case.\n\tif feedbacks[id].ID == id {\n\t\treturn id, true\n\t}\n\n\tfor i := range feedbacks {\n\t\tif feedbacks[id].ID == id {\n\t\t\treturn i, true\n\t\t}\n\t}\n\n\treturn 0, false\n}\n\nfunc isModerator(addr std.Address) bool {\n\tfor _, modAddr := range modAddrs {\n\t\tif modAddr == addr {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || isModerator(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tnextID++\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertNotLocked()\n\tassertIsModerator()\n\n\ti, ok := findFeedback(feedbackID)\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove a harmful message.\n\tfeedbacks[i].Content = \"\"\n\treturn \"Feedback was removed by a moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertNotLocked()\n\tassertIsModerator()\n\n\ti, ok := findFeedback(feedbackID)\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tfeedback := feedbacks[i]\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[i] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(_ string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor _, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", fb.ID))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by a moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.RespondAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"c3Z5WkXcYxF/yZ/ugJR/CAbzAmiFN49wFXNzkyVFk4soxMd4W9NIS09X2v465+ypynFDSde1nyFIm7YF/9EUaQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371734"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/sf/v2","func":"SubmitFeedback","args":["test"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"9rIMvskQamzEcdAffkgPxIfTG3x5F8kDfM/FnYSQa9MlqdQHjUporfzkTd3VrCP7zzYUxIS9ty8TjZSxEdJ47Q=="}],"memo":"Called through gno.studio"},"blockNum":"371736"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v3","Path":"gno.land/r/x1unix/sf/v3","Files":[{"Name":"gno.mod","Body":"module gno.land/r/x1unix/sf/v3\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)"},{"Name":"v7.gno","Body":"package v3\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nvar (\n\tnextID    = 0\n\tisLocked  = false\n\tfeedbacks = []Feedback{}\n\tmodAddrs  = []std.Address{\n\t\t// TODO: put moderator addresses\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t}\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\nfunc findFeedback(id int) (int, bool) {\n\t// TODO: use avl and seqid when will move to test4\n\tfor i := range feedbacks {\n\t\tif feedbacks[id].ID == id {\n\t\t\treturn i, true\n\t\t}\n\t}\n\n\treturn 0, false\n}\n\nfunc isModerator(addr std.Address) bool {\n\tfor _, modAddr := range modAddrs {\n\t\tif modAddr == addr {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || isModerator(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tfeedbacks = append(feedbacks, Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t})\n\n\tnextID++\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertNotLocked()\n\tassertIsModerator()\n\n\ti, ok := findFeedback(feedbackID)\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove a harmful message.\n\tfeedbacks[i].Content = \"\"\n\treturn \"Feedback was removed by a moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertNotLocked()\n\tassertIsModerator()\n\n\ti, ok := findFeedback(feedbackID)\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tfeedback := feedbacks[i]\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[i] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(_ string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor _, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", fb.ID))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by a moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.RespondAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"v2avcUqfn/Vt4YPulaHFrZ+0rjA9Zqb/aRmkFwV6ZhJUvaPlCTVhEFIxGhBpiaInjSSZhaJHvxOuy56WMiRfiw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371743"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/sf/v3","func":"SubmitFeedback","args":["test"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"CdkCkKLf1XoVH5aK1dgR5+QrAaQoI/3EUKePzEDgV8lTuXFD0ceQTtK+/Y+Dv6gGuEIAuUzceKmKWzt29RVlPg=="}],"memo":"Called through gno.studio"},"blockNum":"371745"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/sf/v3","func":"Render","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"Vr0vws1Sxd7n3+ojRhuEhuUndDLEuEm2sZjbUYARzMQmU4tP84NCJTQVZNmNcCHkpNGaidN3rNJwpLUVztVKkQ=="}],"memo":"Called through gno.studio"},"blockNum":"371747"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/sf/v3","func":"RespondToFeedback","args":["0","response!"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"Ou8lsVte9oMs1dh8mLiggAD57aevmWGY+hoy0jyoir1whrS860LOuKq5M3ukqXCeoPUDLd8F5o0Nofi5G1CZVQ=="}],"memo":"Called through gno.studio"},"blockNum":"371751"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/sf/v3","func":"Render","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"u72j8i5YjWz3EhpNtYZSgoq+/MCBDLHaP5oQykLjItYKQWnKrygRfz7vHGKGzT45zEMMMF3MBJbNvUwdd0RqeA=="}],"memo":"Called through gno.studio"},"blockNum":"371753"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v4","Path":"gno.land/r/x1unix/sf/v4","Files":[{"Name":"gno.mod","Body":"module gno.land/r/x1unix/sf/v4\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)"},{"Name":"v7.gno","Body":"package v4\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\nvar (\n\t// HTML escaping.\n\thtmlQuot = []byte(\"\u0026#34;\") // shorter than \"\u0026quot;\"\n\thtmlApos = []byte(\"\u0026#39;\") // shorter than \"\u0026apos;\" and apos was not in HTML until HTML5\n\thtmlAmp  = []byte(\"\u0026amp;\")\n\thtmlLt   = []byte(\"\u0026lt;\")\n\thtmlGt   = []byte(\"\u0026gt;\")\n\thtmlNull = []byte(\"\\uFFFD\")\n)\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nvar (\n\tnextID    = 1\n\tisLocked  = false\n\tfeedbacks = []Feedback{}\n\tmodAddrs  = []std.Address{\n\t\t// TODO: put moderator addresses\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t}\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\nfunc stripHtml(input string) string {\n\t// Copy from Go's `template.HTMLEscape`.\n\t// See: $GOROOT/src/text/template/funcs.go\n\n\t// Avoid allocation if we can.\n\tif !strings.ContainsAny(input, \"'\\\"\u0026\u003c\u003e\\000\") {\n\t\treturn input\n\t}\n\n\tb := []byte(input)\n\tw := strings.Builder{}\n\tlast := 0\n\tfor i, c := range b {\n\t\tvar html []byte\n\t\tswitch c {\n\t\tcase '\\000':\n\t\t\thtml = htmlNull\n\t\tcase '\"':\n\t\t\thtml = htmlQuot\n\t\tcase '\\'':\n\t\t\thtml = htmlApos\n\t\tcase '\u0026':\n\t\t\thtml = htmlAmp\n\t\tcase '\u003c':\n\t\t\thtml = htmlLt\n\t\tcase '\u003e':\n\t\t\thtml = htmlGt\n\t\tdefault:\n\t\t\tcontinue\n\t\t}\n\t\tw.Write(b[last:i])\n\t\tw.Write(html)\n\t\tlast = i + 1\n\t}\n\n\treturn w.String()\n}\n\nfunc findFeedback(id int) (int, bool) {\n\t// TODO: use avl and seqid when will move to test4\n\tfor i := range feedbacks {\n\t\tif feedbacks[id].ID == id {\n\t\t\treturn i, true\n\t\t}\n\t}\n\n\treturn 0, false\n}\n\nfunc isModerator(addr std.Address) bool {\n\tfor _, modAddr := range modAddrs {\n\t\tif modAddr == addr {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || isModerator(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tfeedbacks = append(feedbacks, Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   stripHtml(message),\n\t\tCreatedAt: time.Now(),\n\t})\n\n\tnextID++\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertNotLocked()\n\tassertIsModerator()\n\n\ti, ok := findFeedback(feedbackID)\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove a harmful message.\n\tfeedbacks[i].Content = \"\"\n\treturn \"Feedback was removed by a moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertNotLocked()\n\tassertIsModerator()\n\n\ti, ok := findFeedback(feedbackID)\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tfeedback := feedbacks[i]\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = stripHtml(response)\n\tfeedbacks[i] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(_ string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor _, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", fb.ID))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by a moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\\n\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.RespondAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"ie8chZuq7mDkJkbqyAf1nqbd/1xY9pAXkie3ScfZC7xdp/douqs34ANaZdX+q5zSu5cXu0ln9RXwBzPnM/uGYw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371767"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/sf/v4","func":"SubmitFeedback","args":["test"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"gkAr7DqjE/oxDYAD8//khIUV9T5PRp/JOGCHeQFXz6UtTU3vw/n2lYfEJDVLkKjGFErqOSXS6WVdqqgFMXY1Yg=="}],"memo":"Called through gno.studio"},"blockNum":"371769"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/sf/v4","func":"RespondToFeedback","args":["1","foobar"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"WegxC7PhxiOeNi38+l0wTFuiHyGaCv/4q1E3FQdgxLsIG91iFq5tIc7Yp0N0Cz681dOj8AZr16KiUDqqFVSJRw=="}],"memo":"Called through gno.studio"},"blockNum":"371771"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v5","Path":"gno.land/r/x1unix/sf/v5","Files":[{"Name":"gno.mod","Body":"module gno.land/r/x1unix/sf/v5\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)"},{"Name":"v7.gno","Body":"package v5\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\nvar (\n\t// HTML escaping.\n\thtmlQuot = []byte(\"\u0026#34;\") // shorter than \"\u0026quot;\"\n\thtmlApos = []byte(\"\u0026#39;\") // shorter than \"\u0026apos;\" and apos was not in HTML until HTML5\n\thtmlAmp  = []byte(\"\u0026amp;\")\n\thtmlLt   = []byte(\"\u0026lt;\")\n\thtmlGt   = []byte(\"\u0026gt;\")\n\thtmlNull = []byte(\"\\uFFFD\")\n)\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nvar (\n\tnextID    = 1\n\tisLocked  = false\n\tfeedbacks = []Feedback{}\n\tmodAddrs  = []std.Address{\n\t\t// TODO: put moderator addresses\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t}\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\nfunc stripHtml(input string) string {\n\t// Copy from Go's `template.HTMLEscape`.\n\t// See: $GOROOT/src/text/template/funcs.go\n\n\t// Avoid allocation if we can.\n\tif !strings.ContainsAny(input, \"'\\\"\u0026\u003c\u003e\\000\") {\n\t\treturn input\n\t}\n\n\tb := []byte(input)\n\tw := strings.Builder{}\n\tlast := 0\n\tfor i, c := range b {\n\t\tvar html []byte\n\t\tswitch c {\n\t\tcase '\\000':\n\t\t\thtml = htmlNull\n\t\tcase '\"':\n\t\t\thtml = htmlQuot\n\t\tcase '\\'':\n\t\t\thtml = htmlApos\n\t\tcase '\u0026':\n\t\t\thtml = htmlAmp\n\t\tcase '\u003c':\n\t\t\thtml = htmlLt\n\t\tcase '\u003e':\n\t\t\thtml = htmlGt\n\t\tdefault:\n\t\t\tcontinue\n\t\t}\n\t\tw.Write(b[last:i])\n\t\tw.Write(html)\n\t\tlast = i + 1\n\t}\n\n\treturn w.String()\n}\n\nfunc findFeedback(id int) (int, bool) {\n\t// TODO: use avl and seqid when will move to test4\n\tfor i := range feedbacks {\n\t\tif feedbacks[i].ID == id {\n\t\t\treturn i, true\n\t\t}\n\t}\n\n\treturn 0, false\n}}\n\nfunc isModerator(addr std.Address) bool {\n\tfor _, modAddr := range modAddrs {\n\t\tif modAddr == addr {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || isModerator(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tfeedbacks = append(feedbacks, Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   stripHtml(message),\n\t\tCreatedAt: time.Now(),\n\t})\n\n\tnextID++\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertNotLocked()\n\tassertIsModerator()\n\n\ti, ok := findFeedback(feedbackID)\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove a harmful message.\n\tfeedbacks[i].Content = \"\"\n\treturn \"Feedback was removed by a moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertNotLocked()\n\tassertIsModerator()\n\n\ti, ok := findFeedback(feedbackID)\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tfeedback := feedbacks[i]\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = stripHtml(response)\n\tfeedbacks[i] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(_ string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor _, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", fb.ID))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by a moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\\n\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.RespondAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"uieEuaFAL6mk/HbV1cv/BoMJyiQA+pS3umw+NPmhmC53W2NoLQ0FJ2NEL55jzN6LoMGR7GB2kLX3NbmU886mlA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371775"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v5","Path":"gno.land/r/x1unix/sf/v5","Files":[{"Name":"gno.mod","Body":"module gno.land/r/x1unix/sf/v5\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)"},{"Name":"v7.gno","Body":"package v5\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\nvar (\n\t// HTML escaping.\n\thtmlQuot = []byte(\"\u0026#34;\") // shorter than \"\u0026quot;\"\n\thtmlApos = []byte(\"\u0026#39;\") // shorter than \"\u0026apos;\" and apos was not in HTML until HTML5\n\thtmlAmp  = []byte(\"\u0026amp;\")\n\thtmlLt   = []byte(\"\u0026lt;\")\n\thtmlGt   = []byte(\"\u0026gt;\")\n\thtmlNull = []byte(\"\\uFFFD\")\n)\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nvar (\n\tnextID    = 1\n\tisLocked  = false\n\tfeedbacks = []Feedback{}\n\tmodAddrs  = []std.Address{\n\t\t// TODO: put moderator addresses\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t}\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\nfunc stripHtml(input string) string {\n\t// Copy from Go's `template.HTMLEscape`.\n\t// See: $GOROOT/src/text/template/funcs.go\n\n\t// Avoid allocation if we can.\n\tif !strings.ContainsAny(input, \"'\\\"\u0026\u003c\u003e\\000\") {\n\t\treturn input\n\t}\n\n\tb := []byte(input)\n\tw := strings.Builder{}\n\tlast := 0\n\tfor i, c := range b {\n\t\tvar html []byte\n\t\tswitch c {\n\t\tcase '\\000':\n\t\t\thtml = htmlNull\n\t\tcase '\"':\n\t\t\thtml = htmlQuot\n\t\tcase '\\'':\n\t\t\thtml = htmlApos\n\t\tcase '\u0026':\n\t\t\thtml = htmlAmp\n\t\tcase '\u003c':\n\t\t\thtml = htmlLt\n\t\tcase '\u003e':\n\t\t\thtml = htmlGt\n\t\tdefault:\n\t\t\tcontinue\n\t\t}\n\t\tw.Write(b[last:i])\n\t\tw.Write(html)\n\t\tlast = i + 1\n\t}\n\n\treturn w.String()\n}\n\nfunc findFeedback(id int) (int, bool) {\n\t// TODO: use avl and seqid when will move to test4\n\tfor i := range feedbacks {\n\t\tif feedbacks[i].ID == id {\n\t\t\treturn i, true\n\t\t}\n\t}\n\n\treturn 0, false\n}\n\nfunc isModerator(addr std.Address) bool {\n\tfor _, modAddr := range modAddrs {\n\t\tif modAddr == addr {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || isModerator(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tfeedbacks = append(feedbacks, Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   stripHtml(message),\n\t\tCreatedAt: time.Now(),\n\t})\n\n\tnextID++\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertNotLocked()\n\tassertIsModerator()\n\n\ti, ok := findFeedback(feedbackID)\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove a harmful message.\n\tfeedbacks[i].Content = \"\"\n\treturn \"Feedback was removed by a moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertNotLocked()\n\tassertIsModerator()\n\n\ti, ok := findFeedback(feedbackID)\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tfeedback := feedbacks[i]\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = stripHtml(response)\n\tfeedbacks[i] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(_ string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor _, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", fb.ID))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by a moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\\n\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.RespondAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"ckQlrhVnxhqVOflOErItPzUGUYnIoz/Mqms7uHicO0MvjT8qy4jg3BxHxlroiyXaynfnqG1UuFsiXNGWgNgJ+g=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371777"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/sf/v5","func":"RespondToFeedback","args":["11","eqwq"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"41YqwXShR1uuRZwCu+toSWyX/WpquCZySyANwDMQ9Z8VaG4wHEIHqx0LNbX7T9FavUt/sO14Hp7rvx5dlJD84A=="}],"memo":"Called through gno.studio"},"blockNum":"371779"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/sf/v5","func":"SubmitFeedback","args":["test1"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"4oj4FwYhqQlVi5rvF84W8/a4I5Z7+kaK1Fjw6fUke8FT2s5HVRKrMgZSC5CpBb7qn1P4V+kjaW0HXHKLVd2jrA=="}],"memo":"Called through gno.studio"},"blockNum":"371781"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/sf/v5","func":"RespondToFeedback","args":["1","test"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"2S/a4SxlipJXMY/tF7YGtoeoSKtrl7CHl7QGXv7pRlFd2CQsVNkpVrDp/ro2GKbnAxttd6cXckNr9hq+H1+0og=="}],"memo":"Called through gno.studio"},"blockNum":"371783"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/sf/v5","func":"Render","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"rTQNwq27/1f8dF6JjjgDU4CdPtlmRw2oCoxU4KzCqKUcMtn7k/FBA7vLxxHVxYBw6BHG+aSXn60ylY8oOqYNoQ=="}],"memo":"Called through gno.studio"},"blockNum":"371785"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/sf/v5","func":"SubmitFeedback","args":["\u003cb\u003eHello\u003cb/\u003e World"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"9q1A1RpnKK0SRk3nSAqSlT8uAdYL4fRG0ettc3AklCQrlEdEuz74tGVrB7UVaqlpztrn1ZZbt/Ozp2cZq9AJTg=="}],"memo":"Called through gno.studio"},"blockNum":"371787"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/sf/v5","func":"Render","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"JDFWpr4V+5/hL86vikvW+/sC4ZNwq0hDmWzoIgpGHAsR7WYpIe+G3ofTkAwxw0Az7Fs9HJrSkKrWmKtG36JAWg=="}],"memo":"Called through gno.studio"},"blockNum":"371789"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/sf/v5","func":"Render","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"JrvfqfJz7vHAPbuJh0n0KVA3vrB72B1j6vqh9ITXkBFBATZ7LwDXMvpetsnjFpIb95FsRLp+UEEEjxLXJePl8A=="}],"memo":"Called through gno.studio"},"blockNum":"371793"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/sf/v5","func":"BanFeedback","args":["2"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"BhnAyN3ZHoqEUoNzMjAEbOcl08T6b/+Szc5I/58lXbcyd12RlMFh3I/A2qLmBJz3Zi8jHGWy/kRtEO3Cag9NWA=="}],"memo":"Called through gno.studio"},"blockNum":"371795"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/sf/v5","func":"Render","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"SMEWodpdIeCX0Wg1Vx653IAQ4Stc5j1Tbe1R4aJ8ISJn+meXbqHDlfsz6/D8HCMVOO8OLkQhPl14Cu6IZxbjcQ=="}],"memo":"Called through gno.studio"},"blockNum":"371797"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/sf/v5","func":"LockFeedback","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"yVW0ZMnN7eX8MFywXnt5WIuJk/r4yALgpaaJfAcpSjJGVhRVHROqL1dcwG209Mf8WnIpSuaqllT+ORXtykFvAQ=="}],"memo":"Called through gno.studio"},"blockNum":"371799"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/sf/v5","func":"SubmitFeedback","args":["asdaa"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"W+97R931MDTFQoL1WzuQVX+89N1fsHjZUqXt5LLkLW15NBsRnxC/6+Y4x3aCX/yCzY6n7wzyRD2NITa4rX3F8g=="}],"memo":"Called through gno.studio"},"blockNum":"371801"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/sf/v5","func":"UnlockFeedback","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"tAV/KWyWnmxCUCeq2OGWcfQ1oY0meW2Ubj83b9uZ/7UoWrfBb4o5cONIw7rwEdyL3M8YbsGZf5CSjGFj21QHDg=="}],"memo":"Called through gno.studio"},"blockNum":"371803"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v1","Path":"gno.land/r/x1unix/gnofeedback/v1","Files":[{"Name":"gno.mod","Body":"module gno.land/r/x1unix/gnofeedback/v1\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)"},{"Name":"v1.gno","Body":"package v1\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\nvar (\n\t// HTML escaping.\n\thtmlQuot = []byte(\"\u0026#34;\") // shorter than \"\u0026quot;\"\n\thtmlApos = []byte(\"\u0026#39;\") // shorter than \"\u0026apos;\" and apos was not in HTML until HTML5\n\thtmlAmp  = []byte(\"\u0026amp;\")\n\thtmlLt   = []byte(\"\u0026lt;\")\n\thtmlGt   = []byte(\"\u0026gt;\")\n\thtmlNull = []byte(\"\\uFFFD\")\n)\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nvar (\n\tnextID    = 1\n\tisLocked  = false\n\tfeedbacks = []Feedback{}\n\tmodAddrs  = []std.Address{\n\t\t// TODO: put moderator addresses\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t}\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\nfunc stripHtml(input string) string {\n\t// Copy from Go's `template.HTMLEscape`.\n\t// See: $GOROOT/src/text/template/funcs.go\n\n\t// Avoid allocation if we can.\n\tif !strings.ContainsAny(input, \"'\\\"\u0026\u003c\u003e\\000\") {\n\t\treturn input\n\t}\n\n\tb := []byte(input)\n\tw := strings.Builder{}\n\tlast := 0\n\tfor i, c := range b {\n\t\tvar html []byte\n\t\tswitch c {\n\t\tcase '\\000':\n\t\t\thtml = htmlNull\n\t\tcase '\"':\n\t\t\thtml = htmlQuot\n\t\tcase '\\'':\n\t\t\thtml = htmlApos\n\t\tcase '\u0026':\n\t\t\thtml = htmlAmp\n\t\tcase '\u003c':\n\t\t\thtml = htmlLt\n\t\tcase '\u003e':\n\t\t\thtml = htmlGt\n\t\tdefault:\n\t\t\tcontinue\n\t\t}\n\t\tw.Write(b[last:i])\n\t\tw.Write(html)\n\t\tlast = i + 1\n\t}\n\n\tw.Write(b[last:])\n\treturn w.String()\n}\n\nfunc findFeedback(id int) (int, bool) {\n\t// TODO: use avl and seqid when will move to test4\n\tfor i := range feedbacks {\n\t\tif feedbacks[i].ID == id {\n\t\t\treturn i, true\n\t\t}\n\t}\n\n\treturn 0, false\n}\n\nfunc isModerator(addr std.Address) bool {\n\tfor _, modAddr := range modAddrs {\n\t\tif modAddr == addr {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || isModerator(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tfeedbacks = append(feedbacks, Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   stripHtml(message),\n\t\tCreatedAt: time.Now(),\n\t})\n\n\tnextID++\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertNotLocked()\n\tassertIsModerator()\n\n\ti, ok := findFeedback(feedbackID)\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove a harmful message.\n\tfeedbacks[i].Content = \"\"\n\treturn \"Feedback was removed by a moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertNotLocked()\n\tassertIsModerator()\n\n\ti, ok := findFeedback(feedbackID)\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tfeedback := feedbacks[i]\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = stripHtml(response)\n\tfeedbacks[i] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(_ string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor _, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", fb.ID))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by a moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\\n\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.RespondAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"j+81K7qiUlEiNYzEZRdo/+pZrlDjbwzFFGHLT/BwHpot02qg620bRoafT7QgwkDxTBcCrbKw+mXIRoy2if3gkA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371808"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/gnofeedback/v1","func":"SubmitFeedback","args":["Hello there?"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"Sx0h2is3n5X6kRL523XO62khZawlgG/lnpBhAWXua8dLcoBcJk20wbSYjtxKk13aDyM7qOsgmZa9hxoIWNKInw=="}],"memo":"Called through gno.studio"},"blockNum":"371812"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/gnofeedback/v1","func":"SubmitFeedback","args":["FUCK!"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"Fyy2zhpfGxNUIKv9Ni4vmb4Sl04eQITLM+lreL3Z/CpW3qZ2Vp31mIb3gUY/AmDNxWZHzI7B3LgQXUXKfDG6KQ=="}],"memo":"Called through gno.studio"},"blockNum":"371814"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/gnofeedback/v1","func":"RespondToFeedback","args":["2","You will be banned!"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"FHEYGVezOTtaInjOIZIJzdCz7gFrxN1sotZZGP5TrJJwrYtPkznBPOea5Y95lAYyl3biMQyeVg7+6d4z/xOABQ=="}],"memo":"Called through gno.studio"},"blockNum":"371816"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/gnofeedback/v1","func":"BanFeedback","args":["2"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"7xxdHeqv8cE29VZiKDYPhJvypiHBe3WYoxmzroY2gqJXKkCdC/Fj+Bmo/bjOfAcjZC30hct5lMu3zovjByWpqg=="}],"memo":"Called through gno.studio"},"blockNum":"371818"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","send":"","pkg_path":"gno.land/r/x1unix/gnofeedback/v1","func":"Render","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"up4uJ+RK9FxFCYZ6tbU+xpNX/3KEitYDmVZ575phlxUWjWJVi+Drjr3B3RQ1XmNwdqawISfLgRDtnV6YylNhAw=="}],"memo":"Called through gno.studio"},"blockNum":"371820"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","package":{"Name":"feedbackdenystest3","Path":"gno.land/r/feedback/feedbackdenystest3","Files":[{"Name":"v7.gno","Body":"package feedbackdenystest3\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\nvar (\n\t// HTML escaping.\n\thtmlQuot = []byte(\"\u0026#34;\") // shorter than \"\u0026quot;\"\n\thtmlApos = []byte(\"\u0026#39;\") // shorter than \"\u0026apos;\" and apos was not in HTML until HTML5\n\thtmlAmp  = []byte(\"\u0026amp;\")\n\thtmlLt   = []byte(\"\u0026lt;\")\n\thtmlGt   = []byte(\"\u0026gt;\")\n\thtmlNull = []byte(\"\\uFFFD\")\n)\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Time\n\tRespondAt time.Time\n}\n\nvar (\n\tnextID    = 1\n\tisLocked  = false\n\tfeedbacks = []Feedback{}\n\tmodAddrs  = []std.Address{\n\t\t// TODO: put moderator addresses\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t}\n\townerAddr = std.Address(\n\t\t// TODO: put realm's owner address\n\t\t\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\",\n\t)\n)\n\nfunc stripHtml(input string) string {\n\t// Copy from Go's `template.HTMLEscape`.\n\t// See: $GOROOT/src/text/template/funcs.go\n\n\t// Avoid allocation if we can.\n\tif !strings.ContainsAny(input, \"'\\\"\u0026\u003c\u003e\\000\") {\n\t\treturn input\n\t}\n\n\tb := []byte(input)\n\tw := strings.Builder{}\n\tlast := 0\n\tfor i, c := range b {\n\t\tvar html []byte\n\t\tswitch c {\n\t\tcase '\\000':\n\t\t\thtml = htmlNull\n\t\tcase '\"':\n\t\t\thtml = htmlQuot\n\t\tcase '\\'':\n\t\t\thtml = htmlApos\n\t\tcase '\u0026':\n\t\t\thtml = htmlAmp\n\t\tcase '\u003c':\n\t\t\thtml = htmlLt\n\t\tcase '\u003e':\n\t\t\thtml = htmlGt\n\t\tdefault:\n\t\t\tcontinue\n\t\t}\n\t\tw.Write(b[last:i])\n\t\tw.Write(html)\n\t\tlast = i + 1\n\t}\n\n\tw.Write(b[last:])\n\treturn w.String()\n}\n\nfunc findFeedback(id int) (int, bool) {\n\t// TODO: use avl and seqid when will move to test4\n\tfor i := range feedbacks {\n\t\tif feedbacks[i].ID == id {\n\t\t\treturn i, true\n\t\t}\n\t}\n\n\treturn 0, false\n}\n\nfunc isModerator(addr std.Address) bool {\n\tfor _, modAddr := range modAddrs {\n\t\tif modAddr == addr {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || isModerator(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tfeedbacks = append(feedbacks, Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   stripHtml(message),\n\t\tCreatedAt: time.Now(),\n\t})\n\n\tnextID++\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertNotLocked()\n\tassertIsModerator()\n\n\ti, ok := findFeedback(feedbackID)\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove a harmful message.\n\tfeedbacks[i].Content = \"\"\n\treturn \"Feedback was removed by a moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertNotLocked()\n\tassertIsModerator()\n\n\ti, ok := findFeedback(feedbackID)\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tfeedback := feedbacks[i]\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = stripHtml(response)\n\tfeedbacks[i] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(_ string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor _, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", fb.ID))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by a moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\\n\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.RespondAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"NQ++f9kE1Vtcgl4xQaXXUi5/ouq6ehoBRbkg9Jq/nPdnFKLyMcMe+9nKBY1nS1Jhp2cfudSOZJ0AR1UWrOmlBw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"371848"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","send":"","pkg_path":"gno.land/r/feedback/feedbackdenystest3","func":"SubmitFeedback","args":["nice app"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"yd1wJUfwhGz6GS9pN1BJwY9fuSZ/56ri7R7/99wiUEMgV84nZNqb8udOxUIhOcbaYzbNlnBqmOkqNTsTtyOSUg=="}],"memo":"Called through gno.studio"},"blockNum":"371851"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g17fuh620zyj2wfhnx75anjfjaudt4xqd4aq79k0","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"J8xWbFKXdd37sXKjvuCje9Uc+l5x9hPdIMh7L/VVoJtjrHnxUWne5XxzMc4I08Oe1IUH9oamWxHVytb5rylSIQ=="}],"memo":""},"blockNum":"371868"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g103f46t2k9jj26q2nvhvfc7v2j9e6w08snln5pa","to_address":"g1lee0xzj5xmuaur3wf5pw6jexrrs2r0uygskcww","amount":"3000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A5QhEUqu0iYeVcK2qt3Y1jQhZc/i/3cBvCuVMVo+WubK"},"signature":"IL0nQGLUNYUfXJvBgex3xTkjs/M2IJR4o72vs34TX/cMM2J2UsxI5Ot/h0Mjrusypl66slQG+AF78xabtgwF6A=="}],"memo":""},"blockNum":"371892"}
