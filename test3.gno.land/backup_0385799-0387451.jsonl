{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1sjkrfedzk5vgma2d25gc7w8g444pk84r9agz8n","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"/1pU1tX1an3xZRmGByEB263hFHz6pjEfEwupNk4u53ITRhsZv4aNzjZeucNqmHSVzdn8Pfm8zvfKPlhTxna+Jg=="}],"memo":""},"blockNum":"385971"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g162jgpk4740r6a7g53cgz9ahxqtyuekgqchw6w9","to_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","amount":"19999999ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqD4AqUY/VAPgrwGhq7e9Px4Pj81GRDZYwRvm+A69599"},"signature":"CmhdVRqbu7zo1TbliLnMuKp0fGBGVAgSyfFHguCDlmcu5XVzpjwjtJVTDz0WYXw8SN46lsEjzhvRzIr/mrihUw=="}],"memo":""},"blockNum":"385978"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g162jgpk4740r6a7g53cgz9ahxqtyuekgqchw6w9","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"GC01ZhEaYq2LPDbfqxNwfERBrqZZp73JVtII03RhPj9bnbMqS24j3ZoTz7x3osdOlAebwyfU1Aj/t46x9yIYYQ=="}],"memo":""},"blockNum":"385980"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g162jgpk4740r6a7g53cgz9ahxqtyuekgqchw6w9","to_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","amount":"9999999ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AqD4AqUY/VAPgrwGhq7e9Px4Pj81GRDZYwRvm+A69599"},"signature":"jsVvpbd8RI1xX57Om/sci/6M6E6hXywUpmtK0A0CTJplypeH0Wn2c6F7nKL261m0JKryh5uDBGJnSbSMtjyVaQ=="}],"memo":""},"blockNum":"385982"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","send":"","pkg_path":"gno.land/r/feedback/simplefeedback","func":"SubmitFeedback","args":["nice"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"Be1UTBmn1Nw2MromKwjw2sdScT8mBIVP5+gHUdYbY+1IClH9uUGOjvQckS686ocX5A8dCdvsmf+IJOMS78yOfA=="}],"memo":"Called through gno.studio"},"blockNum":"386080"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15wmukt79xymnnu6c4de32trnufudqum60yrxu8","send":"","pkg_path":"gno.land/r/test10/poll","func":"Vote","args":["test"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6QxDeE9T4utsKFysdC0JZTyVwnc4UgqQ7vhHJf5pp+p"},"signature":"AWlMjEZNiZUew8XKjohdHN2l6mheSr6b6OffazzR5K8mx7YiAnKcRPo/Wc0OXY+YjmnJUbCQEnwSrTt2vjVeCg=="}],"memo":"Called through gno.studio"},"blockNum":"386113"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15wmukt79xymnnu6c4de32trnufudqum60yrxu8","send":"","pkg_path":"gno.land/r/test10/poll","func":"Vote","args":["test"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6QxDeE9T4utsKFysdC0JZTyVwnc4UgqQ7vhHJf5pp+p"},"signature":"25KyFRsvAyvpfUPPbgRvEUu+G30Ctg5HJy6rjHIh4GU6d6ZAQ8Pf1YgNmopYjj1IxUcF4+OKm7tEfg9vHWRExw=="}],"memo":"Called through gno.studio"},"blockNum":"386117"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/jeronimoalbi/poll_v1","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"vUQuxpryaleXiYX12rCUqzWt45tvppqdBn9eEBjKqJ0NZPtTYHHau/dLe2ytTfmkJUyLRaGh1iNm8oRAkbvufA=="}],"memo":"Called through gno.studio"},"blockNum":"386159"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1smpacl27vcg7x4ysl949u86qazsf0e05qsum6e","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"1/afcGEzjgaFKBdHdEdfiEKr2mmtrPtMG1cmswE1abtfIYBtL1a1Ssp1aXMlxpLwmcdkcnFjbEQE4BM4947JRg=="}],"memo":""},"blockNum":"386235"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test10/poll","func":"Vote","args":["Blue"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"OIU7ob4IHid6hXb4wWyujkfnUD4qWQ+9+NlpSEvr9jEJJbXrH3EN7kTPGBf57BdHpRK4hlWKtHHR7/aiMDrTeg=="}],"memo":"Called through gno.studio"},"blockNum":"386282"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test10/poll","func":"Vote","args":["Blue"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"pu3RRVlJOhM5ie4dGrbv+kn0ldHfGpbX4jL+YLtUiQBTq+Zo58V68ZTh9p5pKztxITf6Pwc32++boSkxYBC9XQ=="}],"memo":"Called through gno.studio"},"blockNum":"386296"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test10/poll","func":"Vote","args":["Blue"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"YMY9Cjkk1kuIgjDWMZ44HefeLqIR3HEO/7J8KXno4I5jW0u1oAwYsVG4jHjPrmaijLiaoM48d1iwPnWPn9i3WA=="}],"memo":"Called through gno.studio"},"blockNum":"386301"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test10/poll","func":"Vote","args":["Blue"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"c0VopB4aGgxTyQd660e3j7WOW5NhPWnU17Y/vSTqgsNAq4BQlNmmzeznaRU/34HcSFrMAS7GHhqZsq1C8ZQ2Ng=="}],"memo":"Called through gno.studio"},"blockNum":"386303"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","package":{"Name":"poll_v1","Path":"gno.land/r/testest/poll_v1","Files":[{"Name":"package.gno","Body":"package poll_v1\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first learn about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1rdld2ay4c3r3eghk563sz6ne79mmplcl8zatuu\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []std.Address\n\t}\n)\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, a := range answer.Participants {\n\t\t\tif a == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// Vote submits a vote for one of the poll choices.\n//\n// Only one of the choices should be selected to consider the vote valid.\n// The answer you choose should be marked as True (Yes), ensuring that all other options are marked as False (No).\n//\n// When did you first learn about Gno.land?\n// - This month\n// - This year\n// - 1-2 years ago\n// - Since its inception\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\turl := getGnoStudioConnectVoteURL(\"gno.land\" + nextRealmPath)\n\t\treturn \"This realm is deprecated but you can submit a vote to the updated version at \" + url\n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tcaller := std.GetOrigCaller()\n\tassertFirstVote(caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, caller)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted yes on \"%s\" you can check out the result at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated\u003c/br\u003eAn updated version can be found at \u003ca href=\\\"%s\\\"\u003ehttps://%s.gno.land%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tstd.GetChainID(),\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Poll: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Answers:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their voted answer\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, addr := range a.Participants {\n\t\t\t\tbuf.WriteString(\"  - \" + addr.String() + \"\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tif !strings.HasPrefix(realmPath, \"/r/\") {\n\t\tpanic(\"Realm path must start with /r/\")\n\t}\n\n\tif realmPath == strings.TrimPrefix(std.CurrentRealmPath(), \"gno.land\") {\n\t\tpanic(\"Realm path must be different than current realm's path\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to https://\" + std.GetChainID() + \".gno.land\" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"No choice has been selected, you should submit a vote for one of the answers.\\n\" +\n\t\t\t\t\"Only one of the choices should be selected to consider the vote as valid.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple choices has been selected, you should submit a vote for only one answer.\\n\" +\n\t\t\t\t\"The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"ilQy0VDK+rRI9nx36TcY9FEaSwrXg3BqlsHMrZdiPIJJ0CqStj51xOaC/dMgLfm8PPpHlH5RIAJr44B5vYGL9w=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386332"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","package":{"Name":"poll_v1","Path":"gno.land/r/testest2/poll_v1","Files":[{"Name":"package.gno","Body":"package poll_v1\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first learn about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []std.Address\n\t}\n)\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, a := range answer.Participants {\n\t\t\tif a == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// Vote submits a vote for one of the poll choices.\n//\n// Only one of the choices should be selected to consider the vote valid.\n// The answer you choose should be marked as True (Yes), ensuring that all other options are marked as False (No).\n//\n// When did you first learn about Gno.land?\n// - This month\n// - This year\n// - 1-2 years ago\n// - Since its inception\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\turl := getGnoStudioConnectVoteURL(\"gno.land\" + nextRealmPath)\n\t\treturn \"This realm is deprecated but you can submit a vote to the updated version at \" + url\n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tcaller := std.GetOrigCaller()\n\tassertFirstVote(caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, caller)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted yes on \"%s\" you can check out the result at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated\u003c/br\u003eAn updated version can be found at \u003ca href=\\\"%s\\\"\u003ehttps://%s.gno.land%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tstd.GetChainID(),\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Poll: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Answers:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their voted answer\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, addr := range a.Participants {\n\t\t\t\tbuf.WriteString(\"  - \" + addr.String() + \"\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tif !strings.HasPrefix(realmPath, \"/r/\") {\n\t\tpanic(\"Realm path must start with /r/\")\n\t}\n\n\tif realmPath == strings.TrimPrefix(std.CurrentRealmPath(), \"gno.land\") {\n\t\tpanic(\"Realm path must be different than current realm's path\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to https://\" + std.GetChainID() + \".gno.land\" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"No choice has been selected, you should submit a vote for one of the answers.\\n\" +\n\t\t\t\t\"Only one of the choices should be selected to consider the vote as valid.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple choices has been selected, you should submit a vote for only one answer.\\n\" +\n\t\t\t\t\"The answer you choose should be selected as True (Yes) making sure that all other options are selected as False (No).\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"TUw0oOmu+TF0FB2WHBVssuHcL5u8KTW1zf95LRKEZpA+6pHz7LA1pIkKpou/GQfEJS/daYrliDI2paRRWXk25g=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386334"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/testest2/poll_v1","func":"Vote","args":["false","true","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"NT0Q6lQyc9p190uGGFZARdr/Pej54X4y13LzCQzyFXtPclctkGglnCvoLoPeMkryl2HKYsSomDobk1P7SMrYrg=="}],"memo":"Called through gno.studio"},"blockNum":"386338"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/testest2/poll_v1","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"YkVW6lKQreTvMsihBCA4qwauplGCXgrCT2VbdLhgYiIFSrpi0qapoZxMtomLIg4hrCXZYSo1S/abdvP2gEdqtQ=="}],"memo":"Called through gno.studio"},"blockNum":"386372"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","send":"","pkg_path":"gno.land/r/testest2/poll_v1","func":"Vote","args":["true","true","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"x5QoSpX2uLrZKVqUu5Cz0wKzMF+7ZpZ5PojmvtLnMmt5mO65NCtyKiNn2aoCOIhMfNImDXP0Eh/EGv587k5Kzw=="}],"memo":"Called through gno.studio"},"blockNum":"386379"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","send":"","pkg_path":"gno.land/r/testest2/poll_v1","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"F6wO+UjmcGZSanc/aabznoBO6h5WZRAoqGmKk8RlsZlIl8rjof+23QekIQrka0c8kvcO+GFM4GVzcdE4tdYfKw=="}],"memo":"Called through gno.studio"},"blockNum":"386381"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","send":"","pkg_path":"gno.land/r/testest2/poll_v1","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"MxXEBikaaoC8coczKbD+B2YUalU59As+ov9lRrP/8CFbFhJnlm7rSwAZn0AZMN/5CEP6ZHopDzzwKxILd+yyRA=="}],"memo":"Called through gno.studio"},"blockNum":"386392"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","send":"","pkg_path":"gno.land/r/testest2/poll_v1","func":"LockRealm","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"8vZV2Ti3/MI6E0op53psCz69hwN7oXHDcmBc/d9myq4f1MzM7puJuo/EKyFUuFuwh1QtUuDsqbAF3y49btxaDg=="}],"memo":"Called through gno.studio"},"blockNum":"386401"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/testest2/poll_v1","func":"LockRealm","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"xPs077k1v/Y9VG9uP2kEP18q3dkycsPSYIY+f5exiAAgySiqK4DqiTVTY4dJUorzDmAn2pfXPaVzEF3dx/t6gw=="}],"memo":"Called through gno.studio"},"blockNum":"386403"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/testest2/poll_v1","func":"DeprecateRealm","args":["gno.land/r/test/test"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"w21CLHngj9zWy5JdULZsxik8z1YTUZVjS9ufYkdiHKtRCSD1vaRM1hAq6ERQUz2eu8tsYJveJWhEy2r5OXp5ag=="}],"memo":"Called through gno.studio"},"blockNum":"386405"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/testest2/poll_v1","func":"DeprecateRealm","args":["r/test/test"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"7ddPgeGlEbi8HTvvUC9CrTrPrUx+ZTFzraDZjOAg/zZZIyvdCh7jJqA8KKGNCfQQAMW387oArOoN8COTHyTHZw=="}],"memo":"Called through gno.studio"},"blockNum":"386407"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/testest2/poll_v1","func":"DeprecateRealm","args":["/r/test/test"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"W4zxkktP+t5FFzF8aNsEU+PY1LXZDgNYBG+DO7nHtfEGZpjdxvaUO5Y/MAhHk7ZmaPs2xNyfvi4ekrlK/zUYHg=="}],"memo":"Called through gno.studio"},"blockNum":"386409"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","package":{"Name":"poll_v1","Path":"gno.land/r/test3/poll_v1","Files":[{"Name":"package.gno","Body":"package poll_v1\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first hear about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1rdld2ay4c3r3eghk563sz6ne79mmplcl8zatuu\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []std.Address\n\t}\n)\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, a := range answer.Participants {\n\t\t\tif a == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// Vote submits your choice for the poll.\n//\n// The option you choose must be marked as 'True (Yes)', while all other options must\n// be marked as 'False (No)' for your vote to be valid. If multiple options are selected\n// as 'True (Yes)', your vote will become invalid.\n//\n// Question: When did you first hear about Gno.land?\n// Options:\n// - This month\n// - This year\n// - 1-2 years ago\n// - Since its inception\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\treturn \"This realm is deprecated, a new version is available at \" + nextRealmPath \n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tcaller := std.GetOrigCaller()\n\tassertFirstVote(caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, caller)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted yes on \"%s\" you can check out the result at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated and locked\u003c/br\u003eNew version can be found at \u003ca href=\\\"%s\\\"\u003e%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Question: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Choices:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their vote\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, addr := range a.Participants {\n\t\t\t\tbuf.WriteString(\"  - \" + addr.String() + \"\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to \" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"No choice has been selected, you should submit a vote for one of the options.\\n\" +\n\t\t\t\t\"One of the choices must be selected to consider the vote as valid.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple choices has been selected, you should submit a vote for only one option.\\n\" +\n\t\t\t\t\"The option you choose must be marked as True (Yes), while all other options are marked as False (No).\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"frjYOlQP3QhJfGUwfedU83uUUf+UBIHUcNdnNf7ADDRgU7iZAAFHiFJOmgEkpMvrGmeB9HYYJdwMfpSD9s72hg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386421"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test3/poll_v1","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"upU/nanyWb6jcnBeGjW93FS0gkVUBo4jTYFGOgVoexAu+dGyV7b6GnEcZxRL5AsGr3CZqY0Kd5izaahPoIpfQA=="}],"memo":"Called through gno.studio"},"blockNum":"386429"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","package":{"Name":"poll_v1","Path":"gno.land/r/test4/poll_v1","Files":[{"Name":"package.gno","Body":"package poll_v1\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first hear about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1rdld2ay4c3r3eghk563sz6ne79mmplcl8zatuu\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []std.Address\n\t}\n)\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, a := range answer.Participants {\n\t\t\tif a == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// Vote submits your choice for the poll.\n//\n// The option you choose must be marked as 'True (Yes)', while all other options must\n// be marked as 'False (No)' for your vote to be valid. If multiple options are selected \n// as 'True (Yes)' your vote will be considered invalid.\n//\n// Question: When did you first hear about Gno.land?\n// Options:\n// - This month\n// - This year\n// - 1-2 years ago\n// - Since its inception\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\treturn \"This realm is deprecated, a new version is available at \" + nextRealmPath \n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tcaller := std.GetOrigCaller()\n\tassertFirstVote(caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, caller)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted Yes on '%s'. You can check out the results at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated and locked\u003c/br\u003eNew version can be found at \u003ca href=\\\"%s\\\"\u003e%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Question: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Choices:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their vote\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, addr := range a.Participants {\n\t\t\t\tbuf.WriteString(\"  - \" + addr.String() + \"\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to \" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"No choice has been selected, you must submit your vote by selecting one of the options.\\n\" +\n\t\t\t\t\"One of the options must be selected for your vote to be considered valid.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple options has been selected, you must submit a vote with only one option.\\n\" +\n\t\t\t\t\"The option you choose must be marked as True (Yes), while all other options are marked as False (No).\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"5eWXAFmW/mL5FKQJLC5Ym2YfU2vii4wRJDhMT72/HQAqVIyryRGkfI0NGlhHM/gmYWVaQ3nmqGbicvNu7D2U2A=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386433"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test4/poll_v1","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"oL1L+6mnX9x1ol2tM64XiV1XQkMzrjE7qKkIRyA8TzFu81Uid8kB6r697bmK2wO1iqx27OwBKa7408NXx9tepw=="}],"memo":"Called through gno.studio"},"blockNum":"386435"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test4/poll_v1","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"0t40lgc6vmJZUx3S+kTKCbOFzLLVCiCbuRiErQm+46IuxuTi2H1X+uCNWbAcpvOtThhiWHSMpQI33NFalkRFpA=="}],"memo":"Called through gno.studio"},"blockNum":"386438"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test4/poll_v1","func":"LockRealm","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"/5e03Qsrr4+BFMn04SF2/ktPsILOJvbnR3oB0EE8x2gzH0Cwh2+/pFsk9S+wOTd+1x0jQ/cHtI2GBS/y/F5prA=="}],"memo":"Called through gno.studio"},"blockNum":"386440"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test4/poll_v1","func":"LockRealm","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"rnRThxp7GJD26rtDn4TIjCpkqi5TJod5x7xvWLWuwX8RMq1oyJFkhmFK7Ldx2fwk3FJ05EeWr8wuEnM94EVsrA=="}],"memo":"Called through gno.studio"},"blockNum":"386442"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","package":{"Name":"poll_v1","Path":"gno.land/r/test5/poll_v1","Files":[{"Name":"package.gno","Body":"package poll_v1\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first hear about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []std.Address\n\t}\n)\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, a := range answer.Participants {\n\t\t\tif a == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// Vote submits your choice for the poll.\n//\n// The option you choose must be marked as 'True (Yes)', while all other options must\n// be marked as 'False (No)' for your vote to be valid. If multiple options are selected \n// as 'True (Yes)' your vote will be considered invalid.\n//\n// Question: When did you first hear about Gno.land?\n// Options:\n// - This month\n// - This year\n// - 1-2 years ago\n// - Since its inception\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\treturn \"This realm is deprecated, a new version is available at \" + nextRealmPath \n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tcaller := std.GetOrigCaller()\n\tassertFirstVote(caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, caller)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted Yes on '%s'. You can check out the results at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated and locked\u003c/br\u003eNew version can be found at \u003ca href=\\\"%s\\\"\u003e%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Question: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Choices:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their vote\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, addr := range a.Participants {\n\t\t\t\tbuf.WriteString(\"  - \" + addr.String() + \"\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to \" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"No choice has been selected, you must submit your vote by selecting one of the options.\\n\" +\n\t\t\t\t\"One of the options must be selected for your vote to be considered valid.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple options has been selected, you must submit a vote with only one option.\\n\" +\n\t\t\t\t\"The option you choose must be marked as True (Yes), while all other options are marked as False (No).\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"W/CWe3E/L+/F6mPVmvTf0wfYpVRarxjbsupEmlWNvRZV6Axwo0AJbuiGHQ6U6hxTmigFgoVdlM3BPZ5nzzecAQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386444"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test5/poll_v1","func":"LockRealm","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"3a753lbY96L0JZPPofV9ab+4ItN6d6vtbzbSPA5hLekqyAxatIDS7+18qJEHZuVcBxShVJ0pgP/grMrbR9WKlA=="}],"memo":"Called through gno.studio"},"blockNum":"386446"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test5/poll_v1","func":"DeprecateRealm","args":["https://google.com/test"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"5/S501qFzOSFqYu3CLSxnTltW8OWkhZLQYF6SUtRW8QvYhC5jjdVaXeIv77fcHRl5L60Lm5BbzLcUa6CXvrx9Q=="}],"memo":"Called through gno.studio"},"blockNum":"386448"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test5/poll_v1","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"4PEXjDqHDHUIwm5lTy1k0EO7dYOuRGj5V87LOOKKDwBjg34durxl6RjhWgRInOWmHMS74nvm4WyzYOACWVu9VA=="}],"memo":"Called through gno.studio"},"blockNum":"386450"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test5/poll_v1","func":"GetAdmin","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"ZNamGbvxHcTXGjoWsLkJ9r42feu5kY8Vn0TX5jBQTplRbu7F43HZpmxu3mpgzU7nzO0bIdRSqcBJigtis4mueA=="}],"memo":"Called through gno.studio"},"blockNum":"386452"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test5/poll_v1","func":"UnlockRealm","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"HA5G/MS94epXZR8rKaGFn0ytpzc9R0B152MrnHFRIhI/4wDcqJWRlkRt0g08ohsUQdxDWM63xSsMtZyd+fZpKw=="}],"memo":"Called through gno.studio"},"blockNum":"386454"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test5/poll_v1","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"g/9AFksJVGrshR87L6rFh4aKH6UhRBBBDapRUaCkMZoN4/cRSKJaaXqhTeKv9fBJtZPIDdBuAQKKNeGKN5WnCw=="}],"memo":"Called through gno.studio"},"blockNum":"386456"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test5/poll_v1","func":"DeprecateRealm","args":["https://xid"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"qxVjVnlCGn7SGXuxzHkRxulH3Y48U8Mw9HFcI9P5iwFdcJ5vWv6AR2/PGxRG5kWfoULcKmMmdxuxFv99GeUXUA=="}],"memo":"Called through gno.studio"},"blockNum":"386462"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test5/poll_v1","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"UGTZ4ppRuI5lyjgIE5369wZmW+oHZClwQHUSu/aF3stDOt0EXR7PbHe0Rdy/8OrGw+6MbxUPqpkO1F9QQYIT8A=="}],"memo":"Called through gno.studio"},"blockNum":"386464"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","package":{"Name":"poll_v1","Path":"gno.land/r/test6/poll_v1","Files":[{"Name":"package.gno","Body":"package poll_v1\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first hear about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []std.Address\n\t}\n)\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, a := range answer.Participants {\n\t\t\tif a == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// Vote submits your choice for the poll.\n//\n// The option you choose must be marked as 'True (Yes)', while all other options must\n// be marked as 'False (No)' for your vote to be valid. If multiple options are selected \n// as 'True (Yes)' your vote will be considered invalid.\n//\n// Question: When did you first hear about Gno.land?\n// Options:\n// - This month\n// - This year\n// - 1-2 years ago\n// - Since its inception\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\treturn \"This realm is deprecated, the new version can be found at \" + nextRealmPath \n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tcaller := std.GetOrigCaller()\n\tassertFirstVote(caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, caller)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted Yes on '%s'. You can check out the results at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked.\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated. \u003c/br\u003eThe new version can be found at \u003ca href=\\\"%s\\\"\u003e%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Question: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Choices:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their vote\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, addr := range a.Participants {\n\t\t\t\tbuf.WriteString(\"  - \" + addr.String() + \"\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to \" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"No choice has been selected, you must submit your vote by selecting one of the options as 'True (Yes)'.\"\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple options has been selected, you must submit a vote with only one option.\\n\" +\n\t\t\t\t\"The option you choose must be marked as 'True (Yes)', while all other options are marked as 'False (No)'.\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"Y/SU6Iq6oh1CmS62O1C3zVsTlSXh5dLow2TH3dMPwGoq5JhBfAgFzRKo7aE+tKbM0H3jBrVKXuR2qQx+qmLq7w=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386468"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","package":{"Name":"poll_v1","Path":"gno.land/r/test6/poll_v1","Files":[{"Name":"package.gno","Body":"package poll_v1\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first hear about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []std.Address\n\t}\n)\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, a := range answer.Participants {\n\t\t\tif a == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// Vote submits your choice for the poll.\n//\n// The option you choose must be marked as 'True (Yes)', while all other options must\n// be marked as 'False (No)' for your vote to be valid. If multiple options are selected \n// as 'True (Yes)' your vote will be considered invalid.\n//\n// Question: When did you first hear about Gno.land?\n// Options:\n// - This month\n// - This year\n// - 1-2 years ago\n// - Since its inception\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\treturn \"This realm is deprecated, the new version can be found at \" + nextRealmPath \n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tcaller := std.GetOrigCaller()\n\tassertFirstVote(caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, caller)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted Yes on '%s'. You can check out the results at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked.\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated. \u003c/br\u003eThe new version can be found at \u003ca href=\\\"%s\\\"\u003e%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Question: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Choices:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their vote\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, addr := range a.Participants {\n\t\t\t\tbuf.WriteString(\"  - \" + addr.String() + \"\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to \" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"No choice has been selected, you must submit your vote by selecting one of the options as 'True (Yes)'.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple options has been selected, you must submit a vote with only one option.\\n\" +\n\t\t\t\t\"The option you choose must be marked as 'True (Yes)', while all other options are marked as 'False (No)'.\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"AbTvYmYDBgEbWDGvmf4b5RBwladH3e/wF42FwjA1E9EaELSO7hO2VBxa/mg+3AVUhsxilS/bmb6vAOZ4W9oyCw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386471"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test6/poll_v1","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"cgWw0m/1F+5RJnqhmXro/SQWsiiAFtYvJPHMRHeLB+UVFhovxF9bFsQFwhF+s+hyVowS6xTLjJdhw7WNmfLb6Q=="}],"memo":"Called through gno.studio"},"blockNum":"386473"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test6/poll_v1","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"GpYrGqsaIDd7E7l4VFtjvozXeF7oa/SUE75bl6MOMTRy6YaqwEviRxcaxiwlmcmnmeHPKvipA09QOgSP7Vtf4Q=="}],"memo":"Called through gno.studio"},"blockNum":"386475"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test6/poll_v1","func":"Vote","args":["true","true","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"TUcDIbrgI38CvoErV1uD/mjJQy6XCGHNM/EHJM9cWi13uBUbbpQc+hXx1UnXFzlixigxwD1LnbdeX8ppHy6I3g=="}],"memo":"Called through gno.studio"},"blockNum":"386477"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test6/poll_v1","func":"Vote","args":["false","true","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"EoHLeIof6Y/icpazfLTrQY4v7enSRLKaYsznG+9iri5E8Lzpy6lItPz5RSXCa2nsXICHDv/6itdaleZIN1i0tQ=="}],"memo":"Called through gno.studio"},"blockNum":"386483"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test6/poll_v1","func":"LockRealm","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"d/6Gxg8vvOen6aImalOeUM7PNLPOW0QdCrA+DuAY7FMVVJtVGCV5iEXCAc6P4yAjdsx/k14LwVanMXgbSbC/lw=="}],"memo":"Called through gno.studio"},"blockNum":"386485"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test6/poll_v1","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"PmzRDzRIeW1RKAmwbjq3DspjcLuCuI6XmFGB1tPrZ1wRrcS8zzdJJ835cGET/uc3s/397jmEBSmlZp/GguQyPQ=="}],"memo":"Called through gno.studio"},"blockNum":"386487"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test6/poll_v1","func":"DeprecateRealm","args":["asdsadad"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"OvxPOSe+Scz7mkl6G1MNGcXl1j6MNlbD+hALAb90qr1UyvRTsYYR1zZNM3uFUeL9zvuFjqP5wRa+BIEQ7kef3g=="}],"memo":"Called through gno.studio"},"blockNum":"386489"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test6/poll_v1","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"J83yEwBxIsB9AS/XHsZjLer2DeRoJz22/jkXKr3CCiU+SHv5WZwXdmekzPu5nCczEKduWw2G5BNx3GvP/BmqZA=="}],"memo":"Called through gno.studio"},"blockNum":"386491"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","package":{"Name":"poll_v1","Path":"gno.land/r/test7/poll_v1","Files":[{"Name":"package.gno","Body":"package poll_v1\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first hear about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []std.Address\n\t}\n)\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, a := range answer.Participants {\n\t\t\tif a == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// Vote submits your choice for the poll.\n//\n// The option you choose must be marked as 'True (Yes)', while all other options must\n// be marked as 'False (No)' for your vote to be valid. If multiple options are selected \n// as 'True (Yes)' your vote will be considered invalid.\n//\n// Question: When did you first hear about Gno.land?\n// Options:\n// - This month\n// - This year\n// - 1-2 years ago\n// - Since its inception\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\treturn \"This realm is deprecated, the new version can be found at \" + nextRealmPath \n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tcaller := std.GetOrigCaller()\n\tassertFirstVote(caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, caller)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted Yes on '%s'. You can check out the results at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked.\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated. \u003c/br\u003eThe new version can be found at \u003ca href=\\\"%s\\\"\u003e%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Question: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Choices:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their vote\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, addr := range a.Participants {\n\t\t\t\tbuf.WriteString(\"  - \" + addr.String() + \"\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to \" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"You haven't selected an option. Please submit your vote by selecting one of the options as 'True (Yes)'.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple options have been selected. Please submit your vote by selecting only one of the options as 'True (Yes)'.\\n\" +\n\t\t\t\t\"The option you choose must be marked as 'True (Yes)', while all other options are marked as 'False (No)'.\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"sL4sdaRkkUcQZ3oXIlM1Ulr2VoKM3vitAZPFReNe33R1uw+q82vwgogVozwMiGlgJx8TXWx6bjgyB0m9AIArOA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386495"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test7/poll_v1","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"NK3WuUbTZ3O0BIyE8avReqMDYyVMhlYN3jW9ga2ootklQTAekwTU9iBhetb+RZpvvpgY3AbhtCL9vQhQCX4eGQ=="}],"memo":"Called through gno.studio"},"blockNum":"386499"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test7/poll_v1","func":"Vote","args":["true","true","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"F90G8x5Z5b99vEeACpxPxeiY0KSaGM1ekmR8k7D4uUEUCsH5dj3MnAWqYZtLop+Ewe5FmSdNMljHixrJIQ9MXw=="}],"memo":"Called through gno.studio"},"blockNum":"386501"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","package":{"Name":"poll_v1","Path":"gno.land/r/test7/poll_v1","Files":[{"Name":"package.gno","Body":"package poll_v1\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first hear about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []std.Address\n\t}\n)\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, a := range answer.Participants {\n\t\t\tif a == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// 👋 Welcome to gnoyourdate (Know-Your-Date) poll! 🎈🎈🎈\n//\n// You are now viewing the Vote function.\n// This function submits your choice for the poll.\n\n// Question: When did you first hear about Gno.land?\n// Options:\n// - This month\n// - This year\n// - 1-2 years ago\n// - Since its inception\n//\n// Please make sure to mark the option you choose as 'True (Yes)' and mark all other options as\n// 'False (No)' for your vote to be valid. If you select multiple options as 'True (Yes)', your\n// vote will be considered invalid.\n//\n// You can cast your vote by using the form below, then click the \"Call\" button to submit it.\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\treturn \"This realm is deprecated, the new version can be found at \" + nextRealmPath \n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tcaller := std.GetOrigCaller()\n\tassertFirstVote(caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, caller)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted Yes on '%s'. You can check out the results at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked.\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated. \u003c/br\u003eThe new version can be found at \u003ca href=\\\"%s\\\"\u003e%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Question: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote from here](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Choices:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their vote\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, addr := range a.Participants {\n\t\t\t\tbuf.WriteString(\"  - \" + addr.String() + \"\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to \" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"You haven't selected an option. Please submit your vote by selecting one of the options as 'True (Yes)'.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple options have been selected. Please submit your vote by selecting only one of the options as 'True (Yes)'.\\n\" +\n\t\t\t\t\"The option you choose must be marked as 'True (Yes)', while all other options are marked as 'False (No)'.\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"DkzqoQVtnhDBMhXlmMEOYNB/4KvfmcbgasTsBKFicR4OORp2huUsEI9EnEv09JEbsRd4keOj9JEQIGUPMzlkXA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386517"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","package":{"Name":"poll_v1","Path":"gno.land/r/test8/poll_v1","Files":[{"Name":"package.gno","Body":"package poll_v1\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first hear about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []std.Address\n\t}\n)\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, a := range answer.Participants {\n\t\t\tif a == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// 👋 Welcome to gnoyourdate (Know-Your-Date) poll! 🎈🎈🎈\n//\n// You are now viewing the Vote function.\n// This function submits your choice for the poll.\n\n// Question: When did you first hear about Gno.land?\n// Options:\n// - This month\n// - This year\n// - 1-2 years ago\n// - Since its inception\n//\n// Please make sure to mark the option you choose as 'True (Yes)' and mark all other options as\n// 'False (No)' for your vote to be valid. If you select multiple options as 'True (Yes)', your\n// vote will be considered invalid.\n//\n// You can cast your vote by using the form below, then click the \"Call\" button to submit it.\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\treturn \"This realm is deprecated, the new version can be found at \" + nextRealmPath \n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tcaller := std.GetOrigCaller()\n\tassertFirstVote(caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, caller)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted Yes on '%s'. You can check out the results at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked.\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated. \u003c/br\u003eThe new version can be found at \u003ca href=\\\"%s\\\"\u003e%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Question: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote from here](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Choices:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their vote\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, addr := range a.Participants {\n\t\t\t\tbuf.WriteString(\"  - \" + addr.String() + \"\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to \" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"You haven't selected an option. Please submit your vote by selecting one of the options as 'True (Yes)'.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple options have been selected. Please submit your vote by selecting only one of the options as 'True (Yes)'.\\n\" +\n\t\t\t\t\"The option you choose must be marked as 'True (Yes)', while all other options are marked as 'False (No)'.\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"bOQfFuavFU9LkzYc5vJ1m/i8plmi1wC1t3cbWK5ESXIfdqW0yM5GdCEmuMpSJEhrn8SCavP9/67gB3UfXAqlDQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386519"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","package":{"Name":"poll_v1","Path":"gno.land/r/test10/poll_v1","Files":[{"Name":"package.gno","Body":"package poll_v1\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first hear about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []std.Address\n\t}\n)\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, a := range answer.Participants {\n\t\t\tif a == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// 👋 Welcome to gnoyourdate (Know-Your-Date) poll! 🎈🎈🎈\n//\n// You are now viewing the Vote function.\n// This function submits your choice for the poll.\n//\n// Question: When did you first hear about Gno.land?\n// Options:\n// - This month\n// - This year\n// - 1-2 years ago\n// - Since its inception\n//\n// Please make sure to mark the option you choose as 'True (Yes)' and mark all other options as\n// 'False (No)' for your vote to be valid. If you select multiple options as 'True (Yes)', your\n// vote will be considered invalid.\n//\n// You can cast your vote by using the form below, then click the \"Call\" button to submit it.\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\treturn \"This realm is deprecated, the new version can be found at \" + nextRealmPath \n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tcaller := std.GetOrigCaller()\n\tassertFirstVote(caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, caller)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted Yes on '%s'. You can check out the results at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked.\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated. \u003c/br\u003eThe new version can be found at \u003ca href=\\\"%s\\\"\u003e%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Question: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote from here](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Choices:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their vote\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, addr := range a.Participants {\n\t\t\t\tbuf.WriteString(\"  - \" + addr.String() + \"\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to \" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"You haven't selected an option. Please submit your vote by selecting one of the options as 'True (Yes)'.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple options have been selected. Please submit your vote by selecting only one of the options as 'True (Yes)'.\\n\" +\n\t\t\t\t\"The option you choose must be marked as 'True (Yes)', while all other options are marked as 'False (No)'.\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"MUftj5eLCzEGsC8zuq431JaHgV7p/+Agla/IU6uNGeUpD7gN8X7VvEMo5fESsFfnWkgMwRBGkYYYe/5PqwnzZQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386523"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","package":{"Name":"poll_v1","Path":"gno.land/r/test11/poll_v1","Files":[{"Name":"package.gno","Body":"package poll_v1\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first hear about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []std.Address\n\t}\n)\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, a := range answer.Participants {\n\t\t\tif a == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// 👋 Welcome to gnoyourdate (Know-Your-Gno-Date) poll! 🎈🎈🎈\n//\n// You are now viewing the Vote function.\n// This function allows you to submit your choice for the poll.\n//\n// ❔ Question: When did you first hear about Gno.land?\n// 👇 Options:\n//  - This month\n//  - This year\n//  - 1-2 years ago\n//  - Since its inception\n//\n// 📍 Please make sure to mark the option you choose as 'True (Yes)' and mark all other options as 'False (No)' for your vote to be valid.\n// 📍 If you select multiple options as 'True (Yes)', your vote will be considered invalid.\n//\n// 📢 Now, please cast your vote using the form below, then click the \"Call\" button to submit it.\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\treturn \"This realm is deprecated, the new version can be found at \" + nextRealmPath \n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tcaller := std.GetOrigCaller()\n\tassertFirstVote(caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, caller)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted Yes on '%s'. You can check out the results at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked.\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated. \u003c/br\u003eThe new version can be found at \u003ca href=\\\"%s\\\"\u003e%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Question: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote from here](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Choices:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their vote\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, addr := range a.Participants {\n\t\t\t\tbuf.WriteString(\"  - \" + addr.String() + \"\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to \" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"You haven't selected an option. Please submit your vote by selecting one of the options as 'True (Yes)'.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple options have been selected. Please submit your vote by selecting only one of the options as 'True (Yes)'.\\n\" +\n\t\t\t\t\"The option you choose must be marked as 'True (Yes)', while all other options are marked as 'False (No)'.\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"esI5yEK8lt9rDj91BbFtFq32f4g5zBQ5+GPjWepC7/5NjpYED44j1gSOOnZ+Ci/qi254PVS9T1P0wu8Y0p2OXg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386535"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test11/poll_v1","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"Y6ApVAfE24pxa3s3SI9USsxGtg/mYDauSnhh6lffjntQKW5AXurhHauvhu3w5IUw93LTjxV3Nd3r+xvLZzPB5A=="}],"memo":"Called through gno.studio"},"blockNum":"386537"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/jeronimoalbi/poll_v1","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"BWOLII5EhDFPL6Jpp/fyMmkwkMNxXLHjSgUsEpHTE1sitCpgWVoh5BtncKAGUhk6YQSqfbs83cG2dOQSdPBa4w=="}],"memo":"Called through gno.studio"},"blockNum":"386545"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","package":{"Name":"poll_v1","Path":"gno.land/r/test12/poll_v1","Files":[{"Name":"package.gno","Body":"package poll_v1\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n  \"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first hear about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []Participant\n\t}\n)\n\ntype Participant struct {\n  Address std.Address\n  Date    time.Time\n}\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, p := range answer.Participants {\n\t\t\tif p.Address == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// 👋 Welcome to gnoyourdate (Know-Your-Gno-Date) poll! 🎈🎈🎈\n//\n// You are now viewing the Vote function.\n// This function allows you to submit your choice for the poll.\n//\n// ❔ Question: When did you first hear about Gno.land?\n// 👇 Options:\n//  - This month\n//  - This year\n//  - 1-2 years ago\n//  - Since its inception\n//\n// 📍 Please make sure to mark the option you choose as 'True (Yes)' and mark all other options as 'False (No)' for your vote to be valid.\n// 📍 If you select multiple options as 'True (Yes)', your vote will be considered invalid.\n//\n// 📢 Now, please cast your vote using the form below, then click the \"Call\" button to submit it.\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\treturn \"This realm is deprecated, the new version can be found at \" + nextRealmPath \n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tparticipant := Participant{\n    Address: std.GetOrigCaller(),\n    Date: time.Now(),\n  }\n\tassertFirstVote(caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, participant)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted Yes on '%s'. You can check out the results at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked.\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated. \u003c/br\u003eThe new version can be found at \u003ca href=\\\"%s\\\"\u003e%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Question: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote from here](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Choices:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their vote\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, p := range a.Participants {\n\t\t\t\tbuf.WriteString(\"  - \" + p.Address.String() + \" \u003ci\u003evoted at \" + p.Date.String() + \"\u003c/i\u003e\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to \" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"You haven't selected an option. Please submit your vote by selecting one of the options as 'True (Yes)'.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple options have been selected. Please submit your vote by selecting only one of the options as 'True (Yes)'.\\n\" +\n\t\t\t\t\"The option you choose must be marked as 'True (Yes)', while all other options are marked as 'False (No)'.\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"L+eMMPsOI9HuheguRHiUS97OVS3//O9pScLDn5aYWmQIvNl3NBBFBQD+Bq1rvF0kP+/ChsoHk64/394AQZ7PAw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386547"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","package":{"Name":"poll_v1","Path":"gno.land/r/test12/poll_v1","Files":[{"Name":"package.gno","Body":"package poll_v1\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n  \"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first hear about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []Participant\n\t}\n)\n\ntype Participant struct {\n  Address std.Address\n  Date    time.Time\n}\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, p := range answer.Participants {\n\t\t\tif p.Address == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// 👋 Welcome to gnoyourdate (Know-Your-Gno-Date) poll! 🎈🎈🎈\n//\n// You are now viewing the Vote function.\n// This function allows you to submit your choice for the poll.\n//\n// ❔ Question: When did you first hear about Gno.land?\n// 👇 Options:\n//  - This month\n//  - This year\n//  - 1-2 years ago\n//  - Since its inception\n//\n// 📍 Please make sure to mark the option you choose as 'True (Yes)' and mark all other options as 'False (No)' for your vote to be valid.\n// 📍 If you select multiple options as 'True (Yes)', your vote will be considered invalid.\n//\n// 📢 Now, please cast your vote using the form below, then click the \"Call\" button to submit it.\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\treturn \"This realm is deprecated, the new version can be found at \" + nextRealmPath \n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tparticipant := Participant{\n    Address: std.GetOrigCaller(),\n    Date: time.Now(),\n  }\n\tassertFirstVote(participant.caller)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, participant)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted Yes on '%s'. You can check out the results at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked.\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated. \u003c/br\u003eThe new version can be found at \u003ca href=\\\"%s\\\"\u003e%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Question: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote from here](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Choices:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their vote\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, p := range a.Participants {\n\t\t\t\tbuf.WriteString(\"  - \" + p.Address.String() + \" \u003ci\u003evoted at \" + p.Date.String() + \"\u003c/i\u003e\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to \" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"You haven't selected an option. Please submit your vote by selecting one of the options as 'True (Yes)'.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple options have been selected. Please submit your vote by selecting only one of the options as 'True (Yes)'.\\n\" +\n\t\t\t\t\"The option you choose must be marked as 'True (Yes)', while all other options are marked as 'False (No)'.\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"2p3JRICYtVF22ZRu0yHS+tbl0WKlLoZ8V+uohn9tkgkkccATAKqh9xc2lRh8FsrveNLbf8eSoYTALW2swOUzPg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386549"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/jeronimoalbi/poll_v1","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"WLyG6Go0iQqtzvWgTIrZoirFSZNBdS4ChP7ItIkC1jRMMbmuGnqnNKp3QBKuz6dkEv1KKmVly+s4cv3a77FPEw=="}],"memo":"Called through gno.studio"},"blockNum":"386551"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","package":{"Name":"poll_v1","Path":"gno.land/r/test12/poll_v1","Files":[{"Name":"package.gno","Body":"package poll_v1\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n  \"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first hear about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []Participant\n\t}\n)\n\ntype Participant struct {\n  Address std.Address\n  Date    time.Time\n}\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, p := range answer.Participants {\n\t\t\tif p.Address == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// 👋 Welcome to gnoyourdate (Know-Your-Gno-Date) poll! 🎈🎈🎈\n//\n// You are now viewing the Vote function.\n// This function allows you to submit your choice for the poll.\n//\n// ❔ Question: When did you first hear about Gno.land?\n// 👇 Options:\n//  - This month\n//  - This year\n//  - 1-2 years ago\n//  - Since its inception\n//\n// 📍 Please make sure to mark the option you choose as 'True (Yes)' and mark all other options as 'False (No)' for your vote to be valid.\n// 📍 If you select multiple options as 'True (Yes)', your vote will be considered invalid.\n//\n// 📢 Now, please cast your vote using the form below, then click the \"Call\" button to submit it.\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\treturn \"This realm is deprecated, the new version can be found at \" + nextRealmPath \n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tparticipant := Participant{\n    Address: std.GetOrigCaller(),\n    Date: time.Now(),\n  }\n\tassertFirstVote(participant.Address)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, participant)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted Yes on '%s'. You can check out the results at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked.\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated. \u003c/br\u003eThe new version can be found at \u003ca href=\\\"%s\\\"\u003e%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Question: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote from here](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Choices:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their vote\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, p := range a.Participants {\n\t\t\t\tbuf.WriteString(\"  - \" + p.Address.String() + \" \u003ci\u003evoted at \" + p.Date.String() + \"\u003c/i\u003e\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to \" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"You haven't selected an option. Please submit your vote by selecting one of the options as 'True (Yes)'.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple options have been selected. Please submit your vote by selecting only one of the options as 'True (Yes)'.\\n\" +\n\t\t\t\t\"The option you choose must be marked as 'True (Yes)', while all other options are marked as 'False (No)'.\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"I+kAFdlPa8raw8DTjyHgb+E4D16r4ADaqJjkArVS8YFwRa2qmQl0+92r9nUw2Kprz7cMmvs9KNyYKlD9MvQqmw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386553"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test12/poll_v1","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"QTOqORLDdtSGL2f2HQOaFTS8mZx6Qi+tuYTrUCfF2rgUsh4HwHQgA7rNOXbxW0p0FP2LqIfxXvKIcD+gwV/uTg=="}],"memo":"Called through gno.studio"},"blockNum":"386555"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/jeronimoalbi/poll_v1","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"XWr/2TidszGRmPFs7aLikUpTi2mq6dCFtqEe0GeLxocYos85U/a+qYdiN19iywtJ4m7bfHGN009bX6zgpQBuWg=="}],"memo":"Called through gno.studio"},"blockNum":"386560"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","package":{"Name":"poll_v1","Path":"gno.land/r/test13/poll_v1","Files":[{"Name":"package.gno","Body":"package poll_v1\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n  \"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nconst (\n  dateFmt = \"2006-01-02 15:04 MST\"\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first hear about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1rdld2ay4c3r3eghk563sz6ne79mmplcl8zatuu\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []Participant\n\t}\n)\n\ntype Participant struct {\n  Address std.Address\n  Date    time.Time\n}\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, p := range answer.Participants {\n\t\t\tif p.Address == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// 👋 Welcome to gnoyourdate (Know-Your-Gno-Date) poll! 🎈🎈🎈\n//\n// You are now viewing the Vote function.\n// This function allows you to submit your choice for the poll.\n//\n// ❔ Question: When did you first hear about Gno.land?\n// 👇 Options:\n//  - This month\n//  - This year\n//  - 1-2 years ago\n//  - Since its inception\n//\n// 📍 Please make sure to mark the option you choose as 'True (Yes)' and mark all other options as 'False (No)' for your vote to be valid.\n// 📍 If you select multiple options as 'True (Yes)', your vote will be considered invalid.\n//\n// 📢 Now, please cast your vote using the form below, then click the \"Call\" button to submit it.\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\treturn \"This realm is deprecated, the new version can be found at \" + nextRealmPath \n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tparticipant := Participant{\n    Address: std.GetOrigCaller(),\n    Date: time.Now(),\n  }\n\tassertFirstVote(participant.Address)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, participant)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted Yes on '%s'. You can check out the results at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked.\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated. \u003c/br\u003eThe new version can be found at \u003ca href=\\\"%s\\\"\u003e%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Question: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote from here](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Choices:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their vote\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n      data := p.Date.UTC().Format(dateFmt)\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, p := range a.Participants {\n\t\t\t\tbuf.WriteString(\"  - \" + p.Address.String() + \" \u003csmall\u003e\u003ci\u003e(voted at \" + p.Date.String() + \")\u003c/i\u003e\u003c/small\u003e\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to \" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"You haven't selected an option. Please submit your vote by selecting one of the options as 'True (Yes)'.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple options have been selected. Please submit your vote by selecting only one of the options as 'True (Yes)'.\\n\" +\n\t\t\t\t\"The option you choose must be marked as 'True (Yes)', while all other options are marked as 'False (No)'.\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"X/T2zBgWqyhaM2gbrViMos1V4oKpleiRuxviLyLQGYVy472s3Ewv8VpkGH37Cc01VdNpPfGmCA9ziI8TXyiybQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386563"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","package":{"Name":"poll_v1","Path":"gno.land/r/test13/poll_v1","Files":[{"Name":"package.gno","Body":"package poll_v1\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n  \"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nconst (\n  dateFmt = \"2006-01-02 15:04 MST\"\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first hear about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1rdld2ay4c3r3eghk563sz6ne79mmplcl8zatuu\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []Participant\n\t}\n)\n\ntype Participant struct {\n  Address std.Address\n  Date    time.Time\n}\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, p := range answer.Participants {\n\t\t\tif p.Address == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// 👋 Welcome to gnoyourdate (Know-Your-Gno-Date) poll! 🎈🎈🎈\n//\n// You are now viewing the Vote function.\n// This function allows you to submit your choice for the poll.\n//\n// ❔ Question: When did you first hear about Gno.land?\n// 👇 Options:\n//  - This month\n//  - This year\n//  - 1-2 years ago\n//  - Since its inception\n//\n// 📍 Please make sure to mark the option you choose as 'True (Yes)' and mark all other options as 'False (No)' for your vote to be valid.\n// 📍 If you select multiple options as 'True (Yes)', your vote will be considered invalid.\n//\n// 📢 Now, please cast your vote using the form below, then click the \"Call\" button to submit it.\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\treturn \"This realm is deprecated, the new version can be found at \" + nextRealmPath \n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tparticipant := Participant{\n    Address: std.GetOrigCaller(),\n    Date: time.Now(),\n  }\n\tassertFirstVote(participant.Address)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, participant)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted Yes on '%s'. You can check out the results at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked.\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated. \u003c/br\u003eThe new version can be found at \u003ca href=\\\"%s\\\"\u003e%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Question: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote from here](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Choices:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their vote\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, p := range a.Participants {\n        date := p.Date.UTC().Format(dateFmt)\n\t\t\t\tbuf.WriteString(\"  - \" + p.Address.String() + \" \u003csmall\u003e\u003ci\u003e(voted at \" + date + \")\u003c/i\u003e\u003c/small\u003e\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to \" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"You haven't selected an option. Please submit your vote by selecting one of the options as 'True (Yes)'.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple options have been selected. Please submit your vote by selecting only one of the options as 'True (Yes)'.\\n\" +\n\t\t\t\t\"The option you choose must be marked as 'True (Yes)', while all other options are marked as 'False (No)'.\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"i0lJB+sanjdLI8Nd/dHK2MUP78BwNaknsALYzKx9pDlTDMrEkWKqvvyydWUga1b4uJZWDYDPeZB7foS+7MQunw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386565"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test13/poll_v1","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"8ji+k+vM98XTWa43IKA8+bft+R5+dR/GEO3tuOFRL5sHi/kuOY3/Q9C9mu6DQWXDKXphhdpfCNZauCC4S2JrMw=="}],"memo":"Called through gno.studio"},"blockNum":"386567"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","send":"","pkg_path":"gno.land/r/test13/poll_v1","func":"Vote","args":["false","true","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"ySaJ4TQW4wGknGeC7M7eAu1Lkt3cEi3UNA8YJQvrnFZvpqqyCXvc2Rk7OvA+zcH6APi/VLPWTgqJVDuF2psD8A=="}],"memo":"Called through gno.studio"},"blockNum":"386570"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/jeronimoalbi/poll_v1","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"bYPpt1+lwWSsWJDNfScXc1bLA1DBdrI0d5U2/q/mnjg9c6wwBVDtLd/zHJXOB6GXD/D/bwQghs/z1jb0QPb3ng=="}],"memo":"Called through gno.studio"},"blockNum":"386581"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/jeronimoalbi/poll_v1","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"fZZwp9ATYBCgOi2j1WnYKndFR0bhcAg1VUhHf0U7O4NgqBUhp+j8PjWVGwAJLJVTs0TxD3LuAHcM097pwZk+qg=="}],"memo":"Called through gno.studio"},"blockNum":"386584"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","send":"","pkg_path":"gno.land/r/test13/poll_v1","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"RtJzvVvzwB1Tqns5/+sRAVx3AU3uqoNPpTkrytkcV/V2F23J2E6iKAr9wEqr0PDnK6ZDRFDSJJJ1IMiRXCLO6A=="}],"memo":"Called through gno.studio"},"blockNum":"386592"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","send":"","pkg_path":"gno.land/r/test13/poll_v1","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"wImgyEDOPtf9D1bw9rXmcfcU9GamrHMfpMoUC0BPSlQu+wJt5OV2XWCDdE+TyICPJTC095Ij33cdBAszt8CUfg=="}],"memo":"Called through gno.studio"},"blockNum":"386595"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","send":"","pkg_path":"gno.land/r/test13/poll_v1","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"bCjA4i8UjSH/yBX/Bhx+CLaxOXoMvbo3vnnEvUJR44NiFX7ynAidpxJR0uapfF0hrTIciSOLPNpeKHs5+9V1ow=="}],"memo":"Called through gno.studio"},"blockNum":"386599"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","package":{"Name":"poll_v1","Path":"gno.land/r/test14/poll_v1","Files":[{"Name":"package.gno","Body":"package poll_v1\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n  \"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nconst (\n  dateFmt = \"2006-01-02 15:04 MST\"\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first hear about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1rdld2ay4c3r3eghk563sz6ne79mmplcl8zatuu\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []Participant\n\t}\n)\n\ntype Participant struct {\n  Address std.Address\n  Date    time.Time\n}\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, p := range answer.Participants {\n\t\t\tif p.Address == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// 👋 Welcome to gnoyourdate (Know-Your-Gno-Date) poll! 🎈🎈🎈\n//\n// You are now viewing the Vote function.\n// This function allows you to submit your choice for the poll.\n//\n// ❔ Question: When did you first hear about Gno.land?\n// 👇 Options:\n//  - This month\n//  - This year\n//  - 1-2 years ago\n//  - Since its inception\n//\n// 📍 Please make sure to mark the option you choose as 'True (Yes)' and mark all other options as 'False (No)' for your vote to be valid.\n// 📍 If you select multiple options as 'True (Yes)', your vote will be considered invalid.\n//\n// 📢 Now, please cast your vote using the form below, then click the \"Call\" button to submit it.\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\treturn \"This realm is deprecated, the new version can be found at \" + nextRealmPath \n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tparticipant := Participant{\n    Address: std.GetOrigCaller(),\n    Date: time.Now(),\n  }\n\tassertFirstVote(participant.Address)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, participant)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted Yes on '%s'. You can check out the results at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(_ string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked.\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated. \u003c/br\u003eThe new version can be found at \u003ca href=\\\"%s\\\"\u003e%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Question: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote from here](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Choices:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their vote\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, p := range a.Participants {\n        date := p.Date.UTC().Format(dateFmt)\n\t\t\t\tbuf.WriteString(\"  - \" + p.Address.String() + \" \u003csmall\u003e\u003ci\u003e(voted at \" + date + \")\u003c/i\u003e\u003c/small\u003e\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to \" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"You haven't selected an option. Please submit your vote by selecting one of the options as 'True (Yes)'.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple options have been selected. Please submit your vote by selecting only one of the options as 'True (Yes)'.\\n\" +\n\t\t\t\t\"The option you choose must be marked as 'True (Yes)', while all other options are marked as 'False (No)'.\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"L3wICDg30DGL9UYOLBgfdT1rHYzky0YA7oTMyalI9sIFJ0Hf8lsv0JcyaCVqiwDICxT7j+xRv0rxl0dgQaeSaQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386605"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","package":{"Name":"poll","Path":"gno.land/r/test15/poll","Files":[{"Name":"package.gno","Body":"package poll\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nconst (\n\tdateFmt = \"2006-01-02 15:04 MST\"\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first hear about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []Participant\n\t}\n)\n\ntype Participant struct {\n\tAddress std.Address\n\tDate    time.Time\n}\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, p := range answer.Participants {\n\t\t\tif p.Address == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// 👋 Welcome to gnoyourdate (Know-Your-Gno-Date) poll! 🎈🎈🎈\n//\n// You are now viewing the Vote function.\n// This function allows you to submit your choice for the poll.\n//\n// ❔ Question: When did you first hear about Gno.land?\n// 👇 Options:\n//  - This month\n//  - This year\n//  - 1-2 years ago\n//  - Since its inception\n//\n// 📍 Please make sure to mark the option you choose as 'True (Yes)' and mark all other options as 'False (No)' for your vote to be valid.\n// 📍 If you select multiple options as 'True (Yes)', your vote will be considered invalid.\n//\n// 📢 Now, please cast your vote using the form below, then click the \"Call\" button to submit it.\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\treturn \"This realm is deprecated, the new version can be found at \" + nextRealmPath \n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tparticipant := Participant{\n\t\tAddress: std.GetOrigCaller(),\n\t\tDate: time.Now(),\n\t}\n\tassertFirstVote(participant.Address)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, participant)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted Yes on '%s'. You can check out the results at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(_ string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked.\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated. \u003c/br\u003eThe new version can be found at \u003ca href=\\\"%s\\\"\u003e%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(ufmt.Sprintf(\"## Question: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote from here](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Choices:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their vote\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, p := range a.Participants {\n\t\t\t\tdate := p.Date.UTC().Format(dateFmt)\n\t\t\t\tbuf.WriteString(\"  - \" + p.Address.String() + \" \u003csmall\u003e\u003ci\u003e(voted at \" + date + \")\u003c/i\u003e\u003c/small\u003e\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to \" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"You haven't selected an option. Please submit your vote by selecting one of the options as 'True (Yes)'.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple options have been selected. Please submit your vote by selecting only one of the options as 'True (Yes)'.\\n\" +\n\t\t\t\t\"The option you choose must be marked as 'True (Yes)', while all other options are marked as 'False (No)'.\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"cdTBBOxR2Vd1yM9MjOH+MhmviNJxuOv9+qiSZXTdJW4f1hOPgfQUXskEwQVFsiYq+fkRlYjmVyuYafXd+PN+Gw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386617"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15wmukt79xymnnu6c4de32trnufudqum60yrxu8","send":"","pkg_path":"gno.land/r/test10/poll","func":"Render","args":["blue"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6QxDeE9T4utsKFysdC0JZTyVwnc4UgqQ7vhHJf5pp+p"},"signature":"feTqy5Ehs4/ahLNf0yMk8rlYtIwyBlvU88TXKFwTP89/v/MKBO1oAz+r145Qj+jxl3/iVqokNSgOi7kc2qRXJw=="}],"memo":"Called through gno.studio"},"blockNum":"386627"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","send":"","pkg_path":"gno.land/r/test15/poll","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"FRdm3QQXwyFei3ygjdAHowCC5XObcuEZORbw7yx5qIAjWpTABwARqPiZdMfizbEqmVmSrI9748LBmqGA3/WDTQ=="}],"memo":"Called through gno.studio"},"blockNum":"386632"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","send":"","pkg_path":"gno.land/r/test15/poll","func":"Vote","args":["true","false","true","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"92BKGbthbCfA+Vz1mDk8cLZMybAl1cqdsKXaUxST07UhSCLP4PZ6bnzii5m4tQVgw37fwNpYNmQnCwlkM/e99Q=="}],"memo":"Called through gno.studio"},"blockNum":"386634"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","send":"","pkg_path":"gno.land/r/test15/poll","func":"Vote","args":["false","true","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"21GdYq7U+cUQAtczhEGkY/30Erh9Oq0vxQf6IVSY3mNd0u/s2SmDnRbdjVZUowVNVQRRL2W3l6+pK6JAcFLufw=="}],"memo":"Called through gno.studio"},"blockNum":"386637"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/test15/poll","func":"Vote","args":["false","true","false","true"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"ECzNziZUkk+qxgdFsmTFmAZZKAzYx5NoiUJhN+EnDBBxnnqL3txwIzJ1OsDQgglacf6oAgAxfD0cuiWc19tQbA=="}],"memo":"Called through gno.studio"},"blockNum":"386639"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","send":"","pkg_path":"gno.land/r/test15/poll","func":"DeprecateRealm","args":["https://google.com"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"MPgHD2oJwf8bBXU4PZWGeebT5aZlTrN659ezxDOr/+1LQwugk0AXsyQexCdZLIMxpgVFigQFte71XFoDCUAkcQ=="}],"memo":"Called through gno.studio"},"blockNum":"386641"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/test15/poll","func":"Vote","args":["false","false","false","true"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"pW3FRXsY6vVdj/dHC+99cLDOYwYMS7yy6XR03utzxGQP8/trsQw+iEAdVHaI08ThVCmP0iaqkfAYIRrlAt7iEQ=="}],"memo":"Called through gno.studio"},"blockNum":"386643"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","send":"","pkg_path":"gno.land/r/test15/poll","func":"Render","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"8BfGJn6vdEO/6idVidcK6j9RyIg8xolhyEvJKU/WvB5AqeL3HoARedXeoydBQByoqAGJWYg4C1phbMkjm/iQDA=="}],"memo":"Called through gno.studio"},"blockNum":"386644"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","send":"","pkg_path":"gno.land/r/test15/poll","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"Ywjh81l8ySPrmhQNMRPaKsECyvZ1jYiXui4kG6Fi/oQsyIhJlkMC06mXEFFut8Js0Zz1/YNQ+pbiqRs0j8c71g=="}],"memo":"Called through gno.studio"},"blockNum":"386646"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","package":{"Name":"poll_v1","Path":"gno.land/r/test16/poll_v1","Files":[{"Name":"package.gno","Body":"package poll\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nconst (\n\tdateFmt = \"2006-01-02 15:04 MST\"\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first hear about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []Participant\n\t}\n)\n\ntype Participant struct {\n\tAddress std.Address\n\tDate    time.Time\n}\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, p := range answer.Participants {\n\t\t\tif p.Address == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// 👋 Welcome to gnoyourdate (Know-Your-Gno-Date) poll! 🎈🎈🎈\n//\n// You are now viewing the Vote function.\n// This function allows you to submit your choice for the poll.\n//\n// ❔ Question: When did you first hear about Gno.land?\n// 👇 Options:\n//  - This month\n//  - This year\n//  - 1-2 years ago\n//  - Since its inception\n//\n// 📍 Please make sure to mark the option you choose as 'True (Yes)' and mark all other options as 'False (No)' for your vote to be valid.\n// 📍 If you select multiple options as 'True (Yes)', your vote will be considered invalid.\n//\n// 📢 Now, please cast your vote using the form below, then click the \"Call\" button to submit it.\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\treturn \"This realm is deprecated, the new version can be found at \" + nextRealmPath \n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tparticipant := Participant{\n\t\tAddress: std.GetOrigCaller(),\n\t\tDate: time.Now(),\n\t}\n\tassertFirstVote(participant.Address)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, participant)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted Yes on '%s'. You can check out the results at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(_ string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked.\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated. \u003c/br\u003eThe new version can be found at \u003ca href=\\\"%s\\\"\u003e%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(\"# GnoYourDate\\n👋 Welcome to GnoYourDate (Know-Your-Gno-Date) poll! 🎈🎈🎈\")\n\tbuf.WriteString(ufmt.Sprintf(\"## Question: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote from here](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Choices:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their vote\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, p := range a.Participants {\n\t\t\t\tdate := p.Date.UTC().Format(dateFmt)\n\t\t\t\tbuf.WriteString(\"  - \" + p.Address.String() + \" \u003csmall\u003e\u003ci\u003e(voted at \" + date + \")\u003c/i\u003e\u003c/small\u003e\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to \" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"You haven't selected an option. Please submit your vote by selecting one of the options as 'True (Yes)'.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple options have been selected. Please submit your vote by selecting only one of the options as 'True (Yes)'.\\n\" +\n\t\t\t\t\"The option you choose must be marked as 'True (Yes)', while all other options are marked as 'False (No)'.\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"wNGPSlOXKUGaCemGzS/3N5QaZ09NEfBNFObltk5jxaY87mCvVds6PHLwO0uUqAF7DF1tpp9A8SBjdtX6yn4qsg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386650"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","package":{"Name":"poll","Path":"gno.land/r/test16/poll","Files":[{"Name":"package.gno","Body":"package poll\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nconst (\n\tdateFmt = \"2006-01-02 15:04 MST\"\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first hear about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []Participant\n\t}\n)\n\ntype Participant struct {\n\tAddress std.Address\n\tDate    time.Time\n}\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, p := range answer.Participants {\n\t\t\tif p.Address == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// 👋 Welcome to gnoyourdate (Know-Your-Gno-Date) poll! 🎈🎈🎈\n//\n// You are now viewing the Vote function.\n// This function allows you to submit your choice for the poll.\n//\n// ❔ Question: When did you first hear about Gno.land?\n// 👇 Options:\n//  - This month\n//  - This year\n//  - 1-2 years ago\n//  - Since its inception\n//\n// 📍 Please make sure to mark the option you choose as 'True (Yes)' and mark all other options as 'False (No)' for your vote to be valid.\n// 📍 If you select multiple options as 'True (Yes)', your vote will be considered invalid.\n//\n// 📢 Now, please cast your vote using the form below, then click the \"Call\" button to submit it.\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\treturn \"This realm is deprecated, the new version can be found at \" + nextRealmPath \n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tparticipant := Participant{\n\t\tAddress: std.GetOrigCaller(),\n\t\tDate: time.Now(),\n\t}\n\tassertFirstVote(participant.Address)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, participant)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted Yes on '%s'. You can check out the results at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(_ string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked.\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated. \u003c/br\u003eThe new version can be found at \u003ca href=\\\"%s\\\"\u003e%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(\"# GnoYourDate\\n👋 Welcome to GnoYourDate (Know-Your-Gno-Date) poll! 🎈🎈🎈\")\n\tbuf.WriteString(ufmt.Sprintf(\"## Question: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote from here](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Choices:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their vote\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, p := range a.Participants {\n\t\t\t\tdate := p.Date.UTC().Format(dateFmt)\n\t\t\t\tbuf.WriteString(\"  - \" + p.Address.String() + \" \u003csmall\u003e\u003ci\u003e(voted at \" + date + \")\u003c/i\u003e\u003c/small\u003e\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to \" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"You haven't selected an option. Please submit your vote by selecting one of the options as 'True (Yes)'.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple options have been selected. Please submit your vote by selecting only one of the options as 'True (Yes)'.\\n\" +\n\t\t\t\t\"The option you choose must be marked as 'True (Yes)', while all other options are marked as 'False (No)'.\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"x77MYvOWHdf6DX0UFFJTVNkO8Krc6BrC34PZ3hMvfyFcBiRRztvZT9YpNVO6ZOgQNdoHJTR53pCwxyP2o8sw7Q=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386652"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","package":{"Name":"poll","Path":"gno.land/r/test17/poll","Files":[{"Name":"package.gno","Body":"package poll\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nconst (\n\tdateFmt = \"2006-01-02 15:04 MST\"\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first hear about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []Participant\n\t}\n)\n\ntype Participant struct {\n\tAddress std.Address\n\tDate    time.Time\n}\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, p := range answer.Participants {\n\t\t\tif p.Address == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// 👋 Welcome to gnoyourdate (Know-Your-Gno-Date) poll! 🎈🎈🎈\n//\n// You are now viewing the Vote function.\n// This function allows you to submit your choice for the poll.\n//\n// ❔ Question: When did you first hear about Gno.land?\n// 👇 Options:\n//  - This month\n//  - This year\n//  - 1-2 years ago\n//  - Since its inception\n//\n// 📍 Please make sure to mark the option you choose as 'True (Yes)' and mark all other options as 'False (No)' for your vote to be valid.\n// 📍 If you select multiple options as 'True (Yes)', your vote will be considered invalid.\n//\n// 📢 Now, please cast your vote using the form below, then click the \"Call\" button to submit it.\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\treturn \"This realm is deprecated, the new version can be found at \" + nextRealmPath \n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tparticipant := Participant{\n\t\tAddress: std.GetOrigCaller(),\n\t\tDate: time.Now(),\n\t}\n\tassertFirstVote(participant.Address)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, participant)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted Yes on '%s'. You can check out the results at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(_ string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked.\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated. \u003c/br\u003eThe new version can be found at \u003ca href=\\\"%s\\\"\u003e%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(\"# GnoYourDate\\n👋 Welcome to GnoYourDate (Know-Your-Gno-Date) poll! 🎈🎈🎈\\n\\n\")\n\tbuf.WriteString(ufmt.Sprintf(\"## Question: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote from here](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Choices:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: %d vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their vote\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, p := range a.Participants {\n\t\t\t\tdate := p.Date.UTC().Format(dateFmt)\n\t\t\t\tbuf.WriteString(\"  - \" + p.Address.String() + \" \u003csmall\u003e\u003ci\u003e(voted at \" + date + \")\u003c/i\u003e\u003c/small\u003e\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to \" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"You haven't selected an option. Please submit your vote by selecting one of the options as 'True (Yes)'.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple options have been selected. Please submit your vote by selecting only one of the options as 'True (Yes)'.\\n\" +\n\t\t\t\t\"The option you choose must be marked as 'True (Yes)', while all other options are marked as 'False (No)'.\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"4DjQ2ZCe8ZYrELyetag5KUJ/71Zdbo1W2WINV3GxSxhMfVfFYJ10MZTLDszmjULTfqny8veQmKYMXwHah7hSwg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386654"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","package":{"Name":"poll","Path":"gno.land/r/test17/poll","Files":[{"Name":"package.gno","Body":"package poll\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nconst (\n\tdateFmt = \"2006-01-02 15:04 MST\"\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first hear about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []Participant\n\t}\n)\n\ntype Participant struct {\n\tAddress std.Address\n\tDate    time.Time\n}\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, p := range answer.Participants {\n\t\t\tif p.Address == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// 👋 Welcome to the GnoYourDate (Know-Your-Gno-Date) Poll! 🎈🎈🎈\n//\n// You are now viewing the Vote function.\n// This function allows you to submit your choice for the poll.\n//\n// ❔ Question: When did you first hear about Gno.land?\n// 👇 Options:\n//  - This month\n//  - This year\n//  - 1-2 years ago\n//  - Since its inception\n//\n// 📍 Please make sure to mark the option you choose as 'True (Yes)' and mark all other options as 'False (No)' for your vote to be valid.\n// 📍 If you select multiple options as 'True (Yes)', your vote will be considered invalid.\n//\n// 📢 Now, please cast your vote using the form below, then click the \"Call\" button to submit it.\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\treturn \"This realm is deprecated, the new version can be found at \" + nextRealmPath \n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tparticipant := Participant{\n\t\tAddress: std.GetOrigCaller(),\n\t\tDate: time.Now(),\n\t}\n\tassertFirstVote(participant.Address)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, participant)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted Yes on '%s'. You can check out the results at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(_ string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked.\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated. \u003c/br\u003eThe new version can be found at \u003ca href=\\\"%s\\\"\u003e%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(\"# GnoYourDate Poll\\n👋 Welcome to the GnoYourDate (Know-Your-Gno-Date) Poll! 🎈🎈🎈\\n\\n\")\n\tbuf.WriteString(ufmt.Sprintf(\"## Question: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote from here](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Choices:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: **%d** vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their vote\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, p := range a.Participants {\n\t\t\t\tdate := p.Date.UTC().Format(dateFmt)\n\t\t\t\tbuf.WriteString(\"  - \" + p.Address.String() + \" \u003csmall\u003e\u003ci\u003e(voted at \" + date + \")\u003c/i\u003e\u003c/small\u003e\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to \" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"You haven't selected an option. Please submit your vote by selecting one of the options as 'True (Yes)'.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple options have been selected. Please submit your vote by selecting only one of the options as 'True (Yes)'.\\n\" +\n\t\t\t\t\"The option you choose must be marked as 'True (Yes)', while all other options are marked as 'False (No)'.\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"t7KRu6ZEGUJHO6xQ6Mi35RZ3FByWKhkBrNWxH0rwP7Y8uQT9KZ32I+8ODgtIHomfjLQ/e2rJxPOGewo3yvZVDw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386664"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","package":{"Name":"poll","Path":"gno.land/r/test18/poll","Files":[{"Name":"package.gno","Body":"package poll\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nconst (\n\tdateFmt = \"2006-01-02 15:04 MST\"\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first hear about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []Participant\n\t}\n)\n\ntype Participant struct {\n\tAddress std.Address\n\tDate    time.Time\n}\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, p := range answer.Participants {\n\t\t\tif p.Address == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// 👋 Welcome to the GnoYourDate (Know-Your-Gno-Date) Poll! 🎈🎈🎈\n//\n// You are now viewing the Vote function.\n// This function allows you to submit your choice for the poll.\n//\n// ❔ Question: When did you first hear about Gno.land?\n// 👇 Options:\n//  - This month\n//  - This year\n//  - 1-2 years ago\n//  - Since its inception\n//\n// 📍 Please make sure to mark the option you choose as 'True (Yes)' and mark all other options as 'False (No)' for your vote to be valid.\n// 📍 If you select multiple options as 'True (Yes)', your vote will be considered invalid.\n//\n// 📢 Now, please cast your vote using the form below, then click the \"Call\" button to submit it.\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\treturn \"This realm is deprecated, the new version can be found at \" + nextRealmPath \n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tparticipant := Participant{\n\t\tAddress: std.GetOrigCaller(),\n\t\tDate: time.Now(),\n\t}\n\tassertFirstVote(participant.Address)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, participant)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted Yes on '%s'. You can check out the results at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(_ string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked.\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated. \u003c/br\u003eThe new version can be found at \u003ca href=\\\"%s\\\"\u003e%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(\"# GnoYourDate Poll\\n👋 Welcome to the GnoYourDate (Know-Your-Gno-Date) Poll! 🎈🎈🎈\\n\\n\")\n\tbuf.WriteString(ufmt.Sprintf(\"## Question: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote from here](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Choices:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: **%d** vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their vote\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, p := range a.Participants {\n\t\t\t\tdate := p.Date.UTC().Format(dateFmt)\n\t\t\t\tbuf.WriteString(\"  - \" + p.Address.String() + \" \u003csmall\u003e\u003ci\u003e(voted at \" + date + \")\u003c/i\u003e\u003c/small\u003e\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to \" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"You haven't selected an option. Please submit your vote by selecting one of the options as 'True (Yes)'.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple options have been selected. Please submit your vote by selecting only one of the options as 'True (Yes)'.\\n\" +\n\t\t\t\t\"The option you choose must be marked as 'True (Yes)', while all other options are marked as 'False (No)'.\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"rrjYDURw2R9C/Aiqel2WdhMr0VUZeNUKWYzyeeO5C5Y+QgblN1JXRqGOJLQO5TuTaGYMmwXTljyzZ43k9nk9KA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386666"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/jeronimoalbi/poll_v1","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"PddatTJPxbFeMO7qBE/MuTfAcnM/eZkMRpudwW6bcmcNGiOI512hffLDSWGKQe2oTXTDtPzr3jwrUYo7uAT+Ug=="}],"memo":"Called through gno.studio"},"blockNum":"386669"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/jeronimoalbi/poll_v1","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"eDjs6v2BcHwJbkptYPpjsYgRBnc+mS3K4SqserVQmORRVzhph1c4m2jFlD2gh+Zk9jDtIv9jz5DvKKeHRBNDfA=="}],"memo":"Called through gno.studio"},"blockNum":"386671"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","send":"","pkg_path":"gno.land/r/test18/poll","func":"Vote","args":["false","true","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"PtoQOfxi1F0J4sFk9qNHrO/bHbRICt4F9hkKISLxZbdYJkyydaL3XIHBCNYehl5ZRcGff5W3xeY6e8TinhExFQ=="}],"memo":"Called through gno.studio"},"blockNum":"386673"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","send":"","pkg_path":"gno.land/r/test18/poll","func":"Vote","args":["false","true","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"I2IJg+l/VR6V6JgtNcUaNi9KDPt7Li/3rcCge10W6I55ljVpZ6qIjzW0aX/x/4Mq3c1asgR20sIFRu89N2S6yQ=="}],"memo":"Called through gno.studio"},"blockNum":"386675"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","send":"","pkg_path":"gno.land/r/test18/poll","func":"Vote","args":["false","true","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"dqvLw+jUstexTAs6ETq6dy7CYWkPvHwpJn/B/W+x2rd98ifV9glmSCfVAFDol+sEII5Q9mowpyXkn5LP8VLk2g=="}],"memo":"Called through gno.studio"},"blockNum":"386677"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","send":"","pkg_path":"gno.land/r/test18/poll","func":"Vote","args":["false","true","true","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"5nMIdXXjavcIUEVuE4R3+0HtNZr7nUpqHwnP3hBZ+AoWcS76MIlDXkyuj1oiTKq2FqfkMA5AkBltPF9oUkxYvA=="}],"memo":"Called through gno.studio"},"blockNum":"386680"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","send":"","pkg_path":"gno.land/r/test18/poll","func":"Vote","args":["false","false","true","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"e4CLlubMeNGq4ZvwBZycr+AtCrmdaWzV35aFLkDW03RqBnX0swXs9xi3YFaRteheMA2ajjS0x+NXFGxNekVV2Q=="}],"memo":"Called through gno.studio"},"blockNum":"386682"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test18/poll","func":"Vote","args":["false","true","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"qoi2ttu0F88DwQiHH6ug2JGfI+euNBDzNdxk+z2QbjsSiezZhMHInBiu+TJbc/1a5zv0kR7N2kKtXHoXwhng4g=="}],"memo":"Called through gno.studio"},"blockNum":"386685"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1778y2yphxs2wpuaflsy5y9qwcd4gttn4g5yjx5","send":"","pkg_path":"gno.land/r/test18/poll","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7MWSLkjf+z/CYfMh6KVHEaHLDWpnfGBRDqFO81j1FRN"},"signature":"pdNvv7684n6PoAasrgay9lZ6JDSzIIVrhR7RPDSCSB4FE/rtnrW5VD8CbP5OuOMIgipXmr7r7DxfG7hbEnYG0w=="}],"memo":"Called through gno.studio"},"blockNum":"386687"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15wmukt79xymnnu6c4de32trnufudqum60yrxu8","send":"","pkg_path":"gno.land/r/test10/poll","func":"Render","args":["blue\n"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6QxDeE9T4utsKFysdC0JZTyVwnc4UgqQ7vhHJf5pp+p"},"signature":"XNtlVmSXALue0i6k1hgZtLfuHz4JO7lJirIW7mJzX+5AEY9iHhg2MM9jZjxjrs4Fehnqx2n9YXeoeky6cPAjkQ=="}],"memo":"Called through gno.studio"},"blockNum":"386689"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15wmukt79xymnnu6c4de32trnufudqum60yrxu8","send":"","pkg_path":"gno.land/r/test10/poll","func":"Render","args":["blue"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6QxDeE9T4utsKFysdC0JZTyVwnc4UgqQ7vhHJf5pp+p"},"signature":"+xUWBrQp8DfT2TMVSnkzdCYXyY9vdy7uLfacqqFXcpFM+JlmK4yKHmCMBfuvEdu6kC1zLfvGzBmlXnsYswj8Tg=="}],"memo":"Called through gno.studio"},"blockNum":"386699"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","package":{"Name":"poll","Path":"gno.land/r/testa1/poll","Files":[{"Name":"package.gno","Body":"package poll\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nconst (\n\tdateFmt = \"2006-01-02 15:04 MST\"\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first hear about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []Participant\n\t}\n)\n\ntype Participant struct {\n\tAddress std.Address\n\tDate    time.Time\n}\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, p := range answer.Participants {\n\t\t\tif p.Address == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// 👋 Welcome to the GnoYourDate (Know-Your-Gno-Date) Poll! 🎈🎈🎈\n//\n// You are now viewing the Vote function.\n// This function allows you to submit your choice for the poll.\n//\n// ❔ Question: When did you first hear about Gno.land?\n// 👇 Options:\n//  - This month\n//  - This year\n//  - 1-2 years ago\n//  - Since its inception\n//\n// 📍 Please make sure to mark the option you choose as 'True (Yes)' and mark all other options as 'False (No)' for your vote to be valid.\n// 📍 If you select multiple options as 'True (Yes)', your vote will be considered invalid.\n//\n// 📢 Now, please cast your vote using the form below, then click the \"Call\" button to submit it.\n//\n// 💬 After submitting your vote, click the \"Copy result link\" button to copy the link to your vote, then share it by tagging @_gnostudio and using the #gnoyourdate hashtag.\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\treturn \"This realm is deprecated, the new version can be found at \" + nextRealmPath \n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tparticipant := Participant{\n\t\tAddress: std.GetOrigCaller(),\n\t\tDate: time.Now(),\n\t}\n\tassertFirstVote(participant.Address)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, participant)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted Yes on '%s'. You can check out the results at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(_ string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked.\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated. \u003c/br\u003eThe new version can be found at \u003ca href=\\\"%s\\\"\u003e%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(\"# GnoYourDate Poll\\n👋 Welcome to the GnoYourDate (Know-Your-Gno-Date) Poll! 🎈🎈🎈\\n\\n\")\n\tbuf.WriteString(ufmt.Sprintf(\"## Question: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote from here](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Choices:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: **%d** vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their vote\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, p := range a.Participants {\n\t\t\t\tdate := p.Date.UTC().Format(dateFmt)\n\t\t\t\tbuf.WriteString(\"  - \" + p.Address.String() + \" \u003csmall\u003e\u003ci\u003e(voted at \" + date + \")\u003c/i\u003e\u003c/small\u003e\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to \" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"You haven't selected an option. Please submit your vote by selecting one of the options as 'True (Yes)'.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple options have been selected. Please submit your vote by selecting only one of the options as 'True (Yes)'.\\n\" +\n\t\t\t\t\"The option you choose must be marked as 'True (Yes)', while all other options are marked as 'False (No)'.\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"dYRZ04z8uerzMPljXEGbo9apaSrgcLz0jr8tDde4J2toRu6VJfSPSjJT4+Konx+dtvQoHJw/L+KVI651o6Smsg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386701"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fxfw30600yds44rllkke5m2u0zn4u8akm9h23p","send":"","pkg_path":"gno.land/r/testa1/poll","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AkH5NWnbcJfdqxwoB2gskF6FWh759ecTxYKStf4cel8a"},"signature":"NXOoRfnCJzjSWBMD6e8z2VTL+FnxpUxkCI+JnpQuf8RqCM9UmNfH58J+vhyalykh8Ymmtk/5iZymoc+jewq9RQ=="}],"memo":"Called through gno.studio"},"blockNum":"386710"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/jeronimoalbi/poll_v1","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"wSw9freAMAyx9E31kqAs1a0X+FYHJIycseJFRkQIZ+l5A7RjNfPucE3m5ElGVzKXSFHlvASCBZMvnHREGjmiQQ=="}],"memo":"Called through gno.studio"},"blockNum":"386712"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g15wmukt79xymnnu6c4de32trnufudqum60yrxu8","send":"","pkg_path":"gno.land/r/test10/poll","func":"Render","args":["blue"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6QxDeE9T4utsKFysdC0JZTyVwnc4UgqQ7vhHJf5pp+p"},"signature":"mwdzq3sB1nDSfqG86TRige04V+itXE3OqICn3MFdTBplIWja1/9DcidttLodhpSeMHNIrKJTU9LjPCJx24pqMg=="}],"memo":"Called through gno.studio"},"blockNum":"386716"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/boom/boom","func":"Allowance","args":["",""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"2V02qxsdiUnvUbdZNnVvz7UV2Gyf1FqG2QabUZFxyE13/h8jDv67FrXIcHd9m12+IwOO3AlCPGnkjkFsY1t03Q=="}],"memo":"Called through gno.studio"},"blockNum":"386738"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/boom/boom","func":"Allowance","args":["",""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"hLnZFlpQob3KilyDtLAyQrabFEDA69lorT0ImNx2rFtLB1X5Kx081QOn/reJJFgApayKzArhGNB/kBFDpv0U9g=="}],"memo":"Called through gno.studio"},"blockNum":"386740"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/test50/hello","func":"Test","args":["-1"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"JEKSwd8es3XEh4R0zOuDTRSQhjY7ntmmBf7hyrz1zQ1T5iFjwfzecK3xHg9nAfvZshIhZSDheg0Suf6bu+Gulw=="}],"memo":"Called through gno.studio"},"blockNum":"386743"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/test50/hello","func":"Test","args":["1.2312312312381284e+101"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"8pZ4g82nHCv04qgFo8D9X+bHlXir7KjB/21IBtAMVr9bLlTQhHYf4UYuBfS/mRdeBalaKoB36Ijga25yA01mjQ=="}],"memo":"Called through gno.studio"},"blockNum":"386745"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/test50/hello","func":"Test","args":["12"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"PxHWIkqeRm8WKke8WkUNsa7xCdda7S3hJ7UMAWqVSpYGC6nSOlJ00jf4IaY0zQKGr/a8TTHa81GLF4szV+/kAQ=="}],"memo":"Called through gno.studio"},"blockNum":"386747"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/testa1/poll","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"+Yg7lucAVT9c5RfUQMevAnibvfs4xo+Y6YrcA3yC0VMhdsRPOnUxc0baQDGrOW1PB1PB+0EbPZkIRaPDrr8cWw=="}],"memo":"Called through gno.studio"},"blockNum":"386749"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/jeronimoalbi/poll_v1","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"Pr4umEPIOiXVh1ch+S7g+jecctF1Z0L5T1pP+XNKp9wXkYXQuguTAlEVn9mD7rl9JnNssj1RcRW9OCC+MurBMw=="}],"memo":"Called through gno.studio"},"blockNum":"386798"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/gnostudio/gnoyourdate_v1","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"O6hbU5qDArPthmFKHB8BFOwKHN7taayZpPHenrWcyaI8k7ihR1J8YMwphxP/Z5qgU5DGYknxrFFFZzk6tzZHKQ=="}],"memo":"Called through gno.studio"},"blockNum":"386811"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/jeronimoalbi/poll_v1","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"BxJ9jUyezneDALjYWtuPzsAsLuNrwGI2h9SJChDnTpZN+7ckzCI9g/jtckUgvsWWjR1oTsRQwfl4yrPRA7u4ZA=="}],"memo":"Called through gno.studio"},"blockNum":"386813"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/jeronimoalbi/poll_v1","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"1f8GeLGNpnTkMPMI8sTCqPKyqjzNwNCdfVQOygTCII9XPNtanBpdttAm/pONNP+zMN17t0iTs7hCULS/BIdayQ=="}],"memo":"Called through gno.studio"},"blockNum":"386815"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/jeronimoalbi/poll_v1","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"TB4Fzq+idgxq0NqOPNuXH1YcjA/pFcouAeIDOb/vWgJRl1tsNAZWP28+4J+MNZwWby02W4RQz6nRnE81+OBJyA=="}],"memo":"Called through gno.studio"},"blockNum":"386819"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/jeronimoalbi/poll_v1","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"GPaSAS5KxAev+Pfm5lNp2GiLVw8sEZRXwzLRdwDXB7oaIQ7bXmFcKmk9BJcHt5jFrq7x/Fr/ni0W3JcCTgH50w=="}],"memo":"Called through gno.studio"},"blockNum":"386822"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/jeronimoalbi/poll_v1","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"vticYn3gTDRkykDj64VcSebvwodNaQnABxjhnOJACTlGaFVfP6j7nuNsoaD0MuRsF6itRjVpTwi0zaQaavxCpA=="}],"memo":"Called through gno.studio"},"blockNum":"386833"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/jeronimoalbi/poll_v1","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"s9f33q7WjXYv42MEr2KBT3iMIFTzbtFEynYgTbOqa5sCnw0pruKNP3ViO+XkeN2IThdK41Uxcp5onAGO/8fQJg=="}],"memo":"Called through gno.studio"},"blockNum":"386835"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/gnostudio/gnoyourdate_v1","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"tjyfHVGvxPURl5KpD6fdRNNyF+AUpMUGb3L32KyPPKBYz3e+iv1wKsUbKrZaREhH/YSnqeFwR5gmlK/FOlnbtQ=="}],"memo":"Called through gno.studio"},"blockNum":"386837"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1hy6zry03hg5d8le9s2w4fxme6236hkgd928dun","send":"","pkg_path":"gno.land/r/jeronimoalbi/poll_v1","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AvC68IPWD/o8iYM+et/K6YpBp4+m0hF3mLXIdFZnWH1Y"},"signature":"AnjoJCuanRFnCw/zS7dJH2ToA5wXJWzouggEHiVVzvIPQ7v5NfHUkwwvku2ZlD/xgGxyvyoza10BKQTGohaPDg=="}],"memo":"Called through gno.studio"},"blockNum":"386841"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","package":{"Name":"poll","Path":"gno.land/r/testb/poll","Files":[{"Name":"package.gno","Body":"package poll\n\nimport (\n\t\"std\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst (\n\tChoiceNone             Choice = 0x0\n\tChoiceSinceInception   Choice = 0x1\n\tChoiceOneOrTwoYearsAgo Choice = 0x2\n\tChoiceThisYear         Choice = 0x4\n\tChoiceThisMonth        Choice = 0x8\n)\n\nconst (\n\tdateFmt = \"2006-01-02 15:04 MST\"\n)\n\nvar (\n\tpoll = Poll{\n\t\tQuestion: \"When did you first hear about Gno.land?\",\n\t\tAnswers: []Answer{\n\t\t\t{Choice: ChoiceThisMonth},\n\t\t\t{Choice: ChoiceThisYear},\n\t\t\t{Choice: ChoiceOneOrTwoYearsAgo},\n\t\t\t{Choice: ChoiceSinceInception},\n\t\t},\n\t}\n\tadmin         = std.Address(\"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl\")\n\tisRealmLocked bool\n\tnextRealmPath string\n)\n\ntype (\n\t// Choice defines a type for poll choices.\n\tChoice byte\n\n\t// Poll tracks the number of votes for a set of pre defined answers.\n\tPoll struct {\n\t\tQuestion string\n\t\tAnswers  []Answer\n\t}\n\n\t// Answer contains the number of votes for a poll choice.\n\tAnswer struct {\n\t\tChoice       Choice\n\t\tParticipants []Participant\n\t}\n)\n\ntype Participant struct {\n\tAddress std.Address\n\tDate    time.Time\n}\n\n// String returns the choice as a string.\nfunc (c Choice) String() string {\n\treturn strconv.Itoa(int(c))\n}\n\n// GetCount returns the number of votes submitted for a poll choice.\nfunc (p Poll) GetCount(c Choice) int {\n\tfor _, a := range p.Answers {\n\t\tif a.Choice == c {\n\t\t\treturn len(a.Participants)\n\t\t}\n\t}\n\treturn 0\n}\n\n// GetTotalCount returns the total number of votes.\nfunc (p Poll) GetTotalCount() int {\n\tvar count int\n\tfor _, a := range p.Answers {\n\t\tcount += len(a.Participants)\n\t}\n\treturn count\n}\n\n// HasVoted checks if an address already submitted a vote.\nfunc (p Poll) HasVoted(addr std.Address) bool {\n\tfor _, answer := range p.Answers {\n\t\tfor _, p := range answer.Participants {\n\t\t\tif p.Address == addr {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// 👋 Welcome to the GnoYourDate (Know-Your-Gno-Date) Poll! 🎈🎈🎈\n//\n// You are now viewing the Vote function.\n// This function allows you to submit your choice for the poll.\n//\n// ❔ Question: When did you first hear about Gno.land?\n// 👇 Options:\n//  - This month\n//  - This year\n//  - 1-2 years ago\n//  - Since its inception\n//\n// 📍 Please make sure to mark the option you choose as 'True (Yes)' and mark all other options as 'False (No)' for your vote to be valid.\n// 📍 If you select multiple options as 'True (Yes)', your vote will be considered invalid.\n//\n// 📢 Now, please cast your vote using the form below, then click the \"Call\" button to submit it.\n//\n// 💬 After casting your vote, click the \"Copy result link\" button to copy the link to your vote, then share it by tagging @_gnostudio and using the #gnoyourdate hashtag.\nfunc Vote(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception bool) string {\n\tif isRealmLocked {\n\t\tif nextRealmPath == \"\" {\n\t\t\tpanic(\"Realm is locked\")\n\t\t}\n\n\t\t// Allow TX to succeed but return an \"error\" message with the link to vote on the next realm version.\n\t\t// Panic and error results are not used to favor GnoStudio Connect usability to making links clickable.\n\t\treturn \"This realm is deprecated, the new version can be found at \" + nextRealmPath \n\t}\n\n\tchoice := mustCreateChoiceFromVoteArgs(thisMonth, thisYear, oneOrTwoYearsAgo, sinceInception)\n\tparticipant := Participant{\n\t\tAddress: std.GetOrigCaller(),\n\t\tDate: time.Now(),\n\t}\n\tassertFirstVote(participant.Address)\n\n\tfor i, a := range poll.Answers {\n\t\tif a.Choice == choice {\n\t\t\tpoll.Answers[i].Participants = append(poll.Answers[i].Participants, participant)\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn ufmt.Sprintf(\n\t\t`You have successfully voted Yes on '%s'. You can check out the results at https://%s.%s`,\n\t\tgetAnswerLabel(choice),\n\t\tstd.GetChainID(),\n\t\tstd.CurrentRealmPath(),\n\t)\n}\n\n// Render returns a Markdown string with the poll details.\nfunc Render(_ string) string {\n\tvar buf strings.Builder\n\n\tif isRealmLocked {\n\t\tvar msg string\n\t\tif nextRealmPath == \"\" {\n\t\t\tmsg = \"Realm is locked.\"\n\t\t} else {\n\t\t\tmsg += ufmt.Sprintf(\n\t\t\t\t\"Realm is deprecated. \u003c/br\u003eThe new version can be found at \u003ca href=\\\"%s\\\"\u003e%s\u003c/a\u003e\",\n\t\t\t\tnextRealmPath,\n\t\t\t\tnextRealmPath,\n\t\t\t)\n\t\t}\n\n\t\tbuf.WriteString(\n\t\t\t`\u003cp style=\"padding: .75rem 1.25rem; border: 1px solid #FFEEBA; background-color: #FFF3CD; color: #856404; border-radius: .25rem\"\u003e` +\n\t\t\t\tmsg +\n\t\t\t\t\"\u003c/p\u003e\\n\\n\",\n\t\t)\n\t}\n\n\tbuf.WriteString(\"# GnoYourDate Poll\\n👋 Welcome to the GnoYourDate (Know-Your-Gno-Date) Poll! 🎈🎈🎈\\n\\n\")\n\tbuf.WriteString(ufmt.Sprintf(\"## Question: %s\\n\", poll.Question))\n\n\tif !isRealmLocked {\n\t\turl := getGnoStudioConnectVoteURL(std.CurrentRealmPath())\n\t\tbuf.WriteString(\"👉 You can participate in the poll by [submitting your vote from here](\" + url + \") 👈\\n\")\n\t}\n\n\tbuf.WriteString(\"### Choices:\\n\")\n\tfor _, c := range [4]Choice{ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception} {\n\t\tbuf.WriteString(\n\t\t\tufmt.Sprintf(\"- %s: **%d** vote(s)\\n\", getAnswerLabel(c), poll.GetCount(c)),\n\t\t)\n\t}\n\n\tbuf.WriteString(\n\t\tufmt.Sprintf(\"\\nThe total number of answers is **%d**\\n\", poll.GetTotalCount()),\n\t)\n\n\t// Render participant addresses when there are votes\n\tif poll.GetTotalCount() \u003e 0 {\n\t\tbuf.WriteString(\"### Participants:\\nList of participants grouped by their vote\\n\")\n\t\tfor _, a := range poll.Answers {\n\t\t\t// Skip anwers without votes\n\t\t\tif len(a.Participants) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tbuf.WriteString(\"\\n- **\" + getAnswerLabel(a.Choice) + \"**:\\n\")\n\t\t\tfor _, p := range a.Participants {\n\t\t\t\tdate := p.Date.UTC().Format(dateFmt)\n\t\t\t\tbuf.WriteString(\"  - \" + p.Address.String() + \" \u003csmall\u003e\u003ci\u003e(voted at \" + date + \")\u003c/i\u003e\u003c/small\u003e\\n\")\n\t\t\t}\n\t\t}\n\t}\n\n\treturn buf.String()\n}\n\n// GetAdmin returns the address of the Realm admin account.\nfunc GetAdmin() string {\n\treturn admin.String()\n}\n\n// DeprecateRealm deprecates the realm in favor of another realm.\n// Depecation locks this realm to disallow new votes.\nfunc DeprecateRealm(realmPath string) string {\n\tassertCallerIsAdmin()\n\n\trealmPath = strings.TrimSpace(realmPath)\n\tif realmPath == \"\" {\n\t\tpanic(\"Realm path is empty\")\n\t}\n\n\tisRealmLocked = true\n\tnextRealmPath = realmPath\n\treturn \"The poll has been moved to \" + realmPath\n}\n\n// LockRealm locks the realm disallowing new vote submission.\nfunc LockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = true\n\treturn \"Realm locked successfully\"\n}\n\n// UnlockRealm unlocks the realm allowing new votes to be submitted.\nfunc UnlockRealm() string {\n\tassertCallerIsAdmin()\n\n\tisRealmLocked = false\n\tnextRealmPath = \"\"\n\treturn \"Realm unlocked successfully\"\n}\n\nfunc getAnswerLabel(c Choice) string {\n\tswitch c {\n\tcase ChoiceThisMonth:\n\t\treturn \"This month\"\n\tcase ChoiceThisYear:\n\t\treturn \"This year\"\n\tcase ChoiceOneOrTwoYearsAgo:\n\t\treturn \"1-2 years ago\"\n\tcase ChoiceSinceInception:\n\t\treturn \"Since its inception\"\n\tdefault:\n\t\treturn \"None\"\n\t}\n}\n\nfunc getGnoStudioConnectVoteURL(realmPath string) string {\n\treturn ufmt.Sprintf(\n\t\t\"https://gno.studio/connect/view/%s?network=%s\u0026tab=functions#Vote\",\n\t\trealmPath,\n\t\tstd.GetChainID(),\n\t)\n}\n\nfunc mustCreateChoiceFromVoteArgs(voteArgs ...bool) Choice {\n\tvar c Choice\n\tfor _, arg := range voteArgs {\n\t\tc \u003c\u003c= 1 // shift left\n\t\tif arg {\n\t\t\tc |= 1 // last bit on\n\t\t}\n\t}\n\n\tswitch c {\n\tcase ChoiceThisMonth, ChoiceThisYear, ChoiceOneOrTwoYearsAgo, ChoiceSinceInception:\n\t\treturn c\n\tcase ChoiceNone:\n\t\tpanic(\n\t\t\t\"You haven't selected an option. Please submit your vote by selecting one of the options as 'True (Yes)'.\",\n\t\t)\n\tdefault:\n\t\tpanic(\n\t\t\t\"Multiple options have been selected. Please submit your vote by selecting only one of the options as 'True (Yes)'.\\n\" +\n\t\t\t\t\"The option you choose must be marked as 'True (Yes)', while all other options are marked as 'False (No)'.\",\n\t\t)\n\t}\n}\n\nfunc assertFirstVote(addr std.Address) {\n\tif poll.HasVoted(addr) {\n\t\tpanic(\"This address already voted\")\n\t}\n}\n\nfunc assertCallerIsAdmin() {\n\tif admin != std.GetOrigCaller() {\n\t\tpanic(\"Caller is not admin\")\n\t}\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"WPwSLAelsENXX7GiSw2bBB+xsAZGSHVteDJuLVeK3RkvwqDVvSk23dD5BTmvdNNbzNfE5ppHdn3hEXD8x3H9KA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386872"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu","package":{"Name":"dms","Path":"gno.land/r/damourio/dms","Files":[{"Name":"package.gno","Body":"package dms\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tdms   *grc20.AdminToken\n\tadmin std.Address = \"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tdms = grc20.NewAdminToken(« damourstar\", « DMS », 4) \n\tdms.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tdms.Mint(\"g1kqv375z322zvll4fea47pvpcx9nsz7u2pct74q\", 100000*100000) // @damourstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn dms.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := dms.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := dms.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tdms.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdms.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdms.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn dms.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := dms.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+9xx+94xhyiUTyIGc4DIbRdl27WwSGo9O8Ov0v4njNZ"},"signature":"v8bIqYNSFJnjuZaNycAIctl/eLzlaXbK8liuhYOCr69R649oK8EALifxTwSffhO02/gC6aHOINZjzQF9rpIiEw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386933"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu","package":{"Name":"dmss","Path":"gno.land/r/damourioo/dmss","Files":[{"Name":"dmss.gno","Body":"package dms\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tdms   *grc20.AdminToken\n\tadmin std.Address = \"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tdms = grc20.NewAdminToken(« damourstar\", « DMS », 4) \n\tdms.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tdms.Mint(\"g1kqv375z322zvll4fea47pvpcx9nsz7u2pct74q\", 100000*100000) // @damourstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn dms.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := dms.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := dms.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tdms.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdms.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdms.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn dms.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := dms.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"},{"Name":"package.gno","Body":"package dms\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tdms   *grc20.AdminToken\n\tadmin std.Address = \"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tdms = grc20.NewAdminToken(« damourstar\", « DMS », 4) \n\tdms.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tdms.Mint(\"g1kqv375z322zvll4fea47pvpcx9nsz7u2pct74q\", 100000*100000) // @damourstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn dms.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := dms.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := dms.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tdms.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdms.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdms.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn dms.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := dms.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+9xx+94xhyiUTyIGc4DIbRdl27WwSGo9O8Ov0v4njNZ"},"signature":"RjDlAFBErYNqzWkeD27HHdz6wPxoN0zxM18PEpFuwsMtedFl4vRm6SgYzWvUgMgMbZSuxSVtue+fjwT9Rm+3uA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386935"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu","package":{"Name":"damss","Path":"gno.land/r/damouriooo/damss","Files":[{"Name":"dmss.gno","Body":"package dms\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tdms   *grc20.AdminToken\n\tadmin std.Address = \"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tdms = grc20.NewAdminToken(« damourstar\", « DMS », 4) \n\tdms.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tdms.Mint(\"g1kqv375z322zvll4fea47pvpcx9nsz7u2pct74q\", 100000*100000) // @damourstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn dms.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := dms.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := dms.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tdms.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdms.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdms.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn dms.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := dms.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"},{"Name":"package.gno","Body":"package dms\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tdms   *grc20.AdminToken\n\tadmin std.Address = \"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tdms = grc20.NewAdminToken(« damourstar\", « DMS », 4) \n\tdms.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tdms.Mint(\"g1kqv375z322zvll4fea47pvpcx9nsz7u2pct74q\", 100000*100000) // @damourstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn dms.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := dms.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := dms.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tdms.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdms.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdms.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn dms.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := dms.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+9xx+94xhyiUTyIGc4DIbRdl27WwSGo9O8Ov0v4njNZ"},"signature":"iXvR1RUO3zZGJF70ZDJ8l5kn/mqJ7hS5HkPao141uchUSMhE+OhGu2h46EBPkhD8rPFyKHgORqpvmT94VcVMFA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386937"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu","package":{"Name":"damss","Path":"gno.land/r/damouriooo/damss","Files":[{"Name":"dmss.gno","Body":"package dmss\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tdmss   *grc20.AdminToken\n\tadmin std.Address = \"g1kqv375z322zvll4fea47pvpcx9nsz7u2pct74q\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tdmss = grc20.NewAdminToken(« damourstar\", « DMS », 4) \n\tdmss.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tdmss.Mint(\"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu\", 100000*100000) // @damourstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn dms.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := dms.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := dms.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdmss.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdmss.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdmss.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tdmss.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdmss.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdmss.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn dmss.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := dmss.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"},{"Name":"package.gno","Body":"package dms\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tdms   *grc20.AdminToken\n\tadmin std.Address = \"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tdms = grc20.NewAdminToken(« damourstar\", « DMS », 4) \n\tdms.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tdms.Mint(\"g1kqv375z322zvll4fea47pvpcx9nsz7u2pct74q\", 100000*100000) // @damourstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn dms.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := dms.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := dms.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tdms.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdms.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdms.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn dms.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := dms.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+9xx+94xhyiUTyIGc4DIbRdl27WwSGo9O8Ov0v4njNZ"},"signature":"ofTCNL4/lmZ+3/Rv0Dubbbzhsg2h/RU9nUIp9UkQyGo4j65R2ZM1Rex5NmwodxEV12juvR1qZf08hVeMZZOBAw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386942"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu","package":{"Name":"dmss","Path":"gno.land/r/damouriooo/dmss","Files":[{"Name":"dmss.gno","Body":"package dmss\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tdmss   *grc20.AdminToken\n\tadmin std.Address = \"g1kqv375z322zvll4fea47pvpcx9nsz7u2pct74q\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tdmss = grc20.NewAdminToken(« damourstar\", « DMS », 4) \n\tdmss.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tdmss.Mint(\"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu\", 100000*100000) // @damourstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn dms.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := dms.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := dms.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdmss.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdmss.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdmss.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tdmss.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdmss.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdmss.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn dmss.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := dmss.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"},{"Name":"package.gno","Body":"package dms\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tdms   *grc20.AdminToken\n\tadmin std.Address = \"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tdms = grc20.NewAdminToken(« damourstar\", « DMS », 4) \n\tdms.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tdms.Mint(\"g1kqv375z322zvll4fea47pvpcx9nsz7u2pct74q\", 100000*100000) // @damourstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn dms.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := dms.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := dms.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tdms.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdms.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdms.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn dms.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := dms.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+9xx+94xhyiUTyIGc4DIbRdl27WwSGo9O8Ov0v4njNZ"},"signature":"HmFwTiJsiCMAJD9K9b3zeGgLnhgYuoFWpADXbbKm3O9cXyMQMdmgBgIL/hdnw3JQdTTgPEaL7ePCKJ+EJvrYLA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386944"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu","package":{"Name":"dmsss","Path":"gno.land/r/damouriooos/dmsss","Files":[{"Name":"dmss.gno","Body":"package dmss\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tdmss   *grc20.AdminToken\n\tadmin std.Address = \"g1kqv375z322zvll4fea47pvpcx9nsz7u2pct74q\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tdmss = grc20.NewAdminToken(« damourstar\", « DMS », 4) \n\tdmss.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tdmss.Mint(\"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu\", 100000*100000) // @damourstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn dms.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := dms.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := dms.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdmss.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdmss.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdmss.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tdmss.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdmss.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdmss.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn dmss.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := dmss.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"},{"Name":"package.gno","Body":"package dms\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tdms   *grc20.AdminToken\n\tadmin std.Address = \"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tdms = grc20.NewAdminToken(« damourstar\", « DMS », 4) \n\tdms.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tdms.Mint(\"g1kqv375z322zvll4fea47pvpcx9nsz7u2pct74q\", 100000*100000) // @damourstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn dms.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := dms.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := dms.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tdms.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdms.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdms.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn dms.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := dms.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+9xx+94xhyiUTyIGc4DIbRdl27WwSGo9O8Ov0v4njNZ"},"signature":"4gSND3EKiX9KKkp/8bBQKx3oW9xLzQ3SKdfuS/6wR9wb6dh4+er4Wu9YlsbwhqIFSXDihyUh5cSqVpNsHf/0rg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386946"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu","package":{"Name":"dmsss","Path":"gno.land/r/damouriooos/dmsss","Files":[{"Name":"dmss.gno","Body":"package dmss\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tdmss   *grc20.AdminToken\n\tadmin std.Address = \"g1kqv375z322zvll4fea47pvpcx9nsz7u2pct74q\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tdmss = grc20.NewAdminToken(« damourstar\", « DMSS », 4) \n\tdmss.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tdmss.Mint(\"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu\", 100000*100000) // @damourstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn dms.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := dms.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := dms.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdmss.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdmss.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdmss.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tdmss.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdmss.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdmss.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn dmss.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := dmss.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"},{"Name":"package.gno","Body":"package dms\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tdms   *grc20.AdminToken\n\tadmin std.Address = \"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tdms = grc20.NewAdminToken(« damourstar\", « DMS », 4) \n\tdms.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tdms.Mint(\"g1kqv375z322zvll4fea47pvpcx9nsz7u2pct74q\", 100000*100000) // @damourstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn dms.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := dms.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := dms.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tdms.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdms.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdms.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn dms.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := dms.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+9xx+94xhyiUTyIGc4DIbRdl27WwSGo9O8Ov0v4njNZ"},"signature":"w/xbKOeF8JBwwNK/RcIksMLcbgGrjzhk6GGiubc8Wxpaq/xMpBQrue7+8VV4l12qurhJ0nYvmoM8inQblVNoZg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386948"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu","package":{"Name":"dsmmms","Path":"gno.land/r/damouriooos/dsmmms","Files":[{"Name":"dmss.gno","Body":"package dmss\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tdmss   *grc20.AdminToken\n\tadmin std.Address = \"g1kqv375z322zvll4fea47pvpcx9nsz7u2pct74q\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tdmss = grc20.NewAdminToken(« damourstar\", « DMSS », 4) \n\tdmss.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tdmss.Mint(\"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu\", 100000*100000) // @damourstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn dms.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := dms.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := dms.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdmss.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdmss.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdmss.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tdmss.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdmss.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdmss.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn dmss.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := dmss.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"},{"Name":"package.gno","Body":"package dms\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tdms   *grc20.AdminToken\n\tadmin std.Address = \"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tdms = grc20.NewAdminToken(« damourstar\", « DMS », 4) \n\tdms.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tdms.Mint(\"g1kqv375z322zvll4fea47pvpcx9nsz7u2pct74q\", 100000*100000) // @damourstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn dms.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := dms.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := dms.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tdms.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdms.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdms.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn dms.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := dms.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+9xx+94xhyiUTyIGc4DIbRdl27WwSGo9O8Ov0v4njNZ"},"signature":"ei+6u+k2Jx54I+Wo9N4MMGLnz7H5rrHN5ri8a3C6X/EePxz13d7RD4JS+tQ/VJ4FBUw/f8r07BUWebMcFVtc/g=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386950"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu","package":{"Name":"dmssss","Path":"gno.land/r/damouriooos/dmssss","Files":[{"Name":"damourios.gno","Body":"package damourios\n\nfunc Render ( path string )   string   {\n    return « Damourios « \n}"},{"Name":"dmss.gno","Body":"package dmss\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tdmss   *grc20.AdminToken\n\tadmin std.Address = \"g1kqv375z322zvll4fea47pvpcx9nsz7u2pct74q\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tdmss = grc20.NewAdminToken(« damourstar\", « DMSS », 4) \n\tdmss.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tdmss.Mint(\"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu\", 100000*100000) // @damourstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn dms.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := dms.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := dms.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdmss.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdmss.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdmss.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tdmss.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdmss.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdmss.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn dmss.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := dmss.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}"},{"Name":"package.gno","Body":"package dms\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tdms   *grc20.AdminToken\n\tadmin std.Address = \"g1dvfhkhjp0qgrrm4tr065aqz6ntjs0qr7rtmxuu\" // TODO: helper to change admin\n)\n\nfunc init() {\n\tdms = grc20.NewAdminToken(« damourstar\", « DMS », 4) \n\tdms.Mint(admin, 1000000*100000)                                    // @administrator (1M)\n\tdms.Mint(\"g1kqv375z322zvll4fea47pvpcx9nsz7u2pct74q\", 100000*100000) // @damourstar (100k)\n}\n\n// method proxies as public functions.\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn dms.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := dms.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := dms.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tdms.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// faucet.\n\nfunc Faucet() {\n\t// FIXME: add limits?\n\t// FIXME: add payment in gnot?\n\tcaller := std.GetOrigCaller()\n\tdms.Mint(caller, 1000*10000) // 1k\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdms.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tdms.Burn(address.Resolve(), amount)\n}\n\n// render le rendu\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn dms.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := dms.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n// secure access for admin :)\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+9xx+94xhyiUTyIGc4DIbRdl27WwSGo9O8Ov0v4njNZ"},"signature":"Ai0aYjz7Iuf0pOMKjtLyg93m8sqSfKYtCKnxv3gH3qh2Qids+Oc5YUan9dny0sAOtX02fK9eUS8p2VojDDQG5g=="}],"memo":"Deployed through play.gno.land"},"blockNum":"386965"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/testb/poll","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"Q8Fr9lLlUr4AypdVa8YFVO1XKJ+gENxdmSThLnpf6q1tDC+Qcqj85nUPLInQL8+lGiNynCnvXGZDZLmOkQmqNw=="}],"memo":"Called through gno.studio"},"blockNum":"386971"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/testb/poll","func":"Vote","args":["false","false","true","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"JoeLDA4Q+bDKaPqRqxW0OQq6vE2Ws+Y5pQub9BasmFV0yvrJ8KrHkNpV+CxC1pZK336TLtD08VsoOJkzaxS+4A=="}],"memo":"Called through gno.studio"},"blockNum":"386973"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/testa1/poll","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"tnpAvGCFQgp5xw2rbRv6ilKhxDSViR5W+W77q2r+mUV7kFnVkEZwrJNClb45ukdmv17P4bfMJ6vrt43sPXCMTQ=="}],"memo":"Called through gno.studio"},"blockNum":"386978"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/testa1/poll","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"E6J/b6RUAwhW5nvyFCXMmXkNhSMDVK1OuNgYO8CLJEBeaOXXale0Hv0BGJpolCGuEg3wWGfuClLoTHxau16Sow=="}],"memo":"Called through gno.studio"},"blockNum":"386980"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/testb/poll","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"0V1/jfHJW6TsJtzCMitzK6PsGKxBhaxo+N14Uzq0PVwO4W9QLJgQzRoPPFpbE5rqDA4Wp1tvowclitj8Ij2ycQ=="}],"memo":"Called through gno.studio"},"blockNum":"386993"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/testb/poll","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"DLx2+6qSuFYIabpT0952KaGj5qJ/qzKfBrKPnE/dX6gfbj8iAXYhbS+02hxiAXuvnFsNdrXQE9jKkS5vqMDaOQ=="}],"memo":"Called through gno.studio"},"blockNum":"386995"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/jeronimoalbi/poll_v1","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"n9a8+gxTCFrxGYbbFUmLhgzPZf1BQnZOzrkPO+wkN+RW7cHi7YYf+liXROZ0iHTg1dQm24RIaCLVenK01GdVoQ=="}],"memo":"Called through gno.studio"},"blockNum":"387096"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/test13/poll_v1","func":"Render","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"kdq061iJER2uweQZu29ngVRMpmfTgNjrDtUTiPwurTIz1pMrGbKFMrkChSf51qzAQ9ycQu40nRozabp/4gXpJQ=="}],"memo":"Called through gno.studio"},"blockNum":"387126"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g14tg8x2j2j5pjxuyff9zzyaxe0s9qk0shrtxtz4","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"LqLxB4aYFKA3wi0hWwtniASj2VvgPGQ11Qsv1b4l7N0HrTNNg+/fgURXItTeqrCtU6ihYrmleOSM0Brftr/tkA=="}],"memo":""},"blockNum":"387153"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14tg8x2j2j5pjxuyff9zzyaxe0s9qk0shrtxtz4","send":"","pkg_path":"gno.land/r/testb/poll","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0LaneHVlDH5Mf/hOM3QlHMGAqZPemXQCt85f9t+Ezdb"},"signature":"LNrZGtsYFstZxGlRpHaY/PxWiCkm3iJuWlSRN7DPa2oxElek8nerzdfwE57f8HcjcYJppcXMqmGJ3gQeFM2bqg=="}],"memo":"Called through gno.studio"},"blockNum":"387155"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/testb/poll","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"5OaqyeOrd/qjUYxTOGN5cmrRUCyKUUdwTkh/Pe/VXXE3oICcC1q36jyB9eUXX59/AXi2PiDFcad2NJPFz10RYQ=="}],"memo":"Called through gno.studio"},"blockNum":"387183"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/testb/poll","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"H3EMy9G78GQsEd3O9hMN8ctqYwANnnwiOK5F7e4Ks8xGiSbya32ZLpgvdLBNMhlOSxNup9ksXdIw8gi695tSZw=="}],"memo":"Called through gno.studio"},"blockNum":"387185"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/testb/poll","func":"GetAdmin","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"M5milNwPtk8wDpki+DuTOkzZDUno+BjhRVV/AxQa2e42JPlIZG1NJktqtV0jjJwBlQJTaYVHB5+345Icr6kBog=="}],"memo":"Called through gno.studio"},"blockNum":"387188"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/testb/poll","func":"Vote","args":["true","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"9NQG+EWjnyDYoFBx6AQlNNLVhHO3rePecLUg/a0oXGlNxCNZAawjtbdg2EviwFiR3LvaBuGAuMehvYURuQuxFw=="}],"memo":"Called through gno.studio"},"blockNum":"387190"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/testb/poll","func":"LockRealm","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"QP/yQybc6pvaTA5S93h/xfFeq4oW0QlrXZAwCXeKlogoTlqYAv4vfjLcc9afjLm0/MI7GCd8snbl9B6i9eSRFw=="}],"memo":"Called through gno.studio"},"blockNum":"387192"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/testb/poll","func":"Vote","args":["false","false","false","false"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"nHXX4mGD3a43yv73wLPJAxP+W5p4zG55UPwSyPeBztBy9DFdXRpSJUNe/FmEToXDJEDXitSUfZ1yHlyNKZqIDA=="}],"memo":"Called through gno.studio"},"blockNum":"387194"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/test13/poll_v1","func":"Render","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"2VXOuw5ccipBYdghM2y8m3ghZdP3CTT8ChQusEILBYU/ZLS3zXQA8gKttQjrTcH3AeefuDmzBAZQ739nOdOjuA=="}],"memo":"Called through gno.studio"},"blockNum":"387232"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/test13/poll_v1","func":"Render","args":["abc"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"bkYNVH/8HSbx+uQyIi7IyE1Luj3w90lhCHmGejFIYN8vucQ8PzWMcp84N+/uW9R5ABlXIfOzmr6yXdehfH5dkg=="}],"memo":"Called through gno.studio"},"blockNum":"387234"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test10/poll","func":"Vote","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"YpTM2C65fcVg+Q3AyczUa1MREFjaAfBQhjt2Kgg5X5daHUy3skpstVplgWk0o7fdTYAXDs6TdQfe9aJSGG01CA=="}],"memo":"Called through gno.studio"},"blockNum":"387402"}
