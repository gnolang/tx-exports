{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ayxdpq5jzqrkedjp57xvdhvf9g6jjwhxt5wn2f","package":{"Name":"hello","Path":"gno.land/r/demo/hello","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApG+L9WvD3TJKSYknSaEL7uGAX77yqJWoa71BK9cRGwa"},"signature":"tiJ9dUAdej1l5GQgff6TdyPSXTCiPOoKseZz/v8EwFF59TgE7+NMqLe0mgCXnbARRtlztCub786c6zVm2EC8eQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"301521"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ayxdpq5jzqrkedjp57xvdhvf9g6jjwhxt5wn2f","package":{"Name":"v1","Path":"gno.land/r/demo/hello/v1","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApG+L9WvD3TJKSYknSaEL7uGAX77yqJWoa71BK9cRGwa"},"signature":"MRtUsknNmj+eG0cgl3nYaZaT/TZLqagZ2277Ie7DR3EJWdif7BQsC9gY+EXSpc1ueq+alH9poD1izp5fI+TQLw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"301523"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ayxdpq5jzqrkedjp57xvdhvf9g6jjwhxt5wn2f","package":{"Name":"hello3","Path":"gno.land/r/demo/hello3","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApG+L9WvD3TJKSYknSaEL7uGAX77yqJWoa71BK9cRGwa"},"signature":"FRxrcHVoHkmxaXYWA/b9EQMz1Pgyytl09cg40o6LxX92/RqXPgUGvxtO5TSLubxOKAhzKWYuU5cLCrLExVePMA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"301525"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ayxdpq5jzqrkedjp57xvdhvf9g6jjwhxt5wn2f","package":{"Name":"mus","Path":"gno.land/r/demo/mus","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApG+L9WvD3TJKSYknSaEL7uGAX77yqJWoa71BK9cRGwa"},"signature":"or+9hpd7MAQyGtf7yHnUph/a+z+tS+OFQ46y4dAhmiBvxGwsqoCw7A8upz8DZ2w1wEjwWPp7D6/eAwaKW5C/wA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"301527"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ayxdpq5jzqrkedjp57xvdhvf9g6jjwhxt5wn2f","package":{"Name":"counter2","Path":"gno.land/r/demo/counter2","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"},{"Name":"counter2.gno","Body":"package counter2\n\nimport (\n    \"gno.land/p/demo/ufmt\"\n)\n\nvar count int\n\nfunc Increment() {\n    count+2\n}\n\nfunc Decrement() {\n    count-2\n}\n\nfunc Render(_ string) string {\n    return ufmt.Sprintf(\"Count: %d\", count)\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApG+L9WvD3TJKSYknSaEL7uGAX77yqJWoa71BK9cRGwa"},"signature":"kVeZydGlA6FUFceO8/CeDanJdDCqPv2mThAbWygWYylgEyj76F/nL57HsZAAsi7qbwW/Yr9bSAIdEXiMqZqcKw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"301533"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ayxdpq5jzqrkedjp57xvdhvf9g6jjwhxt5wn2f","package":{"Name":"counter2","Path":"gno.land/r/demo/counter2","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApG+L9WvD3TJKSYknSaEL7uGAX77yqJWoa71BK9cRGwa"},"signature":"jhB9vo0bctpqBSSRLQfr4LCRu15wFo4VWivywhz57zhSVMaXQGJ2KGJ1NgjPz4pKvvrLA38ualkE9OB73BSjxw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"301607"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ayxdpq5jzqrkedjp57xvdhvf9g6jjwhxt5wn2f","package":{"Name":"benz","Path":"gno.land/r/demo/benz","Files":[{"Name":"benz.gno","Body":"package benz\n\nimport (\n\t\"std\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n)\n\nvar (\n\tbenz  *grc20.AdminToken\n\tadmin std.Address = \"g1ayxdpq5jzqrkedjp57xvdhvf9g6jjwhxt5wn2f\" // set admin account\n)\n\n// init is a constructor function that runs only once (at time of deployment)\nfunc init() {\n\t// provision the token's name, symbol and number of decimals\n\tbenz = grc20.NewAdminToken(\"Benz\", \"MTKN\", 4)\n\n\t// set the total supply\n\tbenz.Mint(admin, 1000000*10000) // @administrator (supply = 1 million)\n}\nfunc TotalSupply() uint64 {\n    return benz.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n    balance, err := benz.BalanceOf(owner.Resolve())\n    if err != nil {\n        panic(err)\n    }\n    return balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n    allowance, err := benz.Allowance(owner.Resolve(), spender.Resolve())\n    if err != nil {\n        panic(err)\n    }\n    return allowance\n}\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n    caller := std.PrevRealm().Addr()\n    err := benz.Transfer(caller, to.Resolve(), amount)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n    caller := std.PrevRealm().Addr()\n    err := benz.Approve(caller, spender.Resolve(), amount)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n    caller := std.PrevRealm().Addr()\n    err := benz.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n    caller := std.PrevRealm().Addr()\n    assertIsAdmin(caller)\n    err := benz.Mint(address.Resolve(), amount)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n    caller := std.PrevRealm().Addr()\n    assertIsAdmin(caller)\n    err := benz.Burn(address.Resolve(), amount)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc Render(path string) string {\n    parts := strings.Split(path, \"/\")\n    c := len(parts)\n\n    switch {\n    case path == \"\":\n        return benz.RenderHome()\n    case c == 2 \u0026\u0026 parts[0] == \"balance\":\n        owner := users.AddressOrName(parts[1])\n        balance, _ := benz.BalanceOf(owner.Resolve())\n        return ufmt.Sprintf(\"%d\\n\", balance)\n    default:\n        return \"404\\n\"\n    }\n}\n\nfunc assertIsAdmin(address std.Address) {\n    if address != admin {\n        panic(\"restricted access\")\n    }\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApG+L9WvD3TJKSYknSaEL7uGAX77yqJWoa71BK9cRGwa"},"signature":"pUVI+vuh8Etz5VCCspW8RbabdRUGj//E5/FSOy6p/d5E7HhxqgG7uwxS6K6y7dzV4T5N9splHZvKZQs7bltyTw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"301696"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1ayxdpq5jzqrkedjp57xvdhvf9g6jjwhxt5wn2f","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"kYIrWF7jWMor82vbEyVazbMueLfAHxAaV+0T2ye1NV5L8xd8p/efjPK6jBE6LI919bpvFU4eFdCDYQuY5erfiA=="}],"memo":""},"blockNum":"301724"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1ayxdpq5jzqrkedjp57xvdhvf9g6jjwhxt5wn2f","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"7j2STk2tbSddXYSmVgo7FkyVxZXnogXJqolHpAJvD9MNCVVHMUbK+wbKxTjpZLehKWdDK1CV59pZ1VXmKVA5ZA=="}],"memo":""},"blockNum":"301766"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ayxdpq5jzqrkedjp57xvdhvf9g6jjwhxt5wn2f","package":{"Name":"benzy","Path":"gno.land/r/demo/benzy","Files":[{"Name":"benzy.gno","Body":"package benzy\n\nimport (\n    \"std\"\n    \"strings\"\n    \"gno.land/p/demo/grc/grc20\"\n    \"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n    benzy *grc20.AdminToken\n    admin   std.Address = \"g1ayxdpq5jzqrkedjp57xvdhvf9g6jjwhxt5wn2f\" // set admin account\n)\n\n// init is a constructor function that runs only once (at time of deployment)\nfunc init() {\n    // provision the token's name, symbol and number of decimals\n    benzy = grc20.NewAdminToken(\"benzy\", \"MTKN\", 4)\n\n    // set the total supply\n    benzy.Mint(admin, 1000000*10000) // @administrator (supply = 1 million)\n}\nfunc TotalSupply() uint64 {\n    return benzy.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n    balance, err := benzy.BalanceOf(owner.Resolve())\n    if err != nil {\n        panic(err)\n    }\n    return balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n    allowance, err := benzy.Allowance(owner.Resolve(), spender.Resolve())\n    if err != nil {\n        panic(err)\n    }\n    return allowance\n}\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n    caller := std.PrevRealm().Addr()\n    err := benzy.Transfer(caller, to.Resolve(), amount)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n    caller := std.PrevRealm().Addr()\n    err := benzy.Approve(caller, spender.Resolve(), amount)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n    caller := std.PrevRealm().Addr()\n    err := benzy.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n    caller := std.PrevRealm().Addr()\n    assertIsAdmin(caller)\n    err := benzy.Mint(address.Resolve(), amount)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n    caller := std.PrevRealm().Addr()\n    assertIsAdmin(caller)\n    err := benzy.Burn(address.Resolve(), amount)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc Render(path string) string {\n    parts := strings.Split(path, \"/\")\n    c := len(parts)\n\n    switch {\n    case path == \"\":\n        return benzy.RenderHome()\n    case c == 2 \u0026\u0026 parts[0] == \"balance\":\n        owner := users.AddressOrName(parts[1])\n        balance, _ := benzy.BalanceOf(owner.Resolve())\n        return ufmt.Sprintf(\"%d\\n\", balance)\n    default:\n        return \"404\\n\"\n    }\n}\n\nfunc assertIsAdmin(address std.Address) {\n    if address != admin {\n        panic(\"restricted access\")\n    }\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApG+L9WvD3TJKSYknSaEL7uGAX77yqJWoa71BK9cRGwa"},"signature":"DxEK1wpEaq2znnoSHG1yOCkr7eU1UE4ypjQsDp68H+gCd8ivR8oAU+qNa4K+q1l7PVAA5Du1X9WLs13tWLqWRA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"301769"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ayxdpq5jzqrkedjp57xvdhvf9g6jjwhxt5wn2f","package":{"Name":"benzy1","Path":"gno.land/r/demo/benzy1","Files":[{"Name":"benzy.gno","Body":"package benzy\n\nimport (\n    \"std\"\n    \"strings\"\n    \"gno.land/p/demo/grc/grc20\"\n    \"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n    benzy *grc20.AdminToken\n    admin   std.Address = \"g1ayxdpq5jzqrkedjp57xvdhvf9g6jjwhxt5wn2f\" // set admin account\n)\n\n// init is a constructor function that runs only once (at time of deployment)\nfunc init() {\n    // provision the token's name, symbol and number of decimals\n    benzy = grc20.NewAdminToken(\"benzy\", \"MTKN\", 4)\n\n    // set the total supply\n    benzy.Mint(admin, 1000000*10000) // @administrator (supply = 1 million)\n}\nfunc TotalSupply() uint64 {\n    return benzy.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n    balance, err := benzy.BalanceOf(owner.Resolve())\n    if err != nil {\n        panic(err)\n    }\n    return balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n    allowance, err := benzy.Allowance(owner.Resolve(), spender.Resolve())\n    if err != nil {\n        panic(err)\n    }\n    return allowance\n}\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n    caller := std.GetOrigCaller()\n    err := benzy.Transfer(caller, to.Resolve(), amount)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n    caller := std.PrevRealm().Addr()\n    err := benzy.Approve(caller, spender.Resolve(), amount)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n    caller := std.PrevRealm().Addr()\n    err := benzy.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n    caller := std.PrevRealm().Addr()\n    assertIsAdmin(caller)\n    err := benzy.Mint(address.Resolve(), amount)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n    caller := std.PrevRealm().Addr()\n    assertIsAdmin(caller)\n    err := benzy.Burn(address.Resolve(), amount)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc Render(path string) string {\n    parts := strings.Split(path, \"/\")\n    c := len(parts)\n\n    switch {\n    case path == \"\":\n        return benzy.RenderHome()\n    case c == 2 \u0026\u0026 parts[0] == \"balance\":\n        owner := users.AddressOrName(parts[1])\n        balance, _ := benzy.BalanceOf(owner.Resolve())\n        return ufmt.Sprintf(\"%d\\n\", balance)\n    default:\n        return \"404\\n\"\n    }\n}\n\nfunc assertIsAdmin(address std.Address) {\n    if address != admin {\n        panic(\"restricted access\")\n    }\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApG+L9WvD3TJKSYknSaEL7uGAX77yqJWoa71BK9cRGwa"},"signature":"2sNrJqcszn9G9H7NxADJl06RzaSCM2qzOfujhxgp+PwS0bcxXeYY41Dyi8K3I7ccnuQt1rv7o1JAEm+93ljNEg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"301772"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ayxdpq5jzqrkedjp57xvdhvf9g6jjwhxt5wn2f","package":{"Name":"mouss","Path":"gno.land/r/demo/mouss","Files":[{"Name":"benzy.gno","Body":"package mouss\n\nimport (\n    \"std\"\n    \"strings\"\n    \"gno.land/p/demo/grc/grc20\"\n    \"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n    benzy *grc20.AdminToken\n    admin   std.Address = \"g1ayxdpq5jzqrkedjp57xvdhvf9g6jjwhxt5wn2f\" // set admin account\n)\n\n// init is a constructor function that runs only once (at time of deployment)\nfunc init() {\n    // provision the token's name, symbol and number of decimals\n    benzy = grc20.NewAdminToken(\"benzy\", \"MTKN\", 4)\n\n    // set the total supply\n    benzy.Mint(admin, 1000000*10000) // @administrator (supply = 1 million)\n}\nfunc TotalSupply() uint64 {\n    return benzy.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n    balance, err := benzy.BalanceOf(owner.Resolve())\n    if err != nil {\n        panic(err)\n    }\n    return balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n    allowance, err := benzy.Allowance(owner.Resolve(), spender.Resolve())\n    if err != nil {\n        panic(err)\n    }\n    return allowance\n}\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n    caller := std.GetOrigCaller()\n    err := benzy.Transfer(caller, to.Resolve(), amount)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n    caller := std.PrevRealm().Addr()\n    err := benzy.Approve(caller, spender.Resolve(), amount)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n    caller := std.PrevRealm().Addr()\n    err := benzy.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n    caller := std.PrevRealm().Addr()\n    assertIsAdmin(caller)\n    err := benzy.Mint(address.Resolve(), amount)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n    caller := std.PrevRealm().Addr()\n    assertIsAdmin(caller)\n    err := benzy.Burn(address.Resolve(), amount)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc Render(path string) string {\n    parts := strings.Split(path, \"/\")\n    c := len(parts)\n\n    switch {\n    case path == \"\":\n        return benzy.RenderHome()\n    case c == 2 \u0026\u0026 parts[0] == \"balance\":\n        owner := users.AddressOrName(parts[1])\n        balance, _ := benzy.BalanceOf(owner.Resolve())\n        return ufmt.Sprintf(\"%d\\n\", balance)\n    default:\n        return \"404\\n\"\n    }\n}\n\nfunc assertIsAdmin(address std.Address) {\n    if address != admin {\n        panic(\"restricted access\")\n    }\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApG+L9WvD3TJKSYknSaEL7uGAX77yqJWoa71BK9cRGwa"},"signature":"mbb12apGtuh2t4nfjoXZlwpE5ghFNbiWgdZ+29wWc91PK3wAGqkNAEj+eqTQKsXkvsjNeXf/4NJmA2eRukrU1w=="}],"memo":"Deployed through play.gno.land"},"blockNum":"301775"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1ayxdpq5jzqrkedjp57xvdhvf9g6jjwhxt5wn2f","package":{"Name":"mouss","Path":"gno.land/r/demo2/mouss","Files":[{"Name":"benzy.gno","Body":"package mouss\n\nimport (\n    \"std\"\n    \"strings\"\n    \"gno.land/p/demo/grc/grc20\"\n    \"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n    benzy *grc20.AdminToken\n    admin   std.Address = \"g1ayxdpq5jzqrkedjp57xvdhvf9g6jjwhxt5wn2f\" // set admin account\n)\n\n// init is a constructor function that runs only once (at time of deployment)\nfunc init() {\n    // provision the token's name, symbol and number of decimals\n    benzy = grc20.NewAdminToken(\"benzy\", \"MTKN\", 4)\n\n    // set the total supply\n    benzy.Mint(admin, 1000000*10000) // @administrator (supply = 1 million)\n}\nfunc TotalSupply() uint64 {\n    return benzy.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n    balance, err := benzy.BalanceOf(owner.Resolve())\n    if err != nil {\n        panic(err)\n    }\n    return balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n    allowance, err := benzy.Allowance(owner.Resolve(), spender.Resolve())\n    if err != nil {\n        panic(err)\n    }\n    return allowance\n}\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n    caller := std.GetOrigCaller()\n    err := benzy.Transfer(caller, to.Resolve(), amount)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n    caller := std.GetOrigCaller()\n    err := benzy.Approve(caller, spender.Resolve(), amount)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n    caller := std.GetOrigCaller()\n    err := benzy.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n    caller := std.GetOrigCaller()\n    assertIsAdmin(caller)\n    err := benzy.Mint(address.Resolve(), amount)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n    caller := std.GetOrigCaller()\n    assertIsAdmin(caller)\n    err := benzy.Burn(address.Resolve(), amount)\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc Render(path string) string {\n    parts := strings.Split(path, \"/\")\n    c := len(parts)\n\n    switch {\n    case path == \"\":\n        return benzy.RenderHome()\n    case c == 2 \u0026\u0026 parts[0] == \"balance\":\n        owner := users.AddressOrName(parts[1])\n        balance, _ := benzy.BalanceOf(owner.Resolve())\n        return ufmt.Sprintf(\"%d\\n\", balance)\n    default:\n        return \"404\\n\"\n    }\n}\n\nfunc assertIsAdmin(address std.Address) {\n    if address != admin {\n        panic(\"restricted access\")\n    }\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApG+L9WvD3TJKSYknSaEL7uGAX77yqJWoa71BK9cRGwa"},"signature":"ZgeDxt4MurECvud39zJwbdtqXH//hsW6sJZpxq0KEgBohkPYUUGW41YSWNH7dba57631ClmwpTPsdDWSyqNO/w=="}],"memo":"Deployed through play.gno.land"},"blockNum":"301778"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1ayxdpq5jzqrkedjp57xvdhvf9g6jjwhxt5wn2f","send":"","pkg_path":"gno.land/r/demo2/mouss","func":"Transfer","args":["g1v664qx78zhv2edtx6ypdylfpafrqjz8g2rlaea","10000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ApG+L9WvD3TJKSYknSaEL7uGAX77yqJWoa71BK9cRGwa"},"signature":"2uWnNfc0cm6d1UWxtJPX5p6FgffQJC6syr/lXyLl5nJ3Or4i3HXXHVG3iI/YyIjhkSzhXdsxj67g2EqX9mQ5hQ=="}],"memo":""},"blockNum":"301783"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/boom/boom","func":"TotalSupply","args":null}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"cUKyys021XMFAPgziMyvh6qGXlByu1n4t167hCceaTpdG07FHO0ffj/KfaG7gyobQ388KP0Dl3q1woMhEdxirg=="}],"memo":"Called through gno.studio"},"blockNum":"301850"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/boom/boom","func":"BalanceOf","args":["g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"N7YZeiU0xHAe5oiPPsP0oXv29a57g7MtCn3G+J5vT9IFx4dWsQG65RS/N2NG1rnEbirCSQbw/kid5ixmfJpjVg=="}],"memo":"Called through gno.studio"},"blockNum":"301852"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","package":{"Name":"leon_token","Path":"gno.land/r/leon/leon_token","Files":[{"Name":"package.gno","Body":"package mytoken\n\nimport (\n\n\t\"std\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tmytoken *grc20.AdminToken\n\to       *ownable.Ownable // ownable object to store token admin\n)\n\n// init is called once at time of deployment\nfunc init() {\n\t// create new ownable object, set admin as deployer\n\to = ownable.New()\n\n\t// provision the token's name, symbol and number of decimals\n\tmytoken = grc20.NewAdminToken(\"Leon Token\", \"LEON\", 4)\n\n\t// mint 1 million tokens to admin\n\tmytoken.Mint(admin, 1000000*10^4)\n}\n\nfunc TotalSupply() uint64 {\n\treturn mytoken.TotalSupply()\n}\n\nfunc BalanceOf(account std.Address) uint64 {\n\tbalance, err := mytoken.BalanceOf(account)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc Allowance(owner, spender std.Address) uint64 {\n\tallowance, err := mytoken.Allowance(owner, spender)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn allowance\n}\n\nfunc Transfer(recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Transfer(caller, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Approve(spender std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Approve(caller, spender, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(from, to std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.TransferFrom(caller, from, to, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Mint(address std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := o.CallerIsOwner(); err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := mytoken.Mint(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(address std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := o.CallerIsOwner(); err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := mytoken.Burn(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn mytoken.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := std.Address(parts[1])\n\t\tbalance, _ := mytoken.BalanceOf(owner)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4vbt/RTXs3UWUQZdg7W6glviY2ighS0MzoQ/HOb53Wy"},"signature":"l2H9YjRNP+2EBCYxQZ1dZTDPy8fAQWIquEm8CMIdi0U6YGGp7rGUeP5WoB1KssTEvYZ8hmiu1qUStVFmFUuDlA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"301901"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","package":{"Name":"leon_token","Path":"gno.land/r/leon/leon_token","Files":[{"Name":"package.gno","Body":"package leon_token\n\nimport (\n\n\t\"std\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tmytoken *grc20.AdminToken\n\to       *ownable.Ownable // ownable object to store token admin\n)\n\n// init is called once at time of deployment\nfunc init() {\n\t// create new ownable object, set admin as deployer\n\to = ownable.New()\n\n\t// provision the token's name, symbol and number of decimals\n\tmytoken = grc20.NewAdminToken(\"Leon Token\", \"LEON\", 4)\n\n\t// mint 1 million tokens to admin\n\tmytoken.Mint(admin, 1000000*10^4)\n}\n\nfunc TotalSupply() uint64 {\n\treturn mytoken.TotalSupply()\n}\n\nfunc BalanceOf(account std.Address) uint64 {\n\tbalance, err := mytoken.BalanceOf(account)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc Allowance(owner, spender std.Address) uint64 {\n\tallowance, err := mytoken.Allowance(owner, spender)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn allowance\n}\n\nfunc Transfer(recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Transfer(caller, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Approve(spender std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Approve(caller, spender, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(from, to std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.TransferFrom(caller, from, to, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Mint(address std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := o.CallerIsOwner(); err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := mytoken.Mint(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(address std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := o.CallerIsOwner(); err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := mytoken.Burn(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn mytoken.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := std.Address(parts[1])\n\t\tbalance, _ := mytoken.BalanceOf(owner)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4vbt/RTXs3UWUQZdg7W6glviY2ighS0MzoQ/HOb53Wy"},"signature":"OcdcKyV6WbchjdXNlz1PSYR4+B9HA7TsnvR+6Hjsfzs9NdWSWXMWgItQOeCs2IlLjVdC9g5iwdSpLxevyhmKTA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"301903"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","package":{"Name":"ownable","Path":"gno.land/p/demo/ownable","Files":[{"Name":"errors.gno","Body":"package ownable\n\nimport \"errors\"\n\nvar (\n\tErrUnauthorized   = errors.New(\"unauthorized; caller is not owner\")\n\tErrInvalidAddress = errors.New(\"new owner address is invalid\")\n)\n"},{"Name":"gno.mod","Body":"module gno.land/p/demo/ownable\n"},{"Name":"ownable.gno","Body":"package ownable\n\nimport (\n\t\"std\"\n)\n\n// Ownable is meant to be used as a top-level object to make your contract ownable OR\n// being embedded in a Gno object to manage per-object ownership.\ntype Ownable struct {\n\towner std.Address\n}\n\nfunc New() *Ownable {\n\treturn \u0026Ownable{\n\t\towner: std.GetOrigCaller(),\n\t}\n}\n\n// TransferOwnership transfers ownership of the Ownable struct to a new address\nfunc (o *Ownable) TransferOwnership(newOwner std.Address) error {\n\terr := o.CallerIsOwner()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif !newOwner.IsValid() {\n\t\treturn ErrInvalidAddress\n\t}\n\n\to.owner = newOwner\n\treturn nil\n}\n\n// DropOwnership removes the owner, effectively disabling any owner-related actions\n// Top-level usage: disables all only-owner actions/functions,\n// Embedded usage: behaves like a burn functionality, removing the owner from the struct\nfunc (o *Ownable) DropOwnership() error {\n\terr := o.CallerIsOwner()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\to.owner = \"\"\n\treturn nil\n}\n\n// CallerIsOwner checks if the caller of the function is the Realm's owner\nfunc (o *Ownable) CallerIsOwner() error {\n\tif std.GetOrigCaller() == o.owner {\n\t\treturn nil\n\t}\n\treturn ErrUnauthorized\n}\n\nfunc (o *Ownable) Owner() std.Address {\n\treturn o.owner\n}\n"},{"Name":"ownable_test.gno","Body":"package ownable\n\nimport (\n\t\"std\"\n\t\"testing\"\n)\n\nvar (\n\tfirstCaller  = std.Address(\"g1l9aypkr8xfvs82zeux486ddzec88ty69lue9de\")\n\tsecondCaller = std.Address(\"g127jydsh6cms3lrtdenydxsckh23a8d6emqcvfa\")\n)\n\nfunc TestNew(t *testing.T) {\n\tstd.TestSetOrigCaller(firstCaller)\n\n\tresult := New()\n\tif firstCaller != result.owner {\n\t\tt.Fatalf(\"Expected %s, got: %s\\n\", firstCaller, result.owner)\n\t}\n}\n\nfunc TestOwner(t *testing.T) {\n\tstd.TestSetOrigCaller(firstCaller)\n\n\tresult := New()\n\tresultOwner := result.Owner()\n\n\texpected := firstCaller\n\tif resultOwner != expected {\n\t\tt.Fatalf(\"Expected %s, got: %s\\n\", expected, result)\n\t}\n}\n\nfunc TestTransferOwnership(t *testing.T) {\n\tstd.TestSetOrigCaller(firstCaller)\n\to := New()\n\n\terr := o.TransferOwnership(secondCaller)\n\tif err != nil {\n\t\tt.Fatalf(\"TransferOwnership failed, %v\", err)\n\t}\n\n\tresult := o.Owner()\n\tif secondCaller != result {\n\t\tt.Fatalf(\"Expected: %s, got: %s\\n\", secondCaller, result)\n\t}\n}\n\nfunc TestCallerIsOwner(t *testing.T) {\n\tstd.TestSetOrigCaller(firstCaller)\n\n\to := New()\n\tunauthorizedCaller := secondCaller\n\n\tstd.TestSetOrigCaller(unauthorizedCaller)\n\n\terr := o.CallerIsOwner()\n\tif err == nil {\n\t\tt.Fatalf(\"Expected %s to not be owner\\n\", unauthorizedCaller)\n\t}\n}\n\nfunc TestDropOwnership(t *testing.T) {\n\tstd.TestSetOrigCaller(firstCaller)\n\n\to := New()\n\n\terr := o.DropOwnership()\n\tif err != nil {\n\t\tt.Fatalf(\"DropOwnership failed, %v\", err)\n\t}\n\n\towner := o.Owner()\n\tif owner != \"\" {\n\t\tt.Fatalf(\"Expected owner to be empty, not %s\\n\", owner)\n\t}\n}\n\n// Errors\n\nfunc TestErrUnauthorized(t *testing.T) {\n\tstd.TestSetOrigCaller(firstCaller)\n\n\to := New()\n\n\tstd.TestSetOrigCaller(secondCaller)\n\n\terr := o.TransferOwnership(firstCaller)\n\tif err != ErrUnauthorized {\n\t\tt.Fatalf(\"Should've been ErrUnauthorized, was %v\", err)\n\t}\n\n\terr = o.DropOwnership()\n\tif err != ErrUnauthorized {\n\t\tt.Fatalf(\"Should've been ErrUnauthorized, was %v\", err)\n\t}\n}\n\nfunc TestErrInvalidAddress(t *testing.T) {\n\tstd.TestSetOrigCaller(firstCaller)\n\n\to := New()\n\n\terr := o.TransferOwnership(\"\")\n\tif err != ErrInvalidAddress {\n\t\tt.Fatalf(\"Should've been ErrInvalidAddress, was %v\", err)\n\t}\n\n\terr = o.TransferOwnership(\"10000000001000000000100000000010000000001000000000\")\n\tif err != ErrInvalidAddress {\n\t\tt.Fatalf(\"Should've been ErrInvalidAddress, was %v\", err)\n\t}\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"1000000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A4vbt/RTXs3UWUQZdg7W6glviY2ighS0MzoQ/HOb53Wy"},"signature":"WBZUtpQ9RCN82qSidpV8xwSQi/VG+JnzZIDJf+NJwvED3n9aM0xZoCdHhj6suIJRs/URGfelTmxZV+Zbaf9rXw=="}],"memo":""},"blockNum":"301925"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"u3oM/Eax0Ab+tb007e9O/U4BOAwatY6SdIARAinX8vVdymcsb392O+nbwEOT4Jpuoo8y6EM8bEwYrcSEEQfQNQ=="}],"memo":""},"blockNum":"301943"}
