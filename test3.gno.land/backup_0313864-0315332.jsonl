{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","package":{"Name":"tokenPop","Path":"gno.land/r/tokenPop/tokenPop","Files":[{"Name":"package.gno","Body":"import (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tmytoken *grc20.AdminToken\n\tadmin   std.Address\n)\n\n// init is called once at time of deployment\nfunc init() {\n    // Set deployer of Realm to admin \n    admin = std.PrevRealm().Addr()\n\n    // Set token name, symbol and number of decimals\n    mytoken = grc20.NewAdminToken(\"My Token\", \"TKN\", 4)\n\n    // Mint 1 million tokens to admin\n    mytoken.Mint(admin, 1000000*10000)\n}\n\nfunc TotalSupply() uint64 {\n\treturn mytoken.TotalSupply()\n}\n\nfunc Decimals() uint {\n\treturn mytoken.GetDecimals()\n}\n\nfunc BalanceOf(account std.Address) uint64 {\n\tbalance, err := mytoken.BalanceOf(account)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc Allowance(owner, spender std.Address) uint64 {\n\tallowance, err := mytoken.Allowance(owner, spender)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn allowance\n}\n\nfunc Transfer(recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Transfer(caller, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Approve(spender std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Approve(caller, spender, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(from, to std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.TransferFrom(caller, from, to, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Mint(address std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\n\tif err := mytoken.Mint(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(address std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\n\tif err := mytoken.Burn(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn mytoken.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := std.Address(parts[1])\n\t\tbalance, _ := mytoken.BalanceOf(owner)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"FAqgDks6T/qKEZ+9obv3IMJFxczD9QPnQ3JuFb67GZVsedA/j5xsllpEtA6n79bg64jsrvDfb77e5/bHSblR7w=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314177"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","package":{"Name":"tokenPop","Path":"gno.land/r/tokenPop/tokenPop","Files":[{"Name":"package.gno","Body":"package tokenPop\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tmytoken *grc20.AdminToken\n\tadmin   std.Address\n)\n\n// init is called once at time of deployment\nfunc init() {\n    // Set deployer of Realm to admin \n    admin = std.PrevRealm().Addr()\n\n    // Set token name, symbol and number of decimals\n    mytoken = grc20.NewAdminToken(\"My Token\", \"TKN\", 4)\n\n    // Mint 1 million tokens to admin\n    mytoken.Mint(admin, 1000000*10000)\n}\n\nfunc TotalSupply() uint64 {\n\treturn mytoken.TotalSupply()\n}\n\nfunc Decimals() uint {\n\treturn mytoken.GetDecimals()\n}\n\nfunc BalanceOf(account std.Address) uint64 {\n\tbalance, err := mytoken.BalanceOf(account)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc Allowance(owner, spender std.Address) uint64 {\n\tallowance, err := mytoken.Allowance(owner, spender)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn allowance\n}\n\nfunc Transfer(recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Transfer(caller, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Approve(spender std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Approve(caller, spender, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(from, to std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.TransferFrom(caller, from, to, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Mint(address std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\n\tif err := mytoken.Mint(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(address std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\n\tif err := mytoken.Burn(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn mytoken.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := std.Address(parts[1])\n\t\tbalance, _ := mytoken.BalanceOf(owner)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"x8BsnNbCjZPOCIDOunnmt2wKSm/EvWYwtQmsEUK/lfJhAOKEo4jIuiJc5gqasjlPM9vbN0xB2tctpo2sSbF9Tw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314179"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","package":{"Name":"tokenno","Path":"gno.land/r/tokenno/tokenno","Files":[{"Name":"package.gno","Body":"package tokenno\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tmytoken *grc20.AdminToken\n\tadmin   std.Address\n)\n\n// init is called once at time of deployment\nfunc init() {\n    // Set deployer of Realm to admin \n    admin = std.PrevRealm().Addr()\n\n    // Set token name, symbol and number of decimals\n    mytoken = grc20.NewAdminToken(\"My Token\", \"TKN\", 4)\n\n    // Mint 1 million tokens to admin\n    mytoken.Mint(admin, 1000000*10000)\n}\n\nfunc TotalSupply() uint64 {\n\treturn mytoken.TotalSupply()\n}\n\nfunc Decimals() uint {\n\treturn mytoken.GetDecimals()\n}\n\nfunc BalanceOf(account std.Address) uint64 {\n\tbalance, err := mytoken.BalanceOf(account)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc Allowance(owner, spender std.Address) uint64 {\n\tallowance, err := mytoken.Allowance(owner, spender)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn allowance\n}\n\nfunc Transfer(recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Transfer(caller, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Approve(spender std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Approve(caller, spender, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(from, to std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.TransferFrom(caller, from, to, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Mint(address std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\n\tif err := mytoken.Mint(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(address std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\n\tif err := mytoken.Burn(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn mytoken.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := std.Address(parts[1])\n\t\tbalance, _ := mytoken.BalanceOf(owner)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"LE+XDOJ8pfmKIWSCLJu+itPbrcpnV3CwjtYWxGYmTCB4o9tmGJ3G4aI04E+A1d0Y8rXeBJTH1gsuktsJgkECoQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314181"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"iq0+yAQf/fj1paErDX3nse7X85kcqfr3oBHMs/PZanMcf7E2qa9J4N7Ay1q/g/0LtOJl0Su5xGuBK7BJkLJiFw=="}],"memo":""},"blockNum":"314186"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","package":{"Name":"tokenno","Path":"gno.land/r/tokenno/tokenno","Files":[{"Name":"package.gno","Body":"package tokenno\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tmytoken *grc20.AdminToken\n\tadmin   std.Address\n)\n\n// init is called once at time of deployment\nfunc init() {\n    // Set deployer of Realm to admin \n    admin = std.PrevRealm().Addr()\n\n    // Set token name, symbol and number of decimals\n    mytoken = grc20.NewAdminToken(\"My Token\", \"TKN\", 4)\n\n    // Mint 1 million tokens to admin\n    mytoken.Mint(admin, 1000000*10000)\n}\n\nfunc TotalSupply() uint64 {\n\treturn mytoken.TotalSupply()\n}\n\nfunc Decimals() uint {\n\treturn mytoken.GetDecimals()\n}\n\nfunc BalanceOf(account std.Address) uint64 {\n\tbalance, err := mytoken.BalanceOf(account)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc Allowance(owner, spender std.Address) uint64 {\n\tallowance, err := mytoken.Allowance(owner, spender)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn allowance\n}\n\nfunc Transfer(recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Transfer(caller, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Approve(spender std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Approve(caller, spender, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(from, to std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.TransferFrom(caller, from, to, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Mint(address std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\n\tif err := mytoken.Mint(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(address std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\n\tif err := mytoken.Burn(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn mytoken.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := std.Address(parts[1])\n\t\tbalance, _ := mytoken.BalanceOf(owner)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"62TktjCuXq5KBrnQEhSV8ec8iW/z+9Tesg/od1XYYB42DjVcdE4wFumgJZ2C4gjCeLXIjA5y20Vdvl0vTvoSpw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314189"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","package":{"Name":"tokenno","Path":"gno.land/r/tokenno/tokenno","Files":[{"Name":"package.gno","Body":"import (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tmytoken *grc20.AdminToken\n\tadmin   std.Address\n)\n\n// init is called once at time of deployment\nfunc init() {\n    // Set deployer of Realm to admin \n    admin = std.PrevRealm().Addr()\n\n    // Set token name, symbol and number of decimals\n    mytoken = grc20.NewAdminToken(\"My Token\", \"TKN\", 4)\n\n    // Mint 1 million tokens to admin\n    mytoken.Mint(admin, 1000000*10000)\n}\n\nfunc TotalSupply() uint64 {\n\treturn mytoken.TotalSupply()\n}\n\nfunc Decimals() uint {\n\treturn mytoken.GetDecimals()\n}\n\nfunc BalanceOf(account std.Address) uint64 {\n\tbalance, err := mytoken.BalanceOf(account)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc Allowance(owner, spender std.Address) uint64 {\n\tallowance, err := mytoken.Allowance(owner, spender)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn allowance\n}\n\nfunc Transfer(recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Transfer(caller, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Approve(spender std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Approve(caller, spender, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(from, to std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.TransferFrom(caller, from, to, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Mint(address std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\n\tif err := mytoken.Mint(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(address std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\n\tif err := mytoken.Burn(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn mytoken.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := std.Address(parts[1])\n\t\tbalance, _ := mytoken.BalanceOf(owner)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"mtAsc6C/9CiD/5zqL/eLASBma1yDKrKv89lKI6A79clzACpIUxq5dtIJxHBHm+4c3/OoNe9VvcKiYNCH7irCzw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314193"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","package":{"Name":"tokenno","Path":"gno.land/r/tokenno/tokenno","Files":[{"Name":"package.gno","Body":"package tokenno\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tmytoken *grc20.AdminToken\n\tadmin   std.Address\n)\n\n// init is called once at time of deployment\nfunc init() {\n    // Set deployer of Realm to admin \n    admin = std.PrevRealm().Addr()\n\n    // Set token name, symbol and number of decimals\n    mytoken = grc20.NewAdminToken(\"My Token\", \"TKN\", 4)\n\n    // Mint 1 million tokens to admin\n    mytoken.Mint(admin, 1000000*10000)\n}\n\nfunc TotalSupply() uint64 {\n\treturn mytoken.TotalSupply()\n}\n\nfunc Decimals() uint {\n\treturn mytoken.GetDecimals()\n}\n\nfunc BalanceOf(account std.Address) uint64 {\n\tbalance, err := mytoken.BalanceOf(account)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc Allowance(owner, spender std.Address) uint64 {\n\tallowance, err := mytoken.Allowance(owner, spender)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn allowance\n}\n\nfunc Transfer(recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Transfer(caller, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Approve(spender std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Approve(caller, spender, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(from, to std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.TransferFrom(caller, from, to, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Mint(address std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\n\tif err := mytoken.Mint(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(address std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\n\tif err := mytoken.Burn(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn mytoken.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := std.Address(parts[1])\n\t\tbalance, _ := mytoken.BalanceOf(owner)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"gX65/wy1E1BIKs+9sOoejlg+q/atIpkEnmCo3l0QUvZtz+pCEAsUAjWZL5196cjK26rfe9XB7OGBNtpr4utZ4w=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314195"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","package":{"Name":"tokenpl","Path":"gno.land/r/tokenpl/tokenpl","Files":[{"Name":"package.gno","Body":"package tokenpl\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/users\"\n)\n\nvar (\n\tfoo  *grc20.AdminToken\n\tadmin std.Address = \"g1hqzeju0p0eup9rgxa0pxvyc0y7wnzjrdvppsy5\"\n)\n\nfunc init() {\n\tfoo = grc20.NewAdminToken(\"FooToken\", \"FOO\", 6)\n\tfoo.Mint(admin, 1000000000) // @administrator\n}\n\n// method proxies as public functions.\n//\n\n// getters.\n\nfunc TotalSupply() uint64 {\n\treturn foo.TotalSupply()\n}\n\nfunc BalanceOf(owner users.AddressOrName) uint64 {\n\tbalance, err := foo.BalanceOf(owner.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn balance\n}\n\nfunc Allowance(owner, spender users.AddressOrName) uint64 {\n\tallowance, err := foo.Allowance(owner.Resolve(), spender.Resolve())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treturn allowance\n}\n\n// setters.\n\nfunc Transfer(to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.Transfer(caller, to.Resolve(), amount)\n}\n\nfunc Approve(spender users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.Approve(caller, spender.Resolve(), amount)\n}\n\nfunc TransferFrom(from, to users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tfoo.TransferFrom(caller, from.Resolve(), to.Resolve(), amount)\n}\n\n// administration.\n\nfunc Mint(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tfoo.Mint(address.Resolve(), amount)\n}\n\nfunc Burn(address users.AddressOrName, amount uint64) {\n\tcaller := std.GetOrigCaller()\n\tassertIsAdmin(caller)\n\tfoo.Burn(address.Resolve(), amount)\n}\n\n// render.\n//\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn foo.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := users.AddressOrName(parts[1])\n\t\tbalance, _ := foo.BalanceOf(owner.Resolve())\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"AQQbBmwoyxDBwjXgbgNzzcpUIURPrEzRTm6Xe+s4Relfc8tFjBoDuCcMMM1Wx7i2rGXIOinz9GdO5uaBDh1pRw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314221"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","package":{"Name":"tokenpl","Path":"gno.land/r/tokenpl/tokenpl","Files":[{"Name":"package.gno","Body":"package tokenno\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tmytoken *grc20.AdminToken\n\tadmin   std.Address\n)\n\n// init is called once at time of deployment\nfunc init() {\n    // Set deployer of Realm to admin \n    admin = std.PrevRealm().Addr()\n\n    // Set token name, symbol and number of decimals\n    mytoken = grc20.NewAdminToken(\"My Token\", \"TKN\", 4)\n\n    // Mint 1 million tokens to admin\n    mytoken.Mint(admin, 1000000*10000)\n}\n\nfunc TotalSupply() uint64 {\n\treturn mytoken.TotalSupply()\n}\n\nfunc Decimals() uint {\n\treturn mytoken.GetDecimals()\n}\n\nfunc BalanceOf(account std.Address) uint64 {\n\tbalance, err := mytoken.BalanceOf(account)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc Allowance(owner, spender std.Address) uint64 {\n\tallowance, err := mytoken.Allowance(owner, spender)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn allowance\n}\n\nfunc Transfer(recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Transfer(caller, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Approve(spender std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Approve(caller, spender, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(from, to std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.TransferFrom(caller, from, to, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Mint(address std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\n\tif err := mytoken.Mint(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(address std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\n\tif err := mytoken.Burn(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn mytoken.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := std.Address(parts[1])\n\t\tbalance, _ := mytoken.BalanceOf(owner)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"CJPC083IVbaEEWFJtmQh9C74TwmLTzRjTbwPpK3AsZoIdFn4QJGuPrS8mEwkGDeKV06bSXgJrrSLSVD6UwJLIA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314228"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","package":{"Name":"tokenno","Path":"gno.land/r/tokenno/tokenno","Files":[{"Name":"package.gno","Body":"package tokenno\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/grc/grc20\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\nvar (\n\tmytoken *grc20.AdminToken\n\tadmin   std.Address\n)\n\n// init is called once at time of deployment\nfunc init() {\n    // Set deployer of Realm to admin \n    admin = std.PrevRealm().Addr()\n\n    // Set token name, symbol and number of decimals\n    mytoken = grc20.NewAdminToken(\"My Token\", \"TKN\", 4)\n\n    // Mint 1 million tokens to admin\n    mytoken.Mint(admin, 1000000*10000)\n}\n\nfunc TotalSupply() uint64 {\n\treturn mytoken.TotalSupply()\n}\n\nfunc Decimals() uint {\n\treturn mytoken.GetDecimals()\n}\n\nfunc BalanceOf(account std.Address) uint64 {\n\tbalance, err := mytoken.BalanceOf(account)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn balance\n}\n\nfunc Allowance(owner, spender std.Address) uint64 {\n\tallowance, err := mytoken.Allowance(owner, spender)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn allowance\n}\n\nfunc Transfer(recipient std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Transfer(caller, recipient, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Approve(spender std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.Approve(caller, spender, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc TransferFrom(from, to std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tif err := mytoken.TransferFrom(caller, from, to, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Mint(address std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\n\tif err := mytoken.Mint(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc Burn(address std.Address, amount uint64) {\n\tcaller := std.PrevRealm().Addr()\n\tassertIsAdmin(caller)\n\n\tif err := mytoken.Burn(address, amount); err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc assertIsAdmin(address std.Address) {\n\tif address != admin {\n\t\tpanic(\"restricted access\")\n\t}\n}\n\nfunc Render(path string) string {\n\tparts := strings.Split(path, \"/\")\n\tc := len(parts)\n\n\tswitch {\n\tcase path == \"\":\n\t\treturn mytoken.RenderHome()\n\tcase c == 2 \u0026\u0026 parts[0] == \"balance\":\n\t\towner := std.Address(parts[1])\n\t\tbalance, _ := mytoken.BalanceOf(owner)\n\t\treturn ufmt.Sprintf(\"%d\\n\", balance)\n\tdefault:\n\t\treturn \"404\\n\"\n\t}\n}\n\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"oSa7TyZKO7+VyEjWWSWa+lKqZykD+ylbsvhx5aOa3RJ+xyL0QSg3bNzrYd2AA+aH/HS9f9+Z7s0XofL2FJx0oA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314230"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1fsu3z335h5qngf7t3lmakvpmpwg9ae76tqwh7c","send":"","pkg_path":"gno.land/r/test10/poll","func":"Vote","args":["k"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"ArpuZWPhPhGbXRDOr5vjwl7Ro++55QZaJ7/jUUbkpMHK"},"signature":"/hOXDn4hkWDQgJ22UPT0lkI1U3hlO7ktde6YVyYRuP9WJgxkPhG7pSg97iPLIoL5cvTF6bSmzQ2kxNcvU7uUTw=="}],"memo":"Called through gno.studio"},"blockNum":"314773"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1jw75rtf0999sefv8p9as92cuekppzp4ny9ej8c","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"i1vx+VNFpHQZSKBvfy1/ccccUCzBZt9MVnOcMD1wFud9uZwBMj0WtDY19v1Nql8ypdfY7tHQRuntYsw7Uqet1g=="}],"memo":""},"blockNum":"314841"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jw75rtf0999sefv8p9as92cuekppzp4ny9ej8c","package":{"Name":"helloworld","Path":"gno.land/r/planb/helloworld","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnLCliRLT2Ma4aUX0I5JAIN1Ancq8PK3O+rb0FbWXqlB"},"signature":"2OIR4hm5mbljiKesVgZl9oV0Rb5m8ThDa3KLgTNjJQxcGYLiOBMc1myZ7mu2XPcKwimpMBIrhOctwtHVXAUOKA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314843"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1jw75rtf0999sefv8p9as92cuekppzp4ny9ej8c","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"DO3p1erca121kaPPy4XDUgrecpFz0EZEVdAwwFnK4elNycRDwXPCJDoBT9nHxzs5PEZ/FqOOYsgbrDAFtZ4Vxw=="}],"memo":""},"blockNum":"314845"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jw75rtf0999sefv8p9as92cuekppzp4ny9ej8c","package":{"Name":"helloworld","Path":"gno.land/r/planb/helloworld","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnLCliRLT2Ma4aUX0I5JAIN1Ancq8PK3O+rb0FbWXqlB"},"signature":"Mq8SRVjyYrikVfngc7DzKTkHHscThVq65+v4POGcNbZiqNVBmAf7WqnugZGmb3iY8t/31wYL+osVjttbtqJB/A=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314847"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1jw75rtf0999sefv8p9as92cuekppzp4ny9ej8c","package":{"Name":"hello","Path":"gno.land/r/planb/hello","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnLCliRLT2Ma4aUX0I5JAIN1Ancq8PK3O+rb0FbWXqlB"},"signature":"GRtvDhqmtY8vHz+4+v5D+1Znuu5/ScgbRvcstneAFz4bnIiHTgsLkjA1U7mmb1bPkmcUx4yypYyYoP+qnl6Cyg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314849"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yklpamkeke8fczgk6a4n6hj79kv3mhkrv0ajzp","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"sv1lpNnJrUgpJza1zZj51LfPYZh3ymimRHhFF8cI+Yd35lRX4TRBY7DY7U7kDECxF4rYyz0aNeCiMX9DB48p3g=="}],"memo":""},"blockNum":"314899"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1yklpamkeke8fczgk6a4n6hj79kv3mhkrv0ajzp","package":{"Name":"test","Path":"gno.land/r/defianon/test","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyxU2YWXh0DW0SSlUrcwnpqgXk6NxxKRzzQxQSDU6iAK"},"signature":"IYCu7syagKxORIG9vvsEMO3n5R5wseGiGk9tJxepE/F8DCBz2ZK/pLnxQB0DlnvPYqqUkaRLWryHJC9F7azZYA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314901"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yklpamkeke8fczgk6a4n6hj79kv3mhkrv0ajzp","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"k2/CeMm0JazHG7WfgV1nAO2V9jkSWjg8VuMLhNEtaAo7RoBF576jGCrPuxR8YfTO2/PHKAZzmc0w6JVOmV7hfA=="}],"memo":""},"blockNum":"314903"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1yklpamkeke8fczgk6a4n6hj79kv3mhkrv0ajzp","package":{"Name":"test","Path":"gno.land/r/defianon/test","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyxU2YWXh0DW0SSlUrcwnpqgXk6NxxKRzzQxQSDU6iAK"},"signature":"mCB//b/STcLSDfKDQfYOuJXofP/XXv/ufQ/q/unn0TN8yTtDRhTNjLDz4RZRsIDDHVQJUlRtcpq/leSFrT56+g=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314905"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1yklpamkeke8fczgk6a4n6hj79kv3mhkrv0ajzp","package":{"Name":"test","Path":"gno.land/r/defianon/test","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyxU2YWXh0DW0SSlUrcwnpqgXk6NxxKRzzQxQSDU6iAK"},"signature":"OI1pjt2vrG8QsSjTA/o5YkOcwigNTBWlJqbo/cJbBflAnnTzO6x00UKPvUoQMIrt8ZOij9sb2T9FIhXRPqDQog=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314907"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1yklpamkeke8fczgk6a4n6hj79kv3mhkrv0ajzp","package":{"Name":"test","Path":"gno.land/r/defianon/test","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyxU2YWXh0DW0SSlUrcwnpqgXk6NxxKRzzQxQSDU6iAK"},"signature":"gVOpw83jYXbuvK05YOGjk0niiT9nR0YJI00aE2XtuEF3Ixfy9x8SCv/3mRT9gHMsBqt8veWmM1DAQmYx65d30Q=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314909"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1yklpamkeke8fczgk6a4n6hj79kv3mhkrv0ajzp","package":{"Name":"test","Path":"gno.land/r/defianon/test","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyxU2YWXh0DW0SSlUrcwnpqgXk6NxxKRzzQxQSDU6iAK"},"signature":"VcjoiM2LLQpvlYxPrBHc4zl4X5VxGLd+JK97c1JNZ4wgppefXVUmqIYu32wV0kWFBtv77jb4gCraBhnppzoR/A=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314911"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1yklpamkeke8fczgk6a4n6hj79kv3mhkrv0ajzp","package":{"Name":"firsttry","Path":"gno.land/r/defianon/firsttry","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyxU2YWXh0DW0SSlUrcwnpqgXk6NxxKRzzQxQSDU6iAK"},"signature":"mzAbedMVqQfk6ljjBz7ujpRNV5pXbL4z/g5oOzHsJa0fXZal8Ej/2InlEWeHxXrRa6avX3NwJoKLtyzepbK7EA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314913"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1yklpamkeke8fczgk6a4n6hj79kv3mhkrv0ajzp","package":{"Name":"testing","Path":"gno.land/r/defianon/testing","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyxU2YWXh0DW0SSlUrcwnpqgXk6NxxKRzzQxQSDU6iAK"},"signature":"xC6NY1Djhcvx3lDDc402mW4w06kuydZVpFrshZZMlU9amZw2HrNleF+1tHVvlUKThoky29mmMuXcS9n91/QWYg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314915"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1yklpamkeke8fczgk6a4n6hj79kv3mhkrv0ajzp","package":{"Name":"net3","Path":"gno.land/r/defianon/net3","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyxU2YWXh0DW0SSlUrcwnpqgXk6NxxKRzzQxQSDU6iAK"},"signature":"GlhcKQIMYHqHkG+QGTy+pJ+ZP9oGRUJhz34ZQu1ySXJUDqTr9Sbpq6udGRKKPtP+oIlBfFCepF2MxhOkyDA0GA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314917"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1yklpamkeke8fczgk6a4n6hj79kv3mhkrv0ajzp","package":{"Name":"posted","Path":"gno.land/r/defianon/posted","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AyxU2YWXh0DW0SSlUrcwnpqgXk6NxxKRzzQxQSDU6iAK"},"signature":"zR1b6HA2wCWRfAXygGE8SHQPC4OcUCV5tV5VUowRm2xYMl1j1ugi42Cm5EOUIOpGaWLCPP0Hp7AGnduVRoVqcw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314919"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g130g97u00ayr3gjr38w5qpf4he7xku8kszwe26y","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"DzRodeaC/KAEAaX1y6fMnFqJ2c+sxVW4Gtg2o+Ez/RxnkrJE6haZbYsIaPwQcKcHvDTRed0ekKDvR4EVclIwgA=="}],"memo":""},"blockNum":"314931"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g130g97u00ayr3gjr38w5qpf4he7xku8kszwe26y","package":{"Name":"bv","Path":"gno.land/r/32/bv","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9qrusMQFIDdLNttvkGh7qxDNZfcZFxbdDpBkzXDKEOt"},"signature":"sYrNpzjJbyGhff2h98TOuud+5b3wecz8kOrCuFarTxUKDwgR1FIVsXcx/Ebn8rK2t2eMZ8NwD+/CPIGBrLY/2A=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314933"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g130g97u00ayr3gjr38w5qpf4he7xku8kszwe26y","package":{"Name":"bv","Path":"gno.land/r/32/bv","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9qrusMQFIDdLNttvkGh7qxDNZfcZFxbdDpBkzXDKEOt"},"signature":"yAyxiqvZ2DREcvcFrCyJqE8uijHOqNtgKSc4keK2S1sA6iRZhPopCR1adVAbb/tnSXNkkABZtyn8KBpS9cXgig=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314935"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g130g97u00ayr3gjr38w5qpf4he7xku8kszwe26y","package":{"Name":"bv","Path":"gno.land/r/32/bv","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9qrusMQFIDdLNttvkGh7qxDNZfcZFxbdDpBkzXDKEOt"},"signature":"1u9BG1OPbXsfCYkRYihZAsNVPO9IgrHQvIouZe8CEWcLho4ye49YlrxuLhucVCFd0NDVie7td4IgrGtypmDK6g=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314937"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g130g97u00ayr3gjr38w5qpf4he7xku8kszwe26y","package":{"Name":"bv","Path":"gno.land/r/32/bv","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9qrusMQFIDdLNttvkGh7qxDNZfcZFxbdDpBkzXDKEOt"},"signature":"pdyWkTS5LTI3yxVB9jZ8mZEYO92XseM+1mVzcey94IES4kyYvEVh+YQ1Dn6yxbWZu1bRAsGZTATKBmh1PXzKyA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314939"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g130g97u00ayr3gjr38w5qpf4he7xku8kszwe26y","package":{"Name":"bv","Path":"gno.land/r/32/bv","Files":[{"Name":"package.gno","Body":"package banktest\n\nimport (\n\t\"std\"\n\t\"time\"\n)\n\ntype activity struct {\n\tcaller   std.Address\n\tsent     std.Coins\n\treturned std.Coins\n\ttime     time.Time\n}\n\nfunc (act *activity) String() string {\n\treturn act.caller.String() + \" \" +\n\t\tact.sent.String() + \" sent, \" +\n\t\tact.returned.String() + \" returned, at \" +\n\t\tact.time.Format(\"2006-01-02 3:04pm MST\")\n}\n\nvar latest [10]*activity\n\n// Deposit will take the coins (to the realm's pkgaddr) or return them to user.\nfunc Deposit(returnDenom string, returnAmount int64) string {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tsend := std.Coins{{returnDenom, returnAmount}}\n\t// record activity\n\tact := \u0026activity{\n\t\tcaller:   caller,\n\t\tsent:     std.GetOrigSend(),\n\t\treturned: send,\n\t\ttime:     time.Now(),\n\t}\n\tfor i := len(latest) - 2; i \u003e= 0; i-- {\n\t\tlatest[i+1] = latest[i] // shift by +1.\n\t}\n\tlatest[0] = act\n\t// return if any.\n\tif returnAmount \u003e 0 {\n\t\tbanker := std.GetBanker(std.BankerTypeOrigSend)\n\t\tpkgaddr := std.GetOrigPkgAddr()\n\t\t// TODO: use std.Coins constructors, this isn't generally safe.\n\t\tbanker.SendCoins(pkgaddr, caller, send)\n\t\treturn \"returned!\"\n\t} else {\n\t\treturn \"thank you!\"\n\t}\n}\n\nfunc Render(path string) string {\n\t// get realm coins.\n\tbanker := std.GetBanker(std.BankerTypeReadonly)\n\tcoins := banker.GetCoins(std.GetOrigPkgAddr())\n\n\t// render\n\tres := \"\"\n\tres += \"## recent activity\\n\"\n\tres += \"\\n\"\n\tfor _, act := range latest {\n\t\tif act == nil {\n\t\t\tbreak\n\t\t}\n\t\tres += \" * \" + act.String() + \"\\n\"\n\t}\n\tres += \"\\n\"\n\tres += \"## total deposits\\n\"\n\tres += coins.String()\n\treturn res\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9qrusMQFIDdLNttvkGh7qxDNZfcZFxbdDpBkzXDKEOt"},"signature":"sams5nSJzOVhM7oqWMDcDzCaB8kDzYsXKwrbB6v823wz0TVKWAV5fjxUvVvyUVamul3Ua5WUw0hXTIsockIDZw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314942"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g130g97u00ayr3gjr38w5qpf4he7xku8kszwe26y","package":{"Name":"oiu","Path":"gno.land/r/ju/oiu","Files":[{"Name":"package.gno","Body":"package banktest\n\nimport (\n\t\"std\"\n\t\"time\"\n)\n\ntype activity struct {\n\tcaller   std.Address\n\tsent     std.Coins\n\treturned std.Coins\n\ttime     time.Time\n}\n\nfunc (act *activity) String() string {\n\treturn act.caller.String() + \" \" +\n\t\tact.sent.String() + \" sent, \" +\n\t\tact.returned.String() + \" returned, at \" +\n\t\tact.time.Format(\"2006-01-02 3:04pm MST\")\n}\n\nvar latest [10]*activity\n\n// Deposit will take the coins (to the realm's pkgaddr) or return them to user.\nfunc Deposit(returnDenom string, returnAmount int64) string {\n\tstd.AssertOriginCall()\n\tcaller := std.GetOrigCaller()\n\tsend := std.Coins{{returnDenom, returnAmount}}\n\t// record activity\n\tact := \u0026activity{\n\t\tcaller:   caller,\n\t\tsent:     std.GetOrigSend(),\n\t\treturned: send,\n\t\ttime:     time.Now(),\n\t}\n\tfor i := len(latest) - 2; i \u003e= 0; i-- {\n\t\tlatest[i+1] = latest[i] // shift by +1.\n\t}\n\tlatest[0] = act\n\t// return if any.\n\tif returnAmount \u003e 0 {\n\t\tbanker := std.GetBanker(std.BankerTypeOrigSend)\n\t\tpkgaddr := std.GetOrigPkgAddr()\n\t\t// TODO: use std.Coins constructors, this isn't generally safe.\n\t\tbanker.SendCoins(pkgaddr, caller, send)\n\t\treturn \"returned!\"\n\t} else {\n\t\treturn \"thank you!\"\n\t}\n}\n\nfunc Render(path string) string {\n\t// get realm coins.\n\tbanker := std.GetBanker(std.BankerTypeReadonly)\n\tcoins := banker.GetCoins(std.GetOrigPkgAddr())\n\n\t// render\n\tres := \"\"\n\tres += \"## recent activity\\n\"\n\tres += \"\\n\"\n\tfor _, act := range latest {\n\t\tif act == nil {\n\t\t\tbreak\n\t\t}\n\t\tres += \" * \" + act.String() + \"\\n\"\n\t}\n\tres += \"\\n\"\n\tres += \"## total deposits\\n\"\n\tres += coins.String()\n\treturn res\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A9qrusMQFIDdLNttvkGh7qxDNZfcZFxbdDpBkzXDKEOt"},"signature":"uLdk+ZiZiFcLElM3OaC+REBMQHVs6UAJb4vOnbx40v8Zp3xgqLvWycEpz/pCjag0QYuL4XfHsw9a8oDDoeKRBg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"314944"}
