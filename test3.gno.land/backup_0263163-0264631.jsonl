{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g16xd63pqpy3v8lzxr4qal7hqjxpp0uj6nevgsdv","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"uCTdWfgBbLRif01xw4rv8zPI9G10ECvTxAM/qDDBPs0v8106CCH6wzxN8ZGu9Zmz6cDCWzqGAdhKX/SbqnRkMg=="}],"memo":""},"blockNum":"263747"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1at2h7kdhz2m9lv6azn54mwu4wl95k94wu90uwj","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"GxNxFRJOns4SvJIbbK1CczvyaZOU2GK26le/NgGCO9sy8laRXSnpgU6JnpfdfKo4mHVC9ZkWCWtYLXgl+4SXqQ=="}],"memo":""},"blockNum":"263749"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1c5k6r9nlafv74uwlyewlplv9agquxhc5a3rrwx","to_address":"g1g9zd6qh7jvrmd0qdtrhj5pm6slyhcts544uzug","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"An86UixPacSCio4IgECsuqreZKHV03XCzt1TxqmxrHx3"},"signature":"5BnHiAyGVJC5oU46kDNmcUBBemjTfaYscTPZsLrF4T5p22GfyW7g2tubV0RZuWSvdTALfutvWmMboB4xwubw3w=="}],"memo":""},"blockNum":"264131"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1s3ngxp56v8w230qp4p9qf7memq6ra2x4x3zqsn","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"0IKYKwx4FLHet6kuS+zk3mQLBhZlwO3yPRNJOPvfqQRXcumE6XTnp8nYR+NKw76vnQ4WmkjSPqCpWErj9z2vjA=="}],"memo":""},"blockNum":"264230"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g14vxq5e5pt5sev7rkz2ej438scmxtylnzv5vnkw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"LjOZDM3eueqOGPWHChWuUeIaBK0KZHNKuYB6dYTofvFb36eJSkF5A/SDfGSrGtOnKwhidt1LLHIZxq2p3OwL/w=="}],"memo":""},"blockNum":"264232"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g14vhcdsyf83ngsrrqc92kmw8q9xakqjm0v8448t","send":"","pkg_path":"gno.land/r/demo/minter","func":"Mint","args":["g1d46t4el0dduffs5j56t2razaeyvnmkxlduduuw","ugnot","310000000"]}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgiTyNXOXskkkxKv2DXaDxFtabuTPHlltbYwCOBpHL3w"},"signature":"I60dxUKag9znDdpuzXAyYDPgB4IwubLFsBxaTPyV1WZwosl5pjHCscWPVkvPg/A9bPTSTpsdX34S+uMY4sVVVw=="}],"memo":""},"blockNum":"264239"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d46t4el0dduffs5j56t2razaeyvnmkxlduduuw","package":{"Name":"follow","Path":"gno.land/r/demo/follow","Files":[{"Name":"follow.gno","Body":"package follow\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\ntype User struct {\n\taddress std.Address\n\tfollowers avl.Tree\n\tfolloweds avl.Tree\n}\n\nvar (\n\taddr2User  avl.Tree // std.Address -\u003e *User\n)\n\nfunc getOrCreateUser(addr std.Address) *User {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif ok {\n\t\treturn userI.(*User)\n\t}\n\tuser := \u0026User{\n\t\taddress: addr,\n\t}\n\taddr2User.Set(addr.String(), user)\n\treturn user\n}\n\nfunc Follow(addr std.Address) {\n\t// get caller/inviter.\n\tcaller := std.GetOrigCaller()\n\tcallerUser := getOrCreateUser(caller)\n\tuser := getOrCreateUser(addr)\n\tcallerUser.followeds.Set(addr.String(), user)\n\tuser.followers.Set(caller.String(), callerUser)\n}\n\nfunc Unfollow(addr std.Address) {\n\t// get caller/inviter.\n\tcaller := std.GetOrigCaller()\n\tcallerUser := getOrCreateUser(caller)\n\tuser := getOrCreateUser(addr)\n\tif  _, ok := callerUser.followeds.Remove(addr.String()); !ok {\n\t\tpanic(\"followed not found\")\n\t}\n\tif _, ok := user.followers.Remove(caller.String()); !ok {\n\t\tpanic(\"follower not found\")\n\t}\n}\n\nfunc Followers(addr std.Address) []std.Address {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\tuser := userI.(*User)\n\tfollowers := make([]std.Address, 0, user.followers.Size())\n\tuser.followers.Iterate(\"\", \"\",  func(key string, value interface{}) bool  {\n\t\tfollower := value.(*User)\n\t\tfollowers = append(followers, follower.address)\n\t\treturn false\n\t})\n\treturn followers\n}\n\nfunc FollowedCount(addr std.Address) uint{\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn 0\n\t}\n\tuser := userI.(*User)\n\treturn uint(user.followeds.Size())\n}\n\nfunc Followed(addr std.Address) []std.Address {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\tuser := userI.(*User)\n\tfolloweds := make([]std.Address, 0, user.followeds.Size())\n\tuser.followeds.Iterate(\"\", \"\",  func(key string, value interface{}) bool  {\n\t\tfollowed := value.(*User)\n\t\tfolloweds = append(followeds, followed.address)\n\t\treturn false\n\t})\n\treturn followeds\n}\n\nfunc FollowersCount(addr std.Address) uint {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn 0\n\t}\n\tuser := userI.(*User)\n\treturn uint(user.followers.Size())\n}\n\nfunc IsFollower(follower std.Address, followed std.Address) bool {\n\tuserI, ok := addr2User.Get(followed.String())\n\tif !ok {\n\t\treturn false\n\t}\n\tuser := userI.(*User)\n\t_, ok = user.followers.Get(follower.String())\n\treturn ok\n}"},{"Name":"follow_test.gno","Body":"package follow\n\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n)\n\n\nfunc TestFollow_Follow(t *testing.T) {\n\tuser := testutils.TestAddress(\"user\")\n\tstd.TestSetOrigCaller(user)\n\t\n\n\tFollow(user)\n\tif c := FollowersCount(user); c != 1 {\n\t\tt.Fatalf(\"FollowersCount expected to have 1 has %d\", c)\n\t}\n\n\tif followers := Followers(user); followers[0].String() != string(user) {\n\t\tt.Fatalf(\"Followers expected to have %s has %s\", string(user), followers[0].String())\n\t}\n\n\tif followed := Followed(user); followed[0].String() != string(user) {\n\t\tt.Fatalf(\"Followed expected to have %s has %s\", followed[0].String())\n\t}\n}\n\nfunc TestFollow_UnFollow(t *testing.T) {\n\tcaller := std.GetOrigCaller()\n\tFollow(caller)\n\tUnfollow(caller)\n\tif c := FollowersCount(caller); c != 0 {\n\t\tt.Fatalf(\"expected to have 0 has %d\", c)\n\t}\n}\n\n\n"},{"Name":"gno.mod","Body":"module gno.land/r/demo/teritori/follow\n\nrequire gno.land/p/demo/avl v0.0.0-latest"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/dkVmfYUyUCFkPwIhahS4gblP3VmfLgpVByc8RVewD5"},"signature":"JxSuFl15S7unugzjfp3X8yssOlNH6RbeHRdPqQHmpLh27GDeqJ1nt4hkOIYHVlQFEGSN0K+bnY34w6z7W38bgw=="}],"memo":""},"blockNum":"264241"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d46t4el0dduffs5j56t2razaeyvnmkxlduduuw","package":{"Name":"follow","Path":"gno.land/r/demo/follow","Files":[{"Name":"follow.gno","Body":"package follow\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\ntype User struct {\n\taddress std.Address\n\tfollowers avl.Tree\n\tfolloweds avl.Tree\n}\n\nvar (\n\taddr2User  avl.Tree // std.Address -\u003e *User\n)\n\nfunc getOrCreateUser(addr std.Address) *User {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif ok {\n\t\treturn userI.(*User)\n\t}\n\tuser := \u0026User{\n\t\taddress: addr,\n\t}\n\taddr2User.Set(addr.String(), user)\n\treturn user\n}\n\nfunc Follow(addr std.Address) {\n\t// get caller/inviter.\n\tcaller := std.GetOrigCaller()\n\tcallerUser := getOrCreateUser(caller)\n\tuser := getOrCreateUser(addr)\n\tcallerUser.followeds.Set(addr.String(), user)\n\tuser.followers.Set(caller.String(), callerUser)\n}\n\nfunc Unfollow(addr std.Address) {\n\t// get caller/inviter.\n\tcaller := std.GetOrigCaller()\n\tcallerUser := getOrCreateUser(caller)\n\tuser := getOrCreateUser(addr)\n\tif  _, ok := callerUser.followeds.Remove(addr.String()); !ok {\n\t\tpanic(\"followed not found\")\n\t}\n\tif _, ok := user.followers.Remove(caller.String()); !ok {\n\t\tpanic(\"follower not found\")\n\t}\n}\n\nfunc Followers(addr std.Address) []std.Address {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\tuser := userI.(*User)\n\tfollowers := make([]std.Address, 0, user.followers.Size())\n\tuser.followers.Iterate(\"\", \"\",  func(key string, value interface{}) bool  {\n\t\tfollower := value.(*User)\n\t\tfollowers = append(followers, follower.address)\n\t\treturn false\n\t})\n\treturn followers\n}\n\nfunc FollowedCount(addr std.Address) uint{\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn 0\n\t}\n\tuser := userI.(*User)\n\treturn uint(user.followeds.Size())\n}\n\nfunc Followed(addr std.Address) []std.Address {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\tuser := userI.(*User)\n\tfolloweds := make([]std.Address, 0, user.followeds.Size())\n\tuser.followeds.Iterate(\"\", \"\",  func(key string, value interface{}) bool  {\n\t\tfollowed := value.(*User)\n\t\tfolloweds = append(followeds, followed.address)\n\t\treturn false\n\t})\n\treturn followeds\n}\n\nfunc FollowersCount(addr std.Address) uint {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn 0\n\t}\n\tuser := userI.(*User)\n\treturn uint(user.followers.Size())\n}\n\nfunc IsFollower(follower std.Address, followed std.Address) bool {\n\tuserI, ok := addr2User.Get(followed.String())\n\tif !ok {\n\t\treturn false\n\t}\n\tuser := userI.(*User)\n\t_, ok = user.followers.Get(follower.String())\n\treturn ok\n}"},{"Name":"follow_test.gno","Body":"package follow\n\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n)\n\n\nfunc TestFollow_Follow(t *testing.T) {\n\tuser := testutils.TestAddress(\"user\")\n\tstd.TestSetOrigCaller(user)\n\t\n\n\tFollow(user)\n\tif c := FollowersCount(user); c != 1 {\n\t\tt.Fatalf(\"FollowersCount expected to have 1 has %d\", c)\n\t}\n\n\tif followers := Followers(user); followers[0].String() != string(user) {\n\t\tt.Fatalf(\"Followers expected to have %s has %s\", string(user), followers[0].String())\n\t}\n\n\tif followed := Followed(user); followed[0].String() != string(user) {\n\t\tt.Fatalf(\"Followed expected to have %s has %s\", followed[0].String())\n\t}\n}\n\nfunc TestFollow_UnFollow(t *testing.T) {\n\tcaller := std.GetOrigCaller()\n\tFollow(caller)\n\tUnfollow(caller)\n\tif c := FollowersCount(caller); c != 0 {\n\t\tt.Fatalf(\"expected to have 0 has %d\", c)\n\t}\n}\n\n\n"},{"Name":"gno.mod","Body":"module gno.land/r/demo/teritori/follow\n\nrequire gno.land/p/demo/avl v0.0.0-latest"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/dkVmfYUyUCFkPwIhahS4gblP3VmfLgpVByc8RVewD5"},"signature":"fuRlp9U0Q8t65yY4tm9eAOmJlZTGflth1g9T7yeOWm0EuBXSAk7daBLOLyQn8L2ivOVKwN6129crqO0oxZdoXw=="}],"memo":""},"blockNum":"264244"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g14vxq5e5pt5sev7rkz2ej438scmxtylnzv5vnkw","package":{"Name":"follow","Path":"gno.land/r/demo/follow","Files":[{"Name":"follow.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\n\nvar users avl.Tree\n\n\n\nfunc Follow(addr std.Address) {\n\t\n\tif string(std.GetOrigCaller()) == string(addr) {\n\t\tpanic(\"You cannot follow yourself\")\n\t}\n\tcallerUser := getUser(std.GetOrigCaller())\n\tfollowedUser := getUser(addr)\n\n\tif _,ok:=callerUser.Following().Get(string(addr)); ok{\n\t\tpanic(\"You Already follow this user\")\n\t}\n\tcallerUser.Follow(followedUser)\n}\n\nfunc Unfollow(addr std.Address) {\n\tcallerUser := getUser(std.GetOrigCaller())\n\tif _,ok:=callerUser.Following().Get(string(addr)); !ok{\n\t\tpanic(\"You cannot unfollow a non followed user\")\n\t}\n\n\tunfollowedUser := getUser(addr)\n\n\tcallerUser.Unfollow(unfollowedUser)\n}\n\n\nfunc Followers(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Followers()\n\tres := make([]std.Address,0, followers.Size())\n\tfollowers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t\tres = append(res, data.(std.Address))\n\t\treturn false\n\t})\n\treturn res\n}\n\nfunc Followed(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Following()\n\tres := make([]std.Address, 0, followers.Size())\n\tfollowers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t\tres = append(res, data.(std.Address))\n\t\treturn false\n\t})\n\treturn res\n}\n\nfunc FollowersCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Followers().Size())\n}\n\nfunc FollowedCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Following().Size())\n}\n\nfunc IsFollower(follower std.Address, followed std.Address) bool {\n\t_, isFollower := getUser(follower).Following().Get(string(followed))\n\treturn isFollower\n}\n\nfunc getUser(addr std.Address) *User {\n\tuser,ok := users.Get(string(addr))\n\tif ok{\n\t\treturn user.(*User)\n\t}\n\tnewUser := NewUser(addr)\n\tusers.Set(string(addr), newUser)\n\treturn newUser\n}"},{"Name":"follow_test.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/testutils\"\n\t\"testing\"\n\t\"std\"\n)\n\nvar caller std.Address\nvar test2 std.Address\nfunc init() {\n\tcaller = testutils.TestAddress(\"testUser\") // main\n\ttest2 = testutils.TestAddress(\"test2\")\n\t// register as caller\n\tstd.TestSetOrigCaller(caller)\n}\n\nfunc TestFollow_Unfollow(t *testing.T) {\n\tusers = avl.Tree{}\n\n\tcount := FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"Initial followers != 0\")\n    }\n\t\n\tisFollower := IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower before follow\")\n    }\n\tFollow(test2)\n\n\tisFollower = IsFollower(caller, test2)\n\tif !isFollower{\n        t.Fatalf(\"Should be follower\")\n    }\n\tcount = FollowersCount(test2)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tcount = FollowedCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tcount = FollowedCount(caller)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tfollowers:=Followers(test2)\n\tif string(followers[0]) != string(caller) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tfollowed:=Followed(caller)\n\tif string(followed[0]) != string(test2) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tUnfollow(test2)\n\tcount = FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tisFollower = IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower after unfollow\")\n    }\n}\n\nfunc TestFollow_twice(t *testing.T) {\n\tusers = avl.Tree{}\n\ttest2 := testutils.TestAddress(\"test2\")\n\tdefer func() {\n        if r := recover(); r == nil {\n\t\t\tt.Fatalf(\"should've panic\")\n        }\n    }()\n\tcaller := std.GetOrigCaller() \n\tFollow(test2)\n\tFollow(test2)\n}"},{"Name":"user.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\ntype User struct{\n\tfollowing *avl.Tree\n\tfollowers *avl.Tree\n\taddress std.Address\n}\n\nfunc NewUser(address std.Address) *User {\n\treturn \u0026User{\n\t\tfollowing: \u0026avl.Tree{},\n\t\tfollowers: \u0026avl.Tree{},\n\t\taddress: address,\n\t}\n}\n\n\nfunc( user*User) Following() *avl.Tree{\n\treturn user.following\n}\n\nfunc( user*User) Followers() *avl.Tree{\n\treturn user.followers\n}\n\n\nfunc( user*User) Follow(followedUser *User) {\n\tfollowedUser.addFollower(user.Address())\n\tuser.follow(followedUser.Address())\n}\n\nfunc( user*User) Unfollow(followedUser *User) {\n\tuser.following.Remove(string(followedUser.Address()))\n\tfollowedUser.followers.Remove(string(user.Address()))\n}\n\nfunc( user*User) addFollower(addr std.Address){\n\tuser.followers.Set(string(addr), addr)\n}\n\nfunc( user*User) follow(addr std.Address){\n\tuser.following.Set(string(addr), addr)\n}\n\nfunc( user*User) Address() std.Address {\n\treturn  user.address\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhPbY6ETOcN5nEFZ1BJbZLVlOUbnlRBPmdFEUfnfWXGh"},"signature":"yc7XD22jSrsrnRVh/xSPmtBHLbcbOkA+rJKNquHhADosKOuKQXW1D61JyGvHIRCifNBge7ZRU1Fb7vxvczdivA=="}],"memo":""},"blockNum":"264247"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g14vxq5e5pt5sev7rkz2ej438scmxtylnzv5vnkw","package":{"Name":"follow","Path":"gno.land/p/demo/teritori/follow","Files":[{"Name":"follow.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\n\nvar users avl.Tree\n\n\n\nfunc Follow(addr std.Address) {\n\t\n\tif string(std.GetOrigCaller()) == string(addr) {\n\t\tpanic(\"You cannot follow yourself\")\n\t}\n\tcallerUser := getUser(std.GetOrigCaller())\n\tfollowedUser := getUser(addr)\n\n\tif _,ok:=callerUser.Following().Get(string(addr)); ok{\n\t\tpanic(\"You Already follow this user\")\n\t}\n\tcallerUser.Follow(followedUser)\n}\n\nfunc Unfollow(addr std.Address) {\n\tcallerUser := getUser(std.GetOrigCaller())\n\tif _,ok:=callerUser.Following().Get(string(addr)); !ok{\n\t\tpanic(\"You cannot unfollow a non followed user\")\n\t}\n\n\tunfollowedUser := getUser(addr)\n\n\tcallerUser.Unfollow(unfollowedUser)\n}\n\n\nfunc Followers(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Followers()\n\tres := make([]std.Address,0, followers.Size())\n\tfollowers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t\tres = append(res, data.(std.Address))\n\t\treturn false\n\t})\n\treturn res\n}\n\nfunc Followed(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Following()\n\tres := make([]std.Address, 0, followers.Size())\n\tfollowers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t\tres = append(res, data.(std.Address))\n\t\treturn false\n\t})\n\treturn res\n}\n\nfunc FollowersCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Followers().Size())\n}\n\nfunc FollowedCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Following().Size())\n}\n\nfunc IsFollower(follower std.Address, followed std.Address) bool {\n\t_, isFollower := getUser(follower).Following().Get(string(followed))\n\treturn isFollower\n}\n\nfunc getUser(addr std.Address) *User {\n\tuser,ok := users.Get(string(addr))\n\tif ok{\n\t\treturn user.(*User)\n\t}\n\tnewUser := NewUser(addr)\n\tusers.Set(string(addr), newUser)\n\treturn newUser\n}"},{"Name":"follow_test.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/testutils\"\n\t\"testing\"\n\t\"std\"\n)\n\nvar caller std.Address\nvar test2 std.Address\nfunc init() {\n\tcaller = testutils.TestAddress(\"testUser\") // main\n\ttest2 = testutils.TestAddress(\"test2\")\n\t// register as caller\n\tstd.TestSetOrigCaller(caller)\n}\n\nfunc TestFollow_Unfollow(t *testing.T) {\n\tusers = avl.Tree{}\n\n\tcount := FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"Initial followers != 0\")\n    }\n\t\n\tisFollower := IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower before follow\")\n    }\n\tFollow(test2)\n\n\tisFollower = IsFollower(caller, test2)\n\tif !isFollower{\n        t.Fatalf(\"Should be follower\")\n    }\n\tcount = FollowersCount(test2)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tcount = FollowedCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tcount = FollowedCount(caller)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tfollowers:=Followers(test2)\n\tif string(followers[0]) != string(caller) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tfollowed:=Followed(caller)\n\tif string(followed[0]) != string(test2) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tUnfollow(test2)\n\tcount = FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tisFollower = IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower after unfollow\")\n    }\n}\n\nfunc TestFollow_twice(t *testing.T) {\n\tusers = avl.Tree{}\n\ttest2 := testutils.TestAddress(\"test2\")\n\tdefer func() {\n        if r := recover(); r == nil {\n\t\t\tt.Fatalf(\"should've panic\")\n        }\n    }()\n\tcaller := std.GetOrigCaller() \n\tFollow(test2)\n\tFollow(test2)\n}"},{"Name":"user.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\ntype User struct{\n\tfollowing *avl.Tree\n\tfollowers *avl.Tree\n\taddress std.Address\n}\n\nfunc NewUser(address std.Address) *User {\n\treturn \u0026User{\n\t\tfollowing: \u0026avl.Tree{},\n\t\tfollowers: \u0026avl.Tree{},\n\t\taddress: address,\n\t}\n}\n\n\nfunc( user*User) Following() *avl.Tree{\n\treturn user.following\n}\n\nfunc( user*User) Followers() *avl.Tree{\n\treturn user.followers\n}\n\n\nfunc( user*User) Follow(followedUser *User) {\n\tfollowedUser.addFollower(user.Address())\n\tuser.follow(followedUser.Address())\n}\n\nfunc( user*User) Unfollow(followedUser *User) {\n\tuser.following.Remove(string(followedUser.Address()))\n\tfollowedUser.followers.Remove(string(user.Address()))\n}\n\nfunc( user*User) addFollower(addr std.Address){\n\tuser.followers.Set(string(addr), addr)\n}\n\nfunc( user*User) follow(addr std.Address){\n\tuser.following.Set(string(addr), addr)\n}\n\nfunc( user*User) Address() std.Address {\n\treturn  user.address\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhPbY6ETOcN5nEFZ1BJbZLVlOUbnlRBPmdFEUfnfWXGh"},"signature":"DMDekMO8n55pLmj1DT/wDR1WMVPGcp+qhNaBM2VB3PUAE3m5QOsreLeeGyrpNafzdGoIsMSQfWPMK+vwWvz2Ng=="}],"memo":""},"blockNum":"264250"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d46t4el0dduffs5j56t2razaeyvnmkxlduduuw","package":{"Name":"follow","Path":"gno.land/r/demo/teritori/follow","Files":[{"Name":"follow.gno","Body":"package follow\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\ntype User struct {\n\taddress std.Address\n\tfollowers avl.Tree\n\tfolloweds avl.Tree\n}\n\nvar (\n\taddr2User  avl.Tree // std.Address -\u003e *User\n)\n\nfunc getOrCreateUser(addr std.Address) *User {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif ok {\n\t\treturn userI.(*User)\n\t}\n\tuser := \u0026User{\n\t\taddress: addr,\n\t}\n\taddr2User.Set(addr.String(), user)\n\treturn user\n}\n\nfunc Follow(addr std.Address) {\n\t// get caller/inviter.\n\tcaller := std.GetOrigCaller()\n\tcallerUser := getOrCreateUser(caller)\n\tuser := getOrCreateUser(addr)\n\tcallerUser.followeds.Set(addr.String(), user)\n\tuser.followers.Set(caller.String(), callerUser)\n}\n\nfunc Unfollow(addr std.Address) {\n\t// get caller/inviter.\n\tcaller := std.GetOrigCaller()\n\tcallerUser := getOrCreateUser(caller)\n\tuser := getOrCreateUser(addr)\n\tif  _, ok := callerUser.followeds.Remove(addr.String()); !ok {\n\t\tpanic(\"followed not found\")\n\t}\n\tif _, ok := user.followers.Remove(caller.String()); !ok {\n\t\tpanic(\"follower not found\")\n\t}\n}\n\nfunc Followers(addr std.Address) []std.Address {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\tuser := userI.(*User)\n\tfollowers := make([]std.Address, 0, user.followers.Size())\n\tuser.followers.Iterate(\"\", \"\",  func(key string, value interface{}) bool  {\n\t\tfollower := value.(*User)\n\t\tfollowers = append(followers, follower.address)\n\t\treturn false\n\t})\n\treturn followers\n}\n\nfunc FollowedCount(addr std.Address) uint{\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn 0\n\t}\n\tuser := userI.(*User)\n\treturn uint(user.followeds.Size())\n}\n\nfunc Followed(addr std.Address) []std.Address {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\tuser := userI.(*User)\n\tfolloweds := make([]std.Address, 0, user.followeds.Size())\n\tuser.followeds.Iterate(\"\", \"\",  func(key string, value interface{}) bool  {\n\t\tfollowed := value.(*User)\n\t\tfolloweds = append(followeds, followed.address)\n\t\treturn false\n\t})\n\treturn followeds\n}\n\nfunc FollowersCount(addr std.Address) uint {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn 0\n\t}\n\tuser := userI.(*User)\n\treturn uint(user.followers.Size())\n}\n\nfunc IsFollower(follower std.Address, followed std.Address) bool {\n\tuserI, ok := addr2User.Get(followed.String())\n\tif !ok {\n\t\treturn false\n\t}\n\tuser := userI.(*User)\n\t_, ok = user.followers.Get(follower.String())\n\treturn ok\n}"},{"Name":"follow_test.gno","Body":"package follow\n\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n)\n\n\nfunc TestFollow_Follow(t *testing.T) {\n\tuser := testutils.TestAddress(\"user\")\n\tstd.TestSetOrigCaller(user)\n\t\n\n\tFollow(user)\n\tif c := FollowersCount(user); c != 1 {\n\t\tt.Fatalf(\"FollowersCount expected to have 1 has %d\", c)\n\t}\n\n\tif followers := Followers(user); followers[0].String() != string(user) {\n\t\tt.Fatalf(\"Followers expected to have %s has %s\", string(user), followers[0].String())\n\t}\n\n\tif followed := Followed(user); followed[0].String() != string(user) {\n\t\tt.Fatalf(\"Followed expected to have %s has %s\", followed[0].String())\n\t}\n}\n\nfunc TestFollow_UnFollow(t *testing.T) {\n\tcaller := std.GetOrigCaller()\n\tFollow(caller)\n\tUnfollow(caller)\n\tif c := FollowersCount(caller); c != 0 {\n\t\tt.Fatalf(\"expected to have 0 has %d\", c)\n\t}\n}\n\n\n"},{"Name":"gno.mod","Body":"module gno.land/r/demo/teritori/follow\n\nrequire gno.land/p/demo/avl v0.0.0-latest"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/dkVmfYUyUCFkPwIhahS4gblP3VmfLgpVByc8RVewD5"},"signature":"OVE6SRLSJy/HEWax1MwSOtQoPMgDXZnwLBFPQSZSEkRlLgKe9tzgRty8M3pYIy/zDStTC/fB6NKZSZtw5zATeQ=="}],"memo":""},"blockNum":"264252"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g14vxq5e5pt5sev7rkz2ej438scmxtylnzv5vnkw","package":{"Name":"follow","Path":"gno.land/p/demo/follow","Files":[{"Name":"follow.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\n\nvar users avl.Tree\n\n\n\nfunc Follow(addr std.Address) {\n\t\n\tif string(std.GetOrigCaller()) == string(addr) {\n\t\tpanic(\"You cannot follow yourself\")\n\t}\n\tcallerUser := getUser(std.GetOrigCaller())\n\tfollowedUser := getUser(addr)\n\n\tif _,ok:=callerUser.Following().Get(string(addr)); ok{\n\t\tpanic(\"You Already follow this user\")\n\t}\n\tcallerUser.Follow(followedUser)\n}\n\nfunc Unfollow(addr std.Address) {\n\tcallerUser := getUser(std.GetOrigCaller())\n\tif _,ok:=callerUser.Following().Get(string(addr)); !ok{\n\t\tpanic(\"You cannot unfollow a non followed user\")\n\t}\n\n\tunfollowedUser := getUser(addr)\n\n\tcallerUser.Unfollow(unfollowedUser)\n}\n\n\nfunc Followers(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Followers()\n\tres := make([]std.Address,0, followers.Size())\n\tfollowers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t\tres = append(res, data.(std.Address))\n\t\treturn false\n\t})\n\treturn res\n}\n\nfunc Followed(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Following()\n\tres := make([]std.Address, 0, followers.Size())\n\tfollowers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t\tres = append(res, data.(std.Address))\n\t\treturn false\n\t})\n\treturn res\n}\n\nfunc FollowersCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Followers().Size())\n}\n\nfunc FollowedCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Following().Size())\n}\n\nfunc IsFollower(follower std.Address, followed std.Address) bool {\n\t_, isFollower := getUser(follower).Following().Get(string(followed))\n\treturn isFollower\n}\n\nfunc getUser(addr std.Address) *User {\n\tuser,ok := users.Get(string(addr))\n\tif ok{\n\t\treturn user.(*User)\n\t}\n\tnewUser := NewUser(addr)\n\tusers.Set(string(addr), newUser)\n\treturn newUser\n}"},{"Name":"follow_test.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/testutils\"\n\t\"testing\"\n\t\"std\"\n)\n\nvar caller std.Address\nvar test2 std.Address\nfunc init() {\n\tcaller = testutils.TestAddress(\"testUser\") // main\n\ttest2 = testutils.TestAddress(\"test2\")\n\t// register as caller\n\tstd.TestSetOrigCaller(caller)\n}\n\nfunc TestFollow_Unfollow(t *testing.T) {\n\tusers = avl.Tree{}\n\n\tcount := FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"Initial followers != 0\")\n    }\n\t\n\tisFollower := IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower before follow\")\n    }\n\tFollow(test2)\n\n\tisFollower = IsFollower(caller, test2)\n\tif !isFollower{\n        t.Fatalf(\"Should be follower\")\n    }\n\tcount = FollowersCount(test2)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tcount = FollowedCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tcount = FollowedCount(caller)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tfollowers:=Followers(test2)\n\tif string(followers[0]) != string(caller) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tfollowed:=Followed(caller)\n\tif string(followed[0]) != string(test2) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tUnfollow(test2)\n\tcount = FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tisFollower = IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower after unfollow\")\n    }\n}\n\nfunc TestFollow_twice(t *testing.T) {\n\tusers = avl.Tree{}\n\ttest2 := testutils.TestAddress(\"test2\")\n\tdefer func() {\n        if r := recover(); r == nil {\n\t\t\tt.Fatalf(\"should've panic\")\n        }\n    }()\n\tcaller := std.GetOrigCaller() \n\tFollow(test2)\n\tFollow(test2)\n}"},{"Name":"user.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\ntype User struct{\n\tfollowing *avl.Tree\n\tfollowers *avl.Tree\n\taddress std.Address\n}\n\nfunc NewUser(address std.Address) *User {\n\treturn \u0026User{\n\t\tfollowing: \u0026avl.Tree{},\n\t\tfollowers: \u0026avl.Tree{},\n\t\taddress: address,\n\t}\n}\n\n\nfunc( user*User) Following() *avl.Tree{\n\treturn user.following\n}\n\nfunc( user*User) Followers() *avl.Tree{\n\treturn user.followers\n}\n\n\nfunc( user*User) Follow(followedUser *User) {\n\tfollowedUser.addFollower(user.Address())\n\tuser.follow(followedUser.Address())\n}\n\nfunc( user*User) Unfollow(followedUser *User) {\n\tuser.following.Remove(string(followedUser.Address()))\n\tfollowedUser.followers.Remove(string(user.Address()))\n}\n\nfunc( user*User) addFollower(addr std.Address){\n\tuser.followers.Set(string(addr), addr)\n}\n\nfunc( user*User) follow(addr std.Address){\n\tuser.following.Set(string(addr), addr)\n}\n\nfunc( user*User) Address() std.Address {\n\treturn  user.address\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhPbY6ETOcN5nEFZ1BJbZLVlOUbnlRBPmdFEUfnfWXGh"},"signature":"bw3D4AI9jXVRLW6VB4VNN/gyNygajLWGRWJOCrB7mghxv7AdDd+eDuYgblx++0W3LZZRCva0F/ovSkVmzrUuHg=="}],"memo":""},"blockNum":"264255"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d46t4el0dduffs5j56t2razaeyvnmkxlduduuw","package":{"Name":"follow","Path":"gno.land/r/demo/teritori/follow_2","Files":[{"Name":"follow.gno","Body":"package follow\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\ntype User struct {\n\taddress std.Address\n\tfollowers avl.Tree\n\tfolloweds avl.Tree\n}\n\nvar (\n\taddr2User  avl.Tree // std.Address -\u003e *User\n)\n\nfunc getOrCreateUser(addr std.Address) *User {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif ok {\n\t\treturn userI.(*User)\n\t}\n\tuser := \u0026User{\n\t\taddress: addr,\n\t}\n\taddr2User.Set(addr.String(), user)\n\treturn user\n}\n\nfunc Follow(addr std.Address) {\n\t// get caller/inviter.\n\tcaller := std.GetOrigCaller()\n\tcallerUser := getOrCreateUser(caller)\n\tuser := getOrCreateUser(addr)\n\tcallerUser.followeds.Set(addr.String(), user)\n\tuser.followers.Set(caller.String(), callerUser)\n}\n\nfunc Unfollow(addr std.Address) {\n\t// get caller/inviter.\n\tcaller := std.GetOrigCaller()\n\tcallerUser := getOrCreateUser(caller)\n\tuser := getOrCreateUser(addr)\n\tif  _, ok := callerUser.followeds.Remove(addr.String()); !ok {\n\t\tpanic(\"followed not found\")\n\t}\n\tif _, ok := user.followers.Remove(caller.String()); !ok {\n\t\tpanic(\"follower not found\")\n\t}\n}\n\nfunc Followers(addr std.Address) []std.Address {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\tuser := userI.(*User)\n\tfollowers := make([]std.Address, 0, user.followers.Size())\n\tuser.followers.Iterate(\"\", \"\",  func(key string, value interface{}) bool  {\n\t\tfollower := value.(*User)\n\t\tfollowers = append(followers, follower.address)\n\t\treturn false\n\t})\n\treturn followers\n}\n\nfunc FollowedCount(addr std.Address) uint{\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn 0\n\t}\n\tuser := userI.(*User)\n\treturn uint(user.followeds.Size())\n}\n\nfunc Followed(addr std.Address) []std.Address {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\tuser := userI.(*User)\n\tfolloweds := make([]std.Address, 0, user.followeds.Size())\n\tuser.followeds.Iterate(\"\", \"\",  func(key string, value interface{}) bool  {\n\t\tfollowed := value.(*User)\n\t\tfolloweds = append(followeds, followed.address)\n\t\treturn false\n\t})\n\treturn followeds\n}\n\nfunc FollowersCount(addr std.Address) uint {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn 0\n\t}\n\tuser := userI.(*User)\n\treturn uint(user.followers.Size())\n}\n\nfunc IsFollower(follower std.Address, followed std.Address) bool {\n\tuserI, ok := addr2User.Get(followed.String())\n\tif !ok {\n\t\treturn false\n\t}\n\tuser := userI.(*User)\n\t_, ok = user.followers.Get(follower.String())\n\treturn ok\n}"},{"Name":"follow_test.gno","Body":"package follow\n\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n)\n\n\nfunc TestFollow_Follow(t *testing.T) {\n\tuser := testutils.TestAddress(\"user\")\n\tstd.TestSetOrigCaller(user)\n\t\n\n\tFollow(user)\n\tif c := FollowersCount(user); c != 1 {\n\t\tt.Fatalf(\"FollowersCount expected to have 1 has %d\", c)\n\t}\n\n\tif followers := Followers(user); followers[0].String() != string(user) {\n\t\tt.Fatalf(\"Followers expected to have %s has %s\", string(user), followers[0].String())\n\t}\n\n\tif followed := Followed(user); followed[0].String() != string(user) {\n\t\tt.Fatalf(\"Followed expected to have %s has %s\", followed[0].String())\n\t}\n}\n\nfunc TestFollow_UnFollow(t *testing.T) {\n\tcaller := std.GetOrigCaller()\n\tFollow(caller)\n\tUnfollow(caller)\n\tif c := FollowersCount(caller); c != 0 {\n\t\tt.Fatalf(\"expected to have 0 has %d\", c)\n\t}\n}\n\n\n"},{"Name":"gno.mod","Body":"module gno.land/r/demo/teritori/follow\n\nrequire gno.land/p/demo/avl v0.0.0-latest"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/dkVmfYUyUCFkPwIhahS4gblP3VmfLgpVByc8RVewD5"},"signature":"iey3uPgU9Is/Zx0upE1XRA9ZgudgPEOlRoSjXYeLxPEEEIpiqh4pDre7QrUO5j/AofHTsJbHW6wx4Jbj0J+uig=="}],"memo":""},"blockNum":"264257"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g14vxq5e5pt5sev7rkz2ej438scmxtylnzv5vnkw","package":{"Name":"follow","Path":"gno.land/p/demo/follow","Files":[{"Name":"follow.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\n\nvar users avl.Tree\n\n\n\nfunc Follow(addr std.Address) {\n\t\n\tif string(std.GetOrigCaller()) == string(addr) {\n\t\tpanic(\"You cannot follow yourself\")\n\t}\n\tcallerUser := getUser(std.GetOrigCaller())\n\tfollowedUser := getUser(addr)\n\n\t//if _,ok:=callerUser.Following().Get(string(addr)); ok{\n\t//\tpanic(\"You Already follow this user\")\n\t//}\n\tcallerUser.Follow(followedUser)\n}\n\nfunc Unfollow(addr std.Address) {\n\tcallerUser := getUser(std.GetOrigCaller())\n\tif _,ok:=callerUser.Following().Get(string(addr)); !ok{\n\t\tpanic(\"You cannot unfollow a non followed user\")\n\t}\n\n\tunfollowedUser := getUser(addr)\n\n\tcallerUser.Unfollow(unfollowedUser)\n}\n\n\nfunc Followers(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Followers()\n\tres := make([]std.Address,0, followers.Size())\n\tfollowers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t\tres = append(res, data.(std.Address))\n\t\treturn false\n\t})\n\treturn res\n}\n\nfunc Followed(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Following()\n\tres := make([]std.Address, 0, followers.Size())\n\tfollowers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t\tres = append(res, data.(std.Address))\n\t\treturn false\n\t})\n\treturn res\n}\n\nfunc FollowersCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Followers().Size())\n}\n\nfunc FollowedCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Following().Size())\n}\n\nfunc IsFollower(follower std.Address, followed std.Address) bool {\n\t_, isFollower := getUser(follower).Following().Get(string(followed))\n\treturn isFollower\n}\n\nfunc getUser(addr std.Address) *User {\n\tuser,ok := users.Get(string(addr))\n\tif ok{\n\t\treturn user.(*User)\n\t}\n\tnewUser := NewUser(addr)\n\tusers.Set(string(addr), newUser)\n\treturn newUser\n}"},{"Name":"follow_test.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/testutils\"\n\t\"testing\"\n\t\"std\"\n)\n\nvar caller std.Address\nvar test2 std.Address\nfunc init() {\n\tcaller = testutils.TestAddress(\"testUser\") // main\n\ttest2 = testutils.TestAddress(\"test2\")\n\t// register as caller\n\tstd.TestSetOrigCaller(caller)\n}\n\nfunc TestFollow_Unfollow(t *testing.T) {\n\tusers = avl.Tree{}\n\n\tcount := FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"Initial followers != 0\")\n    }\n\t\n\tisFollower := IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower before follow\")\n    }\n\tFollow(test2)\n\n\tisFollower = IsFollower(caller, test2)\n\tif !isFollower{\n        t.Fatalf(\"Should be follower\")\n    }\n\tcount = FollowersCount(test2)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tcount = FollowedCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tcount = FollowedCount(caller)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tfollowers:=Followers(test2)\n\tif string(followers[0]) != string(caller) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tfollowed:=Followed(caller)\n\tif string(followed[0]) != string(test2) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tUnfollow(test2)\n\tcount = FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tisFollower = IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower after unfollow\")\n    }\n}\n\nfunc TestFollow_twice(t *testing.T) {\n\tusers = avl.Tree{}\n\ttest2 := testutils.TestAddress(\"test2\")\n\tdefer func() {\n        if r := recover(); r == nil {\n\t\t\tt.Fatalf(\"should've panic\")\n        }\n    }()\n\tcaller := std.GetOrigCaller() \n\tFollow(test2)\n\tFollow(test2)\n}"},{"Name":"user.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\ntype User struct{\n\tfollowing *avl.Tree\n\tfollowers *avl.Tree\n\taddress std.Address\n}\n\nfunc NewUser(address std.Address) *User {\n\treturn \u0026User{\n\t\tfollowing: \u0026avl.Tree{},\n\t\tfollowers: \u0026avl.Tree{},\n\t\taddress: address,\n\t}\n}\n\n\nfunc( user*User) Following() *avl.Tree{\n\treturn user.following\n}\n\nfunc( user*User) Followers() *avl.Tree{\n\treturn user.followers\n}\n\n\nfunc( user*User) Follow(followedUser *User) {\n\tfollowedUser.addFollower(user.Address())\n\tuser.follow(followedUser.Address())\n}\n\nfunc( user*User) Unfollow(followedUser *User) {\n\tuser.following.Remove(string(followedUser.Address()))\n\tfollowedUser.followers.Remove(string(user.Address()))\n}\n\nfunc( user*User) addFollower(addr std.Address){\n\tuser.followers.Set(string(addr), addr)\n}\n\nfunc( user*User) follow(addr std.Address){\n\tuser.following.Set(string(addr), addr)\n}\n\nfunc( user*User) Address() std.Address {\n\treturn  user.address\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhPbY6ETOcN5nEFZ1BJbZLVlOUbnlRBPmdFEUfnfWXGh"},"signature":"KViHMycoDRZTqkAO7i1vycfQwug2r23ca3eozdkRQVot63AqQc8YeacIgPJp1UFe4hdV49PvltkBjEqT6Y06QQ=="}],"memo":""},"blockNum":"264259"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g14vxq5e5pt5sev7rkz2ej438scmxtylnzv5vnkw","package":{"Name":"follow","Path":"gno.land/p/demo/follow","Files":[{"Name":"follow.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\n\nvar users avl.Tree\n\n\n\nfunc Follow(addr std.Address) {\n\t\n\tif string(std.GetOrigCaller()) == string(addr) {\n\t\tpanic(\"You cannot follow yourself\")\n\t}\n\tcallerUser := getUser(std.GetOrigCaller())\n\tfollowedUser := getUser(addr)\n\n\t//if _,ok:=callerUser.Following().Get(string(addr)); ok{\n\t//\tpanic(\"You Already follow this user\")\n\t//}\n\tcallerUser.Follow(followedUser)\n}\n\nfunc Unfollow(addr std.Address) {\n\tcallerUser := getUser(std.GetOrigCaller())\n\t//if _,ok:=callerUser.Following().Get(string(addr)); !ok{\n\t//\tpanic(\"You cannot unfollow a non followed user\")\n\t//}\n\n\tunfollowedUser := getUser(addr)\n\n\tcallerUser.Unfollow(unfollowedUser)\n}\n\n\nfunc Followers(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Followers()\n\tres := make([]std.Address,0, followers.Size())\n\tfollowers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t\tres = append(res, data.(std.Address))\n\t\treturn false\n\t})\n\treturn res\n}\n\nfunc Followed(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Following()\n\tres := make([]std.Address, 0, followers.Size())\n\tfollowers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t\tres = append(res, data.(std.Address))\n\t\treturn false\n\t})\n\treturn res\n}\n\nfunc FollowersCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Followers().Size())\n}\n\nfunc FollowedCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Following().Size())\n}\n\nfunc IsFollower(follower std.Address, followed std.Address) bool {\n\t_, isFollower := getUser(follower).Following().Get(string(followed))\n\treturn isFollower\n}\n\nfunc getUser(addr std.Address) *User {\n\tuser,ok := users.Get(string(addr))\n\tif ok{\n\t\treturn user.(*User)\n\t}\n\tnewUser := NewUser(addr)\n\tusers.Set(string(addr), newUser)\n\treturn newUser\n}"},{"Name":"follow_test.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/testutils\"\n\t\"testing\"\n\t\"std\"\n)\n\nvar caller std.Address\nvar test2 std.Address\nfunc init() {\n\tcaller = testutils.TestAddress(\"testUser\") // main\n\ttest2 = testutils.TestAddress(\"test2\")\n\t// register as caller\n\tstd.TestSetOrigCaller(caller)\n}\n\nfunc TestFollow_Unfollow(t *testing.T) {\n\tusers = avl.Tree{}\n\n\tcount := FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"Initial followers != 0\")\n    }\n\t\n\tisFollower := IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower before follow\")\n    }\n\tFollow(test2)\n\n\tisFollower = IsFollower(caller, test2)\n\tif !isFollower{\n        t.Fatalf(\"Should be follower\")\n    }\n\tcount = FollowersCount(test2)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tcount = FollowedCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tcount = FollowedCount(caller)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tfollowers:=Followers(test2)\n\tif string(followers[0]) != string(caller) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tfollowed:=Followed(caller)\n\tif string(followed[0]) != string(test2) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tUnfollow(test2)\n\tcount = FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tisFollower = IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower after unfollow\")\n    }\n}\n\nfunc TestFollow_twice(t *testing.T) {\n\tusers = avl.Tree{}\n\ttest2 := testutils.TestAddress(\"test2\")\n\tdefer func() {\n        if r := recover(); r == nil {\n\t\t\tt.Fatalf(\"should've panic\")\n        }\n    }()\n\tcaller := std.GetOrigCaller() \n\tFollow(test2)\n\tFollow(test2)\n}"},{"Name":"user.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\ntype User struct{\n\tfollowing *avl.Tree\n\tfollowers *avl.Tree\n\taddress std.Address\n}\n\nfunc NewUser(address std.Address) *User {\n\treturn \u0026User{\n\t\tfollowing: \u0026avl.Tree{},\n\t\tfollowers: \u0026avl.Tree{},\n\t\taddress: address,\n\t}\n}\n\n\nfunc( user*User) Following() *avl.Tree{\n\treturn user.following\n}\n\nfunc( user*User) Followers() *avl.Tree{\n\treturn user.followers\n}\n\n\nfunc( user*User) Follow(followedUser *User) {\n\tfollowedUser.addFollower(user.Address())\n\tuser.follow(followedUser.Address())\n}\n\nfunc( user*User) Unfollow(followedUser *User) {\n\tuser.following.Remove(string(followedUser.Address()))\n\tfollowedUser.followers.Remove(string(user.Address()))\n}\n\nfunc( user*User) addFollower(addr std.Address){\n\tuser.followers.Set(string(addr), addr)\n}\n\nfunc( user*User) follow(addr std.Address){\n\tuser.following.Set(string(addr), addr)\n}\n\nfunc( user*User) Address() std.Address {\n\treturn  user.address\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhPbY6ETOcN5nEFZ1BJbZLVlOUbnlRBPmdFEUfnfWXGh"},"signature":"gTM66VURQ2x85fxkr6xOUkFROkR81Fob3rzRBJFzaJ8CTDc5wKvZ9S82oDViQnoHr3sNlA5tDCwhs8JAtzmlLg=="}],"memo":""},"blockNum":"264261"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g14vxq5e5pt5sev7rkz2ej438scmxtylnzv5vnkw","package":{"Name":"follow","Path":"gno.land/p/demo/follow","Files":[{"Name":"follow.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\n\nvar users avl.Tree\n\nfunc Render() string {\n\treturn \"hello\"\n}\n\nfunc Follow(addr std.Address) {\n\t\n\tif string(std.GetOrigCaller()) == string(addr) {\n\t\tpanic(\"You cannot follow yourself\")\n\t}\n\tcallerUser := getUser(std.GetOrigCaller())\n\tfollowedUser := getUser(addr)\n\n\t//if _,ok:=callerUser.Following().Get(string(addr)); ok{\n\t//\tpanic(\"You Already follow this user\")\n\t//}\n\tcallerUser.Follow(followedUser)\n}\n\nfunc Unfollow(addr std.Address) {\n\tcallerUser := getUser(std.GetOrigCaller())\n\t//if _,ok:=callerUser.Following().Get(string(addr)); !ok{\n\t//\tpanic(\"You cannot unfollow a non followed user\")\n\t//}\n\n\tunfollowedUser := getUser(addr)\n\n\tcallerUser.Unfollow(unfollowedUser)\n}\n\n\nfunc Followers(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Followers()\n\tres := make([]std.Address,0, followers.Size())\n\tfollowers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t\tres = append(res, data.(std.Address))\n\t\treturn false\n\t})\n\treturn res\n}\n\nfunc Followed(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Following()\n\tres := make([]std.Address, 0, followers.Size())\n\tfollowers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t\tres = append(res, data.(std.Address))\n\t\treturn false\n\t})\n\treturn res\n}\n\nfunc FollowersCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Followers().Size())\n}\n\nfunc FollowedCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Following().Size())\n}\n\nfunc IsFollower(follower std.Address, followed std.Address) bool {\n\t_, isFollower := getUser(follower).Following().Get(string(followed))\n\treturn isFollower\n}\n\nfunc getUser(addr std.Address) *User {\n\tuser,ok := users.Get(string(addr))\n\tif ok{\n\t\treturn user.(*User)\n\t}\n\tnewUser := NewUser(addr)\n\tusers.Set(string(addr), newUser)\n\treturn newUser\n}"},{"Name":"follow_test.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/testutils\"\n\t\"testing\"\n\t\"std\"\n)\n\nvar caller std.Address\nvar test2 std.Address\nfunc init() {\n\tcaller = testutils.TestAddress(\"testUser\") // main\n\ttest2 = testutils.TestAddress(\"test2\")\n\t// register as caller\n\tstd.TestSetOrigCaller(caller)\n}\n\nfunc TestFollow_Unfollow(t *testing.T) {\n\tusers = avl.Tree{}\n\n\tcount := FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"Initial followers != 0\")\n    }\n\t\n\tisFollower := IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower before follow\")\n    }\n\tFollow(test2)\n\n\tisFollower = IsFollower(caller, test2)\n\tif !isFollower{\n        t.Fatalf(\"Should be follower\")\n    }\n\tcount = FollowersCount(test2)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tcount = FollowedCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tcount = FollowedCount(caller)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tfollowers:=Followers(test2)\n\tif string(followers[0]) != string(caller) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tfollowed:=Followed(caller)\n\tif string(followed[0]) != string(test2) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tUnfollow(test2)\n\tcount = FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tisFollower = IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower after unfollow\")\n    }\n}\n\nfunc TestFollow_twice(t *testing.T) {\n\tusers = avl.Tree{}\n\ttest2 := testutils.TestAddress(\"test2\")\n\tdefer func() {\n        if r := recover(); r == nil {\n\t\t\tt.Fatalf(\"should've panic\")\n        }\n    }()\n\tcaller := std.GetOrigCaller() \n\tFollow(test2)\n\tFollow(test2)\n}"},{"Name":"user.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\ntype User struct{\n\tfollowing *avl.Tree\n\tfollowers *avl.Tree\n\taddress std.Address\n}\n\nfunc NewUser(address std.Address) *User {\n\treturn \u0026User{\n\t\tfollowing: \u0026avl.Tree{},\n\t\tfollowers: \u0026avl.Tree{},\n\t\taddress: address,\n\t}\n}\n\n\nfunc( user*User) Following() *avl.Tree{\n\treturn user.following\n}\n\nfunc( user*User) Followers() *avl.Tree{\n\treturn user.followers\n}\n\n\nfunc( user*User) Follow(followedUser *User) {\n\tfollowedUser.addFollower(user.Address())\n\tuser.follow(followedUser.Address())\n}\n\nfunc( user*User) Unfollow(followedUser *User) {\n\tuser.following.Remove(string(followedUser.Address()))\n\tfollowedUser.followers.Remove(string(user.Address()))\n}\n\nfunc( user*User) addFollower(addr std.Address){\n\tuser.followers.Set(string(addr), addr)\n}\n\nfunc( user*User) follow(addr std.Address){\n\tuser.following.Set(string(addr), addr)\n}\n\nfunc( user*User) Address() std.Address {\n\treturn  user.address\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhPbY6ETOcN5nEFZ1BJbZLVlOUbnlRBPmdFEUfnfWXGh"},"signature":"Y7dDnt36fW7f48icRdyN0V3S28gdzPgGXFw3f1SafrpQJnW5GuEA7L7PeGa605i5HtYCpkfK9/tlQiumHKtKWA=="}],"memo":""},"blockNum":"264264"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d46t4el0dduffs5j56t2razaeyvnmkxlduduuw","package":{"Name":"follow","Path":"gno.land/r/demo/teritori/follow_2","Files":[{"Name":"follow.gno","Body":"package follow\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\ntype User struct {\n\taddress std.Address\n\tfollowers avl.Tree\n\tfolloweds avl.Tree\n}\n\nvar (\n\taddr2User  avl.Tree // std.Address -\u003e *User\n)\n\nfunc getOrCreateUser(addr std.Address) *User {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif ok {\n\t\treturn userI.(*User)\n\t}\n\tuser := \u0026User{\n\t\taddress: addr,\n\t}\n\taddr2User.Set(addr.String(), user)\n\treturn user\n}\n\nfunc Follow(addr std.Address) {\n\t// get caller/inviter.\n\tcaller := std.GetOrigCaller()\n\tcallerUser := getOrCreateUser(caller)\n\tuser := getOrCreateUser(addr)\n\tcallerUser.followeds.Set(addr.String(), user)\n\tuser.followers.Set(caller.String(), callerUser)\n}\n\nfunc Unfollow(addr std.Address) {\n\t// get caller/inviter.\n\tcaller := std.GetOrigCaller()\n\tcallerUser := getOrCreateUser(caller)\n\tuser := getOrCreateUser(addr)\n\tif  _, ok := callerUser.followeds.Remove(addr.String()); !ok {\n\t\tpanic(\"followed not found\")\n\t}\n\tif _, ok := user.followers.Remove(caller.String()); !ok {\n\t\tpanic(\"follower not found\")\n\t}\n}\n\nfunc Followers(addr std.Address) []std.Address {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\tuser := userI.(*User)\n\tfollowers := make([]std.Address, 0, user.followers.Size())\n\tuser.followers.Iterate(\"\", \"\",  func(key string, value interface{}) bool  {\n\t\tfollower := value.(*User)\n\t\tfollowers = append(followers, follower.address)\n\t\treturn false\n\t})\n\treturn followers\n}\n\nfunc FollowedCount(addr std.Address) uint{\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn 0\n\t}\n\tuser := userI.(*User)\n\treturn uint(user.followeds.Size())\n}\n\nfunc Followed(addr std.Address) []std.Address {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\tuser := userI.(*User)\n\tfolloweds := make([]std.Address, 0, user.followeds.Size())\n\tuser.followeds.Iterate(\"\", \"\",  func(key string, value interface{}) bool  {\n\t\tfollowed := value.(*User)\n\t\tfolloweds = append(followeds, followed.address)\n\t\treturn false\n\t})\n\treturn followeds\n}\n\nfunc FollowersCount(addr std.Address) uint {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn 0\n\t}\n\tuser := userI.(*User)\n\treturn uint(user.followers.Size())\n}\n\nfunc IsFollower(follower std.Address, followed std.Address) bool {\n\tuserI, ok := addr2User.Get(followed.String())\n\tif !ok {\n\t\treturn false\n\t}\n\tuser := userI.(*User)\n\t_, ok = user.followers.Get(follower.String())\n\treturn ok\n}"},{"Name":"follow_test.gno","Body":"package follow\n\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n)\n\n\nfunc TestFollow_Follow(t *testing.T) {\n\tuser := testutils.TestAddress(\"user\")\n\tstd.TestSetOrigCaller(user)\n\t\n\n\tFollow(user)\n\t\n\tif c := FollowersCount(user); c != 1 {\n\t\tt.Fatalf(\"FollowersCount expected to have 1 has %d\", c)\n\t}\n\n\tif followers := Followers(user); followers[0].String() != string(user) {\n\t\tt.Fatalf(\"Followers expected to have %s has %s\", string(user), followers[0].String())\n\t}\n\n\tif followed := Followed(user); followed[0].String() != string(user) {\n\t\tt.Fatalf(\"Followed expected to have %s has %s\", followed[0].String())\n\t}\n}\n\nfunc TestFollow_UnFollow(t *testing.T) {\n\tcaller := std.GetOrigCaller()\n\tFollow(caller)\n\tUnfollow(caller)\n\tif c := FollowersCount(caller); c != 0 {\n\t\tt.Fatalf(\"expected to have 0 has %d\", c)\n\t}\n}\n\n\n"},{"Name":"gno.mod","Body":"module gno.land/r/demo/teritori/follow\n\nrequire gno.land/p/demo/avl v0.0.2"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/dkVmfYUyUCFkPwIhahS4gblP3VmfLgpVByc8RVewD5"},"signature":"T+eC7oZhw/2EtOdLuG6+TifducRJI0HCdztXgxuNSa04a9kfUNKJSKE3+Rt/yhJikX1za+F6QEhp4CiZ22TVNQ=="}],"memo":""},"blockNum":"264267"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d46t4el0dduffs5j56t2razaeyvnmkxlduduuw","package":{"Name":"follow","Path":"gno.land/r/demo/teritori/follow_2","Files":[{"Name":"follow.gno","Body":"package follow\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\ntype User struct {\n\taddress std.Address\n\tfollowers avl.Tree\n\tfolloweds avl.Tree\n}\n\nvar (\n\taddr2User  avl.Tree // std.Address -\u003e *User\n)\n\nfunc getOrCreateUser(addr std.Address) *User {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif ok {\n\t\treturn userI.(*User)\n\t}\n\tuser := \u0026User{\n\t\taddress: addr,\n\t}\n\taddr2User.Set(addr.String(), user)\n\treturn user\n}\n\nfunc Follow(addr std.Address) {\n\t// get caller/inviter.\n\tcaller := std.GetOrigCaller()\n\tcallerUser := getOrCreateUser(caller)\n\tuser := getOrCreateUser(addr)\n\tcallerUser.followeds.Set(addr.String(), user)\n\tuser.followers.Set(caller.String(), callerUser)\n}\n\nfunc Unfollow(addr std.Address) {\n\t// get caller/inviter.\n\tcaller := std.GetOrigCaller()\n\tcallerUser := getOrCreateUser(caller)\n\tuser := getOrCreateUser(addr)\n\tif  _, ok := callerUser.followeds.Remove(addr.String()); !ok {\n\t\tpanic(\"followed not found\")\n\t}\n\tif _, ok := user.followers.Remove(caller.String()); !ok {\n\t\tpanic(\"follower not found\")\n\t}\n}\n\nfunc Followers(addr std.Address) []std.Address {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\tuser := userI.(*User)\n\tfollowers := make([]std.Address, 0, user.followers.Size())\n\tuser.followers.Iterate(\"\", \"\",  func(key string, value interface{}) bool  {\n\t\tfollower := value.(*User)\n\t\tfollowers = append(followers, follower.address)\n\t\treturn false\n\t})\n\treturn followers\n}\n\nfunc FollowedCount(addr std.Address) uint{\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn 0\n\t}\n\tuser := userI.(*User)\n\treturn uint(user.followeds.Size())\n}\n\nfunc Followed(addr std.Address) []std.Address {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\tuser := userI.(*User)\n\tfolloweds := make([]std.Address, 0, user.followeds.Size())\n\tuser.followeds.Iterate(\"\", \"\",  func(key string, value interface{}) bool  {\n\t\tfollowed := value.(*User)\n\t\tfolloweds = append(followeds, followed.address)\n\t\treturn false\n\t})\n\treturn followeds\n}\n\nfunc FollowersCount(addr std.Address) uint {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn 0\n\t}\n\tuser := userI.(*User)\n\treturn uint(user.followers.Size())\n}\n\nfunc IsFollower(follower std.Address, followed std.Address) bool {\n\tuserI, ok := addr2User.Get(followed.String())\n\tif !ok {\n\t\treturn false\n\t}\n\tuser := userI.(*User)\n\t_, ok = user.followers.Get(follower.String())\n\treturn ok\n}"},{"Name":"follow_test.gno","Body":"package follow\n\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n)\n\n\nfunc TestFollow_Follow(t *testing.T) {\n\tuser := testutils.TestAddress(\"user\")\n\tstd.TestSetOrigCaller(user)\n\t\n\n\tFollow(user)\n\t\n\tif c := FollowersCount(user); c != 1 {\n\t\tt.Fatalf(\"FollowersCount expected to have 1 has %d\", c)\n\t}\n\n\tif followers := Followers(user); followers[0].String() != string(user) {\n\t\tt.Fatalf(\"Followers expected to have %s has %s\", string(user), followers[0].String())\n\t}\n\n\tif followed := Followed(user); followed[0].String() != string(user) {\n\t\tt.Fatalf(\"Followed expected to have %s has %s\", followed[0].String())\n\t}\n}\n\nfunc TestFollow_UnFollow(t *testing.T) {\n\tcaller := std.GetOrigCaller()\n\tFollow(caller)\n\tUnfollow(caller)\n\tif c := FollowersCount(caller); c != 0 {\n\t\tt.Fatalf(\"expected to have 0 has %d\", c)\n\t}\n}\n\n\n"},{"Name":"gno.mod","Body":"module gno.land/r/demo/teritori/follow\n\nrequire gno.land/p/demo/avl v0.0.1-latest"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/dkVmfYUyUCFkPwIhahS4gblP3VmfLgpVByc8RVewD5"},"signature":"HCj3RkInGtNPjYYtlhDtOX5cnzQnQSShTiTAWYVmXJJw2+JcqkvVn8dyFmSEz0dgA96P/QVokVjQzT9zJpkqlw=="}],"memo":""},"blockNum":"264271"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d46t4el0dduffs5j56t2razaeyvnmkxlduduuw","package":{"Name":"follow","Path":"gno.land/r/demo/teritori/follow_2","Files":[{"Name":"follow.gno","Body":"package follow\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\ntype User struct {\n\taddress std.Address\n\tfollowers avl.Tree\n\tfolloweds avl.Tree\n}\n\nvar (\n\taddr2User  avl.Tree // std.Address -\u003e *User\n)\n\nfunc getOrCreateUser(addr std.Address) *User {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif ok {\n\t\treturn userI.(*User)\n\t}\n\tuser := \u0026User{\n\t\taddress: addr,\n\t}\n\taddr2User.Set(addr.String(), user)\n\treturn user\n}\n\nfunc Follow(addr std.Address) {\n\t// get caller/inviter.\n\tcaller := std.GetOrigCaller()\n\tcallerUser := getOrCreateUser(caller)\n\tuser := getOrCreateUser(addr)\n\tcallerUser.followeds.Set(addr.String(), user)\n\tuser.followers.Set(caller.String(), callerUser)\n}\n\nfunc Unfollow(addr std.Address) {\n\t// get caller/inviter.\n\tcaller := std.GetOrigCaller()\n\tcallerUser := getOrCreateUser(caller)\n\tuser := getOrCreateUser(addr)\n\tif  _, ok := callerUser.followeds.Remove(addr.String()); !ok {\n\t\tpanic(\"followed not found\")\n\t}\n\tif _, ok := user.followers.Remove(caller.String()); !ok {\n\t\tpanic(\"follower not found\")\n\t}\n}\n\nfunc Followers(addr std.Address) []std.Address {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\tuser := userI.(*User)\n\tfollowers := make([]std.Address, 0, user.followers.Size())\n\tuser.followers.Iterate(\"\", \"\",  func(key string, value interface{}) bool  {\n\t\tfollower := value.(*User)\n\t\tfollowers = append(followers, follower.address)\n\t\treturn false\n\t})\n\treturn followers\n}\n\nfunc FollowedCount(addr std.Address) uint{\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn 0\n\t}\n\tuser := userI.(*User)\n\treturn uint(user.followeds.Size())\n}\n\nfunc Followed(addr std.Address) []std.Address {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\tuser := userI.(*User)\n\tfolloweds := make([]std.Address, 0, user.followeds.Size())\n\tuser.followeds.Iterate(\"\", \"\",  func(key string, value interface{}) bool  {\n\t\tfollowed := value.(*User)\n\t\tfolloweds = append(followeds, followed.address)\n\t\treturn false\n\t})\n\treturn followeds\n}\n\nfunc FollowersCount(addr std.Address) uint {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn 0\n\t}\n\tuser := userI.(*User)\n\treturn uint(user.followers.Size())\n}\n\nfunc IsFollower(follower std.Address, followed std.Address) bool {\n\tuserI, ok := addr2User.Get(followed.String())\n\tif !ok {\n\t\treturn false\n\t}\n\tuser := userI.(*User)\n\t_, ok = user.followers.Get(follower.String())\n\treturn ok\n}"},{"Name":"follow_test.gno","Body":"package follow\n\n\nimport (\n\t\"std\"\n\t\"testing\"\n\n\t\"gno.land/p/demo/testutils\"\n)\n\n\nfunc TestFollow_Follow(t *testing.T) {\n\tuser := testutils.TestAddress(\"user\")\n\tstd.TestSetOrigCaller(user)\n\t\n\n\tFollow(user)\n\t\n\tif c := FollowersCount(user); c != 1 {\n\t\tt.Fatalf(\"FollowersCount expected to have 1 has %d\", c)\n\t}\n\n\tif followers := Followers(user); followers[0].String() != string(user) {\n\t\tt.Fatalf(\"Followers expected to have %s has %s\", string(user), followers[0].String())\n\t}\n\n\tif followed := Followed(user); followed[0].String() != string(user) {\n\t\tt.Fatalf(\"Followed expected to have %s has %s\", followed[0].String())\n\t}\n}\n\nfunc TestFollow_UnFollow(t *testing.T) {\n\tcaller := std.GetOrigCaller()\n\tFollow(caller)\n\tUnfollow(caller)\n\tif c := FollowersCount(caller); c != 0 {\n\t\tt.Fatalf(\"expected to have 0 has %d\", c)\n\t}\n}\n\n\n"},{"Name":"gno.mod","Body":"module gno.land/r/demo/teritori/follow\n\nrequire (\n    gno.land/p/demo/avl v0.0.0-latest\n    gno.land/p/demo/testutils v0.0.0-latest\n)"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/dkVmfYUyUCFkPwIhahS4gblP3VmfLgpVByc8RVewD5"},"signature":"O4Ja914fI8iJ0nbXpOzWpEWnRv4WA9F4bqmJmtGCuskTFYvOQXHW6IXoGNDG/+Dalb0LsYmZ6/JDKgCs3s3dqw=="}],"memo":""},"blockNum":"264275"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1d46t4el0dduffs5j56t2razaeyvnmkxlduduuw","package":{"Name":"escrow","Path":"gno.land/r/demo/teritori/escrow","Files":[{"Name":"escrow.gno","Body":"package escrow\n\nimport (\n\t\"std\"\n\t\"time\"\n\n\tfmt \"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/demo/foo20\"\n\t\"gno.land/r/demo/users\"\n)\n\ntype Config struct {\n\tdaoAdmin string\n}\n\ntype ContractStatus uint32\n\nconst (\n\tCREATED   ContractStatus = 1\n\tACCEPTED  ContractStatus = 2\n\tCANCELED  ContractStatus = 3\n\tPAUSED    ContractStatus = 4\n\tCOMPLETED ContractStatus = 5\n)\n\ntype Contract struct {\n\tid             uint64\n\tsender         string\n\treceiver       string\n\tescrowToken    string // grc20 token\n\tescrowAmount   uint64\n\tstatus         ContractStatus\n\texpireAt       uint64\n\tclientFeedback string\n\tsellerFeedback string\n}\n\n// GNODAO STATE\nvar (\n\tconfig    Config\n\tcontracts []Contract\n)\n\n// GNODAO FUNCTIONS\nfunc UpdateConfig(daoAdmin string) {\n\tif config.daoAdmin == \"\" {\n\t\tconfig.daoAdmin = daoAdmin\n\t\treturn\n\t}\n\tcaller := std.GetOrigCaller()\n\tif config.daoAdmin != caller.String() {\n\t\tpanic(\"not allowed to update daoAdmin\")\n\t}\n\n\tconfig.daoAdmin = daoAdmin\n}\n\nfunc CurrentRealm() string {\n\treturn std.CurrentRealm().Addr().String()\n}\n\nfunc CreateContract(\n\treceiver string,\n\tescrowToken string, // grc20 token\n\tescrowAmount uint64,\n\tduration uint64,\n) {\n\tcaller := std.GetOrigCaller()\n\tif duration == 0 {\n\t\tpanic(\"invalid duration\")\n\t}\n\tif escrowToken == \"\" {\n\t\tpanic(\"invalid escrow token\")\n\t}\n\tif escrowAmount == 0 {\n\t\tpanic(\"invalid escrow amount\")\n\t}\n\n\tcontractId := uint64(len(contracts))\n\tcontracts = append(contracts, Contract{\n\t\tid:           contractId,\n\t\tsender:       caller.String(),\n\t\treceiver:     receiver,\n\t\tescrowToken:  escrowToken,\n\t\tescrowAmount: escrowAmount,\n\t\tstatus:       CREATED,\n\t\texpireAt:     uint64(time.Now().Unix()) + duration,\n\t})\n\tfoo20.TransferFrom(\n\t\tusers.AddressOrName(caller.String()),\n\t\tusers.AddressOrName(std.CurrentRealm().Addr().String()),\n\t\tescrowAmount)\n}\n\nfunc CancelContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != CREATED {\n\t\tpanic(\"contract can only be cancelled at CREATED status\")\n\t}\n\n\tif contract.sender != caller.String() {\n\t\tpanic(\"not authorized to cancel the contract\")\n\t}\n\n\tcontracts[contractId].status = CANCELED\n\n\tfoo20.Transfer(\n\t\tusers.AddressOrName(contract.sender),\n\t\tcontract.escrowAmount)\n}\n\nfunc AcceptContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != CREATED {\n\t\tpanic(\"contract can only be accepted at CREATED status\")\n\t}\n\n\tif contract.expireAt \u003c uint64(time.Now().Unix()) {\n\t\tpanic(\"contract already expired\")\n\t}\n\n\tif contract.receiver != caller.String() {\n\t\tpanic(\"only associated receiver is allowed to accept\")\n\t}\n\tcontracts[contractId].status = ACCEPTED\n}\n\nfunc PauseContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != ACCEPTED {\n\t\tpanic(\"contract can only be paused at ACCEPTED status\")\n\t}\n\n\tif contract.sender != caller.String() \u0026\u0026 contract.receiver != caller.String() {\n\t\tpanic(\"only contract sender or receiver can pause\")\n\t}\n\tcontracts[contractId].status = PAUSED\n}\n\nfunc CompleteContract(contractId uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != ACCEPTED {\n\t\tpanic(\"contract can only be completed at ACCEPTED status\")\n\t}\n\n\tif contract.sender != caller.String() {\n\t\tpanic(\"only contract sender can complete\")\n\t}\n\n\tfoo20.Transfer(\n\t\tusers.AddressOrName(contract.receiver),\n\t\tcontract.escrowAmount)\n\tcontracts[contractId].status = COMPLETED\n}\n\nfunc CompleteContractByDAO(contractId uint64, sellerAmount uint64) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != PAUSED {\n\t\tpanic(\"contract can only be processed by DAO at PAUSED status\")\n\t}\n\n\tif config.daoAdmin != caller.String() {\n\t\tpanic(\"only dao admin is allowed for this operation\")\n\t}\n\n\tclientAmount := contract.escrowAmount - sellerAmount\n\tcontracts[contractId].status = COMPLETED\n\n\tfoo20.Transfer(\n\t\tusers.AddressOrName(contract.receiver),\n\t\tsellerAmount)\n\tfoo20.Transfer(\n\t\tusers.AddressOrName(contract.sender),\n\t\tclientAmount)\n}\n\nfunc GiveFeedback(contractId uint64, feedback string) {\n\tcaller := std.GetOrigCaller()\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tcontract := contracts[contractId]\n\tif contract.status != COMPLETED {\n\t\tpanic(\"feedback can only be given after complete\")\n\t}\n\n\tif contract.sender == caller.String() {\n\t\tcontracts[contractId].clientFeedback = feedback\n\t} else if contract.receiver == caller.String() {\n\t\tcontracts[contractId].sellerFeedback = feedback\n\t} else {\n\t\tpanic(\"only contract participants can leave feedback\")\n\t}\n}\n\nfunc GetContracts(startAfter, limit uint64) []Contract {\n\tmax := uint64(len(contracts))\n\tif startAfter+limit \u003c max {\n\t\tmax = startAfter + limit\n\t}\n\treturn contracts[startAfter:max]\n}\n\nfunc RenderConfig() string {\n\treturn fmt.Sprintf(`{\n\t\t\"daoAdmin\": \"%s\"\n}`, config.daoAdmin)\n}\n\nfunc RenderContract(contractId uint64) string {\n\tif int(contractId) \u003e= len(contracts) {\n\t\tpanic(\"invalid contract id\")\n\t}\n\n\tc := contracts[contractId]\n\treturn fmt.Sprintf(`{\n\t\t\"id\": %d,\n\t\t\"sender\": \"%s\",\n\t\t\"receiver\": \"%s\",\n\t\t\"escrowToken\": \"%s\",\n\t\t\"escrowAmount\": %d,\n\t\t\"status\": %d,\n\t\t\"expireAt\": %d\n}`, c.id, c.sender, c.receiver, c.escrowToken, c.escrowAmount, int(c.status), c.expireAt)\n}\n\nfunc RenderContracts(startAfter uint64, limit uint64) string {\n\tcontracts := GetContracts(startAfter, limit)\n\trendered := \"[\"\n\tfor index, contract := range contracts {\n\t\trendered += RenderContract(contract.id)\n\t\tif index != len(contracts)-1 {\n\t\t\trendered += \",\\n\"\n\t\t}\n\t}\n\trendered += \"]\"\n\treturn rendered\n}\n"},{"Name":"escrow_test.gno","Body":"package escrow\n"},{"Name":"gno.mod","Body":"module gno.land/r/demo/teritori/escrow\n\nrequire (\n    \"gno.land/p/demo/ufmt\" v0.0.0-latest\n\t\"gno.land/r/demo/foo20\" v0.0.0-latest\n\t\"gno.land/r/demo/users\" v0.0.0-latest\n)"},{"Name":"z_0_a_filetest.gno","Body":"package follow_test\nimport (\n\t\n\n\t\"gno.land/r/demo/teritori/follow\"\n)\n\nfunc main() {\n\tprintln(\"done\")\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/dkVmfYUyUCFkPwIhahS4gblP3VmfLgpVByc8RVewD5"},"signature":"VdPFnbClQItzQF2lPvMIaBSv8ZNiY7p17x/JVx+8FpcTMD+CHnyAaruCPt/pJhZ3r5qmMrbCCGtpgZOVkQ/kng=="}],"memo":""},"blockNum":"264279"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g14vxq5e5pt5sev7rkz2ej438scmxtylnzv5vnkw","package":{"Name":"follow","Path":"gno.land/p/demo/follow","Files":[{"Name":"follow.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\n\nvar users avl.Tree\n\nfunc Render() string {\n\treturn \"hello\"\n}\n\nfunc Follow(addr std.Address) {\n\t\n\tif string(std.GetOrigCaller()) == string(addr) {\n\t\tpanic(\"You cannot follow yourself\")\n\t}\n\tcallerUser := getUser(std.GetOrigCaller())\n\tfollowedUser := getUser(addr)\n\n\t//if _,ok:=callerUser.Following().Get(string(addr)); ok{\n\t//\tpanic(\"You Already follow this user\")\n\t//}\n\tcallerUser.Follow(followedUser)\n}\n\nfunc Unfollow(addr std.Address) {\n\tcallerUser := getUser(std.GetOrigCaller())\n\t//if _,ok:=callerUser.Following().Get(string(addr)); !ok{\n\t//\tpanic(\"You cannot unfollow a non followed user\")\n\t//}\n\n\tunfollowedUser := getUser(addr)\n\n\tcallerUser.Unfollow(unfollowedUser)\n}\n\n\nfunc Followers(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Followers()\n\tres := make([]std.Address,0, followers.Size())\n\tfollowers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t\tres = append(res, data.(std.Address))\n\t\treturn false\n\t})\n\treturn res\n}\n\nfunc Followed(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Following()\n\tres := make([]std.Address, 0, followers.Size())\n\tfollowers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t\tres = append(res, data.(std.Address))\n\t\treturn false\n\t})\n\treturn res\n}\n\nfunc FollowersCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Followers().Size())\n}\n\nfunc FollowedCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Following().Size())\n}\n\nfunc IsFollower(follower std.Address, followed std.Address) bool {\n\t_, isFollower := getUser(follower).Following().Get(string(followed))\n\treturn isFollower\n}\n\nfunc getUser(addr std.Address) *User {\n\tuser,ok := users.Get(string(addr))\n\tif ok{\n\t\treturn user.(*User)\n\t}\n\tnewUser := NewUser(addr)\n\tusers.Set(string(addr), newUser)\n\treturn newUser\n}"},{"Name":"follow_test.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/testutils\"\n\t\"testing\"\n\t\"std\"\n)\n\nvar caller std.Address\nvar test2 std.Address\nfunc init() {\n\tcaller = testutils.TestAddress(\"testUser\") // main\n\ttest2 = testutils.TestAddress(\"test2\")\n\t// register as caller\n\tstd.TestSetOrigCaller(caller)\n}\n\nfunc TestFollow_Unfollow(t *testing.T) {\n\tusers = avl.Tree{}\n\n\tcount := FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"Initial followers != 0\")\n    }\n\t\n\tisFollower := IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower before follow\")\n    }\n\tFollow(test2)\n\n\tisFollower = IsFollower(caller, test2)\n\tif !isFollower{\n        t.Fatalf(\"Should be follower\")\n    }\n\tcount = FollowersCount(test2)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tcount = FollowedCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tcount = FollowedCount(caller)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tfollowers:=Followers(test2)\n\tif string(followers[0]) != string(caller) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tfollowed:=Followed(caller)\n\tif string(followed[0]) != string(test2) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tUnfollow(test2)\n\tcount = FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tisFollower = IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower after unfollow\")\n    }\n}\n\nfunc TestFollow_twice(t *testing.T) {\n\tusers = avl.Tree{}\n\ttest2 := testutils.TestAddress(\"test2\")\n\tdefer func() {\n        if r := recover(); r == nil {\n\t\t\tt.Fatalf(\"should've panic\")\n        }\n    }()\n\tcaller := std.GetOrigCaller() \n\tFollow(test2)\n\tFollow(test2)\n}"},{"Name":"user.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\ntype User struct{\n\tfollowing *avl.Tree\n\tfollowers *avl.Tree\n\taddress std.Address\n}\n\nfunc NewUser(address std.Address) *User {\n\treturn \u0026User{\n\t\tfollowing: \u0026avl.Tree{},\n\t\tfollowers: \u0026avl.Tree{},\n\t\taddress: address,\n\t}\n}\n\n\nfunc( user*User) Following() *avl.Tree{\n\treturn user.following\n}\n\nfunc( user*User) Followers() *avl.Tree{\n\treturn user.followers\n}\n\n\nfunc( user*User) Follow(followedUser *User) {\n\tfollowedUser.addFollower(user.Address())\n\tuser.follow(followedUser.Address())\n}\n\nfunc( user*User) Unfollow(followedUser *User) {\n\tuser.following.Remove(string(followedUser.Address()))\n\tfollowedUser.followers.Remove(string(user.Address()))\n}\n\nfunc( user*User) addFollower(addr std.Address){\n\tuser.followers.Set(string(addr), addr)\n}\n\nfunc( user*User) follow(addr std.Address){\n\tuser.following.Set(string(addr), addr)\n}\n\nfunc( user*User) Address() std.Address {\n\treturn  user.address\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhPbY6ETOcN5nEFZ1BJbZLVlOUbnlRBPmdFEUfnfWXGh"},"signature":"JeJqa781rV+ZvJ4QpN0pa/sZAJ0bxVR6xU+3e2w4v3lArrSajFNTHnXAdvlV2K3Cunb109+ppuA1cSBwNsHF9Q=="}],"memo":""},"blockNum":"264282"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g14vxq5e5pt5sev7rkz2ej438scmxtylnzv5vnkw","package":{"Name":"follow","Path":"gno.land/r/demo/follow","Files":[{"Name":"follow.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\n\nvar users avl.Tree\n\nfunc Render() string {\n\treturn \"hello\"\n}\n\nfunc Follow(addr std.Address) {\n\t\n\tif string(std.GetOrigCaller()) == string(addr) {\n\t\tpanic(\"You cannot follow yourself\")\n\t}\n\tcallerUser := getUser(std.GetOrigCaller())\n\tfollowedUser := getUser(addr)\n\n\t//if _,ok:=callerUser.Following().Get(string(addr)); ok{\n\t//\tpanic(\"You Already follow this user\")\n\t//}\n\tcallerUser.Follow(followedUser)\n}\n\nfunc Unfollow(addr std.Address) {\n\tcallerUser := getUser(std.GetOrigCaller())\n\t//if _,ok:=callerUser.Following().Get(string(addr)); !ok{\n\t//\tpanic(\"You cannot unfollow a non followed user\")\n\t//}\n\n\tunfollowedUser := getUser(addr)\n\n\tcallerUser.Unfollow(unfollowedUser)\n}\n\n\nfunc Followers(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Followers()\n\tres := make([]std.Address,0, followers.Size())\n\tfollowers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t\tres = append(res, data.(std.Address))\n\t\treturn false\n\t})\n\treturn res\n}\n\nfunc Followed(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Following()\n\tres := make([]std.Address, 0, followers.Size())\n\tfollowers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t\tres = append(res, data.(std.Address))\n\t\treturn false\n\t})\n\treturn res\n}\n\nfunc FollowersCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Followers().Size())\n}\n\nfunc FollowedCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Following().Size())\n}\n\nfunc IsFollower(follower std.Address, followed std.Address) bool {\n\t_, isFollower := getUser(follower).Following().Get(string(followed))\n\treturn isFollower\n}\n\nfunc getUser(addr std.Address) *User {\n\tuser,ok := users.Get(string(addr))\n\tif ok{\n\t\treturn user.(*User)\n\t}\n\tnewUser := NewUser(addr)\n\tusers.Set(string(addr), newUser)\n\treturn newUser\n}"},{"Name":"follow_test.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/testutils\"\n\t\"testing\"\n\t\"std\"\n)\n\nvar caller std.Address\nvar test2 std.Address\nfunc init() {\n\tcaller = testutils.TestAddress(\"testUser\") // main\n\ttest2 = testutils.TestAddress(\"test2\")\n\t// register as caller\n\tstd.TestSetOrigCaller(caller)\n}\n\nfunc TestFollow_Unfollow(t *testing.T) {\n\tusers = avl.Tree{}\n\n\tcount := FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"Initial followers != 0\")\n    }\n\t\n\tisFollower := IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower before follow\")\n    }\n\tFollow(test2)\n\n\tisFollower = IsFollower(caller, test2)\n\tif !isFollower{\n        t.Fatalf(\"Should be follower\")\n    }\n\tcount = FollowersCount(test2)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tcount = FollowedCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tcount = FollowedCount(caller)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tfollowers:=Followers(test2)\n\tif string(followers[0]) != string(caller) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tfollowed:=Followed(caller)\n\tif string(followed[0]) != string(test2) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tUnfollow(test2)\n\tcount = FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tisFollower = IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower after unfollow\")\n    }\n}\n\nfunc TestFollow_twice(t *testing.T) {\n\tusers = avl.Tree{}\n\ttest2 := testutils.TestAddress(\"test2\")\n\tdefer func() {\n        if r := recover(); r == nil {\n\t\t\tt.Fatalf(\"should've panic\")\n        }\n    }()\n\tcaller := std.GetOrigCaller() \n\tFollow(test2)\n\tFollow(test2)\n}"},{"Name":"gno.mod","Body":"module gno.land/r/demo/follow\n\nrequire gno.land/p/demo/avl v0.0.0-latest\n"},{"Name":"user.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\ntype User struct{\n\tfollowing *avl.Tree\n\tfollowers *avl.Tree\n\taddress std.Address\n}\n\nfunc NewUser(address std.Address) *User {\n\treturn \u0026User{\n\t\tfollowing: \u0026avl.Tree{},\n\t\tfollowers: \u0026avl.Tree{},\n\t\taddress: address,\n\t}\n}\n\n\nfunc( user*User) Following() *avl.Tree{\n\treturn user.following\n}\n\nfunc( user*User) Followers() *avl.Tree{\n\treturn user.followers\n}\n\n\nfunc( user*User) Follow(followedUser *User) {\n\tfollowedUser.addFollower(user.Address())\n\tuser.follow(followedUser.Address())\n}\n\nfunc( user*User) Unfollow(followedUser *User) {\n\tuser.following.Remove(string(followedUser.Address()))\n\tfollowedUser.followers.Remove(string(user.Address()))\n}\n\nfunc( user*User) addFollower(addr std.Address){\n\tuser.followers.Set(string(addr), addr)\n}\n\nfunc( user*User) follow(addr std.Address){\n\tuser.following.Set(string(addr), addr)\n}\n\nfunc( user*User) Address() std.Address {\n\treturn  user.address\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhPbY6ETOcN5nEFZ1BJbZLVlOUbnlRBPmdFEUfnfWXGh"},"signature":"b/6PBRucD5ujEwqjj5XzgV2WXfdi8mCpyUwECqY4GxQKARkDOEv9qn+8DvrvvjgBsiBXCjs5wDUQ+mgoSpuxDw=="}],"memo":""},"blockNum":"264286"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1at2h7kdhz2m9lv6azn54mwu4wl95k94wu90uwj","package":{"Name":"test","Path":"gno.land/r/demo/test","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjY1KRI2dUlqXcYaaYr8Q9EUbIcbllZuk16mkqXwXfRD"},"signature":"9cHOwLjESG6+9qMCu2o+VTxgUNYFIqtke5hgrN/RF/BKFdYHEBqVPWr8do1y7icJ+EoUke0woU44vMWDKO5TLg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"264302"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g14vxq5e5pt5sev7rkz2ej438scmxtylnzv5vnkw","package":{"Name":"follow","Path":"gno.land/p/demo/teritori/follow","Files":[{"Name":"follow.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\n\nvar users avl.Tree\n\nfunc Render() string {\n\treturn \"hello\"\n}\n\nfunc Follow(addr std.Address) {\n\t\n\tif string(std.GetOrigCaller()) == string(addr) {\n\t\tpanic(\"You cannot follow yourself\")\n\t}\n\tcallerUser := getUser(std.GetOrigCaller())\n\tfollowedUser := getUser(addr)\n\n\tif _,_ ,ok:=callerUser.Following().Get(string(addr)); ok{\n\t\tpanic(\"You Already follow this user\")\n\t}\n\tcallerUser.Follow(followedUser)\n}\n\nfunc Unfollow(addr std.Address) {\n\tcallerUser := getUser(std.GetOrigCaller())\n\tif _,ok:=callerUser.Following().Get(string(addr)); !ok{\n\t\tpanic(\"You cannot unfollow a non followed user\")\n\t}\n\n\tunfollowedUser := getUser(addr)\n\n\tcallerUser.Unfollow(unfollowedUser)\n}\n\n\nfunc Followers(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Followers()\n\tres := make([]std.Address,0, followers.Size())\n\tfollowers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t\tres = append(res, data.(std.Address))\n\t\treturn false\n\t})\n\treturn res\n}\n\nfunc Followed(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Following()\n\tres := make([]std.Address, 0, followers.Size())\n\tfollowers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t\tres = append(res, data.(std.Address))\n\t\treturn false\n\t})\n\treturn res\n}\n\nfunc FollowersCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Followers().Size())\n}\n\nfunc FollowedCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Following().Size())\n}\n\nfunc IsFollower(follower std.Address, followed std.Address) bool {\n\t_, isFollower := getUser(follower).Following().Get(string(followed))\n\treturn isFollower\n}\n\nfunc getUser(addr std.Address) *User {\n\tuser,ok := users.Get(string(addr))\n\tif ok{\n\t\treturn user.(*User)\n\t}\n\tnewUser := NewUser(addr)\n\tusers.Set(string(addr), newUser)\n\treturn newUser\n}"},{"Name":"follow_test.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/testutils\"\n\t\"testing\"\n\t\"std\"\n)\n\nvar caller std.Address\nvar test2 std.Address\nfunc init() {\n\tcaller = testutils.TestAddress(\"testUser\") // main\n\ttest2 = testutils.TestAddress(\"test2\")\n\t// register as caller\n\tstd.TestSetOrigCaller(caller)\n}\n\nfunc TestFollow_Unfollow(t *testing.T) {\n\tusers = avl.Tree{}\n\n\tcount := FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"Initial followers != 0\")\n    }\n\t\n\tisFollower := IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower before follow\")\n    }\n\tFollow(test2)\n\n\tisFollower = IsFollower(caller, test2)\n\tif !isFollower{\n        t.Fatalf(\"Should be follower\")\n    }\n\tcount = FollowersCount(test2)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tcount = FollowedCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tcount = FollowedCount(caller)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tfollowers:=Followers(test2)\n\tif string(followers[0]) != string(caller) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tfollowed:=Followed(caller)\n\tif string(followed[0]) != string(test2) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tUnfollow(test2)\n\tcount = FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tisFollower = IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower after unfollow\")\n    }\n}\n\nfunc TestFollow_twice(t *testing.T) {\n\tusers = avl.Tree{}\n\ttest2 := testutils.TestAddress(\"test2\")\n\tdefer func() {\n        if r := recover(); r == nil {\n\t\t\tt.Fatalf(\"should've panic\")\n        }\n    }()\n\tcaller := std.GetOrigCaller() \n\tFollow(test2)\n\tFollow(test2)\n}"},{"Name":"gno.mod","Body":"module gno.land/p/demo/teritori/follow\n\nrequire gno.land/p/demo/avl v0.0.0-latest\n"},{"Name":"user.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\ntype User struct{\n\tfollowing *avl.Tree\n\tfollowers *avl.Tree\n\taddress std.Address\n}\n\nfunc NewUser(address std.Address) *User {\n\treturn \u0026User{\n\t\tfollowing: \u0026avl.Tree{},\n\t\tfollowers: \u0026avl.Tree{},\n\t\taddress: address,\n\t}\n}\n\n\nfunc( user*User) Following() *avl.Tree{\n\treturn user.following\n}\n\nfunc( user*User) Followers() *avl.Tree{\n\treturn user.followers\n}\n\n\nfunc( user*User) Follow(followedUser *User) {\n\tfollowedUser.addFollower(user.Address())\n\tuser.follow(followedUser.Address())\n}\n\nfunc( user*User) Unfollow(followedUser *User) {\n\tuser.following.Remove(string(followedUser.Address()))\n\tfollowedUser.followers.Remove(string(user.Address()))\n}\n\nfunc( user*User) addFollower(addr std.Address){\n\tuser.followers.Set(string(addr), addr)\n}\n\nfunc( user*User) follow(addr std.Address){\n\tuser.following.Set(string(addr), addr)\n}\n\nfunc( user*User) Address() std.Address {\n\treturn  user.address\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhPbY6ETOcN5nEFZ1BJbZLVlOUbnlRBPmdFEUfnfWXGh"},"signature":"agk8kZvVKddNUnL6TmX7rhJKKeyMn82UBNLQ2iJUmMNRcb8cPZmA6bmN/FtN+ReU85YqQMqqU0gKeOOJdClRhw=="}],"memo":""},"blockNum":"264304"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g14vxq5e5pt5sev7rkz2ej438scmxtylnzv5vnkw","package":{"Name":"follow","Path":"gno.land/p/demo/teritori/follow","Files":[{"Name":"follow.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\n\nvar users avl.Tree\n\nfunc Render() string {\n\treturn \"hello\"\n}\n\nfunc Follow(addr std.Address) {\n\t\n\tif string(std.GetOrigCaller()) == string(addr) {\n\t\tpanic(\"You cannot follow yourself\")\n\t}\n\tcallerUser := getUser(std.GetOrigCaller())\n\tfollowedUser := getUser(addr)\n\n\tif _,_ ,ok:=callerUser.Following().Get(string(addr)); ok{\n\t\tpanic(\"You Already follow this user\")\n\t}\n\tcallerUser.Follow(followedUser)\n}\n\nfunc Unfollow(addr std.Address) {\n\tcallerUser := getUser(std.GetOrigCaller())\n\tif _,_,ok:=callerUser.Following().Get(string(addr)); !ok{\n\t\tpanic(\"You cannot unfollow a non followed user\")\n\t}\n\n\tunfollowedUser := getUser(addr)\n\n\tcallerUser.Unfollow(unfollowedUser)\n}\n\n\nfunc Followers(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Followers()\n\tres := make([]std.Address,0, followers.Size())\n\tfollowers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t\tres = append(res, data.(std.Address))\n\t\treturn false\n\t})\n\treturn res\n}\n\nfunc Followed(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Following()\n\tres := make([]std.Address, 0, followers.Size())\n\tfollowers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t\tres = append(res, data.(std.Address))\n\t\treturn false\n\t})\n\treturn res\n}\n\nfunc FollowersCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Followers().Size())\n}\n\nfunc FollowedCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Following().Size())\n}\n\nfunc IsFollower(follower std.Address, followed std.Address) bool {\n\t_, isFollower := getUser(follower).Following().Get(string(followed))\n\treturn isFollower\n}\n\nfunc getUser(addr std.Address) *User {\n\tuser,ok := users.Get(string(addr))\n\tif ok{\n\t\treturn user.(*User)\n\t}\n\tnewUser := NewUser(addr)\n\tusers.Set(string(addr), newUser)\n\treturn newUser\n}"},{"Name":"follow_test.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/testutils\"\n\t\"testing\"\n\t\"std\"\n)\n\nvar caller std.Address\nvar test2 std.Address\nfunc init() {\n\tcaller = testutils.TestAddress(\"testUser\") // main\n\ttest2 = testutils.TestAddress(\"test2\")\n\t// register as caller\n\tstd.TestSetOrigCaller(caller)\n}\n\nfunc TestFollow_Unfollow(t *testing.T) {\n\tusers = avl.Tree{}\n\n\tcount := FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"Initial followers != 0\")\n    }\n\t\n\tisFollower := IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower before follow\")\n    }\n\tFollow(test2)\n\n\tisFollower = IsFollower(caller, test2)\n\tif !isFollower{\n        t.Fatalf(\"Should be follower\")\n    }\n\tcount = FollowersCount(test2)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tcount = FollowedCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tcount = FollowedCount(caller)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tfollowers:=Followers(test2)\n\tif string(followers[0]) != string(caller) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tfollowed:=Followed(caller)\n\tif string(followed[0]) != string(test2) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tUnfollow(test2)\n\tcount = FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tisFollower = IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower after unfollow\")\n    }\n}\n\nfunc TestFollow_twice(t *testing.T) {\n\tusers = avl.Tree{}\n\ttest2 := testutils.TestAddress(\"test2\")\n\tdefer func() {\n        if r := recover(); r == nil {\n\t\t\tt.Fatalf(\"should've panic\")\n        }\n    }()\n\tcaller := std.GetOrigCaller() \n\tFollow(test2)\n\tFollow(test2)\n}"},{"Name":"gno.mod","Body":"module gno.land/p/demo/teritori/follow\n\nrequire gno.land/p/demo/avl v0.0.0-latest\n"},{"Name":"user.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\ntype User struct{\n\tfollowing *avl.Tree\n\tfollowers *avl.Tree\n\taddress std.Address\n}\n\nfunc NewUser(address std.Address) *User {\n\treturn \u0026User{\n\t\tfollowing: \u0026avl.Tree{},\n\t\tfollowers: \u0026avl.Tree{},\n\t\taddress: address,\n\t}\n}\n\n\nfunc( user*User) Following() *avl.Tree{\n\treturn user.following\n}\n\nfunc( user*User) Followers() *avl.Tree{\n\treturn user.followers\n}\n\n\nfunc( user*User) Follow(followedUser *User) {\n\tfollowedUser.addFollower(user.Address())\n\tuser.follow(followedUser.Address())\n}\n\nfunc( user*User) Unfollow(followedUser *User) {\n\tuser.following.Remove(string(followedUser.Address()))\n\tfollowedUser.followers.Remove(string(user.Address()))\n}\n\nfunc( user*User) addFollower(addr std.Address){\n\tuser.followers.Set(string(addr), addr)\n}\n\nfunc( user*User) follow(addr std.Address){\n\tuser.following.Set(string(addr), addr)\n}\n\nfunc( user*User) Address() std.Address {\n\treturn  user.address\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhPbY6ETOcN5nEFZ1BJbZLVlOUbnlRBPmdFEUfnfWXGh"},"signature":"7zC4zkgN6DfNLbiZs94q+/QGEWcMKiAOLvdogF+p7GR2oK0YrnQA46FU9DWXVetrGJwRWJOwZkAEdvFkHZkruA=="}],"memo":""},"blockNum":"264306"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1at2h7kdhz2m9lv6azn54mwu4wl95k94wu90uwj","package":{"Name":"follow","Path":"gno.land/r/demo/follow","Files":[{"Name":"follow.gno","Body":"package follow\n\nimport (\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/avl\"\n)\n\ntype User struct {\n\taddress std.Address\n\tfollowers avl.Tree\n\tfolloweds avl.Tree\n}\n\nvar (\n\taddr2User  avl.Tree // std.Address -\u003e *User\n)\n\nfunc getOrCreateUser(addr std.Address) *User {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif ok {\n\t\treturn userI.(*User)\n\t}\n\tuser := \u0026User{\n\t\taddress: addr,\n\t}\n\taddr2User.Set(addr.String(), user)\n\treturn user\n}\n\nfunc Follow(addr std.Address) {\n\t// get caller/inviter.\n\tcaller := std.GetOrigCaller()\n\tcallerUser := getOrCreateUser(caller)\n\tuser := getOrCreateUser(addr)\n\tcallerUser.followeds.Set(addr.String(), user)\n\tuser.followers.Set(caller.String(), callerUser)\n}\n\nfunc Unfollow(addr std.Address) {\n\t// get caller/inviter.\n\tcaller := std.GetOrigCaller()\n\tcallerUser := getOrCreateUser(caller)\n\tuser := getOrCreateUser(addr)\n\tif  _, ok := callerUser.followeds.Remove(addr.String()); !ok {\n\t\tpanic(\"followed not found\")\n\t}\n\tif _, ok := user.followers.Remove(caller.String()); !ok {\n\t\tpanic(\"follower not found\")\n\t}\n}\n\nfunc Followers(addr std.Address) []std.Address {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\tuser := userI.(*User)\n\tfollowers := make([]std.Address, 0, user.followers.Size())\n\tuser.followers.Iterate(\"\", \"\",  func(key string, value interface{}) bool  {\n\t\tfollower := value.(*User)\n\t\tfollowers = append(followers, follower.address)\n\t\treturn false\n\t})\n\treturn followers\n}\n\nfunc FollowedCount(addr std.Address) uint{\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn 0\n\t}\n\tuser := userI.(*User)\n\treturn uint(user.followeds.Size())\n}\n\nfunc Followed(addr std.Address) []std.Address {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn nil\n\t}\n\tuser := userI.(*User)\n\tfolloweds := make([]std.Address, 0, user.followeds.Size())\n\tuser.followeds.Iterate(\"\", \"\",  func(key string, value interface{}) bool  {\n\t\tfollowed := value.(*User)\n\t\tfolloweds = append(followeds, followed.address)\n\t\treturn false\n\t})\n\treturn followeds\n}\n\nfunc FollowersCount(addr std.Address) uint {\n\tuserI, ok := addr2User.Get(addr.String())\n\tif !ok {\n\t\treturn 0\n\t}\n\tuser := userI.(*User)\n\treturn uint(user.followers.Size())\n}\n\nfunc IsFollower(follower std.Address, followed std.Address) bool {\n\tuserI, ok := addr2User.Get(followed.String())\n\tif !ok {\n\t\treturn false\n\t}\n\tuser := userI.(*User)\n\t_, ok = user.followers.Get(follower.String())\n\treturn ok\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AjY1KRI2dUlqXcYaaYr8Q9EUbIcbllZuk16mkqXwXfRD"},"signature":"SpySzSisHNDaJwJG/NxoqNTdqpSeQ74qgd1rMBOTD4YK1ASJwChkBpS3nw8hZFxvW7gJMBqa7RWVyfpGq6tF9w=="}],"memo":"Deployed through play.gno.land"},"blockNum":"264308"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g14vxq5e5pt5sev7rkz2ej438scmxtylnzv5vnkw","package":{"Name":"follow","Path":"gno.land/p/demo/teritori/follow","Files":[{"Name":"follow.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\n\nvar users avl.Tree\n\nfunc Render() string {\n\treturn \"hello\"\n}\n\nfunc Follow(addr std.Address) {\n\t\n\tif string(std.GetOrigCaller()) == string(addr) {\n\t\tpanic(\"You cannot follow yourself\")\n\t}\n\tcallerUser := getUser(std.GetOrigCaller())\n\tfollowedUser := getUser(addr)\n\n\tif _,_ ,ok:=callerUser.Following().Get(string(addr)); ok{\n\t\tpanic(\"You Already follow this user\")\n\t}\n\tcallerUser.Follow(followedUser)\n}\n\nfunc Unfollow(addr std.Address) {\n\tcallerUser := getUser(std.GetOrigCaller())\n\tif _,_,ok:=callerUser.Following().Get(string(addr)); !ok{\n\t\tpanic(\"You cannot unfollow a non followed user\")\n\t}\n\n\tunfollowedUser := getUser(addr)\n\n\tcallerUser.Unfollow(unfollowedUser)\n}\n\n\nfunc Followers(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Followers()\n\tres := make([]std.Address,0, followers.Size())\n\t//followers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t//\tres = append(res, data.(std.Address))\n\t//\treturn false\n\t//})\n\treturn res\n}\n\nfunc Followed(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Following()\n\tres := make([]std.Address, 0, followers.Size())\n\t//followers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t//\tres = append(res, data.(std.Address))\n\t//\treturn false\n\t//})\n\treturn res\n}\n\nfunc FollowersCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Followers().Size())\n}\n\nfunc FollowedCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Following().Size())\n}\n\nfunc IsFollower(follower std.Address, followed std.Address) bool {\n\t_, isFollower := getUser(follower).Following().Get(string(followed))\n\treturn isFollower\n}\n\nfunc getUser(addr std.Address) *User {\n\tuser,ok := users.Get(string(addr))\n\tif ok{\n\t\treturn user.(*User)\n\t}\n\tnewUser := NewUser(addr)\n\tusers.Set(string(addr), newUser)\n\treturn newUser\n}"},{"Name":"follow_test.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/testutils\"\n\t\"testing\"\n\t\"std\"\n)\n\nvar caller std.Address\nvar test2 std.Address\nfunc init() {\n\tcaller = testutils.TestAddress(\"testUser\") // main\n\ttest2 = testutils.TestAddress(\"test2\")\n\t// register as caller\n\tstd.TestSetOrigCaller(caller)\n}\n\nfunc TestFollow_Unfollow(t *testing.T) {\n\tusers = avl.Tree{}\n\n\tcount := FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"Initial followers != 0\")\n    }\n\t\n\tisFollower := IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower before follow\")\n    }\n\tFollow(test2)\n\n\tisFollower = IsFollower(caller, test2)\n\tif !isFollower{\n        t.Fatalf(\"Should be follower\")\n    }\n\tcount = FollowersCount(test2)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tcount = FollowedCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tcount = FollowedCount(caller)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tfollowers:=Followers(test2)\n\tif string(followers[0]) != string(caller) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tfollowed:=Followed(caller)\n\tif string(followed[0]) != string(test2) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tUnfollow(test2)\n\tcount = FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tisFollower = IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower after unfollow\")\n    }\n}\n\nfunc TestFollow_twice(t *testing.T) {\n\tusers = avl.Tree{}\n\ttest2 := testutils.TestAddress(\"test2\")\n\tdefer func() {\n        if r := recover(); r == nil {\n\t\t\tt.Fatalf(\"should've panic\")\n        }\n    }()\n\tcaller := std.GetOrigCaller() \n\tFollow(test2)\n\tFollow(test2)\n}"},{"Name":"gno.mod","Body":"module gno.land/p/demo/teritori/follow\n\nrequire gno.land/p/demo/avl v0.0.0-latest\n"},{"Name":"user.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\ntype User struct{\n\tfollowing *avl.Tree\n\tfollowers *avl.Tree\n\taddress std.Address\n}\n\nfunc NewUser(address std.Address) *User {\n\treturn \u0026User{\n\t\tfollowing: \u0026avl.Tree{},\n\t\tfollowers: \u0026avl.Tree{},\n\t\taddress: address,\n\t}\n}\n\n\nfunc( user*User) Following() *avl.Tree{\n\treturn user.following\n}\n\nfunc( user*User) Followers() *avl.Tree{\n\treturn user.followers\n}\n\n\nfunc( user*User) Follow(followedUser *User) {\n\tfollowedUser.addFollower(user.Address())\n\tuser.follow(followedUser.Address())\n}\n\nfunc( user*User) Unfollow(followedUser *User) {\n\tuser.following.Remove(string(followedUser.Address()))\n\tfollowedUser.followers.Remove(string(user.Address()))\n}\n\nfunc( user*User) addFollower(addr std.Address){\n\tuser.followers.Set(string(addr), addr)\n}\n\nfunc( user*User) follow(addr std.Address){\n\tuser.following.Set(string(addr), addr)\n}\n\nfunc( user*User) Address() std.Address {\n\treturn  user.address\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhPbY6ETOcN5nEFZ1BJbZLVlOUbnlRBPmdFEUfnfWXGh"},"signature":"URIMl+Hb+h9uW3luOqWckUVevQSYptZ1NI3YEJhj0g5f2oSS0oLkG1FB2px4Dy2jAIcgU5hPliulwr6GIr/QzQ=="}],"memo":""},"blockNum":"264310"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1at2h7kdhz2m9lv6azn54mwu4wl95k94wu90uwj","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"xLzEM4g525fAnXTGzdKM+nICiMrfp/b9IoxDyeESkqgATRZvTz5JCCnQwbsLagy+1eXTqQALUq0VUNCpkBeb2w=="}],"memo":""},"blockNum":"264312"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g14vxq5e5pt5sev7rkz2ej438scmxtylnzv5vnkw","package":{"Name":"follow","Path":"gno.land/p/demo/teritori/follow","Files":[{"Name":"follow.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\n\nvar users avl.Tree\n\nfunc Render() string {\n\treturn \"hello\"\n}\n\nfunc Follow(addr std.Address) {\n\t\n\tif string(std.GetOrigCaller()) == string(addr) {\n\t\tpanic(\"You cannot follow yourself\")\n\t}\n\tcallerUser := getUser(std.GetOrigCaller())\n\tfollowedUser := getUser(addr)\n\n\tif _,_ ,ok:=callerUser.Following().Get(string(addr)); ok{\n\t\tpanic(\"You Already follow this user\")\n\t}\n\tcallerUser.Follow(followedUser)\n}\n\nfunc Unfollow(addr std.Address) {\n\tcallerUser := getUser(std.GetOrigCaller())\n\tif _,_,ok:=callerUser.Following().Get(string(addr)); !ok{\n\t\tpanic(\"You cannot unfollow a non followed user\")\n\t}\n\n\tunfollowedUser := getUser(addr)\n\n\tcallerUser.Unfollow(unfollowedUser)\n}\n\n\nfunc Followers(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Followers()\n\tres := make([]std.Address,followers.Size())\n\t//followers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t//\tres = append(res, data.(std.Address))\n\t//\treturn false\n\t//})\n\treturn res\n}\n\nfunc Followed(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Following()\n\tres := make([]std.Address,followers.Size())\n\t//followers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t//\tres = append(res, data.(std.Address))\n\t//\treturn false\n\t//})\n\treturn res\n}\n\nfunc FollowersCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Followers().Size())\n}\n\nfunc FollowedCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Following().Size())\n}\n\nfunc IsFollower(follower std.Address, followed std.Address) bool {\n\t_,_, isFollower := getUser(follower).Following().Get(string(followed))\n\treturn isFollower\n}\n\nfunc getUser(addr std.Address) *User {\n\tuser,ok := users.Get(string(addr))\n\tif ok{\n\t\treturn user.(*User)\n\t}\n\tnewUser := NewUser(addr)\n\tusers.Set(string(addr), newUser)\n\treturn newUser\n}"},{"Name":"follow_test.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/testutils\"\n\t\"testing\"\n\t\"std\"\n)\n\nvar caller std.Address\nvar test2 std.Address\nfunc init() {\n\tcaller = testutils.TestAddress(\"testUser\") // main\n\ttest2 = testutils.TestAddress(\"test2\")\n\t// register as caller\n\tstd.TestSetOrigCaller(caller)\n}\n\nfunc TestFollow_Unfollow(t *testing.T) {\n\tusers = avl.Tree{}\n\n\tcount := FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"Initial followers != 0\")\n    }\n\t\n\tisFollower := IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower before follow\")\n    }\n\tFollow(test2)\n\n\tisFollower = IsFollower(caller, test2)\n\tif !isFollower{\n        t.Fatalf(\"Should be follower\")\n    }\n\tcount = FollowersCount(test2)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tcount = FollowedCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tcount = FollowedCount(caller)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tfollowers:=Followers(test2)\n\tif string(followers[0]) != string(caller) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tfollowed:=Followed(caller)\n\tif string(followed[0]) != string(test2) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tUnfollow(test2)\n\tcount = FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tisFollower = IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower after unfollow\")\n    }\n}\n\nfunc TestFollow_twice(t *testing.T) {\n\tusers = avl.Tree{}\n\ttest2 := testutils.TestAddress(\"test2\")\n\tdefer func() {\n        if r := recover(); r == nil {\n\t\t\tt.Fatalf(\"should've panic\")\n        }\n    }()\n\tcaller := std.GetOrigCaller() \n\tFollow(test2)\n\tFollow(test2)\n}"},{"Name":"gno.mod","Body":"module gno.land/p/demo/teritori/follow\n\nrequire gno.land/p/demo/avl v0.0.0-latest\n"},{"Name":"user.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\ntype User struct{\n\tfollowing *avl.Tree\n\tfollowers *avl.Tree\n\taddress std.Address\n}\n\nfunc NewUser(address std.Address) *User {\n\treturn \u0026User{\n\t\tfollowing: \u0026avl.Tree{},\n\t\tfollowers: \u0026avl.Tree{},\n\t\taddress: address,\n\t}\n}\n\n\nfunc( user*User) Following() *avl.Tree{\n\treturn user.following\n}\n\nfunc( user*User) Followers() *avl.Tree{\n\treturn user.followers\n}\n\n\nfunc( user*User) Follow(followedUser *User) {\n\tfollowedUser.addFollower(user.Address())\n\tuser.follow(followedUser.Address())\n}\n\nfunc( user*User) Unfollow(followedUser *User) {\n\tuser.following.Remove(string(followedUser.Address()))\n\tfollowedUser.followers.Remove(string(user.Address()))\n}\n\nfunc( user*User) addFollower(addr std.Address){\n\tuser.followers.Set(string(addr), addr)\n}\n\nfunc( user*User) follow(addr std.Address){\n\tuser.following.Set(string(addr), addr)\n}\n\nfunc( user*User) Address() std.Address {\n\treturn  user.address\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhPbY6ETOcN5nEFZ1BJbZLVlOUbnlRBPmdFEUfnfWXGh"},"signature":"CE0+kA0lcWFaY3/xuyeADQ5pzhrgKW7tCEckzg+dF+gHZM6OSQ2gIoUKC7LHtU6ERrd5MTQLM4GRziwkp/XMOw=="}],"memo":""},"blockNum":"264314"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1at2h7kdhz2m9lv6azn54mwu4wl95k94wu90uwj","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"cKqajiXopICLyak1SXcQAJk7k5c17bP/VuFqFJ66wnZEfEzjBV+n0IzDuE2mpsgwhrO3HWZBevBvbeiTkLCvpQ=="}],"memo":""},"blockNum":"264316"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1at2h7kdhz2m9lv6azn54mwu4wl95k94wu90uwj","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"99/H3PnbVNJnZIeJ1aVy1iepBRf19+ThctfB7dOLs3gSmgYEQ/vp/bP9x5gJe0DsJBkld2Mvo6HP99JU9bgX4w=="}],"memo":""},"blockNum":"264318"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g14vxq5e5pt5sev7rkz2ej438scmxtylnzv5vnkw","package":{"Name":"follow","Path":"gno.land/p/demo/teritori/follow","Files":[{"Name":"follow.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\n\nvar users avl.Tree\n\nfunc Render() string {\n\treturn \"hello\"\n}\n\nfunc Follow(addr std.Address) {\n\t\n\tif string(std.GetOrigCaller()) == string(addr) {\n\t\tpanic(\"You cannot follow yourself\")\n\t}\n\tcallerUser := getUser(std.GetOrigCaller())\n\tfollowedUser := getUser(addr)\n\n\tif _,_ ,ok:=callerUser.Following().Get(string(addr)); ok{\n\t\tpanic(\"You Already follow this user\")\n\t}\n\tcallerUser.Follow(followedUser)\n}\n\nfunc Unfollow(addr std.Address) {\n\tcallerUser := getUser(std.GetOrigCaller())\n\tif _,_,ok:=callerUser.Following().Get(string(addr)); !ok{\n\t\tpanic(\"You cannot unfollow a non followed user\")\n\t}\n\n\tunfollowedUser := getUser(addr)\n\n\tcallerUser.Unfollow(unfollowedUser)\n}\n\n\nfunc Followers(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Followers()\n\tres := make([]std.Address,followers.Size())\n\t//followers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t//\tres = append(res, data.(std.Address))\n\t//\treturn false\n\t//})\n\treturn res\n}\n\nfunc Followed(addr std.Address) []std.Address {\n\tfollowers := getUser(addr).Following()\n\tres := make([]std.Address,followers.Size())\n\t//followers.Iterate(\"\",\"\", func(key string, data interface{}) bool{\t\t\n\t//\tres = append(res, data.(std.Address))\n\t//\treturn false\n\t//})\n\treturn res\n}\n\nfunc FollowersCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Followers().Size())\n}\n\nfunc FollowedCount(addr std.Address) uint {\n\treturn uint(getUser(addr).Following().Size())\n}\n\nfunc IsFollower(follower std.Address, followed std.Address) bool {\n\t_,_, isFollower := getUser(follower).Following().Get(string(followed))\n\treturn isFollower\n}\n\nfunc getUser(addr std.Address) *User {\n\t_,user,ok := users.Get(string(addr))\n\tif ok{\n\t\treturn user.(*User)\n\t}\n\tnewUser := NewUser(addr)\n\tusers.Set(string(addr), newUser)\n\treturn newUser\n}"},{"Name":"follow_test.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"gno.land/p/demo/testutils\"\n\t\"testing\"\n\t\"std\"\n)\n\nvar caller std.Address\nvar test2 std.Address\nfunc init() {\n\tcaller = testutils.TestAddress(\"testUser\") // main\n\ttest2 = testutils.TestAddress(\"test2\")\n\t// register as caller\n\tstd.TestSetOrigCaller(caller)\n}\n\nfunc TestFollow_Unfollow(t *testing.T) {\n\tusers = avl.Tree{}\n\n\tcount := FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"Initial followers != 0\")\n    }\n\t\n\tisFollower := IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower before follow\")\n    }\n\tFollow(test2)\n\n\tisFollower = IsFollower(caller, test2)\n\tif !isFollower{\n        t.Fatalf(\"Should be follower\")\n    }\n\tcount = FollowersCount(test2)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tcount = FollowedCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tcount = FollowedCount(caller)\n\tif count != 1 {\n        t.Fatalf(\"followers != 1\")\n    }\n\n\tfollowers:=Followers(test2)\n\tif string(followers[0]) != string(caller) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tfollowed:=Followed(caller)\n\tif string(followed[0]) != string(test2) {\n\t\tt.Fatalf(\"Different address\")\n\t}\n\n\tUnfollow(test2)\n\tcount = FollowersCount(test2)\n\tif count != 0 {\n        t.Fatalf(\"followers != 0\")\n    }\n\n\tisFollower = IsFollower(caller, test2)\n\tif isFollower{\n        t.Fatalf(\"is follower after unfollow\")\n    }\n}\n\nfunc TestFollow_twice(t *testing.T) {\n\tusers = avl.Tree{}\n\ttest2 := testutils.TestAddress(\"test2\")\n\tdefer func() {\n        if r := recover(); r == nil {\n\t\t\tt.Fatalf(\"should've panic\")\n        }\n    }()\n\tcaller := std.GetOrigCaller() \n\tFollow(test2)\n\tFollow(test2)\n}"},{"Name":"gno.mod","Body":"module gno.land/p/demo/teritori/follow\n\nrequire gno.land/p/demo/avl v0.0.0-latest\n"},{"Name":"user.gno","Body":"package follow\n\nimport(\n\t\"gno.land/p/demo/avl\"\n\t\"std\"\n)\n\ntype User struct{\n\tfollowing *avl.Tree\n\tfollowers *avl.Tree\n\taddress std.Address\n}\n\nfunc NewUser(address std.Address) *User {\n\treturn \u0026User{\n\t\tfollowing: \u0026avl.Tree{},\n\t\tfollowers: \u0026avl.Tree{},\n\t\taddress: address,\n\t}\n}\n\n\nfunc( user*User) Following() *avl.Tree{\n\treturn user.following\n}\n\nfunc( user*User) Followers() *avl.Tree{\n\treturn user.followers\n}\n\n\nfunc( user*User) Follow(followedUser *User) {\n\tfollowedUser.addFollower(user.Address())\n\tuser.follow(followedUser.Address())\n}\n\nfunc( user*User) Unfollow(followedUser *User) {\n\tuser.following.Remove(string(followedUser.Address()))\n\tfollowedUser.followers.Remove(string(user.Address()))\n}\n\nfunc( user*User) addFollower(addr std.Address){\n\tuser.followers.Set(string(addr), addr)\n}\n\nfunc( user*User) follow(addr std.Address){\n\tuser.following.Set(string(addr), addr)\n}\n\nfunc( user*User) Address() std.Address {\n\treturn  user.address\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AhPbY6ETOcN5nEFZ1BJbZLVlOUbnlRBPmdFEUfnfWXGh"},"signature":"PiFn6xBMTooBT1zwMcqj0kcR/MWHvxRD5Np5aNBjhRkjex5GDO+ZtPcqX/vdd+StoBBH+U9GSW9ywNTJo64CKQ=="}],"memo":""},"blockNum":"264320"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1d46t4el0dduffs5j56t2razaeyvnmkxlduduuw","send":"","pkg_path":"gno.land/r/demo/follow","func":"Follow","args":["g14vxq5e5pt5sev7rkz2ej438scmxtylnzv5vnkw"]}],"fee":{"gas_wanted":"5000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/dkVmfYUyUCFkPwIhahS4gblP3VmfLgpVByc8RVewD5"},"signature":"deKYl9AauINUliUi8BpYzD0mwruL7aeaOEwOjCmXfCITvQFwF2nFprtpr/TQAWXCpPFXTWIxMvPRQqW3004/tQ=="}],"memo":""},"blockNum":"264324"}
