{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"Qglj3mT0lWlHyBhoePKj5JyH/oNeXf0r7bwRguFq7043ANHdaQe6T5XM4yOBZM7UeRLYT/VYGmzQZi1MyNtvXg=="}],"memo":""},"blockNum":"368857"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","to_address":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1CWzHwZ/FjY00hsAQhl6pnpuR3ulUiXgkMx0Te14ATX"},"signature":"f7lv5LK18boLVBENEQrqKff4HjiiTHHr7+jdz7v9/z1M66mdjVJ/2GvERCdPzryg08MCtmf0y9bezv5jCafnnw=="}],"memo":""},"blockNum":"368859"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"J45ebPmN+MBdv1hJCdA1Pay70e5Bj92y7goIKO4V4AV4whQKDb+zvWvjG48lHzzrUz1DBB/LGO8GHsSLEGrkFA=="}],"memo":""},"blockNum":"368891"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","to_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","amount":"2000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A1CWzHwZ/FjY00hsAQhl6pnpuR3ulUiXgkMx0Te14ATX"},"signature":"w9u3HoM4Iw0K48/e81Vec2qbG8bIgVbK3Ztc7yVmssh8+bnQpZnc7RHlhqARV+s5cJd+3jFg4twaJ3Ix33VnBA=="}],"memo":""},"blockNum":"368893"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"Fih/RWeo4CGeSyPl9QrSgIJXzkmNR8norey3r+aoX2M3DBy23SDsnGiGGYqWqa2TPU3B4ksh5BBA1NAOkrTzQQ=="}],"memo":""},"blockNum":"368988"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test10/poll","func":"Vote","args":["Red"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"3MeBWynRklNkGi9knJGk8NpiD9PDMPo8tqIgO24Ns8ViBEvoRXHMeeLgUbhfcH62o8OhpOWVVvgxNyWx0nuXFQ=="}],"memo":"Called through gno.studio"},"blockNum":"369513"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"hello","Path":"gno.land/p/sdm96/testpkgs/v7/hello","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"},{"Name":"gno.mod","Body":"module \"gno.land/p/sdm96/testpkgs/v7/hello\""}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"tQtCylpcuXs6m4XKTrovyF28nu5azQtMXB84LlL9sZUqoxZluwpilRiLrcSt9z/3IluiWU+aVMBfC0+nKIonZA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"369627"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"hello","Path":"gno.land/p/sdm96/testpkgs/v9/hello","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"},{"Name":"gno.mod","Body":"module \"gno.land/p/sdm96/testpkgs/v9/hello\""}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"Cv71Zqbze8bfE4oqbae31i7tRE2WE4DyXUAluISRxVxWsz3CT4VouSPWWtm8Bqzyi7s/Qpfgcmdan1rYxZvNqw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"369684"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"hello","Path":"gno.land/r/sdm96/testpkgs/v9/hello","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"},{"Name":"gno.mod","Body":"module \"gno.land/r/sdm96/testpkgs/v9/hello\""}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"qg6C+iebGipR0nshEFv/e/Lnx2qE+P43dgxJ/D1llbQGxNsuTG6Tkvq1W6g3nqZrV5jMJaTw1+cXs86vmFSWsg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"369687"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"hello","Path":"gno.land/r/sdm96/testpkgs/v10/hello","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"},{"Name":"gno.mod","Body":"module \"gno.land/r/sdm96/testpkgs/v10/hello\""}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"T48kCuPkZ5VCDiqHkAM/dMKCys53CPuDjDhrzqxfvDFuFP4j6EWYvensm++Lpzi2kK9BLCi1qQ+Xi9gszuE2mg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"369697"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"hello","Path":"gno.land/p/sdm96/testpkgs/v10/hello","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"},{"Name":"gno.mod","Body":"module \"gno.land/p/sdm96/testpkgs/v10/hello\""}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"KiiUnWYDOFF75T2K7Zn9k5PW4n0rZPXPW/vmpoMHACconwFGS+k7u2Q6ycVq11G/4TiicSbzIJJd/tlT7brnVw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"369699"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","to_address":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"xysZk2EoY39Q2yQ/bvVNm6pnUtYrGsnl6N6YBJ2u8lB2ILbSAl2tnqtu1SNNaXhhlEnhjtkoJdTdvtXPZVy0qw=="}],"memo":""},"blockNum":"369727"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"hello","Path":"gno.land/r/sdm96/testpkgs/v11/hello","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"},{"Name":"gno.mod","Body":"module \"gno.land/r/sdm96/testpkgs/v11/hello\""}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"CanKO2GgfE3QH6/G1WRasW+z4+YZrt1N9+C3I9Oc5INNTRoLgfxeDWbeYH0iX9DUlGb5ZHJLsJIC7bSv2Wg/YA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"369754"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"3B0hzeC0Dpts8Ekr8VYChrzFFENU5/y67roC4nOtf0Z5owLu+e6tN2Pdyy3JRkHbSEymP5I3/lEV8KiisFh7nQ=="}],"memo":""},"blockNum":"369763"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/boom/boom","func":"Approve","args":["",""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"KqP+XxNnKWwQtyC8aQDzsxeCLKndHV0fmgnj3Vr2G8kq+bjZEwZp5r9q7TD4VvyMmisfS90KXhtGMS4jHaULng=="}],"memo":"Called through gno.studio"},"blockNum":"369765"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","send":"","pkg_path":"gno.land/r/boom/boom","func":"Approve","args":["abc1","123"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+FhNtsXHjLfSJk1lB8FbiL4mGPjc50Kt81J7EKDnJ2y"},"signature":"bnIHJzKnuonKGf9L6B7bEkOd6IBHjsb7vizLMoANOiYehctXe+UGgkkJuMW/6EleyzFWo+qKBC7HN5KjTCpYEg=="}],"memo":"Called through gno.studio"},"blockNum":"369771"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1uf8u5jf2m9l80g0zsfq7tufl3qufqc4393jtkl","send":"","pkg_path":"gno.land/r/test10/poll","func":"Vote","args":["testtesttesttesttesttesttesttesttesttesttest testntesttestntestntesttestntestntesttestntestntesttest testntesttest testntesttest testntesttest"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AitYIWT3az4Jx3hGzTapJ6hyalJ6EYgqQCpYoe7Gx2Sw"},"signature":"UACEUq2chKPIZLHFiawexyi8O1g/zs2g1zUzbGmx295rjM0j9S+Zs9oTMgikLeuEej8FZF9V3mdxlw/UcxizUw=="}],"memo":"Called through gno.studio"},"blockNum":"369781"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","send":"","pkg_path":"gno.land/r/feedback/simplefeedback","func":"SubmitFeedback","args":["nice app"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"t92/fO5R/VMvsTU2VPUUBbEGiFgtVJ9yBovqMU+EIolxIhX6H4CksUDa1R2Y0wY0scZGIm/N4dIHCngoHyA8VQ=="}],"memo":"Called through gno.studio"},"blockNum":"369906"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","send":"","pkg_path":"gno.land/r/feedback/simplefeedback","func":"RespondToFeedback","args":["15","thanks"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"os6IGJe6+IBnKtchCqM+EPM5SAm7j24nm27ZfLYigeNMk5LL0oC3WbevvcUc4DoCc8lN5VbRMCO4JObiQynwgA=="}],"memo":"Called through gno.studio"},"blockNum":"369908"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","send":"","pkg_path":"gno.land/r/hello144/hello","func":"Render","args":[""]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"VEtHnM4wq2CRT479q0Qy9p19VNgfSCOOFOn5b5JSbesyt9wfQu8Avo9588Bgx3F2fyysMJYM8TjyTubeOL7A9w=="}],"memo":"Called through gno.studio"},"blockNum":"369910"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1mq7g0jszdmn4qdpc9tq94w0gyex37su892n80m","send":"","pkg_path":"gno.land/r/feedback/simplefeedback","func":"RespondToFeedback","args":["","uhiauhiushdiuahdiushdiuahdiuashdiauhiushdiuahdi uahdiuahsiduhaiudhsaiuhdiaushdiauhd iuashdiuashiduahiduahsiuhd"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj4n/wDjh0XMfvdUr+hyBWgWDRQtdkeLylo8Wy4d8X7L"},"signature":"V7R0IjlKVdDvJd7bSlIvmG5AkAx5UBshS1DR5GSUbkx2TzXJUHf4JGfAipt3hqz1EvxlW1We5GJfak6XYNtq7w=="}],"memo":"Called through gno.studio"},"blockNum":"370066"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1mq7g0jszdmn4qdpc9tq94w0gyex37su892n80m","send":"","pkg_path":"gno.land/r/feedback/simplefeedback","func":"RespondToFeedback","args":["","iuhiuhiuhiuhuhhhhhhhhhhhhhhhhhhhhashgudygduyagduyguygduagduagudguah;ojaoiygoaiugyduaiuduoaiudoayduyagiudftuayidyfuygihohdtryfugihoj"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj4n/wDjh0XMfvdUr+hyBWgWDRQtdkeLylo8Wy4d8X7L"},"signature":"KsZ28y+u8HlHx0eZGr8qZ4RGSBmks0tuVEUP1odqHMBv8fKQOMiJ8rSYAM8uEwN0VyfGeBgaEIWgJpZ0Pdy2MA=="}],"memo":"Called through gno.studio"},"blockNum":"370069"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1mq7g0jszdmn4qdpc9tq94w0gyex37su892n80m","send":"","pkg_path":"gno.land/r/feedback/simplefeedback","func":"RespondToFeedback","args":["","fooasdadasdadadasdadasdasda"]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aj4n/wDjh0XMfvdUr+hyBWgWDRQtdkeLylo8Wy4d8X7L"},"signature":"a+dzXXRl+adwCjx+0hC3zVavyg8ZoxrkpJwEmBiJrlQZdF4UHJ6W7E89S0EvcND+FRykHUE3xVyj4tyF0nYI/w=="}],"memo":"Called through gno.studio"},"blockNum":"370075"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"simplefeedback","Path":"gno.land/r/sdm96/simplefeedback/v1/simplefeedback","Files":[{"Name":"package.gno","Body":"package simplefeedback\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Date\n\tRespondAt time.Date\n}\n\ntype addrSet map[std.Address]struct{}\n\nfunc newAddrSet(items ...std.Address) addrSet {\n\tset := make(addrSet, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nfunc (s addrSet) Has(addr std.Address) bool {\n\t_, ok := s[addr]\n\treturn ok\n}\n\nvar (\n\tnextID    = 0\n\tisLocked  = false\n\tfeedbacks map[int]Feedback\n\townerAddr = std.Address(\"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j\")\n\tmodsAddrs = newAddrSet(\n\t// TODO: add mod wallets\n\t)\n)\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || modsAddrs.Has(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tnextID++\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(path string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"},{"Name":"gno.mod","Body":"module gno.land/r/sdm96/simplefeedback/v1/simplefeedback\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"wYWdNKIhm+M0CsXyEz40qDioIDoMQh96V11f7RsiZKEdJ+dSLemiBYQdRdnsbu1z4RHL5D4SPdW7KJtp0sO1mQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"370173"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1fdk37llu9sfu9mdupmzjx34v2nrrdnk2757e0j","package":{"Name":"v1","Path":"gno.land/r/sdm95/feedback/v1","Files":[{"Name":"package.gno","Body":"package v1\n\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Date\n\tRespondAt time.Date\n}\n\ntype addrSet map[std.Address]struct{}\n\nfunc newAddrSet(items ...std.Address) addrSet {\n\tset := make(addrSet, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nfunc (s addrSet) Has(addr std.Address) bool {\n\t_, ok := s[addr]\n\treturn ok\n}\n\nvar (\n\tnextID    = 0\n\tisLocked  = false\n\tfeedbacks map[int]Feedback\n\townerAddr = std.Address(\n\t// TODO: put realm's owner address\n\t)\n\tmodsAddrs = newAddrSet(\n\t// TODO: add mod wallets\n\t)\n)\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || modsAddrs.Has(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tnextID++\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(path string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"},{"Name":"gno.mod","Body":"module gno.land/r/sdm95/feedback/v1\n\nrequire (\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AmPvFPM2RBSwYBtGZFUaTlIxSgHAZ+s2TXUiGG37/FcC"},"signature":"HCXrqZJq+M/kX3YcnGi4/DINsagt0AbDBfe/E3+Q/80yohISyUrGzYib58Fml9L7lebmMnL3txrVWjBdodx2Hw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"370186"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dnllrdzwfhxv3evyk09y48mgn5phfjvtyrlzm7","package":{"Name":"v1v1v1","Path":"gno.land/r/connecttesting/v1v1v1","Files":[{"Name":"v1v1v1.gno","Body":"package v1v1v1\nimport (\n\t\"std\"\n\t\"strings\"\n\t\"time\"\n\n\t\"gno.land/p/demo/ufmt\"\n)\n\nconst maxCharsCount = 256\n\ntype Feedback struct {\n\tID        int\n\tUser      std.Address\n\tContent   string\n\tResponse  string\n\tCreatedAt time.Date\n\tRespondAt time.Date\n}\n\ntype addrSet map[std.Address]struct{}\n\nfunc newAddrSet(items ...std.Address) addrSet {\n\tset := make(addrSet, len(items))\n\tfor _, v := range items {\n\t\tset[v] = struct{}{}\n\t}\n\treturn set\n}\n\nfunc (s addrSet) Has(addr std.Address) bool {\n\t_, ok := s[addr]\n\treturn ok\n}\n\nvar (\n\tnextID    = 0\n\tisLocked  = false\n\tfeedbacks map[int]Feedback\n\townerAddr = std.Address(\n\t// TODO: put realm's owner address\n\t)\n\tmodsAddrs = newAddrSet(\n\t// TODO: add mod wallets\n\t)\n)\n\n// assertIsModerator checks whether a current caller is owner or a moderator.\nfunc assertIsModerator() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr || modsAddrs.Has(actorId)\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertIsOwner checks whether a current caller is a realm owner.\nfunc assertIsOwner() {\n\tactorId := std.GetOrigCaller()\n\tisAllowed := actorId == ownerAddr\n\tif !isAllowed {\n\t\tpanic(\"Access Denied\")\n\t}\n}\n\n// assertNotLocked interrupts execution if realm is locked.\nfunc assertNotLocked() {\n\tif isLocked {\n\t\tpanic(\"Realm is locked\")\n\t}\n}\n\n// LockFeedback locks the realm, preventing further feedback submissions.\nfunc LockFeedback() string {\n\tassertIsOwner()\n\tisLocked = true\n\treturn \"Locked\"\n}\n\n// UnlockFeedback unlocks the realm, allowing further feedback submissions.\nfunc UnlockFeedback() string {\n\tassertIsOwner()\n\tisLocked = false\n\treturn \"Unlocked\"\n}\n\n// SubmitFeedback allows users to submit their feedback about GnoStudio.\nfunc SubmitFeedback(message string) string {\n\tassertNotLocked()\n\n\tmessage = strings.TrimSpace(message)\n\tif message == \"\" {\n\t\tpanic(\"Message can't be empty\")\n\t}\n\n\tif len(message) \u003e maxCharsCount {\n\t\tpanic(\"Message is too long\")\n\t}\n\n\tid := nextID\n\tnextID++\n\tfeedbacks[id] = Feedback{\n\t\tID:        id,\n\t\tUser:      std.GetOrigCaller(),\n\t\tContent:   message,\n\t\tCreatedAt: time.Now(),\n\t}\n\n\treturn ufmt.Sprintf(\"Feedback submitted successfully with ID: %d\", id)\n}\n\n// BanFeedback used by moderation team to remove feedbacks which violate code of conduct.\nfunc BanFeedback(feedbackID int) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\t// Still keep the record but remove harmful message.\n\tfeedback.Content = \"\"\n\tfeedbacks[feedbackID] = feedback\n\treturn \"Feedback was removed by moderator\"\n}\n\n// RespondToFeedback allows any moderator or realm owner to leave a response to a feedback.\nfunc RespondToFeedback(feedbackID int, response string) string {\n\tassertIsModerator()\n\tassertNotLocked()\n\n\tfeedback, ok := feedbacks[feedbackID]\n\tif !ok {\n\t\tpanic(\"Feedback not found\")\n\t}\n\n\tif feedback.Response != \"\" {\n\t\tpanic(\"Feedback already has a response\")\n\t}\n\n\tresponse = strings.TrimSpace(response)\n\tif response == \"\" {\n\t\tpanic(\"Response can't be empty\")\n\t}\n\n\tif len(response) \u003e maxCharsCount {\n\t\tpanic(\"Response is too long\")\n\t}\n\n\tfeedback.RespondAt = time.Now()\n\tfeedback.Response = response\n\tfeedbacks[feedbackID] = feedback\n\n\treturn \"Response recorded successfully\"\n}\n\n// Render displays all feedback and responses.\nfunc Render(path string) string {\n\tsb := strings.Builder{}\n\tsb.WriteString(\"# Feedback Collection\\n\")\n\tfor id, fb := range feedbacks {\n\t\tsb.WriteString(ufmt.Sprintf(\"## Feedback #%d\\n\", id))\n\t\tsb.WriteString(ufmt.Sprintf(\"From `%s` at %s\\n\\n\", fb.User, fb.CreatedAt.Format(time.RFC1123)))\n\t\tif fb.Content == \"\" {\n\t\t\tsb.WriteString(\"*Feedback was removed by moderator*\")\n\t\t} else {\n\t\t\tsb.WriteString(fb.Content)\n\t\t}\n\t\tsb.WriteString(\"\\n\")\n\n\t\tif fb.Response == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tsb.WriteString(\"### Response\")\n\t\tsb.WriteString(ufmt.Sprintf(\"At %s\\n\\n\", fb.CreatedAt.Format(time.RFC1123)))\n\t\tsb.WriteString(fb.Response)\n\t\tsb.WriteString(\"\\n\\n\")\n\t}\n\treturn sb.String()\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsGEi/6/N0zRtRCWxHb7KZ1Z/BTfZIc77fvtkSRJlmwQ"},"signature":"q8lfI0jVwrtHfVt/VySfjzGqJiD9OGTMaqcgeDzaD705Kq8fmpQbGMJfgXEJvqweenGzFL92qRSd0FZ3k5zE4w=="}],"memo":"Deployed through play.gno.land"},"blockNum":"370203"}
