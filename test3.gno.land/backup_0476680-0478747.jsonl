{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1v9f94dnlxu8eqwqvyw7lt8l5udey8483n0422a","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"t5OzwIWUhwuPYfT4A/erLZqfTmCipbI1x0QqLFKiGAkyqLsj079cXFrDQCRBqmoorVXud2fTsypWFdS7Xkrzxg=="}],"memo":""},"blockNum":"476725"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1v9f94dnlxu8eqwqvyw7lt8l5udey8483n0422a","package":{"Name":"raffle","Path":"gno.land/r/bobbyluig/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nimport gnoraffle \"gno.land/r/gc24/raffle\"\n\nfunc init() {\n  gnoraffle.RegisterCode(\"EBA2g4FaeX\")\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgJndxHHtUkvZ+2kZRObeqHV07sklt/SMNssJ3dBG310"},"signature":"Z5Ivj/qzgyzE8W6RPimqzS2upiN6R2HH/eicCgCaBrB9lmIjJa5mb2VY4DBuDRBgwSjrHhrXKQG2qlqmMr2QRA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"476727"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1v9f94dnlxu8eqwqvyw7lt8l5udey8483n0422a","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"cFMcOAvQ8ELHzYAuD2rEZb7acHO1+hE1yRh1ygCfRbIdSDMXeEhqOkK7mmuTK/VIx+w7VW7o37X3ke+h2phzfg=="}],"memo":""},"blockNum":"476730"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1v9f94dnlxu8eqwqvyw7lt8l5udey8483n0422a","package":{"Name":"raffle","Path":"gno.land/r/bobbyluig/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nimport \"gno.land/r/gc24/raffle\"\n\nfunc init() {\n  raffle.RegisterCode(\"EBA2g4FaeX\")\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgJndxHHtUkvZ+2kZRObeqHV07sklt/SMNssJ3dBG310"},"signature":"w20wMOPLiutZaZVezyghkWKL0yGZ+fN+aBk1F1cgv0IOKCW/XsoQtPTSwgSCZjcaRuUvFvIOV69FV2CDMdyiyw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"476732"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1v9f94dnlxu8eqwqvyw7lt8l5udey8483n0422a","package":{"Name":"raffle","Path":"gno.land/r/bobbyluig/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nimport \"gno.land/p/demo/ufmt\"\n\nfunc init() {\n  // raffle.RegisterCode(\"EBA2g4FaeX\")\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgJndxHHtUkvZ+2kZRObeqHV07sklt/SMNssJ3dBG310"},"signature":"t1H3IiCW1FvoVFb5xQ9/7obrA0DJonzdWcjlL/AE5ZFR4w6pPYQbwFHflpmOcBoCpQUhk6FO+Hu+vj0Z4JrcPg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"476734"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1v9f94dnlxu8eqwqvyw7lt8l5udey8483n0422a","package":{"Name":"raffle","Path":"gno.land/r/bobbyluig/raffle","Files":[{"Name":"package.gno","Body":"package main\n\nimport \"gno.land/r/gc24/raffle\"\n\nfunc init() {\n  raffle.RegisterCode(\"EBA2g4FaeX\")\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgJndxHHtUkvZ+2kZRObeqHV07sklt/SMNssJ3dBG310"},"signature":"xy2avwIm7VPxGmuNXM29rueJeI/IJMejHNmU+knpG3pgsQsNtiQVKLd4LsR1hkzD/iEspyfsL3AwypJT5ffAng=="}],"memo":"Deployed through play.gno.land"},"blockNum":"476737"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1v9f94dnlxu8eqwqvyw7lt8l5udey8483n0422a","package":{"Name":"raffle1","Path":"gno.land/r/bobbyluig/raffle1","Files":[{"Name":"package.gno","Body":"package raffle1\n\nimport \"gno.land/r/gc24/raffle\"\n\nfunc init() {\n  raffle.RegisterCode(\"EBA2g4FaeX\")\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgJndxHHtUkvZ+2kZRObeqHV07sklt/SMNssJ3dBG310"},"signature":"Bg3Bnm/+Rk1aZGnvlpzq8Hgn1dO7Za0R25V7hbMBvSo2nQutGV17QJzdQiLKpPdBMHXyngDlPuc316JXRaB5Mw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"476739"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g16dkm6ynx9n3llh99fymm4ayky24yreph7n0c7v","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"eSi7v3SNetGFlbHKBmPPDfVKDmMydRdPUcyjGU+UybhNMYFUhvNfayUsFw+3T4rkfQzGkouhtzyaE1JPRGqP7g=="}],"memo":""},"blockNum":"476748"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g16dkm6ynx9n3llh99fymm4ayky24yreph7n0c7v","package":{"Name":"mlin","Path":"gno.land/r/gc24/mlin","Files":[{"Name":"package.gno","Body":"package hello\n\nimport (\n  \"gno.land/r/gc24/raffle\"\n)\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n\nfunc init() {\n  raffle.RegisterCode(\"xUxoTd3T4F\")\n  raffle.RegisterUsername(\"miranda-lin\")\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsqNCH60X8s6zMvXzChVhBUhbuXs2B5twhfzmLvi667h"},"signature":"1y0RBcOJHKNmsi1CnaJYKl1VykVdRdYLKMmVlSy6xf0hzEV78D1i4LNmbOwSYAWTZ/R+BWXUMv8ZSuuDzlEuPQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"476750"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g16dkm6ynx9n3llh99fymm4ayky24yreph7n0c7v","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"+atQlZSZxN3WxMajE8YQ+SZFZFTUReMGEknks98Q+Q4dAsO/a1fbzB6SRKc/e4ZuW8+GVnM6VfF1LqL/oCsZXg=="}],"memo":""},"blockNum":"476752"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g16dkm6ynx9n3llh99fymm4ayky24yreph7n0c7v","package":{"Name":"mlin","Path":"gno.land/r/gc24/mlin","Files":[{"Name":"package.gno","Body":"package mlin\n\nimport (\n  \"gno.land/r/gc24/raffle\"\n)\n\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n\nfunc init() {\n  raffle.RegisterCode(\"xUxoTd3T4F\")\n  raffle.RegisterUsername(\"miranda-lin\")\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AsqNCH60X8s6zMvXzChVhBUhbuXs2B5twhfzmLvi667h"},"signature":"xXGY809Fa8ssLgLYQJahyISYzVd2/EbG9TalZcKoHZpTuz6Sn+lqXDDQ/uZmoUIFkxPTnADLGwYsoaG2BEG2eQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"476754"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1v9f94dnlxu8eqwqvyw7lt8l5udey8483n0422a","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"BIFvSRvfsTqQ97PtA7kwVfoDpq1BbS4lIismxn9isVc0KBPc/KxqV73BdTST2glAeR98+Ayq0Y4juE9kboQZZw=="}],"memo":""},"blockNum":"476762"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1v9f94dnlxu8eqwqvyw7lt8l5udey8483n0422a","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"MimF811BuWVeSHVYTBArX/mkT80h/Q1Fi1j/70mXh7sq/9Xgl/oPrUK+4VztH8DXSRnYyfRqGZwphNVPrXSXew=="}],"memo":""},"blockNum":"476764"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g16dkm6ynx9n3llh99fymm4ayky24yreph7n0c7v","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"asFgeGkoY1KviR5woMwB4m2GwFTJIXWLL/C6VrbzcK8vvR4ZHSi3xv8/Mj48b6XAxfHF6GkqYm7ahkTvp6k1Vg=="}],"memo":""},"blockNum":"476766"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1v9f94dnlxu8eqwqvyw7lt8l5udey8483n0422a","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"iSdAjHpJz5vlB5hmWqiipO1J54JsXtMBa7EGFODHn/NMuMK7zyA8Sj431e+04VVNY1khHqnHMzkiFPfXbFqSCQ=="}],"memo":""},"blockNum":"476768"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1v9f94dnlxu8eqwqvyw7lt8l5udey8483n0422a","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"VPHn2PM1cN5P4ho+lWmvuraAs907dbvpM829bi86eIJue8GQaYpqeEGA/+Bzy0qEfMnwjn0qReYMa1Fq+WRKtQ=="}],"memo":""},"blockNum":"476770"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lrnsh8vhpx043y0496gvaf0x5a4jug5r05qcan","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"Mmc35t9a1PdRH9VQFGUyuLgy4ZglcDk/CRIBQwcjIfBSlEAZRWHAI5KkgrXesTiv0pmUrWsFxNyFkJbNlfsdQQ=="}],"memo":""},"blockNum":"476772"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1v9f94dnlxu8eqwqvyw7lt8l5udey8483n0422a","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"kwceo+Ew3dhseQAs42cK+dLIKmraKwAuTt4lBv4yinJ2q925Ltq4q7xzU6T5e6bIrZXhYVkBgPxF8OSkCm1vIg=="}],"memo":""},"blockNum":"476774"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lrnsh8vhpx043y0496gvaf0x5a4jug5r05qcan","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"TxsBe18OuKjUFYSzVkLF2npuQDMuHqVJDSF/XJ1I2OJ8DxlyXDoSeRmc/ItyhQ1B2w75M+jyr9pMR816fiGxQw=="}],"memo":""},"blockNum":"476778"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lrnsh8vhpx043y0496gvaf0x5a4jug5r05qcan","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"MscvEIfag4jfhDr4LPhbJqK2KNfzQwdKQE+uGEwu9Tk6AllFqtoB1BkTqAQwR7tmIh0SSy7TckDvd6Y1IgX/iw=="}],"memo":""},"blockNum":"476780"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g16dkm6ynx9n3llh99fymm4ayky24yreph7n0c7v","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"A6lr+64RPU+tv3oAdbH31o09TeiyEXgMt2c30OLoDuFRHvAzzalZYvLIhCdVhb5EGhe1zsCtC81cCD9wGoFeRA=="}],"memo":""},"blockNum":"476791"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g128faxq7dtvt6m9lc4mwy9dn026y6tzmfdmhjga","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"q1tLlbHH3IBokoiezubxSh9dOVM4F80sHn1Dq4VEAnE3bmD1GwJLHznyyG28pCZcxL2WE2aMgQVJNN/uKhIw2Q=="}],"memo":""},"blockNum":"476793"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g16dkm6ynx9n3llh99fymm4ayky24yreph7n0c7v","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"M+E1hTFF7/oIZxWaxgAgoqubPIb7m/Ku1GAw1al/tekUud+picFga9O/6bZf1cBoET9z4RVnJ3THzedqDycErA=="}],"memo":""},"blockNum":"476795"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g16dkm6ynx9n3llh99fymm4ayky24yreph7n0c7v","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"ZNQwV/36+C/O1tmkC8s4frO7Cwlx71DvP2D+Zh2hWglMOFxKBXMU6zN/cs6ZSLuqHbgFffn/Zy/uoecK43tUQA=="}],"memo":""},"blockNum":"476801"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g16dkm6ynx9n3llh99fymm4ayky24yreph7n0c7v","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"4Y2K1wuUPYGHpHMFUibha0GY31fji4hqOBUH69/AVQoT9vUuEWoZFw6dPQp/Da/sAf0lOfoBSuWXlt/EwLBYsg=="}],"memo":""},"blockNum":"476804"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g16dkm6ynx9n3llh99fymm4ayky24yreph7n0c7v","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"9LMO2QCjneko1LejtikqTovXLaMRq4aRaIZS8iql23RaBbe8ku7Bv9rME/S0lA9sC27tu72q8NJBDFoSv3RXvA=="}],"memo":""},"blockNum":"476808"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g16dkm6ynx9n3llh99fymm4ayky24yreph7n0c7v","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"2dQJ6il8ScPbKgRCgtnrE3P7Ce7jmKlp3laYh3y6xOUs0H3lmjgnGv1nOVyRPsdZnDb3utA7Ss+w4mflTH5H9w=="}],"memo":""},"blockNum":"476810"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g16dkm6ynx9n3llh99fymm4ayky24yreph7n0c7v","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"aOCpBu5beOIRWDlTOF9at6RGl6JGXz0OYoqWfr1zxLN5Q7pCRtuFkzgnMQprE9OC9WUBDvI/5BmmmuiaptLHqg=="}],"memo":""},"blockNum":"476813"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g128faxq7dtvt6m9lc4mwy9dn026y6tzmfdmhjga","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"+zF7aNR7Lvq3LVlOy/l1K9q8KUtpO6DIBnjTtbFYZGlbl/YOu+dAJKBlMgdZbYqYQOdJTQ2rzhaYpE1ifqKzYQ=="}],"memo":""},"blockNum":"476846"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g128faxq7dtvt6m9lc4mwy9dn026y6tzmfdmhjga","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"wXNtQ8sGQ7HZ87khdevBXNdyRUtPAlId9zFLqILsQh4jEM+nPeA8L3JKZ2GPr+HSbnDfZ612DiruU09SqZH+nQ=="}],"memo":""},"blockNum":"476854"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g128faxq7dtvt6m9lc4mwy9dn026y6tzmfdmhjga","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"tzdz776F+74bT5WEXWqYq/n41GUr7O25tj6epQEOkuAEVaJpQ96yEzdQa40F1wX5777LubBTBeYwQcm3jIy2Kg=="}],"memo":""},"blockNum":"476857"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g128faxq7dtvt6m9lc4mwy9dn026y6tzmfdmhjga","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"0UOu3wLA46WwDis8pYmdTq7Ob3AqU0bQdy8rz7z/JS0NIohYYRolQkR7+F4bRdhnmLE8fZ85DsCJnkGxER4JPQ=="}],"memo":""},"blockNum":"476859"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g128faxq7dtvt6m9lc4mwy9dn026y6tzmfdmhjga","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"LOdcn5mwRoIbiaQTh6NRxRb/dwyqNo/Ur9T+z8qeumss5YsrdM45qoRG1B6IxaAJyiIj9F1JLCPD763iguC5Gw=="}],"memo":""},"blockNum":"476861"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1efqa3wrdjta8syxzgsprhjgdtn42u8h3eaz6q6","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"8BhjOZdpqqo02rFX2banBekjgRRiaKX5WCRSz4abuL1tGuPgfArPdxnzzrxfC6OerBNXY9x6+AkvjlRiIyUh0A=="}],"memo":""},"blockNum":"476869"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1efqa3wrdjta8syxzgsprhjgdtn42u8h3eaz6q6","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"DKBl2fSwFSiwj3DYVu5My+bVbQQwWbrUn94uNpeG4xQsF+BuXe7WRzr8sVMz8awOlAE+Vacjbzzu9USxJSS/1g=="}],"memo":""},"blockNum":"476871"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1efqa3wrdjta8syxzgsprhjgdtn42u8h3eaz6q6","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"VuUqF/oDUD5JeGX/08zbh1KuNErKcLH3EUpXmr0gl2slKldy8eo/mMubX+8Ap8RSNYsxNdZS5OD6gcohqqIy6Q=="}],"memo":""},"blockNum":"476875"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1efqa3wrdjta8syxzgsprhjgdtn42u8h3eaz6q6","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"RYGVhmxb2nMmm27VoiV1NXQ0AImNKS8cOWcy1s+30mk0lQ6G1ry+hxigWl/8X7A6xEbbrUdEnFZFNDVN9Q+ncQ=="}],"memo":""},"blockNum":"476878"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1efqa3wrdjta8syxzgsprhjgdtn42u8h3eaz6q6","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"44RBJ943ODTp8DhGxPQ3anOCE+J9HbikRVrNR4nQhaw9Oumx9t+E4M2Pvmh8OZKgR/yJ1mMizNcbq5ZOzQNk4g=="}],"memo":""},"blockNum":"476880"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1efqa3wrdjta8syxzgsprhjgdtn42u8h3eaz6q6","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"QqDlXzfqZ6AfZjKHP61w5bQBTXwBbhSfK9hzqkPsjCoNTAkKxg0n2Lpiu8aKu/oajcByHd0SWVnSz4AnQVvnoA=="}],"memo":""},"blockNum":"476895"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1efqa3wrdjta8syxzgsprhjgdtn42u8h3eaz6q6","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"q3EG5XfXu437NqsoSNWR+gHgL1H1tKREG0OF+dpGZckn9cihfLicjM0t6sR+nK9WqmjLebJmo8/z7gtGfwhe3A=="}],"memo":""},"blockNum":"476899"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1efqa3wrdjta8syxzgsprhjgdtn42u8h3eaz6q6","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"GzX7mDCbeAj/ipQWJzV4hXAwNYUbn7wsw6v4ZNdgf04hUpYCbVqbkzheeRn7Vu3EYRPiL8v6Tgk8WMgkwcE8Rg=="}],"memo":""},"blockNum":"476907"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1efqa3wrdjta8syxzgsprhjgdtn42u8h3eaz6q6","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"e5rldzktN8y94af7DOh2bylVjQ387RVpWbQZ9qEy+etmdxxM7Pr6uzmV0d9OamAk8mT8eXjuES7ZFb3zATJmhw=="}],"memo":""},"blockNum":"476909"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1lggjskpg0c6sg7fsvnpycmjdkqcv8ymzdamgdh","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"zLslqXkQPQuRj46f/I5GMViXOm7OFTWD8GrjHDeWOtEpdXdBS3Vx10AymfdfIhtixkBPn0QcviA+h1cAxqpVjQ=="}],"memo":""},"blockNum":"477011"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lggjskpg0c6sg7fsvnpycmjdkqcv8ymzdamgdh","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"Rovof3C+EXDwpj/PuBdO0yZRqY2RLQBDG9T6xBadxNctnyjJdE6tkw6q5wT8Yk2ziLP+FKqAyQCdxfmUjkR4kA=="}],"memo":""},"blockNum":"477037"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1yx35vxgqgaxme0mykagdl3ncjd66g54lwxjhk9","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"RnKOtd/xmkY4spM8H009td8Piiu0i0K49E0iOLaKSW9ODet9rwPwegwHbYR+aeKfBLJYv6psl2VczuF/5UcSqA=="}],"memo":""},"blockNum":"477065"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1yx35vxgqgaxme0mykagdl3ncjd66g54lwxjhk9","to_address":"g1yx35vxgqgaxme0mykagdl3ncjd66g54lwxjhk9","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ax/xP3LbdfItGnC3BAIPSqq4Kbo3hkz2Q3iBHS+Fe/jS"},"signature":"UGpmYYmtyn1YtsPsxRkmluzupxdJ+afWA4IlTi46I5ARvzz5xPprzC7ndNXvawywvv9afxgtS5oM7IbcusKRWg=="}],"memo":""},"blockNum":"477072"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1whzkakk4hzjkvy60d5pwfk484xu67ar2cl62h2","send":"","pkg_path":"gno.land/r/michelle22/gnosocial","func":"CreatePost","args":["This is a post."]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+8e+xKl/HkBcdwQCmlkKhoekH4RUvskOJan85VTUFix"},"signature":"hcODojj6m5ZlDcyvdR8SzsHFQHzV2WFkqZvnDFba7VlNRsHkwDlVGRNnFMeL2R2ToiFLavfdNvBHZxdeohFeBw=="}],"memo":"Called through gno.studio"},"blockNum":"477091"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1whzkakk4hzjkvy60d5pwfk484xu67ar2cl62h2","send":"","pkg_path":"gno.land/r/michelle22/gnosocial","func":"SendDirectMessage","args":["g1whzkakk4hzjkvy60d5pwfk484xu67ar2cl62h2","Hey, this is a DM. Does it work? It should, of course, but....just checking."]}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+8e+xKl/HkBcdwQCmlkKhoekH4RUvskOJan85VTUFix"},"signature":"kda96QtkZ7+4AJsNzP9LUoknpgFfGOOxJcMIUunJaIZErQBJ7msbG5AbqEXLTZBDBV01YLjDDj9W/EFLWJ9YGg=="}],"memo":"Called through gno.studio"},"blockNum":"477093"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1kw6jg3yjsvgycverrmyn7k6mldnu6e3pe42n6q","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"NvpkZz3LzXGc45e8WGy63AMIOxOUhZAJ74FZ0ijdbMo5jvG7c3yqT8augyof0ryPq2BWIkXPTiIWVax4lhIX/g=="}],"memo":""},"blockNum":"477434"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1kw6jg3yjsvgycverrmyn7k6mldnu6e3pe42n6q","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"DEs5HlMZZjRTKbw5QFY6dPyH/XRhc9EA8kCxXNBCua58EwaWIhmKa05GOpYi68HuRYd+xY3uRsNiU4YL3p88EQ=="}],"memo":""},"blockNum":"477436"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1kw6jg3yjsvgycverrmyn7k6mldnu6e3pe42n6q","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"YFbNIy3h6c8CgvB4Q3nGAt9nZoyaIuQSnJTutPdXjkQZ3HAZjjoQ/4nC7dR8vXg9KVL0oq5FyjMb6CF8NKKPYA=="}],"memo":""},"blockNum":"477440"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1kw6jg3yjsvgycverrmyn7k6mldnu6e3pe42n6q","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"MtJkR5BMVMa4A6DUT4XVBZ2P3P3x350NX/jHN8yPClISTxxgEGJfEn2cneDIK+INEqtv/Lv7Kfwik7ZC8Auy7Q=="}],"memo":""},"blockNum":"477443"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1kw6jg3yjsvgycverrmyn7k6mldnu6e3pe42n6q","package":{"Name":"mail","Path":"gno.land/p/Olawale22/mail","Files":[{"Name":"package.gno","Body":"package mail\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\ntype Mail struct {\n\tHeader map[string]string\n\tBody   string\n}\n\nfunc ReadMessage(msg string) (*Mail, error) {\n\tlines := strings.Split(msg, \"\\n\")\n\tmail := \u0026Mail{Header: make(map[string]string)}\n\n\tisBody := false\n\tfor _, line := range lines {\n\t\tif line == \"\" {\n\t\t\tisBody = true\n\t\t\tcontinue\n\t\t}\n\t\tif isBody {\n\t\t\tmail.Body += line + \"\\n\"\n\t\t} else {\n\t\t\tparts := strings.SplitN(line, \": \", 2)\n\t\t\tif len(parts) == 2 {\n\t\t\t\tmail.Header[parts[0]] = parts[1]\n\t\t\t}\n\t\t}\n\t}\n\treturn mail, nil\n}\n\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7IMN9aUO6numX9E1NH67IEp7zMBvGhxJ+T2UBwWMRCO"},"signature":"SpUBrY+OJgyVz80ct9ZzZw4SdXgQqMUbMcXbU2h2vZkjJ/UBTi1IiDoh23SrYznyrJ0m7l1zrZxJhY92+NuR3g=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477452"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1kcdd3n0d472g2p5l8svyg9t0wq6h5857nq992f","to_address":"g1dag2p05ax7s2dvmj77j0tgfez4duspdyeh48pv","amount":"247799994ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AgRVZeBhCNiXMgeopMseJTFgTUwWKdw1TibC+g1lyO3E"},"signature":"8gD7LWO/mlGLOkaNX8U3FPe5xTyh02k65IXRkJ9BSIFCmMiY/jX3BiGQSkphKXxyfsHqhfCPpCyQhdY6zvSk4Q=="}],"memo":""},"blockNum":"477494"}
{"tx":{"msg":[{"@type":"/vm.m_call","caller":"g1dag2p05ax7s2dvmj77j0tgfez4duspdyeh48pv","send":"200000000ugnot","pkg_path":"gno.land/r/demo/users","func":"Register","args":["","super_fubao",""]}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ak9vGqFKpBAwXT9KW23O+pTcu5bz8gAyET3IFmuVqnL1"},"signature":"w+lQcGGgnMFR3FKQN3LfxpajFJ+R+Q3Efy/Sa7huo6FEn7dKl/Tbr8lwoyJJiBQhGgl+60QYFIHLkUmJEaL7Zg=="}],"memo":""},"blockNum":"477497"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g1dag2p05ax7s2dvmj77j0tgfez4duspdyeh48pv","to_address":"g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5","amount":"1000000ugnot"}],"fee":{"gas_wanted":"1000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ak9vGqFKpBAwXT9KW23O+pTcu5bz8gAyET3IFmuVqnL1"},"signature":"bbhogn/gzDVN862izJLwJVALn4VUx/g0ckPbC51Ogd9DZH+yPLr1h6eR9EJCoO3SZfwaY92SRoA9gZ9url5pRA=="}],"memo":""},"blockNum":"477503"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1dag2p05ax7s2dvmj77j0tgfez4duspdyeh48pv","package":{"Name":"fubao_house","Path":"gno.land/r/demo/fubao_house","Files":[{"Name":"fubao_house.gno","Body":"package fubao_house\n\nfunc Home(key string) string {\n\treturn \"Home-\" + key\n}\n\nfunc Eat(key string) string {\n\treturn \"Eat-\" + key\n}"}]},"deposit":""}],"fee":{"gas_wanted":"10000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Ak9vGqFKpBAwXT9KW23O+pTcu5bz8gAyET3IFmuVqnL1"},"signature":"D/RAjplE3AygiTmChmKO8CaPZ3Ir+fvO139RL7HlrUlenNCMmsDUEmUx/k/8WiQKWEtOUUtMoccieDmb5dAgJw=="}],"memo":""},"blockNum":"477506"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1s2uznss5m56ptaru5vne488zue4yh60mtptazl","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"3k8piNCvn/ZLGcmLbKs9AUU03i3NR5G/qVsRnl+ku39PGg3dHQo8WlgnEjM1DCARTOjiC8NcwIMWs/F2nWzJug=="}],"memo":""},"blockNum":"477523"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1s2uznss5m56ptaru5vne488zue4yh60mtptazl","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"yAm2GvvpekTwhjlh7y3Z3bGF0q29wS4JoXrgp8tLN5l74UQL03iwO2aPjzSYXJyWeOPixGMAoA+WV7welBqmhA=="}],"memo":""},"blockNum":"477529"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1kw6jg3yjsvgycverrmyn7k6mldnu6e3pe42n6q","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"+7V0kzTa//Tu3IGTK4xGGfOn4nISW8r2kF4hmfapNBsR/9IFoJIBZpDLTS0oTToAfZ5sSQgJ6SFxTkVpswbvSw=="}],"memo":""},"blockNum":"477532"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1s2uznss5m56ptaru5vne488zue4yh60mtptazl","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"W2I05HFlJCN6k8Z88H/wcdRQodF17+sYp+Gm7+g6H2Et5o4f6giCLUZM6l2SBD8O00jIeL7R96mkyfjP1X/xLg=="}],"memo":""},"blockNum":"477534"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1kw6jg3yjsvgycverrmyn7k6mldnu6e3pe42n6q","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"KeQa2BQ2j3AwRHBI/utztowmsNEJWnU9ouh0hBjZ0XxueW0sYTR5oHLd+uM3YKuJlC0XjkMj4KKRA5Q4N2KNHQ=="}],"memo":""},"blockNum":"477537"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1kw6jg3yjsvgycverrmyn7k6mldnu6e3pe42n6q","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"cdCnyOLEx5QOXk8NcSYXP7yHDOV7JOS5Sz6QDpZXUqwIwp4DypcRlJxLxyMiOcMcmYSDfzKlD8giWDMDsc9c7g=="}],"memo":""},"blockNum":"477539"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1s2uznss5m56ptaru5vne488zue4yh60mtptazl","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"xTheSw2iW0Pa242lnJ5XCtbn7k/cQw2zWRq3XC/slHIGOLWVIMqfaPANCoTet3f6dOOnWLEEv1LLL0oZETzDqQ=="}],"memo":""},"blockNum":"477541"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1kw6jg3yjsvgycverrmyn7k6mldnu6e3pe42n6q","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"2iW+238BFJp7Vh9tS2hInjbbq3RiOrFkSaisNNilz4UMOEqSesENBfM6H8cvhO+4lBGQ8EtZQtMn2UV9wjvxpA=="}],"memo":""},"blockNum":"477543"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1s2uznss5m56ptaru5vne488zue4yh60mtptazl","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"6Z53C2bdkua8YX8AC+0jfwsbTpdExEjobjEUgUajp7pSo8feldYi+R10u4Lxz6BLw30NYddcPr3+gK9hq1tSRw=="}],"memo":""},"blockNum":"477546"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1kw6jg3yjsvgycverrmyn7k6mldnu6e3pe42n6q","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"UOOR9RALYch9Dvf5e581hvbJ/16lSsQ3pMZRO1S8gXYyaQSyr+knD2fhmZQ+pjsCsNtkoqKf9E4a9QYKoqUExw=="}],"memo":""},"blockNum":"477548"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1l5ey0leng83q33ufgh6zh06s9rf62g8apumv6p","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"0/U8t1obimIXTwyB+8b3+C4g3ASkaehQ/ABqwitIOw4xF+bSlYtD7JYaogZTY+JE54WXsLDCHXGt+gHhRLm4SA=="}],"memo":""},"blockNum":"477567"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l5ey0leng83q33ufgh6zh06s9rf62g8apumv6p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"D8uZRTVLb2iI7gMFVw588clu+WugIyo6VGr5HaGTT5gt6uFwJnOhYeuzCCpTmDxM7XmMh1sdHEFZB31UWNNQIQ=="}],"memo":""},"blockNum":"477573"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l5ey0leng83q33ufgh6zh06s9rf62g8apumv6p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"22pN0hrNouUHOnfZu2Iv/jFaljs9zZHjbZ8n1Kj8kI0Q0x990kCf+qT+Svx/iZfoWztgTP7XaKIcxPfYcB/reQ=="}],"memo":""},"blockNum":"477575"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l5ey0leng83q33ufgh6zh06s9rf62g8apumv6p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"xaStnVSL82CnYc5AXTN6hP7WLzXNGhc9UmA93z3CpsttFDOBPjx4LU2GB0aLz3EXguST4zxywp9wC8uuOsstaA=="}],"memo":""},"blockNum":"477577"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l5ey0leng83q33ufgh6zh06s9rf62g8apumv6p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"JeGgyMZjURpjBCD0kEy24MonZ/sUTL1FwDv4vzQlGHEDABpqEPyVtyI3jXP02LOdcUBwWE/0DoWfD/A5hrDFUA=="}],"memo":""},"blockNum":"477584"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1s2uznss5m56ptaru5vne488zue4yh60mtptazl","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"cyEuG3qBH+GYitS2AJObqBUuGaLhREfPSlwxDcxAVA0i2MTix3brEWZ1tJ/3cKP6hpWOvTJisWO4jSYUO8baSA=="}],"memo":""},"blockNum":"477588"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l5ey0leng83q33ufgh6zh06s9rf62g8apumv6p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"hyyEPFAolrlwfBeyXoL9FfOJ2imzWKAiwzsecMtvgnZrGDHyycyfZBobQIXJKzMS4rWrVW8YXQiJfPSiBhktnA=="}],"memo":""},"blockNum":"477590"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l5ey0leng83q33ufgh6zh06s9rf62g8apumv6p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"t7ZmrmZw0aEgLI/yVxmC3rSrolJrb8DXj8wOW1AyvYIfIkxh/xBk0KRNOliz0ajqJeeuhT3o/S/mbem1vwxfOA=="}],"memo":""},"blockNum":"477592"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l5ey0leng83q33ufgh6zh06s9rf62g8apumv6p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"BY4LgRZE/XiqQeE4vvddimAYBAanaOaNMG+8d7LAPLguOmGe/aH3TV5bmv95kpkd+o81y1Ia6h8QPd/5hGHd/g=="}],"memo":""},"blockNum":"477594"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l5ey0leng83q33ufgh6zh06s9rf62g8apumv6p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"a3J9/M5RtClMjNeVm2lIeazgfBHhp4O+lp+y9iKRAZsA3E9CVA5LBx0BJNlM94fp10rMIMYnkVCMOtaDNhB9HA=="}],"memo":""},"blockNum":"477601"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l5ey0leng83q33ufgh6zh06s9rf62g8apumv6p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"+etcGRSeXkuiSLWK4iKMMb0XTyyCDZpMPRpNZa5g1bFrplQVDmy78K/5KpUMrW3lavODuJkdmjWsqBRtwPpwTQ=="}],"memo":""},"blockNum":"477603"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l5ey0leng83q33ufgh6zh06s9rf62g8apumv6p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"+r/Nc3AdqJ79nrK4nhA9heLd0xnusYmSbt8LWDid78tijPMho/0NOvWswZD+613cjpG07CQbRzz3rsyQl0IyVw=="}],"memo":""},"blockNum":"477607"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l5ey0leng83q33ufgh6zh06s9rf62g8apumv6p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"divI5dBmMeiJOMjMW/sUL/IwdBZzZXIQPB5R3hDKNbAN/InsDjzDaJOUlKibwnWGcXkqggPF+TJn5jV7WbxBwg=="}],"memo":""},"blockNum":"477611"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l5ey0leng83q33ufgh6zh06s9rf62g8apumv6p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"xHWZPdoI47922uJ9mbzqzQwz9jznYSlu6aN5jjCIc7tVjI4mIshQ6Ifm1De80cq6kUhAuLfMfeFHG9CIq9uzwQ=="}],"memo":""},"blockNum":"477613"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lggjskpg0c6sg7fsvnpycmjdkqcv8ymzdamgdh","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"nYipPpmHHjGS0F2mUcZcrwxYMr8qEJgn8xn1hn2DEW9yrr+n/CFnrKDKJ0pupb1AWWOyjgFQSpXBb8pmZF8GUQ=="}],"memo":""},"blockNum":"477618"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lggjskpg0c6sg7fsvnpycmjdkqcv8ymzdamgdh","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"IP+IbsSBfszKrW/K3BfuoTpvZzLEE5sOv16aOFlxkfoyg/gCRXySx/iBOv4/Zw6Y//KrOqIhYcTvJSFg8ImgDw=="}],"memo":""},"blockNum":"477621"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lggjskpg0c6sg7fsvnpycmjdkqcv8ymzdamgdh","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"PKdTvwXam5yCNi+vv3Rl+6rjK2qMjJpfn5BNZ958P1ZIxBMJy+5IyjKBaGN3KdhqI6m/Awf4fWBhggvXgXSjFg=="}],"memo":""},"blockNum":"477623"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lggjskpg0c6sg7fsvnpycmjdkqcv8ymzdamgdh","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"pU85rSzcTehI0b5TwWguSKE1wvgXgdT1u+xK7jggS5Ip/gzVLy94OPLw1EUSbsFVtnbATxvX5CN4Msi8xhHmxg=="}],"memo":""},"blockNum":"477644"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lggjskpg0c6sg7fsvnpycmjdkqcv8ymzdamgdh","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"682Atp4mGurWJck/vZCdw2DFDHfsFSyW6mR5ZfBCULg+yrEb/zmdJAbknEifoODv8rmUu+lN2Mq+625jffQRkg=="}],"memo":""},"blockNum":"477647"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"PHUdmrXar60JCmEvb1bNBU3YCRpj7fV2LBbpT2zlEvdeMepBghl27adwCEbvID0mPg+CB7ucpbCt+EMzLtQ5uQ=="}],"memo":""},"blockNum":"477654"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hcpl3nuagwjwznuppg36yh7a25csmwa3pnjr8h","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"x+uMcsrF7NS50OdMdWJVfKLS1jeoOq0dA8hjg6QrSmwhfjEYLi6cvI4Hdbp89vSPvNuZIi8Ka+TEYgvEQb1iAQ=="}],"memo":""},"blockNum":"477657"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1hcpl3nuagwjwznuppg36yh7a25csmwa3pnjr8h","package":{"Name":"raffle","Path":"gno.land/r/boonedox/raffle","Files":[{"Name":"package.gno","Body":"package hello\n\nimport \"gno.land/r/gc24/raffle\"\n\nfunc Render(path string) string {\n  raffle.RegisterCode(\"4LuVGAx3sx\")\n  raffle.RegisterUsername(\"boonedox\")\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7DzAKxaGx3hBRHd3k2rRfvEeLASWiBqKh+CU6DV862x"},"signature":"9X5Lf4tudqNUHdmcq8jrsfZ6HtfwRh5LvCiZzDQ7ksJNImRGyDXbe4Rtdd8OgzVYPTtGJ8/tH/RUdoGgwxW3Nw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477659"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hcpl3nuagwjwznuppg36yh7a25csmwa3pnjr8h","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"6PNkVQGcmPoubmczesxDMn5mY3SuTckchkmtE/VFiB8gPupVeik6QPT950IO4clUIsXKZMZxNrFMnxuxLe5tfA=="}],"memo":""},"blockNum":"477663"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1hcpl3nuagwjwznuppg36yh7a25csmwa3pnjr8h","package":{"Name":"hello","Path":"gno.land/r/boonedox/hello","Files":[{"Name":"package.gno","Body":"package hello\n\nimport (\n  \"gno.land/r/gc24/raffle\"\n)\n\nfunc Render(path string) string {\n  raffle.RegisterCode(\"4LuVGAx3sx\")\n  raffle.RegisterUsername(\"boonedox\")\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A7DzAKxaGx3hBRHd3k2rRfvEeLASWiBqKh+CU6DV862x"},"signature":"/A7ovQ6ZHp7XbhkXyb7M6dje/BJ+Dz+vugN2/4hBRkVpeeMb3OqUDAWWW1keHJUBHiG6zTZpw2Z30lH8A3Fybg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477665"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1yfwv6gyujajnsewyt5j4q59fq5w42nzw2vltzz","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"loH4fnCmPnr1yOrvrqgTQ3ncAPNXLk81vYN/uZk1DW8fuXdpC6vImq8YPH7KRfnlopi0PREbBihNTRTnOxbQWQ=="}],"memo":""},"blockNum":"477667"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1vxmy85ezrp23q3leju3da3jtq2tj8pr6haqs9h","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"aY+FSEn8rsvKQuN2JtgIsEQtIDVwwGLeKaTfOiKFrdZYTdibtnrDf7qCS8CQvqcd25bW+RRzVUdssIl5b3d1AQ=="}],"memo":""},"blockNum":"477669"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1vxmy85ezrp23q3leju3da3jtq2tj8pr6haqs9h","package":{"Name":"raffle","Path":"gno.land/r/gc24/AdamKing0126/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nrequire gno.land/r/gc24/raffle\n\nfunc init() {\n\t// Set admin address\n\to = ownable.NewWithAddress(\"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\")\n\n\tpartialEntries = make([]*EntryData, 0)\n\tcompleteEntries = make([]*EntryData, 0)\n\tregisteredHashes = make(map[string]struct{})\n\tcodeHashes = make([]string, 300)\n  RegisterCode(\"9wfWK9h3mA\")\n}\n\n// Hello! This is where you register your raffle code!\n// Calling RegisterCode is the first step for entering the raffle.\n// It allows you to register a specific raffle code and connect your address to it.\n// RegisterCode only be called via other code; you should figure out a way to do it.\nfunc RegisterCode(code string) string {\n\tif code == \"\" \u0026\u0026 len(code) != codeLength {\n\t\tpanic(\"invalid code: \" + code)\n\t}\n\n\tcaller := std.PrevRealm()     // save realm used to call\n\torigin := std.GetOrigCaller() // save deployer of realm\n\n\t// Deny non-code entries\n\tif caller.IsUser() {\n\t\tpanic(\"denied; can only be called from within code\")\n\t}\n\n\t// Get sha256 of code\n\thash := sha256.Sum256([]byte(code))\n\thashString := hex.EncodeToString(hash[:])\n\n\t// Check if code has already been registered\n\tif _, ok := registeredHashes[hashString]; ok {\n\t\tpanic(\"code already registered: \" + code)\n\t}\n\n\t// Check if the gopher has already registered another raffle code\n\tif originExists(origin) {\n\t\tpanic(\"you cannot register more than one code!\")\n\t}\n\n\t// Try to find the hash in the official hash list\n\tvar found bool\n\tfor _, ch := range codeHashes {\n\t\tif ch == hashString {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !found {\n\t\tpanic(\"specified code is not a valid raffle code: \" + code)\n\t}\n\n\tentry := \u0026EntryData{\n\t\ttxorigin:   origin,\n\t\tcaller:     caller,\n\t\traffleCode: code,\n\t\tcodeHash:   hashString,\n\t\tghUsername: \"\",\n\t}\n\n\t// Save to hash tracker\n\tregisteredHashes[hashString] = struct{}{}\n\n\t// Save raffle entry\n\tpartialEntries = append(partialEntries, entry)\n\n\treturn ufmt.Sprintf(\"Successfully registered raffle code!\\n%s\\nRegister your username to complete your raffle entry.\", entry.String())\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3clc6FLoTMNE8WKoa14/UajmLO+oy+fLjNkQnZIHAn3"},"signature":"eXLZzyHvgfVbWoVlYexSjPeNJHkV1KE04Ejr4rWdk51tYv1hUD1GejydLwY/OFo8QEvLBdz2s2o38abNN5lkMA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477671"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1vxmy85ezrp23q3leju3da3jtq2tj8pr6haqs9h","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"aVY6Xzyql6UJF7+N5YPqwhhuZDsCWLwlhweqkn4XkRdPn68mdHdtjvOfX8uIRhrmWiyHlU20cTpIYPMAYvnPVw=="}],"memo":""},"blockNum":"477673"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1vxmy85ezrp23q3leju3da3jtq2tj8pr6haqs9h","package":{"Name":"raffle","Path":"gno.land/r/adamking0126/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nrequire gno.land/r/gc24/raffle\n\nfunc init() {\n\t// Set admin address\n\to = ownable.NewWithAddress(\"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\")\n\n\tpartialEntries = make([]*EntryData, 0)\n\tcompleteEntries = make([]*EntryData, 0)\n\tregisteredHashes = make(map[string]struct{})\n\tcodeHashes = make([]string, 300)\n  RegisterCode(\"9wfWK9h3mA\")\n}\n\n// Hello! This is where you register your raffle code!\n// Calling RegisterCode is the first step for entering the raffle.\n// It allows you to register a specific raffle code and connect your address to it.\n// RegisterCode only be called via other code; you should figure out a way to do it.\nfunc RegisterCode(code string) string {\n\tif code == \"\" \u0026\u0026 len(code) != codeLength {\n\t\tpanic(\"invalid code: \" + code)\n\t}\n\n\tcaller := std.PrevRealm()     // save realm used to call\n\torigin := std.GetOrigCaller() // save deployer of realm\n\n\t// Deny non-code entries\n\tif caller.IsUser() {\n\t\tpanic(\"denied; can only be called from within code\")\n\t}\n\n\t// Get sha256 of code\n\thash := sha256.Sum256([]byte(code))\n\thashString := hex.EncodeToString(hash[:])\n\n\t// Check if code has already been registered\n\tif _, ok := registeredHashes[hashString]; ok {\n\t\tpanic(\"code already registered: \" + code)\n\t}\n\n\t// Check if the gopher has already registered another raffle code\n\tif originExists(origin) {\n\t\tpanic(\"you cannot register more than one code!\")\n\t}\n\n\t// Try to find the hash in the official hash list\n\tvar found bool\n\tfor _, ch := range codeHashes {\n\t\tif ch == hashString {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !found {\n\t\tpanic(\"specified code is not a valid raffle code: \" + code)\n\t}\n\n\tentry := \u0026EntryData{\n\t\ttxorigin:   origin,\n\t\tcaller:     caller,\n\t\traffleCode: code,\n\t\tcodeHash:   hashString,\n\t\tghUsername: \"\",\n\t}\n\n\t// Save to hash tracker\n\tregisteredHashes[hashString] = struct{}{}\n\n\t// Save raffle entry\n\tpartialEntries = append(partialEntries, entry)\n\n\treturn ufmt.Sprintf(\"Successfully registered raffle code!\\n%s\\nRegister your username to complete your raffle entry.\", entry.String())\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3clc6FLoTMNE8WKoa14/UajmLO+oy+fLjNkQnZIHAn3"},"signature":"HZ1BlvQOmNthhWh/WOU7x2hfo/GUscqBhSsZ5XZ/mHgAy9wby7lgXEMgVOoJkL+xmG/l9K6wuGAagN/tt91olA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477675"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1vxmy85ezrp23q3leju3da3jtq2tj8pr6haqs9h","package":{"Name":"raffle","Path":"gno.land/r/adamking0126/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nfunc init() {\n\t// Set admin address\n\to = ownable.NewWithAddress(\"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\")\n\n\tpartialEntries = make([]*EntryData, 0)\n\tcompleteEntries = make([]*EntryData, 0)\n\tregisteredHashes = make(map[string]struct{})\n\tcodeHashes = make([]string, 300)\n  RegisterCode(\"9wfWK9h3mA\")\n}\n\n// Hello! This is where you register your raffle code!\n// Calling RegisterCode is the first step for entering the raffle.\n// It allows you to register a specific raffle code and connect your address to it.\n// RegisterCode only be called via other code; you should figure out a way to do it.\nfunc RegisterCode(code string) string {\n\tif code == \"\" \u0026\u0026 len(code) != codeLength {\n\t\tpanic(\"invalid code: \" + code)\n\t}\n\n\tcaller := std.PrevRealm()     // save realm used to call\n\torigin := std.GetOrigCaller() // save deployer of realm\n\n\t// Deny non-code entries\n\tif caller.IsUser() {\n\t\tpanic(\"denied; can only be called from within code\")\n\t}\n\n\t// Get sha256 of code\n\thash := sha256.Sum256([]byte(code))\n\thashString := hex.EncodeToString(hash[:])\n\n\t// Check if code has already been registered\n\tif _, ok := registeredHashes[hashString]; ok {\n\t\tpanic(\"code already registered: \" + code)\n\t}\n\n\t// Check if the gopher has already registered another raffle code\n\tif originExists(origin) {\n\t\tpanic(\"you cannot register more than one code!\")\n\t}\n\n\t// Try to find the hash in the official hash list\n\tvar found bool\n\tfor _, ch := range codeHashes {\n\t\tif ch == hashString {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !found {\n\t\tpanic(\"specified code is not a valid raffle code: \" + code)\n\t}\n\n\tentry := \u0026EntryData{\n\t\ttxorigin:   origin,\n\t\tcaller:     caller,\n\t\traffleCode: code,\n\t\tcodeHash:   hashString,\n\t\tghUsername: \"\",\n\t}\n\n\t// Save to hash tracker\n\tregisteredHashes[hashString] = struct{}{}\n\n\t// Save raffle entry\n\tpartialEntries = append(partialEntries, entry)\n\n\treturn ufmt.Sprintf(\"Successfully registered raffle code!\\n%s\\nRegister your username to complete your raffle entry.\", entry.String())\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3clc6FLoTMNE8WKoa14/UajmLO+oy+fLjNkQnZIHAn3"},"signature":"cLn1MdJXoE49v6OZRi7WYAbM/lQk8UOS5X98Z+mPbg5wSQm/wc58Usj0F97QwJUm5sUHXcZmdPz5uC4TTsn+TQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477677"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yfwv6gyujajnsewyt5j4q59fq5w42nzw2vltzz","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"gZQFeU1ChSeDf5NiS5lNIBjkDI1ab243bxBPHJVpLo9EFnHl+zeUizBVlTdy8+XRTG2WN0lUDRPRN2KxQrkixA=="}],"memo":""},"blockNum":"477679"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1yfwv6gyujajnsewyt5j4q59fq5w42nzw2vltzz","package":{"Name":"raffle","Path":"gno.land/r/helithumper/raffle","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  code := \"uW9zngjSwE\"\n  return RegisterCode(code)\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0beyajY4/ngUdmO3pFPWAGm8pEK3uyP6qh8ELu4pH8q"},"signature":"PmPjLoAwy9kTUbDonX4nHDOLVL7sjh7ydaIRyA4qp0B43rCcEbjl5qcuj+5cWk7epQkn2hdygR1rTvtjzmsm4g=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477681"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1vxmy85ezrp23q3leju3da3jtq2tj8pr6haqs9h","package":{"Name":"raffle","Path":"gno.land/r/adamking0126/raffle","Files":[{"Name":"package.gno","Body":"/r/gc24/raffle/raffle.gno\npackage raffle\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"math/rand\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\n// EntryData is the main struct that contains all data on raffle entries\ntype EntryData struct {\n\ttxorigin   std.Address\n\tcaller     std.Realm\n\traffleCode string\n\tcodeHash   string\n\tghUsername string\n}\n\n// Top-level variables are automatically persisted to storage\nvar (\n\to                *ownable.Ownable    // admin of the raffle realm\n\tpartialEntries   []*EntryData        // keeps registered partialEntries\n\tcompleteEntries  []*EntryData        // keeps complete registrations: valid code + gh username\n\tcodeHashes       []string            // valid code hashes\n\tregisteredHashes map[string]struct{} // tracks if a code has been registered before\n\twinner1, winner2 *EntryData          // storing raffle winners\n\tnumReg           int\n\trandSource       *rand.Rand\n)\n\n// Nothing to see here, just some constants, move on :)\nconst (\n\tcodeLength = 10\n\tamtOfCodes = 300\n)\n\n// Hello! This is where you register your raffle code!\n// Calling RegisterCode is the first step for entering the raffle.\n// It allows you to register a specific raffle code and connect your address to it.\n// RegisterCode only be called via other code; you should figure out a way to do it.\nfunc RegisterCode(code string) string {\n\tif code == \"\" \u0026\u0026 len(code) != codeLength {\n\t\tpanic(\"invalid code: \" + code)\n\t}\n\n\tcaller := std.PrevRealm()     // save realm used to call\n\torigin := std.GetOrigCaller() // save deployer of realm\n\n\t// Deny non-code entries\n\tif caller.IsUser() {\n\t\tpanic(\"denied; can only be called from within code\")\n\t}\n\n\t// Get sha256 of code\n\thash := sha256.Sum256([]byte(code))\n\thashString := hex.EncodeToString(hash[:])\n\n\t// Check if code has already been registered\n\tif _, ok := registeredHashes[hashString]; ok {\n\t\tpanic(\"code already registered: \" + code)\n\t}\n\n\t// Check if the gopher has already registered another raffle code\n\tif originExists(origin) {\n\t\tpanic(\"you cannot register more than one code!\")\n\t}\n\n\t// Try to find the hash in the official hash list\n\tvar found bool\n\tfor _, ch := range codeHashes {\n\t\tif ch == hashString {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !found {\n\t\tpanic(\"specified code is not a valid raffle code: \" + code)\n\t}\n\n\tentry := \u0026EntryData{\n\t\ttxorigin:   origin,\n\t\tcaller:     caller,\n\t\traffleCode: code,\n\t\tcodeHash:   hashString,\n\t\tghUsername: \"\",\n\t}\n\n\t// Save to hash tracker\n\tregisteredHashes[hashString] = struct{}{}\n\n\t// Save raffle entry\n\tpartialEntries = append(partialEntries, entry)\n\n\treturn ufmt.Sprintf(\"Successfully registered raffle code!\\n%s\\nRegister your username to complete your raffle entry.\", entry.String())\n}\n\n// Somewhat similar to Go, init() executes upon deployment of your code.\n// Hint: maybe you can use init() in your code to execute RegisterCode() upon deployment via play.gno.land?\nfunc init() {\n\t// Set admin address\n\to = ownable.NewWithAddress(\"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\")\n\n\tpartialEntries = make([]*EntryData, 0)\n\tcompleteEntries = make([]*EntryData, 0)\n\tregisteredHashes = make(map[string]struct{})\n\tcodeHashes = make([]string, 300)\n  RegisterCode(\"9wfWK9h3mA\")\n}\n\n// RegisterUsername registers a GitHub username to an already existing entry\n// Hint: you can call this function just like you did with RegisterCode(), or via gno.studio/connect :)\n// If you use Connect, make sure you're on the Portal Loop network, and you've navigated to the correct path!\nfunc RegisterUsername(username string) string {\n\tif username == \"\" {\n\t\tpanic(\"invalid username: \" + username)\n\t}\n\n\torigin := std.GetOrigCaller()\n\n\tfor _, entry := range partialEntries {\n\t\tif entry.txorigin == origin { // this will check if you're using the same address as when registering the raffle code ;)\n\t\t\tif entry.ghUsername != \"\" {\n\t\t\t\tpanic(\"you cannot register your username twice!\")\n\t\t\t}\n\n\t\t\tentry.ghUsername = username\n\t\t\tcompleteEntries = append(completeEntries, entry)\n\t\t\tnumReg += 1\n\t\t\treturn ufmt.Sprintf(\"successfully registered %s for address %s\", username, entry.txorigin)\n\t\t}\n\t}\n\n\tpanic(\"could not find entry for caller address; did you register your raffle code yet?\")\n}\n\n// Admin stuff\n\nfunc PickWinner1() string {\n\to.AssertCallerIsOwner()\n\twinner1 = pickWinner()\n\n\treturn winner1.ghUsername\n}\n\nfunc PickWinner2() string {\n\to.AssertCallerIsOwner()\n\twinner2 = pickWinner()\n\n\treturn winner2.ghUsername\n}\n\nfunc UploadCodeHashes(delimCodes string) {\n\to.AssertCallerIsOwner()\n\n\ttokens := strings.Split(delimCodes, \",\")\n\n\tif len(tokens) != amtOfCodes {\n\t\tpanic(ufmt.Sprintf(\"invalid amount of codes; wanted %d got %d\", amtOfCodes, len(tokens)))\n\t}\n\n\tcopy(codeHashes, tokens)\n}\n\nfunc UploadRandomness(x, y uint64) {\n\to.AssertCallerIsOwner()\n\n\trandSource = rand.New(rand.NewPCG(x, y))\n}\n\n// Rendering\n\nfunc Render(_ string) string {\n\toutput := \"# Raffle - GopherCon US 2024\\n\\n\"\n\n\toutput += renderStats()\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += renderWinners()\n\t}\n\n\toutput += RenderGuide()\n\n\treturn output\n}\n\nfunc renderStats() string {\n\toutput := \"\"\n\n\toutput += \"### Raffle Stats\\n\\n\"\n\n\toutput += `\u003cdiv class=\"columns-3\"\u003e`\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest codes\n\toutput += renderLatestCodesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest codes\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest usernames\n\toutput += renderLatestUsernamesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest usernames\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Chances\n\toutput += renderChances()\n\toutput += `\u003c/div\u003e` // close Chances\n\n\toutput += `\u003c/div\u003e` // close columns-3\n\n\toutput += \"\\n\\n\"\n\toutput += \"---\" // close section\n\n\toutput += \"\\n\"\n\n\treturn output\n}\n\nfunc renderChances() string {\n\toutput := \"\\n\\n#### Chances\\n\\n\"\n\n\toutput += ufmt.Sprintf(\"- Users in the raffle: %d\\n\\n\", numReg)\n\n\tif numReg \u003e 0 {\n\t\toutput += ufmt.Sprintf(\"- Chance of winning: 2:%d\\n\\n\", numReg)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestCodesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest codes\\n\\n\"\n\tpeNum := len(partialEntries)\n\n\tif peNum == 0 {\n\t\toutput += \"No codes registered yet.\"\n\t\treturn output\n\t}\n\n\tif peNum \u003c amt {\n\t\tamt = peNum\n\t}\n\n\tfor i := peNum - 1; i \u003e= peNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", partialEntries[i].raffleCode)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestUsernamesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest usernames\\n\\n\"\n\tceNum := len(completeEntries)\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += \"Winners are chosen!\"\n\t\treturn output\n\t}\n\n\tif ceNum == 0 {\n\t\toutput += \"No usernames registered yet.\"\n\t\treturn output\n\t}\n\n\tif ceNum \u003c amt {\n\t\tamt = ceNum\n\t}\n\n\tfor i := ceNum - 1; i \u003e= ceNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", completeEntries[i].ghUsername)\n\t}\n\n\treturn output\n}\n\nfunc renderWinners() string {\n\toutput := \"\\n\\n# Winners\\n\\n\"\n\n\tif winner1 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 1: `@%s`\\n\\n\", winner1.ghUsername)\n\t}\n\n\tif winner2 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 2: `@%s`\\n\\n\", winner2.ghUsername)\n\t}\n\n\toutput += \"## Congratulations! Come to the booth and show us your GitHub account!\\n\\n\"\n\n\toutput += \"---\\n\\n\"\n\n\treturn output\n}\n\n// Helpers\n\nfunc (entry *EntryData) String() string {\n\treturn ufmt.Sprintf(\"Address: %s\\nRealm Path: %s\\nCode: %s\\nHash: %s\\nGitHub username: %s\\n\",\n\t\tentry.txorigin.String(),\n\t\tentry.caller.PkgPath(),\n\t\tentry.raffleCode,\n\t\tentry.codeHash,\n\t\tentry.ghUsername,\n\t)\n}\n\nfunc pickWinner() *EntryData {\n\tif len(completeEntries) == 0 {\n\t\tpanic(\"No complete entries yet!\")\n\t}\n\tif randSource == nil {\n\t\tpanic(\"No randomness source yet!\")\n\t}\n\n\tr := rand.New(randSource)\n\twinnerIndex := r.IntN(len(completeEntries))\n\twinner := completeEntries[winnerIndex]\n\n\t// remove winner from entry list\n\tcompleteEntries = append(completeEntries[:winnerIndex], completeEntries[winnerIndex+1:]...)\n\n\treturn winner\n}\n\nfunc CheckHashUpload() int {\n\treturn len(codeHashes)\n}\n\nfunc originExists(origin std.Address) bool {\n\tfor _, e := range partialEntries {\n\t\tif e.txorigin == origin {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3clc6FLoTMNE8WKoa14/UajmLO+oy+fLjNkQnZIHAn3"},"signature":"g3AjY3FRM2mh99VsOPJ4eJNf2/tBQCl0tdWmpdgkxbwON4xrQHfC37S6KtjgFMEuYbG1AMWOj9B3uTOH+fAq/A=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477684"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1vxmy85ezrp23q3leju3da3jtq2tj8pr6haqs9h","package":{"Name":"raffle","Path":"gno.land/r/adamking0126/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"math/rand\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\n// EntryData is the main struct that contains all data on raffle entries\ntype EntryData struct {\n\ttxorigin   std.Address\n\tcaller     std.Realm\n\traffleCode string\n\tcodeHash   string\n\tghUsername string\n}\n\n// Top-level variables are automatically persisted to storage\nvar (\n\to                *ownable.Ownable    // admin of the raffle realm\n\tpartialEntries   []*EntryData        // keeps registered partialEntries\n\tcompleteEntries  []*EntryData        // keeps complete registrations: valid code + gh username\n\tcodeHashes       []string            // valid code hashes\n\tregisteredHashes map[string]struct{} // tracks if a code has been registered before\n\twinner1, winner2 *EntryData          // storing raffle winners\n\tnumReg           int\n\trandSource       *rand.Rand\n)\n\n// Nothing to see here, just some constants, move on :)\nconst (\n\tcodeLength = 10\n\tamtOfCodes = 300\n)\n\n// Hello! This is where you register your raffle code!\n// Calling RegisterCode is the first step for entering the raffle.\n// It allows you to register a specific raffle code and connect your address to it.\n// RegisterCode only be called via other code; you should figure out a way to do it.\nfunc RegisterCode(code string) string {\n\tif code == \"\" \u0026\u0026 len(code) != codeLength {\n\t\tpanic(\"invalid code: \" + code)\n\t}\n\n\tcaller := std.PrevRealm()     // save realm used to call\n\torigin := std.GetOrigCaller() // save deployer of realm\n\n\t// Deny non-code entries\n\tif caller.IsUser() {\n\t\tpanic(\"denied; can only be called from within code\")\n\t}\n\n\t// Get sha256 of code\n\thash := sha256.Sum256([]byte(code))\n\thashString := hex.EncodeToString(hash[:])\n\n\t// Check if code has already been registered\n\tif _, ok := registeredHashes[hashString]; ok {\n\t\tpanic(\"code already registered: \" + code)\n\t}\n\n\t// Check if the gopher has already registered another raffle code\n\tif originExists(origin) {\n\t\tpanic(\"you cannot register more than one code!\")\n\t}\n\n\t// Try to find the hash in the official hash list\n\tvar found bool\n\tfor _, ch := range codeHashes {\n\t\tif ch == hashString {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !found {\n\t\tpanic(\"specified code is not a valid raffle code: \" + code)\n\t}\n\n\tentry := \u0026EntryData{\n\t\ttxorigin:   origin,\n\t\tcaller:     caller,\n\t\traffleCode: code,\n\t\tcodeHash:   hashString,\n\t\tghUsername: \"\",\n\t}\n\n\t// Save to hash tracker\n\tregisteredHashes[hashString] = struct{}{}\n\n\t// Save raffle entry\n\tpartialEntries = append(partialEntries, entry)\n\n\treturn ufmt.Sprintf(\"Successfully registered raffle code!\\n%s\\nRegister your username to complete your raffle entry.\", entry.String())\n}\n\n// Somewhat similar to Go, init() executes upon deployment of your code.\n// Hint: maybe you can use init() in your code to execute RegisterCode() upon deployment via play.gno.land?\nfunc init() {\n\t// Set admin address\n\to = ownable.NewWithAddress(\"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\")\n\n\tpartialEntries = make([]*EntryData, 0)\n\tcompleteEntries = make([]*EntryData, 0)\n\tregisteredHashes = make(map[string]struct{})\n\tcodeHashes = make([]string, 300)\n  RegisterCode(\"9wfWK9h3mA\")\n}\n\n// RegisterUsername registers a GitHub username to an already existing entry\n// Hint: you can call this function just like you did with RegisterCode(), or via gno.studio/connect :)\n// If you use Connect, make sure you're on the Portal Loop network, and you've navigated to the correct path!\nfunc RegisterUsername(username string) string {\n\tif username == \"\" {\n\t\tpanic(\"invalid username: \" + username)\n\t}\n\n\torigin := std.GetOrigCaller()\n\n\tfor _, entry := range partialEntries {\n\t\tif entry.txorigin == origin { // this will check if you're using the same address as when registering the raffle code ;)\n\t\t\tif entry.ghUsername != \"\" {\n\t\t\t\tpanic(\"you cannot register your username twice!\")\n\t\t\t}\n\n\t\t\tentry.ghUsername = username\n\t\t\tcompleteEntries = append(completeEntries, entry)\n\t\t\tnumReg += 1\n\t\t\treturn ufmt.Sprintf(\"successfully registered %s for address %s\", username, entry.txorigin)\n\t\t}\n\t}\n\n\tpanic(\"could not find entry for caller address; did you register your raffle code yet?\")\n}\n\n// Admin stuff\n\nfunc PickWinner1() string {\n\to.AssertCallerIsOwner()\n\twinner1 = pickWinner()\n\n\treturn winner1.ghUsername\n}\n\nfunc PickWinner2() string {\n\to.AssertCallerIsOwner()\n\twinner2 = pickWinner()\n\n\treturn winner2.ghUsername\n}\n\nfunc UploadCodeHashes(delimCodes string) {\n\to.AssertCallerIsOwner()\n\n\ttokens := strings.Split(delimCodes, \",\")\n\n\tif len(tokens) != amtOfCodes {\n\t\tpanic(ufmt.Sprintf(\"invalid amount of codes; wanted %d got %d\", amtOfCodes, len(tokens)))\n\t}\n\n\tcopy(codeHashes, tokens)\n}\n\nfunc UploadRandomness(x, y uint64) {\n\to.AssertCallerIsOwner()\n\n\trandSource = rand.New(rand.NewPCG(x, y))\n}\n\n// Rendering\n\nfunc Render(_ string) string {\n\toutput := \"# Raffle - GopherCon US 2024\\n\\n\"\n\n\toutput += renderStats()\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += renderWinners()\n\t}\n\n\toutput += RenderGuide()\n\n\treturn output\n}\n\nfunc renderStats() string {\n\toutput := \"\"\n\n\toutput += \"### Raffle Stats\\n\\n\"\n\n\toutput += `\u003cdiv class=\"columns-3\"\u003e`\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest codes\n\toutput += renderLatestCodesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest codes\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest usernames\n\toutput += renderLatestUsernamesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest usernames\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Chances\n\toutput += renderChances()\n\toutput += `\u003c/div\u003e` // close Chances\n\n\toutput += `\u003c/div\u003e` // close columns-3\n\n\toutput += \"\\n\\n\"\n\toutput += \"---\" // close section\n\n\toutput += \"\\n\"\n\n\treturn output\n}\n\nfunc renderChances() string {\n\toutput := \"\\n\\n#### Chances\\n\\n\"\n\n\toutput += ufmt.Sprintf(\"- Users in the raffle: %d\\n\\n\", numReg)\n\n\tif numReg \u003e 0 {\n\t\toutput += ufmt.Sprintf(\"- Chance of winning: 2:%d\\n\\n\", numReg)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestCodesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest codes\\n\\n\"\n\tpeNum := len(partialEntries)\n\n\tif peNum == 0 {\n\t\toutput += \"No codes registered yet.\"\n\t\treturn output\n\t}\n\n\tif peNum \u003c amt {\n\t\tamt = peNum\n\t}\n\n\tfor i := peNum - 1; i \u003e= peNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", partialEntries[i].raffleCode)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestUsernamesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest usernames\\n\\n\"\n\tceNum := len(completeEntries)\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += \"Winners are chosen!\"\n\t\treturn output\n\t}\n\n\tif ceNum == 0 {\n\t\toutput += \"No usernames registered yet.\"\n\t\treturn output\n\t}\n\n\tif ceNum \u003c amt {\n\t\tamt = ceNum\n\t}\n\n\tfor i := ceNum - 1; i \u003e= ceNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", completeEntries[i].ghUsername)\n\t}\n\n\treturn output\n}\n\nfunc renderWinners() string {\n\toutput := \"\\n\\n# Winners\\n\\n\"\n\n\tif winner1 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 1: `@%s`\\n\\n\", winner1.ghUsername)\n\t}\n\n\tif winner2 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 2: `@%s`\\n\\n\", winner2.ghUsername)\n\t}\n\n\toutput += \"## Congratulations! Come to the booth and show us your GitHub account!\\n\\n\"\n\n\toutput += \"---\\n\\n\"\n\n\treturn output\n}\n\n// Helpers\n\nfunc (entry *EntryData) String() string {\n\treturn ufmt.Sprintf(\"Address: %s\\nRealm Path: %s\\nCode: %s\\nHash: %s\\nGitHub username: %s\\n\",\n\t\tentry.txorigin.String(),\n\t\tentry.caller.PkgPath(),\n\t\tentry.raffleCode,\n\t\tentry.codeHash,\n\t\tentry.ghUsername,\n\t)\n}\n\nfunc pickWinner() *EntryData {\n\tif len(completeEntries) == 0 {\n\t\tpanic(\"No complete entries yet!\")\n\t}\n\tif randSource == nil {\n\t\tpanic(\"No randomness source yet!\")\n\t}\n\n\tr := rand.New(randSource)\n\twinnerIndex := r.IntN(len(completeEntries))\n\twinner := completeEntries[winnerIndex]\n\n\t// remove winner from entry list\n\tcompleteEntries = append(completeEntries[:winnerIndex], completeEntries[winnerIndex+1:]...)\n\n\treturn winner\n}\n\nfunc CheckHashUpload() int {\n\treturn len(codeHashes)\n}\n\nfunc originExists(origin std.Address) bool {\n\tfor _, e := range partialEntries {\n\t\tif e.txorigin == origin {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3clc6FLoTMNE8WKoa14/UajmLO+oy+fLjNkQnZIHAn3"},"signature":"zOM3LkuDancg878pVqtzb/7v6jJwC45pB5VBRnGuUHhPG8MtYDAcqt8IcST7etBj/aSxXKU70wK9d5Q7milIvA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477686"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1vxmy85ezrp23q3leju3da3jtq2tj8pr6haqs9h","package":{"Name":"raffle","Path":"gno.land/r/adamking0126/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"math/rand\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\n// EntryData is the main struct that contains all data on raffle entries\ntype EntryData struct {\n\ttxorigin   std.Address\n\tcaller     std.Realm\n\traffleCode string\n\tcodeHash   string\n\tghUsername string\n}\n\n// Top-level variables are automatically persisted to storage\nvar (\n\to                *ownable.Ownable    // admin of the raffle realm\n\tpartialEntries   []*EntryData        // keeps registered partialEntries\n\tcompleteEntries  []*EntryData        // keeps complete registrations: valid code + gh username\n\tcodeHashes       []string            // valid code hashes\n\tregisteredHashes map[string]struct{} // tracks if a code has been registered before\n\twinner1, winner2 *EntryData          // storing raffle winners\n\tnumReg           int\n\trandSource       *rand.Rand\n)\n\n// Nothing to see here, just some constants, move on :)\nconst (\n\tcodeLength = 10\n\tamtOfCodes = 300\n)\n\n// Hello! This is where you register your raffle code!\n// Calling RegisterCode is the first step for entering the raffle.\n// It allows you to register a specific raffle code and connect your address to it.\n// RegisterCode only be called via other code; you should figure out a way to do it.\nfunc RegisterCode(code string) string {\n\tif code == \"\" \u0026\u0026 len(code) != codeLength {\n\t\tpanic(\"invalid code: \" + code)\n\t}\n\n\tcaller := std.PrevRealm()     // save realm used to call\n\torigin := std.GetOrigCaller() // save deployer of realm\n\n\t// Deny non-code entries\n\tif caller.IsUser() {\n\t\tpanic(\"denied; can only be called from within code\")\n\t}\n\n\t// Get sha256 of code\n\thash := sha256.Sum256([]byte(code))\n\thashString := hex.EncodeToString(hash[:])\n\n\t// Check if code has already been registered\n\tif _, ok := registeredHashes[hashString]; ok {\n\t\tpanic(\"code already registered: \" + code)\n\t}\n\n\t// Check if the gopher has already registered another raffle code\n\tif originExists(origin) {\n\t\tpanic(\"you cannot register more than one code!\")\n\t}\n\n\t// Try to find the hash in the official hash list\n\tvar found bool\n\tfor _, ch := range codeHashes {\n\t\tif ch == hashString {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !found {\n\t\tpanic(\"specified code is not a valid raffle code: \" + code)\n\t}\n\n\tentry := \u0026EntryData{\n\t\ttxorigin:   origin,\n\t\tcaller:     caller,\n\t\traffleCode: code,\n\t\tcodeHash:   hashString,\n\t\tghUsername: \"\",\n\t}\n\n\t// Save to hash tracker\n\tregisteredHashes[hashString] = struct{}{}\n\n\t// Save raffle entry\n\tpartialEntries = append(partialEntries, entry)\n\n\treturn ufmt.Sprintf(\"Successfully registered raffle code!\\n%s\\nRegister your username to complete your raffle entry.\", entry.String())\n}\n\n// Somewhat similar to Go, init() executes upon deployment of your code.\n// Hint: maybe you can use init() in your code to execute RegisterCode() upon deployment via play.gno.land?\nfunc init() {\n\t// Set admin address\n\to = ownable.NewWithAddress(\"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\")\n\n\tpartialEntries = make([]*EntryData, 0)\n\tcompleteEntries = make([]*EntryData, 0)\n\tregisteredHashes = make(map[string]struct{})\n\tcodeHashes = make([]string, 300)\n  RegisterCode(\"9wfWK9h3mA\")\n}\n\n// RegisterUsername registers a GitHub username to an already existing entry\n// Hint: you can call this function just like you did with RegisterCode(), or via gno.studio/connect :)\n// If you use Connect, make sure you're on the Portal Loop network, and you've navigated to the correct path!\nfunc RegisterUsername(username string) string {\n\tif username == \"\" {\n\t\tpanic(\"invalid username: \" + username)\n\t}\n\n\torigin := std.GetOrigCaller()\n\n\tfor _, entry := range partialEntries {\n\t\tif entry.txorigin == origin { // this will check if you're using the same address as when registering the raffle code ;)\n\t\t\tif entry.ghUsername != \"\" {\n\t\t\t\tpanic(\"you cannot register your username twice!\")\n\t\t\t}\n\n\t\t\tentry.ghUsername = username\n\t\t\tcompleteEntries = append(completeEntries, entry)\n\t\t\tnumReg += 1\n\t\t\treturn ufmt.Sprintf(\"successfully registered %s for address %s\", username, entry.txorigin)\n\t\t}\n\t}\n\n\tpanic(\"could not find entry for caller address; did you register your raffle code yet?\")\n}\n\n// Admin stuff\n\nfunc PickWinner1() string {\n\to.AssertCallerIsOwner()\n\twinner1 = pickWinner()\n\n\treturn winner1.ghUsername\n}\n\nfunc PickWinner2() string {\n\to.AssertCallerIsOwner()\n\twinner2 = pickWinner()\n\n\treturn winner2.ghUsername\n}\n\nfunc UploadCodeHashes(delimCodes string) {\n\to.AssertCallerIsOwner()\n\n\ttokens := strings.Split(delimCodes, \",\")\n\n\tif len(tokens) != amtOfCodes {\n\t\tpanic(ufmt.Sprintf(\"invalid amount of codes; wanted %d got %d\", amtOfCodes, len(tokens)))\n\t}\n\n\tcopy(codeHashes, tokens)\n}\n\nfunc UploadRandomness(x, y uint64) {\n\to.AssertCallerIsOwner()\n\n\trandSource = rand.New(rand.NewPCG(x, y))\n}\n\n// Rendering\n\nfunc Render(_ string) string {\n\toutput := \"# Raffle - GopherCon US 2024\\n\\n\"\n\n\toutput += renderStats()\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += renderWinners()\n\t}\n\n\toutput += RenderGuide()\n\n\treturn output\n}\n\nfunc renderStats() string {\n\toutput := \"\"\n\n\toutput += \"### Raffle Stats\\n\\n\"\n\n\toutput += `\u003cdiv class=\"columns-3\"\u003e`\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest codes\n\toutput += renderLatestCodesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest codes\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest usernames\n\toutput += renderLatestUsernamesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest usernames\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Chances\n\toutput += renderChances()\n\toutput += `\u003c/div\u003e` // close Chances\n\n\toutput += `\u003c/div\u003e` // close columns-3\n\n\toutput += \"\\n\\n\"\n\toutput += \"---\" // close section\n\n\toutput += \"\\n\"\n\n\treturn output\n}\n\nfunc renderChances() string {\n\toutput := \"\\n\\n#### Chances\\n\\n\"\n\n\toutput += ufmt.Sprintf(\"- Users in the raffle: %d\\n\\n\", numReg)\n\n\tif numReg \u003e 0 {\n\t\toutput += ufmt.Sprintf(\"- Chance of winning: 2:%d\\n\\n\", numReg)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestCodesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest codes\\n\\n\"\n\tpeNum := len(partialEntries)\n\n\tif peNum == 0 {\n\t\toutput += \"No codes registered yet.\"\n\t\treturn output\n\t}\n\n\tif peNum \u003c amt {\n\t\tamt = peNum\n\t}\n\n\tfor i := peNum - 1; i \u003e= peNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", partialEntries[i].raffleCode)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestUsernamesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest usernames\\n\\n\"\n\tceNum := len(completeEntries)\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += \"Winners are chosen!\"\n\t\treturn output\n\t}\n\n\tif ceNum == 0 {\n\t\toutput += \"No usernames registered yet.\"\n\t\treturn output\n\t}\n\n\tif ceNum \u003c amt {\n\t\tamt = ceNum\n\t}\n\n\tfor i := ceNum - 1; i \u003e= ceNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", completeEntries[i].ghUsername)\n\t}\n\n\treturn output\n}\n\nfunc renderWinners() string {\n\toutput := \"\\n\\n# Winners\\n\\n\"\n\n\tif winner1 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 1: `@%s`\\n\\n\", winner1.ghUsername)\n\t}\n\n\tif winner2 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 2: `@%s`\\n\\n\", winner2.ghUsername)\n\t}\n\n\toutput += \"## Congratulations! Come to the booth and show us your GitHub account!\\n\\n\"\n\n\toutput += \"---\\n\\n\"\n\n\treturn output\n}\n\n// Helpers\n\nfunc (entry *EntryData) String() string {\n\treturn ufmt.Sprintf(\"Address: %s\\nRealm Path: %s\\nCode: %s\\nHash: %s\\nGitHub username: %s\\n\",\n\t\tentry.txorigin.String(),\n\t\tentry.caller.PkgPath(),\n\t\tentry.raffleCode,\n\t\tentry.codeHash,\n\t\tentry.ghUsername,\n\t)\n}\n\nfunc pickWinner() *EntryData {\n\tif len(completeEntries) == 0 {\n\t\tpanic(\"No complete entries yet!\")\n\t}\n\tif randSource == nil {\n\t\tpanic(\"No randomness source yet!\")\n\t}\n\n\tr := rand.New(randSource)\n\twinnerIndex := r.IntN(len(completeEntries))\n\twinner := completeEntries[winnerIndex]\n\n\t// remove winner from entry list\n\tcompleteEntries = append(completeEntries[:winnerIndex], completeEntries[winnerIndex+1:]...)\n\n\treturn winner\n}\n\nfunc CheckHashUpload() int {\n\treturn len(codeHashes)\n}\n\nfunc originExists(origin std.Address) bool {\n\tfor _, e := range partialEntries {\n\t\tif e.txorigin == origin {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3clc6FLoTMNE8WKoa14/UajmLO+oy+fLjNkQnZIHAn3"},"signature":"Vh2oIla3KLclYBsHexrdJTsVFXpv8RU1GLRvIoqaVy9AQ8WDqgUhLJIdayLiFmAagvEyumEu59c8om4Hhj4T9g=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477688"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1yfwv6gyujajnsewyt5j4q59fq5w42nzw2vltzz","package":{"Name":"raffle","Path":"gno.land/r/helithumper/raffle","Files":[{"Name":"package.gno","Body":"package hello\n\nimport (\n  \"gno.land/r/gc24/raffle\"\n  \"fmt\"\n)\n\nfunc init() {\n  code := \"uW9zngjSwE\"\n  fmt.Println(raffle.RegisterCode(code))\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0beyajY4/ngUdmO3pFPWAGm8pEK3uyP6qh8ELu4pH8q"},"signature":"oSrjZkQui+vRxb+c8225Jza5OzHb8VRIzFxzQ4Y4PXNfh0u9l3xg6fCXz13d8lcjrs+Kyc/Xjs3c3BSTJtDybA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477691"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1tqwwp7z9ulq76x79tjsxh0j7djnenyzmlauqh9","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"8L6wexV4Za17kT/U2w4yPT8155MwDVWZqBiuOw1hU89jHgI+15f8SoRW0GB1DpvOSckTMpt1MUitQdkZKGYwxg=="}],"memo":""},"blockNum":"477692"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1yfwv6gyujajnsewyt5j4q59fq5w42nzw2vltzz","package":{"Name":"raffle","Path":"gno.land/r/helithumper/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nimport (\n  \"gno.land/r/gc24/raffle\"\n  \"fmt\"\n)\n\nfunc init() {\n  code := \"uW9zngjSwE\"\n  fmt.Println(raffle.RegisterCode(code))\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0beyajY4/ngUdmO3pFPWAGm8pEK3uyP6qh8ELu4pH8q"},"signature":"E5L+b2iJ8UtBW14jUUHzezASzZagX9H/XB1m9+krgURFJ7cxCsF82hOMuLmyGVdi9uXRdMCgoOGPa9hzxldcYw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477694"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1tqwwp7z9ulq76x79tjsxh0j7djnenyzmlauqh9","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"Xds/mxY1Pz6d2mMVu6TH/rxgR/zobcpAmJBglM5JoqZin/WdyrlXyYinya2Qw7/M7xAkwKRnvyGA2LigTV5Zqg=="}],"memo":""},"blockNum":"477696"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hcpl3nuagwjwznuppg36yh7a25csmwa3pnjr8h","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"8q+5kgSYX3IkORW1X5uciZOXMGIKxb4pu69lnZTjev9+tOkAg/HfPNBCXwUgstW/7NzuOJ7ZGjaNvrmaFYScug=="}],"memo":""},"blockNum":"477698"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1yfwv6gyujajnsewyt5j4q59fq5w42nzw2vltzz","package":{"Name":"raffle","Path":"gno.land/r/helithumper/raffle","Files":[{"Name":"gno.mod","Body":"module gno.land/r/gc24/helithumper/raffle\n\nrequire (\n    gno.land/r/gc24/raffle v0.0.0-latest\n\tgno.land/p/demo/ownable v0.0.0-latest\n\tgno.land/p/demo/testutils v0.0.0-latest\n\tgno.land/p/demo/ufmt v0.0.0-latest\n)"},{"Name":"package.gno","Body":"package raffle\n\nimport (\n  \"gno.land/r/gc24/raffle\"\n  \"fmt\"\n)\n\nfunc init() {\n  code := \"uW9zngjSwE\"\n  fmt.Println(raffle.RegisterCode(code))\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0beyajY4/ngUdmO3pFPWAGm8pEK3uyP6qh8ELu4pH8q"},"signature":"qhoT0Nul4KGiE18rHdCcGDiSvGW/eV73bJFcyo5Kf6YLsOQOwnobmfDKeiPLgVCEbMLC7d8/3/raygXceXmTAQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477700"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1utuf3fk30x09ul9zsf4sehlxdk34hlhsry8sdy","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"zi2GjdzVrp2WkbRntSuuxvdfA1ZO9amTG6wNyZNxEigGElgwlC5KgXxYTl297Sm5xb6TFLoLFt+3FzGJYvymzA=="}],"memo":""},"blockNum":"477701"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hcpl3nuagwjwznuppg36yh7a25csmwa3pnjr8h","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"yvinHi3S7CNpWtMADiuQiIGObTNbfje3D8tfhFV5MuFnd1BeCG48U5nu4kcWQ5IKm6cJv1lbxlF3BRxUU2njMA=="}],"memo":""},"blockNum":"477703"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1utuf3fk30x09ul9zsf4sehlxdk34hlhsry8sdy","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"3L52INJC8P2ZKfxyf3xSpWsZp4NRohbWSd1Tvt8TnrxLgcvPx6WC5ZpZ2lcLuHeBNYfXe61noomeE+1qNK+SjQ=="}],"memo":""},"blockNum":"477705"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1vxmy85ezrp23q3leju3da3jtq2tj8pr6haqs9h","package":{"Name":"raffle","Path":"gno.land/r/adamking0126/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"math/rand\"\n\t\"std\"\n\t\"strings\"\n  \"gno.land/r/gc24/raffle\"\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\n// EntryData is the main struct that contains all data on raffle entries\ntype EntryData struct {\n\ttxorigin   std.Address\n\tcaller     std.Realm\n\traffleCode string\n\tcodeHash   string\n\tghUsername string\n}\n\n// Top-level variables are automatically persisted to storage\nvar (\n\to                *ownable.Ownable    // admin of the raffle realm\n\tpartialEntries   []*EntryData        // keeps registered partialEntries\n\tcompleteEntries  []*EntryData        // keeps complete registrations: valid code + gh username\n\tcodeHashes       []string            // valid code hashes\n\tregisteredHashes map[string]struct{} // tracks if a code has been registered before\n\twinner1, winner2 *EntryData          // storing raffle winners\n\tnumReg           int\n\trandSource       *rand.Rand\n)\n\n// Nothing to see here, just some constants, move on :)\nconst (\n\tcodeLength = 10\n\tamtOfCodes = 300\n)\n\n// Hello! This is where you register your raffle code!\n// Calling RegisterCode is the first step for entering the raffle.\n// It allows you to register a specific raffle code and connect your address to it.\n// RegisterCode only be called via other code; you should figure out a way to do it.\nfunc RegisterCode(code string) string {\n\tif code == \"\" \u0026\u0026 len(code) != codeLength {\n\t\tpanic(\"invalid code: \" + code)\n\t}\n\n\tcaller := std.PrevRealm()     // save realm used to call\n\torigin := std.GetOrigCaller() // save deployer of realm\n\n\t// Deny non-code entries\n\tif caller.IsUser() {\n\t\tpanic(\"denied; can only be called from within code\")\n\t}\n\n\t// Get sha256 of code\n\thash := sha256.Sum256([]byte(code))\n\thashString := hex.EncodeToString(hash[:])\n\n\t// Check if code has already been registered\n\tif _, ok := registeredHashes[hashString]; ok {\n\t\tpanic(\"code already registered: \" + code)\n\t}\n\n\t// Check if the gopher has already registered another raffle code\n\tif originExists(origin) {\n\t\tpanic(\"you cannot register more than one code!\")\n\t}\n\n\t// Try to find the hash in the official hash list\n\tvar found bool\n\tfor _, ch := range codeHashes {\n\t\tif ch == hashString {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !found {\n\t\tpanic(\"specified code is not a valid raffle code: \" + code)\n\t}\n\n\tentry := \u0026EntryData{\n\t\ttxorigin:   origin,\n\t\tcaller:     caller,\n\t\traffleCode: code,\n\t\tcodeHash:   hashString,\n\t\tghUsername: \"\",\n\t}\n\n\t// Save to hash tracker\n\tregisteredHashes[hashString] = struct{}{}\n\n\t// Save raffle entry\n\tpartialEntries = append(partialEntries, entry)\n\n\treturn ufmt.Sprintf(\"Successfully registered raffle code!\\n%s\\nRegister your username to complete your raffle entry.\", entry.String())\n}\n\n// Somewhat similar to Go, init() executes upon deployment of your code.\n// Hint: maybe you can use init() in your code to execute RegisterCode() upon deployment via play.gno.land?\nfunc init() {\n\t// Set admin address\n\to = ownable.NewWithAddress(\"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\")\n\n\tpartialEntries = make([]*EntryData, 0)\n\tcompleteEntries = make([]*EntryData, 0)\n\tregisteredHashes = make(map[string]struct{})\n\tcodeHashes = make([]string, 300)\n  RegisterCode(\"9wfWK9h3mA\")\n}\n\n// RegisterUsername registers a GitHub username to an already existing entry\n// Hint: you can call this function just like you did with RegisterCode(), or via gno.studio/connect :)\n// If you use Connect, make sure you're on the Portal Loop network, and you've navigated to the correct path!\nfunc RegisterUsername(username string) string {\n\tif username == \"\" {\n\t\tpanic(\"invalid username: \" + username)\n\t}\n\n\torigin := std.GetOrigCaller()\n\n\tfor _, entry := range partialEntries {\n\t\tif entry.txorigin == origin { // this will check if you're using the same address as when registering the raffle code ;)\n\t\t\tif entry.ghUsername != \"\" {\n\t\t\t\tpanic(\"you cannot register your username twice!\")\n\t\t\t}\n\n\t\t\tentry.ghUsername = username\n\t\t\tcompleteEntries = append(completeEntries, entry)\n\t\t\tnumReg += 1\n\t\t\treturn ufmt.Sprintf(\"successfully registered %s for address %s\", username, entry.txorigin)\n\t\t}\n\t}\n\n\tpanic(\"could not find entry for caller address; did you register your raffle code yet?\")\n}\n\n// Admin stuff\n\nfunc PickWinner1() string {\n\to.AssertCallerIsOwner()\n\twinner1 = pickWinner()\n\n\treturn winner1.ghUsername\n}\n\nfunc PickWinner2() string {\n\to.AssertCallerIsOwner()\n\twinner2 = pickWinner()\n\n\treturn winner2.ghUsername\n}\n\nfunc UploadCodeHashes(delimCodes string) {\n\to.AssertCallerIsOwner()\n\n\ttokens := strings.Split(delimCodes, \",\")\n\n\tif len(tokens) != amtOfCodes {\n\t\tpanic(ufmt.Sprintf(\"invalid amount of codes; wanted %d got %d\", amtOfCodes, len(tokens)))\n\t}\n\n\tcopy(codeHashes, tokens)\n}\n\nfunc UploadRandomness(x, y uint64) {\n\to.AssertCallerIsOwner()\n\n\trandSource = rand.New(rand.NewPCG(x, y))\n}\n\n// Rendering\n\nfunc Render(_ string) string {\n\toutput := \"# Raffle - GopherCon US 2024\\n\\n\"\n\n\toutput += renderStats()\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += renderWinners()\n\t}\n\n\toutput += RenderGuide()\n\n\treturn output\n}\n\nfunc renderStats() string {\n\toutput := \"\"\n\n\toutput += \"### Raffle Stats\\n\\n\"\n\n\toutput += `\u003cdiv class=\"columns-3\"\u003e`\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest codes\n\toutput += renderLatestCodesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest codes\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest usernames\n\toutput += renderLatestUsernamesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest usernames\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Chances\n\toutput += renderChances()\n\toutput += `\u003c/div\u003e` // close Chances\n\n\toutput += `\u003c/div\u003e` // close columns-3\n\n\toutput += \"\\n\\n\"\n\toutput += \"---\" // close section\n\n\toutput += \"\\n\"\n\n\treturn output\n}\n\nfunc renderChances() string {\n\toutput := \"\\n\\n#### Chances\\n\\n\"\n\n\toutput += ufmt.Sprintf(\"- Users in the raffle: %d\\n\\n\", numReg)\n\n\tif numReg \u003e 0 {\n\t\toutput += ufmt.Sprintf(\"- Chance of winning: 2:%d\\n\\n\", numReg)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestCodesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest codes\\n\\n\"\n\tpeNum := len(partialEntries)\n\n\tif peNum == 0 {\n\t\toutput += \"No codes registered yet.\"\n\t\treturn output\n\t}\n\n\tif peNum \u003c amt {\n\t\tamt = peNum\n\t}\n\n\tfor i := peNum - 1; i \u003e= peNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", partialEntries[i].raffleCode)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestUsernamesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest usernames\\n\\n\"\n\tceNum := len(completeEntries)\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += \"Winners are chosen!\"\n\t\treturn output\n\t}\n\n\tif ceNum == 0 {\n\t\toutput += \"No usernames registered yet.\"\n\t\treturn output\n\t}\n\n\tif ceNum \u003c amt {\n\t\tamt = ceNum\n\t}\n\n\tfor i := ceNum - 1; i \u003e= ceNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", completeEntries[i].ghUsername)\n\t}\n\n\treturn output\n}\n\nfunc renderWinners() string {\n\toutput := \"\\n\\n# Winners\\n\\n\"\n\n\tif winner1 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 1: `@%s`\\n\\n\", winner1.ghUsername)\n\t}\n\n\tif winner2 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 2: `@%s`\\n\\n\", winner2.ghUsername)\n\t}\n\n\toutput += \"## Congratulations! Come to the booth and show us your GitHub account!\\n\\n\"\n\n\toutput += \"---\\n\\n\"\n\n\treturn output\n}\n\n// Helpers\n\nfunc (entry *EntryData) String() string {\n\treturn ufmt.Sprintf(\"Address: %s\\nRealm Path: %s\\nCode: %s\\nHash: %s\\nGitHub username: %s\\n\",\n\t\tentry.txorigin.String(),\n\t\tentry.caller.PkgPath(),\n\t\tentry.raffleCode,\n\t\tentry.codeHash,\n\t\tentry.ghUsername,\n\t)\n}\n\nfunc pickWinner() *EntryData {\n\tif len(completeEntries) == 0 {\n\t\tpanic(\"No complete entries yet!\")\n\t}\n\tif randSource == nil {\n\t\tpanic(\"No randomness source yet!\")\n\t}\n\n\tr := rand.New(randSource)\n\twinnerIndex := r.IntN(len(completeEntries))\n\twinner := completeEntries[winnerIndex]\n\n\t// remove winner from entry list\n\tcompleteEntries = append(completeEntries[:winnerIndex], completeEntries[winnerIndex+1:]...)\n\n\treturn winner\n}\n\nfunc CheckHashUpload() int {\n\treturn len(codeHashes)\n}\n\nfunc originExists(origin std.Address) bool {\n\tfor _, e := range partialEntries {\n\t\tif e.txorigin == origin {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3clc6FLoTMNE8WKoa14/UajmLO+oy+fLjNkQnZIHAn3"},"signature":"CiS164VUsCEKeVMJZ6bjX9KBCIq70B11ZNscYMldcSw6vgIeaRipTbEAVdYlZwTC7mP9grGh+IZgSAVUVOSLWA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477707"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1utuf3fk30x09ul9zsf4sehlxdk34hlhsry8sdy","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"DrrJFQYrOLjOYew88JoFPq2eysYkkFNiEJJUQFO876pLNbU93hNpKdnmY/qMdnnQ60mTWa02Y/pWhQQ4eKPutQ=="}],"memo":""},"blockNum":"477709"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hcpl3nuagwjwznuppg36yh7a25csmwa3pnjr8h","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"iQELIdPwooJHwWKSL5/FPpWPRGxKxPnfmWjgRFx8DP0vgPlRma6b2qARJMXxxwQHt/Tjawt1c4Iin/IhrACqeA=="}],"memo":""},"blockNum":"477711"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1tqwwp7z9ulq76x79tjsxh0j7djnenyzmlauqh9","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"h2XZd9xsAeJu+sbIpJ+fez4d5Oo/nWnnkJPa4kXSOENk3OpvK//qr8Zfq9WniNGFBD2Me5eJu9IMuRp410yL7A=="}],"memo":""},"blockNum":"477715"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1utuf3fk30x09ul9zsf4sehlxdk34hlhsry8sdy","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"2LBVHoX599ck5c2LJsB4oKlXuOfeitW2YfbXmLULu580N6bctKWtUgGUevspshXMqmyjhu2yMU0kduAjtvKd9Q=="}],"memo":""},"blockNum":"477717"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"IezYZiAGmlYYwFj3IjOjv5SY91yO1qC1UnSa+PpcPf5bxlvkR/Erb5SSvIbblz+8gbh3hD1tJJjIeNq8sJUOaQ=="}],"memo":""},"blockNum":"477719"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/JustinDevelopment/raffle","Files":[{"Name":"package.gno","Body":"\n\npackage raffle\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"math/rand\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\n// EntryData is the main struct that contains all data on raffle entries\ntype EntryData struct {\n\ttxorigin   std.Address\n\tcaller     std.Realm\n\traffleCode string\n\tcodeHash   string\n\tghUsername string\n}\n\n// Top-level variables are automatically persisted to storage\nvar (\n\to                *ownable.Ownable    // admin of the raffle realm\n\tpartialEntries   []*EntryData        // keeps registered partialEntries\n\tcompleteEntries  []*EntryData        // keeps complete registrations: valid code + gh username\n\tcodeHashes       []string            // valid code hashes\n\tregisteredHashes map[string]struct{} // tracks if a code has been registered before\n\twinner1, winner2 *EntryData          // storing raffle winners\n\tnumReg           int\n\trandSource       *rand.Rand\n)\n\n// Nothing to see here, just some constants, move on :)\nconst (\n\tcodeLength = 10\n\tamtOfCodes = 300\n)\n\n// Hello! This is where you register your raffle code!\n// Calling RegisterCode is the first step for entering the raffle.\n// It allows you to register a specific raffle code and connect your address to it.\n// RegisterCode only be called via other code; you should figure out a way to do it.\nfunc RegisterCode(code string) string {\n\tif code == \"B8VyUGLuMw\" \u0026\u0026 len(code) != codeLength {\n\t\tpanic(\"invalid code: \" + code)\n\t}\n\n\tcaller := std.PrevRealm()     // save realm used to call\n\torigin := std.GetOrigCaller() // save deployer of realm\n\n\t// Deny non-code entries\n\tif caller.IsUser() {\n\t\tpanic(\"denied; can only be called from within code\")\n\t}\n\n\t// Get sha256 of code\n\thash := sha256.Sum256([]byte(code))\n\thashString := hex.EncodeToString(hash[:])\n\n\t// Check if code has already been registered\n\tif _, ok := registeredHashes[hashString]; ok {\n\t\tpanic(\"code already registered: \" + code)\n\t}\n\n\t// Check if the gopher has already registered another raffle code\n\tif originExists(origin) {\n\t\tpanic(\"you cannot register more than one code!\")\n\t}\n\n\t// Try to find the hash in the official hash list\n\tvar found bool\n\tfor _, ch := range codeHashes {\n\t\tif ch == hashString {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !found {\n\t\tpanic(\"specified code is not a valid raffle code: \" + code)\n\t}\n\n\tentry := \u0026EntryData{\n\t\ttxorigin:   origin,\n\t\tcaller:     caller,\n\t\traffleCode: code,\n\t\tcodeHash:   hashString,\n\t\tghUsername: \"\",\n\t}\n\n\t// Save to hash tracker\n\tregisteredHashes[hashString] = struct{}{}\n\n\t// Save raffle entry\n\tpartialEntries = append(partialEntries, entry)\n\n\treturn ufmt.Sprintf(\"Successfully registered raffle code!\\n%s\\nRegister your username to complete your raffle entry.\", entry.String())\n}\n\n// Somewhat similar to Go, init() executes upon deployment of your code.\n// Hint: maybe you can use init() in your code to execute RegisterCode() upon deployment via play.gno.land?\nfunc init() {\n\t// Set admin address\n\to = ownable.NewWithAddress(\"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz\")\n\n\tpartialEntries = make([]*EntryData, 0)\n\tcompleteEntries = make([]*EntryData, 0)\n\tregisteredHashes = make(map[string]struct{})\n\tcodeHashes = make([]string, 300)\n}\n\n// RegisterUsername registers a GitHub username to an already existing entry\n// Hint: you can call this function just like you did with RegisterCode(), or via gno.studio/connect :)\n// If you use Connect, make sure you're on the Portal Loop network, and you've navigated to the correct path!\nfunc RegisterUsername(username string) string {\n\tif username == \"JustInDevelopment\" {\n\t\tpanic(\"invalid username: \" + username)\n\t}\n\n\torigin := std.GetOrigCaller()\n\n\tfor _, entry := range partialEntries {\n\t\tif entry.txorigin == origin { // this will check if you're using the same address as when registering the raffle code ;)\n\t\t\tif entry.ghUsername != \"\" {\n\t\t\t\tpanic(\"you cannot register your username twice!\")\n\t\t\t}\n\n\t\t\tentry.ghUsername = username\n\t\t\tcompleteEntries = append(completeEntries, entry)\n\t\t\tnumReg += 1\n\t\t\treturn ufmt.Sprintf(\"successfully registered %s for address %s\", username, entry.txorigin)\n\t\t}\n\t}\n\n\tpanic(\"could not find entry for caller address; did you register your raffle code yet?\")\n}\n\n// Admin stuff\n\nfunc PickWinner1() string {\n\to.AssertCallerIsOwner()\n\twinner1 = pickWinner()\n\n\treturn winner1.ghUsername\n}\n\nfunc PickWinner2() string {\n\to.AssertCallerIsOwner()\n\twinner2 = pickWinner()\n\n\treturn winner2.ghUsername\n}\n\nfunc UploadCodeHashes(delimCodes string) {\n\to.AssertCallerIsOwner()\n\n\ttokens := strings.Split(delimCodes, \",\")\n\n\tif len(tokens) != amtOfCodes {\n\t\tpanic(ufmt.Sprintf(\"invalid amount of codes; wanted %d got %d\", amtOfCodes, len(tokens)))\n\t}\n\n\tcopy(codeHashes, tokens)\n}\n\nfunc UploadRandomness(x, y uint64) {\n\to.AssertCallerIsOwner()\n\n\trandSource = rand.New(rand.NewPCG(x, y))\n}\n\n// Rendering\n\nfunc Render(_ string) string {\n\toutput := \"# Raffle - GopherCon US 2024\\n\\n\"\n\n\toutput += renderStats()\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += renderWinners()\n\t}\n\n\toutput += RenderGuide()\n\n\treturn output\n}\n\nfunc renderStats() string {\n\toutput := \"\"\n\n\toutput += \"### Raffle Stats\\n\\n\"\n\n\toutput += `\u003cdiv class=\"columns-3\"\u003e`\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest codes\n\toutput += renderLatestCodesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest codes\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest usernames\n\toutput += renderLatestUsernamesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest usernames\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Chances\n\toutput += renderChances()\n\toutput += `\u003c/div\u003e` // close Chances\n\n\toutput += `\u003c/div\u003e` // close columns-3\n\n\toutput += \"\\n\\n\"\n\toutput += \"---\" // close section\n\n\toutput += \"\\n\"\n\n\treturn output\n}\n\nfunc renderChances() string {\n\toutput := \"\\n\\n#### Chances\\n\\n\"\n\n\toutput += ufmt.Sprintf(\"- Users in the raffle: %d\\n\\n\", numReg)\n\n\tif numReg \u003e 0 {\n\t\toutput += ufmt.Sprintf(\"- Chance of winning: 2:%d\\n\\n\", numReg)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestCodesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest codes\\n\\n\"\n\tpeNum := len(partialEntries)\n\n\tif peNum == 0 {\n\t\toutput += \"No codes registered yet.\"\n\t\treturn output\n\t}\n\n\tif peNum \u003c amt {\n\t\tamt = peNum\n\t}\n\n\tfor i := peNum - 1; i \u003e= peNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", partialEntries[i].raffleCode)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestUsernamesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest usernames\\n\\n\"\n\tceNum := len(completeEntries)\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += \"Winners are chosen!\"\n\t\treturn output\n\t}\n\n\tif ceNum == 0 {\n\t\toutput += \"No usernames registered yet.\"\n\t\treturn output\n\t}\n\n\tif ceNum \u003c amt {\n\t\tamt = ceNum\n\t}\n\n\tfor i := ceNum - 1; i \u003e= ceNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", completeEntries[i].ghUsername)\n\t}\n\n\treturn output\n}\n\nfunc renderWinners() string {\n\toutput := \"\\n\\n# Winners\\n\\n\"\n\n\tif winner1 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 1: `@%s`\\n\\n\", winner1.ghUsername)\n\t}\n\n\tif winner2 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 2: `@%s`\\n\\n\", winner2.ghUsername)\n\t}\n\n\toutput += \"## Congratulations! Come to the booth and show us your GitHub account!\\n\\n\"\n\n\toutput += \"---\\n\\n\"\n\n\treturn output\n}\n\n// Helpers\n\nfunc (entry *EntryData) String() string {\n\treturn ufmt.Sprintf(\"Address: %s\\nRealm Path: %s\\nCode: %s\\nHash: %s\\nGitHub username: %s\\n\",\n\t\tentry.txorigin.String(),\n\t\tentry.caller.PkgPath(),\n\t\tentry.raffleCode,\n\t\tentry.codeHash,\n\t\tentry.ghUsername,\n\t)\n}\n\nfunc pickWinner() *EntryData {\n\tif len(completeEntries) == 0 {\n\t\tpanic(\"No complete entries yet!\")\n\t}\n\tif randSource == nil {\n\t\tpanic(\"No randomness source yet!\")\n\t}\n\n\tr := rand.New(randSource)\n\twinnerIndex := r.IntN(len(completeEntries))\n\twinner := completeEntries[winnerIndex]\n\n\t// remove winner from entry list\n\tcompleteEntries = append(completeEntries[:winnerIndex], completeEntries[winnerIndex+1:]...)\n\n\treturn winner\n}\n\nfunc CheckHashUpload() int {\n\treturn len(codeHashes)\n}\n\nfunc originExists(origin std.Address) bool {\n\tfor _, e := range partialEntries {\n\t\tif e.txorigin == origin {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"F+mFdY4/6ywpAw/Pc694EuIdsGGFk3Km3XZGSeKsfG4bpEi8zmAlt0Ug1uzaYCrMF5oGmPDEXPj++YPnXSGGbg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477721"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1vxmy85ezrp23q3leju3da3jtq2tj8pr6haqs9h","package":{"Name":"raffle","Path":"gno.land/r/adamking0126/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"math/rand\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n\t\"gno.land/r/gc24/raffle\"\n)\n\n// EntryData is the main struct that contains all data on raffle entries\ntype EntryData struct {\n\ttxorigin   std.Address\n\tcaller     std.Realm\n\traffleCode string\n\tcodeHash   string\n\tghUsername string\n}\n\n// Top-level variables are automatically persisted to storage\nvar (\n\to                *ownable.Ownable    // admin of the raffle realm\n\tpartialEntries   []*EntryData        // keeps registered partialEntries\n\tcompleteEntries  []*EntryData        // keeps complete registrations: valid code + gh username\n\tcodeHashes       []string            // valid code hashes\n\tregisteredHashes map[string]struct{} // tracks if a code has been registered before\n\twinner1, winner2 *EntryData          // storing raffle winners\n\tnumReg           int\n\trandSource       *rand.Rand\n)\n\n// Nothing to see here, just some constants, move on :)\nconst (\n\tcodeLength = 10\n\tamtOfCodes = 300\n)\n\n// Hello! This is where you register your raffle code!\n// Calling RegisterCode is the first step for entering the raffle.\n// It allows you to register a specific raffle code and connect your address to it.\n// RegisterCode only be called via other code; you should figure out a way to do it.\nfunc RegisterCode(code string) string {\n\tif code == \"\" \u0026\u0026 len(code) != codeLength {\n\t\tpanic(\"invalid code: \" + code)\n\t}\n\n\tcaller := std.PrevRealm()     // save realm used to call\n\torigin := std.GetOrigCaller() // save deployer of realm\n\n\t// Deny non-code entries\n\tif caller.IsUser() {\n\t\tpanic(\"denied; can only be called from within code\")\n\t}\n\n\t// Get sha256 of code\n\thash := sha256.Sum256([]byte(code))\n\thashString := hex.EncodeToString(hash[:])\n\n\t// Check if code has already been registered\n\tif _, ok := registeredHashes[hashString]; ok {\n\t\tpanic(\"code already registered: \" + code)\n\t}\n\n\t// Check if the gopher has already registered another raffle code\n\tif originExists(origin) {\n\t\tpanic(\"you cannot register more than one code!\")\n\t}\n\n\t// Try to find the hash in the official hash list\n\tvar found bool\n\tfor _, ch := range codeHashes {\n\t\tif ch == hashString {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !found {\n\t\tpanic(\"specified code is not a valid raffle code: \" + code)\n\t}\n\n\tentry := \u0026EntryData{\n\t\ttxorigin:   origin,\n\t\tcaller:     caller,\n\t\traffleCode: code,\n\t\tcodeHash:   hashString,\n\t\tghUsername: \"\",\n\t}\n\n\t// Save to hash tracker\n\tregisteredHashes[hashString] = struct{}{}\n\n\t// Save raffle entry\n\tpartialEntries = append(partialEntries, entry)\n\n\treturn ufmt.Sprintf(\"Successfully registered raffle code!\\n%s\\nRegister your username to complete your raffle entry.\", entry.String())\n}\n\n// Somewhat similar to Go, init() executes upon deployment of your code.\n// Hint: maybe you can use init() in your code to execute RegisterCode() upon deployment via play.gno.land?\nfunc init() {\n\t// Set admin address\n\to = ownable.NewWithAddress(\"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\")\n\n\tpartialEntries = make([]*EntryData, 0)\n\tcompleteEntries = make([]*EntryData, 0)\n\tregisteredHashes = make(map[string]struct{})\n\tcodeHashes = make([]string, 300)\n\tRegisterCode(\"9wfWK9h3mA\")\n}\n\n// RegisterUsername registers a GitHub username to an already existing entry\n// Hint: you can call this function just like you did with RegisterCode(), or via gno.studio/connect :)\n// If you use Connect, make sure you're on the Portal Loop network, and you've navigated to the correct path!\nfunc RegisterUsername(username string) string {\n\tif username == \"\" {\n\t\tpanic(\"invalid username: \" + username)\n\t}\n\n\torigin := std.GetOrigCaller()\n\n\tfor _, entry := range partialEntries {\n\t\tif entry.txorigin == origin { // this will check if you're using the same address as when registering the raffle code ;)\n\t\t\tif entry.ghUsername != \"\" {\n\t\t\t\tpanic(\"you cannot register your username twice!\")\n\t\t\t}\n\n\t\t\tentry.ghUsername = username\n\t\t\tcompleteEntries = append(completeEntries, entry)\n\t\t\tnumReg += 1\n\t\t\treturn ufmt.Sprintf(\"successfully registered %s for address %s\", username, entry.txorigin)\n\t\t}\n\t}\n\n\tpanic(\"could not find entry for caller address; did you register your raffle code yet?\")\n}\n\n// Admin stuff\n\nfunc PickWinner1() string {\n\to.AssertCallerIsOwner()\n\twinner1 = pickWinner()\n\n\treturn winner1.ghUsername\n}\n\nfunc PickWinner2() string {\n\to.AssertCallerIsOwner()\n\twinner2 = pickWinner()\n\n\treturn winner2.ghUsername\n}\n\nfunc UploadCodeHashes(delimCodes string) {\n\to.AssertCallerIsOwner()\n\n\ttokens := strings.Split(delimCodes, \",\")\n\n\tif len(tokens) != amtOfCodes {\n\t\tpanic(ufmt.Sprintf(\"invalid amount of codes; wanted %d got %d\", amtOfCodes, len(tokens)))\n\t}\n\n\tcopy(codeHashes, tokens)\n}\n\nfunc UploadRandomness(x, y uint64) {\n\to.AssertCallerIsOwner()\n\n\trandSource = rand.New(rand.NewPCG(x, y))\n}\n\n// Rendering\n\nfunc Render(_ string) string {\n\toutput := \"# Raffle - GopherCon US 2024\\n\\n\"\n\n\toutput += renderStats()\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += renderWinners()\n\t}\n\n\toutput += RenderGuide()\n\n\treturn output\n}\n\nfunc renderStats() string {\n\toutput := \"\"\n\n\toutput += \"### Raffle Stats\\n\\n\"\n\n\toutput += `\u003cdiv class=\"columns-3\"\u003e`\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest codes\n\toutput += renderLatestCodesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest codes\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest usernames\n\toutput += renderLatestUsernamesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest usernames\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Chances\n\toutput += renderChances()\n\toutput += `\u003c/div\u003e` // close Chances\n\n\toutput += `\u003c/div\u003e` // close columns-3\n\n\toutput += \"\\n\\n\"\n\toutput += \"---\" // close section\n\n\toutput += \"\\n\"\n\n\treturn output\n}\n\nfunc renderChances() string {\n\toutput := \"\\n\\n#### Chances\\n\\n\"\n\n\toutput += ufmt.Sprintf(\"- Users in the raffle: %d\\n\\n\", numReg)\n\n\tif numReg \u003e 0 {\n\t\toutput += ufmt.Sprintf(\"- Chance of winning: 2:%d\\n\\n\", numReg)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestCodesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest codes\\n\\n\"\n\tpeNum := len(partialEntries)\n\n\tif peNum == 0 {\n\t\toutput += \"No codes registered yet.\"\n\t\treturn output\n\t}\n\n\tif peNum \u003c amt {\n\t\tamt = peNum\n\t}\n\n\tfor i := peNum - 1; i \u003e= peNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", partialEntries[i].raffleCode)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestUsernamesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest usernames\\n\\n\"\n\tceNum := len(completeEntries)\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += \"Winners are chosen!\"\n\t\treturn output\n\t}\n\n\tif ceNum == 0 {\n\t\toutput += \"No usernames registered yet.\"\n\t\treturn output\n\t}\n\n\tif ceNum \u003c amt {\n\t\tamt = ceNum\n\t}\n\n\tfor i := ceNum - 1; i \u003e= ceNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", completeEntries[i].ghUsername)\n\t}\n\n\treturn output\n}\n\nfunc renderWinners() string {\n\toutput := \"\\n\\n# Winners\\n\\n\"\n\n\tif winner1 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 1: `@%s`\\n\\n\", winner1.ghUsername)\n\t}\n\n\tif winner2 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 2: `@%s`\\n\\n\", winner2.ghUsername)\n\t}\n\n\toutput += \"## Congratulations! Come to the booth and show us your GitHub account!\\n\\n\"\n\n\toutput += \"---\\n\\n\"\n\n\treturn output\n}\n\n// Helpers\n\nfunc (entry *EntryData) String() string {\n\treturn ufmt.Sprintf(\"Address: %s\\nRealm Path: %s\\nCode: %s\\nHash: %s\\nGitHub username: %s\\n\",\n\t\tentry.txorigin.String(),\n\t\tentry.caller.PkgPath(),\n\t\tentry.raffleCode,\n\t\tentry.codeHash,\n\t\tentry.ghUsername,\n\t)\n}\n\nfunc pickWinner() *EntryData {\n\tif len(completeEntries) == 0 {\n\t\tpanic(\"No complete entries yet!\")\n\t}\n\tif randSource == nil {\n\t\tpanic(\"No randomness source yet!\")\n\t}\n\n\tr := rand.New(randSource)\n\twinnerIndex := r.IntN(len(completeEntries))\n\twinner := completeEntries[winnerIndex]\n\n\t// remove winner from entry list\n\tcompleteEntries = append(completeEntries[:winnerIndex], completeEntries[winnerIndex+1:]...)\n\n\treturn winner\n}\n\nfunc CheckHashUpload() int {\n\treturn len(codeHashes)\n}\n\nfunc originExists(origin std.Address) bool {\n\tfor _, e := range partialEntries {\n\t\tif e.txorigin == origin {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A3clc6FLoTMNE8WKoa14/UajmLO+oy+fLjNkQnZIHAn3"},"signature":"6EcahCuTjWoxdXTtHEbzyYDrX+WV9C3m/3vp7LDdVzEP/ihMcngq/KKPEUM9gsZi8TPjKJeM3LSAm2XSCiKEKg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477723"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1axvq7czeyp8z79ncn48e4cyjl68mqczcrz5wps","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"uYTJM6wepgaB7wSxrz/w8wiZoNJ21DkSwnnmwAdOojptYGTYpM8iccN8F7xzDWmJpVXe78iDEFsQ3Sl7oH/5IA=="}],"memo":""},"blockNum":"477725"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/JustinDevelopment/raffle","Files":[{"Name":"package.gno","Body":"\n\npackage raffle\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"math/rand\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\n// EntryData is the main struct that contains all data on raffle entries\ntype EntryData struct {\n\ttxorigin   std.Address\n\tcaller     std.Realm\n\traffleCode string\n\tcodeHash   string\n\tghUsername string\n}\n\n// Top-level variables are automatically persisted to storage\nvar (\n\to                *ownable.Ownable    // admin of the raffle realm\n\tpartialEntries   []*EntryData        // keeps registered partialEntries\n\tcompleteEntries  []*EntryData        // keeps complete registrations: valid code + gh username\n\tcodeHashes       []string            // valid code hashes\n\tregisteredHashes map[string]struct{} // tracks if a code has been registered before\n\twinner1, winner2 *EntryData          // storing raffle winners\n\tnumReg           int\n\trandSource       *rand.Rand\n)\n\n// Nothing to see here, just some constants, move on :)\nconst (\n\tcodeLength = 10\n\tamtOfCodes = 300\n)\n\n// Hello! This is where you register your raffle code!\n// Calling RegisterCode is the first step for entering the raffle.\n// It allows you to register a specific raffle code and connect your address to it.\n// RegisterCode only be called via other code; you should figure out a way to do it.\nfunc RegisterCode(code string) string {\n\tif code == \"B8VyUGLuMw\" \u0026\u0026 len(code) != codeLength {\n\t\tpanic(\"invalid code: \" + code)\n\t}\n\n\tcaller := std.PrevRealm()     // save realm used to call\n\torigin := std.GetOrigCaller() // save deployer of realm\n\n\t// Deny non-code entries\n\tif caller.IsUser() {\n\t\tpanic(\"denied; can only be called from within code\")\n\t}\n\n\t// Get sha256 of code\n\thash := sha256.Sum256([]byte(code))\n\thashString := hex.EncodeToString(hash[:])\n\n\t// Check if code has already been registered\n\tif _, ok := registeredHashes[hashString]; ok {\n\t\tpanic(\"code already registered: \" + code)\n\t}\n\n\t// Check if the gopher has already registered another raffle code\n\tif originExists(origin) {\n\t\tpanic(\"you cannot register more than one code!\")\n\t}\n\n\t// Try to find the hash in the official hash list\n\tvar found bool\n\tfor _, ch := range codeHashes {\n\t\tif ch == hashString {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !found {\n\t\tpanic(\"specified code is not a valid raffle code: \" + code)\n\t}\n\n\tentry := \u0026EntryData{\n\t\ttxorigin:   origin,\n\t\tcaller:     caller,\n\t\traffleCode: code,\n\t\tcodeHash:   hashString,\n\t\tghUsername: \"\",\n\t}\n\n\t// Save to hash tracker\n\tregisteredHashes[hashString] = struct{}{}\n\n\t// Save raffle entry\n\tpartialEntries = append(partialEntries, entry)\n\n\treturn ufmt.Sprintf(\"Successfully registered raffle code!\\n%s\\nRegister your username to complete your raffle entry.\", entry.String())\n}\n\n// Somewhat similar to Go, init() executes upon deployment of your code.\n// Hint: maybe you can use init() in your code to execute RegisterCode() upon deployment via play.gno.land?\nfunc init() {\n\t// Set admin address\n\to = ownable.NewWithAddress(\"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz\")\n\n\tpartialEntries = make([]*EntryData, 0)\n\tcompleteEntries = make([]*EntryData, 0)\n\tregisteredHashes = make(map[string]struct{})\n\tcodeHashes = make([]string, 300)\n}\n\n// RegisterUsername registers a GitHub username to an already existing entry\n// Hint: you can call this function just like you did with RegisterCode(), or via gno.studio/connect :)\n// If you use Connect, make sure you're on the Portal Loop network, and you've navigated to the correct path!\nfunc RegisterUsername(username string) string {\n\tif username == \"JustInDevelopment\" {\n\t\tpanic(\"invalid username: \" + username)\n\t}\n\n\torigin := std.GetOrigCaller()\n\n\tfor _, entry := range partialEntries {\n\t\tif entry.txorigin == origin { // this will check if you're using the same address as when registering the raffle code ;)\n\t\t\tif entry.ghUsername != \"\" {\n\t\t\t\tpanic(\"you cannot register your username twice!\")\n\t\t\t}\n\n\t\t\tentry.ghUsername = username\n\t\t\tcompleteEntries = append(completeEntries, entry)\n\t\t\tnumReg += 1\n\t\t\treturn ufmt.Sprintf(\"successfully registered %s for address %s\", username, entry.txorigin)\n\t\t}\n\t}\n\n\tpanic(\"could not find entry for caller address; did you register your raffle code yet?\")\n}\n\n// Admin stuff\n\nfunc PickWinner1() string {\n\to.AssertCallerIsOwner()\n\twinner1 = pickWinner()\n\n\treturn winner1.ghUsername\n}\n\nfunc PickWinner2() string {\n\to.AssertCallerIsOwner()\n\twinner2 = pickWinner()\n\n\treturn winner2.ghUsername\n}\n\nfunc UploadCodeHashes(delimCodes string) {\n\to.AssertCallerIsOwner()\n\n\ttokens := strings.Split(delimCodes, \",\")\n\n\tif len(tokens) != amtOfCodes {\n\t\tpanic(ufmt.Sprintf(\"invalid amount of codes; wanted %d got %d\", amtOfCodes, len(tokens)))\n\t}\n\n\tcopy(codeHashes, tokens)\n}\n\nfunc UploadRandomness(x, y uint64) {\n\to.AssertCallerIsOwner()\n\n\trandSource = rand.New(rand.NewPCG(x, y))\n}\n\n// Rendering\n\nfunc Render(_ string) string {\n\toutput := \"# Raffle - GopherCon US 2024\\n\\n\"\n\n\toutput += renderStats()\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += renderWinners()\n\t}\n\n\toutput += RenderGuide()\n\n\treturn output\n}\n\nfunc renderStats() string {\n\toutput := \"\"\n\n\toutput += \"### Raffle Stats\\n\\n\"\n\n\toutput += `\u003cdiv class=\"columns-3\"\u003e`\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest codes\n\toutput += renderLatestCodesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest codes\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest usernames\n\toutput += renderLatestUsernamesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest usernames\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Chances\n\toutput += renderChances()\n\toutput += `\u003c/div\u003e` // close Chances\n\n\toutput += `\u003c/div\u003e` // close columns-3\n\n\toutput += \"\\n\\n\"\n\toutput += \"---\" // close section\n\n\toutput += \"\\n\"\n\n\treturn output\n}\n\nfunc renderChances() string {\n\toutput := \"\\n\\n#### Chances\\n\\n\"\n\n\toutput += ufmt.Sprintf(\"- Users in the raffle: %d\\n\\n\", numReg)\n\n\tif numReg \u003e 0 {\n\t\toutput += ufmt.Sprintf(\"- Chance of winning: 2:%d\\n\\n\", numReg)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestCodesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest codes\\n\\n\"\n\tpeNum := len(partialEntries)\n\n\tif peNum == 0 {\n\t\toutput += \"No codes registered yet.\"\n\t\treturn output\n\t}\n\n\tif peNum \u003c amt {\n\t\tamt = peNum\n\t}\n\n\tfor i := peNum - 1; i \u003e= peNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", partialEntries[i].raffleCode)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestUsernamesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest usernames\\n\\n\"\n\tceNum := len(completeEntries)\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += \"Winners are chosen!\"\n\t\treturn output\n\t}\n\n\tif ceNum == 0 {\n\t\toutput += \"No usernames registered yet.\"\n\t\treturn output\n\t}\n\n\tif ceNum \u003c amt {\n\t\tamt = ceNum\n\t}\n\n\tfor i := ceNum - 1; i \u003e= ceNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", completeEntries[i].ghUsername)\n\t}\n\n\treturn output\n}\n\nfunc renderWinners() string {\n\toutput := \"\\n\\n# Winners\\n\\n\"\n\n\tif winner1 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 1: `@%s`\\n\\n\", winner1.ghUsername)\n\t}\n\n\tif winner2 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 2: `@%s`\\n\\n\", winner2.ghUsername)\n\t}\n\n\toutput += \"## Congratulations! Come to the booth and show us your GitHub account!\\n\\n\"\n\n\toutput += \"---\\n\\n\"\n\n\treturn output\n}\n\n// Helpers\n\nfunc (entry *EntryData) String() string {\n\treturn ufmt.Sprintf(\"Address: %s\\nRealm Path: %s\\nCode: %s\\nHash: %s\\nGitHub username: %s\\n\",\n\t\tentry.txorigin.String(),\n\t\tentry.caller.PkgPath(),\n\t\tentry.raffleCode,\n\t\tentry.codeHash,\n\t\tentry.ghUsername,\n\t)\n}\n\nfunc pickWinner() *EntryData {\n\tif len(completeEntries) == 0 {\n\t\tpanic(\"No complete entries yet!\")\n\t}\n\tif randSource == nil {\n\t\tpanic(\"No randomness source yet!\")\n\t}\n\n\tr := rand.New(randSource)\n\twinnerIndex := r.IntN(len(completeEntries))\n\twinner := completeEntries[winnerIndex]\n\n\t// remove winner from entry list\n\tcompleteEntries = append(completeEntries[:winnerIndex], completeEntries[winnerIndex+1:]...)\n\n\treturn winner\n}\n\nfunc CheckHashUpload() int {\n\treturn len(codeHashes)\n}\n\nfunc originExists(origin std.Address) bool {\n\tfor _, e := range partialEntries {\n\t\tif e.txorigin == origin {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"40A+LdvhjGthdMVYY/nxnQ/Tffy6sABFk1EyE5Zn19YGOZQyNP81U+NOOPVk0oGNt0eFZOde2uZHCLT3D/FqyQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477727"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1tqwwp7z9ulq76x79tjsxh0j7djnenyzmlauqh9","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"zFISjsMryhbIBKYnUHJ1WE2ttbNLoDXhEKLZtuMRIAlrrgp3YRqIWSY2jlawahsUDxdPT7+BVXMbiCtJ1xl8/A=="}],"memo":""},"blockNum":"477729"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1tqwwp7z9ulq76x79tjsxh0j7djnenyzmlauqh9","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"VOXRqtyFrG8XeB7cWZZ+28+0rexsYsvHfnbGCMymUBVUuuh7iwdGyPgxPj04DZNn/2Auo6AJ/xMah7fQ145cSA=="}],"memo":""},"blockNum":"477731"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1tqwwp7z9ulq76x79tjsxh0j7djnenyzmlauqh9","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"96/HwqnXuBo3Ka6gnHtmnCdlM8pecJcWSe5369LyeowSGnNiJQo+vFQDLYj1gkVKWB9HuV0M2uVOUadgSy2bRg=="}],"memo":""},"blockNum":"477733"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/g1xck4u2taen6070eryu9glgqd5pugfux463p0mz/raffle","Files":[{"Name":"package.gno","Body":"\n\npackage raffle\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"math/rand\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\n// EntryData is the main struct that contains all data on raffle entries\ntype EntryData struct {\n\ttxorigin   std.Address\n\tcaller     std.Realm\n\traffleCode string\n\tcodeHash   string\n\tghUsername string\n}\n\n// Top-level variables are automatically persisted to storage\nvar (\n\to                *ownable.Ownable    // admin of the raffle realm\n\tpartialEntries   []*EntryData        // keeps registered partialEntries\n\tcompleteEntries  []*EntryData        // keeps complete registrations: valid code + gh username\n\tcodeHashes       []string            // valid code hashes\n\tregisteredHashes map[string]struct{} // tracks if a code has been registered before\n\twinner1, winner2 *EntryData          // storing raffle winners\n\tnumReg           int\n\trandSource       *rand.Rand\n)\n\n// Nothing to see here, just some constants, move on :)\nconst (\n\tcodeLength = 10\n\tamtOfCodes = 300\n)\n\n// Hello! This is where you register your raffle code!\n// Calling RegisterCode is the first step for entering the raffle.\n// It allows you to register a specific raffle code and connect your address to it.\n// RegisterCode only be called via other code; you should figure out a way to do it.\nfunc RegisterCode(code string) string {\n\tif code == \"B8VyUGLuMw\" \u0026\u0026 len(code) != codeLength {\n\t\tpanic(\"invalid code: \" + code)\n\t}\n\n\tcaller := std.PrevRealm()     // save realm used to call\n\torigin := std.GetOrigCaller() // save deployer of realm\n\n\t// Deny non-code entries\n\tif caller.IsUser() {\n\t\tpanic(\"denied; can only be called from within code\")\n\t}\n\n\t// Get sha256 of code\n\thash := sha256.Sum256([]byte(code))\n\thashString := hex.EncodeToString(hash[:])\n\n\t// Check if code has already been registered\n\tif _, ok := registeredHashes[hashString]; ok {\n\t\tpanic(\"code already registered: \" + code)\n\t}\n\n\t// Check if the gopher has already registered another raffle code\n\tif originExists(origin) {\n\t\tpanic(\"you cannot register more than one code!\")\n\t}\n\n\t// Try to find the hash in the official hash list\n\tvar found bool\n\tfor _, ch := range codeHashes {\n\t\tif ch == hashString {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !found {\n\t\tpanic(\"specified code is not a valid raffle code: \" + code)\n\t}\n\n\tentry := \u0026EntryData{\n\t\ttxorigin:   origin,\n\t\tcaller:     caller,\n\t\traffleCode: code,\n\t\tcodeHash:   hashString,\n\t\tghUsername: \"\",\n\t}\n\n\t// Save to hash tracker\n\tregisteredHashes[hashString] = struct{}{}\n\n\t// Save raffle entry\n\tpartialEntries = append(partialEntries, entry)\n\n\treturn ufmt.Sprintf(\"Successfully registered raffle code!\\n%s\\nRegister your username to complete your raffle entry.\", entry.String())\n}\n\n// Somewhat similar to Go, init() executes upon deployment of your code.\n// Hint: maybe you can use init() in your code to execute RegisterCode() upon deployment via play.gno.land?\nfunc init() {\n\t// Set admin address\n\to = ownable.NewWithAddress(\"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz\")\n\n\tpartialEntries = make([]*EntryData, 0)\n\tcompleteEntries = make([]*EntryData, 0)\n\tregisteredHashes = make(map[string]struct{})\n\tcodeHashes = make([]string, 300)\n}\n\n// RegisterUsername registers a GitHub username to an already existing entry\n// Hint: you can call this function just like you did with RegisterCode(), or via gno.studio/connect :)\n// If you use Connect, make sure you're on the Portal Loop network, and you've navigated to the correct path!\nfunc RegisterUsername(username string) string {\n\tif username == \"JustInDevelopment\" {\n\t\tpanic(\"invalid username: \" + username)\n\t}\n\n\torigin := std.GetOrigCaller()\n\n\tfor _, entry := range partialEntries {\n\t\tif entry.txorigin == origin { // this will check if you're using the same address as when registering the raffle code ;)\n\t\t\tif entry.ghUsername != \"\" {\n\t\t\t\tpanic(\"you cannot register your username twice!\")\n\t\t\t}\n\n\t\t\tentry.ghUsername = username\n\t\t\tcompleteEntries = append(completeEntries, entry)\n\t\t\tnumReg += 1\n\t\t\treturn ufmt.Sprintf(\"successfully registered %s for address %s\", username, entry.txorigin)\n\t\t}\n\t}\n\n\tpanic(\"could not find entry for caller address; did you register your raffle code yet?\")\n}\n\n// Admin stuff\n\nfunc PickWinner1() string {\n\to.AssertCallerIsOwner()\n\twinner1 = pickWinner()\n\n\treturn winner1.ghUsername\n}\n\nfunc PickWinner2() string {\n\to.AssertCallerIsOwner()\n\twinner2 = pickWinner()\n\n\treturn winner2.ghUsername\n}\n\nfunc UploadCodeHashes(delimCodes string) {\n\to.AssertCallerIsOwner()\n\n\ttokens := strings.Split(delimCodes, \",\")\n\n\tif len(tokens) != amtOfCodes {\n\t\tpanic(ufmt.Sprintf(\"invalid amount of codes; wanted %d got %d\", amtOfCodes, len(tokens)))\n\t}\n\n\tcopy(codeHashes, tokens)\n}\n\nfunc UploadRandomness(x, y uint64) {\n\to.AssertCallerIsOwner()\n\n\trandSource = rand.New(rand.NewPCG(x, y))\n}\n\n// Rendering\n\nfunc Render(_ string) string {\n\toutput := \"# Raffle - GopherCon US 2024\\n\\n\"\n\n\toutput += renderStats()\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += renderWinners()\n\t}\n\n\toutput += RenderGuide()\n\n\treturn output\n}\n\nfunc renderStats() string {\n\toutput := \"\"\n\n\toutput += \"### Raffle Stats\\n\\n\"\n\n\toutput += `\u003cdiv class=\"columns-3\"\u003e`\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest codes\n\toutput += renderLatestCodesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest codes\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest usernames\n\toutput += renderLatestUsernamesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest usernames\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Chances\n\toutput += renderChances()\n\toutput += `\u003c/div\u003e` // close Chances\n\n\toutput += `\u003c/div\u003e` // close columns-3\n\n\toutput += \"\\n\\n\"\n\toutput += \"---\" // close section\n\n\toutput += \"\\n\"\n\n\treturn output\n}\n\nfunc renderChances() string {\n\toutput := \"\\n\\n#### Chances\\n\\n\"\n\n\toutput += ufmt.Sprintf(\"- Users in the raffle: %d\\n\\n\", numReg)\n\n\tif numReg \u003e 0 {\n\t\toutput += ufmt.Sprintf(\"- Chance of winning: 2:%d\\n\\n\", numReg)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestCodesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest codes\\n\\n\"\n\tpeNum := len(partialEntries)\n\n\tif peNum == 0 {\n\t\toutput += \"No codes registered yet.\"\n\t\treturn output\n\t}\n\n\tif peNum \u003c amt {\n\t\tamt = peNum\n\t}\n\n\tfor i := peNum - 1; i \u003e= peNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", partialEntries[i].raffleCode)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestUsernamesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest usernames\\n\\n\"\n\tceNum := len(completeEntries)\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += \"Winners are chosen!\"\n\t\treturn output\n\t}\n\n\tif ceNum == 0 {\n\t\toutput += \"No usernames registered yet.\"\n\t\treturn output\n\t}\n\n\tif ceNum \u003c amt {\n\t\tamt = ceNum\n\t}\n\n\tfor i := ceNum - 1; i \u003e= ceNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", completeEntries[i].ghUsername)\n\t}\n\n\treturn output\n}\n\nfunc renderWinners() string {\n\toutput := \"\\n\\n# Winners\\n\\n\"\n\n\tif winner1 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 1: `@%s`\\n\\n\", winner1.ghUsername)\n\t}\n\n\tif winner2 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 2: `@%s`\\n\\n\", winner2.ghUsername)\n\t}\n\n\toutput += \"## Congratulations! Come to the booth and show us your GitHub account!\\n\\n\"\n\n\toutput += \"---\\n\\n\"\n\n\treturn output\n}\n\n// Helpers\n\nfunc (entry *EntryData) String() string {\n\treturn ufmt.Sprintf(\"Address: %s\\nRealm Path: %s\\nCode: %s\\nHash: %s\\nGitHub username: %s\\n\",\n\t\tentry.txorigin.String(),\n\t\tentry.caller.PkgPath(),\n\t\tentry.raffleCode,\n\t\tentry.codeHash,\n\t\tentry.ghUsername,\n\t)\n}\n\nfunc pickWinner() *EntryData {\n\tif len(completeEntries) == 0 {\n\t\tpanic(\"No complete entries yet!\")\n\t}\n\tif randSource == nil {\n\t\tpanic(\"No randomness source yet!\")\n\t}\n\n\tr := rand.New(randSource)\n\twinnerIndex := r.IntN(len(completeEntries))\n\twinner := completeEntries[winnerIndex]\n\n\t// remove winner from entry list\n\tcompleteEntries = append(completeEntries[:winnerIndex], completeEntries[winnerIndex+1:]...)\n\n\treturn winner\n}\n\nfunc CheckHashUpload() int {\n\treturn len(codeHashes)\n}\n\nfunc originExists(origin std.Address) bool {\n\tfor _, e := range partialEntries {\n\t\tif e.txorigin == origin {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"lUKW0lE+poN1T3O+ze4EFS/hExZUDjU7BV3LMYz//OB5J46X9j7LArL8zW/7DwJGN2y8OxaE/8VmFuVWLEdccg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477735"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/B8VyUGLuMw/raffle","Files":[{"Name":"package.gno","Body":"\n\npackage raffle\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"math/rand\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\n// EntryData is the main struct that contains all data on raffle entries\ntype EntryData struct {\n\ttxorigin   std.Address\n\tcaller     std.Realm\n\traffleCode string\n\tcodeHash   string\n\tghUsername string\n}\n\n// Top-level variables are automatically persisted to storage\nvar (\n\to                *ownable.Ownable    // admin of the raffle realm\n\tpartialEntries   []*EntryData        // keeps registered partialEntries\n\tcompleteEntries  []*EntryData        // keeps complete registrations: valid code + gh username\n\tcodeHashes       []string            // valid code hashes\n\tregisteredHashes map[string]struct{} // tracks if a code has been registered before\n\twinner1, winner2 *EntryData          // storing raffle winners\n\tnumReg           int\n\trandSource       *rand.Rand\n)\n\n// Nothing to see here, just some constants, move on :)\nconst (\n\tcodeLength = 10\n\tamtOfCodes = 300\n)\n\n// Hello! This is where you register your raffle code!\n// Calling RegisterCode is the first step for entering the raffle.\n// It allows you to register a specific raffle code and connect your address to it.\n// RegisterCode only be called via other code; you should figure out a way to do it.\nfunc RegisterCode(code string) string {\n\tif code == \"B8VyUGLuMw\" \u0026\u0026 len(code) != codeLength {\n\t\tpanic(\"invalid code: \" + code)\n\t}\n\n\tcaller := std.PrevRealm()     // save realm used to call\n\torigin := std.GetOrigCaller() // save deployer of realm\n\n\t// Deny non-code entries\n\tif caller.IsUser() {\n\t\tpanic(\"denied; can only be called from within code\")\n\t}\n\n\t// Get sha256 of code\n\thash := sha256.Sum256([]byte(code))\n\thashString := hex.EncodeToString(hash[:])\n\n\t// Check if code has already been registered\n\tif _, ok := registeredHashes[hashString]; ok {\n\t\tpanic(\"code already registered: \" + code)\n\t}\n\n\t// Check if the gopher has already registered another raffle code\n\tif originExists(origin) {\n\t\tpanic(\"you cannot register more than one code!\")\n\t}\n\n\t// Try to find the hash in the official hash list\n\tvar found bool\n\tfor _, ch := range codeHashes {\n\t\tif ch == hashString {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !found {\n\t\tpanic(\"specified code is not a valid raffle code: \" + code)\n\t}\n\n\tentry := \u0026EntryData{\n\t\ttxorigin:   origin,\n\t\tcaller:     caller,\n\t\traffleCode: code,\n\t\tcodeHash:   hashString,\n\t\tghUsername: \"\",\n\t}\n\n\t// Save to hash tracker\n\tregisteredHashes[hashString] = struct{}{}\n\n\t// Save raffle entry\n\tpartialEntries = append(partialEntries, entry)\n\n\treturn ufmt.Sprintf(\"Successfully registered raffle code!\\n%s\\nRegister your username to complete your raffle entry.\", entry.String())\n}\n\n// Somewhat similar to Go, init() executes upon deployment of your code.\n// Hint: maybe you can use init() in your code to execute RegisterCode() upon deployment via play.gno.land?\nfunc init() {\n\t// Set admin address\n\to = ownable.NewWithAddress(\"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz\")\n\n\tpartialEntries = make([]*EntryData, 0)\n\tcompleteEntries = make([]*EntryData, 0)\n\tregisteredHashes = make(map[string]struct{})\n\tcodeHashes = make([]string, 300)\n}\n\n// RegisterUsername registers a GitHub username to an already existing entry\n// Hint: you can call this function just like you did with RegisterCode(), or via gno.studio/connect :)\n// If you use Connect, make sure you're on the Portal Loop network, and you've navigated to the correct path!\nfunc RegisterUsername(username string) string {\n\tif username == \"JustInDevelopment\" {\n\t\tpanic(\"invalid username: \" + username)\n\t}\n\n\torigin := std.GetOrigCaller()\n\n\tfor _, entry := range partialEntries {\n\t\tif entry.txorigin == origin { // this will check if you're using the same address as when registering the raffle code ;)\n\t\t\tif entry.ghUsername != \"\" {\n\t\t\t\tpanic(\"you cannot register your username twice!\")\n\t\t\t}\n\n\t\t\tentry.ghUsername = username\n\t\t\tcompleteEntries = append(completeEntries, entry)\n\t\t\tnumReg += 1\n\t\t\treturn ufmt.Sprintf(\"successfully registered %s for address %s\", username, entry.txorigin)\n\t\t}\n\t}\n\n\tpanic(\"could not find entry for caller address; did you register your raffle code yet?\")\n}\n\n// Admin stuff\n\nfunc PickWinner1() string {\n\to.AssertCallerIsOwner()\n\twinner1 = pickWinner()\n\n\treturn winner1.ghUsername\n}\n\nfunc PickWinner2() string {\n\to.AssertCallerIsOwner()\n\twinner2 = pickWinner()\n\n\treturn winner2.ghUsername\n}\n\nfunc UploadCodeHashes(delimCodes string) {\n\to.AssertCallerIsOwner()\n\n\ttokens := strings.Split(delimCodes, \",\")\n\n\tif len(tokens) != amtOfCodes {\n\t\tpanic(ufmt.Sprintf(\"invalid amount of codes; wanted %d got %d\", amtOfCodes, len(tokens)))\n\t}\n\n\tcopy(codeHashes, tokens)\n}\n\nfunc UploadRandomness(x, y uint64) {\n\to.AssertCallerIsOwner()\n\n\trandSource = rand.New(rand.NewPCG(x, y))\n}\n\n// Rendering\n\nfunc Render(_ string) string {\n\toutput := \"# Raffle - GopherCon US 2024\\n\\n\"\n\n\toutput += renderStats()\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += renderWinners()\n\t}\n\n\toutput += RenderGuide()\n\n\treturn output\n}\n\nfunc renderStats() string {\n\toutput := \"\"\n\n\toutput += \"### Raffle Stats\\n\\n\"\n\n\toutput += `\u003cdiv class=\"columns-3\"\u003e`\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest codes\n\toutput += renderLatestCodesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest codes\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest usernames\n\toutput += renderLatestUsernamesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest usernames\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Chances\n\toutput += renderChances()\n\toutput += `\u003c/div\u003e` // close Chances\n\n\toutput += `\u003c/div\u003e` // close columns-3\n\n\toutput += \"\\n\\n\"\n\toutput += \"---\" // close section\n\n\toutput += \"\\n\"\n\n\treturn output\n}\n\nfunc renderChances() string {\n\toutput := \"\\n\\n#### Chances\\n\\n\"\n\n\toutput += ufmt.Sprintf(\"- Users in the raffle: %d\\n\\n\", numReg)\n\n\tif numReg \u003e 0 {\n\t\toutput += ufmt.Sprintf(\"- Chance of winning: 2:%d\\n\\n\", numReg)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestCodesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest codes\\n\\n\"\n\tpeNum := len(partialEntries)\n\n\tif peNum == 0 {\n\t\toutput += \"No codes registered yet.\"\n\t\treturn output\n\t}\n\n\tif peNum \u003c amt {\n\t\tamt = peNum\n\t}\n\n\tfor i := peNum - 1; i \u003e= peNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", partialEntries[i].raffleCode)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestUsernamesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest usernames\\n\\n\"\n\tceNum := len(completeEntries)\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += \"Winners are chosen!\"\n\t\treturn output\n\t}\n\n\tif ceNum == 0 {\n\t\toutput += \"No usernames registered yet.\"\n\t\treturn output\n\t}\n\n\tif ceNum \u003c amt {\n\t\tamt = ceNum\n\t}\n\n\tfor i := ceNum - 1; i \u003e= ceNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", completeEntries[i].ghUsername)\n\t}\n\n\treturn output\n}\n\nfunc renderWinners() string {\n\toutput := \"\\n\\n# Winners\\n\\n\"\n\n\tif winner1 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 1: `@%s`\\n\\n\", winner1.ghUsername)\n\t}\n\n\tif winner2 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 2: `@%s`\\n\\n\", winner2.ghUsername)\n\t}\n\n\toutput += \"## Congratulations! Come to the booth and show us your GitHub account!\\n\\n\"\n\n\toutput += \"---\\n\\n\"\n\n\treturn output\n}\n\n// Helpers\n\nfunc (entry *EntryData) String() string {\n\treturn ufmt.Sprintf(\"Address: %s\\nRealm Path: %s\\nCode: %s\\nHash: %s\\nGitHub username: %s\\n\",\n\t\tentry.txorigin.String(),\n\t\tentry.caller.PkgPath(),\n\t\tentry.raffleCode,\n\t\tentry.codeHash,\n\t\tentry.ghUsername,\n\t)\n}\n\nfunc pickWinner() *EntryData {\n\tif len(completeEntries) == 0 {\n\t\tpanic(\"No complete entries yet!\")\n\t}\n\tif randSource == nil {\n\t\tpanic(\"No randomness source yet!\")\n\t}\n\n\tr := rand.New(randSource)\n\twinnerIndex := r.IntN(len(completeEntries))\n\twinner := completeEntries[winnerIndex]\n\n\t// remove winner from entry list\n\tcompleteEntries = append(completeEntries[:winnerIndex], completeEntries[winnerIndex+1:]...)\n\n\treturn winner\n}\n\nfunc CheckHashUpload() int {\n\treturn len(codeHashes)\n}\n\nfunc originExists(origin std.Address) bool {\n\tfor _, e := range partialEntries {\n\t\tif e.txorigin == origin {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"gC2evPRYDHoGnTdwaQ8q2NOd+HJwWQmkSa1wIQRa1LdsaQZ6AoKPRqCixARJ/9HjZeooHnwO3PDx/l9wA3C6Hg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477739"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1yfwv6gyujajnsewyt5j4q59fq5w42nzw2vltzz","package":{"Name":"raffle","Path":"gno.land/r/helithumper/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nimport (\n  \"gno.land/r/gc24/raffle\"\n)\n\nfunc Render(_ string) string {\n  code := \"uW9zngjSwE\"\n  return raffle.RegisterCode(code)\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A0beyajY4/ngUdmO3pFPWAGm8pEK3uyP6qh8ELu4pH8q"},"signature":"mFoTCS4s0IPuDSKGFV5+KBeCeWhY5OKs74EEMHcnJ55Qj7TrMP+OjmFkgF2MHyk7MBTr6XIPSRFlkM1DFcFzTQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477741"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1hxgta0d4zkl49n9zvyylgjhf78m00qzp629p5p","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"K2sU+VeWiGp6k9q6uC6cGOuafbuSMe9fyvRimvKXtUgCmSXoPMlAtCkeme0s3baoImC7ZEGZAYu0TpOYWDbEBw=="}],"memo":""},"blockNum":"477743"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yfwv6gyujajnsewyt5j4q59fq5w42nzw2vltzz","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"kcJk4RCUh93BWbD/r9cK1dGlnR2b0mKhW7IAuPhbHJgt6aWC7JHMas7GMmN1XEBPFy3bi7ooBcxYqSFctZmjRw=="}],"memo":""},"blockNum":"477745"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yfwv6gyujajnsewyt5j4q59fq5w42nzw2vltzz","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"5XGcbowJMXAzYckxkWqkVpakS9QPiSGJvQZ9lPgG3Wcocj+/oJ2hTiO4jGMn1hsSCPRhbpS9M8vpdckEIW2kdQ=="}],"memo":""},"blockNum":"477747"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yfwv6gyujajnsewyt5j4q59fq5w42nzw2vltzz","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"cjdaz6HZRoeeCHflHiD+cHjDmD017dMJagFSqan2VB9mXMHGodtK3YLY0rloDx1Sw27AjsT8VKEIVowiTrvmVQ=="}],"memo":""},"blockNum":"477749"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yfwv6gyujajnsewyt5j4q59fq5w42nzw2vltzz","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"ip9J3zqvHhhvxjxzJXcR1f/Bf0A+N7tJ/M0FsmKIqIA4JDgFbd7B4EVrEbK1u4lLJiKXE97SSpNPHYz1xhgCSw=="}],"memo":""},"blockNum":"477751"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1svd47qp3kjamyxk8078ck7kstyfglvxtal6en5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"2tnj+a6Hdt1xIhO2w+nHswZ5zekMvkwkmO3M4aDbHzkP+QlwEaaMQCMSNMjjsgc3VNA8iUpC5vZZl4eMKYR+fw=="}],"memo":""},"blockNum":"477753"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1t7k3aap9sm8796y6r8pl77tvv3396sfaxmrqn5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"YvdcN4HaRugaXVooBWiLgip5pkev83M33KaGwj2q4xIMzrZjMDQasmAjqhS2EaY1lyu6B/o7Q++6ms/oEjd2QA=="}],"memo":""},"blockNum":"477755"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/B8VyUGLuMw/raffle","Files":[{"Name":"package.gno","Body":"\n\npackage raffle\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"math/rand\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\n// EntryData is the main struct that contains all data on raffle entries\ntype EntryData struct {\n\ttxorigin   std.Address\n\tcaller     std.Realm\n\traffleCode string\n\tcodeHash   string\n\tghUsername string\n}\n\n// Top-level variables are automatically persisted to storage\nvar (\n\to                *ownable.Ownable    // admin of the raffle realm\n\tpartialEntries   []*EntryData        // keeps registered partialEntries\n\tcompleteEntries  []*EntryData        // keeps complete registrations: valid code + gh username\n\tcodeHashes       []string            // valid code hashes\n\tregisteredHashes map[string]struct{} // tracks if a code has been registered before\n\twinner1, winner2 *EntryData          // storing raffle winners\n\tnumReg           int\n\trandSource       *rand.Rand\n)\n\n// Nothing to see here, just some constants, move on :)\nconst (\n\tcodeLength = 10\n\tamtOfCodes = 300\n)\n\n// Hello! This is where you register your raffle code!\n// Calling RegisterCode is the first step for entering the raffle.\n// It allows you to register a specific raffle code and connect your address to it.\n// RegisterCode only be called via other code; you should figure out a way to do it.\nfunc RegisterCode(code string) string {\n\tif code == \"B8VyUGLuMw\" \u0026\u0026 len(code) != codeLength {\n\t\tpanic(\"invalid code: \" + code)\n\t}\n\n\tcaller := std.PrevRealm()     // save realm used to call\n\torigin := std.GetOrigCaller() // save deployer of realm\n\n\t// Deny non-code entries\n\tif caller.IsUser() {\n\t\tpanic(\"denied; can only be called from within code\")\n\t}\n\n\t// Get sha256 of code\n\thash := sha256.Sum256([]byte(code))\n\thashString := hex.EncodeToString(hash[:])\n\n\t// Check if code has already been registered\n\tif _, ok := registeredHashes[hashString]; ok {\n\t\tpanic(\"code already registered: \" + code)\n\t}\n\n\t// Check if the gopher has already registered another raffle code\n\tif originExists(origin) {\n\t\tpanic(\"you cannot register more than one code!\")\n\t}\n\n\t// Try to find the hash in the official hash list\n\tvar found bool\n\tfor _, ch := range codeHashes {\n\t\tif ch == hashString {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !found {\n\t\tpanic(\"specified code is not a valid raffle code: \" + code)\n\t}\n\n\tentry := \u0026EntryData{\n\t\ttxorigin:   origin,\n\t\tcaller:     caller,\n\t\traffleCode: code,\n\t\tcodeHash:   hashString,\n\t\tghUsername: \"JustInDevelopment\",\n\t}\n\n\t// Save to hash tracker\n\tregisteredHashes[hashString] = struct{}{}\n\n\t// Save raffle entry\n\tpartialEntries = append(partialEntries, entry)\n\n\treturn ufmt.Sprintf(\"Successfully registered raffle code!\\n%s\\nRegister your username to complete your raffle entry.\", entry.String())\n}\n\n// Somewhat similar to Go, init() executes upon deployment of your code.\n// Hint: maybe you can use init() in your code to execute RegisterCode() upon deployment via play.gno.land?\nfunc init() {\n\t// Set admin address\n\to = ownable.NewWithAddress(\"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz\")\n\n\tpartialEntries = make([]*EntryData, 0)\n\tcompleteEntries = make([]*EntryData, 0)\n\tregisteredHashes = make(map[string]struct{})\n\tcodeHashes = make([]string, 300)\n}\n\n// RegisterUsername registers a GitHub username to an already existing entry\n// Hint: you can call this function just like you did with RegisterCode(), or via gno.studio/connect :)\n// If you use Connect, make sure you're on the Portal Loop network, and you've navigated to the correct path!\nfunc RegisterUsername(username string) string {\n\tif username == \"\" {\n\t\tpanic(\"invalid username: \" + username)\n\t}\n\n\torigin := std.GetOrigCaller()\n\n\tfor _, entry := range partialEntries {\n\t\tif entry.txorigin == origin { // this will check if you're using the same address as when registering the raffle code ;)\n\t\t\tif entry.ghUsername != \"\" {\n\t\t\t\tpanic(\"you cannot register your username twice!\")\n\t\t\t}\n\n\t\t\tentry.ghUsername = username\n\t\t\tcompleteEntries = append(completeEntries, entry)\n\t\t\tnumReg += 1\n\t\t\treturn ufmt.Sprintf(\"successfully registered %s for address %s\", username, entry.txorigin)\n\t\t}\n\t}\n\n\tpanic(\"could not find entry for caller address; did you register your raffle code yet?\")\n}\n\n// Admin stuff\n\nfunc PickWinner1() string {\n\to.AssertCallerIsOwner()\n\twinner1 = pickWinner()\n\n\treturn winner1.ghUsername\n}\n\nfunc PickWinner2() string {\n\to.AssertCallerIsOwner()\n\twinner2 = pickWinner()\n\n\treturn winner2.ghUsername\n}\n\nfunc UploadCodeHashes(delimCodes string) {\n\to.AssertCallerIsOwner()\n\n\ttokens := strings.Split(delimCodes, \",\")\n\n\tif len(tokens) != amtOfCodes {\n\t\tpanic(ufmt.Sprintf(\"invalid amount of codes; wanted %d got %d\", amtOfCodes, len(tokens)))\n\t}\n\n\tcopy(codeHashes, tokens)\n}\n\nfunc UploadRandomness(x, y uint64) {\n\to.AssertCallerIsOwner()\n\n\trandSource = rand.New(rand.NewPCG(x, y))\n}\n\n// Rendering\n\nfunc Render(_ string) string {\n\toutput := \"# Raffle - GopherCon US 2024\\n\\n\"\n\n\toutput += renderStats()\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += renderWinners()\n\t}\n\n\toutput += RenderGuide()\n\n\treturn output\n}\n\nfunc renderStats() string {\n\toutput := \"\"\n\n\toutput += \"### Raffle Stats\\n\\n\"\n\n\toutput += `\u003cdiv class=\"columns-3\"\u003e`\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest codes\n\toutput += renderLatestCodesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest codes\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest usernames\n\toutput += renderLatestUsernamesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest usernames\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Chances\n\toutput += renderChances()\n\toutput += `\u003c/div\u003e` // close Chances\n\n\toutput += `\u003c/div\u003e` // close columns-3\n\n\toutput += \"\\n\\n\"\n\toutput += \"---\" // close section\n\n\toutput += \"\\n\"\n\n\treturn output\n}\n\nfunc renderChances() string {\n\toutput := \"\\n\\n#### Chances\\n\\n\"\n\n\toutput += ufmt.Sprintf(\"- Users in the raffle: %d\\n\\n\", numReg)\n\n\tif numReg \u003e 0 {\n\t\toutput += ufmt.Sprintf(\"- Chance of winning: 2:%d\\n\\n\", numReg)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestCodesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest codes\\n\\n\"\n\tpeNum := len(partialEntries)\n\n\tif peNum == 0 {\n\t\toutput += \"No codes registered yet.\"\n\t\treturn output\n\t}\n\n\tif peNum \u003c amt {\n\t\tamt = peNum\n\t}\n\n\tfor i := peNum - 1; i \u003e= peNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", partialEntries[i].raffleCode)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestUsernamesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest usernames\\n\\n\"\n\tceNum := len(completeEntries)\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += \"Winners are chosen!\"\n\t\treturn output\n\t}\n\n\tif ceNum == 0 {\n\t\toutput += \"No usernames registered yet.\"\n\t\treturn output\n\t}\n\n\tif ceNum \u003c amt {\n\t\tamt = ceNum\n\t}\n\n\tfor i := ceNum - 1; i \u003e= ceNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", completeEntries[i].ghUsername)\n\t}\n\n\treturn output\n}\n\nfunc renderWinners() string {\n\toutput := \"\\n\\n# Winners\\n\\n\"\n\n\tif winner1 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 1: `@%s`\\n\\n\", winner1.ghUsername)\n\t}\n\n\tif winner2 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 2: `@%s`\\n\\n\", winner2.ghUsername)\n\t}\n\n\toutput += \"## Congratulations! Come to the booth and show us your GitHub account!\\n\\n\"\n\n\toutput += \"---\\n\\n\"\n\n\treturn output\n}\n\n// Helpers\n\nfunc (entry *EntryData) String() string {\n\treturn ufmt.Sprintf(\"Address: %s\\nRealm Path: %s\\nCode: %s\\nHash: %s\\nGitHub username: %s\\n\",\n\t\tentry.txorigin.String(),\n\t\tentry.caller.PkgPath(),\n\t\tentry.raffleCode,\n\t\tentry.codeHash,\n\t\tentry.ghUsername,\n\t)\n}\n\nfunc pickWinner() *EntryData {\n\tif len(completeEntries) == 0 {\n\t\tpanic(\"No complete entries yet!\")\n\t}\n\tif randSource == nil {\n\t\tpanic(\"No randomness source yet!\")\n\t}\n\n\tr := rand.New(randSource)\n\twinnerIndex := r.IntN(len(completeEntries))\n\twinner := completeEntries[winnerIndex]\n\n\t// remove winner from entry list\n\tcompleteEntries = append(completeEntries[:winnerIndex], completeEntries[winnerIndex+1:]...)\n\n\treturn winner\n}\n\nfunc CheckHashUpload() int {\n\treturn len(codeHashes)\n}\n\nfunc originExists(origin std.Address) bool {\n\tfor _, e := range partialEntries {\n\t\tif e.txorigin == origin {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"flMTF0G9K7RfBIs58iyUOXswojf4NaxwNMbK+3r9YI8ThjHa24ZqjBCoAGIh3x7UOsLa6tf9+jp/uNMAlcNqYQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477757"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yfwv6gyujajnsewyt5j4q59fq5w42nzw2vltzz","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"NNasCGN6o01jtjErI0+8vfIsm9c4G6RVNd67+UJl1sZttSZl/pkfLJKocXBnOPG0eC8lxpAs+d37JPaz+6Mwmw=="}],"memo":""},"blockNum":"477759"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yfwv6gyujajnsewyt5j4q59fq5w42nzw2vltzz","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"N4V5OQ3WQyGsU0nDG42kvr7YdiqGgk5I8BKZQSVcjJJZtp6TVmk4x31/mt7ybF/uag7YA4//TUbS+y1fLrW16A=="}],"memo":""},"blockNum":"477761"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1svd47qp3kjamyxk8078ck7kstyfglvxtal6en5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"/1HUCV+G5Xqfh/icm0kqSsBPxBGjdurbuyoADeZVEyhfg58Tg4pQjcXAxDBcO2gzCClsgLN259xN/yN17czrCA=="}],"memo":""},"blockNum":"477763"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1t7k3aap9sm8796y6r8pl77tvv3396sfaxmrqn5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"NWke4oUOgvfitTxaMRgVsuj68yvu2EHMrXouk5ue32sQ/z7trRvvGzj9FnD9hkzoN9Vx9UzwF/dbg32EWTaXzw=="}],"memo":""},"blockNum":"477765"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1svd47qp3kjamyxk8078ck7kstyfglvxtal6en5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"bDoMn2p2IjlTL2rn35cFtkTWmMlPtJC6LJJMXg82OWoUhAnr/uGJXT2kepqAuTxt+eIbyc8CFMKTEZcc1F4D6A=="}],"memo":""},"blockNum":"477767"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1t7k3aap9sm8796y6r8pl77tvv3396sfaxmrqn5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"S6Ok2UXnB6OZn7O6I1vVgEL/r8vFhmSRhhb9yeCYlOp8JApswLsE6cxjdqOqw3X6DTxDZQ+yc2fD+UTP/STv+A=="}],"memo":""},"blockNum":"477769"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lggjskpg0c6sg7fsvnpycmjdkqcv8ymzdamgdh","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"K70v5/zKGL53ncMsU5wo+wtaKzVrZhZHu1u4kCMAEKAHL4V8zlTkX8gXfth4dBX8kEA7yVnxgL9xjwacNLEqOA=="}],"memo":""},"blockNum":"477771"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yfwv6gyujajnsewyt5j4q59fq5w42nzw2vltzz","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"quKsTIJF16dhDeOZueunytp8bkXO+GA3Gqxoy7zYc9cX70+qf/4Huo0yaeCPt+h+ZQsMYvtHR4Llo7PPoNRyfQ=="}],"memo":""},"blockNum":"477773"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1svd47qp3kjamyxk8078ck7kstyfglvxtal6en5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"HhBSE2a7BINjABuL+R+i16em8q+JCnYBXXtVv0XkpoI3h1qYCxIpsXsl9e381vRyelbMARa7NqwVtxFE8DQGRw=="}],"memo":""},"blockNum":"477775"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hxgta0d4zkl49n9zvyylgjhf78m00qzp629p5p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"F+O7Zr0pL9KDIvSrQEzyep/i2ygmY22ESne6xvJAcoY80PrUontAlZTtv/AdeVVS2MRLBEpdmb/r+X/jUWdXaw=="}],"memo":""},"blockNum":"477777"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1t7k3aap9sm8796y6r8pl77tvv3396sfaxmrqn5","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"fqbw697b0fKDrLoIFmEEtz29FbiJXc3kFi+IbRCrBPgRmtfbrwscy27c4S/aNlfz9Rbq7TdnZjfJuymJxviiZA=="}],"memo":""},"blockNum":"477779"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lggjskpg0c6sg7fsvnpycmjdkqcv8ymzdamgdh","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"fM8qYcqTAiSqS/y8tTxX/dM9mn296qxINWvpmC6F509vxzJpXbvLFpseeeJQaQjKM2MbemYHkunYGT9PFiNw3A=="}],"memo":""},"blockNum":"477781"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lggjskpg0c6sg7fsvnpycmjdkqcv8ymzdamgdh","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"xaGrLNXQIfzZHpbViwfE+G8vtro0MeysT1+fk1cAEjEYwqe09eRUET4kw3H686fJ1hW1TGbmMX4v9TS9MVjs/w=="}],"memo":""},"blockNum":"477783"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yfwv6gyujajnsewyt5j4q59fq5w42nzw2vltzz","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"oetNTRcfqEeWXeOC8Kfkg/dKwOIknxgIt/2ipm6ozz1KD+xBvZZffUuNfV2UAv3dv4gnvADd/YtGzQoF/f1Ovg=="}],"memo":""},"blockNum":"477785"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lggjskpg0c6sg7fsvnpycmjdkqcv8ymzdamgdh","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"Akzz6QlJaHrjHbM65m9SD0Nj6LFFJdiRtQkRBefQiYIyLbsfobbe+vr9bfqftq/Vj5yO3rRJ2Sz3n8aedDmYJA=="}],"memo":""},"blockNum":"477786"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lggjskpg0c6sg7fsvnpycmjdkqcv8ymzdamgdh","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"UYAb9PJUTXklqLe4p+hevCOKaxGi11nqQCAeyai+xEFYcjhKrnc0V59k/OkZcMv6TvK6xXgk1w1npNOxgNa/7A=="}],"memo":""},"blockNum":"477788"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hxgta0d4zkl49n9zvyylgjhf78m00qzp629p5p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"xFci0IXT5sjLJ/X42ipXc15fgq6WKKs8TRomlchC6sY6tgOK6GJdKrhvVE7Ke32rxrAOQAbKu7SDGvQLOA356w=="}],"memo":""},"blockNum":"477790"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lggjskpg0c6sg7fsvnpycmjdkqcv8ymzdamgdh","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"XEDcWl0eD94UPFeYuKojMbvKAnRfxoZiJhLUHAvNCmw4W3BBWH4CbJHmK+SX839PzYQFniKSM3NymZr4sXYYAA=="}],"memo":""},"blockNum":"477792"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yfwv6gyujajnsewyt5j4q59fq5w42nzw2vltzz","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"l9igmmIQrItMc55O/7EkgTS1dEOpEPfnSQzchtVyqhBsnNcLrTgOAi4RozsuhStXJZAcFXhlgZvSCCzahLgRlw=="}],"memo":""},"blockNum":"477794"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/B8VyUGLuMw/raffle","Files":[{"Name":"package.gno","Body":"\n\npackage raffle\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"math/rand\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\n// EntryData is the main struct that contains all data on raffle entries\ntype EntryData struct {\n\ttxorigin   std.Address\n\tcaller     std.Realm\n\traffleCode string\n\tcodeHash   string\n\tghUsername string\n}\n\n// Top-level variables are automatically persisted to storage\nvar (\n\to                *ownable.Ownable    // admin of the raffle realm\n\tpartialEntries   []*EntryData        // keeps registered partialEntries\n\tcompleteEntries  []*EntryData        // keeps complete registrations: valid code + gh username\n\tcodeHashes       []string            // valid code hashes\n\tregisteredHashes map[string]struct{} // tracks if a code has been registered before\n\twinner1, winner2 *EntryData          // storing raffle winners\n\tnumReg           int\n\trandSource       *rand.Rand\n)\n\n// Nothing to see here, just some constants, move on :)\nconst (\n\tcodeLength = 10\n\tamtOfCodes = 300\n)\n\n// Hello! This is where you register your raffle code!\n// Calling RegisterCode is the first step for entering the raffle.\n// It allows you to register a specific raffle code and connect your address to it.\n// RegisterCode only be called via other code; you should figure out a way to do it.\ncode := \"B8VyUGLuMw\"\nfunc RegisterCode(code string) string {\n\tif code == \"\" \u0026\u0026 len(code) != codeLength {\n\t\tpanic(\"invalid code: \" + code)\n\t}\n\n\tcaller := std.PrevRealm()     // save realm used to call\n\torigin := std.GetOrigCaller() // save deployer of realm\n\n\t// Deny non-code entries\n\tif caller.IsUser() {\n\t\tpanic(\"denied; can only be called from within code\")\n\t}\n\n\t// Get sha256 of code\n\thash := sha256.Sum256([]byte(code))\n\thashString := hex.EncodeToString(hash[:])\n\n\t// Check if code has already been registered\n\tif _, ok := registeredHashes[hashString]; ok {\n\t\tpanic(\"code already registered: \" + code)\n\t}\n\n\t// Check if the gopher has already registered another raffle code\n\tif originExists(origin) {\n\t\tpanic(\"you cannot register more than one code!\")\n\t}\n\n\t// Try to find the hash in the official hash list\n\tvar found bool\n\tfor _, ch := range codeHashes {\n\t\tif ch == hashString {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !found {\n\t\tpanic(\"specified code is not a valid raffle code: \" + code)\n\t}\n\n\tentry := \u0026EntryData{\n\t\ttxorigin:   origin,\n\t\tcaller:     caller,\n\t\traffleCode: code,\n\t\tcodeHash:   hashString,\n\t\tghUsername: \"JustInDevelopment\",\n\t}\n\n\t// Save to hash tracker\n\tregisteredHashes[hashString] = struct{}{}\n\n\t// Save raffle entry\n\tpartialEntries = append(partialEntries, entry)\n\n\treturn ufmt.Sprintf(\"Successfully registered raffle code!\\n%s\\nRegister your username to complete your raffle entry.\", entry.String())\n}\n\n// Somewhat similar to Go, init() executes upon deployment of your code.\n// Hint: maybe you can use init() in your code to execute RegisterCode() upon deployment via play.gno.land?\nfunc init() {\n\t// Set admin address\n\to = ownable.NewWithAddress(\"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz\")\n\n\tpartialEntries = make([]*EntryData, 0)\n\tcompleteEntries = make([]*EntryData, 0)\n\tregisteredHashes = make(map[string]struct{})\n\tcodeHashes = make([]string, 300)\n}\n\n// RegisterUsername registers a GitHub username to an already existing entry\n// Hint: you can call this function just like you did with RegisterCode(), or via gno.studio/connect :)\n// If you use Connect, make sure you're on the Portal Loop network, and you've navigated to the correct path!\nfunc RegisterUsername(username string) string {\n\tif username == \"\" {\n\t\tpanic(\"invalid username: \" + username)\n\t}\n\n\torigin := std.GetOrigCaller()\n\n\tfor _, entry := range partialEntries {\n\t\tif entry.txorigin == origin { // this will check if you're using the same address as when registering the raffle code ;)\n\t\t\tif entry.ghUsername != \"\" {\n\t\t\t\tpanic(\"you cannot register your username twice!\")\n\t\t\t}\n\n\t\t\tentry.ghUsername = username\n\t\t\tcompleteEntries = append(completeEntries, entry)\n\t\t\tnumReg += 1\n\t\t\treturn ufmt.Sprintf(\"successfully registered %s for address %s\", username, entry.txorigin)\n\t\t}\n\t}\n\n\tpanic(\"could not find entry for caller address; did you register your raffle code yet?\")\n}\n\n// Admin stuff\n\nfunc PickWinner1() string {\n\to.AssertCallerIsOwner()\n\twinner1 = pickWinner()\n\n\treturn winner1.ghUsername\n}\n\nfunc PickWinner2() string {\n\to.AssertCallerIsOwner()\n\twinner2 = pickWinner()\n\n\treturn winner2.ghUsername\n}\n\nfunc UploadCodeHashes(delimCodes string) {\n\to.AssertCallerIsOwner()\n\n\ttokens := strings.Split(delimCodes, \",\")\n\n\tif len(tokens) != amtOfCodes {\n\t\tpanic(ufmt.Sprintf(\"invalid amount of codes; wanted %d got %d\", amtOfCodes, len(tokens)))\n\t}\n\n\tcopy(codeHashes, tokens)\n}\n\nfunc UploadRandomness(x, y uint64) {\n\to.AssertCallerIsOwner()\n\n\trandSource = rand.New(rand.NewPCG(x, y))\n}\n\n// Rendering\n\nfunc Render(_ string) string {\n\toutput := \"# Raffle - GopherCon US 2024\\n\\n\"\n\n\toutput += renderStats()\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += renderWinners()\n\t}\n\n\toutput += RenderGuide()\n\n\treturn output\n}\n\nfunc renderStats() string {\n\toutput := \"\"\n\n\toutput += \"### Raffle Stats\\n\\n\"\n\n\toutput += `\u003cdiv class=\"columns-3\"\u003e`\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest codes\n\toutput += renderLatestCodesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest codes\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest usernames\n\toutput += renderLatestUsernamesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest usernames\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Chances\n\toutput += renderChances()\n\toutput += `\u003c/div\u003e` // close Chances\n\n\toutput += `\u003c/div\u003e` // close columns-3\n\n\toutput += \"\\n\\n\"\n\toutput += \"---\" // close section\n\n\toutput += \"\\n\"\n\n\treturn output\n}\n\nfunc renderChances() string {\n\toutput := \"\\n\\n#### Chances\\n\\n\"\n\n\toutput += ufmt.Sprintf(\"- Users in the raffle: %d\\n\\n\", numReg)\n\n\tif numReg \u003e 0 {\n\t\toutput += ufmt.Sprintf(\"- Chance of winning: 2:%d\\n\\n\", numReg)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestCodesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest codes\\n\\n\"\n\tpeNum := len(partialEntries)\n\n\tif peNum == 0 {\n\t\toutput += \"No codes registered yet.\"\n\t\treturn output\n\t}\n\n\tif peNum \u003c amt {\n\t\tamt = peNum\n\t}\n\n\tfor i := peNum - 1; i \u003e= peNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", partialEntries[i].raffleCode)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestUsernamesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest usernames\\n\\n\"\n\tceNum := len(completeEntries)\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += \"Winners are chosen!\"\n\t\treturn output\n\t}\n\n\tif ceNum == 0 {\n\t\toutput += \"No usernames registered yet.\"\n\t\treturn output\n\t}\n\n\tif ceNum \u003c amt {\n\t\tamt = ceNum\n\t}\n\n\tfor i := ceNum - 1; i \u003e= ceNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", completeEntries[i].ghUsername)\n\t}\n\n\treturn output\n}\n\nfunc renderWinners() string {\n\toutput := \"\\n\\n# Winners\\n\\n\"\n\n\tif winner1 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 1: `@%s`\\n\\n\", winner1.ghUsername)\n\t}\n\n\tif winner2 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 2: `@%s`\\n\\n\", winner2.ghUsername)\n\t}\n\n\toutput += \"## Congratulations! Come to the booth and show us your GitHub account!\\n\\n\"\n\n\toutput += \"---\\n\\n\"\n\n\treturn output\n}\n\n// Helpers\n\nfunc (entry *EntryData) String() string {\n\treturn ufmt.Sprintf(\"Address: %s\\nRealm Path: %s\\nCode: %s\\nHash: %s\\nGitHub username: %s\\n\",\n\t\tentry.txorigin.String(),\n\t\tentry.caller.PkgPath(),\n\t\tentry.raffleCode,\n\t\tentry.codeHash,\n\t\tentry.ghUsername,\n\t)\n}\n\nfunc pickWinner() *EntryData {\n\tif len(completeEntries) == 0 {\n\t\tpanic(\"No complete entries yet!\")\n\t}\n\tif randSource == nil {\n\t\tpanic(\"No randomness source yet!\")\n\t}\n\n\tr := rand.New(randSource)\n\twinnerIndex := r.IntN(len(completeEntries))\n\twinner := completeEntries[winnerIndex]\n\n\t// remove winner from entry list\n\tcompleteEntries = append(completeEntries[:winnerIndex], completeEntries[winnerIndex+1:]...)\n\n\treturn winner\n}\n\nfunc CheckHashUpload() int {\n\treturn len(codeHashes)\n}\n\nfunc originExists(origin std.Address) bool {\n\tfor _, e := range partialEntries {\n\t\tif e.txorigin == origin {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"WMEsSn/Hcnwr3/IgvVldGt+9CfRW/t/PvrTec2mhwdgHbfNRLkdvBP5a9kEAoBAGinWAdUscZOqGp+A4zZBpOQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477796"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yfwv6gyujajnsewyt5j4q59fq5w42nzw2vltzz","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"ZWbr/qYsFFBSWrgeX59LwWnBIhrC/7DJh91sPWoZOzRpdfaa610EmDp4O2memLkOVh2TYcNXPpdz0Rm9kjdw7A=="}],"memo":""},"blockNum":"477798"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yfwv6gyujajnsewyt5j4q59fq5w42nzw2vltzz","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"DMiKq0YFh3r03okqBADH/Q3dzHRF7duqQMhZdU5xAwRpuKBVi2DvmN0EJRNyNeUKem0u2ahLx702bO8h7PNBow=="}],"memo":""},"blockNum":"477800"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yfwv6gyujajnsewyt5j4q59fq5w42nzw2vltzz","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"iR5Q7uJUp5Rw6iYTgEZ74FIpcAUKpAd/o59a9Y9z7atDhvUsyjwpiicwvzwAYvAKjhV9DnDcnQehAVSRZOk+xA=="}],"memo":""},"blockNum":"477802"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lggjskpg0c6sg7fsvnpycmjdkqcv8ymzdamgdh","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"L9+vAzraryjbmXgrSVZ8LAc9uxDZ6FiwKzmlu860Q08nXND8Z+wG3LxKkSKOvGAyoVf17Jfy6JTwPyznuFWzDQ=="}],"memo":""},"blockNum":"477810"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lggjskpg0c6sg7fsvnpycmjdkqcv8ymzdamgdh","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"eT0C7EuDL5vFcVLUhltJPw++kxDCyEbdRS3xa0O7CgsU0U+iZU1WxMq9DjEm1XDTP3t6ey8HlMV3FtCoGao9QQ=="}],"memo":""},"blockNum":"477814"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lggjskpg0c6sg7fsvnpycmjdkqcv8ymzdamgdh","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"rKpG+onXwppNK4QpMsADGFfbJ24D+fNA1xbEDpEpJlEgVcO5Od0YfLKvfxWNUi4RcEFKkaGvWgzqj4w/mA11HQ=="}],"memo":""},"blockNum":"477816"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1egxdnzrmhva4wcx2celjwk0a25gf6xjrrqkzwg","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"Kuln7mlR8CfFNIhT/nTuUC1t1IlvnpE3HFDzUAtE/JUvcFCa+SW8UkiBoRk2XNT4QsiN4pSgn4Phww1ixYy/cQ=="}],"memo":""},"blockNum":"477820"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/B8VyUGLuMw/raffle","Files":[{"Name":"package.gno","Body":"\n\npackage raffle\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"math/rand\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\n// EntryData is the main struct that contains all data on raffle entries\ntype EntryData struct {\n\ttxorigin   std.Address\n\tcaller     std.Realm\n\traffleCode string\n\tcodeHash   string\n\tghUsername string\n}\n\n// Top-level variables are automatically persisted to storage\nvar (\n\to                *ownable.Ownable    // admin of the raffle realm\n\tpartialEntries   []*EntryData        // keeps registered partialEntries\n\tcompleteEntries  []*EntryData        // keeps complete registrations: valid code + gh username\n\tcodeHashes       []string            // valid code hashes\n\tregisteredHashes map[string]struct{} // tracks if a code has been registered before\n\twinner1, winner2 *EntryData          // storing raffle winners\n\tnumReg           int\n\trandSource       *rand.Rand\n)\n\n// Nothing to see here, just some constants, move on :)\nconst (\n\tcodeLength = 10\n\tamtOfCodes = 300\n)\n\n// Hello! This is where you register your raffle code!\n// Calling RegisterCode is the first step for entering the raffle.\n// It allows you to register a specific raffle code and connect your address to it.\n// RegisterCode only be called via other code; you should figure out a way to do it.\nfunc RegisterCode(code string) string {\n  code := \"B8VyUGLuMw\"\n\tif code == \"\" \u0026\u0026 len(code) != codeLength {\n\t\tpanic(\"invalid code: \" + code)\n\t}\n\n\tcaller := std.PrevRealm()     // save realm used to call\n\torigin := std.GetOrigCaller() // save deployer of realm\n\n\t// Deny non-code entries\n\tif caller.IsUser() {\n\t\tpanic(\"denied; can only be called from within code\")\n\t}\n\n\t// Get sha256 of code\n\thash := sha256.Sum256([]byte(code))\n\thashString := hex.EncodeToString(hash[:])\n\n\t// Check if code has already been registered\n\tif _, ok := registeredHashes[hashString]; ok {\n\t\tpanic(\"code already registered: \" + code)\n\t}\n\n\t// Check if the gopher has already registered another raffle code\n\tif originExists(origin) {\n\t\tpanic(\"you cannot register more than one code!\")\n\t}\n\n\t// Try to find the hash in the official hash list\n\tvar found bool\n\tfor _, ch := range codeHashes {\n\t\tif ch == hashString {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !found {\n\t\tpanic(\"specified code is not a valid raffle code: \" + code)\n\t}\n\n\tentry := \u0026EntryData{\n\t\ttxorigin:   origin,\n\t\tcaller:     caller,\n\t\traffleCode: code,\n\t\tcodeHash:   hashString,\n\t\tghUsername: \"JustInDevelopment\",\n\t}\n\n\t// Save to hash tracker\n\tregisteredHashes[hashString] = struct{}{}\n\n\t// Save raffle entry\n\tpartialEntries = append(partialEntries, entry)\n\n\treturn ufmt.Sprintf(\"Successfully registered raffle code!\\n%s\\nRegister your username to complete your raffle entry.\", entry.String())\n}\n\n// Somewhat similar to Go, init() executes upon deployment of your code.\n// Hint: maybe you can use init() in your code to execute RegisterCode() upon deployment via play.gno.land?\nfunc init() {\n\t// Set admin address\n\to = ownable.NewWithAddress(\"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\")\n\n\tpartialEntries = make([]*EntryData, 0)\n\tcompleteEntries = make([]*EntryData, 0)\n\tregisteredHashes = make(map[string]struct{})\n\tcodeHashes = make([]string, 300)\n}\n\n// RegisterUsername registers a GitHub username to an already existing entry\n// Hint: you can call this function just like you did with RegisterCode(), or via gno.studio/connect :)\n// If you use Connect, make sure you're on the Portal Loop network, and you've navigated to the correct path!\nfunc RegisterUsername(username string) string {\n\tif username == \"\" {\n\t\tpanic(\"invalid username: \" + username)\n\t}\n\n\torigin := std.GetOrigCaller()\n\n\tfor _, entry := range partialEntries {\n\t\tif entry.txorigin == origin { // this will check if you're using the same address as when registering the raffle code ;)\n\t\t\tif entry.ghUsername != \"\" {\n\t\t\t\tpanic(\"you cannot register your username twice!\")\n\t\t\t}\n\n\t\t\tentry.ghUsername = username\n\t\t\tcompleteEntries = append(completeEntries, entry)\n\t\t\tnumReg += 1\n\t\t\treturn ufmt.Sprintf(\"successfully registered %s for address %s\", username, entry.txorigin)\n\t\t}\n\t}\n\n\tpanic(\"could not find entry for caller address; did you register your raffle code yet?\")\n}\n\n// Admin stuff\n\nfunc PickWinner1() string {\n\to.AssertCallerIsOwner()\n\twinner1 = pickWinner()\n\n\treturn winner1.ghUsername\n}\n\nfunc PickWinner2() string {\n\to.AssertCallerIsOwner()\n\twinner2 = pickWinner()\n\n\treturn winner2.ghUsername\n}\n\nfunc UploadCodeHashes(delimCodes string) {\n\to.AssertCallerIsOwner()\n\n\ttokens := strings.Split(delimCodes, \",\")\n\n\tif len(tokens) != amtOfCodes {\n\t\tpanic(ufmt.Sprintf(\"invalid amount of codes; wanted %d got %d\", amtOfCodes, len(tokens)))\n\t}\n\n\tcopy(codeHashes, tokens)\n}\n\nfunc UploadRandomness(x, y uint64) {\n\to.AssertCallerIsOwner()\n\n\trandSource = rand.New(rand.NewPCG(x, y))\n}\n\n// Rendering\n\nfunc Render(_ string) string {\n\toutput := \"# Raffle - GopherCon US 2024\\n\\n\"\n\n\toutput += renderStats()\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += renderWinners()\n\t}\n\n\toutput += RenderGuide()\n\n\treturn output\n}\n\nfunc renderStats() string {\n\toutput := \"\"\n\n\toutput += \"### Raffle Stats\\n\\n\"\n\n\toutput += `\u003cdiv class=\"columns-3\"\u003e`\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest codes\n\toutput += renderLatestCodesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest codes\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest usernames\n\toutput += renderLatestUsernamesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest usernames\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Chances\n\toutput += renderChances()\n\toutput += `\u003c/div\u003e` // close Chances\n\n\toutput += `\u003c/div\u003e` // close columns-3\n\n\toutput += \"\\n\\n\"\n\toutput += \"---\" // close section\n\n\toutput += \"\\n\"\n\n\treturn output\n}\n\nfunc renderChances() string {\n\toutput := \"\\n\\n#### Chances\\n\\n\"\n\n\toutput += ufmt.Sprintf(\"- Users in the raffle: %d\\n\\n\", numReg)\n\n\tif numReg \u003e 0 {\n\t\toutput += ufmt.Sprintf(\"- Chance of winning: 2:%d\\n\\n\", numReg)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestCodesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest codes\\n\\n\"\n\tpeNum := len(partialEntries)\n\n\tif peNum == 0 {\n\t\toutput += \"No codes registered yet.\"\n\t\treturn output\n\t}\n\n\tif peNum \u003c amt {\n\t\tamt = peNum\n\t}\n\n\tfor i := peNum - 1; i \u003e= peNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", partialEntries[i].raffleCode)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestUsernamesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest usernames\\n\\n\"\n\tceNum := len(completeEntries)\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += \"Winners are chosen!\"\n\t\treturn output\n\t}\n\n\tif ceNum == 0 {\n\t\toutput += \"No usernames registered yet.\"\n\t\treturn output\n\t}\n\n\tif ceNum \u003c amt {\n\t\tamt = ceNum\n\t}\n\n\tfor i := ceNum - 1; i \u003e= ceNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", completeEntries[i].ghUsername)\n\t}\n\n\treturn output\n}\n\nfunc renderWinners() string {\n\toutput := \"\\n\\n# Winners\\n\\n\"\n\n\tif winner1 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 1: `@%s`\\n\\n\", winner1.ghUsername)\n\t}\n\n\tif winner2 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 2: `@%s`\\n\\n\", winner2.ghUsername)\n\t}\n\n\toutput += \"## Congratulations! Come to the booth and show us your GitHub account!\\n\\n\"\n\n\toutput += \"---\\n\\n\"\n\n\treturn output\n}\n\n// Helpers\n\nfunc (entry *EntryData) String() string {\n\treturn ufmt.Sprintf(\"Address: %s\\nRealm Path: %s\\nCode: %s\\nHash: %s\\nGitHub username: %s\\n\",\n\t\tentry.txorigin.String(),\n\t\tentry.caller.PkgPath(),\n\t\tentry.raffleCode,\n\t\tentry.codeHash,\n\t\tentry.ghUsername,\n\t)\n}\n\nfunc pickWinner() *EntryData {\n\tif len(completeEntries) == 0 {\n\t\tpanic(\"No complete entries yet!\")\n\t}\n\tif randSource == nil {\n\t\tpanic(\"No randomness source yet!\")\n\t}\n\n\tr := rand.New(randSource)\n\twinnerIndex := r.IntN(len(completeEntries))\n\twinner := completeEntries[winnerIndex]\n\n\t// remove winner from entry list\n\tcompleteEntries = append(completeEntries[:winnerIndex], completeEntries[winnerIndex+1:]...)\n\n\treturn winner\n}\n\nfunc CheckHashUpload() int {\n\treturn len(codeHashes)\n}\n\nfunc originExists(origin std.Address) bool {\n\tfor _, e := range partialEntries {\n\t\tif e.txorigin == origin {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"Pm2XtZ9K0uln0wZeK6VBVkadF7fT7n1PW04TMOVYgkdsclL032GZka03UmL+x/NUctLQLOcwvONDTgAbMw+k/g=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477822"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1egxdnzrmhva4wcx2celjwk0a25gf6xjrrqkzwg","package":{"Name":"raffle","Path":"gno.land/r/gc24/nasikalt/raffle","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+RNhU4D68xtqiOK67FOX7esSw1dTDajrVdjWfpd1S8F"},"signature":"2VewoYw0cY2N8lZC4+KhRsLZ08dfPqIGdwQhj63emSY6RZMJvFX7NlGn+RRAl3hB5L4mVxvI0G98FhIIKNIGFw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477824"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1egxdnzrmhva4wcx2celjwk0a25gf6xjrrqkzwg","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"mW+ya2NVoAafZt1szbGDZZyhJt1AAEuyA1fQxnJ9vdkDKmndRW5l0aYSpq/hnmVjA/jUIccLUxWecSabX9DnlA=="}],"memo":""},"blockNum":"477826"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1egxdnzrmhva4wcx2celjwk0a25gf6xjrrqkzwg","package":{"Name":"raffle","Path":"gno.land/r/gc24/nasikalt/raffle","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n\treturn \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A+RNhU4D68xtqiOK67FOX7esSw1dTDajrVdjWfpd1S8F"},"signature":"hvw0aKG3zH0vNIPsqTVjYQV/7t71QzL4HQJcJ+R7Qt40ZY893jTUypH9T1vVZ+Gvlyp8qP46Zhz10WBiN/v1IA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477828"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hxgta0d4zkl49n9zvyylgjhf78m00qzp629p5p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"KK2ljETaAzq0QIuMRLAvhRuqOPMU9fidRD4tklfn8iNGPEaXjb51GdV7c/ciirf+dOHUoeULjIHAx+zXxJn+ig=="}],"memo":""},"blockNum":"477830"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hxgta0d4zkl49n9zvyylgjhf78m00qzp629p5p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"NpofNmL02vRh+6mV5Tn5RPqjbgqCqpjD14dsxmDiyPkTXB44+dJ5ZBlARF6lUe6VNfwGEIafuCnrUg+D4DMjXQ=="}],"memo":""},"blockNum":"477833"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1gr72qp3muavsvwq5jg205c0e30ltmltpj60pwp","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"+nF3wsbbboUf157b+i42xofzes3j4OIUXIiBpxtfLTEGIvWgePAqMOu3dTTLZLL5QEB7AV9WlBOxvEeITSlrkQ=="}],"memo":""},"blockNum":"477835"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g16693l5rta8ptsae7yz60zu0z8ksxps9lxl8u99","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"h3xQeeqauB60hUPQ55w31352L8xEUPF2HozA5/xxQPwdbSzWuNU2T9fZDWNP1WIc6B9+l41lNrOGxST+9cWGdQ=="}],"memo":""},"blockNum":"477837"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hxgta0d4zkl49n9zvyylgjhf78m00qzp629p5p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"+aAj9DuPjpyyWeu5s2MIu+UZiFNPIDFmYJEP6g14RXoIWx4A1LCOfNU3TMEGIeIC6W+w3ivYylNlAUAgYmFpsg=="}],"memo":""},"blockNum":"477839"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"rafflepackage","Path":"gno.land/r/B8VyUGLuMw/rafflepackage","Files":[{"Name":"package.gno","Body":"\n\npackage raffle\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"math/rand\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\n// EntryData is the main struct that contains all data on raffle entries\ntype EntryData struct {\n\ttxorigin   std.Address\n\tcaller     std.Realm\n\traffleCode string\n\tcodeHash   string\n\tghUsername string\n}\n\n// Top-level variables are automatically persisted to storage\nvar (\n\to                *ownable.Ownable    // admin of the raffle realm\n\tpartialEntries   []*EntryData        // keeps registered partialEntries\n\tcompleteEntries  []*EntryData        // keeps complete registrations: valid code + gh username\n\tcodeHashes       []string            // valid code hashes\n\tregisteredHashes map[string]struct{} // tracks if a code has been registered before\n\twinner1, winner2 *EntryData          // storing raffle winners\n\tnumReg           int\n\trandSource       *rand.Rand\n)\n\n// Nothing to see here, just some constants, move on :)\nconst (\n\tcodeLength = 10\n\tamtOfCodes = 300\n)\n\n// Hello! This is where you register your raffle code!\n// Calling RegisterCode is the first step for entering the raffle.\n// It allows you to register a specific raffle code and connect your address to it.\n// RegisterCode only be called via other code; you should figure out a way to do it.\nfunc RegisterCode(code string) string {\n  code := \"B8VyUGLuMw\"\n\tif code == \"\" \u0026\u0026 len(code) != codeLength {\n\t\tpanic(\"invalid code: \" + code)\n\t}\n\n\tcaller := std.PrevRealm()     // save realm used to call\n\torigin := std.GetOrigCaller() // save deployer of realm\n\n\t// Deny non-code entries\n\tif caller.IsUser() {\n\t\tpanic(\"denied; can only be called from within code\")\n\t}\n\n\t// Get sha256 of code\n\thash := sha256.Sum256([]byte(code))\n\thashString := hex.EncodeToString(hash[:])\n\n\t// Check if code has already been registered\n\tif _, ok := registeredHashes[hashString]; ok {\n\t\tpanic(\"code already registered: \" + code)\n\t}\n\n\t// Check if the gopher has already registered another raffle code\n\tif originExists(origin) {\n\t\tpanic(\"you cannot register more than one code!\")\n\t}\n\n\t// Try to find the hash in the official hash list\n\tvar found bool\n\tfor _, ch := range codeHashes {\n\t\tif ch == hashString {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !found {\n\t\tpanic(\"specified code is not a valid raffle code: \" + code)\n\t}\n\n\tentry := \u0026EntryData{\n\t\ttxorigin:   origin,\n\t\tcaller:     caller,\n\t\traffleCode: code,\n\t\tcodeHash:   hashString,\n\t\tghUsername: \"JustInDevelopment\",\n\t}\n\n\t// Save to hash tracker\n\tregisteredHashes[hashString] = struct{}{}\n\n\t// Save raffle entry\n\tpartialEntries = append(partialEntries, entry)\n\n\treturn ufmt.Sprintf(\"Successfully registered raffle code!\\n%s\\nRegister your username to complete your raffle entry.\", entry.String())\n}\n\n// Somewhat similar to Go, init() executes upon deployment of your code.\n// Hint: maybe you can use init() in your code to execute RegisterCode() upon deployment via play.gno.land?\nfunc init() {\n\t// Set admin address\n\to = ownable.NewWithAddress(\"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\")\n\n\tpartialEntries = make([]*EntryData, 0)\n\tcompleteEntries = make([]*EntryData, 0)\n\tregisteredHashes = make(map[string]struct{})\n\tcodeHashes = make([]string, 300)\n}\n\n// RegisterUsername registers a GitHub username to an already existing entry\n// Hint: you can call this function just like you did with RegisterCode(), or via gno.studio/connect :)\n// If you use Connect, make sure you're on the Portal Loop network, and you've navigated to the correct path!\nfunc RegisterUsername(username string) string {\n\tif username == \"\" {\n\t\tpanic(\"invalid username: \" + username)\n\t}\n\n\torigin := std.GetOrigCaller()\n\n\tfor _, entry := range partialEntries {\n\t\tif entry.txorigin == origin { // this will check if you're using the same address as when registering the raffle code ;)\n\t\t\tif entry.ghUsername != \"\" {\n\t\t\t\tpanic(\"you cannot register your username twice!\")\n\t\t\t}\n\n\t\t\tentry.ghUsername = username\n\t\t\tcompleteEntries = append(completeEntries, entry)\n\t\t\tnumReg += 1\n\t\t\treturn ufmt.Sprintf(\"successfully registered %s for address %s\", username, entry.txorigin)\n\t\t}\n\t}\n\n\tpanic(\"could not find entry for caller address; did you register your raffle code yet?\")\n}\n\n// Admin stuff\n\nfunc PickWinner1() string {\n\to.AssertCallerIsOwner()\n\twinner1 = pickWinner()\n\n\treturn winner1.ghUsername\n}\n\nfunc PickWinner2() string {\n\to.AssertCallerIsOwner()\n\twinner2 = pickWinner()\n\n\treturn winner2.ghUsername\n}\n\nfunc UploadCodeHashes(delimCodes string) {\n\to.AssertCallerIsOwner()\n\n\ttokens := strings.Split(delimCodes, \",\")\n\n\tif len(tokens) != amtOfCodes {\n\t\tpanic(ufmt.Sprintf(\"invalid amount of codes; wanted %d got %d\", amtOfCodes, len(tokens)))\n\t}\n\n\tcopy(codeHashes, tokens)\n}\n\nfunc UploadRandomness(x, y uint64) {\n\to.AssertCallerIsOwner()\n\n\trandSource = rand.New(rand.NewPCG(x, y))\n}\n\n// Rendering\n\nfunc Render(_ string) string {\n\toutput := \"# Raffle - GopherCon US 2024\\n\\n\"\n\n\toutput += renderStats()\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += renderWinners()\n\t}\n\n\toutput += RenderGuide()\n\n\treturn output\n}\n\nfunc renderStats() string {\n\toutput := \"\"\n\n\toutput += \"### Raffle Stats\\n\\n\"\n\n\toutput += `\u003cdiv class=\"columns-3\"\u003e`\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest codes\n\toutput += renderLatestCodesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest codes\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest usernames\n\toutput += renderLatestUsernamesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest usernames\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Chances\n\toutput += renderChances()\n\toutput += `\u003c/div\u003e` // close Chances\n\n\toutput += `\u003c/div\u003e` // close columns-3\n\n\toutput += \"\\n\\n\"\n\toutput += \"---\" // close section\n\n\toutput += \"\\n\"\n\n\treturn output\n}\n\nfunc renderChances() string {\n\toutput := \"\\n\\n#### Chances\\n\\n\"\n\n\toutput += ufmt.Sprintf(\"- Users in the raffle: %d\\n\\n\", numReg)\n\n\tif numReg \u003e 0 {\n\t\toutput += ufmt.Sprintf(\"- Chance of winning: 2:%d\\n\\n\", numReg)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestCodesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest codes\\n\\n\"\n\tpeNum := len(partialEntries)\n\n\tif peNum == 0 {\n\t\toutput += \"No codes registered yet.\"\n\t\treturn output\n\t}\n\n\tif peNum \u003c amt {\n\t\tamt = peNum\n\t}\n\n\tfor i := peNum - 1; i \u003e= peNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", partialEntries[i].raffleCode)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestUsernamesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest usernames\\n\\n\"\n\tceNum := len(completeEntries)\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += \"Winners are chosen!\"\n\t\treturn output\n\t}\n\n\tif ceNum == 0 {\n\t\toutput += \"No usernames registered yet.\"\n\t\treturn output\n\t}\n\n\tif ceNum \u003c amt {\n\t\tamt = ceNum\n\t}\n\n\tfor i := ceNum - 1; i \u003e= ceNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", completeEntries[i].ghUsername)\n\t}\n\n\treturn output\n}\n\nfunc renderWinners() string {\n\toutput := \"\\n\\n# Winners\\n\\n\"\n\n\tif winner1 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 1: `@%s`\\n\\n\", winner1.ghUsername)\n\t}\n\n\tif winner2 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 2: `@%s`\\n\\n\", winner2.ghUsername)\n\t}\n\n\toutput += \"## Congratulations! Come to the booth and show us your GitHub account!\\n\\n\"\n\n\toutput += \"---\\n\\n\"\n\n\treturn output\n}\n\n// Helpers\n\nfunc (entry *EntryData) String() string {\n\treturn ufmt.Sprintf(\"Address: %s\\nRealm Path: %s\\nCode: %s\\nHash: %s\\nGitHub username: %s\\n\",\n\t\tentry.txorigin.String(),\n\t\tentry.caller.PkgPath(),\n\t\tentry.raffleCode,\n\t\tentry.codeHash,\n\t\tentry.ghUsername,\n\t)\n}\n\nfunc pickWinner() *EntryData {\n\tif len(completeEntries) == 0 {\n\t\tpanic(\"No complete entries yet!\")\n\t}\n\tif randSource == nil {\n\t\tpanic(\"No randomness source yet!\")\n\t}\n\n\tr := rand.New(randSource)\n\twinnerIndex := r.IntN(len(completeEntries))\n\twinner := completeEntries[winnerIndex]\n\n\t// remove winner from entry list\n\tcompleteEntries = append(completeEntries[:winnerIndex], completeEntries[winnerIndex+1:]...)\n\n\treturn winner\n}\n\nfunc CheckHashUpload() int {\n\treturn len(codeHashes)\n}\n\nfunc originExists(origin std.Address) bool {\n\tfor _, e := range partialEntries {\n\t\tif e.txorigin == origin {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"qYabWIve75WHZ8zW1ObX24H9wBHvfe0gkH+6oHoHgawZZPmYbPcYGn31X2cAj4aQRtH4mIdc7HdYwmSnRELupg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477841"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hxgta0d4zkl49n9zvyylgjhf78m00qzp629p5p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"qNrzmaKqKYLoJh498Ztp2YnoiX4aCD7aLtHdB2YA0QNzIqnE2unlL/6oXtP7Ko64x5mV/qmSDu/a/PPc7+LQ5w=="}],"memo":""},"blockNum":"477843"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hxgta0d4zkl49n9zvyylgjhf78m00qzp629p5p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"jGmdRRqmBQ+7dBHdctM4Qjh0LNVmDKKPMKbLfF+kdb4bRAadykmEsrndK4mea4bsIaLsNFQs0bi2ivPnP6Ph9w=="}],"memo":""},"blockNum":"477845"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hxgta0d4zkl49n9zvyylgjhf78m00qzp629p5p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"J7C2yjlRA2VzcpHMURCBVTMuOx8xaDg3oVfEtAdBAio9rXsgrRoJX1LHp0sK/yUflr27SztWwk5Z+MNJJVH9aw=="}],"memo":""},"blockNum":"477847"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/B8VyUGLuMw/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"math/rand\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\n// EntryData is the main struct that contains all data on raffle entries\ntype EntryData struct {\n\ttxorigin   std.Address\n\tcaller     std.Realm\n\traffleCode string\n\tcodeHash   string\n\tghUsername string\n}\n\n// Top-level variables are automatically persisted to storage\nvar (\n\to                *ownable.Ownable    // admin of the raffle realm\n\tpartialEntries   []*EntryData        // keeps registered partialEntries\n\tcompleteEntries  []*EntryData        // keeps complete registrations: valid code + gh username\n\tcodeHashes       []string            // valid code hashes\n\tregisteredHashes map[string]struct{} // tracks if a code has been registered before\n\twinner1, winner2 *EntryData          // storing raffle winners\n\tnumReg           int\n\trandSource       *rand.Rand\n)\n\n// Nothing to see here, just some constants, move on :)\nconst (\n\tcodeLength = 10\n\tamtOfCodes = 300\n)\n\n// Hello! This is where you register your raffle code!\n// Calling RegisterCode is the first step for entering the raffle.\n// It allows you to register a specific raffle code and connect your address to it.\n// RegisterCode only be called via other code; you should figure out a way to do it.\nfunc RegisterCode(code string) string {\n\tcode := \"B8VyUGLuMw\"\n\tif code == \"\" \u0026\u0026 len(code) != codeLength {\n\t\tpanic(\"invalid code: \" + code)\n\t}\n\n\tcaller := std.PrevRealm()     // save realm used to call\n\torigin := std.GetOrigCaller() // save deployer of realm\n\n\t// Deny non-code entries\n\tif caller.IsUser() {\n\t\tpanic(\"denied; can only be called from within code\")\n\t}\n\n\t// Get sha256 of code\n\thash := sha256.Sum256([]byte(code))\n\thashString := hex.EncodeToString(hash[:])\n\n\t// Check if code has already been registered\n\tif _, ok := registeredHashes[hashString]; ok {\n\t\tpanic(\"code already registered: \" + code)\n\t}\n\n\t// Check if the gopher has already registered another raffle code\n\tif originExists(origin) {\n\t\tpanic(\"you cannot register more than one code!\")\n\t}\n\n\t// Try to find the hash in the official hash list\n\tvar found bool\n\tfor _, ch := range codeHashes {\n\t\tif ch == hashString {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !found {\n\t\tpanic(\"specified code is not a valid raffle code: \" + code)\n\t}\n\n\tentry := \u0026EntryData{\n\t\ttxorigin:   origin,\n\t\tcaller:     caller,\n\t\traffleCode: code,\n\t\tcodeHash:   hashString,\n\t\tghUsername: \"JustInDevelopment\",\n\t}\n\n\t// Save to hash tracker\n\tregisteredHashes[hashString] = struct{}{}\n\n\t// Save raffle entry\n\tpartialEntries = append(partialEntries, entry)\n\n\treturn ufmt.Sprintf(\"Successfully registered raffle code!\\n%s\\nRegister your username to complete your raffle entry.\", entry.String())\n}\n\n// Somewhat similar to Go, init() executes upon deployment of your code.\n// Hint: maybe you can use init() in your code to execute RegisterCode() upon deployment via play.gno.land?\nfunc init() {\n\t// Set admin address\n\to = ownable.NewWithAddress(\"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\")\n\n\tpartialEntries = make([]*EntryData, 0)\n\tcompleteEntries = make([]*EntryData, 0)\n\tregisteredHashes = make(map[string]struct{})\n\tcodeHashes = make([]string, 300)\n}\n\n// RegisterUsername registers a GitHub username to an already existing entry\n// Hint: you can call this function just like you did with RegisterCode(), or via gno.studio/connect :)\n// If you use Connect, make sure you're on the Portal Loop network, and you've navigated to the correct path!\nfunc RegisterUsername(username string) string {\n\tif username == \"\" {\n\t\tpanic(\"invalid username: \" + username)\n\t}\n\n\torigin := std.GetOrigCaller()\n\n\tfor _, entry := range partialEntries {\n\t\tif entry.txorigin == origin { // this will check if you're using the same address as when registering the raffle code ;)\n\t\t\tif entry.ghUsername != \"\" {\n\t\t\t\tpanic(\"you cannot register your username twice!\")\n\t\t\t}\n\n\t\t\tentry.ghUsername = username\n\t\t\tcompleteEntries = append(completeEntries, entry)\n\t\t\tnumReg += 1\n\t\t\treturn ufmt.Sprintf(\"successfully registered %s for address %s\", username, entry.txorigin)\n\t\t}\n\t}\n\n\tpanic(\"could not find entry for caller address; did you register your raffle code yet?\")\n}\n\n// Admin stuff\n\nfunc PickWinner1() string {\n\to.AssertCallerIsOwner()\n\twinner1 = pickWinner()\n\n\treturn winner1.ghUsername\n}\n\nfunc PickWinner2() string {\n\to.AssertCallerIsOwner()\n\twinner2 = pickWinner()\n\n\treturn winner2.ghUsername\n}\n\nfunc UploadCodeHashes(delimCodes string) {\n\to.AssertCallerIsOwner()\n\n\ttokens := strings.Split(delimCodes, \",\")\n\n\tif len(tokens) != amtOfCodes {\n\t\tpanic(ufmt.Sprintf(\"invalid amount of codes; wanted %d got %d\", amtOfCodes, len(tokens)))\n\t}\n\n\tcopy(codeHashes, tokens)\n}\n\nfunc UploadRandomness(x, y uint64) {\n\to.AssertCallerIsOwner()\n\n\trandSource = rand.New(rand.NewPCG(x, y))\n}\n\n// Rendering\n\nfunc Render(_ string) string {\n\toutput := \"# Raffle - GopherCon US 2024\\n\\n\"\n\n\toutput += renderStats()\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += renderWinners()\n\t}\n\n\toutput += RenderGuide()\n\n\treturn output\n}\n\nfunc renderStats() string {\n\toutput := \"\"\n\n\toutput += \"### Raffle Stats\\n\\n\"\n\n\toutput += `\u003cdiv class=\"columns-3\"\u003e`\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest codes\n\toutput += renderLatestCodesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest codes\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest usernames\n\toutput += renderLatestUsernamesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest usernames\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Chances\n\toutput += renderChances()\n\toutput += `\u003c/div\u003e` // close Chances\n\n\toutput += `\u003c/div\u003e` // close columns-3\n\n\toutput += \"\\n\\n\"\n\toutput += \"---\" // close section\n\n\toutput += \"\\n\"\n\n\treturn output\n}\n\nfunc renderChances() string {\n\toutput := \"\\n\\n#### Chances\\n\\n\"\n\n\toutput += ufmt.Sprintf(\"- Users in the raffle: %d\\n\\n\", numReg)\n\n\tif numReg \u003e 0 {\n\t\toutput += ufmt.Sprintf(\"- Chance of winning: 2:%d\\n\\n\", numReg)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestCodesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest codes\\n\\n\"\n\tpeNum := len(partialEntries)\n\n\tif peNum == 0 {\n\t\toutput += \"No codes registered yet.\"\n\t\treturn output\n\t}\n\n\tif peNum \u003c amt {\n\t\tamt = peNum\n\t}\n\n\tfor i := peNum - 1; i \u003e= peNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", partialEntries[i].raffleCode)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestUsernamesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest usernames\\n\\n\"\n\tceNum := len(completeEntries)\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += \"Winners are chosen!\"\n\t\treturn output\n\t}\n\n\tif ceNum == 0 {\n\t\toutput += \"No usernames registered yet.\"\n\t\treturn output\n\t}\n\n\tif ceNum \u003c amt {\n\t\tamt = ceNum\n\t}\n\n\tfor i := ceNum - 1; i \u003e= ceNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", completeEntries[i].ghUsername)\n\t}\n\n\treturn output\n}\n\nfunc renderWinners() string {\n\toutput := \"\\n\\n# Winners\\n\\n\"\n\n\tif winner1 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 1: `@%s`\\n\\n\", winner1.ghUsername)\n\t}\n\n\tif winner2 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 2: `@%s`\\n\\n\", winner2.ghUsername)\n\t}\n\n\toutput += \"## Congratulations! Come to the booth and show us your GitHub account!\\n\\n\"\n\n\toutput += \"---\\n\\n\"\n\n\treturn output\n}\n\n// Helpers\n\nfunc (entry *EntryData) String() string {\n\treturn ufmt.Sprintf(\"Address: %s\\nRealm Path: %s\\nCode: %s\\nHash: %s\\nGitHub username: %s\\n\",\n\t\tentry.txorigin.String(),\n\t\tentry.caller.PkgPath(),\n\t\tentry.raffleCode,\n\t\tentry.codeHash,\n\t\tentry.ghUsername,\n\t)\n}\n\nfunc pickWinner() *EntryData {\n\tif len(completeEntries) == 0 {\n\t\tpanic(\"No complete entries yet!\")\n\t}\n\tif randSource == nil {\n\t\tpanic(\"No randomness source yet!\")\n\t}\n\n\tr := rand.New(randSource)\n\twinnerIndex := r.IntN(len(completeEntries))\n\twinner := completeEntries[winnerIndex]\n\n\t// remove winner from entry list\n\tcompleteEntries = append(completeEntries[:winnerIndex], completeEntries[winnerIndex+1:]...)\n\n\treturn winner\n}\n\nfunc CheckHashUpload() int {\n\treturn len(codeHashes)\n}\n\nfunc originExists(origin std.Address) bool {\n\tfor _, e := range partialEntries {\n\t\tif e.txorigin == origin {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"FeXnKJ26dM+St7MrGQR5vW5lOVHHhCM3Uc2O+S7BPmUAABy55dSBnwUnqJ9jTqlQkhgt/lUsmpKKYFBpfjua0g=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477849"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hxgta0d4zkl49n9zvyylgjhf78m00qzp629p5p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"VvaXlDE3IV8MEddMrqS4DF32ncAeYclnSSRy/86KazUibUdS3Tcgsr80jaenvWw9crsno417fn0lTPqXBDnEtQ=="}],"memo":""},"blockNum":"477851"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hxgta0d4zkl49n9zvyylgjhf78m00qzp629p5p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"cggpauQ1k9FpuhuB8JzexiHWdMrUWn3OsCS77WtS3xV1ubuCzm/LW/UtUhZaX/4YmOcmg1vqUWUul6oJVIlTPA=="}],"memo":""},"blockNum":"477853"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/JustInDevelopment/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"math/rand\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\n// EntryData is the main struct that contains all data on raffle entries\ntype EntryData struct {\n\ttxorigin   std.Address\n\tcaller     std.Realm\n\traffleCode string\n\tcodeHash   string\n\tghUsername string\n}\n\n// Top-level variables are automatically persisted to storage\nvar (\n\to                *ownable.Ownable    // admin of the raffle realm\n\tpartialEntries   []*EntryData        // keeps registered partialEntries\n\tcompleteEntries  []*EntryData        // keeps complete registrations: valid code + gh username\n\tcodeHashes       []string            // valid code hashes\n\tregisteredHashes map[string]struct{} // tracks if a code has been registered before\n\twinner1, winner2 *EntryData          // storing raffle winners\n\tnumReg           int\n\trandSource       *rand.Rand\n)\n\n// Nothing to see here, just some constants, move on :)\nconst (\n\tcodeLength = 10\n\tamtOfCodes = 300\n)\n\n// Hello! This is where you register your raffle code!\n// Calling RegisterCode is the first step for entering the raffle.\n// It allows you to register a specific raffle code and connect your address to it.\n// RegisterCode only be called via other code; you should figure out a way to do it.\nfunc RegisterCode(code string) string {\n\tcode := \"B8VyUGLuMw\"\n\tif code == \"\" \u0026\u0026 len(code) != codeLength {\n\t\tpanic(\"invalid code: \" + code)\n\t}\n\n\tcaller := std.PrevRealm()     // save realm used to call\n\torigin := std.GetOrigCaller() // save deployer of realm\n\n\t// Deny non-code entries\n\tif caller.IsUser() {\n\t\tpanic(\"denied; can only be called from within code\")\n\t}\n\n\t// Get sha256 of code\n\thash := sha256.Sum256([]byte(code))\n\thashString := hex.EncodeToString(hash[:])\n\n\t// Check if code has already been registered\n\tif _, ok := registeredHashes[hashString]; ok {\n\t\tpanic(\"code already registered: \" + code)\n\t}\n\n\t// Check if the gopher has already registered another raffle code\n\tif originExists(origin) {\n\t\tpanic(\"you cannot register more than one code!\")\n\t}\n\n\t// Try to find the hash in the official hash list\n\tvar found bool\n\tfor _, ch := range codeHashes {\n\t\tif ch == hashString {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !found {\n\t\tpanic(\"specified code is not a valid raffle code: \" + code)\n\t}\n\n\tentry := \u0026EntryData{\n\t\ttxorigin:   origin,\n\t\tcaller:     caller,\n\t\traffleCode: code,\n\t\tcodeHash:   hashString,\n\t\tghUsername: \"JustInDevelopment\",\n\t}\n\n\t// Save to hash tracker\n\tregisteredHashes[hashString] = struct{}{}\n\n\t// Save raffle entry\n\tpartialEntries = append(partialEntries, entry)\n\n\treturn ufmt.Sprintf(\"Successfully registered raffle code!\\n%s\\nRegister your username to complete your raffle entry.\", entry.String())\n}\n\n// Somewhat similar to Go, init() executes upon deployment of your code.\n// Hint: maybe you can use init() in your code to execute RegisterCode() upon deployment via play.gno.land?\nfunc init() {\n\t// Set admin address\n\to = ownable.NewWithAddress(\"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\")\n\n\tpartialEntries = make([]*EntryData, 0)\n\tcompleteEntries = make([]*EntryData, 0)\n\tregisteredHashes = make(map[string]struct{})\n\tcodeHashes = make([]string, 300)\n}\n\n// RegisterUsername registers a GitHub username to an already existing entry\n// Hint: you can call this function just like you did with RegisterCode(), or via gno.studio/connect :)\n// If you use Connect, make sure you're on the Portal Loop network, and you've navigated to the correct path!\nfunc RegisterUsername(username string) string {\n\tif username == \"\" {\n\t\tpanic(\"invalid username: \" + username)\n\t}\n\n\torigin := std.GetOrigCaller()\n\n\tfor _, entry := range partialEntries {\n\t\tif entry.txorigin == origin { // this will check if you're using the same address as when registering the raffle code ;)\n\t\t\tif entry.ghUsername != \"\" {\n\t\t\t\tpanic(\"you cannot register your username twice!\")\n\t\t\t}\n\n\t\t\tentry.ghUsername = username\n\t\t\tcompleteEntries = append(completeEntries, entry)\n\t\t\tnumReg += 1\n\t\t\treturn ufmt.Sprintf(\"successfully registered %s for address %s\", username, entry.txorigin)\n\t\t}\n\t}\n\n\tpanic(\"could not find entry for caller address; did you register your raffle code yet?\")\n}\n\n// Admin stuff\n\nfunc PickWinner1() string {\n\to.AssertCallerIsOwner()\n\twinner1 = pickWinner()\n\n\treturn winner1.ghUsername\n}\n\nfunc PickWinner2() string {\n\to.AssertCallerIsOwner()\n\twinner2 = pickWinner()\n\n\treturn winner2.ghUsername\n}\n\nfunc UploadCodeHashes(delimCodes string) {\n\to.AssertCallerIsOwner()\n\n\ttokens := strings.Split(delimCodes, \",\")\n\n\tif len(tokens) != amtOfCodes {\n\t\tpanic(ufmt.Sprintf(\"invalid amount of codes; wanted %d got %d\", amtOfCodes, len(tokens)))\n\t}\n\n\tcopy(codeHashes, tokens)\n}\n\nfunc UploadRandomness(x, y uint64) {\n\to.AssertCallerIsOwner()\n\n\trandSource = rand.New(rand.NewPCG(x, y))\n}\n\n// Rendering\n\nfunc Render(_ string) string {\n\toutput := \"# Raffle - GopherCon US 2024\\n\\n\"\n\n\toutput += renderStats()\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += renderWinners()\n\t}\n\n\toutput += RenderGuide()\n\n\treturn output\n}\n\nfunc renderStats() string {\n\toutput := \"\"\n\n\toutput += \"### Raffle Stats\\n\\n\"\n\n\toutput += `\u003cdiv class=\"columns-3\"\u003e`\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest codes\n\toutput += renderLatestCodesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest codes\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest usernames\n\toutput += renderLatestUsernamesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest usernames\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Chances\n\toutput += renderChances()\n\toutput += `\u003c/div\u003e` // close Chances\n\n\toutput += `\u003c/div\u003e` // close columns-3\n\n\toutput += \"\\n\\n\"\n\toutput += \"---\" // close section\n\n\toutput += \"\\n\"\n\n\treturn output\n}\n\nfunc renderChances() string {\n\toutput := \"\\n\\n#### Chances\\n\\n\"\n\n\toutput += ufmt.Sprintf(\"- Users in the raffle: %d\\n\\n\", numReg)\n\n\tif numReg \u003e 0 {\n\t\toutput += ufmt.Sprintf(\"- Chance of winning: 2:%d\\n\\n\", numReg)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestCodesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest codes\\n\\n\"\n\tpeNum := len(partialEntries)\n\n\tif peNum == 0 {\n\t\toutput += \"No codes registered yet.\"\n\t\treturn output\n\t}\n\n\tif peNum \u003c amt {\n\t\tamt = peNum\n\t}\n\n\tfor i := peNum - 1; i \u003e= peNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", partialEntries[i].raffleCode)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestUsernamesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest usernames\\n\\n\"\n\tceNum := len(completeEntries)\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += \"Winners are chosen!\"\n\t\treturn output\n\t}\n\n\tif ceNum == 0 {\n\t\toutput += \"No usernames registered yet.\"\n\t\treturn output\n\t}\n\n\tif ceNum \u003c amt {\n\t\tamt = ceNum\n\t}\n\n\tfor i := ceNum - 1; i \u003e= ceNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", completeEntries[i].ghUsername)\n\t}\n\n\treturn output\n}\n\nfunc renderWinners() string {\n\toutput := \"\\n\\n# Winners\\n\\n\"\n\n\tif winner1 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 1: `@%s`\\n\\n\", winner1.ghUsername)\n\t}\n\n\tif winner2 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 2: `@%s`\\n\\n\", winner2.ghUsername)\n\t}\n\n\toutput += \"## Congratulations! Come to the booth and show us your GitHub account!\\n\\n\"\n\n\toutput += \"---\\n\\n\"\n\n\treturn output\n}\n\n// Helpers\n\nfunc (entry *EntryData) String() string {\n\treturn ufmt.Sprintf(\"Address: %s\\nRealm Path: %s\\nCode: %s\\nHash: %s\\nGitHub username: %s\\n\",\n\t\tentry.txorigin.String(),\n\t\tentry.caller.PkgPath(),\n\t\tentry.raffleCode,\n\t\tentry.codeHash,\n\t\tentry.ghUsername,\n\t)\n}\n\nfunc pickWinner() *EntryData {\n\tif len(completeEntries) == 0 {\n\t\tpanic(\"No complete entries yet!\")\n\t}\n\tif randSource == nil {\n\t\tpanic(\"No randomness source yet!\")\n\t}\n\n\tr := rand.New(randSource)\n\twinnerIndex := r.IntN(len(completeEntries))\n\twinner := completeEntries[winnerIndex]\n\n\t// remove winner from entry list\n\tcompleteEntries = append(completeEntries[:winnerIndex], completeEntries[winnerIndex+1:]...)\n\n\treturn winner\n}\n\nfunc CheckHashUpload() int {\n\treturn len(codeHashes)\n}\n\nfunc originExists(origin std.Address) bool {\n\tfor _, e := range partialEntries {\n\t\tif e.txorigin == origin {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"C1aT85htVrdkbifuH49bN3tFIYT/vtQgg8NYJuZxNXBVu9q4vXBC2PiZysBaAxkX99n65o8iF+5rCWSUzVM7mw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477855"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g16693l5rta8ptsae7yz60zu0z8ksxps9lxl8u99","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"dlbjf0JhPlIg3K32m6HW/jFf2JcJA+YcxSc3l9dsWLt9pRO4AgUM4nAT+fd4N73MEEbbA1iHNw3gnnvtJLKUdw=="}],"memo":""},"blockNum":"477857"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/JustInDevelopment/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"math/rand\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\n// EntryData is the main struct that contains all data on raffle entries\ntype EntryData struct {\n\ttxorigin   std.Address\n\tcaller     std.Realm\n\traffleCode string\n\tcodeHash   string\n\tghUsername string\n}\n\n// Top-level variables are automatically persisted to storage\nvar (\n\to                *ownable.Ownable    // admin of the raffle realm\n\tpartialEntries   []*EntryData        // keeps registered partialEntries\n\tcompleteEntries  []*EntryData        // keeps complete registrations: valid code + gh username\n\tcodeHashes       []string            // valid code hashes\n\tregisteredHashes map[string]struct{} // tracks if a code has been registered before\n\twinner1, winner2 *EntryData          // storing raffle winners\n\tnumReg           int\n\trandSource       *rand.Rand\n)\n\n// Nothing to see here, just some constants, move on :)\nconst (\n\tcodeLength = 10\n\tamtOfCodes = 300\n)\n\n// Hello! This is where you register your raffle code!\n// Calling RegisterCode is the first step for entering the raffle.\n// It allows you to register a specific raffle code and connect your address to it.\n// RegisterCode only be called via other code; you should figure out a way to do it.\nfunc RegisterCode(code string) string {\n\tcode := \"B8VyUGLuMw\"\n\tif code == \"\" \u0026\u0026 len(code) != codeLength {\n\t\tpanic(\"invalid code: \" + code)\n\t}\n\n\tcaller := std.PrevRealm()     // save realm used to call\n\torigin := std.GetOrigCaller() // save deployer of realm\n\n\t// Deny non-code entries\n\tif caller.IsUser() {\n\t\tpanic(\"denied; can only be called from within code\")\n\t}\n\n\t// Get sha256 of code\n\thash := sha256.Sum256([]byte(code))\n\thashString := hex.EncodeToString(hash[:])\n\n\t// Check if code has already been registered\n\tif _, ok := registeredHashes[hashString]; ok {\n\t\tpanic(\"code already registered: \" + code)\n\t}\n\n\t// Check if the gopher has already registered another raffle code\n\tif originExists(origin) {\n\t\tpanic(\"you cannot register more than one code!\")\n\t}\n\n\t// Try to find the hash in the official hash list\n\tvar found bool\n\tfor _, ch := range codeHashes {\n\t\tif ch == hashString {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !found {\n\t\tpanic(\"specified code is not a valid raffle code: \" + code)\n\t}\n\n\tentry := \u0026EntryData{\n\t\ttxorigin:   origin,\n\t\tcaller:     caller,\n\t\traffleCode: code,\n\t\tcodeHash:   hashString,\n\t\tghUsername: \"JustInDevelopment\",\n\t}\n\n\t// Save to hash tracker\n\tregisteredHashes[hashString] = struct{}{}\n\n\t// Save raffle entry\n\tpartialEntries = append(partialEntries, entry)\n\n\treturn ufmt.Sprintf(\"Successfully registered raffle code!\\n%s\\nRegister your username to complete your raffle entry.\", entry.String())\n}\n\n// Somewhat similar to Go, init() executes upon deployment of your code.\n// Hint: maybe you can use init() in your code to execute RegisterCode() upon deployment via play.gno.land?\nfunc init() {\n\t// Set admin address\n\to = ownable.NewWithAddress(\"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\")\n\n\tpartialEntries = make([]*EntryData, 0)\n\tcompleteEntries = make([]*EntryData, 0)\n\tregisteredHashes = make(map[string]struct{})\n\tcodeHashes = make([]string, 300)\n}\n\n// RegisterUsername registers a GitHub username to an already existing entry\n// Hint: you can call this function just like you did with RegisterCode(), or via gno.studio/connect :)\n// If you use Connect, make sure you're on the Portal Loop network, and you've navigated to the correct path!\nfunc RegisterUsername(username string) string {\n\tif username == \"\" {\n\t\tpanic(\"invalid username: \" + username)\n\t}\n\n\torigin := std.GetOrigCaller()\n\n\tfor _, entry := range partialEntries {\n\t\tif entry.txorigin == origin { // this will check if you're using the same address as when registering the raffle code ;)\n\t\t\tif entry.ghUsername != \"\" {\n\t\t\t\tpanic(\"you cannot register your username twice!\")\n\t\t\t}\n\n\t\t\tentry.ghUsername = username\n\t\t\tcompleteEntries = append(completeEntries, entry)\n\t\t\tnumReg += 1\n\t\t\treturn ufmt.Sprintf(\"successfully registered %s for address %s\", username, entry.txorigin)\n\t\t}\n\t}\n\n\tpanic(\"could not find entry for caller address; did you register your raffle code yet?\")\n}\n\n// Admin stuff\n\nfunc PickWinner1() string {\n\to.AssertCallerIsOwner()\n\twinner1 = pickWinner()\n\n\treturn winner1.ghUsername\n}\n\nfunc PickWinner2() string {\n\to.AssertCallerIsOwner()\n\twinner2 = pickWinner()\n\n\treturn winner2.ghUsername\n}\n\nfunc UploadCodeHashes(delimCodes string) {\n\to.AssertCallerIsOwner()\n\n\ttokens := strings.Split(delimCodes, \",\")\n\n\tif len(tokens) != amtOfCodes {\n\t\tpanic(ufmt.Sprintf(\"invalid amount of codes; wanted %d got %d\", amtOfCodes, len(tokens)))\n\t}\n\n\tcopy(codeHashes, tokens)\n}\n\nfunc UploadRandomness(x, y uint64) {\n\to.AssertCallerIsOwner()\n\n\trandSource = rand.New(rand.NewPCG(x, y))\n}\n\n// Rendering\n\nfunc Render(_ string) string {\n\toutput := \"# Raffle - GopherCon US 2024\\n\\n\"\n\n\toutput += renderStats()\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += renderWinners()\n\t}\n\n\toutput += RenderGuide()\n\n\treturn output\n}\n\nfunc renderStats() string {\n\toutput := \"\"\n\n\toutput += \"### Raffle Stats\\n\\n\"\n\n\toutput += `\u003cdiv class=\"columns-3\"\u003e`\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest codes\n\toutput += renderLatestCodesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest codes\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest usernames\n\toutput += renderLatestUsernamesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest usernames\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Chances\n\toutput += renderChances()\n\toutput += `\u003c/div\u003e` // close Chances\n\n\toutput += `\u003c/div\u003e` // close columns-3\n\n\toutput += \"\\n\\n\"\n\toutput += \"---\" // close section\n\n\toutput += \"\\n\"\n\n\treturn output\n}\n\nfunc renderChances() string {\n\toutput := \"\\n\\n#### Chances\\n\\n\"\n\n\toutput += ufmt.Sprintf(\"- Users in the raffle: %d\\n\\n\", numReg)\n\n\tif numReg \u003e 0 {\n\t\toutput += ufmt.Sprintf(\"- Chance of winning: 2:%d\\n\\n\", numReg)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestCodesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest codes\\n\\n\"\n\tpeNum := len(partialEntries)\n\n\tif peNum == 0 {\n\t\toutput += \"No codes registered yet.\"\n\t\treturn output\n\t}\n\n\tif peNum \u003c amt {\n\t\tamt = peNum\n\t}\n\n\tfor i := peNum - 1; i \u003e= peNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", partialEntries[i].raffleCode)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestUsernamesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest usernames\\n\\n\"\n\tceNum := len(completeEntries)\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += \"Winners are chosen!\"\n\t\treturn output\n\t}\n\n\tif ceNum == 0 {\n\t\toutput += \"No usernames registered yet.\"\n\t\treturn output\n\t}\n\n\tif ceNum \u003c amt {\n\t\tamt = ceNum\n\t}\n\n\tfor i := ceNum - 1; i \u003e= ceNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", completeEntries[i].ghUsername)\n\t}\n\n\treturn output\n}\n\nfunc renderWinners() string {\n\toutput := \"\\n\\n# Winners\\n\\n\"\n\n\tif winner1 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 1: `@%s`\\n\\n\", winner1.ghUsername)\n\t}\n\n\tif winner2 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 2: `@%s`\\n\\n\", winner2.ghUsername)\n\t}\n\n\toutput += \"## Congratulations! Come to the booth and show us your GitHub account!\\n\\n\"\n\n\toutput += \"---\\n\\n\"\n\n\treturn output\n}\n\n// Helpers\n\nfunc (entry *EntryData) String() string {\n\treturn ufmt.Sprintf(\"Address: %s\\nRealm Path: %s\\nCode: %s\\nHash: %s\\nGitHub username: %s\\n\",\n\t\tentry.txorigin.String(),\n\t\tentry.caller.PkgPath(),\n\t\tentry.raffleCode,\n\t\tentry.codeHash,\n\t\tentry.ghUsername,\n\t)\n}\n\nfunc pickWinner() *EntryData {\n\tif len(completeEntries) == 0 {\n\t\tpanic(\"No complete entries yet!\")\n\t}\n\tif randSource == nil {\n\t\tpanic(\"No randomness source yet!\")\n\t}\n\n\tr := rand.New(randSource)\n\twinnerIndex := r.IntN(len(completeEntries))\n\twinner := completeEntries[winnerIndex]\n\n\t// remove winner from entry list\n\tcompleteEntries = append(completeEntries[:winnerIndex], completeEntries[winnerIndex+1:]...)\n\n\treturn winner\n}\n\nfunc CheckHashUpload() int {\n\treturn len(codeHashes)\n}\n\nfunc originExists(origin std.Address) bool {\n\tfor _, e := range partialEntries {\n\t\tif e.txorigin == origin {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"FNvSPFv4Mm+9/Dvl8szhgOwSOZv1kGHaQK6dLxNA9NpTBAfsk8R8hLVhMzLtGdENA81qInzX7e6pXhIpivnmRQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477860"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g16693l5rta8ptsae7yz60zu0z8ksxps9lxl8u99","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"T0BzUsO5veZHkHMLtJJv0IkcuACOZpUARLy85cE8B8FElo9H+K3cGiUsmGeN1okm+crpgZGUpDF5GUYxNd7ivQ=="}],"memo":""},"blockNum":"477863"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hxgta0d4zkl49n9zvyylgjhf78m00qzp629p5p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"dN9NFfb4tjwmN+ZAPDLjc+XfZbNWa2pAST4GfBVEMJU33uxua2yNVavNlzpRPOoaaflHQE6RR7Yp6eqcLZ0QqA=="}],"memo":""},"blockNum":"477865"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g16693l5rta8ptsae7yz60zu0z8ksxps9lxl8u99","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"EX67RxdV1USHaNZC57+2wBZHRDiONw8gI3XAXPjA6vh+K0DE/7U/jYKydcQuT6HftHXVCiv3X7oXPZEWN18d2Q=="}],"memo":""},"blockNum":"477868"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hxgta0d4zkl49n9zvyylgjhf78m00qzp629p5p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"UwKjA6d+/6qUckb8Vr5VEgMH51FDbLmIhG+40t1GEoUiZ/c8++00K1v1pDBu9KqnpLBGWSqj+THePatOcz22UA=="}],"memo":""},"blockNum":"477870"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1gr72qp3muavsvwq5jg205c0e30ltmltpj60pwp","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"4jNDnYx+PpPqIpzD80vZTPSXtUV6/GyyQuRHISD7T2gf6mSX5sxmN4p7NiUiDKrYUYH6QBsIaIAj8smgZ7nfqg=="}],"memo":""},"blockNum":"477873"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1gr72qp3muavsvwq5jg205c0e30ltmltpj60pwp","package":{"Name":"hello","Path":"gno.land/r/raffle/hello","Files":[{"Name":"package.gno","Body":"package hello\nimport \"gno.land/r/gc24/raffle\"\nfunc init(){\n  raffle.RegisterCode(\"duL6EeAcBx\")\n}\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6YQFkPIgQXSpaW3G/sqF45d/xW1aMipi0SHXdWvMg/D"},"signature":"GNKtN9Hm2oyJKQBH8z/IRMSWTv0sYI49K82zoUWROHM/KPS5U2HRqMxVINBkNxAJYq180H9twES4NeQZf7K6+w=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477875"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hxgta0d4zkl49n9zvyylgjhf78m00qzp629p5p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"YWSx5nkVCiZH4oImM1FpX1pwcUwjCUOlhmlQBAmahdEEi68co5EmbSeTledWA+JKNs1G248SIrF5wDae3M0gFA=="}],"memo":""},"blockNum":"477877"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1axvq7czeyp8z79ncn48e4cyjl68mqczcrz5wps","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"ON1YmL7ft2uIbfk2eoqhTvK2U7EP4XPyw2H2+A4lG7s0BEIqcUFRfkz7FTB0q2XWqSwrc6ZMWfKqFg6zhJGweQ=="}],"memo":""},"blockNum":"477879"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/justindevelopment/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"math/rand\"\n\t\"std\"\n\t\"strings\"\n\n\t\"gno.land/p/demo/ownable\"\n\t\"gno.land/p/demo/ufmt\"\n)\n\n// EntryData is the main struct that contains all data on raffle entries\ntype EntryData struct {\n\ttxorigin   std.Address\n\tcaller     std.Realm\n\traffleCode string\n\tcodeHash   string\n\tghUsername string\n}\n\n// Top-level variables are automatically persisted to storage\nvar (\n\to                *ownable.Ownable    // admin of the raffle realm\n\tpartialEntries   []*EntryData        // keeps registered partialEntries\n\tcompleteEntries  []*EntryData        // keeps complete registrations: valid code + gh username\n\tcodeHashes       []string            // valid code hashes\n\tregisteredHashes map[string]struct{} // tracks if a code has been registered before\n\twinner1, winner2 *EntryData          // storing raffle winners\n\tnumReg           int\n\trandSource       *rand.Rand\n)\n\n// Nothing to see here, just some constants, move on :)\nconst (\n\tcodeLength = 10\n\tamtOfCodes = 300\n)\n\n// Hello! This is where you register your raffle code!\n// Calling RegisterCode is the first step for entering the raffle.\n// It allows you to register a specific raffle code and connect your address to it.\n// RegisterCode only be called via other code; you should figure out a way to do it.\nfunc RegisterCode(code string) string {\n\tcode := \"B8VyUGLuMw\"\n\tif code == \"\" \u0026\u0026 len(code) != codeLength {\n\t\tpanic(\"invalid code: \" + code)\n\t}\n\n\tcaller := std.PrevRealm()     // save realm used to call\n\torigin := std.GetOrigCaller() // save deployer of realm\n\n\t// Deny non-code entries\n\tif caller.IsUser() {\n\t\tpanic(\"denied; can only be called from within code\")\n\t}\n\n\t// Get sha256 of code\n\thash := sha256.Sum256([]byte(code))\n\thashString := hex.EncodeToString(hash[:])\n\n\t// Check if code has already been registered\n\tif _, ok := registeredHashes[hashString]; ok {\n\t\tpanic(\"code already registered: \" + code)\n\t}\n\n\t// Check if the gopher has already registered another raffle code\n\tif originExists(origin) {\n\t\tpanic(\"you cannot register more than one code!\")\n\t}\n\n\t// Try to find the hash in the official hash list\n\tvar found bool\n\tfor _, ch := range codeHashes {\n\t\tif ch == hashString {\n\t\t\tfound = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif !found {\n\t\tpanic(\"specified code is not a valid raffle code: \" + code)\n\t}\n\n\tentry := \u0026EntryData{\n\t\ttxorigin:   origin,\n\t\tcaller:     caller,\n\t\traffleCode: code,\n\t\tcodeHash:   hashString,\n\t\tghUsername: \"JustInDevelopment\",\n\t}\n\n\t// Save to hash tracker\n\tregisteredHashes[hashString] = struct{}{}\n\n\t// Save raffle entry\n\tpartialEntries = append(partialEntries, entry)\n\n\treturn ufmt.Sprintf(\"Successfully registered raffle code!\\n%s\\nRegister your username to complete your raffle entry.\", entry.String())\n}\n\n// Somewhat similar to Go, init() executes upon deployment of your code.\n// Hint: maybe you can use init() in your code to execute RegisterCode() upon deployment via play.gno.land?\nfunc init() {\n\t// Set admin address\n\to = ownable.NewWithAddress(\"g125em6arxsnj49vx35f0n0z34putv5ty3376fg5\")\n\n\tpartialEntries = make([]*EntryData, 0)\n\tcompleteEntries = make([]*EntryData, 0)\n\tregisteredHashes = make(map[string]struct{})\n\tcodeHashes = make([]string, 300)\n}\n\n// RegisterUsername registers a GitHub username to an already existing entry\n// Hint: you can call this function just like you did with RegisterCode(), or via gno.studio/connect :)\n// If you use Connect, make sure you're on the Portal Loop network, and you've navigated to the correct path!\nfunc RegisterUsername(username string) string {\n\tif username == \"\" {\n\t\tpanic(\"invalid username: \" + username)\n\t}\n\n\torigin := std.GetOrigCaller()\n\n\tfor _, entry := range partialEntries {\n\t\tif entry.txorigin == origin { // this will check if you're using the same address as when registering the raffle code ;)\n\t\t\tif entry.ghUsername != \"\" {\n\t\t\t\tpanic(\"you cannot register your username twice!\")\n\t\t\t}\n\n\t\t\tentry.ghUsername = username\n\t\t\tcompleteEntries = append(completeEntries, entry)\n\t\t\tnumReg += 1\n\t\t\treturn ufmt.Sprintf(\"successfully registered %s for address %s\", username, entry.txorigin)\n\t\t}\n\t}\n\n\tpanic(\"could not find entry for caller address; did you register your raffle code yet?\")\n}\n\n// Admin stuff\n\nfunc PickWinner1() string {\n\to.AssertCallerIsOwner()\n\twinner1 = pickWinner()\n\n\treturn winner1.ghUsername\n}\n\nfunc PickWinner2() string {\n\to.AssertCallerIsOwner()\n\twinner2 = pickWinner()\n\n\treturn winner2.ghUsername\n}\n\nfunc UploadCodeHashes(delimCodes string) {\n\to.AssertCallerIsOwner()\n\n\ttokens := strings.Split(delimCodes, \",\")\n\n\tif len(tokens) != amtOfCodes {\n\t\tpanic(ufmt.Sprintf(\"invalid amount of codes; wanted %d got %d\", amtOfCodes, len(tokens)))\n\t}\n\n\tcopy(codeHashes, tokens)\n}\n\nfunc UploadRandomness(x, y uint64) {\n\to.AssertCallerIsOwner()\n\n\trandSource = rand.New(rand.NewPCG(x, y))\n}\n\n// Rendering\n\nfunc Render(_ string) string {\n\toutput := \"# Raffle - GopherCon US 2024\\n\\n\"\n\n\toutput += renderStats()\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += renderWinners()\n\t}\n\n\toutput += RenderGuide()\n\n\treturn output\n}\n\nfunc renderStats() string {\n\toutput := \"\"\n\n\toutput += \"### Raffle Stats\\n\\n\"\n\n\toutput += `\u003cdiv class=\"columns-3\"\u003e`\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest codes\n\toutput += renderLatestCodesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest codes\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Latest usernames\n\toutput += renderLatestUsernamesWidget(5)\n\toutput += `\u003c/div\u003e` // close Latest usernames\n\n\toutput += `\u003cdiv class=\"column\"\u003e` // Chances\n\toutput += renderChances()\n\toutput += `\u003c/div\u003e` // close Chances\n\n\toutput += `\u003c/div\u003e` // close columns-3\n\n\toutput += \"\\n\\n\"\n\toutput += \"---\" // close section\n\n\toutput += \"\\n\"\n\n\treturn output\n}\n\nfunc renderChances() string {\n\toutput := \"\\n\\n#### Chances\\n\\n\"\n\n\toutput += ufmt.Sprintf(\"- Users in the raffle: %d\\n\\n\", numReg)\n\n\tif numReg \u003e 0 {\n\t\toutput += ufmt.Sprintf(\"- Chance of winning: 2:%d\\n\\n\", numReg)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestCodesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest codes\\n\\n\"\n\tpeNum := len(partialEntries)\n\n\tif peNum == 0 {\n\t\toutput += \"No codes registered yet.\"\n\t\treturn output\n\t}\n\n\tif peNum \u003c amt {\n\t\tamt = peNum\n\t}\n\n\tfor i := peNum - 1; i \u003e= peNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", partialEntries[i].raffleCode)\n\t}\n\n\treturn output\n}\n\nfunc renderLatestUsernamesWidget(amt int) string {\n\toutput := \"\\n\\n#### Latest usernames\\n\\n\"\n\tceNum := len(completeEntries)\n\n\tif winner1 != nil || winner2 != nil {\n\t\toutput += \"Winners are chosen!\"\n\t\treturn output\n\t}\n\n\tif ceNum == 0 {\n\t\toutput += \"No usernames registered yet.\"\n\t\treturn output\n\t}\n\n\tif ceNum \u003c amt {\n\t\tamt = ceNum\n\t}\n\n\tfor i := ceNum - 1; i \u003e= ceNum-amt; i-- {\n\t\toutput += ufmt.Sprintf(\"- `%s`\\n\\n\", completeEntries[i].ghUsername)\n\t}\n\n\treturn output\n}\n\nfunc renderWinners() string {\n\toutput := \"\\n\\n# Winners\\n\\n\"\n\n\tif winner1 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 1: `@%s`\\n\\n\", winner1.ghUsername)\n\t}\n\n\tif winner2 != nil {\n\t\toutput += ufmt.Sprintf(\"### Winner 2: `@%s`\\n\\n\", winner2.ghUsername)\n\t}\n\n\toutput += \"## Congratulations! Come to the booth and show us your GitHub account!\\n\\n\"\n\n\toutput += \"---\\n\\n\"\n\n\treturn output\n}\n\n// Helpers\n\nfunc (entry *EntryData) String() string {\n\treturn ufmt.Sprintf(\"Address: %s\\nRealm Path: %s\\nCode: %s\\nHash: %s\\nGitHub username: %s\\n\",\n\t\tentry.txorigin.String(),\n\t\tentry.caller.PkgPath(),\n\t\tentry.raffleCode,\n\t\tentry.codeHash,\n\t\tentry.ghUsername,\n\t)\n}\n\nfunc pickWinner() *EntryData {\n\tif len(completeEntries) == 0 {\n\t\tpanic(\"No complete entries yet!\")\n\t}\n\tif randSource == nil {\n\t\tpanic(\"No randomness source yet!\")\n\t}\n\n\tr := rand.New(randSource)\n\twinnerIndex := r.IntN(len(completeEntries))\n\twinner := completeEntries[winnerIndex]\n\n\t// remove winner from entry list\n\tcompleteEntries = append(completeEntries[:winnerIndex], completeEntries[winnerIndex+1:]...)\n\n\treturn winner\n}\n\nfunc CheckHashUpload() int {\n\treturn len(codeHashes)\n}\n\nfunc originExists(origin std.Address) bool {\n\tfor _, e := range partialEntries {\n\t\tif e.txorigin == origin {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"VosAGwkNFdXBeDPuk0KgJlt8qoPM+mjth9JftNFKy9EAcKmzM/SD2q7Wjq0VHSiyk17f4fivvpF1+ZTuGRrPxg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477881"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hxgta0d4zkl49n9zvyylgjhf78m00qzp629p5p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"SaNxRLgplHjclhj13ZP7jdIYOztMvH7+XyCZN5o49E0c8UnjqC9AqPNQOAOroe9bVnnJyO2nA/JkMfL1aKLrUg=="}],"memo":""},"blockNum":"477883"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1gr72qp3muavsvwq5jg205c0e30ltmltpj60pwp","package":{"Name":"hello","Path":"gno.land/r/raffle/hello","Files":[{"Name":"package.gno","Body":"package hello\nimport (\n  \"gno.land/r/gc24/raffle\"\n)\nfunc init(){\n  raffle.RegisterCode(\"duL6EeAcBx\")\n}\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6YQFkPIgQXSpaW3G/sqF45d/xW1aMipi0SHXdWvMg/D"},"signature":"9DdNZ2Hn83TNZ+gIHjWuvjGXHEv3vnvqODfixnPrJRx6LbYnAFkx5uxJFWX0J/ypt1AaNmG9lv0uxhqyLQ8MJw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477885"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g16693l5rta8ptsae7yz60zu0z8ksxps9lxl8u99","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"PqLE1nHu45/6dKJYwvTJ02mPZXltSvQSX6zMBS9Zyc4uXhU7S+0WMvV2JTrtqG/UHhd52xuCiHFRJ4KcjCyGHw=="}],"memo":""},"blockNum":"477887"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g16693l5rta8ptsae7yz60zu0z8ksxps9lxl8u99","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"ggGe6qdVn+rJIDq9m6kX2MAg5fytFk4ril7BA3oRIApkkrZyv2d2fIPxQSQ95HU7EXvo0a44hiGOgruZVV4izg=="}],"memo":""},"blockNum":"477889"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1gr72qp3muavsvwq5jg205c0e30ltmltpj60pwp","package":{"Name":"raffle","Path":"gno.land/r/tliu523/raffle","Files":[{"Name":"package.gno","Body":"package hello\nimport (\n  \"gno.land/r/gc24/raffle\"\n)\nfunc init(){\n  raffle.RegisterCode(\"duL6EeAcBx\")\n}\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6YQFkPIgQXSpaW3G/sqF45d/xW1aMipi0SHXdWvMg/D"},"signature":"lgrTzDd3H9TcX5rRAPuvgVtX1nouqioDteKKvnhlJmF9qso0EMOad5XXQ6iYfTk5YwQpJQNFSL2Jh51/3sEkDg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477891"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1gr72qp3muavsvwq5jg205c0e30ltmltpj60pwp","package":{"Name":"raffle","Path":"gno.land/r/tliu523/raffle","Files":[{"Name":"package.gno","Body":"package hello\nimport (\n  \"gno.land/r/gc24/raffle\"\n)\nfunc init(){\n  raffle.RegisterCode(\"duL6EeAcBx\")\n}\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6YQFkPIgQXSpaW3G/sqF45d/xW1aMipi0SHXdWvMg/D"},"signature":"U3UyV02fUMbWEXPpp3H5aUjycVCll6bNqTfSVE6U8L4+nvhCgi6Bx+bSRKuiShxLmctRrJTf82UxNJPGVqUPtQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477893"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1gr72qp3muavsvwq5jg205c0e30ltmltpj60pwp","package":{"Name":"raffle","Path":"gno.land/r/gc24/tliu523/raffle","Files":[{"Name":"package.gno","Body":"package hello\nimport (\n  \"gno.land/r/gc24/raffle\"\n)\nfunc init(){\n  raffle.RegisterCode(\"duL6EeAcBx\")\n}\nfunc Render(path string) string {\n  return \"Hello World!\"\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A6YQFkPIgQXSpaW3G/sqF45d/xW1aMipi0SHXdWvMg/D"},"signature":"hWqnsio2Dgad1B7N2rf1tAKeK1TcKRdY+yNJNnNB/pI3H0i/rjMBJxpBALXUCmum4np0qeqIKregP/LMcQ2z8Q=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477895"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g16693l5rta8ptsae7yz60zu0z8ksxps9lxl8u99","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"kGPvDQ1nYzhrzK0Ld9eWdQ+CFyS/EcJSBqpd0RwrZsp2H630/DqwKOB34CJHb+KkVIYmRNiNSegMt7tkOA0klQ=="}],"memo":""},"blockNum":"477896"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g16693l5rta8ptsae7yz60zu0z8ksxps9lxl8u99","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"nL2MwxXKAMysTjCE9B7HtyGIYt95wctTgLLaQ0XfhtlRaKPrvpoYHHuPaXTZMYD1zUApnP7ajT3BJ/SQJTwhrA=="}],"memo":""},"blockNum":"477898"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yfwv6gyujajnsewyt5j4q59fq5w42nzw2vltzz","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"Y4qNck4nttWkSxm82cA98xQwcVlosctxpd4/Qq3qYJc/U5ijUL14rCz8TPz5jKhI7OwwzXNfvBARC80NueG7aA=="}],"memo":""},"blockNum":"477899"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1gr72qp3muavsvwq5jg205c0e30ltmltpj60pwp","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"pgpM0R+Ul1+M/REtO8wAyhS/dJYqRw92ZP+vV5qYR2pOQO3ixP+AhFa75QN3QU7kO7GRhYUV4zZzGLC49c1CmA=="}],"memo":""},"blockNum":"477901"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1gr72qp3muavsvwq5jg205c0e30ltmltpj60pwp","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"oCuqqkJoeq3o9eMRhO4hUxAHY28rsoUmbsbFT28/1JQZLtORILUpbwUY5ay5aa4CK6SnAd5lplLCvESq1cNTbA=="}],"memo":""},"blockNum":"477903"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1axvq7czeyp8z79ncn48e4cyjl68mqczcrz5wps","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"oZaVKzCEdhXy3RnFMcP8Ehm0QTbZwmuuIjhxOtwcBB9PKr3ENJE6tTDH3uTEMc+hY2oA8PIFCI5vtKzhZNTFNQ=="}],"memo":""},"blockNum":"477905"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yfwv6gyujajnsewyt5j4q59fq5w42nzw2vltzz","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"V43G4MV2Bp4IN4a9PmQC0ps2q4Co2Ud4ACyys2P90aMnLYHGl4JTdUCReXb6yJ8ILWDnn0fG1/yv4bnG4aKHkQ=="}],"memo":""},"blockNum":"477907"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1gr72qp3muavsvwq5jg205c0e30ltmltpj60pwp","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"Yw49tMDaNF8QkHpCgkCumjVyoJAbD//xbClCl+CXdtIEvWpbR+sc+U+T0nvKLEWpVSFoPm5fnilXiCHnzpKQhw=="}],"memo":""},"blockNum":"477909"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1hxgta0d4zkl49n9zvyylgjhf78m00qzp629p5p","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"MX5NfTXah/duLIn17TREkmbFlNGPiUI1xZjKldrZpkE8rRlMWkbqvr3Cqdqb+nOKyaPEzEwOZUHmyKlWgWyQqg=="}],"memo":""},"blockNum":"477911"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1egxdnzrmhva4wcx2celjwk0a25gf6xjrrqkzwg","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"E4l6K3b9KIAgupkX7dbnfayjUCjCQHWQwLiNI/l2nbpon+BPSqLVnF2YvOfutcudVzPvTycADGa3h/JuEdHylw=="}],"memo":""},"blockNum":"477913"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1egxdnzrmhva4wcx2celjwk0a25gf6xjrrqkzwg","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"SlMGpjBYtO1nCUe1hiQNG7KHXmMulnQ/2ZH8B5pkt94DqSnnHvmgV562F0OuTZbUdLwBkXTqDIs2p3qHGYdUew=="}],"memo":""},"blockNum":"477915"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1axvq7czeyp8z79ncn48e4cyjl68mqczcrz5wps","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"XSVamIJzgWHAhyBh94TX8Tca3d9xfv9mlC0E2XQLtU9kFEHxkrpl9lEjEMQ+xBYpP5gd31te9IA33F/jskXJrQ=="}],"memo":""},"blockNum":"477917"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1fjnx2elgpac3fwec30369tyctagr36eh560csc","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"d6gxQ4S9u0TE1f/lgl4KLA55TpPucUaSCTRUx+Yfwvgffq2qtRvpPY2ND7zm+ogooPMZ0CXtekVCvjKdgQP/DQ=="}],"memo":""},"blockNum":"477919"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1gr72qp3muavsvwq5jg205c0e30ltmltpj60pwp","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"zCapAC4kslMcX1VHFdGSB8fVMY9+4/Yt2mtGVlBfhmhPQgRfrzVedXFo5dNBvZxkJuiBSGCPLAF2CMoNy5hTeA=="}],"memo":""},"blockNum":"477921"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1gr72qp3muavsvwq5jg205c0e30ltmltpj60pwp","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"cZilr54dET+qgwFWtFyq+geGh3f4Iw8X75PLnWKHt69KXaUhPH8XrRBBcFJryOeBKzNY1VH1H4mbtgonffJwxA=="}],"memo":""},"blockNum":"477923"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1gr72qp3muavsvwq5jg205c0e30ltmltpj60pwp","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"aTaGarXCm210h8Lu76Vjp098kz6d8LasOgn3C9j+7mRaLE8USEUHa5OHMSsFR2bB7uH3vVPWVBweceKPHtZEUA=="}],"memo":""},"blockNum":"477925"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1gr72qp3muavsvwq5jg205c0e30ltmltpj60pwp","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"Ni242ztIaTbwLoVbYM10i67cZovtScK3NbwI0112aHsV3zdt9jejteu9b8PbeoE2ny4q9M02dW5Oq0vrKs5wWw=="}],"memo":""},"blockNum":"477927"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1fjnx2elgpac3fwec30369tyctagr36eh560csc","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"CMNSe0ToJgcaHy2ws+G21E0Dz2VaYrZUVJzzlTjojw1jJqi2zNPO6uijQ/oIpp8K9Ktt9kHnyKKBxVFtVW0GjQ=="}],"memo":""},"blockNum":"477929"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1gr72qp3muavsvwq5jg205c0e30ltmltpj60pwp","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"wJ2v9mYHDSDCaWdkmtFiaVo8wrPyJAJ2yRqiDZptC2dL5KO3LZx2ABdpyzbgNQFCyARtoAh1xtlASGMzxXx1Lw=="}],"memo":""},"blockNum":"477931"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1axvq7czeyp8z79ncn48e4cyjl68mqczcrz5wps","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"JA3HzzYnNJucr+AYOlFw04arb381ZUlyrBGP6ajo7Pp0J5u1ty3X8JH2riNkguAP/fZWeEa528eI8zcHEl8Buw=="}],"memo":""},"blockNum":"477933"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1axvq7czeyp8z79ncn48e4cyjl68mqczcrz5wps","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"pcjBLTiKOWnfMNarniWnFXl8ELBnyQ/VzyRvmgvhuv1VPAhK0nNewlZQAd5LT6qraCPXIIONNgQ9TtT5NXG1hA=="}],"memo":""},"blockNum":"477935"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1egxdnzrmhva4wcx2celjwk0a25gf6xjrrqkzwg","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"pXLNyMJqXnmLV7nnqaFAQD946b1mm30B55wmO1QJNLQOmvhh8W+eiCYIDZSDFJjm57lBwJBJVP1TNUbbe4c5Ew=="}],"memo":""},"blockNum":"477937"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1egxdnzrmhva4wcx2celjwk0a25gf6xjrrqkzwg","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"ryZG5HePIOQ0vUjkIhJVCQZiRAy0syjF2gP/DoGea5xMc6xLTSo8u72tggKmmjttSh8A1f6fkYl/YeJx9mNSlQ=="}],"memo":""},"blockNum":"477939"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yfwv6gyujajnsewyt5j4q59fq5w42nzw2vltzz","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"WJN6zcYLOAk7YnN3N78D4gHOWUKab3nxsnpVoniSADQ68HW9FEfY7XAdU0SS978og09WbJW27/jEfFT966JPmQ=="}],"memo":""},"blockNum":"477942"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1fjnx2elgpac3fwec30369tyctagr36eh560csc","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"HsxJnjTuCcQ4EIKWawGrGzHxhpbLssVAuObInKEB2P5uCGO3ztC+rlRkrvUIjoS+o0jjEQ55TTsEmThu6VVMSg=="}],"memo":""},"blockNum":"477943"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1egxdnzrmhva4wcx2celjwk0a25gf6xjrrqkzwg","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"uL3gxN9D9hkUWhpNZCATphC2hsvQJLcJtpMkmB15z613nUGbw1ERFoKklsQm4R4EOcd5IBe3cLVt1+vmKG2w2Q=="}],"memo":""},"blockNum":"477945"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1egxdnzrmhva4wcx2celjwk0a25gf6xjrrqkzwg","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"MIeP7FMVYkPgz7IHTmC8To82VaJoqp55JwDB4HsSq+9jH3An2O7x0guEPXOUy9XGlkUrX8lXTZaFsz1ceySo/Q=="}],"memo":""},"blockNum":"477947"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1axvq7czeyp8z79ncn48e4cyjl68mqczcrz5wps","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"53e893Y7f8oAUB6ffIVVJ9rwQ54OCAaF4dKTcRipPDRZzxkCPI+ATAlNIEsHO0W7+/v8MHskYGTVKLEjDOqXeg=="}],"memo":""},"blockNum":"477949"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1fjnx2elgpac3fwec30369tyctagr36eh560csc","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"X0Iga7neb7trQCX0zVGwP7/Czwmy9mkyLNoR7wb5TmYQHieNqSU5xaXz4dqCMGliZBmaHM46xjDij/nrT7gZ4w=="}],"memo":""},"blockNum":"477951"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1egxdnzrmhva4wcx2celjwk0a25gf6xjrrqkzwg","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"q9Bz6HgfxuZNAu/M34CVYP9sTptC9+MWSsBgf9qp+Wp/f8wwWQGHAjo3PCUHsgboOfJGgzs8P+goWxHBdrDr/g=="}],"memo":""},"blockNum":"477953"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1egxdnzrmhva4wcx2celjwk0a25gf6xjrrqkzwg","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"cKV6tEiyZ2UXWsJ4mvPZ040Uh+yjuEk/IZZAiDMDxMlecf+L+M1o6Tsvi4TcC2sFJ4GlHbTKmPNHjfX2MBXlBw=="}],"memo":""},"blockNum":"477955"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1axvq7czeyp8z79ncn48e4cyjl68mqczcrz5wps","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"Bx0rr06T0EJ076+tlwz84XpavdYbf81pHtsmxhJf5mU+MXDaVSIk7AGcG47m1s3A0xDoen8Q2Xhq1Khhm79vHw=="}],"memo":""},"blockNum":"477958"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1f5zd97wpz579jxqewpl2zmwwerzmkmu4h2mgky","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"9HC+TjsFwRjH8pTVwYYTlqFASujdyKhA5qC2D4EdnNFQ411PJTh26tX2Pis5wV6k4uGDYSEo6bjrHHJtjq9Yvw=="}],"memo":""},"blockNum":"477962"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1egxdnzrmhva4wcx2celjwk0a25gf6xjrrqkzwg","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"BE/xVwKn9bmFoseXk4NZahztSrfXZPg4gdpD3KSbVeBMaSZ1ytG9bF6wmNaUM2TosLHLjrSiZWMAMYtc1IlIlA=="}],"memo":""},"blockNum":"477964"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g168ejjw5f9rmyaxp947xjy0y07508n2d5vzlwf4","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"II/3C4lLwmogP+Szg8TK/ipHAYn+5erYpRhsRG2iU+o98+nynrtBY6SjsqFfq05BJEnnLqkv0XrZdv+NXtzuOg=="}],"memo":""},"blockNum":"477968"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g168ejjw5f9rmyaxp947xjy0y07508n2d5vzlwf4","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"u24LGz0lHo5sTpOcF7Ig2aWz+dchj1S8sSecjs4cOWUdR5IwSv63ryrxnIrXmY/a9Vf2wMXudgs/atgnSrLCVA=="}],"memo":""},"blockNum":"477970"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1axvq7czeyp8z79ncn48e4cyjl68mqczcrz5wps","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"4l0M0Tvveke2D9RBGFDBJiW47yS2rm1z3Gf/JcOZ+NZp2V8PCbZqpf015iOYim1trG/NUAiitnHTh/B0/b33nA=="}],"memo":""},"blockNum":"477972"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1egxdnzrmhva4wcx2celjwk0a25gf6xjrrqkzwg","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"p2erd/lYDBlCgF+PrPRMBjRWzojqsQNFjV9WGqZ27FM56p75o0Io6XMVyfyKt2FPXSpux2TTVe8nJ3byGvcDEQ=="}],"memo":""},"blockNum":"477974"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1egxdnzrmhva4wcx2celjwk0a25gf6xjrrqkzwg","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"JNkkTiMQiAStGTx5KYK3Cmtct3flKyEkxi5WM3lVGdBQwSK6KU9vnwYTMELoxj824RdDyyOmFXM5jaxgFaqKnw=="}],"memo":""},"blockNum":"477976"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1axvq7czeyp8z79ncn48e4cyjl68mqczcrz5wps","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"vit4yguya2HQbyInABOZudgf26uhPwXNWxzdqi70ktEcHFwvMSmmEi1zKVMJWuYZYsc++Mn+GH0gO9PQW7Z1Tw=="}],"memo":""},"blockNum":"477977"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1egxdnzrmhva4wcx2celjwk0a25gf6xjrrqkzwg","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"qHnhIZX7iiaHt+CMKyJDso5fdjzaJnVxHiDxPvVjo6EP5Tq59VKDLwAaahc9J4B8XV2Eh3MaKETAh+wiLzGR/Q=="}],"memo":""},"blockNum":"477979"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1axvq7czeyp8z79ncn48e4cyjl68mqczcrz5wps","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"5Hye0J0KeHpGe5Sbr13KC1fLJfW71ALm2c1JGuHa8dM/SvP26223P35fOjiR/cKP6q9fEW528nxFWHat+KYGlg=="}],"memo":""},"blockNum":"477982"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1f5zd97wpz579jxqewpl2zmwwerzmkmu4h2mgky","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"KifM5QXrtR83Cp2RBfxeD2s5LjRqVW5rvFyrG3T3jzpvAwfIxlMEF33rBPg9TtVadifPy7UA3T3Z8G3WB25zxQ=="}],"memo":""},"blockNum":"477988"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1f5zd97wpz579jxqewpl2zmwwerzmkmu4h2mgky","package":{"Name":"winner","Path":"gno.land/r/everestkc/winner","Files":[{"Name":"package.gno","Body":"package raffle\n\nimport (\n\t\"gno.land/r/gc24/raffle\"\n)\n\nfunc main() {\n\t// Replace 'YourRaffleCodeHere' with your actual raffle code.\n\traffle.RegisterCode(\"q3tqy6owAX\")\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq4a15bMgXUVX4FcOsGb5BAjs+5BvCurmrtVDr+g9VJc"},"signature":"+tHC6nfPgK7Z6BuuX+YN5o20EZe9GcAbW/Yn1pfysJYMQALWQEEBn/wvQYImj0p83++GVZA5xHwMzwHaeKp3fA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477990"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1f5zd97wpz579jxqewpl2zmwwerzmkmu4h2mgky","package":{"Name":"raffle","Path":"gno.land/r/everestkc/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nimport (\n\t\"gno.land/r/gc24/raffle\"\n)\n\nfunc main() {\n\t// Replace 'YourRaffleCodeHere' with your actual raffle code.\n\traffle.RegisterCode(\"q3tqy6owAX\")\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq4a15bMgXUVX4FcOsGb5BAjs+5BvCurmrtVDr+g9VJc"},"signature":"4sCpePb5fXJS7SeqhtRuLZZhvoy1Ae3S+WcaJ0fqhlltgtHw2e4eTNlvjdj7s/xLHZOBHE42RstQnKFR+vJ39w=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477992"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1f5zd97wpz579jxqewpl2zmwwerzmkmu4h2mgky","package":{"Name":"winner","Path":"gno.land/r/everestkc/winner","Files":[{"Name":"package.gno","Body":"package winner\n\nimport (\n\t\"gno.land/r/gc24/raffle\"\n)\n\nfunc main() {\n\t// Replace 'YourRaffleCodeHere' with your actual raffle code.\n\traffle.RegisterCode(\"q3tqy6owAX\")\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq4a15bMgXUVX4FcOsGb5BAjs+5BvCurmrtVDr+g9VJc"},"signature":"SWX5pIyTl2XEyrDWVQxPa9zNdQ+iAUYNwwOLIfRjpYAc0dISnRP+bb0vN50XtNMoIJs1Z8Gts+tGxI2iiz8XFw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"477996"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1axvq7czeyp8z79ncn48e4cyjl68mqczcrz5wps","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"LrZ8W8rRoPRbRc/adTZExZ0zVk6ySlIOUg7/HThThodUZ+Cw64OlR529UiqJ0H+kahmxRzz2jZiFR9PReHPiEg=="}],"memo":""},"blockNum":"478001"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1f5zd97wpz579jxqewpl2zmwwerzmkmu4h2mgky","package":{"Name":"winner","Path":"gno.land/r/everestkc/winner","Files":[{"Name":"package.gno","Body":"package winner\n\nimport (\n\t\"gno.land/r/gc24/raffle/\"\n)\n\nfunc main() {\n\t// Replace 'YourRaffleCodeHere' with your actual raffle code.\n\traffle.RegisterCode(\"q3tqy6owAX\")\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq4a15bMgXUVX4FcOsGb5BAjs+5BvCurmrtVDr+g9VJc"},"signature":"fq0JbFj/rhvtZ9XIaghsGLUi3zcQHh1DpFrcPzcNcA02ttu8EO3VeSP9a8puVrPty34teZJyhdH0lNWAKYwRfA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478003"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1axvq7czeyp8z79ncn48e4cyjl68mqczcrz5wps","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"zHziPtlv9S52Ppf2Y36lPzWDtnz9wZQ23AsRU5jYD8o4wMKlQ+A/yKqmdg5V8z9sExI0ZzzzrqY7+wSzYoDFuQ=="}],"memo":""},"blockNum":"478005"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"hello","Path":"gno.land/r/lolz/hello","Files":[{"Name":"package.gno","Body":"package hello\n\nfunc Render(path string) string {\n  return \"Just for LOLz\"\n}\n\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"MJ09k+udpewAJsDzMzjDIJkVND90yW1r/8VVHejAt18NYu9uLOGtIdpU4qJu40l2FwqPj3WS6V4VLTnKvIxyLg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478009"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"hello","Path":"gno.land/r/lolz/hello","Files":[{"Name":"package.gno","Body":"package hello\npackage raffle\n\nvar rc := \"B8VyUGLuMw\"\nvar ru := \"JustInDevelopment\"\n\n\nfunc Render(path string) string {\n  return \"Just for Raffle and LOLz\"\n}\n\nfunc init(rc)\nfunc RegisterUsername(ru)\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"O2kiNPdxNFE1OV3xhQD0Uoo9t+Eru0v2gsGyoRpxkF1FldB78HyjDXr82DhtHPf0c8rPiDh6tDak+scPmbuJHQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478032"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"hello","Path":"gno.land/r/lolz2/hello","Files":[{"Name":"package.gno","Body":"package hello\npackage raffle\n\nvar rc := \"B8VyUGLuMw\"\nvar ru := \"JustInDevelopment\"\n\n\nfunc Render(path string) string {\n  return \"Just for Raffle and LOLz\"\n}\n\nfunc init(rc)\nfunc RegisterUsername(ru)\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"Cm1H0wUswNgFlv6whhu4ziHpK9yfYE2GmlcpHspTq3h8iSJY/82QMGQYOm/KES6UwVC7r21LcMo+huaj0BpmgQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478034"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1f5zd97wpz579jxqewpl2zmwwerzmkmu4h2mgky","package":{"Name":"raffle","Path":"gno.land/r/everestkc/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nimport (\n\t\"gno.land/r/gc24/raffle\"\n)\n\nfunc main() {\n\t// Replace 'YourRaffleCodeHere' with your actual raffle code.\n\traffle.RegisterCode(\"q3tqy6owAX\")\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq4a15bMgXUVX4FcOsGb5BAjs+5BvCurmrtVDr+g9VJc"},"signature":"wbP9htSDn5SX1SEWTMs6NaC7Ac4hTGtMZZG1iYvJqlA6uDPDPRrYOm2RsumPjDJPDu+KQ7AAPzKzGIYuAuv9nw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478036"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1gfnvafaewcrqzhl9j02wthsg4t7fu37pu6mpat","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"5KVo4TuFrpk8JEr/qIvlxjOX/e66GU3sWc8onDMqu4BtGO49yN2Qhsk0Ttq+Ie+Uxt2BZ8ankkecU1cGdhRUNw=="}],"memo":""},"blockNum":"478039"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1f5zd97wpz579jxqewpl2zmwwerzmkmu4h2mgky","package":{"Name":"raffle","Path":"gno.land/r/everestkc/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nimport (\n    \"gno.land/r/gc24/raffle\"\n)\n\nfunc init() {\n    // Replace \"YOUR_RAFFLE_CODE\" with your actual raffle code\n    raffle.RegisterCode(\"q3tqy6owAX\")\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"Aq4a15bMgXUVX4FcOsGb5BAjs+5BvCurmrtVDr+g9VJc"},"signature":"x0E75bU781+svoS5VwCuhwbQ5LcH0cT4kXOiY2gDaAMqU37PN7G6+nq1qP9axgEjnbr8jT4HnxH24JVPHkzEcw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478048"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1f5zd97wpz579jxqewpl2zmwwerzmkmu4h2mgky","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"eo2pMdUZEoxUrnZzNRabKtMmgg4u7jyG6XCqTGqE9kJB+mretITHpUlpSEFZRzi5tXHzgHpDEIq/fs4w0mrSKA=="}],"memo":""},"blockNum":"478050"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1f5zd97wpz579jxqewpl2zmwwerzmkmu4h2mgky","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"zfv7JwYPZlU62gV1H3q5U4ubZl9eh56vtkfpzqm93sowTpOQrM5oSl0wrwqSFK9Te3RC3SxCF/mtbbW7Ictv8g=="}],"memo":""},"blockNum":"478054"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1f5zd97wpz579jxqewpl2zmwwerzmkmu4h2mgky","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"4ciP+wF+rCqv/7EcPQNdbSSyBDtNid0oo/RsKjbgwdVAHD53x6BwuqjoF+8n41UPZABq1lSTMTB04bFhtIKm0A=="}],"memo":""},"blockNum":"478056"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1f5zd97wpz579jxqewpl2zmwwerzmkmu4h2mgky","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"JemM4KbSmOMh1e8A8gc9E3txchnbk6ZMvrjnE3tMWaUhGolh2Vx4mmBLXlU8kKnMVgZEAqDjjGSrR/LWFnALtg=="}],"memo":""},"blockNum":"478058"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1f5zd97wpz579jxqewpl2zmwwerzmkmu4h2mgky","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"r+oGiRKtkYyrftsbAxC+rhtJ+pkje2M3uVycMGeAYN98O54ZYcn77I+x8S66dujDhLZXLoQvVq2+f5XaHrBKug=="}],"memo":""},"blockNum":"478061"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1f5zd97wpz579jxqewpl2zmwwerzmkmu4h2mgky","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"33og2Tr5DeP5mSkx32tNwmryI2lirN+SX3D4KyiyxjRPEVvmNzHCmwJEs45Zsn5zTO7oyeQlYjPKf7wa5yHAoQ=="}],"memo":""},"blockNum":"478063"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1n93replyp2pl37qfzkh854eps2z0ar7t0rzzyj","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"FEKYpnXRD1VCK3IozM6IxPGdW/PWlK8lD+V+3GobVaMKXxlMm3WY+7bH2TMNhi+OkRxrrfXPem0aAz7Cy4NwUA=="}],"memo":""},"blockNum":"478065"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1n93replyp2pl37qfzkh854eps2z0ar7t0rzzyj","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"m1LN0YUsj7XqEn5kFIaWbwA39PBukvFkC6GWE+bALulI2hjXEWGb0adCsFhRd2Nf1F3vUdpg16K3m/qVtzbkuw=="}],"memo":""},"blockNum":"478067"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1n93replyp2pl37qfzkh854eps2z0ar7t0rzzyj","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"8dPl1tiDgFnUQTtVrqzHDWWo1rnyCXJGWlImMOUlEok+sh0uV3xIOOvqysIibIebqrm9vE2gCUW3ONWAVoXS4g=="}],"memo":""},"blockNum":"478069"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1n93replyp2pl37qfzkh854eps2z0ar7t0rzzyj","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"5dA6sWhr6IVWmyL02aWekPFw86892UJbPMUA7xkvaAAWbmQezXcNOG350e0ZFDDderc0OWCOGuahoC0c3qcgig=="}],"memo":""},"blockNum":"478071"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1f5zd97wpz579jxqewpl2zmwwerzmkmu4h2mgky","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"X8J3P1u/H+0rmSNbjfxKUysSZrbg8eCBezr2ImyRuY0eoHmui+gZ1ReQeaCJyrEDDrEArkMqT09aKfY+5wTAtA=="}],"memo":""},"blockNum":"478074"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1lhxvmjz6xzd0vwnftpz4xr4u4lg76ngux8wux9","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"lBvmqEAq6MRP6uevyUGljFlfDt5SQIlVPVampRGPd/QVnBTUXCNJXm39yhYoJrS6Rkd+AxD6rfEJ0j+sSa/j0Q=="}],"memo":""},"blockNum":"478076"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lhxvmjz6xzd0vwnftpz4xr4u4lg76ngux8wux9","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"DFLfCh3JbY4/pfHL6BD96fw0pzd2FFF+Ly7nXR59rix0RpGisX0oWOcXcF9So1D1WRIY9tdlSDDC2OzVdmqSkQ=="}],"memo":""},"blockNum":"478079"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lhxvmjz6xzd0vwnftpz4xr4u4lg76ngux8wux9","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"2ELyFyr4qVLmglIcd4jaznTuZl77w17ZoTfEzM1yyS4fkDvVOJ+sb3ZH4SmPaH6mv77lfFfd9Tz3SfWigZQ+rg=="}],"memo":""},"blockNum":"478081"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lhxvmjz6xzd0vwnftpz4xr4u4lg76ngux8wux9","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"UtrIxhRcIUwjxZE9eOTBh2lbCGaHxzuV2DXFGKlq3Sg5CK9DtKojDEtrAar9ZQQlkf6GEWjl3oAAV09oN4aKrw=="}],"memo":""},"blockNum":"478083"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lhxvmjz6xzd0vwnftpz4xr4u4lg76ngux8wux9","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"zMKAelb4quIHoMQYv0BbrVYGbC9ari6F42wEeIAZM8h/GjXz+ZDah/FkIzQPGITV2OXbmjfQnRKwBoL88pDhDA=="}],"memo":""},"blockNum":"478085"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lhxvmjz6xzd0vwnftpz4xr4u4lg76ngux8wux9","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"TVucrVxeWGfA1dqtLEPn0LrR0L0ZSWLadxcYVyl1omVwillEcVKpeqZCWQaHSVXqFtfwHDzwuQpX8cPM4E0SKg=="}],"memo":""},"blockNum":"478087"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lhxvmjz6xzd0vwnftpz4xr4u4lg76ngux8wux9","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"yzBYEjrJsGDS2EdGv/Pxy0EA4wRfShOm7Iv0PRMpSVBfjI5zXUN3m18sGzyP+kUDh3fmxCpi8qPNPB64DWmYmA=="}],"memo":""},"blockNum":"478089"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1n93replyp2pl37qfzkh854eps2z0ar7t0rzzyj","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"9PPDWNqKKIdgRQKDAEN05n3e4PZvnsppo4RZopebkiUMi5wUzB77/KQNd0YlgmTDAHPODsaN3cazWpQFslic/A=="}],"memo":""},"blockNum":"478091"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1n93replyp2pl37qfzkh854eps2z0ar7t0rzzyj","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"+lxHwXK/lwlM/sr/RybWgcuxlWll9o7viJm4DQIa6T1WuvWJVilVBoKlg9aD7kal5PtUll+ZOt/ig4lqf21qvQ=="}],"memo":""},"blockNum":"478093"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1n93replyp2pl37qfzkh854eps2z0ar7t0rzzyj","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"Ratn5AuHLRXPgG2Z2fUsoabukG8qgJUb4FcdvwxDZE4aAhD8ZVZjYuYWblY3eHfAzM/r9oIyGnJ6VqcIBDz/dA=="}],"memo":""},"blockNum":"478095"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1gfnvafaewcrqzhl9j02wthsg4t7fu37pu6mpat","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"b78UFSPGKfugFXpBg4qfS5yPcnw9VuAXtKf2LwgkjjhOxFwgjTn7mpbGriSP9AuYly6z6tf6R0BqEesLj+eqAw=="}],"memo":""},"blockNum":"478097"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lhxvmjz6xzd0vwnftpz4xr4u4lg76ngux8wux9","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"guJ/9fbuqO2cPeX1UaJQDv1Wt06k10dGcwyY0AnpB5MdPMcDppMyzt9Ya0xoOglpM6sQcIVkb39daxlH2wUqww=="}],"memo":""},"blockNum":"478099"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yfwv6gyujajnsewyt5j4q59fq5w42nzw2vltzz","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"/aCffTJv1nbm+bSaIsG0YM9/1MKdvQlZtUh6fJdd9sx+3/H1sz1P6nvfW78MYo87VcXZhLobzje0jatswFXH5Q=="}],"memo":""},"blockNum":"478101"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yfwv6gyujajnsewyt5j4q59fq5w42nzw2vltzz","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"vfmCCQvx/jvbTwkdp133ca0NvNAwoMG+6Ml3wDUhC8MlHmC1x1PjRH1U2Z9UzitMpqByKvNfGKl5U3O5TbIAzg=="}],"memo":""},"blockNum":"478103"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lhxvmjz6xzd0vwnftpz4xr4u4lg76ngux8wux9","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"pb/cCLdNlZpBv+4pZT9eCaBXQ/6095mdjYpwcosIUE8SOxUiX2A4592vh4UYrOSa/KKQ8bNzI8AVJMSuMkZErw=="}],"memo":""},"blockNum":"478104"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lhxvmjz6xzd0vwnftpz4xr4u4lg76ngux8wux9","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"JPeNBok8GMAUPsaD00kljIJBuQYcgoMINAChahIG9vt/xB4uwmeYby4dyns7PzUNBU6G/JkwXNexv/rTFIIZrw=="}],"memo":""},"blockNum":"478109"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lhxvmjz6xzd0vwnftpz4xr4u4lg76ngux8wux9","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"vzmJCp/RzeyZ24zFqkLQdLMAhAwEawgCvR5Bvxbf+Egxl4qFqQzPZfXUhv4he89EYYlzo0fKwHHPWhw/WfkuXA=="}],"memo":""},"blockNum":"478111"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lhxvmjz6xzd0vwnftpz4xr4u4lg76ngux8wux9","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"JhJ/airuONEEEJKGRcOkB50epCcHf5V30XOBtWWC1iZf6laTfKVNJqk3L+1XItZj07zxIf5ZNOH1GPvQukXfew=="}],"memo":""},"blockNum":"478113"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lhxvmjz6xzd0vwnftpz4xr4u4lg76ngux8wux9","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"pWIkWL/uYkMOFFRxSgQtkm/Z+6AUixNxufPCtRxShmsqEgUc5LguB/pkT8Cl7G3Q7W8Wjo9Y5bZi/qaeFv360g=="}],"memo":""},"blockNum":"478115"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lhxvmjz6xzd0vwnftpz4xr4u4lg76ngux8wux9","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"6fhJ0ca/+51y1G5ISVobPAq+cB5Ch0rquutBGJjQo9A/dKHWL0r5bj6eFsKZ9NYl/zE/46+qtvJczIf8XI1ZiA=="}],"memo":""},"blockNum":"478118"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1lhxvmjz6xzd0vwnftpz4xr4u4lg76ngux8wux9","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"4e7WGf66ToeH1g6nQpEiK+eiPSTKXOfeDX7zBTvp2MkGDFL9bHYfWASD6WwGpuy7VVr4LQ0noi3SGj4FsqXwWw=="}],"memo":""},"blockNum":"478120"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yfwv6gyujajnsewyt5j4q59fq5w42nzw2vltzz","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"cunvk2gpSkupBnSVmBhWv7VATUy5ni7Cb396uaIc+cANa7tBI2sTpe3HH0H2u+BU5AN2lpOzKmdBRpULNP3Wjg=="}],"memo":""},"blockNum":"478125"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"hello","Path":"gno.land/r/lolz2/hello","Files":[{"Name":"package.gno","Body":"package hello\npackage raffle\n\nfunc Render(path string) string {\n  return \"Just for Raffle and LOLz\"\n}\n\nfunc init(rc string) string{\n  return \"B8VyUGLuMw\"\n}\nfunc RegisterUsername(ru string){\n  return \"JustInDevelopment\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"VK0pezksWGZpAVY46GvjJM7rJ1+0BOL9af/jdlRj8HFoRjyJa9QEf3homHYFNOrpzrIyPFDpYJMmW3f2mQIvCg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478132"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"hello","Path":"gno.land/r/lolz2/hello","Files":[{"Name":"package.gno","Body":"package hello\npackage raffle\n\nfunc init(\nfunc RegisterCode(code string) string{\n  return \"B8VyUGLuMw\"\n}\nfunc RegisterUsername(ru string){\n  return \"JustInDevelopment\"\n})"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"wbdSzpw73DIw04o74K8Zjz5BrINvCKIo1HhQijzBGdlXwHwKiWKjHdte3EluD7egwkrPY5vZe3Y0pUZzhw45aQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478137"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"hello","Path":"gno.land/r/lolz2/hello","Files":[{"Name":"package.gno","Body":"package hello\npackage raffle\n\n\nfunc RegisterCode(code string) string{\n  return \"B8VyUGLuMw\"\n}\nfunc RegisterUsername(ru string){\n  return \"JustInDevelopment\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"LcwArRh9Cf8xbrAWRtQfH/k/dJeWW5nnAgCmYVcJyAQv77Ewn6T+1KDhx5WEbcxnU0JrDPLz68+Vo1Mm/uvyLg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478140"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"hello","Path":"gno.land/r/lolz2/hello","Files":[{"Name":"package.gno","Body":"package hello\npackage raffle\n\n\nfunc RegisterCode(code string) string{\n  return \"B8VyUGLuMw\"\n}\nfunc RegisterUsername(username string){\n  return \"JustInDevelopment\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"wzRnFotVd048z0gv0lL5D3N8ymo3GqlB6hDaEUBT83U14hBgHKqxG8UmCpVnWkrKdB9Y+SoUFzKpjqkj6vLR5A=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478145"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz2/raffle","Files":[{"Name":"package.gno","Body":"\nimport raffle\n\n\nfunc RegisterCode(code string) string{\n  return \"B8VyUGLuMw\"\n}\nfunc RegisterUsername(username string){\n  return \"JustInDevelopment\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"ukJTUHoJ6AbiHvhx7ZxRrHRekTXhAlUleJRnGsUrXAcpsem9pkL7+INZ1H1QaZQpWk8SFINh/YXGf/I3scKBEw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478148"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz2/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\n\nfunc RegisterCode(code string) string{\n  return \"B8VyUGLuMw\"\n}\nfunc RegisterUsername(username string){\n  return \"JustInDevelopment\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"R73Oa+Qntc4bcEIvKcR4e8QaV0m8FqSU/Q85mmaBrbA2SP5jYfMurSKElbgzx8OOnzqIyL1/5yXYSy7+aamOiA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478150"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz2/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\n\nfunc RegisterCode(code string) string{\n  return \"B8VyUGLuMw\"\n}\nfunc RegisterUsername(username string) string{\n  return \"JustInDevelopment\"\n}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"vO8xWOZem5DWh8akQiCvaZewd+xw08qcArJsTYyFtu0OojFvMsJSLWRCO8n4z9qeT6X3yal1O0rac0a7vTJ2Ng=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478153"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1stdnnh8hp0w43xlgansgtd83kj5h57szmx3k8z","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"O0P8n97hCtVD7s5mAnfR9chGXEj9ww+nlcQsROL62b8i76WvfMWXEH5a4vzUkIYS+dAl4m95upJPDUfUIsjW3w=="}],"memo":""},"blockNum":"478158"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1stdnnh8hp0w43xlgansgtd83kj5h57szmx3k8z","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"M/N9XN/Pl+Abue4xFtFsJtgWBndp4u3yqY52H0N1x9Rm5QMYQ15oLayNvh83OqrvouLs8mJcLlItfgF/PTMZkA=="}],"memo":""},"blockNum":"478166"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1stdnnh8hp0w43xlgansgtd83kj5h57szmx3k8z","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"poNxBBqu67gVBSRTZIuQ1zavnT6Qb7645FaIXaD1rLd8cbiO6M9L90e8sQrYVrhnEJgVPzjs0s3yHd+0FK11Lw=="}],"memo":""},"blockNum":"478169"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1stdnnh8hp0w43xlgansgtd83kj5h57szmx3k8z","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"iUoaEdzymJt1FqCQzQXkOWvUd8XPb1VCiUKQaa08ArU5Jqrsa5jcMjyapGpLDMlPCVZ2SvRUx7Jl/KvbHEWw7g=="}],"memo":""},"blockNum":"478172"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1stdnnh8hp0w43xlgansgtd83kj5h57szmx3k8z","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"qaWpkv8AF7SPd/JPRvw5h00Ls/KmuLQJF8jDxTVKVxUf6Zr/9aeNAbHy8W7MYRJLc0hH9QfJmIlwKLk1CCQV4Q=="}],"memo":""},"blockNum":"478174"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1stdnnh8hp0w43xlgansgtd83kj5h57szmx3k8z","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"OWPlHlxba2CgwrFZz07vzQi48O/EFBBO3TY9QJai+vFsbpQ0559cJtnnUW9u3+izCRD/+WwP88ExiaxnZA5Zqg=="}],"memo":""},"blockNum":"478178"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1yk7mnqsc4n0cdjemjwrluynjrsxfvhwva0e5wx","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"Yg5hGhkxPp6ZbPqS4IhqY4DR/kQyBIlbahWGQRiKbVkP9XWFwnN+uF0YCpk1cChYINTSMgGBV5w4rz8Ls5Bzmg=="}],"memo":""},"blockNum":"478193"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g18l9us6trqaljw39j94wzf5ftxmd9qqkvrxghd2","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"10000000ugnot"}],"fee":{"gas_wanted":"100000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AxjyQBsJI8CesbgwihvS/eQtYKoezyoA9P+FRlLAKRwg"},"signature":"QN8WzoZLBxXUTyk00sZevSI5u6Qerq+MFZ/YmqOv+kZOw2aXBE1EF7/G6BNTWGCsL3kei++cNuIJ9G5v1xp4Nw=="}],"memo":""},"blockNum":"478203"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz3/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nfunc init(\n\nfunc RegisterCode(code string) string{\n  return \"B8VyUGLuMw\"\n}\nfunc RegisterUsername(username string) string{\n  return \"JustInDevelopment\"\n}){}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"OD+7oJtQgZHmG+hAGVwlJrjffMsV4cPKsDrCyotHvb5XiFuJuOu27KMj1/7votU8Aa1ZZxaYV8QSNSsv1TGcPQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478208"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz3/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nfunc init(\n  func RegisterCode(code string) string{\n    return \"B8VyUGLuMw\"}\n  func RegisterUsername(username string) string{\n      return \"JustInDevelopment\"\n}){}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"zgh7v6bTDvGpaFDtBCmU8X99F0dya2/TU3pdkra6zNM+tVmApvBDMTGNuPmdev8wCDqL6cmzSuYBuetv/xlZBw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478213"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz3/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nfunc init(\n  func RegisterCode(code string) string{\n    return \"B8VyUGLuMw\"}\n  func RegisterUsername(username string) string{\n      return \"JustInDevelopment\"}){}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"pBnUY1l/8cmsXSC3Zm6iSIDGx8mrzqKXi9KCjIS28Q8hahq9gMfMG+b7QqE9b3QfnmT2KsgzRxkF5oBEWbbmDA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478216"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz3/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nfunc init(){\n  func RegisterCode(code string) string{\n    return \"B8VyUGLuMw\"}\n  func RegisterUsername(username string) string{\n      return \"JustInDevelopment\"})}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"0OapLDhqg3Q9CJyd04QH7tH9AVOLuioTKoTKpqxzQwYGlGNEeVBrXMbso2GjE9/7e+q/UgBZFLmBubz35UNXrA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478220"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz3/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nfunc init(){\n  func RegisterCode(code string) string{\n    return \"B8VyUGLuMw\"}\n  func RegisterUsername(username string) string{\n      return \"JustInDevelopment\"}}"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"P+lvy5NzOv66ZKZLna/S5b+YODqXxYz6pUGf4cPFMQUfmkPVcl1KBLpDeIV1spQiGa9L35g9KhB9f8GCqtbbNA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478222"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"TCin+xQgpvr77eNAxSDzpVKn8vYTeJyP7tV6bXrWjXEv5sxstDAHcYBwXfxHJUpX1oX0W+2+GSm3strgHrkpcg=="}],"memo":""},"blockNum":"478224"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"8vR/j4DTG8Xuwc6PpAf+EhXGCRLI8AIMTMqX17fBtX1MJK3Lx0EQYeIXAij/NWH5C4ipErxuqepemQ8s2lcLTA=="}],"memo":""},"blockNum":"478226"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz3/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nfunc init(){\n  \n  func RegisterCode(code string) string{\n      return \"B8VyUGLuMw\"}\n\n  func RegisterUsername(username string) string{\n      return \"JustInDevelopment\"}\n\n      }"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"bALxY/k0Fhc4TIdirdZ6pb+FYLl7yo1t/GJfVUY5ed8SNMudd1LM/cRlc5VvhhVopBtNQmyW98LzWHhmmXPjlQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478229"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"7JSzwZWPd77ObIa/VyzatbAAvEgUwb7Y47rsJiVDm4ougPfPfbuG0+/tnTcGRLrIXmhRPjoSSYo7rvRrnLYYlg=="}],"memo":""},"blockNum":"478231"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"kXulKRD5t31iufVCJ7mleTsKdtr1aCH4bTOUaaXltRd7oZyElDPDYkTpXvNSKHc5pSbHh1Ct58Kt6lnM5roGZw=="}],"memo":""},"blockNum":"478233"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yk7mnqsc4n0cdjemjwrluynjrsxfvhwva0e5wx","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"+9XMimlTOtMQydog3WjZnh1ky90rrAYHooPi+la4Rs1gtVvd5rnqbr/THGgF4oOpCF3qCjEs1/h2961vKNxpDQ=="}],"memo":""},"blockNum":"478236"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yk7mnqsc4n0cdjemjwrluynjrsxfvhwva0e5wx","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"UXEnerAh2vpqwv445TL83inN3Y2IKxnIdR3k1BfwmG9BqpgFu9MK2MDEihUdyt7HKhjk8APbHKqNNAyYUU0TZA=="}],"memo":""},"blockNum":"478238"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"A5UhI82latoZt0itkQlo5Aim/4VboOINDG7lXvlvzgo5Wjs+7gONNMvlWvSqRzpXjEdREcq7hVuO7RWiGaoVsw=="}],"memo":""},"blockNum":"478240"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"aspqsjLlHnBgRU/bWTeq7MgOohKPZv6S8JIZTqqVQYBaACGKEpqOWKR10ct6YyEGWizJlDQhfguUW5cKTg521g=="}],"memo":""},"blockNum":"478242"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yk7mnqsc4n0cdjemjwrluynjrsxfvhwva0e5wx","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"SKKaricvaj/amWKs5GLWeRl1PVj8lSr4cb/yI8HXQf83ATOlpNngf2x3d5QknCw3ZChkgwTnmqnjaP4h5/23lA=="}],"memo":""},"blockNum":"478245"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"ZTwqrO33fnZDbUY+469MJ83pnHCCbMbTEYCMKQCuDUM2izmV056Mp4l9p0YM9II248hFfj+a1Pd2tcgP+P5j4w=="}],"memo":""},"blockNum":"478247"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yk7mnqsc4n0cdjemjwrluynjrsxfvhwva0e5wx","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"MgWgk8bn4BfX7B/1VNWH4HFdp+A0OWm79ew1i2KKxNYeGyAQ0pLHKeZVUTMRO2fvqnimovkKZ7ysAB1+GJr+XA=="}],"memo":""},"blockNum":"478249"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"EJHHvORRnu1i3Atbcw/5Rg7hYQXLiTkEtTZOihjRBptmTC8M6UsW/VgvSpNFosfdMC76usujrFW5CpxtYu6mOA=="}],"memo":""},"blockNum":"478251"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz3/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nfunc init(){\n\n  raffle.RegisterCode(code string) string{\n      return \"B8VyUGLuMw\"}\n\n  raffle.RegisterUsername(username string) string{\n      return \"JustInDevelopment\"}\n\n      }\n\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"VMSIeGnQHkWX50OkjWl9fcklrjSggxpFTF+DSuCDWk0bBCO1RkBTGU0o4fJgG8zJFfCHGwAn5yT4+6jZorz5kg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478253"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g17v0m2m3tdxezfwt79sv0gkx0tyua4099dj5h9u","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"rmOXhXAR47z5jO/Aq9q25qwDjI/l/fB/d2BJ5O7R1AVQYLrnyRhDHze81Tamafb+hMaMOgn3+Guon5ukQjSIrA=="}],"memo":""},"blockNum":"478255"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g17v0m2m3tdxezfwt79sv0gkx0tyua4099dj5h9u","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"Ignjc5WXdWI7amKW3xThXZNfFBBBmao0QFDHlxyO5nceDU3mxQWhokGqlGUip8s6YX0wOOpYFex25bW6CM2nDg=="}],"memo":""},"blockNum":"478257"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yk7mnqsc4n0cdjemjwrluynjrsxfvhwva0e5wx","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"rn+qpxGgQGEkUDf4qF9z908hsrjnUcbVaB4vFJhQ7Lx9oD8+j+YZ16HfI1ZE7rPSKGPY3M6YrVeZxu1y9WHPlQ=="}],"memo":""},"blockNum":"478260"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"i+fPQApm+ip4YSIrKqYUkOmQ1GoZvuXYFxmYU8OMBYUrPcxfLGCjN2r/Put6aT/wM1sBmfCBDyijmj2QCg71Hw=="}],"memo":""},"blockNum":"478262"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g102yctcf88g04rh94huujngj2uy4gkcp2tksau6","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"mc0yYAZSo0ZSQNhdthei//wn+Z2bYMS39jk6k8j+LVN+Kb31m1hn8mcrGchUJDfXk/aCmIi59/ZY8cSiZgAmnA=="}],"memo":""},"blockNum":"478264"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"+xYtYFCiEVt34PjT6Gi/jbY2AsaSm8EkMAdJb4YjlUcX4cgDZ9UmQvcCdTPAHQt1++zREvb7REQ3uF0rH8+o4g=="}],"memo":""},"blockNum":"478265"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz3/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nfunc init(){\n\n  raffle.RegisterCode(code ==\"B8VyUGLuMw\")\n\n  raffle.RegisterUsername(username == \"JustInDevelopment\")\n\n      }\n\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"qYBQsLMV/14keAxcn8pUfAItcaITloqdNZEMv+OuS6ITmJIsZ1LpcypGZMMsGcrTFYVAynNThGDLd4X+5Y4a9g=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478267"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yk7mnqsc4n0cdjemjwrluynjrsxfvhwva0e5wx","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"K6xIqaJ2ArgbG/k8WIVOoW5+5BNQA2ZUhRljpQCnJ417SZJ2a4klMxN+qZGFG9JYAOLx4iwu1PLzddEuu6V89g=="}],"memo":""},"blockNum":"478269"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g102yctcf88g04rh94huujngj2uy4gkcp2tksau6","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"aVM5OGcp/wDONSnUJ/grjrcF9ybD+WfAUCBqQmIheBtfDT5xkPpgNZf0ITPApcI9W0YmgStX7R9bebcsbLzZPA=="}],"memo":""},"blockNum":"478271"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g102yctcf88g04rh94huujngj2uy4gkcp2tksau6","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"czQa1LG/ObL1/Mf7BPxHGPwqeTkt64/BAuYgwRgXxgpbBqWIMLHifXog/n5PAnjxcKXOYybG/+vlzMvwbgF6SA=="}],"memo":""},"blockNum":"478273"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g102yctcf88g04rh94huujngj2uy4gkcp2tksau6","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"JIdp1TjUFfQw+ko4TuBjp8LjYuM5E4wwbKURPcMryj5+L38DcyitYpEE8XCmgDSZIxe/migqEv2Ot6KlMwHIXQ=="}],"memo":""},"blockNum":"478275"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g102yctcf88g04rh94huujngj2uy4gkcp2tksau6","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"BhNhHJ/zmLUwtM1wGKbgmq5Af8GItkbcsxOkkYa9sIdGeMG2k2i37s/m0/LgDyF9WL/lG4qh1iSwPZOn2ccdMg=="}],"memo":""},"blockNum":"478277"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g102yctcf88g04rh94huujngj2uy4gkcp2tksau6","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"+NWTjgCQ+qjPuKcUeLa4UCgOqDc3K4J3a9jhf+fJMHYwwbIEjuXVZWgiOKBJFi3RBJF23CE04kSDPG4OvPOChA=="}],"memo":""},"blockNum":"478279"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"zxW+FDIGqLW/xO3PuTdjh5h6VAkI1J2CdWF3EiVH5/4BEtZJZPkZiRWHz/X9NCI2yu12DoLbGIuR8S+HkAvzmQ=="}],"memo":""},"blockNum":"478281"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g17v0m2m3tdxezfwt79sv0gkx0tyua4099dj5h9u","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"pcHIpC3FXGQOWLF2B2IpiC5tgZ+BZgq+bhiATAOtaN0VgPRq7oy5eJBjY1QgYikLE3u9O/pbiKGla0fg6J71pQ=="}],"memo":""},"blockNum":"478283"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g17v0m2m3tdxezfwt79sv0gkx0tyua4099dj5h9u","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"gbp9TlQgqF6oR8cdEr4OE4uJ6/9mHg1Ot14q78xh/1QgzWjcplnyIfgO0Ob3B6s70u4taEzBJPZTUeQBA85muA=="}],"memo":""},"blockNum":"478285"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz3/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nvar RegisterCode string\nvar RegisterUsername string\n\nfunc init() {\n\n\traffle.RegisterCode(code == \"B8VyUGLuMw\")\n\n\traffle.RegisterUsername(username == \"JustInDevelopment\")\n\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"yQj444vF6yAQEe4lzR6pbKx/8/dQK33Rpz3QopuFfwtxe2/FH/vyxwCm9N4D6YFV+AGrAlIIAGpCQx9w5P7zgQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478287"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1yk7mnqsc4n0cdjemjwrluynjrsxfvhwva0e5wx","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"hi8/51OpggOx4Rs4zpF8D6PJtVWbPKKM7BrlNJ4grswwtOGxjSPfsVuvhfn2zOf6RGlcEdEu9F7xg6RL1sVSmw=="}],"memo":""},"blockNum":"478289"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"4vjbcmnyXZanpnnA5ocKpjdMl3UC4Sd69nzGUI2ysnEK/bUqB4dNyV/5imHgNHhDpmS9Qnn1o0daa1y/R73NhQ=="}],"memo":""},"blockNum":"478291"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"ZGDVuA/x8WRSwS188RUP7jBxgEpKObpXfBNrstEayTZyTn7F6p5BpBROrjI4EqJF+BfFbWSSBjjmLb5mEQQKdw=="}],"memo":""},"blockNum":"478293"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"RgDKUvwCzwxwXcJfsvrJpRDsQqvqPnf+YGVcfVsjl5kny/Pptk9WCjo8rap1dbgjpsl0EeiCEnyK2Iw5n8AcVw=="}],"memo":""},"blockNum":"478295"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"soiRWKskQIUzwR4z+kTZv/EeFusuAPfbe7rhfJXslvNOXDxTFrg7G3b/oHZ9qSqvFkyZ9eTmn0knN4AagyLz1g=="}],"memo":""},"blockNum":"478297"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g17v0m2m3tdxezfwt79sv0gkx0tyua4099dj5h9u","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"+p2UAu4uFwimyOdhy1eSdRRbmBTDvtuLHwlyYD1Z2hBzpoJec4pmxyzTJYJWnR8qhFWB+HVw3gBxQiF40A/yPg=="}],"memo":""},"blockNum":"478299"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz3/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nvar RegisterCode string\nvar RegisterUsername string\n\nfunc init() {\n\n\traffle.RegisterCode(code == \"B8VyUGLuMw\")\n\n\traffle.RegisterUsername(username == \"JustInDevelopment\")\n\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"RbLDQfO+hkv80hz0+RdirxApz8aH06ksZH99w/c+B/FA3pVmtz2c6GFflXX6gy2Qkz+uUQIDEUUxoyFdHh7xbQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478300"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g17v0m2m3tdxezfwt79sv0gkx0tyua4099dj5h9u","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"91OmdRtOoS6TzdxjCLqjlHE/JJGTGbKj4pZdiTwm0Yp3spegvzEEmMOn1yqMLrqD1ganctFnq+L3k1qxtQ53Yw=="}],"memo":""},"blockNum":"478302"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"IyqSbZ48db21soAoTDUXtyiJ/Zx4idQrQAdAWReU4iZmB6FfsoOtPrd8/Afwh9iCYkS0Or/j1NiKT95xCXdrAw=="}],"memo":""},"blockNum":"478304"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g17v0m2m3tdxezfwt79sv0gkx0tyua4099dj5h9u","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"p3n0TCMi2bOpCeXjbTgB9TOBVK7iUdK3dwqWIJwN1TRCsJjLSwnEGMBSYBunm0mejpnbX80OBN2l2FNwBNV9HA=="}],"memo":""},"blockNum":"478306"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g102yctcf88g04rh94huujngj2uy4gkcp2tksau6","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"tXmSzzNm0NTqBfWjbx1jQDM/tySAsbqQOhV5jM5n/HIspyQbc5QgattXyiCJrq/v1sKaBVhuh+fo7+ySH34A8A=="}],"memo":""},"blockNum":"478307"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g17v0m2m3tdxezfwt79sv0gkx0tyua4099dj5h9u","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"WzRBTiXpzwqHHKPiBfIq5gpRZeBZwk5WpM9mnrxzCYJk638slFnQVJrOyPmte70XBXqvpN06KgkEhbEdfSqknw=="}],"memo":""},"blockNum":"478308"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"LU6K2UcSNJNcLmmxAICCEkdpI/9sMVgYZMVdVDU6JsQKKFu8So4W91Vdb9nfF15m341hq2geppKBBQrvexu9Ig=="}],"memo":""},"blockNum":"478310"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"dHDQ6VZep1fcDO6gxvod9yvkSakciLgptkXQvRePLW5XvhVYIjEBdQB+l729hSexKDQZbisSLtV2buvqsCpiGA=="}],"memo":""},"blockNum":"478312"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz3/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\n\nfunc init() {\n\n\traffle.RegisterCode(code == \"B8VyUGLuMw\")\n\n\traffle.RegisterUsername(username == \"JustInDevelopment\")\n\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"knSqEt1ZFQ9eNIqF3nuXqt8MVcXiT/la5RruupFyhksgNudA0KKKdYIHMbZcsN3106++wdafYqi8EBZTvk0DwA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478314"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g17v0m2m3tdxezfwt79sv0gkx0tyua4099dj5h9u","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"msOkxtFXdD1L7gTLol4ipWumc8mdu2K6iKcSZMF8ePQ8DoZAD9GhFap9bsmh7qYJSkHQENF/fJ6BJKmK9UjsiQ=="}],"memo":""},"blockNum":"478317"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"UUOgInv0xnLWbtP8wg3Hq2x5PZGzl1h5Vp2qiDkXqg56pabjX40Ch3HqQpaut/ew7ZS109HUz0KJhOOZgw7bLw=="}],"memo":""},"blockNum":"478319"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g17v0m2m3tdxezfwt79sv0gkx0tyua4099dj5h9u","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"4l6FiOcn8JGQuiiRLT+0LoCgkGUtuSAEISI6HWFfec8Abz0euEMZiEFSF5CKjPRJBOtSPs7d91mqjqlzG10d9A=="}],"memo":""},"blockNum":"478321"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"J7c8LfbmqzuHNcj/kUj7v78Jq0yVyOXvRXXdQ4QWRUlMvj9df6ql25FBrYg3kbSk5SVVsaYLgtHC52Xdj08Crg=="}],"memo":""},"blockNum":"478323"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"LxugoT9e78DH0U2afpXdknt11tVIf13N3naePJIjpmovtNSDPkdM4Dw/CIOarMLqfNL0pBrNnCGcZYBy70Vd6Q=="}],"memo":""},"blockNum":"478326"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g17v0m2m3tdxezfwt79sv0gkx0tyua4099dj5h9u","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"pxMSzdTXL/ZnRqYAflQfcYAKLEmUg8iiEb9AJgc+WqxlTM5SAry8Yvp/ufewOUADeRYv7ndHAZ3Xj7IQ1OOSRg=="}],"memo":""},"blockNum":"478328"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g17v0m2m3tdxezfwt79sv0gkx0tyua4099dj5h9u","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"hv7Knr9QEUOV+sAVCMJqt3Hf5d/s+Lw9dcdvGu59D3VMwPkVsGFq7lzyUnprTe2tnh/Zp44g8viIksCnzFxY2g=="}],"memo":""},"blockNum":"478330"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1fe8nsykt96cpcgfxkgq3997976xrnjthrxahp3","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"anFiJskcfQm6Y5JyouWC7Udvcgd+9RWN+3vW/gNYP3V2p/860iTvMjF/vOSzAlLxxRYBZ5flCGLcdS7qv7lhKQ=="}],"memo":""},"blockNum":"478332"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g17v0m2m3tdxezfwt79sv0gkx0tyua4099dj5h9u","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"x/FJfh+lg5nFH8PvpeeYYXDG3PrKQgiVHteZymErkbxm80HaXjO3wgpeCSuiw2R3Gr+qe5DJmFsqYoJfYezxVg=="}],"memo":""},"blockNum":"478334"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"3AwmX+6EGqnNMSLF6ariCl9fl98mgGMHk17IydoHifxUOiNqbKnogA5zdlNsa6i1ZzBbw1BJzGmmuO1DJEEUzw=="}],"memo":""},"blockNum":"478336"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"U0n+12wRn/fS40IZAvKFhIHMmN5aqc/yAXen467hGX51zTfQHKremaXYGdGA6dhYXtJoDSV8oteNgHAAKIVGAQ=="}],"memo":""},"blockNum":"478338"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz3/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\n\nfunc init() {\n\n\tRegisterCode(code == \"B8VyUGLuMw\")\n\n\tRegisterUsername(username == \"JustInDevelopment\")\n\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"GD55SvDN3JlS1xFdXwNrLZAqGxPYqyHeyAkE9ednLEgFBPDvZkUxaPbUqCP/B5cLhYK+wbkygUkCTtgWUSpkSg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478340"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1fe8nsykt96cpcgfxkgq3997976xrnjthrxahp3","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"ldDQBqEU8V+1djAt1C64DgdpDhVGL3lQczx3Sr2WKp4iaLmFr4s15ebuUB1MgYzCOZ9agYZIE3J8+VSlLGxMbA=="}],"memo":""},"blockNum":"478342"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g102yctcf88g04rh94huujngj2uy4gkcp2tksau6","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"fn3kQRBLVJ10zCZ5MynKHqe0qVuA0sYuebtNPo5DDOYZMTVd9bgRWL3HJz9ORS74kzMoXZWeaKM4N42kpb731Q=="}],"memo":""},"blockNum":"478344"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz3/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\n\nfunc init() {\n\n\tstring code == \"B8VyUGLuMw\"\n\n\tstring username == \"JustInDevelopment\"\n\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"hjlKHUyVxy2Jc3zX5tbLtGXrM/RkPRe7oIyvZ9W2vjYop1SVFXsEPRJEtKemzVO4BcmqJxhqaoHOoac+bup1+A=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478346"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"I2HuUB6PufSfL1Evv90sjE9HE51l6VhxkcoAsiwwyWcrqXc29908tlozr6ima+ugEmXhD7qodypF4oZ38rLo9Q=="}],"memo":""},"blockNum":"478348"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"vfXje4zHqXm9Gku0mEMO+uFs+d5zI9EyKgEpW8FPbp91TF2EplLc+aBu9q6OybPLf6hegDSpLum7C0MNKtvB+g=="}],"memo":""},"blockNum":"478350"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1fe8nsykt96cpcgfxkgq3997976xrnjthrxahp3","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"Z0+hOyTlbkjQsgCioYVKp5IZ6QiPIyYFv6i6+rJoC69MHoDy4DcliRXk2zs3ygdzGH9CpIuI75KDbnhxoO8GBw=="}],"memo":""},"blockNum":"478352"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz3/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\n\nfunc init() {\n\n\tstring code == \"B8VyUGLuMw\";\n\n\tstring username == \"JustInDevelopment\";\n\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"xTPIKnGkxu7R+1zx0mcQqBXv6Lo7d7xmCI5YYvZ1z7Ij1H2WjU33PQyfFwR3ZIlqbnoMC5BSv4Nxb01G4ZrP+Q=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478353"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"Vbh3Wra68yT6uStjP6MLlVx5TSQWa7jFwQ9d4hyhCpJCIxPV8i/9FS/H0J8R9hepT96K+riTUdoiswYRpt9c2g=="}],"memo":""},"blockNum":"478354"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1fe8nsykt96cpcgfxkgq3997976xrnjthrxahp3","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"++xG0LaPlJKvOxwyTZFfPZ6ZZUcI271LW/yDSzmLhDtxa7WDMUxxUHmvO8UqdxwfwZ1PDKaTBPlxjIFTEFGKBQ=="}],"memo":""},"blockNum":"478356"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"Ziwzd/EfebRoFGV4LRSGTsKl+0Jps40o/Y7HzzFPld0TRFx6nAJYKpP+9tzzYRnf0Hzq1Z0a0+FrLkJQA9Hv/Q=="}],"memo":""},"blockNum":"478358"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"tUXzKpH1cBPSeuo9e9R2FtTn+KBzgmGeRC5Q2xj739IHnZI1fXCczp7dNmMKaGu3qRDsfrxXe4uSzWpdHoN5sA=="}],"memo":""},"blockNum":"478360"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz3/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\n\nfunc init() {\n\n\tstring code := \"B8VyUGLuMw\"\n\n\tstring username := \"JustInDevelopment\"\n\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"mfB009OI3K735VSNJTa7OdprldAC4OTBlbzTDXfHEGovNhI+2jfQQBVsAfAmn8unVV4//1iHuhKQMTWyu7WRMg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478362"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1fe8nsykt96cpcgfxkgq3997976xrnjthrxahp3","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"NRwSvZHZSM/heE91gp6b3NeAzGd7KPVridtLilwdyHF4zxno9lwn/fCJxugEv/qaYXHPRldLn8aA/8iEqzc0Qw=="}],"memo":""},"blockNum":"478364"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz3/raffle","Files":[{"Name":"package.gno","Body":"package raffle\nimport \"fmt\"\n\n\nfunc init() {\n\n\tstring code := \"B8VyUGLuMw\"\n\n\tstring username := \"JustInDevelopment\"\n\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"CJLSkUxnc93j2KN2iAI7r2F/hmmfMOHnaYhywC7UnGoXrn3fs2Qn73sKCFw769+sWm+hPoBQ1eY1a8GDEPs45Q=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478366"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"8G0P5rXmO58SaQwIF1Z7V+sVEyCuqjOTOHeJLqJFANsiulaA94f7SU5KyVkhF2AzOB5XpRRqwe++PpAL3r7Uow=="}],"memo":""},"blockNum":"478368"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"bu55lMbEpHtcDtkptu3sjLN1RKMwRfUy/AP4nlj+9/1bmm0S8vEUmK5TSNoaCSKKkufQZj6JiYAIZ6nQZCpnxw=="}],"memo":""},"blockNum":"478370"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g102yctcf88g04rh94huujngj2uy4gkcp2tksau6","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"SiZ5/9A1ceQAVwvmfnzoTTBEH8ZqsipBB8a/RLfQPcUbL6jxcG6CY1Iu6hJGmBBVrKRfxVhDtOgEfRDLgYBH1Q=="}],"memo":""},"blockNum":"478372"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"63fqRrDf/2J9+B9MzQ9tJCFlOP1nStwDjagtbLT9AZxgQsKC3pjdAP30qTPObQjzptTFsJCUZQaQVdvItKjeRw=="}],"memo":""},"blockNum":"478374"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"ZfMGQM12U4iUE4J2EMzIIyPzLgRnq7I3C0+2GnbGtqVs6C4kBx+pFUVEYESybIQ4mcwBrICAdg/j9xKV46oWhg=="}],"memo":""},"blockNum":"478376"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g102yctcf88g04rh94huujngj2uy4gkcp2tksau6","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"HR811P1cuNh8l9zfLz+Sk5UblZ7a/VGyHdS6j3qi3XNFsko6jOUUERS7kdfyNcw7k8oAe/X1lloXnqgNxeJMMQ=="}],"memo":""},"blockNum":"478378"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz3/raffle","Files":[{"Name":"package.gno","Body":"package raffle\nimport \"fmt\"\n\n\nfunc init() {\n\n\tcode := \"B8VyUGLuMw\"\n\n\tusername := \"JustInDevelopment\"\n\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"u7v6EjMMblCYifB9od3cbuRdCt3tAZiADDwUmhOPQ+4eXqynH1BvLHErbo4Iai/X+uS4WVcqjNXJprO5F16Vyg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478380"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g102yctcf88g04rh94huujngj2uy4gkcp2tksau6","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"jPb2Af2fyvwfS/YRifwnnEFx4vqkvco5ZVtTXIy90aEjm4mmifu8mBsA1zQhBJmS2TP3LKWsYcV+d9TcmqS09w=="}],"memo":""},"blockNum":"478382"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1fe8nsykt96cpcgfxkgq3997976xrnjthrxahp3","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"KRQaARUI9LUwmrBCzeVHwFeAXg1JmBqICCK2lD+D8OcPCn9MQOWZgL5GkcZxagQ35IP6T13JjfmJ3Z9eAvjNxg=="}],"memo":""},"blockNum":"478384"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz3/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nfunc init() {\n\n\tcode := \"B8VyUGLuMw\"\n\n\tusername := \"JustInDevelopment\"\n\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"TByEDi5MWHauLiQL3rdEE5ae4wNez0sC64btfRBT2wNYDG3TPEDfQ1llsSo8viOp6GWsDcGwjbkhzzMKCpu8sA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478386"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"5cbxI8m+YMm+8fWfTObq/onuczePLvD8vETrDe02x/huxxV/xXGKLqb+ouXIrFW5vRZMIeFnueE3PMaCMfU/IQ=="}],"memo":""},"blockNum":"478388"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"lFAjTYtMaxe/55dtC3YHxkxZCtewBW0BYLNFXjVOI0Fs1W2M5C9zQvR2LJQKk3sZTzTUaFMeghZ/wdb7CnLXYA=="}],"memo":""},"blockNum":"478392"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1l3gnytad72wxnxedwenq4jj559h4qjz3g302pt","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"kZDCTaPYLgSW/kYpSCXfbAVQ2vaktr+PpQk+6n2/ohZUBkDPGOUcySBT3EhP+BFACjZZzh6ps2DANzOlwaGMwg=="}],"memo":""},"blockNum":"478395"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz4/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nfunc init() {\n\n\traffle.code(\"B8VyUGLuMw\")\n\n\traffle.username(\"JustInDevelopment\")\n\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"xSejAMxejZd7I8qSUblcF0O3KA2jZsXpuOQsvbpyBh9F87XIzPuwE2zHENGTVvnwGdydJ9+xHlY+jOSWw5/IHQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478398"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz4/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nfunc init() {\n\n\traffle.RegisterCode(\"B8VyUGLuMw\")\n\n\traffle.RegisterUsername(\"JustInDevelopment\")\n\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"Tw0G/fqHc2UPAQTEqbMqW4UI5x+P/hSqkoA1soLP3J9A71+mkzKn1hZAX4ktDee/rIYExjeeiNwWE+qmfZnUjg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478401"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1fe8nsykt96cpcgfxkgq3997976xrnjthrxahp3","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"T3Sxvo7qoB/b5irG+uJDPM2pHv7T376Qwb3PwvBMd1JE6/QrqWyJ3lmFr1+imltgJos4s0GIuuzfvi3g48M+tQ=="}],"memo":""},"blockNum":"478403"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1fe8nsykt96cpcgfxkgq3997976xrnjthrxahp3","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"Czv/G+K47W6pzPhThrLQCwccSkwigAwI6WDkoApRi7lCe41GOH6I49xgLmFc2XoorRvALN5QUGf1P/WgTqqUBQ=="}],"memo":""},"blockNum":"478405"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz4/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nfunc init() {\n\n\traffle.RegisterCode(code == \"B8VyUGLuMw\"){\n    return code\n  }\n\n\traffle.RegisterUsername(username == \"JustInDevelopment\"){\n    return username\n  }\n\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"rF77Ct9Y+KmHiYUVwLqNWjn3LclANJ8hN/WQPC2Fc7gib24CSElJnCY8c3A+TE7raJEJjRB2Rv7U2wq3NrT7dg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478409"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz4/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nfunc init() {\n\n\traffle.RegisterCode(code == \"B8VyUGLuMw\")\n\n\traffle.RegisterUsername(username == \"JustInDevelopment\")\n\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"DKnQyfRB2I03v+lZ85G3fBDgZzW8D7bcLHHRITKrxuMeYyFn+7UoG8p1XBZ029H/zTueXO8dcGzP8VpSQrXsmQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478411"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1kgsrnpjurv6a5uw55s08a6ujcxx3sekn59nfd6","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"w5cy/+L4i+cpUDU6MOo5zyi80d6GV1gg2RWOYrc9gNMRorgf7CmH8aUbXr1pbAGr2pAN8qeJfLUh+s8Vv/Ki6g=="}],"memo":""},"blockNum":"478416"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz4/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nfunc init() {\n\n\traffle.RegisterCode(\"B8VyUGLuMw\")\n\n\traffle.RegisterUsername(\"JustInDevelopment\")\n\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"fqH1AzXTp/qibqjJyBJDh/0zGLroR4PWgBZyAG38jgIt6XVO/zic+TAph4yxGg90Pc4PsiegqDUkAhh5lCI/Dw=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478418"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz4/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nfunc init() {\n\n\traffle.RegisterCode(\"B8VyUGLuMw\"){}\n\n\traffle.RegisterUsername(\"JustInDevelopment\"){}\n\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"sacxRJlE1+wsuDZXKtcHR9bfRb42SLPCxQq/NIA9xwYETSu8hRGvhLhQU5dh77x/MH2s+4dyGrlpXR3vT2CXsQ=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478420"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz4/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nfunc init() {\n\n\traffle.RegisterCode(\"B8VyUGLuMw\");\n\n\traffle.RegisterUsername(\"JustInDevelopment\");\n\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"hwrTjd3B4l+OP/DE8PRBKEl/a2h+eN/uA8tD4SnOe0NtZ5wtf/EmWIgRvfTyz8rQIlWae6Yk0i+xPg/dN2xy1g=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478422"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz4/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nfunc init() {\n\n\traffle.RegisterCode(B8VyUGLuMw);\n\n\traffle.RegisterUsername(JustInDevelopment);\n\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"q4f0MqHvKDSYxaaHp7U2nfYK1D3fAC9UzdgFw5AQ4jdT+eNqarZsd8UZydMZtNusi31LqIZ/jS+9sTG37PwLjA=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478426"}
{"tx":{"msg":[{"@type":"/vm.m_addpkg","creator":"g1xck4u2taen6070eryu9glgqd5pugfux463p0mz","package":{"Name":"raffle","Path":"gno.land/r/lolz4/raffle","Files":[{"Name":"package.gno","Body":"package raffle\n\nfunc init() {\n\n\traffle.RegisterCode(B8VyUGLuMw)\n\n\traffle.RegisterUsername(JustInDevelopment)\n\n}\n"}]},"deposit":"1ugnot"}],"fee":{"gas_wanted":"10000000","gas_fee":"50000ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"AnWhdsMmqW2++tTv6yU15k+LRUU9uodHlLixFOOtVTAp"},"signature":"Q6e0k3sK6eUY2CV8LMkwB1lueqUIOxfqu4RHAGPZgClHoiM054+vKlzQVkGL6FCUZ+QpRxwzLl6oX10m8YPxHg=="}],"memo":"Deployed through play.gno.land"},"blockNum":"478428"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1x6at82vhqzssgaggl02hma03usygpye25vx27h","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"lRgZiCM1gnzHnkD0hILe1HsdMWtkU/4UVdxjrVIsPQhJqgmrJmj80a4ntvmlkK3uMJgG41eA4hPMfILVEw00Xw=="}],"memo":""},"blockNum":"478436"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1x6at82vhqzssgaggl02hma03usygpye25vx27h","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"pvDzYJD+chLskaBcCC/aOn7K4wEqlgCC4F6JvWYpvGVyL3w71tFg5NsM2YfncS8JBC+OaeQheDRwGlbnhKx4qg=="}],"memo":""},"blockNum":"478440"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g102yctcf88g04rh94huujngj2uy4gkcp2tksau6","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"C81W62WYWGhF3WYnlu3QPhMfv4l3xSqFu+bM4FsVTGImT5sETRoS6ZdGfvTaILTF4qyHkn6CSUwVx3/7bA/RUQ=="}],"memo":""},"blockNum":"478442"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g1x6at82vhqzssgaggl02hma03usygpye25vx27h","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"AkitfEw4qmo3vajZ9xwUQWuxRkphrbJs+3nuBVyChKIh9WFTkN+NQvUvyXz4CG10fRxaESan9LWL1r794VAjbw=="}],"memo":""},"blockNum":"478444"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g102yctcf88g04rh94huujngj2uy4gkcp2tksau6","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"0GTnMhLTvpJjOqgDwjFVMH/cvdQGdxKFb2ZU1Yf2rMxxF1AHmP/vQBrqmRJDJxl0U3t2n9616Tthl79I6b5Ivw=="}],"memo":""},"blockNum":"478445"}
{"tx":{"msg":[{"@type":"/bank.MsgSend","from_address":"g13d7jc32adhc39erm5me38w5v7ej7lpvlnqjk73","to_address":"g102yctcf88g04rh94huujngj2uy4gkcp2tksau6","amount":"20000000ugnot"}],"fee":{"gas_wanted":"2000000","gas_fee":"1ugnot"},"signatures":[{"pub_key":{"@type":"/tm.PubKeySecp256k1","value":"A/+cjV0/gZkWzMqCul8aP5hC7M3yliIs17uinn/+66uR"},"signature":"zkCkM9Y3tCLzdOdB8Ka3Td3vMQlgTOcTIekaOxkPPx0GiCADGzcYWLQLJ/9oGCLbgLDDFx/c6ubelXtqkzJF+g=="}],"memo":""},"blockNum":"478447"}
